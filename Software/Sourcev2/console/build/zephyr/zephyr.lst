
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	80 32 00 20 6d 39 00 00 45 99 00 00 41 39 00 00     .2. m9..E...A9..
    1010:	41 39 00 00 41 39 00 00 41 39 00 00 00 00 00 00     A9..A9..A9......
	...
    102c:	a9 35 00 00 41 39 00 00 00 00 00 00 55 35 00 00     .5..A9......U5..
    103c:	41 39 00 00                                         A9..

00001040 <_irq_vector_table>:
    1040:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    1050:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    1060:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    1070:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    1080:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    1090:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10a0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10b0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10c0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10d0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10e0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..
    10f0:	59 36 00 00 59 36 00 00 59 36 00 00 59 36 00 00     Y6..Y6..Y6..Y6..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <main>:
	return 0;
}
#endif /* IS_ENABLED(CONFIG_USB_DEVICE_STACK_NEXT) */

int main(void)
{
    13d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct device *const dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
    13d6:	2400      	movs	r4, #0
#if defined(CONFIG_USB_DEVICE_STACK_NEXT)
	if (enable_usb_device_next()) {
		return 0;
	}
#else
	if (usb_enable(NULL)) {
    13d8:	4620      	mov	r0, r4
	uint32_t dtr = 0;
    13da:	9401      	str	r4, [sp, #4]
	if (usb_enable(NULL)) {
    13dc:	f001 fa08 	bl	27f0 <usb_enable>
    13e0:	b9d8      	cbnz	r0, 141a <main+0x46>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    13e2:	4c0f      	ldr	r4, [pc, #60]	; (1420 <main+0x4c>)
		return 0;
	}
#endif

	/* Poll if the DTR flag was set */
	while (!dtr) {
    13e4:	9b01      	ldr	r3, [sp, #4]
    13e6:	b15b      	cbz	r3, 1400 <main+0x2c>
		/* Give CPU resources to low priority threads. */
		k_sleep(K_MSEC(100));
	}

	while (1) {
		printk("Hello World! %s\n", CONFIG_ARCH);
    13e8:	4d0e      	ldr	r5, [pc, #56]	; (1424 <main+0x50>)
    13ea:	4c0f      	ldr	r4, [pc, #60]	; (1428 <main+0x54>)
    13ec:	4629      	mov	r1, r5
    13ee:	4620      	mov	r0, r4
    13f0:	f007 fd10 	bl	8e14 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    13f4:	2100      	movs	r1, #0
    13f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13fa:	f007 f8c1 	bl	8580 <z_impl_k_sleep>
	while (1) {
    13fe:	e7f5      	b.n	13ec <main+0x18>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1400:	68a3      	ldr	r3, [r4, #8]
    1402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1404:	b11b      	cbz	r3, 140e <main+0x3a>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    1406:	aa01      	add	r2, sp, #4
    1408:	2104      	movs	r1, #4
    140a:	4620      	mov	r0, r4
    140c:	4798      	blx	r3
    140e:	2100      	movs	r1, #0
    1410:	f640 40cd 	movw	r0, #3277	; 0xccd
    1414:	f007 f8b4 	bl	8580 <z_impl_k_sleep>
    1418:	e7e4      	b.n	13e4 <main+0x10>
		k_sleep(K_SECONDS(1));
	}
}
    141a:	4620      	mov	r0, r4
    141c:	b003      	add	sp, #12
    141e:	bd30      	pop	{r4, r5, pc}
    1420:	0000a838 	.word	0x0000a838
    1424:	0000ade8 	.word	0x0000ade8
    1428:	0000adec 	.word	0x0000adec

0000142c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    142c:	4b01      	ldr	r3, [pc, #4]	; (1434 <char_out+0x8>)
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	4718      	bx	r3
    1432:	bf00      	nop
    1434:	200000b0 	.word	0x200000b0

00001438 <__printk_hook_install>:
	_char_out = fn;
    1438:	4b01      	ldr	r3, [pc, #4]	; (1440 <__printk_hook_install+0x8>)
    143a:	6018      	str	r0, [r3, #0]
}
    143c:	4770      	bx	lr
    143e:	bf00      	nop
    1440:	200000b0 	.word	0x200000b0

00001444 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1444:	b507      	push	{r0, r1, r2, lr}
    1446:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1448:	2100      	movs	r1, #0
    144a:	4602      	mov	r2, r0
    144c:	9100      	str	r1, [sp, #0]
    144e:	4803      	ldr	r0, [pc, #12]	; (145c <vprintk+0x18>)
    1450:	f000 f914 	bl	167c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1454:	b003      	add	sp, #12
    1456:	f85d fb04 	ldr.w	pc, [sp], #4
    145a:	bf00      	nop
    145c:	0000142d 	.word	0x0000142d

00001460 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1464:	8b05      	ldrh	r5, [r0, #24]
{
    1466:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1468:	0728      	lsls	r0, r5, #28
{
    146a:	4690      	mov	r8, r2
	if (processing) {
    146c:	d411      	bmi.n	1492 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    146e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1470:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1474:	f040 80cd 	bne.w	1612 <process_event+0x1b2>
			evt = process_recheck(mgr);
    1478:	4620      	mov	r0, r4
    147a:	f007 fec2 	bl	9202 <process_recheck>
		}

		if (evt == EVT_NOP) {
    147e:	b178      	cbz	r0, 14a0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1480:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1482:	8b21      	ldrh	r1, [r4, #24]
    1484:	2804      	cmp	r0, #4
    1486:	d811      	bhi.n	14ac <process_event+0x4c>
    1488:	e8df f000 	tbb	[pc, r0]
    148c:	856d10c3 	.word	0x856d10c3
    1490:	95          	.byte	0x95
    1491:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1492:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1494:	bf0c      	ite	eq
    1496:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    149a:	f045 0520 	orrne.w	r5, r5, #32
    149e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    14a0:	f388 8811 	msr	BASEPRI, r8
    14a4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    14a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14ac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14b0:	45aa      	cmp	sl, r5
    14b2:	f000 80a6 	beq.w	1602 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    14b6:	2700      	movs	r7, #0
    14b8:	46b9      	mov	r9, r7
    14ba:	463e      	mov	r6, r7
    14bc:	68a3      	ldr	r3, [r4, #8]
    14be:	2b00      	cmp	r3, #0
    14c0:	f000 80bd 	beq.w	163e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14c4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14c8:	8321      	strh	r1, [r4, #24]
    14ca:	f388 8811 	msr	BASEPRI, r8
    14ce:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14d2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14d4:	2900      	cmp	r1, #0
    14d6:	f000 80bb 	beq.w	1650 <process_event+0x1f0>
	return node->next;
    14da:	680d      	ldr	r5, [r1, #0]
    14dc:	2900      	cmp	r1, #0
    14de:	f000 80b7 	beq.w	1650 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    14e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    14e6:	4633      	mov	r3, r6
    14e8:	4652      	mov	r2, sl
    14ea:	4620      	mov	r0, r4
    14ec:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14ee:	2d00      	cmp	r5, #0
    14f0:	d076      	beq.n	15e0 <process_event+0x180>
    14f2:	682b      	ldr	r3, [r5, #0]
    14f4:	4629      	mov	r1, r5
    14f6:	461d      	mov	r5, r3
    14f8:	e7f0      	b.n	14dc <process_event+0x7c>
    14fa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14fe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1500:	2a01      	cmp	r2, #1
    1502:	d81b      	bhi.n	153c <process_event+0xdc>
	list->head = NULL;
    1504:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1506:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    150a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    150c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150e:	b289      	uxth	r1, r1
	list->tail = NULL;
    1510:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1514:	d109      	bne.n	152a <process_event+0xca>
    1516:	463b      	mov	r3, r7
    1518:	e003      	b.n	1522 <process_event+0xc2>
				mgr->refs += 1U;
    151a:	8b62      	ldrh	r2, [r4, #26]
    151c:	3201      	adds	r2, #1
    151e:	8362      	strh	r2, [r4, #26]
	return node->next;
    1520:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1522:	2b00      	cmp	r3, #0
    1524:	d1f9      	bne.n	151a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1526:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    152a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    152c:	4620      	mov	r0, r4
    152e:	f007 fe68 	bl	9202 <process_recheck>
    1532:	2800      	cmp	r0, #0
    1534:	d07b      	beq.n	162e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1536:	f041 0120 	orr.w	r1, r1, #32
    153a:	e077      	b.n	162c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    153c:	2b04      	cmp	r3, #4
    153e:	d10a      	bne.n	1556 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1540:	f021 0107 	bic.w	r1, r1, #7
    1544:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1546:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1548:	4620      	mov	r0, r4
    154a:	f007 fe5a 	bl	9202 <process_recheck>
    154e:	b110      	cbz	r0, 1556 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1550:	f041 0120 	orr.w	r1, r1, #32
    1554:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1556:	8b21      	ldrh	r1, [r4, #24]
    1558:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    155c:	45aa      	cmp	sl, r5
    155e:	d050      	beq.n	1602 <process_event+0x1a2>
    1560:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1562:	46b9      	mov	r9, r7
    1564:	e7aa      	b.n	14bc <process_event+0x5c>
			transit = mgr->transitions->start;
    1566:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1568:	f021 0107 	bic.w	r1, r1, #7
    156c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1570:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1572:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1576:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1578:	d12d      	bne.n	15d6 <process_event+0x176>
		    || (transit != NULL)) {
    157a:	f1b9 0f00 	cmp.w	r9, #0
    157e:	d040      	beq.n	1602 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1580:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1584:	8321      	strh	r1, [r4, #24]
    1586:	f388 8811 	msr	BASEPRI, r8
    158a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    158e:	493a      	ldr	r1, [pc, #232]	; (1678 <process_event+0x218>)
    1590:	4620      	mov	r0, r4
    1592:	47c8      	blx	r9
    1594:	e029      	b.n	15ea <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1596:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    159a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    159c:	f041 0104 	orr.w	r1, r1, #4
    15a0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    15a2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    15a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    15a8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15aa:	d0e6      	beq.n	157a <process_event+0x11a>
    15ac:	2700      	movs	r7, #0
		res = 0;
    15ae:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15b0:	f04f 0a04 	mov.w	sl, #4
    15b4:	e782      	b.n	14bc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15b6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    15ba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15bc:	f041 0105 	orr.w	r1, r1, #5
    15c0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    15c2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    15c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    15c8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15ca:	d0d6      	beq.n	157a <process_event+0x11a>
    15cc:	2700      	movs	r7, #0
		res = 0;
    15ce:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15d0:	f04f 0a05 	mov.w	sl, #5
    15d4:	e772      	b.n	14bc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    15d6:	2700      	movs	r7, #0
		res = 0;
    15d8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15da:	f04f 0a06 	mov.w	sl, #6
    15de:	e76d      	b.n	14bc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15e0:	462b      	mov	r3, r5
    15e2:	e787      	b.n	14f4 <process_event+0x94>
			if (transit != NULL) {
    15e4:	f1b9 0f00 	cmp.w	r9, #0
    15e8:	d1d1      	bne.n	158e <process_event+0x12e>
	__asm__ volatile(
    15ea:	f04f 0320 	mov.w	r3, #32
    15ee:	f3ef 8811 	mrs	r8, BASEPRI
    15f2:	f383 8812 	msr	BASEPRI_MAX, r3
    15f6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    15fa:	8b23      	ldrh	r3, [r4, #24]
    15fc:	f023 0308 	bic.w	r3, r3, #8
    1600:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1602:	8b25      	ldrh	r5, [r4, #24]
    1604:	06ea      	lsls	r2, r5, #27
    1606:	d52e      	bpl.n	1666 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1608:	f025 0310 	bic.w	r3, r5, #16
    160c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    160e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1612:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1614:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1616:	2e00      	cmp	r6, #0
    1618:	f6bf af6f 	bge.w	14fa <process_event+0x9a>
	list->head = NULL;
    161c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    161e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1620:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1624:	f021 0107 	bic.w	r1, r1, #7
    1628:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    162c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    162e:	8b21      	ldrh	r1, [r4, #24]
    1630:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1634:	45aa      	cmp	sl, r5
    1636:	f04f 0900 	mov.w	r9, #0
    163a:	f47f af3f 	bne.w	14bc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    163e:	2f00      	cmp	r7, #0
    1640:	d09b      	beq.n	157a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1642:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1646:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1648:	f388 8811 	msr	BASEPRI, r8
    164c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1650:	2f00      	cmp	r7, #0
    1652:	d0c7      	beq.n	15e4 <process_event+0x184>
	return node->next;
    1654:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1656:	4639      	mov	r1, r7
    1658:	4633      	mov	r3, r6
    165a:	4652      	mov	r2, sl
    165c:	4620      	mov	r0, r4
    165e:	f007 fdfc 	bl	925a <notify_one>
	list->head = node;
    1662:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1664:	e7f4      	b.n	1650 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1666:	06ab      	lsls	r3, r5, #26
    1668:	f57f af1a 	bpl.w	14a0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    166c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1670:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1672:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1676:	e6ff      	b.n	1478 <process_event+0x18>
    1678:	00009287 	.word	0x00009287

0000167c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1680:	4681      	mov	r9, r0
    1682:	b095      	sub	sp, #84	; 0x54
    1684:	468b      	mov	fp, r1
    1686:	4617      	mov	r7, r2
    1688:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    168a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    168c:	7838      	ldrb	r0, [r7, #0]
    168e:	b908      	cbnz	r0, 1694 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1690:	4628      	mov	r0, r5
    1692:	e358      	b.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
			OUTC(*fp++);
    1694:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    1696:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1698:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    169a:	d006      	beq.n	16aa <z_cbvprintf_impl+0x2e>
			OUTC('%');
    169c:	4659      	mov	r1, fp
    169e:	47c8      	blx	r9
    16a0:	2800      	cmp	r0, #0
    16a2:	f2c0 8350 	blt.w	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    16a6:	3501      	adds	r5, #1
		if (bps == NULL) {
    16a8:	e1fb      	b.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		} state = {
    16aa:	2218      	movs	r2, #24
    16ac:	2100      	movs	r1, #0
    16ae:	a80e      	add	r0, sp, #56	; 0x38
    16b0:	f008 f96a 	bl	9988 <memset>
	if (*sp == '%') {
    16b4:	787b      	ldrb	r3, [r7, #1]
    16b6:	2b25      	cmp	r3, #37	; 0x25
    16b8:	d07d      	beq.n	17b6 <z_cbvprintf_impl+0x13a>
    16ba:	2300      	movs	r3, #0
    16bc:	1c78      	adds	r0, r7, #1
    16be:	4698      	mov	r8, r3
    16c0:	469e      	mov	lr, r3
    16c2:	469c      	mov	ip, r3
    16c4:	461e      	mov	r6, r3
    16c6:	4601      	mov	r1, r0
		switch (*sp) {
    16c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    16cc:	2a2b      	cmp	r2, #43	; 0x2b
    16ce:	f000 80a1 	beq.w	1814 <z_cbvprintf_impl+0x198>
    16d2:	f200 8098 	bhi.w	1806 <z_cbvprintf_impl+0x18a>
    16d6:	2a20      	cmp	r2, #32
    16d8:	f000 809f 	beq.w	181a <z_cbvprintf_impl+0x19e>
    16dc:	2a23      	cmp	r2, #35	; 0x23
    16de:	f000 809f 	beq.w	1820 <z_cbvprintf_impl+0x1a4>
    16e2:	b12b      	cbz	r3, 16f0 <z_cbvprintf_impl+0x74>
    16e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    16e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    16ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    16f0:	f1b8 0f00 	cmp.w	r8, #0
    16f4:	d005      	beq.n	1702 <z_cbvprintf_impl+0x86>
    16f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    16fa:	f043 0320 	orr.w	r3, r3, #32
    16fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1702:	f1be 0f00 	cmp.w	lr, #0
    1706:	d005      	beq.n	1714 <z_cbvprintf_impl+0x98>
    1708:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    170c:	f043 0310 	orr.w	r3, r3, #16
    1710:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1714:	f1bc 0f00 	cmp.w	ip, #0
    1718:	d005      	beq.n	1726 <z_cbvprintf_impl+0xaa>
    171a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    171e:	f043 0308 	orr.w	r3, r3, #8
    1722:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1726:	b12e      	cbz	r6, 1734 <z_cbvprintf_impl+0xb8>
    1728:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    172c:	f043 0304 	orr.w	r3, r3, #4
    1730:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1734:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1738:	f003 0044 	and.w	r0, r3, #68	; 0x44
    173c:	2844      	cmp	r0, #68	; 0x44
    173e:	d103      	bne.n	1748 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1740:	f36f 1386 	bfc	r3, #6, #1
    1744:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1748:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    174c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1752:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1756:	d17f      	bne.n	1858 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1758:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    175c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1760:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1762:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1766:	781a      	ldrb	r2, [r3, #0]
    1768:	2a2e      	cmp	r2, #46	; 0x2e
    176a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    176e:	bf0c      	ite	eq
    1770:	2101      	moveq	r1, #1
    1772:	2100      	movne	r1, #0
    1774:	f361 0241 	bfi	r2, r1, #1, #1
    1778:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    177c:	d178      	bne.n	1870 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    177e:	785a      	ldrb	r2, [r3, #1]
    1780:	2a2a      	cmp	r2, #42	; 0x2a
    1782:	d06e      	beq.n	1862 <z_cbvprintf_impl+0x1e6>
	++sp;
    1784:	3301      	adds	r3, #1
	size_t val = 0;
    1786:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1788:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    178c:	4619      	mov	r1, r3
    178e:	f811 0b01 	ldrb.w	r0, [r1], #1
    1792:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1796:	2e09      	cmp	r6, #9
    1798:	f240 8095 	bls.w	18c6 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    179c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    17a0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    17a2:	f3c1 0040 	ubfx	r0, r1, #1, #1
    17a6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    17aa:	460a      	mov	r2, r1
    17ac:	f360 0241 	bfi	r2, r0, #1, #1
    17b0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    17b4:	e05c      	b.n	1870 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    17b6:	1cba      	adds	r2, r7, #2
    17b8:	9203      	str	r2, [sp, #12]
    17ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    17be:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    17c2:	07da      	lsls	r2, r3, #31
    17c4:	f140 812e 	bpl.w	1a24 <CONFIG_USB_DEVICE_VID+0x10f>
			width = va_arg(ap, int);
    17c8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    17cc:	f1b8 0f00 	cmp.w	r8, #0
    17d0:	da07      	bge.n	17e2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    17d2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    17d6:	f042 0204 	orr.w	r2, r2, #4
    17da:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    17de:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    17e2:	075e      	lsls	r6, r3, #29
    17e4:	f140 8127 	bpl.w	1a36 <CONFIG_USB_DEVICE_VID+0x121>
			int arg = va_arg(ap, int);
    17e8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    17ec:	f1ba 0f00 	cmp.w	sl, #0
    17f0:	f280 8126 	bge.w	1a40 <CONFIG_USB_DEVICE_VID+0x12b>
				conv->prec_present = false;
    17f4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    17f8:	f36f 0341 	bfc	r3, #1, #1
    17fc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1800:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1804:	e11c      	b.n	1a40 <CONFIG_USB_DEVICE_VID+0x12b>
		switch (*sp) {
    1806:	2a2d      	cmp	r2, #45	; 0x2d
    1808:	d00d      	beq.n	1826 <z_cbvprintf_impl+0x1aa>
    180a:	2a30      	cmp	r2, #48	; 0x30
    180c:	f47f af69 	bne.w	16e2 <z_cbvprintf_impl+0x66>
    1810:	2301      	movs	r3, #1
	} while (loop);
    1812:	e758      	b.n	16c6 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1814:	f04f 0c01 	mov.w	ip, #1
    1818:	e755      	b.n	16c6 <z_cbvprintf_impl+0x4a>
    181a:	f04f 0e01 	mov.w	lr, #1
    181e:	e752      	b.n	16c6 <z_cbvprintf_impl+0x4a>
    1820:	f04f 0801 	mov.w	r8, #1
    1824:	e74f      	b.n	16c6 <z_cbvprintf_impl+0x4a>
    1826:	2601      	movs	r6, #1
    1828:	e74d      	b.n	16c6 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    182a:	fb0e 6202 	mla	r2, lr, r2, r6
    182e:	3a30      	subs	r2, #48	; 0x30
    1830:	4603      	mov	r3, r0
    1832:	4618      	mov	r0, r3
    1834:	f810 6b01 	ldrb.w	r6, [r0], #1
    1838:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    183c:	f1bc 0f09 	cmp.w	ip, #9
    1840:	d9f3      	bls.n	182a <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    1842:	4299      	cmp	r1, r3
    1844:	d08f      	beq.n	1766 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1846:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    184a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    184c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    184e:	f362 0141 	bfi	r1, r2, #1, #1
    1852:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1856:	e786      	b.n	1766 <z_cbvprintf_impl+0xea>
    1858:	460b      	mov	r3, r1
	size_t val = 0;
    185a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    185c:	f04f 0e0a 	mov.w	lr, #10
    1860:	e7e7      	b.n	1832 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    1862:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1866:	f042 0204 	orr.w	r2, r2, #4
    186a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    186e:	3302      	adds	r3, #2
	switch (*sp) {
    1870:	781a      	ldrb	r2, [r3, #0]
    1872:	2a6c      	cmp	r2, #108	; 0x6c
    1874:	d047      	beq.n	1906 <z_cbvprintf_impl+0x28a>
    1876:	d82b      	bhi.n	18d0 <z_cbvprintf_impl+0x254>
    1878:	2a68      	cmp	r2, #104	; 0x68
    187a:	d031      	beq.n	18e0 <z_cbvprintf_impl+0x264>
    187c:	2a6a      	cmp	r2, #106	; 0x6a
    187e:	d04b      	beq.n	1918 <CONFIG_USB_DEVICE_VID+0x3>
    1880:	2a4c      	cmp	r2, #76	; 0x4c
    1882:	d051      	beq.n	1928 <CONFIG_USB_DEVICE_VID+0x13>
	conv->specifier = *sp++;
    1884:	461a      	mov	r2, r3
    1886:	f812 3b01 	ldrb.w	r3, [r2], #1
    188a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    188c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    188e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1892:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1896:	f200 80be 	bhi.w	1a16 <CONFIG_USB_DEVICE_VID+0x101>
    189a:	2b6d      	cmp	r3, #109	; 0x6d
    189c:	d851      	bhi.n	1942 <CONFIG_USB_DEVICE_VID+0x2d>
    189e:	2b69      	cmp	r3, #105	; 0x69
    18a0:	f200 80b9 	bhi.w	1a16 <CONFIG_USB_DEVICE_VID+0x101>
    18a4:	2b57      	cmp	r3, #87	; 0x57
    18a6:	d867      	bhi.n	1978 <CONFIG_USB_DEVICE_VID+0x63>
    18a8:	2b41      	cmp	r3, #65	; 0x41
    18aa:	d003      	beq.n	18b4 <z_cbvprintf_impl+0x238>
    18ac:	3b45      	subs	r3, #69	; 0x45
    18ae:	2b02      	cmp	r3, #2
    18b0:	f200 80b1 	bhi.w	1a16 <CONFIG_USB_DEVICE_VID+0x101>
		conv->specifier_cat = SPECIFIER_FP;
    18b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    18b8:	2204      	movs	r2, #4
    18ba:	f362 0302 	bfi	r3, r2, #0, #3
    18be:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    18c2:	2301      	movs	r3, #1
			break;
    18c4:	e073      	b.n	19ae <CONFIG_USB_DEVICE_VID+0x99>
		val = 10U * val + *sp++ - '0';
    18c6:	fb0c 0202 	mla	r2, ip, r2, r0
    18ca:	3a30      	subs	r2, #48	; 0x30
    18cc:	460b      	mov	r3, r1
    18ce:	e75d      	b.n	178c <z_cbvprintf_impl+0x110>
	switch (*sp) {
    18d0:	2a74      	cmp	r2, #116	; 0x74
    18d2:	d025      	beq.n	1920 <CONFIG_USB_DEVICE_VID+0xb>
    18d4:	2a7a      	cmp	r2, #122	; 0x7a
    18d6:	d1d5      	bne.n	1884 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    18d8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    18dc:	2106      	movs	r1, #6
    18de:	e00c      	b.n	18fa <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    18e0:	785a      	ldrb	r2, [r3, #1]
    18e2:	2a68      	cmp	r2, #104	; 0x68
    18e4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    18e8:	d106      	bne.n	18f8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    18ea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    18ec:	f361 02c6 	bfi	r2, r1, #3, #4
    18f0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    18f4:	3302      	adds	r3, #2
    18f6:	e7c5      	b.n	1884 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    18f8:	2102      	movs	r1, #2
    18fa:	f361 02c6 	bfi	r2, r1, #3, #4
    18fe:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1902:	3301      	adds	r3, #1
    1904:	e7be      	b.n	1884 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    1906:	785a      	ldrb	r2, [r3, #1]
    1908:	2a6c      	cmp	r2, #108	; 0x6c
    190a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    190e:	d101      	bne.n	1914 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1910:	2104      	movs	r1, #4
    1912:	e7eb      	b.n	18ec <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    1914:	2103      	movs	r1, #3
    1916:	e7f0      	b.n	18fa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1918:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    191c:	2105      	movs	r1, #5
    191e:	e7ec      	b.n	18fa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1920:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1924:	2107      	movs	r1, #7
    1926:	e7e8      	b.n	18fa <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1928:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    192c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1930:	f022 0202 	bic.w	r2, r2, #2
    1934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1938:	f042 0202 	orr.w	r2, r2, #2
    193c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1940:	e7df      	b.n	1902 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    1942:	3b6e      	subs	r3, #110	; 0x6e
    1944:	b2d9      	uxtb	r1, r3
    1946:	2301      	movs	r3, #1
    1948:	408b      	lsls	r3, r1
    194a:	f240 4182 	movw	r1, #1154	; 0x482
    194e:	420b      	tst	r3, r1
    1950:	d137      	bne.n	19c2 <CONFIG_USB_DEVICE_VID+0xad>
    1952:	f013 0f24 	tst.w	r3, #36	; 0x24
    1956:	d151      	bne.n	19fc <CONFIG_USB_DEVICE_VID+0xe7>
    1958:	07d8      	lsls	r0, r3, #31
    195a:	d55c      	bpl.n	1a16 <CONFIG_USB_DEVICE_VID+0x101>
		conv->specifier_cat = SPECIFIER_PTR;
    195c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1960:	2103      	movs	r1, #3
    1962:	f361 0302 	bfi	r3, r1, #0, #3
    1966:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    196a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    196e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1972:	424b      	negs	r3, r1
    1974:	414b      	adcs	r3, r1
    1976:	e01a      	b.n	19ae <CONFIG_USB_DEVICE_VID+0x99>
	switch (conv->specifier) {
    1978:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    197c:	b2c9      	uxtb	r1, r1
    197e:	2001      	movs	r0, #1
    1980:	fa00 f101 	lsl.w	r1, r0, r1
    1984:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1988:	d194      	bne.n	18b4 <z_cbvprintf_impl+0x238>
    198a:	f640 0601 	movw	r6, #2049	; 0x801
    198e:	4231      	tst	r1, r6
    1990:	d11d      	bne.n	19ce <CONFIG_USB_DEVICE_VID+0xb9>
    1992:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1996:	d03e      	beq.n	1a16 <CONFIG_USB_DEVICE_VID+0x101>
		conv->specifier_cat = SPECIFIER_SINT;
    1998:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    199c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    19a0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    19a4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    19a6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    19aa:	d034      	beq.n	1a16 <CONFIG_USB_DEVICE_VID+0x101>
	bool unsupported = false;
    19ac:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    19ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    19b2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    19b6:	430b      	orrs	r3, r1
    19b8:	f363 0241 	bfi	r2, r3, #1, #1
    19bc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    19c0:	e6fd      	b.n	17be <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    19c2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    19c6:	2102      	movs	r1, #2
    19c8:	f361 0302 	bfi	r3, r1, #0, #3
    19cc:	e7e8      	b.n	19a0 <CONFIG_USB_DEVICE_VID+0x8b>
    19ce:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    19d2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    19d4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    19d8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    19dc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    19de:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    19e2:	bf02      	ittt	eq
    19e4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    19e8:	f041 0101 	orreq.w	r1, r1, #1
    19ec:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    19f0:	2b63      	cmp	r3, #99	; 0x63
    19f2:	d1db      	bne.n	19ac <CONFIG_USB_DEVICE_VID+0x97>
			unsupported = (conv->length_mod != LENGTH_NONE);
    19f4:	1e13      	subs	r3, r2, #0
    19f6:	bf18      	it	ne
    19f8:	2301      	movne	r3, #1
    19fa:	e7d8      	b.n	19ae <CONFIG_USB_DEVICE_VID+0x99>
		conv->specifier_cat = SPECIFIER_PTR;
    19fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a00:	2103      	movs	r1, #3
    1a02:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1a06:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1a0a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1a0e:	bf14      	ite	ne
    1a10:	2301      	movne	r3, #1
    1a12:	2300      	moveq	r3, #0
    1a14:	e7cb      	b.n	19ae <CONFIG_USB_DEVICE_VID+0x99>
		conv->invalid = true;
    1a16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1a1a:	f043 0301 	orr.w	r3, r3, #1
    1a1e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1a22:	e7c3      	b.n	19ac <CONFIG_USB_DEVICE_VID+0x97>
		} else if (conv->width_present) {
    1a24:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1a28:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1a2a:	bfb4      	ite	lt
    1a2c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1a30:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1a34:	e6d5      	b.n	17e2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    1a36:	0798      	lsls	r0, r3, #30
    1a38:	f57f aee2 	bpl.w	1800 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1a3c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1a40:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1a44:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1a46:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1a4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1a4e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1a52:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1a54:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1a58:	d133      	bne.n	1ac2 <CONFIG_USB_DEVICE_VID+0x1ad>
			switch (length_mod) {
    1a5a:	1ecb      	subs	r3, r1, #3
    1a5c:	2b04      	cmp	r3, #4
    1a5e:	d804      	bhi.n	1a6a <CONFIG_USB_DEVICE_VID+0x155>
    1a60:	e8df f003 	tbb	[pc, r3]
    1a64:	21464621 	.word	0x21464621
    1a68:	21          	.byte	0x21
    1a69:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1a6a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1a6c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1a6e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1a72:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1a76:	d11c      	bne.n	1ab2 <CONFIG_USB_DEVICE_VID+0x19d>
				value->sint = (signed char)value->sint;
    1a78:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1a7c:	17da      	asrs	r2, r3, #31
    1a7e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1a82:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1a84:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1a88:	f013 0603 	ands.w	r6, r3, #3
    1a8c:	d050      	beq.n	1b30 <CONFIG_USB_DEVICE_VID+0x21b>
			OUTS(sp, fp);
    1a8e:	9b03      	ldr	r3, [sp, #12]
    1a90:	463a      	mov	r2, r7
    1a92:	4659      	mov	r1, fp
    1a94:	4648      	mov	r0, r9
    1a96:	f007 fd14 	bl	94c2 <outs>
    1a9a:	2800      	cmp	r0, #0
    1a9c:	f2c0 8153 	blt.w	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1aa0:	4405      	add	r5, r0
			continue;
    1aa2:	9f03      	ldr	r7, [sp, #12]
    1aa4:	e5f2      	b.n	168c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1aa6:	f854 3b04 	ldr.w	r3, [r4], #4
    1aaa:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1aac:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1ab0:	e7e8      	b.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
			} else if (length_mod == LENGTH_H) {
    1ab2:	2902      	cmp	r1, #2
    1ab4:	d1e5      	bne.n	1a82 <CONFIG_USB_DEVICE_VID+0x16d>
				value->sint = (short)value->sint;
    1ab6:	b21a      	sxth	r2, r3
    1ab8:	f343 33c0 	sbfx	r3, r3, #15, #1
    1abc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1ac0:	e7df      	b.n	1a82 <CONFIG_USB_DEVICE_VID+0x16d>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1ac2:	2b02      	cmp	r3, #2
    1ac4:	d124      	bne.n	1b10 <CONFIG_USB_DEVICE_VID+0x1fb>
			switch (length_mod) {
    1ac6:	1ecb      	subs	r3, r1, #3
    1ac8:	2b04      	cmp	r3, #4
    1aca:	d804      	bhi.n	1ad6 <CONFIG_USB_DEVICE_VID+0x1c1>
    1acc:	e8df f003 	tbb	[pc, r3]
    1ad0:	18101018 	.word	0x18101018
    1ad4:	18          	.byte	0x18
    1ad5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1ad6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1ad8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1adc:	f04f 0200 	mov.w	r2, #0
    1ae0:	d014      	beq.n	1b0c <CONFIG_USB_DEVICE_VID+0x1f7>
			} else if (length_mod == LENGTH_H) {
    1ae2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1ae4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1ae8:	d1cc      	bne.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
				value->uint = (unsigned short)value->uint;
    1aea:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1aec:	930e      	str	r3, [sp, #56]	; 0x38
    1aee:	e7c9      	b.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
					(uint_value_type)va_arg(ap,
    1af0:	3407      	adds	r4, #7
    1af2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1af6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1afa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1afe:	e7c1      	b.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
					(uint_value_type)va_arg(ap, size_t);
    1b00:	f854 3b04 	ldr.w	r3, [r4], #4
    1b04:	930e      	str	r3, [sp, #56]	; 0x38
    1b06:	2300      	movs	r3, #0
    1b08:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1b0a:	e7bb      	b.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
				value->uint = (unsigned char)value->uint;
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	e7cd      	b.n	1aac <CONFIG_USB_DEVICE_VID+0x197>
		} else if (specifier_cat == SPECIFIER_FP) {
    1b10:	2b04      	cmp	r3, #4
    1b12:	d108      	bne.n	1b26 <CONFIG_USB_DEVICE_VID+0x211>
					(sint_value_type)va_arg(ap, long long);
    1b14:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1b16:	f024 0407 	bic.w	r4, r4, #7
    1b1a:	e9d4 2300 	ldrd	r2, r3, [r4]
    1b1e:	3408      	adds	r4, #8
    1b20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1b24:	e7ae      	b.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1b26:	2b03      	cmp	r3, #3
    1b28:	d1ac      	bne.n	1a84 <CONFIG_USB_DEVICE_VID+0x16f>
			value->ptr = va_arg(ap, void *);
    1b2a:	f854 3b04 	ldr.w	r3, [r4], #4
    1b2e:	e7dd      	b.n	1aec <CONFIG_USB_DEVICE_VID+0x1d7>
		switch (conv->specifier) {
    1b30:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1b34:	2878      	cmp	r0, #120	; 0x78
    1b36:	d8b4      	bhi.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
    1b38:	2862      	cmp	r0, #98	; 0x62
    1b3a:	d81c      	bhi.n	1b76 <CONFIG_USB_DEVICE_VID+0x261>
    1b3c:	2825      	cmp	r0, #37	; 0x25
    1b3e:	f43f adad 	beq.w	169c <z_cbvprintf_impl+0x20>
    1b42:	2858      	cmp	r0, #88	; 0x58
    1b44:	d1ad      	bne.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b46:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1b4a:	9300      	str	r3, [sp, #0]
    1b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1b50:	ab08      	add	r3, sp, #32
    1b52:	aa10      	add	r2, sp, #64	; 0x40
    1b54:	f007 fc6f 	bl	9436 <encode_uint>
			if (precision >= 0) {
    1b58:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b5c:	4607      	mov	r7, r0
			if (precision >= 0) {
    1b5e:	f280 809a 	bge.w	1c96 <CONFIG_USB_DEVICE_VID+0x381>
		if (bps == NULL) {
    1b62:	2f00      	cmp	r7, #0
    1b64:	d09d      	beq.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		size_t nj_len = (bpe - bps);
    1b66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1b6a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1b6c:	2e00      	cmp	r6, #0
    1b6e:	f000 80c1 	beq.w	1cf4 <CONFIG_USB_DEVICE_VID+0x3df>
			nj_len += 1U;
    1b72:	3001      	adds	r0, #1
    1b74:	e0be      	b.n	1cf4 <CONFIG_USB_DEVICE_VID+0x3df>
		switch (conv->specifier) {
    1b76:	3863      	subs	r0, #99	; 0x63
    1b78:	2815      	cmp	r0, #21
    1b7a:	d892      	bhi.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
    1b7c:	a201      	add	r2, pc, #4	; (adr r2, 1b84 <CONFIG_USB_DEVICE_VID+0x26f>)
    1b7e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1b82:	bf00      	nop
    1b84:	00001c59 	.word	0x00001c59
    1b88:	00001c6b 	.word	0x00001c6b
    1b8c:	00001aa3 	.word	0x00001aa3
    1b90:	00001aa3 	.word	0x00001aa3
    1b94:	00001aa3 	.word	0x00001aa3
    1b98:	00001aa3 	.word	0x00001aa3
    1b9c:	00001c6b 	.word	0x00001c6b
    1ba0:	00001aa3 	.word	0x00001aa3
    1ba4:	00001aa3 	.word	0x00001aa3
    1ba8:	00001aa3 	.word	0x00001aa3
    1bac:	00001aa3 	.word	0x00001aa3
    1bb0:	00001cf9 	.word	0x00001cf9
    1bb4:	00001c91 	.word	0x00001c91
    1bb8:	00001cb7 	.word	0x00001cb7
    1bbc:	00001aa3 	.word	0x00001aa3
    1bc0:	00001aa3 	.word	0x00001aa3
    1bc4:	00001bdd 	.word	0x00001bdd
    1bc8:	00001aa3 	.word	0x00001aa3
    1bcc:	00001c91 	.word	0x00001c91
    1bd0:	00001aa3 	.word	0x00001aa3
    1bd4:	00001aa3 	.word	0x00001aa3
    1bd8:	00001c91 	.word	0x00001c91
			if (precision >= 0) {
    1bdc:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1be0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1be2:	db35      	blt.n	1c50 <CONFIG_USB_DEVICE_VID+0x33b>
				len = strnlen(bps, precision);
    1be4:	4651      	mov	r1, sl
    1be6:	4638      	mov	r0, r7
    1be8:	f007 feba 	bl	9960 <strnlen>
			bpe = bps + len;
    1bec:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1bf0:	2f00      	cmp	r7, #0
    1bf2:	f43f af56 	beq.w	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		char sign = 0;
    1bf6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1bf8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1bfc:	f013 0210 	ands.w	r2, r3, #16
    1c00:	9205      	str	r2, [sp, #20]
    1c02:	f000 8093 	beq.w	1d2c <CONFIG_USB_DEVICE_VID+0x417>
			nj_len += 2U;
    1c06:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1c08:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1c0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1c0c:	bf48      	it	mi
    1c0e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1c10:	9204      	str	r2, [sp, #16]
    1c12:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1c14:	bf48      	it	mi
    1c16:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1c18:	f1b8 0f00 	cmp.w	r8, #0
    1c1c:	f340 80a0 	ble.w	1d60 <CONFIG_USB_DEVICE_VID+0x44b>
			if (!conv->flag_dash) {
    1c20:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1c24:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1c28:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1c2c:	0750      	lsls	r0, r2, #29
    1c2e:	9306      	str	r3, [sp, #24]
    1c30:	f100 8096 	bmi.w	1d60 <CONFIG_USB_DEVICE_VID+0x44b>
				if (conv->flag_zero) {
    1c34:	0651      	lsls	r1, r2, #25
    1c36:	f140 8089 	bpl.w	1d4c <CONFIG_USB_DEVICE_VID+0x437>
					if (sign != 0) {
    1c3a:	b13e      	cbz	r6, 1c4c <CONFIG_USB_DEVICE_VID+0x337>
						OUTC(sign);
    1c3c:	4659      	mov	r1, fp
    1c3e:	4630      	mov	r0, r6
    1c40:	47c8      	blx	r9
    1c42:	2800      	cmp	r0, #0
    1c44:	db7f      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1c46:	9b06      	ldr	r3, [sp, #24]
    1c48:	3501      	adds	r5, #1
    1c4a:	461e      	mov	r6, r3
					pad = '0';
    1c4c:	2230      	movs	r2, #48	; 0x30
    1c4e:	e07e      	b.n	1d4e <CONFIG_USB_DEVICE_VID+0x439>
				len = strlen(bps);
    1c50:	4638      	mov	r0, r7
    1c52:	f007 fe7e 	bl	9952 <strlen>
    1c56:	e7c9      	b.n	1bec <CONFIG_USB_DEVICE_VID+0x2d7>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1c5a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1c5e:	2600      	movs	r6, #0
			bps = buf;
    1c60:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1c62:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1c66:	2001      	movs	r0, #1
    1c68:	e7c6      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
			if (conv->flag_plus) {
    1c6a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1c6c:	bf5c      	itt	pl
    1c6e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1c72:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1c74:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1c78:	bf48      	it	mi
    1c7a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	f6bf af62 	bge.w	1b46 <CONFIG_USB_DEVICE_VID+0x231>
				value->uint = (uint_value_type)-sint;
    1c82:	4252      	negs	r2, r2
    1c84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1c88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1c8c:	262d      	movs	r6, #45	; 0x2d
    1c8e:	e75a      	b.n	1b46 <CONFIG_USB_DEVICE_VID+0x231>
		switch (conv->specifier) {
    1c90:	2600      	movs	r6, #0
    1c92:	e758      	b.n	1b46 <CONFIG_USB_DEVICE_VID+0x231>
		char sign = 0;
    1c94:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1c96:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1c9a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1c9e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1ca0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1ca4:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1ca6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1caa:	f67f af5a 	bls.w	1b62 <CONFIG_USB_DEVICE_VID+0x24d>
					conv->pad0_value = precision - (int)len;
    1cae:	ebaa 0303 	sub.w	r3, sl, r3
    1cb2:	9311      	str	r3, [sp, #68]	; 0x44
    1cb4:	e755      	b.n	1b62 <CONFIG_USB_DEVICE_VID+0x24d>
			if (value->ptr != NULL) {
    1cb6:	980e      	ldr	r0, [sp, #56]	; 0x38
    1cb8:	b390      	cbz	r0, 1d20 <CONFIG_USB_DEVICE_VID+0x40b>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1cba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cbe:	9300      	str	r3, [sp, #0]
    1cc0:	aa10      	add	r2, sp, #64	; 0x40
    1cc2:	ab08      	add	r3, sp, #32
    1cc4:	2100      	movs	r1, #0
    1cc6:	f007 fbb6 	bl	9436 <encode_uint>
				conv->altform_0c = true;
    1cca:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1cce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1cd2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1cd6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1cda:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1cde:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1ce0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1ce4:	dad6      	bge.n	1c94 <CONFIG_USB_DEVICE_VID+0x37f>
		if (bps == NULL) {
    1ce6:	2800      	cmp	r0, #0
    1ce8:	f43f aedb 	beq.w	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		size_t nj_len = (bpe - bps);
    1cec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cf0:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1cf2:	2600      	movs	r6, #0
    1cf4:	469a      	mov	sl, r3
    1cf6:	e77f      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
				store_count(conv, value->ptr, count);
    1cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1cfa:	2907      	cmp	r1, #7
    1cfc:	f63f aed1 	bhi.w	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
    1d00:	e8df f001 	tbb	[pc, r1]
    1d04:	0c06040c 	.word	0x0c06040c
    1d08:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1d0c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1d0e:	e6c8      	b.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		*(short *)dp = (short)count;
    1d10:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1d12:	e6c6      	b.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		*(intmax_t *)dp = (intmax_t)count;
    1d14:	17ea      	asrs	r2, r5, #31
    1d16:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1d1a:	e6c2      	b.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1d1c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1d1e:	e6c0      	b.n	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
    1d20:	4f2e      	ldr	r7, [pc, #184]	; (1ddc <CONFIG_USB_DEVICE_VID+0x4c7>)
		char sign = 0;
    1d22:	4606      	mov	r6, r0
			bpe = bps + 5;
    1d24:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1d28:	2005      	movs	r0, #5
    1d2a:	e765      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
		} else if (conv->altform_0) {
    1d2c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1d2e:	bf48      	it	mi
    1d30:	3001      	addmi	r0, #1
    1d32:	e769      	b.n	1c08 <CONFIG_USB_DEVICE_VID+0x2f3>
    1d34:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1d36:	4610      	mov	r0, r2
    1d38:	9206      	str	r2, [sp, #24]
    1d3a:	4659      	mov	r1, fp
    1d3c:	47c8      	blx	r9
    1d3e:	2800      	cmp	r0, #0
    1d40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1d44:	da04      	bge.n	1d50 <CONFIG_USB_DEVICE_VID+0x43b>
#undef OUTS
#undef OUTC
}
    1d46:	b015      	add	sp, #84	; 0x54
    1d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1d4c:	2220      	movs	r2, #32
					pad = '0';
    1d4e:	4643      	mov	r3, r8
				while (width-- > 0) {
    1d50:	4619      	mov	r1, r3
    1d52:	2900      	cmp	r1, #0
    1d54:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1d58:	dcec      	bgt.n	1d34 <CONFIG_USB_DEVICE_VID+0x41f>
    1d5a:	4445      	add	r5, r8
    1d5c:	1a6d      	subs	r5, r5, r1
    1d5e:	4698      	mov	r8, r3
		if (sign != 0) {
    1d60:	b12e      	cbz	r6, 1d6e <CONFIG_USB_DEVICE_VID+0x459>
			OUTC(sign);
    1d62:	4659      	mov	r1, fp
    1d64:	4630      	mov	r0, r6
    1d66:	47c8      	blx	r9
    1d68:	2800      	cmp	r0, #0
    1d6a:	dbec      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1d6c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1d6e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1d72:	06da      	lsls	r2, r3, #27
    1d74:	d401      	bmi.n	1d7a <CONFIG_USB_DEVICE_VID+0x465>
    1d76:	071b      	lsls	r3, r3, #28
    1d78:	d505      	bpl.n	1d86 <CONFIG_USB_DEVICE_VID+0x471>
				OUTC('0');
    1d7a:	4659      	mov	r1, fp
    1d7c:	2030      	movs	r0, #48	; 0x30
    1d7e:	47c8      	blx	r9
    1d80:	2800      	cmp	r0, #0
    1d82:	dbe0      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1d84:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1d86:	9b05      	ldr	r3, [sp, #20]
    1d88:	b133      	cbz	r3, 1d98 <CONFIG_USB_DEVICE_VID+0x483>
				OUTC(conv->specifier);
    1d8a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1d8e:	4659      	mov	r1, fp
    1d90:	47c8      	blx	r9
    1d92:	2800      	cmp	r0, #0
    1d94:	dbd7      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1d96:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1d98:	9e04      	ldr	r6, [sp, #16]
    1d9a:	442e      	add	r6, r5
    1d9c:	e005      	b.n	1daa <CONFIG_USB_DEVICE_VID+0x495>
				OUTC('0');
    1d9e:	4659      	mov	r1, fp
    1da0:	2030      	movs	r0, #48	; 0x30
    1da2:	47c8      	blx	r9
    1da4:	2800      	cmp	r0, #0
    1da6:	dbce      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1da8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1daa:	1b73      	subs	r3, r6, r5
    1dac:	2b00      	cmp	r3, #0
    1dae:	dcf6      	bgt.n	1d9e <CONFIG_USB_DEVICE_VID+0x489>
			OUTS(bps, bpe);
    1db0:	4653      	mov	r3, sl
    1db2:	463a      	mov	r2, r7
    1db4:	4659      	mov	r1, fp
    1db6:	4648      	mov	r0, r9
    1db8:	f007 fb83 	bl	94c2 <outs>
    1dbc:	2800      	cmp	r0, #0
    1dbe:	dbc2      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1dc0:	4405      	add	r5, r0
		while (width > 0) {
    1dc2:	44a8      	add	r8, r5
    1dc4:	eba8 0305 	sub.w	r3, r8, r5
    1dc8:	2b00      	cmp	r3, #0
    1dca:	f77f ae6a 	ble.w	1aa2 <CONFIG_USB_DEVICE_VID+0x18d>
			OUTC(' ');
    1dce:	4659      	mov	r1, fp
    1dd0:	2020      	movs	r0, #32
    1dd2:	47c8      	blx	r9
    1dd4:	2800      	cmp	r0, #0
    1dd6:	dbb6      	blt.n	1d46 <CONFIG_USB_DEVICE_VID+0x431>
    1dd8:	3501      	adds	r5, #1
			--width;
    1dda:	e7f3      	b.n	1dc4 <CONFIG_USB_DEVICE_VID+0x4af>
    1ddc:	0000ae0e 	.word	0x0000ae0e

00001de0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1de0:	b508      	push	{r3, lr}
    1de2:	4604      	mov	r4, r0
	__asm__ volatile(
    1de4:	f04f 0220 	mov.w	r2, #32
    1de8:	f3ef 8311 	mrs	r3, BASEPRI
    1dec:	f382 8812 	msr	BASEPRI_MAX, r2
    1df0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1df4:	f003 fbae 	bl	5554 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1df8:	4620      	mov	r0, r4
    1dfa:	f001 ff21 	bl	3c40 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1dfe:	4803      	ldr	r0, [pc, #12]	; (1e0c <sys_reboot+0x2c>)
    1e00:	f007 f808 	bl	8e14 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1e04:	f001 fb0a 	bl	341c <arch_cpu_idle>
    1e08:	e7fc      	b.n	1e04 <sys_reboot+0x24>
    1e0a:	bf00      	nop
    1e0c:	0000ae14 	.word	0x0000ae14

00001e10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1e10:	f003 bbd2 	b.w	55b8 <SystemInit>

00001e14 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e18:	4605      	mov	r5, r0
    1e1a:	f04f 0320 	mov.w	r3, #32
    1e1e:	f3ef 8611 	mrs	r6, BASEPRI
    1e22:	f383 8812 	msr	BASEPRI_MAX, r3
    1e26:	f3bf 8f6f 	isb	sy
	return list->head;
    1e2a:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e2c:	4f0e      	ldr	r7, [pc, #56]	; (1e68 <pm_state_notify+0x54>)
    1e2e:	681c      	ldr	r4, [r3, #0]
    1e30:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e6c <pm_state_notify+0x58>
    1e34:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1e38:	b92c      	cbnz	r4, 1e46 <pm_state_notify+0x32>
	__asm__ volatile(
    1e3a:	f386 8811 	msr	BASEPRI, r6
    1e3e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1e46:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1e4a:	2d00      	cmp	r5, #0
    1e4c:	bf18      	it	ne
    1e4e:	4613      	movne	r3, r2
		if (callback) {
    1e50:	b12b      	cbz	r3, 1e5e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e52:	f898 2010 	ldrb.w	r2, [r8, #16]
    1e56:	fb09 f202 	mul.w	r2, r9, r2
    1e5a:	5cb8      	ldrb	r0, [r7, r2]
    1e5c:	4798      	blx	r3
	return node->next;
    1e5e:	6824      	ldr	r4, [r4, #0]
    1e60:	e7ea      	b.n	1e38 <pm_state_notify+0x24>
    1e62:	bf00      	nop
    1e64:	20000710 	.word	0x20000710
    1e68:	20000704 	.word	0x20000704
    1e6c:	200019e8 	.word	0x200019e8

00001e70 <pm_system_resume>:

void pm_system_resume(void)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1e72:	4b19      	ldr	r3, [pc, #100]	; (1ed8 <pm_system_resume+0x68>)
    1e74:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e76:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e7a:	f004 031f 	and.w	r3, r4, #31
    1e7e:	2201      	movs	r2, #1
    1e80:	409a      	lsls	r2, r3
    1e82:	4b16      	ldr	r3, [pc, #88]	; (1edc <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1e84:	0961      	lsrs	r1, r4, #5
    1e86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e8a:	43d0      	mvns	r0, r2
    1e8c:	e853 1f00 	ldrex	r1, [r3]
    1e90:	ea01 0500 	and.w	r5, r1, r0
    1e94:	e843 5600 	strex	r6, r5, [r3]
    1e98:	2e00      	cmp	r6, #0
    1e9a:	d1f7      	bne.n	1e8c <pm_system_resume+0x1c>
    1e9c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ea0:	420a      	tst	r2, r1
    1ea2:	d013      	beq.n	1ecc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1ea4:	4b0e      	ldr	r3, [pc, #56]	; (1ee0 <pm_system_resume+0x70>)
    1ea6:	4d0f      	ldr	r5, [pc, #60]	; (1ee4 <pm_system_resume+0x74>)
    1ea8:	b18b      	cbz	r3, 1ece <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1eaa:	230c      	movs	r3, #12
    1eac:	4363      	muls	r3, r4
    1eae:	18ea      	adds	r2, r5, r3
    1eb0:	5ce8      	ldrb	r0, [r5, r3]
    1eb2:	7851      	ldrb	r1, [r2, #1]
    1eb4:	f007 fd80 	bl	99b8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1eb8:	2000      	movs	r0, #0
    1eba:	f7ff ffab 	bl	1e14 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1ebe:	230c      	movs	r3, #12
    1ec0:	435c      	muls	r4, r3
    1ec2:	192a      	adds	r2, r5, r4
    1ec4:	2300      	movs	r3, #0
    1ec6:	512b      	str	r3, [r5, r4]
    1ec8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
    1ece:	f383 8811 	msr	BASEPRI, r3
    1ed2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1ed6:	e7ef      	b.n	1eb8 <pm_system_resume+0x48>
    1ed8:	200019e8 	.word	0x200019e8
    1edc:	20000718 	.word	0x20000718
    1ee0:	000099b9 	.word	0x000099b9
    1ee4:	20000704 	.word	0x20000704

00001ee8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1eec:	4b35      	ldr	r3, [pc, #212]	; (1fc4 <pm_system_suspend+0xdc>)
{
    1eee:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1ef0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    1ef2:	f04f 0320 	mov.w	r3, #32
    1ef6:	f3ef 8811 	mrs	r8, BASEPRI
    1efa:	f383 8812 	msr	BASEPRI_MAX, r3
    1efe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1f02:	240c      	movs	r4, #12
    1f04:	4b30      	ldr	r3, [pc, #192]	; (1fc8 <pm_system_suspend+0xe0>)
    1f06:	4e31      	ldr	r6, [pc, #196]	; (1fcc <pm_system_suspend+0xe4>)
    1f08:	436c      	muls	r4, r5
    1f0a:	191a      	adds	r2, r3, r4
    1f0c:	5d19      	ldrb	r1, [r3, r4]
    1f0e:	2900      	cmp	r1, #0
    1f10:	d04c      	beq.n	1fac <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1f12:	ca07      	ldmia	r2, {r0, r1, r2}
    1f14:	eb06 0c04 	add.w	ip, r6, r4
    1f18:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1f1c:	2200      	movs	r2, #0
    1f1e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1f20:	f388 8811 	msr	BASEPRI, r8
    1f24:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1f28:	230c      	movs	r3, #12
    1f2a:	436b      	muls	r3, r5
    1f2c:	18f2      	adds	r2, r6, r3
    1f2e:	5cf0      	ldrb	r0, [r6, r3]
    1f30:	2800      	cmp	r0, #0
    1f32:	d039      	beq.n	1fa8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1f34:	1c7b      	adds	r3, r7, #1
    1f36:	d010      	beq.n	1f5a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1f38:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1f3c:	4c24      	ldr	r4, [pc, #144]	; (1fd0 <pm_system_suspend+0xe8>)
    1f3e:	4a25      	ldr	r2, [pc, #148]	; (1fd4 <pm_system_suspend+0xec>)
    1f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1f44:	2100      	movs	r1, #0
    1f46:	fbec 4100 	umlal	r4, r1, ip, r0
    1f4a:	2300      	movs	r3, #0
    1f4c:	4620      	mov	r0, r4
    1f4e:	f7ff f8d7 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1f52:	2101      	movs	r1, #1
    1f54:	1a38      	subs	r0, r7, r0
    1f56:	f003 fac1 	bl	54dc <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1f5a:	f006 fa57 	bl	840c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1f5e:	2001      	movs	r0, #1
    1f60:	f7ff ff58 	bl	1e14 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f64:	f3bf 8f5b 	dmb	ish
    1f68:	4b1b      	ldr	r3, [pc, #108]	; (1fd8 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f6a:	096a      	lsrs	r2, r5, #5
    1f6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f70:	f005 011f 	and.w	r1, r5, #31
    1f74:	2201      	movs	r2, #1
    1f76:	408a      	lsls	r2, r1
    1f78:	e853 0f00 	ldrex	r0, [r3]
    1f7c:	4310      	orrs	r0, r2
    1f7e:	e843 0100 	strex	r1, r0, [r3]
    1f82:	2900      	cmp	r1, #0
    1f84:	d1f8      	bne.n	1f78 <pm_system_suspend+0x90>
    1f86:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1f8a:	4b14      	ldr	r3, [pc, #80]	; (1fdc <pm_system_suspend+0xf4>)
    1f8c:	b13b      	cbz	r3, 1f9e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    1f8e:	230c      	movs	r3, #12
    1f90:	fb03 f005 	mul.w	r0, r3, r5
    1f94:	1833      	adds	r3, r6, r0
    1f96:	5c30      	ldrb	r0, [r6, r0]
    1f98:	7859      	ldrb	r1, [r3, #1]
    1f9a:	f007 fd01 	bl	99a0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1f9e:	f7ff ff67 	bl	1e70 <pm_system_resume>
	k_sched_unlock();
    1fa2:	f006 fa47 	bl	8434 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1fa6:	2001      	movs	r0, #1
}
    1fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1fac:	4601      	mov	r1, r0
    1fae:	4628      	mov	r0, r5
    1fb0:	f000 f816 	bl	1fe0 <pm_policy_next_state>
		if (info != NULL) {
    1fb4:	2800      	cmp	r0, #0
    1fb6:	d0b3      	beq.n	1f20 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1fb8:	c807      	ldmia	r0, {r0, r1, r2}
    1fba:	4434      	add	r4, r6
    1fbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1fc0:	e7ae      	b.n	1f20 <pm_system_suspend+0x38>
    1fc2:	bf00      	nop
    1fc4:	200019e8 	.word	0x200019e8
    1fc8:	200006f8 	.word	0x200006f8
    1fcc:	20000704 	.word	0x20000704
    1fd0:	000f423f 	.word	0x000f423f
    1fd4:	000f4240 	.word	0x000f4240
    1fd8:	20000718 	.word	0x20000718
    1fdc:	000099a1 	.word	0x000099a1

00001fe0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fe4:	b085      	sub	sp, #20
    1fe6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1fe8:	a903      	add	r1, sp, #12
    1fea:	f000 f843 	bl	2074 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1fee:	4b1e      	ldr	r3, [pc, #120]	; (2068 <pm_policy_next_state+0x88>)
    1ff0:	9d03      	ldr	r5, [sp, #12]
    1ff2:	f8d3 a000 	ldr.w	sl, [r3]
    1ff6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 206c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1ffa:	1e43      	subs	r3, r0, #1
    1ffc:	b21b      	sxth	r3, r3
    1ffe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2002:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2004:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2008:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    200c:	f04f 0b00 	mov.w	fp, #0
    2010:	b924      	cbnz	r4, 201c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2012:	46a1      	mov	r9, r4
}
    2014:	4648      	mov	r0, r9
    2016:	b005      	add	sp, #20
    2018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    201c:	6868      	ldr	r0, [r5, #4]
    201e:	4a14      	ldr	r2, [pc, #80]	; (2070 <pm_policy_next_state+0x90>)
    2020:	46c4      	mov	ip, r8
    2022:	4659      	mov	r1, fp
    2024:	fbe0 c107 	umlal	ip, r1, r0, r7
    2028:	2300      	movs	r3, #0
    202a:	4660      	mov	r0, ip
    202c:	f7ff f868 	bl	1100 <__aeabi_uldivmod>
    2030:	9001      	str	r0, [sp, #4]
    2032:	68a8      	ldr	r0, [r5, #8]
    2034:	4a0e      	ldr	r2, [pc, #56]	; (2070 <pm_policy_next_state+0x90>)
    2036:	46c4      	mov	ip, r8
    2038:	4659      	mov	r1, fp
    203a:	fbe0 c107 	umlal	ip, r1, r0, r7
    203e:	2300      	movs	r3, #0
    2040:	4660      	mov	r0, ip
    2042:	f7ff f85d 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2046:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    204a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    204c:	d001      	beq.n	2052 <pm_policy_next_state+0x72>
    204e:	4582      	cmp	sl, r0
    2050:	d905      	bls.n	205e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    2052:	1c73      	adds	r3, r6, #1
    2054:	d0de      	beq.n	2014 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2056:	9b01      	ldr	r3, [sp, #4]
    2058:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    205a:	42b0      	cmp	r0, r6
    205c:	d9da      	bls.n	2014 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    205e:	3c01      	subs	r4, #1
    2060:	b2a4      	uxth	r4, r4
    2062:	3d0c      	subs	r5, #12
    2064:	e7d4      	b.n	2010 <pm_policy_next_state+0x30>
    2066:	bf00      	nop
    2068:	200000b4 	.word	0x200000b4
    206c:	000f423f 	.word	0x000f423f
    2070:	000f4240 	.word	0x000f4240

00002074 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2074:	b908      	cbnz	r0, 207a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2076:	4b02      	ldr	r3, [pc, #8]	; (2080 <pm_state_cpu_get_all+0xc>)
    2078:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    207a:	2000      	movs	r0, #0
    207c:	4770      	bx	lr
    207e:	bf00      	nop
    2080:	0000ab08 	.word	0x0000ab08

00002084 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2084:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2086:	4b0c      	ldr	r3, [pc, #48]	; (20b8 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2088:	4e0c      	ldr	r6, [pc, #48]	; (20bc <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    208a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    208c:	4b0c      	ldr	r3, [pc, #48]	; (20c0 <class_handler+0x3c>)
    208e:	42b3      	cmp	r3, r6
    2090:	d303      	bcc.n	209a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    2092:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2096:	bcf0      	pop	{r4, r5, r6, r7}
    2098:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    209a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    209c:	42bd      	cmp	r5, r7
    209e:	d309      	bcc.n	20b4 <class_handler+0x30>
		if (iface->class_handler &&
    20a0:	691c      	ldr	r4, [r3, #16]
    20a2:	b13c      	cbz	r4, 20b4 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    20a4:	f895 c002 	ldrb.w	ip, [r5, #2]
    20a8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    20aa:	45ac      	cmp	ip, r5
    20ac:	d102      	bne.n	20b4 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    20ae:	4623      	mov	r3, r4
}
    20b0:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    20b2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    20b4:	3324      	adds	r3, #36	; 0x24
    20b6:	e7ea      	b.n	208e <class_handler+0xa>
    20b8:	2000071c 	.word	0x2000071c
    20bc:	200003d8 	.word	0x200003d8
    20c0:	200003b4 	.word	0x200003b4

000020c4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    20c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    20c8:	4c13      	ldr	r4, [pc, #76]	; (2118 <custom_handler+0x54>)
    20ca:	f8df 8050 	ldr.w	r8, [pc, #80]	; 211c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    20ce:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2120 <custom_handler+0x5c>
{
    20d2:	4605      	mov	r5, r0
    20d4:	460e      	mov	r6, r1
    20d6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    20d8:	4544      	cmp	r4, r8
    20da:	d303      	bcc.n	20e4 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    20dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    20e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    20e4:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    20e6:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    20ea:	429a      	cmp	r2, r3
    20ec:	d312      	bcc.n	2114 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    20ee:	69a3      	ldr	r3, [r4, #24]
    20f0:	b183      	cbz	r3, 2114 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    20f2:	7890      	ldrb	r0, [r2, #2]
    20f4:	7929      	ldrb	r1, [r5, #4]
    20f6:	4288      	cmp	r0, r1
    20f8:	d105      	bne.n	2106 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    20fa:	463a      	mov	r2, r7
    20fc:	4631      	mov	r1, r6
    20fe:	4628      	mov	r0, r5
}
    2100:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    2104:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2106:	7952      	ldrb	r2, [r2, #5]
    2108:	2a01      	cmp	r2, #1
    210a:	d103      	bne.n	2114 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    210c:	463a      	mov	r2, r7
    210e:	4631      	mov	r1, r6
    2110:	4628      	mov	r0, r5
    2112:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2114:	3424      	adds	r4, #36	; 0x24
    2116:	e7df      	b.n	20d8 <custom_handler+0x14>
    2118:	200003b4 	.word	0x200003b4
    211c:	200003d8 	.word	0x200003d8
    2120:	2000071c 	.word	0x2000071c

00002124 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2128:	4c0b      	ldr	r4, [pc, #44]	; (2158 <vendor_handler+0x34>)
    212a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 215c <vendor_handler+0x38>
{
    212e:	4605      	mov	r5, r0
    2130:	460e      	mov	r6, r1
    2132:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2134:	4544      	cmp	r4, r8
    2136:	d302      	bcc.n	213e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2138:	f06f 0085 	mvn.w	r0, #133	; 0x85
    213c:	e009      	b.n	2152 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    213e:	6963      	ldr	r3, [r4, #20]
    2140:	b90b      	cbnz	r3, 2146 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2142:	3424      	adds	r4, #36	; 0x24
    2144:	e7f6      	b.n	2134 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    2146:	463a      	mov	r2, r7
    2148:	4631      	mov	r1, r6
    214a:	4628      	mov	r0, r5
    214c:	4798      	blx	r3
    214e:	2800      	cmp	r0, #0
    2150:	d1f7      	bne.n	2142 <vendor_handler+0x1e>
}
    2152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2156:	bf00      	nop
    2158:	200003b4 	.word	0x200003b4
    215c:	200003d8 	.word	0x200003d8

00002160 <disable_endpoint>:
{
    2160:	b510      	push	{r4, lr}
    2162:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    2164:	f007 fc5d 	bl	9a22 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2168:	f110 0f78 	cmn.w	r0, #120	; 0x78
    216c:	d000      	beq.n	2170 <disable_endpoint+0x10>
	} else if (ret) {
    216e:	b950      	cbnz	r0, 2186 <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
    2170:	4a05      	ldr	r2, [pc, #20]	; (2188 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
    2172:	4620      	mov	r0, r4
    2174:	f007 fa65 	bl	9642 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2178:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    217c:	ea23 0300 	bic.w	r3, r3, r0
    2180:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2184:	2000      	movs	r0, #0
}
    2186:	bd10      	pop	{r4, pc}
    2188:	2000071c 	.word	0x2000071c

0000218c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    218c:	4802      	ldr	r0, [pc, #8]	; (2198 <usb_reset_alt_setting+0xc>)
    218e:	2208      	movs	r2, #8
    2190:	2100      	movs	r1, #0
    2192:	f007 bbf9 	b.w	9988 <memset>
    2196:	bf00      	nop
    2198:	200007d7 	.word	0x200007d7

0000219c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    219c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    219e:	4b0b      	ldr	r3, [pc, #44]	; (21cc <is_ep_valid.part.0+0x30>)
    21a0:	4c0b      	ldr	r4, [pc, #44]	; (21d0 <is_ep_valid.part.0+0x34>)
    21a2:	42a3      	cmp	r3, r4
    21a4:	d301      	bcc.n	21aa <is_ep_valid.part.0+0xe>
	return false;
    21a6:	2000      	movs	r0, #0
}
    21a8:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    21aa:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    21ac:	7f1e      	ldrb	r6, [r3, #28]
    21ae:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    21b0:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    21b2:	b2d5      	uxtb	r5, r2
    21b4:	42ae      	cmp	r6, r5
    21b6:	d801      	bhi.n	21bc <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    21b8:	3324      	adds	r3, #36	; 0x24
    21ba:	e7f2      	b.n	21a2 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    21bc:	3201      	adds	r2, #1
    21be:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    21c2:	4285      	cmp	r5, r0
    21c4:	d1f5      	bne.n	21b2 <is_ep_valid.part.0+0x16>
		return true;
    21c6:	2001      	movs	r0, #1
    21c8:	e7ee      	b.n	21a8 <is_ep_valid.part.0+0xc>
    21ca:	bf00      	nop
    21cc:	200003b4 	.word	0x200003b4
    21d0:	200003d8 	.word	0x200003d8

000021d4 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    21d4:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    21d6:	4809      	ldr	r0, [pc, #36]	; (21fc <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    21d8:	7803      	ldrb	r3, [r0, #0]
    21da:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    21de:	330a      	adds	r3, #10
    21e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    21e4:	b13b      	cbz	r3, 21f6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    21e6:	f100 0208 	add.w	r2, r0, #8
    21ea:	f100 0110 	add.w	r1, r0, #16
    21ee:	4798      	blx	r3
    21f0:	43c0      	mvns	r0, r0
    21f2:	0fc0      	lsrs	r0, r0, #31
}
    21f4:	bd08      	pop	{r3, pc}
		return false;
    21f6:	4618      	mov	r0, r3
    21f8:	e7fc      	b.n	21f4 <usb_handle_request.constprop.0+0x20>
    21fa:	bf00      	nop
    21fc:	2000071c 	.word	0x2000071c

00002200 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2200:	2804      	cmp	r0, #4
{
    2202:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2206:	f8df 9098 	ldr.w	r9, [pc, #152]	; 22a0 <forward_status_cb+0xa0>
    220a:	4604      	mov	r4, r0
    220c:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    220e:	d016      	beq.n	223e <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2210:	2801      	cmp	r0, #1
    2212:	d12d      	bne.n	2270 <forward_status_cb+0x70>
		if (usb_dev.configured) {
    2214:	f8df 808c 	ldr.w	r8, [pc, #140]	; 22a4 <forward_status_cb+0xa4>
    2218:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    221c:	b343      	cbz	r3, 2270 <forward_status_cb+0x70>
			usb_cancel_transfers();
    221e:	f000 fddf 	bl	2de0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2222:	4d21      	ldr	r5, [pc, #132]	; (22a8 <forward_status_cb+0xa8>)
    2224:	454d      	cmp	r5, r9
    2226:	d220      	bcs.n	226a <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
    2228:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    222c:	f04f 0a00 	mov.w	sl, #0
    2230:	7f2b      	ldrb	r3, [r5, #28]
    2232:	fa5f f68a 	uxtb.w	r6, sl
    2236:	42b3      	cmp	r3, r6
    2238:	d804      	bhi.n	2244 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    223a:	3524      	adds	r5, #36	; 0x24
    223c:	e7f2      	b.n	2224 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    223e:	f7ff ffa5 	bl	218c <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2242:	e7e7      	b.n	2214 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2244:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
    2248:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    224c:	7930      	ldrb	r0, [r6, #4]
    224e:	f007 fbe8 	bl	9a22 <usb_dc_ep_disable>
    2252:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2254:	7930      	ldrb	r0, [r6, #4]
    2256:	f007 f9f4 	bl	9642 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    225a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    225e:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    2260:	ea23 0300 	bic.w	r3, r3, r0
    2264:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2268:	dae2      	bge.n	2230 <forward_status_cb+0x30>
			usb_dev.configured = false;
    226a:	2300      	movs	r3, #0
    226c:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2270:	4d0d      	ldr	r5, [pc, #52]	; (22a8 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2272:	454d      	cmp	r5, r9
    2274:	d308      	bcc.n	2288 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
    2276:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <forward_status_cb+0xa4>)
    2278:	6a1b      	ldr	r3, [r3, #32]
    227a:	b16b      	cbz	r3, 2298 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
    227c:	4639      	mov	r1, r7
    227e:	4620      	mov	r0, r4
}
    2280:	b001      	add	sp, #4
    2282:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    2286:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    2288:	68eb      	ldr	r3, [r5, #12]
    228a:	b11b      	cbz	r3, 2294 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
    228c:	463a      	mov	r2, r7
    228e:	4621      	mov	r1, r4
    2290:	4628      	mov	r0, r5
    2292:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2294:	3524      	adds	r5, #36	; 0x24
    2296:	e7ec      	b.n	2272 <forward_status_cb+0x72>
}
    2298:	b001      	add	sp, #4
    229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    229e:	bf00      	nop
    22a0:	200003d8 	.word	0x200003d8
    22a4:	2000071c 	.word	0x2000071c
    22a8:	200003b4 	.word	0x200003b4

000022ac <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    22ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    22ae:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    22b0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    22b2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    22b4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    22b8:	d007      	beq.n	22ca <usb_halt_endpoint_req.isra.0+0x1e>
    22ba:	4620      	mov	r0, r4
    22bc:	f7ff ff6e 	bl	219c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    22c0:	b178      	cbz	r0, 22e2 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    22c2:	4b0d      	ldr	r3, [pc, #52]	; (22f8 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    22c4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    22c8:	b158      	cbz	r0, 22e2 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    22ca:	4e0b      	ldr	r6, [pc, #44]	; (22f8 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    22cc:	4620      	mov	r0, r4
		if (halt) {
    22ce:	b155      	cbz	r5, 22e6 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    22d0:	f002 f8ae 	bl	4430 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    22d4:	69f3      	ldr	r3, [r6, #28]
    22d6:	b11b      	cbz	r3, 22e0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    22d8:	f10d 0107 	add.w	r1, sp, #7
    22dc:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    22de:	4798      	blx	r3
		return true;
    22e0:	2001      	movs	r0, #1
}
    22e2:	b002      	add	sp, #8
    22e4:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    22e6:	f002 f8cb 	bl	4480 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    22ea:	69f3      	ldr	r3, [r6, #28]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d0f7      	beq.n	22e0 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    22f0:	f10d 0107 	add.w	r1, sp, #7
    22f4:	2009      	movs	r0, #9
    22f6:	e7f2      	b.n	22de <usb_halt_endpoint_req.isra.0+0x32>
    22f8:	2000071c 	.word	0x2000071c

000022fc <set_endpoint>:
{
    22fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    22fe:	7886      	ldrb	r6, [r0, #2]
    2300:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2304:	7903      	ldrb	r3, [r0, #4]
    2306:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
    2308:	4c1c      	ldr	r4, [pc, #112]	; (237c <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    230a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    230e:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2312:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2314:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2316:	f003 0303 	and.w	r3, r3, #3
    231a:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    231e:	f007 f990 	bl	9642 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    2322:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    2326:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2328:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    232a:	d00b      	beq.n	2344 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    232c:	4630      	mov	r0, r6
    232e:	f000 fd39 	bl	2da4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2332:	4630      	mov	r0, r6
    2334:	f7ff ff14 	bl	2160 <disable_endpoint>
		if (!k_is_in_isr()) {
    2338:	f007 ff45 	bl	a1c6 <k_is_in_isr>
    233c:	b910      	cbnz	r0, 2344 <set_endpoint+0x48>
		union { uintptr_t x; int32_t val; } parm0 = { .val = us };
		return (int32_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    233e:	2096      	movs	r0, #150	; 0x96
    2340:	f006 f938 	bl	85b4 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    2344:	4668      	mov	r0, sp
    2346:	f002 f84f 	bl	43e8 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    234a:	f110 0f78 	cmn.w	r0, #120	; 0x78
    234e:	d003      	beq.n	2358 <set_endpoint+0x5c>
	} else if (ret) {
    2350:	b110      	cbz	r0, 2358 <set_endpoint+0x5c>
		return false;
    2352:	2000      	movs	r0, #0
}
    2354:	b002      	add	sp, #8
    2356:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2358:	f89d 0000 	ldrb.w	r0, [sp]
    235c:	f002 f8cc 	bl	44f8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2360:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2364:	d001      	beq.n	236a <set_endpoint+0x6e>
	} else if (ret) {
    2366:	2800      	cmp	r0, #0
    2368:	d1f3      	bne.n	2352 <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
    236a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    236e:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2370:	432b      	orrs	r3, r5
	usb_dev.configured = true;
    2372:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2376:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    237a:	e7eb      	b.n	2354 <set_endpoint+0x58>
    237c:	2000071c 	.word	0x2000071c

00002380 <usb_handle_standard_request>:
{
    2380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2384:	4ea3      	ldr	r6, [pc, #652]	; (2614 <usb_handle_standard_request+0x294>)
    2386:	69b3      	ldr	r3, [r6, #24]
{
    2388:	4604      	mov	r4, r0
    238a:	460f      	mov	r7, r1
    238c:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    238e:	b9fb      	cbnz	r3, 23d0 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    2390:	7823      	ldrb	r3, [r4, #0]
    2392:	f003 031f 	and.w	r3, r3, #31
    2396:	2b01      	cmp	r3, #1
    2398:	f000 809d 	beq.w	24d6 <usb_handle_standard_request+0x156>
    239c:	2b02      	cmp	r3, #2
    239e:	f000 8104 	beq.w	25aa <usb_handle_standard_request+0x22a>
    23a2:	bb33      	cbnz	r3, 23f2 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    23a4:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    23a8:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    23aa:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    23ac:	2800      	cmp	r0, #0
    23ae:	da34      	bge.n	241a <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    23b0:	2906      	cmp	r1, #6
    23b2:	d012      	beq.n	23da <usb_handle_standard_request+0x5a>
    23b4:	2908      	cmp	r1, #8
    23b6:	d02b      	beq.n	2410 <usb_handle_standard_request+0x90>
    23b8:	b9d9      	cbnz	r1, 23f2 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    23ba:	2301      	movs	r3, #1
    23bc:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    23be:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    23c0:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    23c4:	005b      	lsls	r3, r3, #1
    23c6:	f043 0301 	orr.w	r3, r3, #1
    23ca:	7013      	strb	r3, [r2, #0]
		*len = 2;
    23cc:	2302      	movs	r3, #2
    23ce:	e12a      	b.n	2626 <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    23d0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    23d2:	2800      	cmp	r0, #0
    23d4:	d1dc      	bne.n	2390 <usb_handle_standard_request+0x10>
		return 0;
    23d6:	2000      	movs	r0, #0
    23d8:	e00d      	b.n	23f6 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    23da:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    23dc:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    23de:	1f01      	subs	r1, r0, #4
    23e0:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    23e2:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    23e4:	d905      	bls.n	23f2 <usb_handle_standard_request+0x72>
    23e6:	2807      	cmp	r0, #7
    23e8:	d803      	bhi.n	23f2 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    23ea:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    23ec:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    23ee:	780c      	ldrb	r4, [r1, #0]
    23f0:	b91c      	cbnz	r4, 23fa <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    23f2:	f06f 0015 	mvn.w	r0, #21
}
    23f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    23fa:	784e      	ldrb	r6, [r1, #1]
    23fc:	4566      	cmp	r6, ip
    23fe:	d103      	bne.n	2408 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    2400:	429a      	cmp	r2, r3
    2402:	f000 810b 	beq.w	261c <usb_handle_standard_request+0x29c>
			cur_index++;
    2406:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    2408:	4421      	add	r1, r4
    240a:	e7f0      	b.n	23ee <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    240c:	780b      	ldrb	r3, [r1, #0]
    240e:	e10a      	b.n	2626 <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    2410:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2414:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2416:	2301      	movs	r3, #1
    2418:	e105      	b.n	2626 <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    241a:	3901      	subs	r1, #1
    241c:	2908      	cmp	r1, #8
    241e:	d8e8      	bhi.n	23f2 <usb_handle_standard_request+0x72>
    2420:	a301      	add	r3, pc, #4	; (adr r3, 2428 <usb_handle_standard_request+0xa8>)
    2422:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    2426:	bf00      	nop
    2428:	000024c1 	.word	0x000024c1
    242c:	000023f3 	.word	0x000023f3
    2430:	000024cf 	.word	0x000024cf
    2434:	000023f3 	.word	0x000023f3
    2438:	0000244d 	.word	0x0000244d
    243c:	000023f3 	.word	0x000023f3
    2440:	000023f3 	.word	0x000023f3
    2444:	000023f3 	.word	0x000023f3
    2448:	00002459 	.word	0x00002459
			return !usb_dc_set_address(setup->wValue);
    244c:	78a0      	ldrb	r0, [r4, #2]
    244e:	f001 ffb9 	bl	43c4 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2452:	2800      	cmp	r0, #0
    2454:	d0bf      	beq.n	23d6 <usb_handle_standard_request+0x56>
    2456:	e7cc      	b.n	23f2 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    2458:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    245a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    245c:	bb63      	cbnz	r3, 24b8 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    245e:	f7ff fe95 	bl	218c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2462:	8863      	ldrh	r3, [r4, #2]
    2464:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2468:	69f3      	ldr	r3, [r6, #28]
    246a:	2b00      	cmp	r3, #0
    246c:	d0b3      	beq.n	23d6 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    246e:	496a      	ldr	r1, [pc, #424]	; (2618 <usb_handle_standard_request+0x298>)
    2470:	2003      	movs	r0, #3
    2472:	4798      	blx	r3
    2474:	e7af      	b.n	23d6 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    2476:	786b      	ldrb	r3, [r5, #1]
    2478:	2b04      	cmp	r3, #4
    247a:	d010      	beq.n	249e <usb_handle_standard_request+0x11e>
    247c:	2b05      	cmp	r3, #5
    247e:	d011      	beq.n	24a4 <usb_handle_standard_request+0x124>
    2480:	2b02      	cmp	r3, #2
    2482:	d104      	bne.n	248e <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2484:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    2486:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2488:	42bb      	cmp	r3, r7
    248a:	bf08      	it	eq
    248c:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    248e:	782b      	ldrb	r3, [r5, #0]
    2490:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2492:	782b      	ldrb	r3, [r5, #0]
    2494:	2b00      	cmp	r3, #0
    2496:	d1ee      	bne.n	2476 <usb_handle_standard_request+0xf6>
	if (found) {
    2498:	2800      	cmp	r0, #0
    249a:	d0aa      	beq.n	23f2 <usb_handle_standard_request+0x72>
    249c:	e7df      	b.n	245e <usb_handle_standard_request+0xde>
			cur_alt_setting =
    249e:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    24a2:	e7f4      	b.n	248e <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    24a4:	8863      	ldrh	r3, [r4, #2]
    24a6:	42bb      	cmp	r3, r7
    24a8:	d1f1      	bne.n	248e <usb_handle_standard_request+0x10e>
    24aa:	f1b8 0f00 	cmp.w	r8, #0
    24ae:	d1ee      	bne.n	248e <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    24b0:	4628      	mov	r0, r5
    24b2:	f7ff ff23 	bl	22fc <set_endpoint>
			break;
    24b6:	e7ea      	b.n	248e <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    24b8:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    24ba:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    24bc:	46b8      	mov	r8, r7
    24be:	e7e8      	b.n	2492 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    24c0:	8863      	ldrh	r3, [r4, #2]
    24c2:	2b01      	cmp	r3, #1
    24c4:	d195      	bne.n	23f2 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    24c6:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    24c8:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    24cc:	e783      	b.n	23d6 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    24ce:	8863      	ldrh	r3, [r4, #2]
    24d0:	2b01      	cmp	r3, #1
    24d2:	d18e      	bne.n	23f2 <usb_handle_standard_request+0x72>
    24d4:	e7f8      	b.n	24c8 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    24d6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    24da:	f8d5 c000 	ldr.w	ip, [r5]
    24de:	2b00      	cmp	r3, #0
    24e0:	d087      	beq.n	23f2 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    24e2:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    24e4:	88a3      	ldrh	r3, [r4, #4]
    24e6:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    24ea:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    24ec:	7810      	ldrb	r0, [r2, #0]
    24ee:	2800      	cmp	r0, #0
    24f0:	f43f af7f 	beq.w	23f2 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    24f4:	7851      	ldrb	r1, [r2, #1]
    24f6:	2902      	cmp	r1, #2
    24f8:	d104      	bne.n	2504 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    24fa:	f892 8004 	ldrb.w	r8, [r2, #4]
    24fe:	45f0      	cmp	r8, lr
    2500:	f200 8093 	bhi.w	262a <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    2504:	4402      	add	r2, r0
    2506:	e7f1      	b.n	24ec <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    2508:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    250c:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    2510:	6039      	str	r1, [r7, #0]
			return true;
    2512:	e760      	b.n	23d6 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    2514:	4415      	add	r5, r2
    2516:	e094      	b.n	2642 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2518:	2a0b      	cmp	r2, #11
    251a:	f47f af6a 	bne.w	23f2 <usb_handle_standard_request+0x72>
	bool ret = false;
    251e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2520:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2524:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    2526:	46ba      	mov	sl, r7
    2528:	e006      	b.n	2538 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    252a:	786b      	ldrb	r3, [r5, #1]
    252c:	2b04      	cmp	r3, #4
    252e:	d00f      	beq.n	2550 <usb_handle_standard_request+0x1d0>
    2530:	2b05      	cmp	r3, #5
    2532:	d021      	beq.n	2578 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    2534:	782b      	ldrb	r3, [r5, #0]
    2536:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2538:	782b      	ldrb	r3, [r5, #0]
    253a:	2b00      	cmp	r3, #0
    253c:	d1f5      	bne.n	252a <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    253e:	69f3      	ldr	r3, [r6, #28]
    2540:	b113      	cbz	r3, 2548 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2542:	4651      	mov	r1, sl
    2544:	2007      	movs	r0, #7
    2546:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2548:	2f00      	cmp	r7, #0
    254a:	f47f af44 	bne.w	23d6 <usb_handle_standard_request+0x56>
    254e:	e750      	b.n	23f2 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2550:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2554:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2556:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    255a:	4598      	cmp	r8, r3
    255c:	d1ea      	bne.n	2534 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    255e:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2560:	4599      	cmp	r9, r3
    2562:	d1e7      	bne.n	2534 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2564:	f1b8 0f07 	cmp.w	r8, #7
    2568:	d81c      	bhi.n	25a4 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    256a:	eb06 0308 	add.w	r3, r6, r8
		return true;
    256e:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2570:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2574:	2701      	movs	r7, #1
    2576:	e7dd      	b.n	2534 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2578:	88a3      	ldrh	r3, [r4, #4]
    257a:	4543      	cmp	r3, r8
    257c:	d1da      	bne.n	2534 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    257e:	78a3      	ldrb	r3, [r4, #2]
    2580:	454b      	cmp	r3, r9
    2582:	d00a      	beq.n	259a <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    2584:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2586:	4638      	mov	r0, r7
    2588:	f000 fc0c 	bl	2da4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    258c:	4638      	mov	r0, r7
    258e:	f7ff fde7 	bl	2160 <disable_endpoint>
    2592:	fab0 f780 	clz	r7, r0
    2596:	097f      	lsrs	r7, r7, #5
    2598:	e7cc      	b.n	2534 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    259a:	4628      	mov	r0, r5
    259c:	f7ff feae 	bl	22fc <set_endpoint>
    25a0:	4607      	mov	r7, r0
    25a2:	e7c7      	b.n	2534 <usb_handle_standard_request+0x1b4>
    25a4:	46aa      	mov	sl, r5
	return false;
    25a6:	2700      	movs	r7, #0
    25a8:	e7c4      	b.n	2534 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    25aa:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    25ae:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    25b0:	2a00      	cmp	r2, #0
    25b2:	da18      	bge.n	25e6 <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    25b4:	2b00      	cmp	r3, #0
    25b6:	f47f af1c 	bne.w	23f2 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    25ba:	7924      	ldrb	r4, [r4, #4]
    25bc:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    25be:	0663      	lsls	r3, r4, #25
    25c0:	d00a      	beq.n	25d8 <usb_handle_standard_request+0x258>
    25c2:	4620      	mov	r0, r4
    25c4:	f7ff fdea 	bl	219c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    25c8:	2800      	cmp	r0, #0
    25ca:	f43f af12 	beq.w	23f2 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    25ce:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    25d2:	2b00      	cmp	r3, #0
    25d4:	f43f af0d 	beq.w	23f2 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    25d8:	4629      	mov	r1, r5
    25da:	4620      	mov	r0, r4
    25dc:	f001 ff70 	bl	44c0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    25e0:	2300      	movs	r3, #0
    25e2:	706b      	strb	r3, [r5, #1]
    25e4:	e6f2      	b.n	23cc <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    25e6:	2b01      	cmp	r3, #1
    25e8:	d008      	beq.n	25fc <usb_handle_standard_request+0x27c>
    25ea:	2b03      	cmp	r3, #3
    25ec:	f47f af01 	bne.w	23f2 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    25f0:	8863      	ldrh	r3, [r4, #2]
    25f2:	2b00      	cmp	r3, #0
    25f4:	f47f aefd 	bne.w	23f2 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    25f8:	2101      	movs	r1, #1
    25fa:	e003      	b.n	2604 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    25fc:	8861      	ldrh	r1, [r4, #2]
    25fe:	2900      	cmp	r1, #0
    2600:	f47f aef7 	bne.w	23f2 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2604:	88a0      	ldrh	r0, [r4, #4]
    2606:	f7ff fe51 	bl	22ac <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    260a:	2800      	cmp	r0, #0
    260c:	f47f aee3 	bne.w	23d6 <usb_handle_standard_request+0x56>
    2610:	e6ef      	b.n	23f2 <usb_handle_standard_request+0x72>
    2612:	bf00      	nop
    2614:	2000071c 	.word	0x2000071c
    2618:	200007d6 	.word	0x200007d6
		if (type == USB_DESC_CONFIGURATION) {
    261c:	2802      	cmp	r0, #2
		*data = p;
    261e:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2620:	f47f aef4 	bne.w	240c <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    2624:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    2626:	603b      	str	r3, [r7, #0]
		return true;
    2628:	e6d5      	b.n	23d6 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    262a:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    262e:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2630:	2800      	cmp	r0, #0
    2632:	f6bf af71 	bge.w	2518 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    2636:	2a00      	cmp	r2, #0
    2638:	f43f af66 	beq.w	2508 <usb_handle_standard_request+0x188>
    263c:	2a0a      	cmp	r2, #10
    263e:	f47f aed8 	bne.w	23f2 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    2642:	782a      	ldrb	r2, [r5, #0]
    2644:	2a00      	cmp	r2, #0
    2646:	f43f aed4 	beq.w	23f2 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    264a:	7869      	ldrb	r1, [r5, #1]
    264c:	2904      	cmp	r1, #4
    264e:	f47f af61 	bne.w	2514 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2652:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2654:	428b      	cmp	r3, r1
    2656:	f47f af5d 	bne.w	2514 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    265a:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    265c:	bf96      	itet	ls
    265e:	199b      	addls	r3, r3, r6
	return 0;
    2660:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2662:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2666:	f88c 3000 	strb.w	r3, [ip]
    266a:	e6d4      	b.n	2416 <usb_handle_standard_request+0x96>

0000266c <usb_data_to_host>:
{
    266c:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    266e:	4c13      	ldr	r4, [pc, #76]	; (26bc <usb_data_to_host+0x50>)
    2670:	7d23      	ldrb	r3, [r4, #20]
    2672:	b9cb      	cbnz	r3, 26a8 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2674:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2676:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2678:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    267a:	ab01      	add	r3, sp, #4
    267c:	2080      	movs	r0, #128	; 0x80
    267e:	f006 ffee 	bl	965e <usb_write>
		usb_dev.data_buf += chunk;
    2682:	9a01      	ldr	r2, [sp, #4]
    2684:	68a3      	ldr	r3, [r4, #8]
    2686:	4413      	add	r3, r2
    2688:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    268a:	68e3      	ldr	r3, [r4, #12]
    268c:	1a9b      	subs	r3, r3, r2
    268e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2690:	b943      	cbnz	r3, 26a4 <usb_data_to_host+0x38>
    2692:	b13a      	cbz	r2, 26a4 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2694:	6923      	ldr	r3, [r4, #16]
    2696:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2698:	429a      	cmp	r2, r3
    269a:	dd03      	ble.n	26a4 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    269c:	069b      	lsls	r3, r3, #26
    269e:	d101      	bne.n	26a4 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    26a0:	2301      	movs	r3, #1
    26a2:	7523      	strb	r3, [r4, #20]
}
    26a4:	b002      	add	sp, #8
    26a6:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    26a8:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    26aa:	461a      	mov	r2, r3
    26ac:	4619      	mov	r1, r3
    26ae:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    26b0:	7523      	strb	r3, [r4, #20]
}
    26b2:	b002      	add	sp, #8
    26b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    26b8:	f001 bf48 	b.w	454c <usb_dc_ep_write>
    26bc:	2000071c 	.word	0x2000071c

000026c0 <usb_handle_control_transfer>:
{
    26c0:	b530      	push	{r4, r5, lr}
    26c2:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    26c4:	2300      	movs	r3, #0
{
    26c6:	4602      	mov	r2, r0
    26c8:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    26ca:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    26cc:	2800      	cmp	r0, #0
    26ce:	d158      	bne.n	2782 <usb_handle_control_transfer+0xc2>
    26d0:	2900      	cmp	r1, #0
    26d2:	d135      	bne.n	2740 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    26d4:	2208      	movs	r2, #8
    26d6:	460b      	mov	r3, r1
    26d8:	eb0d 0102 	add.w	r1, sp, r2
    26dc:	f007 f9ba 	bl	9a54 <usb_dc_ep_read>
    26e0:	2800      	cmp	r0, #0
    26e2:	da04      	bge.n	26ee <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    26e4:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    26e6:	f001 fea3 	bl	4430 <usb_dc_ep_set_stall>
}
    26ea:	b005      	add	sp, #20
    26ec:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    26ee:	4c2a      	ldr	r4, [pc, #168]	; (2798 <usb_handle_control_transfer+0xd8>)
    26f0:	9a02      	ldr	r2, [sp, #8]
    26f2:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    26f4:	9a03      	ldr	r2, [sp, #12]
    26f6:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    26f8:	f104 0238 	add.w	r2, r4, #56	; 0x38
    26fc:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    26fe:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2702:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    2706:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    2708:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    270a:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    270e:	db0a      	blt.n	2726 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2710:	2b80      	cmp	r3, #128	; 0x80
    2712:	d904      	bls.n	271e <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2714:	2080      	movs	r0, #128	; 0x80
    2716:	f001 fe8b 	bl	4430 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    271a:	2000      	movs	r0, #0
    271c:	e7e3      	b.n	26e6 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    271e:	b113      	cbz	r3, 2726 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    2720:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    2724:	e7e1      	b.n	26ea <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    2726:	f7ff fd55 	bl	21d4 <usb_handle_request.constprop.0>
    272a:	2800      	cmp	r0, #0
    272c:	d0da      	beq.n	26e4 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    272e:	88e2      	ldrh	r2, [r4, #6]
    2730:	6923      	ldr	r3, [r4, #16]
    2732:	429a      	cmp	r2, r3
    2734:	bfd4      	ite	le
    2736:	60e2      	strle	r2, [r4, #12]
    2738:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    273a:	f7ff ff97 	bl	266c <usb_data_to_host>
    273e:	e7d4      	b.n	26ea <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    2740:	4c15      	ldr	r4, [pc, #84]	; (2798 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2742:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    2746:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2748:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    274a:	dc04      	bgt.n	2756 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    274c:	f007 f982 	bl	9a54 <usb_dc_ep_read>
    2750:	2800      	cmp	r0, #0
    2752:	daca      	bge.n	26ea <usb_handle_control_transfer+0x2a>
    2754:	e7c6      	b.n	26e4 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2756:	462a      	mov	r2, r5
    2758:	f007 f97c 	bl	9a54 <usb_dc_ep_read>
    275c:	2800      	cmp	r0, #0
    275e:	dbd9      	blt.n	2714 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    2760:	9a01      	ldr	r2, [sp, #4]
    2762:	68a3      	ldr	r3, [r4, #8]
    2764:	4413      	add	r3, r2
    2766:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2768:	68e3      	ldr	r3, [r4, #12]
    276a:	1a9b      	subs	r3, r3, r2
    276c:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    276e:	2b00      	cmp	r3, #0
    2770:	d1bb      	bne.n	26ea <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2772:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2776:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2778:	f7ff fd2c 	bl	21d4 <usb_handle_request.constprop.0>
    277c:	2800      	cmp	r0, #0
    277e:	d1dc      	bne.n	273a <usb_handle_control_transfer+0x7a>
    2780:	e7b0      	b.n	26e4 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2782:	2880      	cmp	r0, #128	; 0x80
    2784:	d1b1      	bne.n	26ea <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2786:	4b04      	ldr	r3, [pc, #16]	; (2798 <usb_handle_control_transfer+0xd8>)
    2788:	68da      	ldr	r2, [r3, #12]
    278a:	2a00      	cmp	r2, #0
    278c:	d1d5      	bne.n	273a <usb_handle_control_transfer+0x7a>
    278e:	7d1b      	ldrb	r3, [r3, #20]
    2790:	2b00      	cmp	r3, #0
    2792:	d1d2      	bne.n	273a <usb_handle_control_transfer+0x7a>
    2794:	e7a9      	b.n	26ea <usb_handle_control_transfer+0x2a>
    2796:	bf00      	nop
    2798:	2000071c 	.word	0x2000071c

0000279c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    279c:	4b05      	ldr	r3, [pc, #20]	; (27b4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    279e:	4a06      	ldr	r2, [pc, #24]	; (27b8 <usb_set_config+0x1c>)
    27a0:	629a      	str	r2, [r3, #40]	; 0x28
    27a2:	4a06      	ldr	r2, [pc, #24]	; (27bc <usb_set_config+0x20>)
    27a4:	62da      	str	r2, [r3, #44]	; 0x2c
    27a6:	4a06      	ldr	r2, [pc, #24]	; (27c0 <usb_set_config+0x24>)
    27a8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    27aa:	4a06      	ldr	r2, [pc, #24]	; (27c4 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    27ac:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    27ae:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    27b0:	2000      	movs	r0, #0
    27b2:	4770      	bx	lr
    27b4:	2000071c 	.word	0x2000071c
    27b8:	00002381 	.word	0x00002381
    27bc:	00002085 	.word	0x00002085
    27c0:	00002125 	.word	0x00002125
    27c4:	000020c5 	.word	0x000020c5

000027c8 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    27c8:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    27ca:	4b08      	ldr	r3, [pc, #32]	; (27ec <usb_device_init+0x24>)
    27cc:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    27d0:	b934      	cbnz	r4, 27e0 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    27d2:	f000 f8d7 	bl	2984 <usb_get_device_descriptor>
	if (!device_descriptor) {
    27d6:	b130      	cbz	r0, 27e6 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    27d8:	f7ff ffe0 	bl	279c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    27dc:	4620      	mov	r0, r4
}
    27de:	bd10      	pop	{r4, pc}
		return -EALREADY;
    27e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    27e4:	e7fb      	b.n	27de <usb_device_init+0x16>
		return -1;
    27e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27ea:	e7f8      	b.n	27de <usb_device_init+0x16>
    27ec:	2000071c 	.word	0x2000071c

000027f0 <usb_enable>:
{
    27f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    27f4:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    27f6:	4d3b      	ldr	r5, [pc, #236]	; (28e4 <usb_enable+0xf4>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    27f8:	483b      	ldr	r0, [pc, #236]	; (28e8 <usb_enable+0xf8>)
    27fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2802:	f005 f971 	bl	7ae8 <z_impl_k_mutex_lock>
    2806:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    280a:	2e00      	cmp	r6, #0
    280c:	d167      	bne.n	28de <usb_enable+0xee>
	usb_dev.status_callback = cb;
    280e:	4837      	ldr	r0, [pc, #220]	; (28ec <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    2810:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    2812:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    2814:	f001 ffb4 	bl	4780 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2818:	f001 fda2 	bl	4360 <usb_dc_attach>
	if (ret < 0) {
    281c:	1e04      	subs	r4, r0, #0
    281e:	db42      	blt.n	28a6 <usb_enable+0xb6>
	ret = usb_transfer_init();
    2820:	f000 fb02 	bl	2e28 <usb_transfer_init>
	if (ret < 0) {
    2824:	1e04      	subs	r4, r0, #0
    2826:	db3e      	blt.n	28a6 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2828:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    282a:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    282c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2830:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2834:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2838:	f001 fdd6 	bl	43e8 <usb_dc_ep_configure>
	if (ret < 0) {
    283c:	1e04      	subs	r4, r0, #0
    283e:	db32      	blt.n	28a6 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2840:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2842:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2844:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2848:	f001 fdce 	bl	43e8 <usb_dc_ep_configure>
	if (ret < 0) {
    284c:	1e04      	subs	r4, r0, #0
    284e:	db2a      	blt.n	28a6 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2850:	4927      	ldr	r1, [pc, #156]	; (28f0 <usb_enable+0x100>)
    2852:	4630      	mov	r0, r6
    2854:	f001 ff80 	bl	4758 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2858:	1e04      	subs	r4, r0, #0
    285a:	db24      	blt.n	28a6 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    285c:	4924      	ldr	r1, [pc, #144]	; (28f0 <usb_enable+0x100>)
    285e:	4638      	mov	r0, r7
    2860:	f001 ff7a 	bl	4758 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2864:	1e04      	subs	r4, r0, #0
    2866:	db1e      	blt.n	28a6 <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2868:	4c22      	ldr	r4, [pc, #136]	; (28f4 <usb_enable+0x104>)
    286a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 28f8 <usb_enable+0x108>
    286e:	4544      	cmp	r4, r8
    2870:	d320      	bcc.n	28b4 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2872:	2000      	movs	r0, #0
    2874:	f001 fe40 	bl	44f8 <usb_dc_ep_enable>
	if (ret < 0) {
    2878:	1e04      	subs	r4, r0, #0
    287a:	db14      	blt.n	28a6 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    287c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2880:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2882:	f043 0301 	orr.w	r3, r3, #1
    2886:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    288a:	f001 fe35 	bl	44f8 <usb_dc_ep_enable>
	if (ret < 0) {
    288e:	1e04      	subs	r4, r0, #0
    2890:	db09      	blt.n	28a6 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2892:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    289a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    289e:	2301      	movs	r3, #1
    28a0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    28a4:	2400      	movs	r4, #0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    28a6:	4810      	ldr	r0, [pc, #64]	; (28e8 <usb_enable+0xf8>)
    28a8:	f005 f998 	bl	7bdc <z_impl_k_mutex_unlock>
}
    28ac:	4620      	mov	r0, r4
    28ae:	b002      	add	sp, #8
    28b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    28b4:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    28b6:	2600      	movs	r6, #0
    28b8:	7f22      	ldrb	r2, [r4, #28]
    28ba:	b2f3      	uxtb	r3, r6
    28bc:	429a      	cmp	r2, r3
    28be:	d801      	bhi.n	28c4 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28c0:	3424      	adds	r4, #36	; 0x24
    28c2:	e7d4      	b.n	286e <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    28c4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    28c8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    28cc:	7910      	ldrb	r0, [r2, #4]
    28ce:	f001 ff43 	bl	4758 <usb_dc_ep_set_callback>
    28d2:	3601      	adds	r6, #1
    28d4:	2800      	cmp	r0, #0
    28d6:	d0ef      	beq.n	28b8 <usb_enable+0xc8>
    28d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    28dc:	e7e3      	b.n	28a6 <usb_enable+0xb6>
		ret = -EALREADY;
    28de:	f06f 0477 	mvn.w	r4, #119	; 0x77
    28e2:	e7e0      	b.n	28a6 <usb_enable+0xb6>
    28e4:	2000071c 	.word	0x2000071c
    28e8:	200002bc 	.word	0x200002bc
    28ec:	00002201 	.word	0x00002201
    28f0:	000026c1 	.word	0x000026c1
    28f4:	200003b4 	.word	0x200003b4
    28f8:	200003d8 	.word	0x200003d8

000028fc <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    28fc:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    28fe:	4b1f      	ldr	r3, [pc, #124]	; (297c <usb_update_sn_string_descriptor+0x80>)
{
    2900:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2902:	aa05      	add	r2, sp, #20
    2904:	f103 0510 	add.w	r5, r3, #16
    2908:	6818      	ldr	r0, [r3, #0]
    290a:	6859      	ldr	r1, [r3, #4]
    290c:	4614      	mov	r4, r2
    290e:	c403      	stmia	r4!, {r0, r1}
    2910:	3308      	adds	r3, #8
    2912:	42ab      	cmp	r3, r5
    2914:	4622      	mov	r2, r4
    2916:	d1f7      	bne.n	2908 <usb_update_sn_string_descriptor+0xc>
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    291c:	2210      	movs	r2, #16
    291e:	2100      	movs	r1, #0
    2920:	a801      	add	r0, sp, #4
    2922:	f007 f831 	bl	9988 <memset>
	memset(sn, 0, sizeof(sn));
    2926:	2212      	movs	r2, #18
    2928:	2100      	movs	r1, #0
    292a:	4815      	ldr	r0, [pc, #84]	; (2980 <usb_update_sn_string_descriptor+0x84>)
    292c:	f007 f82c 	bl	9988 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2930:	2110      	movs	r1, #16
    2932:	a801      	add	r0, sp, #4
    2934:	f007 f983 	bl	9c3e <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2938:	2800      	cmp	r0, #0
    293a:	dd1b      	ble.n	2974 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    293c:	2808      	cmp	r0, #8
    293e:	bfb8      	it	lt
    2940:	2008      	movlt	r0, #8
    2942:	3809      	subs	r0, #9
    2944:	ab01      	add	r3, sp, #4
    2946:	490e      	ldr	r1, [pc, #56]	; (2980 <usb_update_sn_string_descriptor+0x84>)
    2948:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    294a:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    294c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2950:	ac0a      	add	r4, sp, #40	; 0x28
    2952:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2956:	f003 030f 	and.w	r3, r3, #15
    295a:	3328      	adds	r3, #40	; 0x28
    295c:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    295e:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2960:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2964:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2968:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    296a:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    296c:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    296e:	f101 0102 	add.w	r1, r1, #2
    2972:	d1eb      	bne.n	294c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2974:	4802      	ldr	r0, [pc, #8]	; (2980 <usb_update_sn_string_descriptor+0x84>)
    2976:	b00b      	add	sp, #44	; 0x2c
    2978:	bd30      	pop	{r4, r5, pc}
    297a:	bf00      	nop
    297c:	0000ae4b 	.word	0x0000ae4b
    2980:	20001bfe 	.word	0x20001bfe

00002984 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2988:	4c64      	ldr	r4, [pc, #400]	; (2b1c <usb_get_device_descriptor+0x198>)
    298a:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
    298c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    298e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2992:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
    2994:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2996:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
    2998:	7823      	ldrb	r3, [r4, #0]
    299a:	b92b      	cbnz	r3, 29a8 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
    299c:	4b60      	ldr	r3, [pc, #384]	; (2b20 <usb_get_device_descriptor+0x19c>)
    299e:	3402      	adds	r4, #2
    29a0:	429c      	cmp	r4, r3
    29a2:	d1f3      	bne.n	298c <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    29a4:	485d      	ldr	r0, [pc, #372]	; (2b1c <usb_get_device_descriptor+0x198>)
    29a6:	e01c      	b.n	29e2 <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
    29a8:	7863      	ldrb	r3, [r4, #1]
    29aa:	2b05      	cmp	r3, #5
    29ac:	d805      	bhi.n	29ba <usb_get_device_descriptor+0x36>
    29ae:	e8df f003 	tbb	[pc, r3]
    29b2:	047b      	.short	0x047b
    29b4:	25077b03 	.word	0x25077b03
    29b8:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    29ba:	7823      	ldrb	r3, [r4, #0]
    29bc:	441c      	add	r4, r3
    29be:	e7eb      	b.n	2998 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    29c0:	78e3      	ldrb	r3, [r4, #3]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d1f9      	bne.n	29ba <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    29c6:	78a3      	ldrb	r3, [r4, #2]
    29c8:	b173      	cbz	r3, 29e8 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
    29ca:	f109 0901 	add.w	r9, r9, #1
    29ce:	fa5f f989 	uxtb.w	r9, r9
			break;
    29d2:	e7f2      	b.n	29ba <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    29d4:	686a      	ldr	r2, [r5, #4]
    29d6:	4294      	cmp	r4, r2
    29d8:	d009      	beq.n	29ee <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29da:	3524      	adds	r5, #36	; 0x24
    29dc:	429d      	cmp	r5, r3
    29de:	d3f9      	bcc.n	29d4 <usb_get_device_descriptor+0x50>
		return NULL;
    29e0:	2000      	movs	r0, #0
}
    29e2:	b005      	add	sp, #20
    29e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29e8:	4d4e      	ldr	r5, [pc, #312]	; (2b24 <usb_get_device_descriptor+0x1a0>)
    29ea:	4b4f      	ldr	r3, [pc, #316]	; (2b28 <usb_get_device_descriptor+0x1a4>)
    29ec:	e7f6      	b.n	29dc <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
    29ee:	68ab      	ldr	r3, [r5, #8]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d0ea      	beq.n	29ca <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
    29f4:	4649      	mov	r1, r9
    29f6:	4620      	mov	r0, r4
    29f8:	4798      	blx	r3
    29fa:	e7e6      	b.n	29ca <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
    29fc:	2d00      	cmp	r5, #0
    29fe:	d0ef      	beq.n	29e0 <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2a00:	2300      	movs	r3, #0
    2a02:	2101      	movs	r1, #1
    2a04:	7f2a      	ldrb	r2, [r5, #28]
    2a06:	4293      	cmp	r3, r2
    2a08:	d2ea      	bcs.n	29e0 <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    2a0a:	6a2a      	ldr	r2, [r5, #32]
    2a0c:	78a7      	ldrb	r7, [r4, #2]
    2a0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2a12:	7910      	ldrb	r0, [r2, #4]
    2a14:	4287      	cmp	r7, r0
    2a16:	d001      	beq.n	2a1c <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2a18:	3301      	adds	r3, #1
    2a1a:	e7f3      	b.n	2a04 <usb_get_device_descriptor+0x80>
    2a1c:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2a1e:	78e0      	ldrb	r0, [r4, #3]
    2a20:	f000 0003 	and.w	r0, r0, #3
    2a24:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2a28:	7920      	ldrb	r0, [r4, #4]
    2a2a:	f894 c005 	ldrb.w	ip, [r4, #5]
    2a2e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2a32:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2a36:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2a3a:	2800      	cmp	r0, #0
    2a3c:	fa5f f887 	uxtb.w	r8, r7
    2a40:	da27      	bge.n	2a92 <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2a42:	f107 0010 	add.w	r0, r7, #16
    2a46:	fa01 f000 	lsl.w	r0, r1, r0
    2a4a:	ea10 0f0b 	tst.w	r0, fp
    2a4e:	d127      	bne.n	2aa0 <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2a50:	f048 0080 	orr.w	r0, r8, #128	; 0x80
    2a54:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2a58:	a802      	add	r0, sp, #8
    2a5a:	e9cd 3200 	strd	r3, r2, [sp]
    2a5e:	f006 ffc8 	bl	99f2 <usb_dc_ep_check_cap>
    2a62:	e9dd 3200 	ldrd	r3, r2, [sp]
    2a66:	2101      	movs	r1, #1
    2a68:	b9d0      	cbnz	r0, 2aa0 <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2a6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2a6e:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2a70:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2a74:	bf18      	it	ne
    2a76:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2a7a:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    2a7c:	bf18      	it	ne
    2a7e:	fa5f f888 	uxtbne.w	r8, r8
    2a82:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    2a84:	bf0c      	ite	eq
    2a86:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    2a88:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
    2a8c:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
    2a90:	e793      	b.n	29ba <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    2a92:	fa01 f007 	lsl.w	r0, r1, r7
    2a96:	ea10 0f0b 	tst.w	r0, fp
    2a9a:	d101      	bne.n	2aa0 <usb_get_device_descriptor+0x11c>
    2a9c:	4640      	mov	r0, r8
    2a9e:	e7d9      	b.n	2a54 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2aa0:	3701      	adds	r7, #1
    2aa2:	2f10      	cmp	r7, #16
    2aa4:	d1bb      	bne.n	2a1e <usb_get_device_descriptor+0x9a>
    2aa6:	e7b7      	b.n	2a18 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2aa8:	2e03      	cmp	r6, #3
    2aaa:	d11d      	bne.n	2ae8 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2aac:	f7ff ff26 	bl	28fc <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2ab0:	4607      	mov	r7, r0
    2ab2:	b168      	cbz	r0, 2ad0 <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
    2ab4:	f006 ff4d 	bl	9952 <strlen>
	if (!runtime_sn_len) {
    2ab8:	4680      	mov	r8, r0
    2aba:	b148      	cbz	r0, 2ad0 <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2abc:	481b      	ldr	r0, [pc, #108]	; (2b2c <usb_get_device_descriptor+0x1a8>)
    2abe:	f006 ff48 	bl	9952 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2ac2:	4580      	cmp	r8, r0
    2ac4:	d104      	bne.n	2ad0 <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2ac6:	4642      	mov	r2, r8
    2ac8:	4639      	mov	r1, r7
    2aca:	1ca0      	adds	r0, r4, #2
    2acc:	f006 ff51 	bl	9972 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2ad0:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2ad2:	f06f 0102 	mvn.w	r1, #2
    2ad6:	18e2      	adds	r2, r4, r3
    2ad8:	1b09      	subs	r1, r1, r4
    2ada:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    2ade:	42d1      	cmn	r1, r2
    2ae0:	d513      	bpl.n	2b0a <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
    2ae2:	3601      	adds	r6, #1
    2ae4:	b2f6      	uxtb	r6, r6
			break;
    2ae6:	e768      	b.n	29ba <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
    2ae8:	2e00      	cmp	r6, #0
    2aea:	d1f1      	bne.n	2ad0 <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
    2aec:	f1ba 0f00 	cmp.w	sl, #0
    2af0:	f43f af76 	beq.w	29e0 <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2af4:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2af8:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    2afc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2b00:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2b04:	f88a 9004 	strb.w	r9, [sl, #4]
    2b08:	e7eb      	b.n	2ae2 <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
    2b0a:	f04f 0000 	mov.w	r0, #0
    2b0e:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2b12:	f813 0901 	ldrb.w	r0, [r3], #-1
    2b16:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2b1a:	e7e0      	b.n	2ade <usb_get_device_descriptor+0x15a>
    2b1c:	200002e0 	.word	0x200002e0
    2b20:	200003b3 	.word	0x200003b3
    2b24:	200003b4 	.word	0x200003b4
    2b28:	200003d8 	.word	0x200003d8
    2b2c:	0000ae4b 	.word	0x0000ae4b

00002b30 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	4b09      	ldr	r3, [pc, #36]	; (2b58 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b34:	2100      	movs	r1, #0
    2b36:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2b38:	781c      	ldrb	r4, [r3, #0]
    2b3a:	4284      	cmp	r4, r0
    2b3c:	d104      	bne.n	2b48 <usb_ep_get_transfer+0x18>
    2b3e:	685c      	ldr	r4, [r3, #4]
    2b40:	b114      	cbz	r4, 2b48 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2b42:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2b46:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2b48:	3101      	adds	r1, #1
    2b4a:	2904      	cmp	r1, #4
    2b4c:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2b50:	d1f2      	bne.n	2b38 <usb_ep_get_transfer+0x8>
	return NULL;
    2b52:	2000      	movs	r0, #0
    2b54:	e7f7      	b.n	2b46 <usb_ep_get_transfer+0x16>
    2b56:	bf00      	nop
    2b58:	200007e4 	.word	0x200007e4

00002b5c <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2b60:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    2b64:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2b68:	3310      	adds	r3, #16
{
    2b6a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2b6c:	d110      	bne.n	2b90 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2b6e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2b70:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2b74:	0799      	lsls	r1, r3, #30
    2b76:	d53c      	bpl.n	2bf2 <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2b78:	bb02      	cbnz	r2, 2bbc <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2b7a:	f013 0304 	ands.w	r3, r3, #4
    2b7e:	d104      	bne.n	2b8a <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2b80:	461a      	mov	r2, r3
    2b82:	4619      	mov	r1, r3
    2b84:	4630      	mov	r0, r6
    2b86:	f006 fd6a 	bl	965e <usb_write>
			}
			trans->status = 0;
    2b8a:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2b8c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2b90:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2b94:	3310      	adds	r3, #16
    2b96:	d00e      	beq.n	2bb6 <usb_transfer_work+0x5a>
    2b98:	f854 5c18 	ldr.w	r5, [r4, #-24]
    2b9c:	b15d      	cbz	r5, 2bb6 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2b9e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2ba2:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2ba6:	f007 fb0e 	bl	a1c6 <k_is_in_isr>
    2baa:	2800      	cmp	r0, #0
    2bac:	d04c      	beq.n	2c48 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2bae:	482c      	ldr	r0, [pc, #176]	; (2c60 <usb_transfer_work+0x104>)
    2bb0:	4621      	mov	r1, r4
    2bb2:	f007 fbfc 	bl	a3ae <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    2bb6:	b002      	add	sp, #8
    2bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2bbc:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2bc0:	ab01      	add	r3, sp, #4
    2bc2:	4630      	mov	r0, r6
    2bc4:	f006 fd4b 	bl	965e <usb_write>
		if (ret) {
    2bc8:	b110      	cbz	r0, 2bd0 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2bca:	f06f 0315 	mvn.w	r3, #21
    2bce:	e7dd      	b.n	2b8c <usb_transfer_work+0x30>
		trans->buffer += bytes;
    2bd0:	9a01      	ldr	r2, [sp, #4]
    2bd2:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2bd6:	4413      	add	r3, r2
    2bd8:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2bdc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2be0:	1a9b      	subs	r3, r3, r2
    2be2:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2be6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2bea:	4413      	add	r3, r2
    2bec:	f844 3c1c 	str.w	r3, [r4, #-28]
    2bf0:	e7ce      	b.n	2b90 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2bf2:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2bf6:	ab01      	add	r3, sp, #4
    2bf8:	4630      	mov	r0, r6
    2bfa:	f001 fd23 	bl	4644 <usb_dc_ep_read_wait>
		if (ret) {
    2bfe:	2800      	cmp	r0, #0
    2c00:	d1e3      	bne.n	2bca <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2c02:	9d01      	ldr	r5, [sp, #4]
    2c04:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2c08:	442b      	add	r3, r5
    2c0a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2c0e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2c12:	1b5b      	subs	r3, r3, r5
    2c14:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2c18:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2c1c:	442b      	add	r3, r5
    2c1e:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2c22:	2d00      	cmp	r5, #0
    2c24:	d0b1      	beq.n	2b8a <usb_transfer_work+0x2e>
    2c26:	4630      	mov	r0, r6
    2c28:	f001 fdb0 	bl	478c <usb_dc_ep_mps>
    2c2c:	fbb5 f3f0 	udiv	r3, r5, r0
    2c30:	fb03 5510 	mls	r5, r3, r0, r5
    2c34:	2d00      	cmp	r5, #0
    2c36:	d1a8      	bne.n	2b8a <usb_transfer_work+0x2e>
    2c38:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d0a4      	beq.n	2b8a <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2c40:	4630      	mov	r0, r6
    2c42:	f001 fd47 	bl	46d4 <usb_dc_ep_read_continue>
    2c46:	e7a3      	b.n	2b90 <usb_transfer_work+0x34>
		trans->cb = NULL;
    2c48:	f844 0c18 	str.w	r0, [r4, #-24]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2c4c:	f1a4 0010 	sub.w	r0, r4, #16
    2c50:	f005 f834 	bl	7cbc <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    2c54:	4642      	mov	r2, r8
    2c56:	4639      	mov	r1, r7
    2c58:	4630      	mov	r0, r6
    2c5a:	47a8      	blx	r5
    2c5c:	e7ab      	b.n	2bb6 <usb_transfer_work+0x5a>
    2c5e:	bf00      	nop
    2c60:	200003d8 	.word	0x200003d8

00002c64 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2c64:	1e4b      	subs	r3, r1, #1
    2c66:	2b01      	cmp	r3, #1
{
    2c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2c6a:	4606      	mov	r6, r0
    2c6c:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2c6e:	d80f      	bhi.n	2c90 <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2c70:	f7ff ff5e 	bl	2b30 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2c74:	4604      	mov	r4, r0
    2c76:	b968      	cbnz	r0, 2c94 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2c78:	2d01      	cmp	r5, #1
    2c7a:	d109      	bne.n	2c90 <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2c7c:	ab01      	add	r3, sp, #4
    2c7e:	2201      	movs	r2, #1
    2c80:	f10d 0103 	add.w	r1, sp, #3
    2c84:	4630      	mov	r0, r6
    2c86:	f001 fcdd 	bl	4644 <usb_dc_ep_read_wait>
			} while (bytes);
    2c8a:	9b01      	ldr	r3, [sp, #4]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d1f5      	bne.n	2c7c <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2c90:	b002      	add	sp, #8
    2c92:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2c94:	f007 fa97 	bl	a1c6 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2c98:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2c9c:	b108      	cbz	r0, 2ca2 <usb_transfer_ep_callback+0x3e>
    2c9e:	2d01      	cmp	r5, #1
    2ca0:	d105      	bne.n	2cae <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2ca2:	4608      	mov	r0, r1
}
    2ca4:	b002      	add	sp, #8
    2ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2caa:	f7ff bf57 	b.w	2b5c <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2cae:	4803      	ldr	r0, [pc, #12]	; (2cbc <usb_transfer_ep_callback+0x58>)
}
    2cb0:	b002      	add	sp, #8
    2cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2cb6:	f007 bb7a 	b.w	a3ae <k_work_submit_to_queue>
    2cba:	bf00      	nop
    2cbc:	200003d8 	.word	0x200003d8

00002cc0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc4:	4606      	mov	r6, r0
    2cc6:	9101      	str	r1, [sp, #4]
    2cc8:	4615      	mov	r5, r2
    2cca:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2ccc:	f006 fd0f 	bl	96ee <usb_transfer_is_busy>
    2cd0:	4604      	mov	r4, r0
    2cd2:	2800      	cmp	r0, #0
    2cd4:	d15c      	bne.n	2d90 <usb_transfer+0xd0>
	__asm__ volatile(
    2cd6:	f04f 0320 	mov.w	r3, #32
    2cda:	f3ef 8a11 	mrs	sl, BASEPRI
    2cde:	f383 8812 	msr	BASEPRI_MAX, r3
    2ce2:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ce6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2d98 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    2cea:	2200      	movs	r2, #0
    2cec:	2300      	movs	r3, #0
    2cee:	4658      	mov	r0, fp
    2cf0:	f005 f804 	bl	7cfc <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2cf4:	b970      	cbnz	r0, 2d14 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2cf6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2d9c <usb_transfer+0xdc>
    2cfa:	01a7      	lsls	r7, r4, #6
    2cfc:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2d00:	6863      	ldr	r3, [r4, #4]
    2d02:	f113 0f10 	cmn.w	r3, #16
    2d06:	d114      	bne.n	2d32 <usb_transfer+0x72>
    2d08:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2d0a:	4658      	mov	r0, fp
    2d0c:	f004 ffd6 	bl	7cbc <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2d10:	9b01      	ldr	r3, [sp, #4]
    2d12:	e006      	b.n	2d22 <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2d14:	3401      	adds	r4, #1
    2d16:	2c04      	cmp	r4, #4
    2d18:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2d1c:	d1e5      	bne.n	2cea <usb_transfer+0x2a>
		ret = -ENOMEM;
    2d1e:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2d22:	f38a 8811 	msr	BASEPRI, sl
    2d26:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2d2a:	4618      	mov	r0, r3
    2d2c:	b003      	add	sp, #12
    2d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2d32:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2d34:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2d36:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d3c:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2d40:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2d42:	4630      	mov	r0, r6
	trans->status = -EBUSY;
    2d44:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    2d48:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    2d4c:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2d50:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2d52:	f001 fd1b 	bl	478c <usb_dc_ep_mps>
    2d56:	b158      	cbz	r0, 2d70 <usb_transfer+0xb0>
    2d58:	4630      	mov	r0, r6
    2d5a:	f001 fd17 	bl	478c <usb_dc_ep_mps>
    2d5e:	fbb5 f3f0 	udiv	r3, r5, r0
    2d62:	fb03 5510 	mls	r5, r3, r0, r5
    2d66:	b11d      	cbz	r5, 2d70 <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2d6a:	f043 0304 	orr.w	r3, r3, #4
    2d6e:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2d70:	f018 0f02 	tst.w	r8, #2
    2d74:	d007      	beq.n	2d86 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2d76:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2d7a:	4809      	ldr	r0, [pc, #36]	; (2da0 <usb_transfer+0xe0>)
    2d7c:	4449      	add	r1, r9
    2d7e:	f007 fb16 	bl	a3ae <k_work_submit_to_queue>
	int key, ret = 0;
    2d82:	2300      	movs	r3, #0
    2d84:	e7cd      	b.n	2d22 <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2d86:	4630      	mov	r0, r6
    2d88:	f001 fca4 	bl	46d4 <usb_dc_ep_read_continue>
    2d8c:	4603      	mov	r3, r0
    2d8e:	e7c8      	b.n	2d22 <usb_transfer+0x62>
		return -EBUSY;
    2d90:	f06f 030f 	mvn.w	r3, #15
    2d94:	e7c9      	b.n	2d2a <usb_transfer+0x6a>
    2d96:	bf00      	nop
    2d98:	20000800 	.word	0x20000800
    2d9c:	200007e4 	.word	0x200007e4
    2da0:	200003d8 	.word	0x200003d8

00002da4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2da4:	b510      	push	{r4, lr}
	__asm__ volatile(
    2da6:	f04f 0320 	mov.w	r3, #32
    2daa:	f3ef 8411 	mrs	r4, BASEPRI
    2dae:	f383 8812 	msr	BASEPRI_MAX, r3
    2db2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2db6:	f7ff febb 	bl	2b30 <usb_ep_get_transfer>
	if (!trans) {
    2dba:	b150      	cbz	r0, 2dd2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2dbc:	6843      	ldr	r3, [r0, #4]
    2dbe:	3310      	adds	r3, #16
    2dc0:	d107      	bne.n	2dd2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2dc2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    2dc6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2dc8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2dcc:	4803      	ldr	r0, [pc, #12]	; (2ddc <usb_cancel_transfer+0x38>)
    2dce:	f007 faee 	bl	a3ae <k_work_submit_to_queue>
	__asm__ volatile(
    2dd2:	f384 8811 	msr	BASEPRI, r4
    2dd6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	200003d8 	.word	0x200003d8

00002de0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	4c0f      	ldr	r4, [pc, #60]	; (2e20 <usb_cancel_transfers+0x40>)
    2de4:	2504      	movs	r5, #4
	__asm__ volatile(
    2de6:	f04f 0320 	mov.w	r3, #32
    2dea:	f3ef 8611 	mrs	r6, BASEPRI
    2dee:	f383 8812 	msr	BASEPRI_MAX, r3
    2df2:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2df6:	6863      	ldr	r3, [r4, #4]
    2df8:	3310      	adds	r3, #16
    2dfa:	d107      	bne.n	2e0c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2dfc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e00:	4808      	ldr	r0, [pc, #32]	; (2e24 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2e02:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e04:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2e08:	f007 fad1 	bl	a3ae <k_work_submit_to_queue>
	__asm__ volatile(
    2e0c:	f386 8811 	msr	BASEPRI, r6
    2e10:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e14:	3d01      	subs	r5, #1
    2e16:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2e1a:	d1e4      	bne.n	2de6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2e1c:	bd70      	pop	{r4, r5, r6, pc}
    2e1e:	bf00      	nop
    2e20:	200007e4 	.word	0x200007e4
    2e24:	200003d8 	.word	0x200003d8

00002e28 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2e28:	b570      	push	{r4, r5, r6, lr}
    2e2a:	4c0a      	ldr	r4, [pc, #40]	; (2e54 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2e2c:	4e0a      	ldr	r6, [pc, #40]	; (2e58 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e2e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2e30:	4631      	mov	r1, r6
    2e32:	4620      	mov	r0, r4
    2e34:	f007 fa9e 	bl	a374 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2e38:	2201      	movs	r2, #1
    2e3a:	f1a4 0010 	sub.w	r0, r4, #16
    2e3e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e40:	3501      	adds	r5, #1
    2e42:	f007 fa5a 	bl	a2fa <z_impl_k_sem_init>
    2e46:	2d04      	cmp	r5, #4
    2e48:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2e4c:	d1f0      	bne.n	2e30 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2e4e:	2000      	movs	r0, #0
    2e50:	bd70      	pop	{r4, r5, r6, pc}
    2e52:	bf00      	nop
    2e54:	20000810 	.word	0x20000810
    2e58:	00002b5d 	.word	0x00002b5d

00002e5c <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	4604      	mov	r4, r0
    2e60:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2e62:	7901      	ldrb	r1, [r0, #4]
    2e64:	4812      	ldr	r0, [pc, #72]	; (2eb0 <cdc_acm_class_handle_req+0x54>)
{
    2e66:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    2e68:	f006 fc1d 	bl	96a6 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    2e6c:	b1e8      	cbz	r0, 2eaa <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    2e6e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2e72:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    2e74:	2a00      	cmp	r2, #0
    2e76:	db11      	blt.n	2e9c <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    2e78:	2b20      	cmp	r3, #32
    2e7a:	d004      	beq.n	2e86 <cdc_acm_class_handle_req+0x2a>
    2e7c:	2b22      	cmp	r3, #34	; 0x22
    2e7e:	d009      	beq.n	2e94 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    2e80:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2e84:	e005      	b.n	2e92 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    2e86:	6829      	ldr	r1, [r5, #0]
    2e88:	2207      	movs	r2, #7
    2e8a:	3810      	subs	r0, #16
    2e8c:	f006 fd71 	bl	9972 <memcpy>
			return 0;
    2e90:	2000      	movs	r0, #0
}
    2e92:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    2e94:	8863      	ldrh	r3, [r4, #2]
    2e96:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    2e9a:	e7f9      	b.n	2e90 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    2e9c:	2b21      	cmp	r3, #33	; 0x21
    2e9e:	d1ef      	bne.n	2e80 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    2ea0:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    2ea2:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    2ea4:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    2ea6:	6033      	str	r3, [r6, #0]
			return 0;
    2ea8:	e7f2      	b.n	2e90 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    2eaa:	f06f 0012 	mvn.w	r0, #18
    2eae:	e7f0      	b.n	2e92 <cdc_acm_class_handle_req+0x36>
    2eb0:	200008e4 	.word	0x200008e4

00002eb4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    2eb4:	b508      	push	{r3, lr}
    2eb6:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    2eb8:	4803      	ldr	r0, [pc, #12]	; (2ec8 <cdc_acm_int_in+0x14>)
    2eba:	f006 fc02 	bl	96c2 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    2ebe:	b110      	cbz	r0, 2ec6 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    2ec0:	2301      	movs	r3, #1
    2ec2:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    2ec6:	bd08      	pop	{r3, pc}
    2ec8:	200008e4 	.word	0x200008e4

00002ecc <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2ecc:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    2ece:	2301      	movs	r3, #1
    2ed0:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    2ed4:	680b      	ldr	r3, [r1, #0]
    2ed6:	b133      	cbz	r3, 2ee6 <cdc_acm_irq_rx_enable+0x1a>
    2ed8:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    2edc:	b11b      	cbz	r3, 2ee6 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2ede:	4802      	ldr	r0, [pc, #8]	; (2ee8 <cdc_acm_irq_rx_enable+0x1c>)
    2ee0:	3108      	adds	r1, #8
    2ee2:	f007 ba64 	b.w	a3ae <k_work_submit_to_queue>
	}
}
    2ee6:	4770      	bx	lr
    2ee8:	200003d8 	.word	0x200003d8

00002eec <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2eec:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    2eee:	2301      	movs	r3, #1
    2ef0:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    2ef4:	680b      	ldr	r3, [r1, #0]
    2ef6:	b133      	cbz	r3, 2f06 <cdc_acm_irq_tx_enable+0x1a>
    2ef8:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    2efc:	b11b      	cbz	r3, 2f06 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    2efe:	4802      	ldr	r0, [pc, #8]	; (2f08 <cdc_acm_irq_tx_enable+0x1c>)
    2f00:	3108      	adds	r1, #8
    2f02:	f007 ba54 	b.w	a3ae <k_work_submit_to_queue>
}
    2f06:	4770      	bx	lr
    2f08:	200003d8 	.word	0x200003d8

00002f0c <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2f0c:	4a0d      	ldr	r2, [pc, #52]	; (2f44 <cdc_acm_reset_port+0x38>)
{
    2f0e:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    2f10:	2100      	movs	r1, #0
    2f12:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    2f16:	6810      	ldr	r0, [r2, #0]
    2f18:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    2f1c:	8890      	ldrh	r0, [r2, #4]
    2f1e:	7992      	ldrb	r2, [r2, #6]
    2f20:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    2f24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    2f28:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    2f2c:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    2f30:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    2f34:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    2f38:	2240      	movs	r2, #64	; 0x40
    2f3a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    2f3e:	f006 bd23 	b.w	9988 <memset>
    2f42:	bf00      	nop
    2f44:	0000aaf0 	.word	0x0000aaf0

00002f48 <cdc_acm_fifo_fill>:
{
    2f48:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2f4a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    2f4c:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    2f50:	b188      	cbz	r0, 2f76 <cdc_acm_fifo_fill+0x2e>
    2f52:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    2f56:	b97b      	cbnz	r3, 2f78 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    2f58:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2f5c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    2f60:	f006 fafa 	bl	9558 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2f64:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    2f66:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    2f68:	2300      	movs	r3, #0
    2f6a:	4804      	ldr	r0, [pc, #16]	; (2f7c <cdc_acm_fifo_fill+0x34>)
    2f6c:	f105 0118 	add.w	r1, r5, #24
    2f70:	f005 f81a 	bl	7fa8 <k_work_schedule_for_queue>
	return wrote;
    2f74:	4620      	mov	r0, r4
}
    2f76:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2f78:	2000      	movs	r0, #0
    2f7a:	e7fc      	b.n	2f76 <cdc_acm_fifo_fill+0x2e>
    2f7c:	200003d8 	.word	0x200003d8

00002f80 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    2f80:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    2f82:	6904      	ldr	r4, [r0, #16]
{
    2f84:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    2f88:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    2f8c:	b1a3      	cbz	r3, 2fb8 <cdc_acm_poll_out+0x38>
    2f8e:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    2f92:	b98b      	cbnz	r3, 2fb8 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2f94:	f10d 0107 	add.w	r1, sp, #7
    2f98:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    2f9c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2fa0:	2201      	movs	r2, #1
    2fa2:	f006 fad9 	bl	9558 <ring_buf_put>
    2fa6:	4601      	mov	r1, r0
    2fa8:	b140      	cbz	r0, 2fbc <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    2faa:	480d      	ldr	r0, [pc, #52]	; (2fe0 <cdc_acm_poll_out+0x60>)
    2fac:	2221      	movs	r2, #33	; 0x21
    2fae:	2300      	movs	r3, #0
    2fb0:	f104 0118 	add.w	r1, r4, #24
    2fb4:	f004 fff8 	bl	7fa8 <k_work_schedule_for_queue>
}
    2fb8:	b002      	add	sp, #8
    2fba:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2fbc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2fc0:	2201      	movs	r2, #1
    2fc2:	f006 fb1d 	bl	9600 <ring_buf_get>
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d0f6      	beq.n	2fb8 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    2fca:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2fce:	2201      	movs	r2, #1
    2fd0:	f10d 0107 	add.w	r1, sp, #7
    2fd4:	f006 fac0 	bl	9558 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    2fd8:	2800      	cmp	r0, #0
    2fda:	d1e6      	bne.n	2faa <cdc_acm_poll_out+0x2a>
    2fdc:	e7ec      	b.n	2fb8 <cdc_acm_poll_out+0x38>
    2fde:	bf00      	nop
    2fe0:	200003d8 	.word	0x200003d8

00002fe4 <tx_work_handler>:
{
    2fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    2fe6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    2fea:	685b      	ldr	r3, [r3, #4]
    2fec:	6a1b      	ldr	r3, [r3, #32]
    2fee:	7d1f      	ldrb	r7, [r3, #20]
{
    2ff0:	b085      	sub	sp, #20
    2ff2:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    2ff4:	4638      	mov	r0, r7
    2ff6:	f006 fb7a 	bl	96ee <usb_transfer_is_busy>
    2ffa:	4606      	mov	r6, r0
    2ffc:	b9e0      	cbnz	r0, 3038 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    2ffe:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    3000:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3004:	a903      	add	r1, sp, #12
    3006:	f006 fac6 	bl	9596 <ring_buf_get_claim>
	if (!len) {
    300a:	4604      	mov	r4, r0
    300c:	b1a0      	cbz	r0, 3038 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    300e:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    3010:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    3014:	bf08      	it	eq
    3016:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
    301a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    301e:	9301      	str	r3, [sp, #4]
    3020:	4b06      	ldr	r3, [pc, #24]	; (303c <tx_work_handler+0x58>)
    3022:	9903      	ldr	r1, [sp, #12]
    3024:	9300      	str	r3, [sp, #0]
    3026:	4622      	mov	r2, r4
    3028:	2302      	movs	r3, #2
    302a:	4638      	mov	r0, r7
    302c:	f7ff fe48 	bl	2cc0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    3030:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    3032:	4621      	mov	r1, r4
    3034:	f006 facf 	bl	95d6 <ring_buf_get_finish>
}
    3038:	b005      	add	sp, #20
    303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    303c:	00003041 	.word	0x00003041

00003040 <cdc_acm_write_cb>:
{
    3040:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    3042:	2301      	movs	r3, #1
    3044:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3048:	6813      	ldr	r3, [r2, #0]
{
    304a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    304c:	b13b      	cbz	r3, 305e <cdc_acm_write_cb+0x1e>
    304e:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    3052:	b123      	cbz	r3, 305e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3054:	480a      	ldr	r0, [pc, #40]	; (3080 <cdc_acm_write_cb+0x40>)
    3056:	f102 0108 	add.w	r1, r2, #8
    305a:	f007 f9a8 	bl	a3ae <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    305e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3062:	689a      	ldr	r2, [r3, #8]
    3064:	691b      	ldr	r3, [r3, #16]
    3066:	429a      	cmp	r2, r3
    3068:	d008      	beq.n	307c <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    306a:	f104 0118 	add.w	r1, r4, #24
    306e:	4804      	ldr	r0, [pc, #16]	; (3080 <cdc_acm_write_cb+0x40>)
}
    3070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3074:	2200      	movs	r2, #0
    3076:	2300      	movs	r3, #0
    3078:	f004 bf96 	b.w	7fa8 <k_work_schedule_for_queue>
}
    307c:	bd10      	pop	{r4, pc}
    307e:	bf00      	nop
    3080:	200003d8 	.word	0x200003d8

00003084 <cdc_acm_init>:
{
    3084:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3086:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    3088:	2300      	movs	r3, #0
    308a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    308e:	4b0c      	ldr	r3, [pc, #48]	; (30c0 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    3090:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    3094:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3096:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    309a:	b969      	cbnz	r1, 30b8 <cdc_acm_init+0x34>
	list->head = node;
    309c:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    30a0:	f104 0008 	add.w	r0, r4, #8
    30a4:	4907      	ldr	r1, [pc, #28]	; (30c4 <cdc_acm_init+0x40>)
    30a6:	f007 f965 	bl	a374 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    30aa:	f104 0018 	add.w	r0, r4, #24
    30ae:	4906      	ldr	r1, [pc, #24]	; (30c8 <cdc_acm_init+0x44>)
    30b0:	f007 f98e 	bl	a3d0 <k_work_init_delayable>
}
    30b4:	2000      	movs	r0, #0
    30b6:	bd10      	pop	{r4, pc}
	parent->next = child;
    30b8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    30ba:	605a      	str	r2, [r3, #4]
}
    30bc:	e7f0      	b.n	30a0 <cdc_acm_init+0x1c>
    30be:	bf00      	nop
    30c0:	200008e4 	.word	0x200008e4
    30c4:	00009719 	.word	0x00009719
    30c8:	00002fe5 	.word	0x00002fe5

000030cc <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    30cc:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    30ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    30d2:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    30d4:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    30d6:	4c0d      	ldr	r4, [pc, #52]	; (310c <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    30d8:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    30da:	f242 00a1 	movw	r0, #8353	; 0x20a1
    30de:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    30e2:	2300      	movs	r3, #0
    30e4:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    30e8:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    30ea:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    30ee:	7900      	ldrb	r0, [r0, #4]
    30f0:	220a      	movs	r2, #10
    30f2:	a901      	add	r1, sp, #4
    30f4:	f006 fab3 	bl	965e <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    30f8:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    30fc:	b923      	cbnz	r3, 3108 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    30fe:	2001      	movs	r0, #1
    3100:	f007 fa89 	bl	a616 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3104:	3c01      	subs	r4, #1
    3106:	d1f7      	bne.n	30f8 <cdc_acm_send_notification.isra.0+0x2c>
}
    3108:	b005      	add	sp, #20
    310a:	bd30      	pop	{r4, r5, pc}
    310c:	000186a1 	.word	0x000186a1

00003110 <cdc_acm_read_cb>:
{
    3110:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3112:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    3114:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    3118:	1e0a      	subs	r2, r1, #0
{
    311a:	4605      	mov	r5, r0
	if (size <= 0) {
    311c:	dd1f      	ble.n	315e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    311e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    3122:	4631      	mov	r1, r6
    3124:	f006 fa18 	bl	9558 <ring_buf_put>
	dev_data->rx_ready = true;
    3128:	2301      	movs	r3, #1
    312a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    312e:	6823      	ldr	r3, [r4, #0]
    3130:	b13b      	cbz	r3, 3142 <cdc_acm_read_cb+0x32>
    3132:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    3136:	b123      	cbz	r3, 3142 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3138:	480e      	ldr	r0, [pc, #56]	; (3174 <cdc_acm_read_cb+0x64>)
    313a:	f104 0108 	add.w	r1, r4, #8
    313e:	f007 f936 	bl	a3ae <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    3142:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    3146:	684b      	ldr	r3, [r1, #4]
    3148:	694a      	ldr	r2, [r1, #20]
    314a:	1a9a      	subs	r2, r3, r2
    314c:	69cb      	ldr	r3, [r1, #28]
    314e:	1a9b      	subs	r3, r3, r2
    3150:	2b3f      	cmp	r3, #63	; 0x3f
    3152:	d804      	bhi.n	315e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    3154:	2301      	movs	r3, #1
    3156:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    315a:	b002      	add	sp, #8
    315c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    315e:	4b06      	ldr	r3, [pc, #24]	; (3178 <cdc_acm_read_cb+0x68>)
    3160:	9300      	str	r3, [sp, #0]
    3162:	9401      	str	r4, [sp, #4]
    3164:	2301      	movs	r3, #1
    3166:	2240      	movs	r2, #64	; 0x40
    3168:	4631      	mov	r1, r6
    316a:	4628      	mov	r0, r5
    316c:	f7ff fda8 	bl	2cc0 <usb_transfer>
    3170:	e7f3      	b.n	315a <cdc_acm_read_cb+0x4a>
    3172:	bf00      	nop
    3174:	200003d8 	.word	0x200003d8
    3178:	00003111 	.word	0x00003111

0000317c <cdc_acm_dev_status_cb>:
{
    317c:	b538      	push	{r3, r4, r5, lr}
    317e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    3180:	4601      	mov	r1, r0
    3182:	481e      	ldr	r0, [pc, #120]	; (31fc <cdc_acm_dev_status_cb+0x80>)
    3184:	f006 fa83 	bl	968e <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3188:	4604      	mov	r4, r0
    318a:	b380      	cbz	r0, 31ee <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    318c:	4602      	mov	r2, r0
	switch (status) {
    318e:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    3190:	f852 39a4 	ldr.w	r3, [r2], #-164
    3194:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    3196:	2905      	cmp	r1, #5
    3198:	d829      	bhi.n	31ee <cdc_acm_dev_status_cb+0x72>
    319a:	e8df f001 	tbb	[pc, r1]
    319e:	2820      	.short	0x2820
    31a0:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    31a4:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    31a8:	b931      	cbnz	r1, 31b8 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    31aa:	6a1b      	ldr	r3, [r3, #32]
    31ac:	7b18      	ldrb	r0, [r3, #12]
    31ae:	f7ff ffaf 	bl	3110 <cdc_acm_read_cb>
			dev_data->configured = true;
    31b2:	2301      	movs	r3, #1
    31b4:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    31b8:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    31bc:	b9bb      	cbnz	r3, 31ee <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    31be:	2301      	movs	r3, #1
    31c0:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    31c4:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    31c8:	b18b      	cbz	r3, 31ee <cdc_acm_dev_status_cb+0x72>
    31ca:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    31ce:	b173      	cbz	r3, 31ee <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    31d0:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    31d4:	480a      	ldr	r0, [pc, #40]	; (3200 <cdc_acm_dev_status_cb+0x84>)
}
    31d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    31da:	f007 b8e8 	b.w	a3ae <k_work_submit_to_queue>
}
    31de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    31e2:	4610      	mov	r0, r2
    31e4:	f7ff be92 	b.w	2f0c <cdc_acm_reset_port>
		dev_data->suspended = true;
    31e8:	2301      	movs	r3, #1
			dev_data->suspended = false;
    31ea:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    31ee:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    31f0:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d0fa      	beq.n	31ee <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    31f8:	2300      	movs	r3, #0
    31fa:	e7f6      	b.n	31ea <cdc_acm_dev_status_cb+0x6e>
    31fc:	200008e4 	.word	0x200008e4
    3200:	200003d8 	.word	0x200003d8

00003204 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    3204:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    3206:	4d09      	ldr	r5, [pc, #36]	; (322c <z_usb_work_q_init+0x28>)
    3208:	4909      	ldr	r1, [pc, #36]	; (3230 <z_usb_work_q_init+0x2c>)
    320a:	2400      	movs	r4, #0
    320c:	9400      	str	r4, [sp, #0]
    320e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3212:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3216:	4628      	mov	r0, r5
    3218:	f004 fe8e 	bl	7f38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    321c:	4905      	ldr	r1, [pc, #20]	; (3234 <z_usb_work_q_init+0x30>)
    321e:	4628      	mov	r0, r5
    3220:	f006 ffd7 	bl	a1d2 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3224:	4620      	mov	r0, r4
    3226:	b003      	add	sp, #12
    3228:	bd30      	pop	{r4, r5, pc}
    322a:	bf00      	nop
    322c:	200003d8 	.word	0x200003d8
    3230:	20001c40 	.word	0x20001c40
    3234:	0000ae92 	.word	0x0000ae92

00003238 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3238:	4801      	ldr	r0, [pc, #4]	; (3240 <nrf_cc3xx_platform_abort_init+0x8>)
    323a:	f005 bc41 	b.w	8ac0 <nrf_cc3xx_platform_set_abort>
    323e:	bf00      	nop
    3240:	0000ab5c 	.word	0x0000ab5c

00003244 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3244:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3246:	4604      	mov	r4, r0
    3248:	b918      	cbnz	r0, 3252 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    324a:	4b0f      	ldr	r3, [pc, #60]	; (3288 <mutex_free_platform+0x44>)
    324c:	480f      	ldr	r0, [pc, #60]	; (328c <mutex_free_platform+0x48>)
    324e:	685b      	ldr	r3, [r3, #4]
    3250:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3252:	6861      	ldr	r1, [r4, #4]
    3254:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3258:	d00f      	beq.n	327a <mutex_free_platform+0x36>
    325a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    325e:	d00c      	beq.n	327a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3260:	4d0b      	ldr	r5, [pc, #44]	; (3290 <mutex_free_platform+0x4c>)
    3262:	42a9      	cmp	r1, r5
    3264:	d009      	beq.n	327a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3266:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    326a:	d007      	beq.n	327c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    326c:	4809      	ldr	r0, [pc, #36]	; (3294 <mutex_free_platform+0x50>)
    326e:	4621      	mov	r1, r4
    3270:	f006 ff80 	bl	a174 <k_mem_slab_free>
        mutex->mutex = NULL;
    3274:	2300      	movs	r3, #0
    3276:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3278:	6065      	str	r5, [r4, #4]
}
    327a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    327c:	6820      	ldr	r0, [r4, #0]
    327e:	2214      	movs	r2, #20
    3280:	f006 fb82 	bl	9988 <memset>
    3284:	e7f8      	b.n	3278 <mutex_free_platform+0x34>
    3286:	bf00      	nop
    3288:	200001e0 	.word	0x200001e0
    328c:	0000ae9b 	.word	0x0000ae9b
    3290:	a95c5f2c 	.word	0xa95c5f2c
    3294:	20000dec 	.word	0x20000dec

00003298 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3298:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    329a:	b320      	cbz	r0, 32e6 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    329c:	6843      	ldr	r3, [r0, #4]
    329e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    32a2:	d110      	bne.n	32c6 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    32a4:	2201      	movs	r2, #1
    32a6:	6803      	ldr	r3, [r0, #0]
    32a8:	f3bf 8f5b 	dmb	ish
    32ac:	e853 1f00 	ldrex	r1, [r3]
    32b0:	2900      	cmp	r1, #0
    32b2:	d103      	bne.n	32bc <mutex_lock_platform+0x24>
    32b4:	e843 2000 	strex	r0, r2, [r3]
    32b8:	2800      	cmp	r0, #0
    32ba:	d1f7      	bne.n	32ac <mutex_lock_platform+0x14>
    32bc:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    32c0:	d10d      	bne.n	32de <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    32c2:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    32c4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    32c6:	4a09      	ldr	r2, [pc, #36]	; (32ec <mutex_lock_platform+0x54>)
    32c8:	4293      	cmp	r3, r2
    32ca:	d00a      	beq.n	32e2 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    32cc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    32ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32d6:	f004 fc07 	bl	7ae8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    32da:	2800      	cmp	r0, #0
    32dc:	d0f1      	beq.n	32c2 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    32de:	4804      	ldr	r0, [pc, #16]	; (32f0 <mutex_lock_platform+0x58>)
    32e0:	e7f0      	b.n	32c4 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    32e2:	4804      	ldr	r0, [pc, #16]	; (32f4 <mutex_lock_platform+0x5c>)
    32e4:	e7ee      	b.n	32c4 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    32e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    32ea:	e7eb      	b.n	32c4 <mutex_lock_platform+0x2c>
    32ec:	a95c5f2c 	.word	0xa95c5f2c
    32f0:	ffff8fe9 	.word	0xffff8fe9
    32f4:	ffff8fea 	.word	0xffff8fea

000032f8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    32f8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    32fa:	b1d8      	cbz	r0, 3334 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    32fc:	6843      	ldr	r3, [r0, #4]
    32fe:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3302:	d110      	bne.n	3326 <mutex_unlock_platform+0x2e>
    3304:	2200      	movs	r2, #0
    3306:	6803      	ldr	r3, [r0, #0]
    3308:	f3bf 8f5b 	dmb	ish
    330c:	e853 1f00 	ldrex	r1, [r3]
    3310:	2901      	cmp	r1, #1
    3312:	d103      	bne.n	331c <mutex_unlock_platform+0x24>
    3314:	e843 2000 	strex	r0, r2, [r3]
    3318:	2800      	cmp	r0, #0
    331a:	d1f7      	bne.n	330c <mutex_unlock_platform+0x14>
    331c:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3320:	d10b      	bne.n	333a <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3322:	2000      	movs	r0, #0
    }
}
    3324:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3326:	4a07      	ldr	r2, [pc, #28]	; (3344 <mutex_unlock_platform+0x4c>)
    3328:	4293      	cmp	r3, r2
    332a:	d008      	beq.n	333e <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    332c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    332e:	f004 fc55 	bl	7bdc <z_impl_k_mutex_unlock>
    3332:	e7f6      	b.n	3322 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3334:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3338:	e7f4      	b.n	3324 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    333a:	4803      	ldr	r0, [pc, #12]	; (3348 <mutex_unlock_platform+0x50>)
    333c:	e7f2      	b.n	3324 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    333e:	4803      	ldr	r0, [pc, #12]	; (334c <mutex_unlock_platform+0x54>)
    3340:	e7f0      	b.n	3324 <mutex_unlock_platform+0x2c>
    3342:	bf00      	nop
    3344:	a95c5f2c 	.word	0xa95c5f2c
    3348:	ffff8fe9 	.word	0xffff8fe9
    334c:	ffff8fea 	.word	0xffff8fea

00003350 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3350:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3352:	4604      	mov	r4, r0
    3354:	b918      	cbnz	r0, 335e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3356:	4b1d      	ldr	r3, [pc, #116]	; (33cc <mutex_init_platform+0x7c>)
    3358:	481d      	ldr	r0, [pc, #116]	; (33d0 <mutex_init_platform+0x80>)
    335a:	685b      	ldr	r3, [r3, #4]
    335c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    335e:	6863      	ldr	r3, [r4, #4]
    3360:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3364:	d02f      	beq.n	33c6 <mutex_init_platform+0x76>
    3366:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    336a:	d02c      	beq.n	33c6 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    336c:	4a19      	ldr	r2, [pc, #100]	; (33d4 <mutex_init_platform+0x84>)
    336e:	4293      	cmp	r3, r2
    3370:	d119      	bne.n	33a6 <mutex_init_platform+0x56>
    3372:	6823      	ldr	r3, [r4, #0]
    3374:	bb03      	cbnz	r3, 33b8 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3376:	4818      	ldr	r0, [pc, #96]	; (33d8 <mutex_init_platform+0x88>)
    3378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    337c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3380:	4621      	mov	r1, r4
    3382:	f004 faad 	bl	78e0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3386:	b908      	cbnz	r0, 338c <mutex_init_platform+0x3c>
    3388:	6823      	ldr	r3, [r4, #0]
    338a:	b91b      	cbnz	r3, 3394 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    338c:	4b0f      	ldr	r3, [pc, #60]	; (33cc <mutex_init_platform+0x7c>)
    338e:	4813      	ldr	r0, [pc, #76]	; (33dc <mutex_init_platform+0x8c>)
    3390:	685b      	ldr	r3, [r3, #4]
    3392:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3394:	6820      	ldr	r0, [r4, #0]
    3396:	2214      	movs	r2, #20
    3398:	2100      	movs	r1, #0
    339a:	f006 faf5 	bl	9988 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    339e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    33a2:	6063      	str	r3, [r4, #4]
    33a4:	e008      	b.n	33b8 <mutex_init_platform+0x68>
    switch(flags){
    33a6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    33aa:	d80d      	bhi.n	33c8 <mutex_init_platform+0x78>
    33ac:	2b3a      	cmp	r3, #58	; 0x3a
    33ae:	d003      	beq.n	33b8 <mutex_init_platform+0x68>
    33b0:	f640 62ba 	movw	r2, #3770	; 0xeba
    33b4:	4293      	cmp	r3, r2
    33b6:	d1de      	bne.n	3376 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    33b8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    33ba:	f006 ff1e 	bl	a1fa <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    33be:	6863      	ldr	r3, [r4, #4]
    33c0:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    33c4:	6063      	str	r3, [r4, #4]
}
    33c6:	bd10      	pop	{r4, pc}
    switch(flags){
    33c8:	4a05      	ldr	r2, [pc, #20]	; (33e0 <mutex_init_platform+0x90>)
    33ca:	e7f3      	b.n	33b4 <mutex_init_platform+0x64>
    33cc:	200001e0 	.word	0x200001e0
    33d0:	0000ae9b 	.word	0x0000ae9b
    33d4:	a95c5f2c 	.word	0xa95c5f2c
    33d8:	20000dec 	.word	0x20000dec
    33dc:	0000aec1 	.word	0x0000aec1
    33e0:	3a00003a 	.word	0x3a00003a

000033e4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    33e4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    33e6:	4906      	ldr	r1, [pc, #24]	; (3400 <nrf_cc3xx_platform_mutex_init+0x1c>)
    33e8:	4806      	ldr	r0, [pc, #24]	; (3404 <nrf_cc3xx_platform_mutex_init+0x20>)
    33ea:	2340      	movs	r3, #64	; 0x40
    33ec:	2214      	movs	r2, #20
    33ee:	f006 feb3 	bl	a158 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    33f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    33f6:	4904      	ldr	r1, [pc, #16]	; (3408 <nrf_cc3xx_platform_mutex_init+0x24>)
    33f8:	4804      	ldr	r0, [pc, #16]	; (340c <nrf_cc3xx_platform_mutex_init+0x28>)
    33fa:	f005 bbd3 	b.w	8ba4 <nrf_cc3xx_platform_set_mutexes>
    33fe:	bf00      	nop
    3400:	200008ec 	.word	0x200008ec
    3404:	20000dec 	.word	0x20000dec
    3408:	0000ab64 	.word	0x0000ab64
    340c:	0000ab78 	.word	0x0000ab78

00003410 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3410:	4901      	ldr	r1, [pc, #4]	; (3418 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3412:	2210      	movs	r2, #16
	str	r2, [r1]
    3414:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3416:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3418:	e000ed10 	.word	0xe000ed10

0000341c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    341c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    341e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3420:	f380 8811 	msr	BASEPRI, r0
	isb
    3424:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3428:	f3bf 8f4f 	dsb	sy
    342c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    342e:	b662      	cpsie	i
	isb
    3430:	f3bf 8f6f 	isb	sy

	bx	lr
    3434:	4770      	bx	lr
    3436:	bf00      	nop

00003438 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3438:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    343a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    343c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3440:	f3bf 8f4f 	dsb	sy
    3444:	bf20      	wfe

	msr	BASEPRI, r0
    3446:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    344a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    344c:	4770      	bx	lr
    344e:	bf00      	nop

00003450 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3450:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3452:	2800      	cmp	r0, #0
    3454:	db07      	blt.n	3466 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3456:	4a04      	ldr	r2, [pc, #16]	; (3468 <arch_irq_enable+0x18>)
    3458:	0941      	lsrs	r1, r0, #5
    345a:	2301      	movs	r3, #1
    345c:	f000 001f 	and.w	r0, r0, #31
    3460:	4083      	lsls	r3, r0
    3462:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3466:	4770      	bx	lr
    3468:	e000e100 	.word	0xe000e100

0000346c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    346c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    346e:	2800      	cmp	r0, #0
    3470:	db0c      	blt.n	348c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3472:	0943      	lsrs	r3, r0, #5
    3474:	4906      	ldr	r1, [pc, #24]	; (3490 <arch_irq_disable+0x24>)
    3476:	f000 001f 	and.w	r0, r0, #31
    347a:	3320      	adds	r3, #32
    347c:	2201      	movs	r2, #1
    347e:	4082      	lsls	r2, r0
    3480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3488:	f3bf 8f6f 	isb	sy
}
    348c:	4770      	bx	lr
    348e:	bf00      	nop
    3490:	e000e100 	.word	0xe000e100

00003494 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3494:	4b05      	ldr	r3, [pc, #20]	; (34ac <arch_irq_is_enabled+0x18>)
    3496:	0942      	lsrs	r2, r0, #5
    3498:	f000 001f 	and.w	r0, r0, #31
    349c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    34a0:	2301      	movs	r3, #1
    34a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    34a6:	4010      	ands	r0, r2
    34a8:	4770      	bx	lr
    34aa:	bf00      	nop
    34ac:	e000e100 	.word	0xe000e100

000034b0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    34b0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    34b2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34b4:	bfa8      	it	ge
    34b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    34ba:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34be:	bfb8      	it	lt
    34c0:	4b06      	ldrlt	r3, [pc, #24]	; (34dc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34c2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    34c6:	bfac      	ite	ge
    34c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34cc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34d0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34d2:	bfb4      	ite	lt
    34d4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34d6:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    34da:	4770      	bx	lr
    34dc:	e000ed14 	.word	0xe000ed14

000034e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    34e0:	bf30      	wfi
    b z_SysNmiOnReset
    34e2:	f7ff bffd 	b.w	34e0 <z_SysNmiOnReset>
    34e6:	bf00      	nop

000034e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    34e8:	4a0b      	ldr	r2, [pc, #44]	; (3518 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    34ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    34ec:	4b0b      	ldr	r3, [pc, #44]	; (351c <z_arm_prep_c+0x34>)
    34ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    34f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    34f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    34fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3500:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3508:	f004 f926 	bl	7758 <z_bss_zero>
	z_data_copy();
    350c:	f005 f8e4 	bl	86d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3510:	f000 fa20 	bl	3954 <z_arm_interrupt_init>
	z_cstart();
    3514:	f004 f964 	bl	77e0 <z_cstart>
    3518:	00001000 	.word	0x00001000
    351c:	e000ed00 	.word	0xe000ed00

00003520 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3520:	4a09      	ldr	r2, [pc, #36]	; (3548 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3522:	490a      	ldr	r1, [pc, #40]	; (354c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3524:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3526:	6809      	ldr	r1, [r1, #0]
    3528:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    352a:	4909      	ldr	r1, [pc, #36]	; (3550 <arch_swap+0x30>)
	_current->arch.basepri = key;
    352c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    352e:	684b      	ldr	r3, [r1, #4]
    3530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3534:	604b      	str	r3, [r1, #4]
    3536:	2300      	movs	r3, #0
    3538:	f383 8811 	msr	BASEPRI, r3
    353c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3540:	6893      	ldr	r3, [r2, #8]
}
    3542:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	200019e8 	.word	0x200019e8
    354c:	0000ad20 	.word	0x0000ad20
    3550:	e000ed00 	.word	0xe000ed00

00003554 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3554:	4912      	ldr	r1, [pc, #72]	; (35a0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3556:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3558:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    355c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    355e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3562:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3566:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3568:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    356c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3570:	4f0c      	ldr	r7, [pc, #48]	; (35a4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3572:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3576:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3578:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    357a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    357c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    357e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3580:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3582:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3586:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3588:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    358a:	f000 fa7f 	bl	3a8c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    358e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3592:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3596:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    359a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    359e:	4770      	bx	lr
    ldr r1, =_kernel
    35a0:	200019e8 	.word	0x200019e8
    ldr v4, =_SCS_ICSR
    35a4:	e000ed04 	.word	0xe000ed04

000035a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    35a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    35ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    35ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    35b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    35b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    35b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    35bc:	2902      	cmp	r1, #2
    beq _oops
    35be:	d0ff      	beq.n	35c0 <_oops>

000035c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    35c0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    35c2:	f006 f9b7 	bl	9934 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    35c6:	bd01      	pop	{r0, pc}

000035c8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    35c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    35cc:	9b00      	ldr	r3, [sp, #0]
    35ce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    35d2:	490a      	ldr	r1, [pc, #40]	; (35fc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    35d4:	9b01      	ldr	r3, [sp, #4]
    35d6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    35da:	9b02      	ldr	r3, [sp, #8]
    35dc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    35e0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    35e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    35e8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    35ec:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    35f0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    35f2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    35f4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    35f6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop
    35fc:	00008e2f 	.word	0x00008e2f

00003600 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3600:	4a09      	ldr	r2, [pc, #36]	; (3628 <z_check_thread_stack_fail+0x28>)
{
    3602:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3604:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3606:	b170      	cbz	r0, 3626 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3608:	f113 0f16 	cmn.w	r3, #22
    360c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    360e:	d005      	beq.n	361c <z_check_thread_stack_fail+0x1c>
    3610:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3614:	429a      	cmp	r2, r3
    3616:	d805      	bhi.n	3624 <z_check_thread_stack_fail+0x24>
    3618:	4283      	cmp	r3, r0
    361a:	d203      	bcs.n	3624 <z_check_thread_stack_fail+0x24>
		return 0;
    361c:	4281      	cmp	r1, r0
    361e:	bf28      	it	cs
    3620:	2000      	movcs	r0, #0
    3622:	4770      	bx	lr
    3624:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3626:	4770      	bx	lr
    3628:	200019e8 	.word	0x200019e8

0000362c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    362c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    362e:	4b09      	ldr	r3, [pc, #36]	; (3654 <arch_switch_to_main_thread+0x28>)
{
    3630:	460d      	mov	r5, r1
    3632:	4614      	mov	r4, r2
	_current = main_thread;
    3634:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3636:	f000 fa29 	bl	3a8c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    363a:	4620      	mov	r0, r4
    363c:	f385 8809 	msr	PSP, r5
    3640:	2100      	movs	r1, #0
    3642:	b663      	cpsie	if
    3644:	f381 8811 	msr	BASEPRI, r1
    3648:	f3bf 8f6f 	isb	sy
    364c:	2200      	movs	r2, #0
    364e:	2300      	movs	r3, #0
    3650:	f005 fbed 	bl	8e2e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3654:	200019e8 	.word	0x200019e8

00003658 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3658:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    365a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    365c:	4a0b      	ldr	r2, [pc, #44]	; (368c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    365e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3660:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3662:	bf1e      	ittt	ne
	movne	r1, #0
    3664:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3666:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3668:	f006 fdb8 	blne	a1dc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    366c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    366e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3672:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3676:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    367a:	4905      	ldr	r1, [pc, #20]	; (3690 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    367c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    367e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3680:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3682:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3686:	4903      	ldr	r1, [pc, #12]	; (3694 <_isr_wrapper+0x3c>)
	bx r1
    3688:	4708      	bx	r1
    368a:	0000      	.short	0x0000
	ldr r2, =_kernel
    368c:	200019e8 	.word	0x200019e8
	ldr r1, =_sw_isr_table
    3690:	0000a898 	.word	0x0000a898
	ldr r1, =z_arm_int_exit
    3694:	00003699 	.word	0x00003699

00003698 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3698:	4b04      	ldr	r3, [pc, #16]	; (36ac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    369a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    369c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    369e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    36a0:	d003      	beq.n	36aa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    36a2:	4903      	ldr	r1, [pc, #12]	; (36b0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    36a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    36a8:	600a      	str	r2, [r1, #0]

000036aa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    36aa:	4770      	bx	lr
	ldr r3, =_kernel
    36ac:	200019e8 	.word	0x200019e8
	ldr r1, =_SCS_ICSR
    36b0:	e000ed04 	.word	0xe000ed04

000036b4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    36b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    36b6:	4b26      	ldr	r3, [pc, #152]	; (3750 <mem_manage_fault+0x9c>)
{
    36b8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    36ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    36bc:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    36c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    36c2:	bf14      	ite	ne
    36c4:	2411      	movne	r4, #17
    36c6:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    36c8:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    36cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    36ce:	bf18      	it	ne
    36d0:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    36d2:	0792      	lsls	r2, r2, #30
{
    36d4:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    36d6:	d50a      	bpl.n	36ee <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    36d8:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    36da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36dc:	0614      	lsls	r4, r2, #24
    36de:	d534      	bpl.n	374a <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    36e0:	b119      	cbz	r1, 36ea <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    36e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    36e8:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    36ea:	2413      	movs	r4, #19
    36ec:	e001      	b.n	36f2 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    36ee:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    36f2:	4b17      	ldr	r3, [pc, #92]	; (3750 <mem_manage_fault+0x9c>)
    36f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    36f6:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    36fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    36fc:	bf18      	it	ne
    36fe:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3700:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3706:	bf18      	it	ne
    3708:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    370a:	06d2      	lsls	r2, r2, #27
    370c:	d402      	bmi.n	3714 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3710:	079b      	lsls	r3, r3, #30
    3712:	d50a      	bpl.n	372a <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3714:	4b0e      	ldr	r3, [pc, #56]	; (3750 <mem_manage_fault+0x9c>)
    3716:	685b      	ldr	r3, [r3, #4]
    3718:	0519      	lsls	r1, r3, #20
    371a:	d506      	bpl.n	372a <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    371c:	4631      	mov	r1, r6
    371e:	f7ff ff6f 	bl	3600 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    3722:	b110      	cbz	r0, 372a <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3724:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    3728:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    372a:	4b09      	ldr	r3, [pc, #36]	; (3750 <mem_manage_fault+0x9c>)
    372c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    372e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3730:	bf42      	ittt	mi
    3732:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3734:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3738:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    373a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    373c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3740:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3742:	2300      	movs	r3, #0
    3744:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3746:	4620      	mov	r0, r4
    3748:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    374a:	f06f 0015 	mvn.w	r0, #21
    374e:	e7cc      	b.n	36ea <mem_manage_fault+0x36>
    3750:	e000ed00 	.word	0xe000ed00

00003754 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3754:	4b13      	ldr	r3, [pc, #76]	; (37a4 <usage_fault.constprop.0+0x50>)
    3756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3758:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    375e:	bf14      	ite	ne
    3760:	201e      	movne	r0, #30
    3762:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3764:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    376a:	bf18      	it	ne
    376c:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    376e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3774:	bf18      	it	ne
    3776:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3778:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    377c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    377e:	bf18      	it	ne
    3780:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3782:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3788:	bf18      	it	ne
    378a:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    378c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3792:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3796:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    379a:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    379c:	bf18      	it	ne
    379e:	2024      	movne	r0, #36	; 0x24
    37a0:	4770      	bx	lr
    37a2:	bf00      	nop
    37a4:	e000ed00 	.word	0xe000ed00

000037a8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37a8:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37aa:	4b19      	ldr	r3, [pc, #100]	; (3810 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37ac:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    37b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    37b2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    37b6:	bf14      	ite	ne
    37b8:	2017      	movne	r0, #23
    37ba:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    37bc:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    37c2:	bf18      	it	ne
    37c4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37c6:	05a4      	lsls	r4, r4, #22
    37c8:	d509      	bpl.n	37de <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    37ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    37cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    37ce:	0400      	lsls	r0, r0, #16
    37d0:	d504      	bpl.n	37dc <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    37d2:	b11a      	cbz	r2, 37dc <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    37d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    37da:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    37dc:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    37de:	4b0c      	ldr	r3, [pc, #48]	; (3810 <bus_fault.constprop.0+0x68>)
    37e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    37e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    37e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    37e8:	bf18      	it	ne
    37ea:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    37ec:	05d2      	lsls	r2, r2, #23
    37ee:	d40c      	bmi.n	380a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    37f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    37f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    37f6:	bf18      	it	ne
    37f8:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    37fa:	4a05      	ldr	r2, [pc, #20]	; (3810 <bus_fault.constprop.0+0x68>)
    37fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    37fe:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3802:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3804:	2300      	movs	r3, #0
    3806:	700b      	strb	r3, [r1, #0]
}
    3808:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    380a:	201b      	movs	r0, #27
    380c:	e7f5      	b.n	37fa <bus_fault.constprop.0+0x52>
    380e:	bf00      	nop
    3810:	e000ed00 	.word	0xe000ed00

00003814 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3814:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3816:	4b45      	ldr	r3, [pc, #276]	; (392c <z_arm_fault+0x118>)
    3818:	685b      	ldr	r3, [r3, #4]
{
    381a:	b08a      	sub	sp, #40	; 0x28
    381c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    381e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3822:	2600      	movs	r6, #0
    3824:	f386 8811 	msr	BASEPRI, r6
    3828:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    382c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3830:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3834:	d111      	bne.n	385a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3836:	f002 000c 	and.w	r0, r2, #12
    383a:	2808      	cmp	r0, #8
    383c:	d00d      	beq.n	385a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    383e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3840:	bf4c      	ite	mi
    3842:	460d      	movmi	r5, r1
			*nested_exc = true;
    3844:	2601      	movpl	r6, #1
	*recoverable = false;
    3846:	2200      	movs	r2, #0
	switch (fault) {
    3848:	3b03      	subs	r3, #3
	*recoverable = false;
    384a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    384e:	2b03      	cmp	r3, #3
    3850:	d805      	bhi.n	385e <z_arm_fault+0x4a>
    3852:	e8df f003 	tbb	[pc, r3]
    3856:	5d1e      	.short	0x5d1e
    3858:	5a61      	.short	0x5a61
		return NULL;
    385a:	4635      	mov	r5, r6
    385c:	e7f3      	b.n	3846 <z_arm_fault+0x32>
    385e:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3864:	b99b      	cbnz	r3, 388e <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3866:	2220      	movs	r2, #32
    3868:	4629      	mov	r1, r5
    386a:	a802      	add	r0, sp, #8
    386c:	f006 f881 	bl	9972 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3870:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3872:	2e00      	cmp	r6, #0
    3874:	d054      	beq.n	3920 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3876:	f3c3 0208 	ubfx	r2, r3, #0, #9
    387a:	b922      	cbnz	r2, 3886 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    387c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3880:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3884:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3886:	a902      	add	r1, sp, #8
    3888:	4620      	mov	r0, r4
    388a:	f006 f851 	bl	9930 <z_arm_fatal_error>
}
    388e:	b00a      	add	sp, #40	; 0x28
    3890:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3892:	4b26      	ldr	r3, [pc, #152]	; (392c <z_arm_fault+0x118>)
    3894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3896:	0791      	lsls	r1, r2, #30
    3898:	d4e1      	bmi.n	385e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    389c:	2a00      	cmp	r2, #0
    389e:	dbde      	blt.n	385e <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    38a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38a2:	0052      	lsls	r2, r2, #1
    38a4:	d5db      	bpl.n	385e <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    38a6:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    38a8:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    38aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    38ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38b4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    38b8:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    38ba:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    38be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    38c2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38c8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    38cc:	f64d 7202 	movw	r2, #57090	; 0xdf02
    38d0:	4291      	cmp	r1, r2
    38d2:	d00a      	beq.n	38ea <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    38d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38d6:	b2d2      	uxtb	r2, r2
    38d8:	b14a      	cbz	r2, 38ee <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    38da:	f10d 0207 	add.w	r2, sp, #7
    38de:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    38e0:	4628      	mov	r0, r5
    38e2:	f7ff fee7 	bl	36b4 <mem_manage_fault>
		reason = usage_fault(esf);
    38e6:	4604      	mov	r4, r0
		break;
    38e8:	e7ba      	b.n	3860 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    38ea:	682c      	ldr	r4, [r5, #0]
    38ec:	e7b8      	b.n	3860 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    38ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38f0:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    38f4:	d005      	beq.n	3902 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    38f6:	f10d 0107 	add.w	r1, sp, #7
    38fa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    38fc:	f7ff ff54 	bl	37a8 <bus_fault.constprop.0>
    3900:	e7f1      	b.n	38e6 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3908:	d3a9      	bcc.n	385e <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    390a:	f7ff ff23 	bl	3754 <usage_fault.constprop.0>
    390e:	e7ea      	b.n	38e6 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3910:	f10d 0207 	add.w	r2, sp, #7
    3914:	2100      	movs	r1, #0
    3916:	e7e3      	b.n	38e0 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    3918:	f10d 0107 	add.w	r1, sp, #7
    391c:	2000      	movs	r0, #0
    391e:	e7ed      	b.n	38fc <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3920:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3924:	f023 0301 	bic.w	r3, r3, #1
    3928:	e7ac      	b.n	3884 <z_arm_fault+0x70>
    392a:	bf00      	nop
    392c:	e000ed00 	.word	0xe000ed00

00003930 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3930:	4a02      	ldr	r2, [pc, #8]	; (393c <z_arm_fault_init+0xc>)
    3932:	6953      	ldr	r3, [r2, #20]
    3934:	f043 0310 	orr.w	r3, r3, #16
    3938:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    393a:	4770      	bx	lr
    393c:	e000ed00 	.word	0xe000ed00

00003940 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3940:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3944:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3948:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    394a:	4672      	mov	r2, lr
	bl z_arm_fault
    394c:	f7ff ff62 	bl	3814 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3950:	bd01      	pop	{r0, pc}
    3952:	bf00      	nop

00003954 <z_arm_interrupt_init>:
    3954:	4804      	ldr	r0, [pc, #16]	; (3968 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3956:	2300      	movs	r3, #0
    3958:	2120      	movs	r1, #32
    395a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    395c:	3301      	adds	r3, #1
    395e:	2b30      	cmp	r3, #48	; 0x30
    3960:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3964:	d1f9      	bne.n	395a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3966:	4770      	bx	lr
    3968:	e000e100 	.word	0xe000e100

0000396c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    396c:	2000      	movs	r0, #0
    msr CONTROL, r0
    396e:	f380 8814 	msr	CONTROL, r0
    isb
    3972:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3976:	f7fe fa4b 	bl	1e10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    397a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    397c:	490d      	ldr	r1, [pc, #52]	; (39b4 <__start+0x48>)
    str r0, [r1]
    397e:	6008      	str	r0, [r1, #0]
    dsb
    3980:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3984:	480c      	ldr	r0, [pc, #48]	; (39b8 <__start+0x4c>)
    msr msp, r0
    3986:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    398a:	f000 f82b 	bl	39e4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    398e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3990:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3994:	4809      	ldr	r0, [pc, #36]	; (39bc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3996:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    399a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    399c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    39a0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    39a4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    39a6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    39a8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    39ac:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    39b0:	f7ff fd9a 	bl	34e8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    39b4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39b8:	20003280 	.word	0x20003280
    ldr r0, =z_interrupt_stacks
    39bc:	200024c0 	.word	0x200024c0

000039c0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    39c0:	4907      	ldr	r1, [pc, #28]	; (39e0 <z_arm_clear_arm_mpu_config+0x20>)
    39c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    39c6:	2300      	movs	r3, #0
	int num_regions =
    39c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    39cc:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    39ce:	4293      	cmp	r3, r2
    39d0:	db00      	blt.n	39d4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    39d2:	4770      	bx	lr
  MPU->RNR = rnr;
    39d4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    39d8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    39dc:	3301      	adds	r3, #1
    39de:	e7f6      	b.n	39ce <z_arm_clear_arm_mpu_config+0xe>
    39e0:	e000ed00 	.word	0xe000ed00

000039e4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    39e4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    39e6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    39e8:	2300      	movs	r3, #0
    39ea:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    39ee:	f7ff ffe7 	bl	39c0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    39f2:	4b14      	ldr	r3, [pc, #80]	; (3a44 <z_arm_init_arch_hw_at_boot+0x60>)
    39f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    39f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    39fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3a0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3a10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3a14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3a18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3a1c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3a20:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3a24:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3a28:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3a2c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3a30:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3a34:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3a38:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a3e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3a42:	bd08      	pop	{r3, pc}
    3a44:	e000e100 	.word	0xe000e100

00003a48 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3a48:	4b08      	ldr	r3, [pc, #32]	; (3a6c <z_impl_k_thread_abort+0x24>)
    3a4a:	689b      	ldr	r3, [r3, #8]
    3a4c:	4283      	cmp	r3, r0
    3a4e:	d10b      	bne.n	3a68 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3a50:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3a54:	b143      	cbz	r3, 3a68 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3a56:	4b06      	ldr	r3, [pc, #24]	; (3a70 <z_impl_k_thread_abort+0x28>)
    3a58:	685a      	ldr	r2, [r3, #4]
    3a5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3a5e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3a66:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3a68:	f004 bdc4 	b.w	85f4 <z_thread_abort>
    3a6c:	200019e8 	.word	0x200019e8
    3a70:	e000ed00 	.word	0xe000ed00

00003a74 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3a74:	4b02      	ldr	r3, [pc, #8]	; (3a80 <z_arm_configure_static_mpu_regions+0xc>)
    3a76:	4a03      	ldr	r2, [pc, #12]	; (3a84 <z_arm_configure_static_mpu_regions+0x10>)
    3a78:	4803      	ldr	r0, [pc, #12]	; (3a88 <z_arm_configure_static_mpu_regions+0x14>)
    3a7a:	2101      	movs	r1, #1
    3a7c:	f000 b870 	b.w	3b60 <arm_core_mpu_configure_static_mpu_regions>
    3a80:	20040000 	.word	0x20040000
    3a84:	20000000 	.word	0x20000000
    3a88:	0000ab88 	.word	0x0000ab88

00003a8c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3a8c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3a8e:	4b05      	ldr	r3, [pc, #20]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
		guard_start = thread->stack_info.start - guard_size;
    3a90:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    3a92:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3a94:	4a04      	ldr	r2, [pc, #16]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a96:	2140      	movs	r1, #64	; 0x40
    3a98:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3a9c:	4618      	mov	r0, r3
    3a9e:	2101      	movs	r1, #1
    3aa0:	f000 b868 	b.w	3b74 <arm_core_mpu_configure_dynamic_mpu_regions>
    3aa4:	20000e08 	.word	0x20000e08
    3aa8:	150b0000 	.word	0x150b0000

00003aac <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3aac:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3aae:	4e20      	ldr	r6, [pc, #128]	; (3b30 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3ab0:	2500      	movs	r5, #0
    3ab2:	428d      	cmp	r5, r1
    3ab4:	da39      	bge.n	3b2a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    3ab6:	6844      	ldr	r4, [r0, #4]
    3ab8:	b374      	cbz	r4, 3b18 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3aba:	b153      	cbz	r3, 3ad2 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3abc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3ac0:	ea14 0f0c 	tst.w	r4, ip
    3ac4:	d12f      	bne.n	3b26 <mpu_configure_regions+0x7a>
		&&
    3ac6:	2c1f      	cmp	r4, #31
    3ac8:	d92d      	bls.n	3b26 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    3aca:	6807      	ldr	r7, [r0, #0]
		&&
    3acc:	ea1c 0f07 	tst.w	ip, r7
    3ad0:	d129      	bne.n	3b26 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3ad2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3ad4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3ad6:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3ada:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3ade:	d91e      	bls.n	3b1e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    3ae0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3ae4:	d81d      	bhi.n	3b22 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3ae6:	3c01      	subs	r4, #1
    3ae8:	fab4 f484 	clz	r4, r4
    3aec:	f1c4 041f 	rsb	r4, r4, #31
    3af0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3af2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3af6:	ea4c 0c04 	orr.w	ip, ip, r4
    3afa:	d814      	bhi.n	3b26 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3afc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3b00:	4314      	orrs	r4, r2
    3b02:	f044 0410 	orr.w	r4, r4, #16
    3b06:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b0a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3b0e:	f04c 0401 	orr.w	r4, ip, #1
    3b12:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3b16:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3b18:	3501      	adds	r5, #1
    3b1a:	300c      	adds	r0, #12
    3b1c:	e7c9      	b.n	3ab2 <mpu_configure_regions+0x6>
		return REGION_32B;
    3b1e:	2408      	movs	r4, #8
    3b20:	e7e7      	b.n	3af2 <mpu_configure_regions+0x46>
		return REGION_4G;
    3b22:	243e      	movs	r4, #62	; 0x3e
    3b24:	e7e5      	b.n	3af2 <mpu_configure_regions+0x46>
			return -EINVAL;
    3b26:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    3b2a:	4610      	mov	r0, r2
    3b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b2e:	bf00      	nop
    3b30:	e000ed00 	.word	0xe000ed00

00003b34 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3b34:	4b04      	ldr	r3, [pc, #16]	; (3b48 <arm_core_mpu_enable+0x14>)
    3b36:	2205      	movs	r2, #5
    3b38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b40:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3b44:	4770      	bx	lr
    3b46:	bf00      	nop
    3b48:	e000ed00 	.word	0xe000ed00

00003b4c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3b4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3b50:	4b02      	ldr	r3, [pc, #8]	; (3b5c <arm_core_mpu_disable+0x10>)
    3b52:	2200      	movs	r2, #0
    3b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3b58:	4770      	bx	lr
    3b5a:	bf00      	nop
    3b5c:	e000ed00 	.word	0xe000ed00

00003b60 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3b60:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3b62:	4c03      	ldr	r4, [pc, #12]	; (3b70 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3b64:	2301      	movs	r3, #1
    3b66:	7822      	ldrb	r2, [r4, #0]
    3b68:	f7ff ffa0 	bl	3aac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3b6c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	20001c10 	.word	0x20001c10

00003b74 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3b74:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3b76:	4a09      	ldr	r2, [pc, #36]	; (3b9c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3b78:	2300      	movs	r3, #0
    3b7a:	7812      	ldrb	r2, [r2, #0]
    3b7c:	f7ff ff96 	bl	3aac <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3b80:	f110 0f16 	cmn.w	r0, #22
    3b84:	d002      	beq.n	3b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    3b86:	4a06      	ldr	r2, [pc, #24]	; (3ba0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3b88:	2807      	cmp	r0, #7
    3b8a:	dd00      	ble.n	3b8e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3b8c:	bd08      	pop	{r3, pc}
    3b8e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3b92:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3b96:	3001      	adds	r0, #1
    3b98:	e7f6      	b.n	3b88 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3b9a:	bf00      	nop
    3b9c:	20001c10 	.word	0x20001c10
    3ba0:	e000ed00 	.word	0xe000ed00

00003ba4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3ba4:	4914      	ldr	r1, [pc, #80]	; (3bf8 <z_arm_mpu_init+0x54>)
    3ba6:	6808      	ldr	r0, [r1, #0]
    3ba8:	2808      	cmp	r0, #8
{
    3baa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3bac:	d821      	bhi.n	3bf2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3bae:	f7ff ffcd 	bl	3b4c <arm_core_mpu_disable>
    3bb2:	4c12      	ldr	r4, [pc, #72]	; (3bfc <z_arm_mpu_init+0x58>)
    3bb4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3bb6:	2200      	movs	r2, #0
    3bb8:	4290      	cmp	r0, r2
    3bba:	f101 010c 	add.w	r1, r1, #12
    3bbe:	d105      	bne.n	3bcc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3bc0:	4b0f      	ldr	r3, [pc, #60]	; (3c00 <z_arm_mpu_init+0x5c>)
    3bc2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3bc4:	f7ff ffb6 	bl	3b34 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3bc8:	2000      	movs	r0, #0
}
    3bca:	bd10      	pop	{r4, pc}
    3bcc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bd0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3bd4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3bd8:	4313      	orrs	r3, r2
    3bda:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3bde:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3be6:	f043 0301 	orr.w	r3, r3, #1
    3bea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3bee:	3201      	adds	r2, #1
    3bf0:	e7e2      	b.n	3bb8 <z_arm_mpu_init+0x14>
		return -1;
    3bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3bf6:	e7e8      	b.n	3bca <z_arm_mpu_init+0x26>
    3bf8:	0000ab94 	.word	0x0000ab94
    3bfc:	e000ed00 	.word	0xe000ed00
    3c00:	20001c10 	.word	0x20001c10

00003c04 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3c04:	4b01      	ldr	r3, [pc, #4]	; (3c0c <__stdout_hook_install+0x8>)
    3c06:	6018      	str	r0, [r3, #0]
}
    3c08:	4770      	bx	lr
    3c0a:	bf00      	nop
    3c0c:	20000130 	.word	0x20000130

00003c10 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3c10:	f04f 0320 	mov.w	r3, #32
    3c14:	f3ef 8211 	mrs	r2, BASEPRI
    3c18:	f383 8812 	msr	BASEPRI_MAX, r3
    3c1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3c20:	4906      	ldr	r1, [pc, #24]	; (3c3c <nordicsemi_nrf52_init+0x2c>)
    3c22:	2301      	movs	r3, #1
    3c24:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3c28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3c2c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3c30:	f382 8811 	msr	BASEPRI, r2
    3c34:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3c38:	2000      	movs	r0, #0
    3c3a:	4770      	bx	lr
    3c3c:	4001e000 	.word	0x4001e000

00003c40 <sys_arch_reboot>:
    *p_gpregret = val;
    3c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c44:	b2c0      	uxtb	r0, r0
    3c46:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3c4a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3c4e:	4905      	ldr	r1, [pc, #20]	; (3c64 <sys_arch_reboot+0x24>)
    3c50:	4b05      	ldr	r3, [pc, #20]	; (3c68 <sys_arch_reboot+0x28>)
    3c52:	68ca      	ldr	r2, [r1, #12]
    3c54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3c58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3c5a:	60cb      	str	r3, [r1, #12]
    3c5c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3c60:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3c62:	e7fd      	b.n	3c60 <sys_arch_reboot+0x20>
    3c64:	e000ed00 	.word	0xe000ed00
    3c68:	05fa0004 	.word	0x05fa0004

00003c6c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3c6c:	b120      	cbz	r0, 3c78 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3c6e:	4b03      	ldr	r3, [pc, #12]	; (3c7c <arch_busy_wait+0x10>)
    3c70:	0180      	lsls	r0, r0, #6
    3c72:	f043 0301 	orr.w	r3, r3, #1
    3c76:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	0000ab00 	.word	0x0000ab00

00003c80 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3c80:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3c82:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3c86:	d512      	bpl.n	3cae <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3c88:	2b08      	cmp	r3, #8
    3c8a:	d105      	bne.n	3c98 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3c8c:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3c8e:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3c92:	d506      	bpl.n	3ca2 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3c94:	480e      	ldr	r0, [pc, #56]	; (3cd0 <endpoint_ctx+0x50>)
    3c96:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    3c98:	f010 0f78 	tst.w	r0, #120	; 0x78
    3c9c:	d112      	bne.n	3cc4 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3c9e:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    3ca2:	204c      	movs	r0, #76	; 0x4c
    3ca4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3ca8:	4b0a      	ldr	r3, [pc, #40]	; (3cd4 <endpoint_ctx+0x54>)
    3caa:	4418      	add	r0, r3
    3cac:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3cae:	2b08      	cmp	r3, #8
    3cb0:	d105      	bne.n	3cbe <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3cb2:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3cb4:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3cb8:	d506      	bpl.n	3cc8 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3cba:	4807      	ldr	r0, [pc, #28]	; (3cd8 <endpoint_ctx+0x58>)
    3cbc:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    3cbe:	f010 0f78 	tst.w	r0, #120	; 0x78
    3cc2:	d0f6      	beq.n	3cb2 <endpoint_ctx+0x32>
		return NULL;
    3cc4:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    3cc6:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3cc8:	4804      	ldr	r0, [pc, #16]	; (3cdc <endpoint_ctx+0x5c>)
    3cca:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3cce:	4770      	bx	lr
    3cd0:	20000f60 	.word	0x20000f60
    3cd4:	20000e14 	.word	0x20000e14
    3cd8:	20001080 	.word	0x20001080
    3cdc:	20000f80 	.word	0x20000f80

00003ce0 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3ce0:	4901      	ldr	r1, [pc, #4]	; (3ce8 <usbd_work_schedule+0x8>)
    3ce2:	4802      	ldr	r0, [pc, #8]	; (3cec <usbd_work_schedule+0xc>)
    3ce4:	f006 bb63 	b.w	a3ae <k_work_submit_to_queue>
    3ce8:	20000e3c 	.word	0x20000e3c
    3cec:	20000478 	.word	0x20000478

00003cf0 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3cf0:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    3cf2:	4801      	ldr	r0, [pc, #4]	; (3cf8 <usbd_evt_put+0x8>)
    3cf4:	f006 baf6 	b.w	a2e4 <k_queue_append>
    3cf8:	200002d0 	.word	0x200002d0

00003cfc <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    3cfc:	4802      	ldr	r0, [pc, #8]	; (3d08 <usbd_evt_get+0xc>)
    3cfe:	2200      	movs	r2, #0
    3d00:	2300      	movs	r3, #0
    3d02:	f003 bfa7 	b.w	7c54 <z_impl_k_queue_get>
    3d06:	bf00      	nop
    3d08:	200002d0 	.word	0x200002d0

00003d0c <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    3d0c:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3d0e:	4c05      	ldr	r4, [pc, #20]	; (3d24 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    3d10:	f7ff fff4 	bl	3cfc <usbd_evt_get>
		if (ev) {
    3d14:	b120      	cbz	r0, 3d20 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3d16:	1d01      	adds	r1, r0, #4
    3d18:	4620      	mov	r0, r4
    3d1a:	f006 fa2b 	bl	a174 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    3d1e:	e7f7      	b.n	3d10 <usbd_evt_flush+0x4>
}
    3d20:	bd10      	pop	{r4, pc}
    3d22:	bf00      	nop
    3d24:	20000250 	.word	0x20000250

00003d28 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    3d28:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    3d2a:	2300      	movs	r3, #0
    3d2c:	480e      	ldr	r0, [pc, #56]	; (3d68 <usbd_evt_alloc+0x40>)
    3d2e:	2200      	movs	r2, #0
    3d30:	a901      	add	r1, sp, #4
    3d32:	f003 fdd5 	bl	78e0 <k_mem_slab_alloc>
    3d36:	b190      	cbz	r0, 3d5e <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    3d38:	f7ff ffe8 	bl	3d0c <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3d3c:	480a      	ldr	r0, [pc, #40]	; (3d68 <usbd_evt_alloc+0x40>)
    3d3e:	2200      	movs	r2, #0
    3d40:	2300      	movs	r3, #0
    3d42:	a901      	add	r1, sp, #4
    3d44:	f003 fdcc 	bl	78e0 <k_mem_slab_alloc>
    3d48:	b938      	cbnz	r0, 3d5a <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
    3d4a:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    3d4c:	2304      	movs	r3, #4
		ev->block = block;
    3d4e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3d50:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3d52:	f7ff ffcd 	bl	3cf0 <usbd_evt_put>
		usbd_work_schedule();
    3d56:	f7ff ffc3 	bl	3ce0 <usbd_work_schedule>

		return NULL;
    3d5a:	2000      	movs	r0, #0
    3d5c:	e001      	b.n	3d62 <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    3d5e:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3d60:	6040      	str	r0, [r0, #4]

	return ev;
}
    3d62:	b003      	add	sp, #12
    3d64:	f85d fb04 	ldr.w	pc, [sp], #4
    3d68:	20000250 	.word	0x20000250

00003d6c <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
    3d6c:	2802      	cmp	r0, #2
{
    3d6e:	b510      	push	{r4, lr}
    3d70:	d811      	bhi.n	3d96 <usb_dc_power_event_handler+0x2a>
    3d72:	4b09      	ldr	r3, [pc, #36]	; (3d98 <usb_dc_power_event_handler+0x2c>)
    3d74:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3d76:	f7ff ffd7 	bl	3d28 <usbd_evt_alloc>
	if (!ev) {
    3d7a:	b160      	cbz	r0, 3d96 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    3d7c:	2200      	movs	r2, #0
    3d7e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    3d80:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    3d82:	f7ff ffb5 	bl	3cf0 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3d86:	4b05      	ldr	r3, [pc, #20]	; (3d9c <usb_dc_power_event_handler+0x30>)
    3d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3d8c:	b11b      	cbz	r3, 3d96 <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    3d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    3d92:	f7ff bfa5 	b.w	3ce0 <usbd_work_schedule>
}
    3d96:	bd10      	pop	{r4, pc}
    3d98:	0000af10 	.word	0x0000af10
    3d9c:	20000e14 	.word	0x20000e14

00003da0 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    3da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    3da2:	7887      	ldrb	r7, [r0, #2]
{
    3da4:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3da6:	4638      	mov	r0, r7
    3da8:	f7ff ff6a 	bl	3c80 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3dac:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    3dae:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3db0:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3db2:	d512      	bpl.n	3dda <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    3db4:	2d00      	cmp	r5, #0
    3db6:	d143      	bne.n	3e40 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    3db8:	f7ff ffb6 	bl	3d28 <usbd_evt_alloc>

			if (!ev) {
    3dbc:	4603      	mov	r3, r0
    3dbe:	2800      	cmp	r0, #0
    3dc0:	d03e      	beq.n	3e40 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    3dc2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3dc4:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3dc6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3dc8:	2203      	movs	r2, #3
    3dca:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    3dcc:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    3dce:	f7ff ff8f 	bl	3cf0 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    3dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    3dd6:	f7ff bf83 	b.w	3ce0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3dda:	b14d      	cbz	r5, 3df0 <usbd_event_transfer_data+0x50>
    3ddc:	2d01      	cmp	r5, #1
    3dde:	d12f      	bne.n	3e40 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3de0:	f7ff ffa2 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    3de4:	4603      	mov	r3, r0
    3de6:	b358      	cbz	r0, 3e40 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    3de8:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3dea:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3dec:	7305      	strb	r5, [r0, #12]
    3dee:	e7ed      	b.n	3dcc <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    3df0:	f7ff ff9a 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    3df4:	b320      	cbz	r0, 3e40 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    3df6:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3df8:	4b12      	ldr	r3, [pc, #72]	; (3e44 <usbd_event_transfer_data+0xa4>)
    3dfa:	f012 0f80 	tst.w	r2, #128	; 0x80
    3dfe:	f002 0108 	and.w	r1, r2, #8
    3e02:	d011      	beq.n	3e28 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3e04:	b141      	cbz	r1, 3e18 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3e06:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3e0a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    3e0c:	2301      	movs	r3, #1
    3e0e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3e10:	2302      	movs	r3, #2
    3e12:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3e14:	6084      	str	r4, [r0, #8]
    3e16:	e7da      	b.n	3dce <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3e18:	f002 020f 	and.w	r2, r2, #15
    3e1c:	2114      	movs	r1, #20
    3e1e:	fb01 3302 	mla	r3, r1, r2, r3
    3e22:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3e26:	e7f0      	b.n	3e0a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3e28:	b111      	cbz	r1, 3e30 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3e2a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3e2e:	e7ec      	b.n	3e0a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3e30:	f002 020f 	and.w	r2, r2, #15
    3e34:	2114      	movs	r1, #20
    3e36:	fb01 3302 	mla	r3, r1, r2, r3
    3e3a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    3e3e:	e7e4      	b.n	3e0a <usbd_event_transfer_data+0x6a>
}
    3e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e42:	bf00      	nop
    3e44:	40027000 	.word	0x40027000

00003e48 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    3e48:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    3e4a:	4812      	ldr	r0, [pc, #72]	; (3e94 <usb_init+0x4c>)
    3e4c:	f002 ff54 	bl	6cf8 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    3e50:	4b11      	ldr	r3, [pc, #68]	; (3e98 <usb_init+0x50>)
    3e52:	4298      	cmp	r0, r3
    3e54:	d11a      	bne.n	3e8c <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3e56:	4811      	ldr	r0, [pc, #68]	; (3e9c <usb_init+0x54>)
    3e58:	f002 f8ee 	bl	6038 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    3e5c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    3e5e:	4810      	ldr	r0, [pc, #64]	; (3ea0 <usb_init+0x58>)
    3e60:	f002 f930 	bl	60c4 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3e64:	490f      	ldr	r1, [pc, #60]	; (3ea4 <usb_init+0x5c>)
    3e66:	4810      	ldr	r0, [pc, #64]	; (3ea8 <usb_init+0x60>)
    3e68:	9400      	str	r4, [sp, #0]
    3e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e72:	f004 f861 	bl	7f38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3e76:	490d      	ldr	r1, [pc, #52]	; (3eac <usb_init+0x64>)
    3e78:	480b      	ldr	r0, [pc, #44]	; (3ea8 <usb_init+0x60>)
    3e7a:	f006 f9aa 	bl	a1d2 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    3e7e:	480c      	ldr	r0, [pc, #48]	; (3eb0 <usb_init+0x68>)
    3e80:	490c      	ldr	r1, [pc, #48]	; (3eb4 <usb_init+0x6c>)
    3e82:	f006 fa77 	bl	a374 <k_work_init>

	return 0;
    3e86:	4620      	mov	r0, r4
}
    3e88:	b002      	add	sp, #8
    3e8a:	bd10      	pop	{r4, pc}
		return -EIO;
    3e8c:	f06f 0004 	mvn.w	r0, #4
    3e90:	e7fa      	b.n	3e88 <usb_init+0x40>
    3e92:	bf00      	nop
    3e94:	00003ef9 	.word	0x00003ef9
    3e98:	0bad0000 	.word	0x0bad0000
    3e9c:	0000af13 	.word	0x0000af13
    3ea0:	0000abb4 	.word	0x0000abb4
    3ea4:	20002080 	.word	0x20002080
    3ea8:	20000478 	.word	0x20000478
    3eac:	0000af05 	.word	0x0000af05
    3eb0:	20000e3c 	.word	0x20000e3c
    3eb4:	0000407d 	.word	0x0000407d

00003eb8 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    3eb8:	b510      	push	{r4, lr}
    3eba:	490e      	ldr	r1, [pc, #56]	; (3ef4 <hfxo_stop.constprop.0.isra.0+0x3c>)
    3ebc:	f3bf 8f5b 	dmb	ish
    3ec0:	2300      	movs	r3, #0
    3ec2:	e851 2f00 	ldrex	r2, [r1]
    3ec6:	2a01      	cmp	r2, #1
    3ec8:	d103      	bne.n	3ed2 <hfxo_stop.constprop.0.isra.0+0x1a>
    3eca:	e841 3000 	strex	r0, r3, [r1]
    3ece:	2800      	cmp	r0, #0
    3ed0:	d1f7      	bne.n	3ec2 <hfxo_stop.constprop.0.isra.0+0xa>
    3ed2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    3ed6:	d10c      	bne.n	3ef2 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3ed8:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    3edc:	3914      	subs	r1, #20
    3ede:	4620      	mov	r0, r4
    3ee0:	f005 fa6f 	bl	93c2 <onoff_cancel>

	if (rv == -EALREADY) {
    3ee4:	3078      	adds	r0, #120	; 0x78
    3ee6:	d104      	bne.n	3ef2 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    3ee8:	4620      	mov	r0, r4
}
    3eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3eee:	f005 ba43 	b.w	9378 <onoff_release>
    3ef2:	bd10      	pop	{r4, pc}
    3ef4:	20000e34 	.word	0x20000e34

00003ef8 <usbd_event_handler>:
{
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	4606      	mov	r6, r0
    3efc:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    3efe:	2214      	movs	r2, #20
    3f00:	2100      	movs	r1, #0
    3f02:	a803      	add	r0, sp, #12
    3f04:	f005 fd40 	bl	9988 <memset>
	switch (p_event->type) {
    3f08:	7833      	ldrb	r3, [r6, #0]
    3f0a:	3b01      	subs	r3, #1
    3f0c:	2b05      	cmp	r3, #5
    3f0e:	d821      	bhi.n	3f54 <usbd_event_handler+0x5c>
    3f10:	e8df f003 	tbb	[pc, r3]
    3f14:	1414037a 	.word	0x1414037a
    3f18:	166a      	.short	0x166a
    3f1a:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    3f1c:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    3f20:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3f22:	f7ff ff01 	bl	3d28 <usbd_evt_alloc>
		if (!ev) {
    3f26:	4603      	mov	r3, r0
    3f28:	b1a0      	cbz	r0, 3f54 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    3f2a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3f2c:	f100 0208 	add.w	r2, r0, #8
    3f30:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    3f34:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3f38:	4618      	mov	r0, r3
    3f3a:	e01d      	b.n	3f78 <usbd_event_handler+0x80>
	switch (p_event->type) {
    3f3c:	2304      	movs	r3, #4
    3f3e:	e7ed      	b.n	3f1c <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3f40:	78b7      	ldrb	r7, [r6, #2]
    3f42:	4638      	mov	r0, r7
    3f44:	f7ff fe9c 	bl	3c80 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3f48:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3f4a:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    3f4c:	b123      	cbz	r3, 3f58 <usbd_event_handler+0x60>
    3f4e:	3b01      	subs	r3, #1
    3f50:	2b02      	cmp	r3, #2
    3f52:	d943      	bls.n	3fdc <usbd_event_handler+0xe4>
}
    3f54:	b009      	add	sp, #36	; 0x24
    3f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3f58:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    3f5a:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3f5c:	d513      	bpl.n	3f86 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    3f5e:	2d00      	cmp	r5, #0
    3f60:	d1f8      	bne.n	3f54 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    3f62:	f7ff fee1 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    3f66:	4603      	mov	r3, r0
    3f68:	2800      	cmp	r0, #0
    3f6a:	d0f3      	beq.n	3f54 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    3f6c:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3f6e:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3f70:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3f72:	2203      	movs	r2, #3
    3f74:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3f76:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    3f78:	f7ff feba 	bl	3cf0 <usbd_evt_put>
}
    3f7c:	b009      	add	sp, #36	; 0x24
    3f7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    3f82:	f7ff bead 	b.w	3ce0 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3f86:	b155      	cbz	r5, 3f9e <usbd_event_handler+0xa6>
    3f88:	2d01      	cmp	r5, #1
    3f8a:	d1e3      	bne.n	3f54 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    3f8c:	f7ff fecc 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    3f90:	4603      	mov	r3, r0
    3f92:	2800      	cmp	r0, #0
    3f94:	d0de      	beq.n	3f54 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    3f96:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3f98:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3f9a:	7305      	strb	r5, [r0, #12]
    3f9c:	e7eb      	b.n	3f76 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    3f9e:	f7ff fec3 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    3fa2:	4607      	mov	r7, r0
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d0d5      	beq.n	3f54 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    3fa8:	2301      	movs	r3, #1
    3faa:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3fac:	2302      	movs	r3, #2
    3fae:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3fb0:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    3fb2:	f104 010c 	add.w	r1, r4, #12
    3fb6:	78b0      	ldrb	r0, [r6, #2]
    3fb8:	f006 f852 	bl	a060 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    3fbc:	4a13      	ldr	r2, [pc, #76]	; (400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>)
    3fbe:	68e1      	ldr	r1, [r4, #12]
    3fc0:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    3fc4:	428b      	cmp	r3, r1
    3fc6:	d906      	bls.n	3fd6 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    3fc8:	1a5b      	subs	r3, r3, r1
    3fca:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    3fce:	f003 f8cf 	bl	7170 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    3fd2:	4638      	mov	r0, r7
    3fd4:	e7d0      	b.n	3f78 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    3fd6:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    3fda:	e7fa      	b.n	3fd2 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    3fdc:	4630      	mov	r0, r6
}
    3fde:	b009      	add	sp, #36	; 0x24
    3fe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    3fe4:	f7ff bedc 	b.w	3da0 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    3fe8:	a801      	add	r0, sp, #4
    3fea:	f003 f89b 	bl	7124 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    3fee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3ff2:	2b05      	cmp	r3, #5
    3ff4:	d104      	bne.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    3ff6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3ffa:	f013 0f60 	tst.w	r3, #96	; 0x60
    3ffe:	d0a9      	beq.n	3f54 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    4000:	4b03      	ldr	r3, [pc, #12]	; (4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>)
    4002:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    4004:	2401      	movs	r4, #1
    4006:	e78c      	b.n	3f22 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    4008:	2402      	movs	r4, #2
    400a:	e78a      	b.n	3f22 <usbd_event_handler+0x2a>
    400c:	20000e14 	.word	0x20000e14
    4010:	20000f80 	.word	0x20000f80

00004014 <eps_ctx_init>:
{
    4014:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4016:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4018:	f064 007f 	orn	r0, r4, #127	; 0x7f
    401c:	b2c0      	uxtb	r0, r0
    401e:	f7ff fe2f 	bl	3c80 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4022:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4024:	f005 fcce 	bl	99c4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4028:	2c08      	cmp	r4, #8
    402a:	d1f5      	bne.n	4018 <eps_ctx_init+0x4>
    402c:	4d0e      	ldr	r5, [pc, #56]	; (4068 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    402e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4030:	b2e0      	uxtb	r0, r4
    4032:	f7ff fe25 	bl	3c80 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4036:	6903      	ldr	r3, [r0, #16]
    4038:	b903      	cbnz	r3, 403c <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    403a:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    403c:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    403e:	f005 fcc1 	bl	99c4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4042:	2c08      	cmp	r4, #8
    4044:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4048:	d1f2      	bne.n	4030 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    404a:	4808      	ldr	r0, [pc, #32]	; (406c <eps_ctx_init+0x58>)
    404c:	f005 fcba 	bl	99c4 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4050:	4b07      	ldr	r3, [pc, #28]	; (4070 <eps_ctx_init+0x5c>)
    4052:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4056:	b912      	cbnz	r2, 405e <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4058:	4a06      	ldr	r2, [pc, #24]	; (4074 <eps_ctx_init+0x60>)
    405a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    405e:	4806      	ldr	r0, [pc, #24]	; (4078 <eps_ctx_init+0x64>)
    4060:	f005 fcb0 	bl	99c4 <ep_ctx_reset>
}
    4064:	2000      	movs	r0, #0
    4066:	bd38      	pop	{r3, r4, r5, pc}
    4068:	200014a4 	.word	0x200014a4
    406c:	20000f60 	.word	0x20000f60
    4070:	20000e14 	.word	0x20000e14
    4074:	200010a4 	.word	0x200010a4
    4078:	20001080 	.word	0x20001080

0000407c <usbd_work_handler>:
{
    407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    4080:	4ca7      	ldr	r4, [pc, #668]	; (4320 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4082:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4324 <usbd_work_handler+0x2a8>
{
    4086:	b085      	sub	sp, #20
    4088:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    408a:	f7ff fe37 	bl	3cfc <usbd_evt_get>
    408e:	b910      	cbnz	r0, 4096 <usbd_work_handler+0x1a>
}
    4090:	b005      	add	sp, #20
    4092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    4096:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    409a:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    409c:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    40a0:	b93b      	cbnz	r3, 40b2 <usbd_work_handler+0x36>
    40a2:	2a00      	cmp	r2, #0
    40a4:	f000 8088 	beq.w	41b8 <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    40a8:	489e      	ldr	r0, [pc, #632]	; (4324 <usbd_work_handler+0x2a8>)
    40aa:	4649      	mov	r1, r9
    40ac:	f006 f862 	bl	a174 <k_mem_slab_free>
}
    40b0:	e7eb      	b.n	408a <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    40b2:	2a04      	cmp	r2, #4
    40b4:	d844      	bhi.n	4140 <usbd_work_handler+0xc4>
    40b6:	e8df f012 	tbh	[pc, r2, lsl #1]
    40ba:	007f      	.short	0x007f
    40bc:	01020005 	.word	0x01020005
    40c0:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
    40c4:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    40c6:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    40c8:	2b03      	cmp	r3, #3
    40ca:	d839      	bhi.n	4140 <usbd_work_handler+0xc4>
    40cc:	e8df f003 	tbb	[pc, r3]
    40d0:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    40d4:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    40d6:	2208      	movs	r2, #8
    40d8:	2100      	movs	r1, #0
    40da:	4630      	mov	r0, r6
    40dc:	f005 fc54 	bl	9988 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    40e0:	4b91      	ldr	r3, [pc, #580]	; (4328 <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    40e2:	4892      	ldr	r0, [pc, #584]	; (432c <usbd_work_handler+0x2b0>)
    40e4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    40e8:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    40ea:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    40ee:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    40f0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    40f4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    40f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    40fc:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    40fe:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4102:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4106:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    410a:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    410c:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4110:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4114:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4118:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    411a:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    411c:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    411e:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4120:	f005 fc27 	bl	9972 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4124:	682b      	ldr	r3, [r5, #0]
    4126:	7a68      	ldrb	r0, [r5, #9]
    4128:	2100      	movs	r1, #0
    412a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    412c:	f996 3000 	ldrsb.w	r3, [r6]
    4130:	2b00      	cmp	r3, #0
    4132:	db08      	blt.n	4146 <usbd_work_handler+0xca>
    4134:	88f3      	ldrh	r3, [r6, #6]
    4136:	b133      	cbz	r3, 4146 <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4138:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    413c:	f003 f818 	bl	7170 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4140:	4649      	mov	r1, r9
    4142:	4640      	mov	r0, r8
    4144:	e7b2      	b.n	40ac <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    4146:	2300      	movs	r3, #0
    4148:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    414c:	e7f8      	b.n	4140 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    414e:	7f6b      	ldrb	r3, [r5, #29]
    4150:	2b00      	cmp	r3, #0
    4152:	d0f5      	beq.n	4140 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    4154:	7f2b      	ldrb	r3, [r5, #28]
    4156:	2b00      	cmp	r3, #0
    4158:	d0f2      	beq.n	4140 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    415a:	2600      	movs	r6, #0
    415c:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    415e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4162:	4873      	ldr	r0, [pc, #460]	; (4330 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
    4164:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    416a:	f005 fc3e 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    416e:	696b      	ldr	r3, [r5, #20]
    4170:	9301      	str	r3, [sp, #4]
    4172:	686b      	ldr	r3, [r5, #4]
    4174:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4178:	a901      	add	r1, sp, #4
    417a:	7a68      	ldrb	r0, [r5, #9]
    417c:	f002 fdfe 	bl	6d7c <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    4180:	486b      	ldr	r0, [pc, #428]	; (4330 <usbd_work_handler+0x2b4>)
    4182:	f005 fc34 	bl	99ee <k_mutex_unlock.isra.0>
    4186:	e7db      	b.n	4140 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4188:	682b      	ldr	r3, [r5, #0]
    418a:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    418c:	7a68      	ldrb	r0, [r5, #9]
    418e:	4798      	blx	r3
		break;
    4190:	e7d6      	b.n	4140 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4192:	7aab      	ldrb	r3, [r5, #10]
    4194:	b96b      	cbnz	r3, 41b2 <usbd_work_handler+0x136>
    4196:	7feb      	ldrb	r3, [r5, #31]
    4198:	b95b      	cbnz	r3, 41b2 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    419a:	4865      	ldr	r0, [pc, #404]	; (4330 <usbd_work_handler+0x2b4>)
    419c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    41a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    41a4:	f005 fc21 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    41a8:	f003 f812 	bl	71d0 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    41ac:	4860      	ldr	r0, [pc, #384]	; (4330 <usbd_work_handler+0x2b4>)
    41ae:	f005 fc1e 	bl	99ee <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    41b2:	682b      	ldr	r3, [r5, #0]
    41b4:	2102      	movs	r1, #2
    41b6:	e7e9      	b.n	418c <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    41b8:	7a02      	ldrb	r2, [r0, #8]
    41ba:	2a04      	cmp	r2, #4
    41bc:	d8c0      	bhi.n	4140 <usbd_work_handler+0xc4>
    41be:	e8df f002 	tbb	[pc, r2]
    41c2:	0359      	.short	0x0359
    41c4:	6723      	.short	0x6723
    41c6:	73          	.byte	0x73
    41c7:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    41c8:	f002 fd60 	bl	6c8c <nrfx_usbd_is_enabled>
    41cc:	4605      	mov	r5, r0
    41ce:	2800      	cmp	r0, #0
    41d0:	d1b6      	bne.n	4140 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    41d2:	f002 fc97 	bl	6b04 <nrfx_usbd_enable>
    41d6:	f3bf 8f5b 	dmb	ish
    41da:	4956      	ldr	r1, [pc, #344]	; (4334 <usbd_work_handler+0x2b8>)
    41dc:	2301      	movs	r3, #1
    41de:	e851 2f00 	ldrex	r2, [r1]
    41e2:	2a00      	cmp	r2, #0
    41e4:	d103      	bne.n	41ee <usbd_work_handler+0x172>
    41e6:	e841 3000 	strex	r0, r3, [r1]
    41ea:	2800      	cmp	r0, #0
    41ec:	d1f7      	bne.n	41de <usbd_work_handler+0x162>
    41ee:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    41f2:	d1a5      	bne.n	4140 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    41f4:	f841 5c08 	str.w	r5, [r1, #-8]
    41f8:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    41fc:	69e0      	ldr	r0, [r4, #28]
    41fe:	6163      	str	r3, [r4, #20]
    4200:	3914      	subs	r1, #20
    4202:	f005 f861 	bl	92c8 <onoff_request>
    4206:	e79b      	b.n	4140 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    4208:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    420a:	f065 007f 	orn	r0, r5, #127	; 0x7f
    420e:	b2c0      	uxtb	r0, r0
    4210:	f7ff fd36 	bl	3c80 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4214:	7a03      	ldrb	r3, [r0, #8]
    4216:	b113      	cbz	r3, 421e <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4218:	7a40      	ldrb	r0, [r0, #9]
    421a:	f003 f989 	bl	7530 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    421e:	3501      	adds	r5, #1
    4220:	2d08      	cmp	r5, #8
    4222:	d1f2      	bne.n	420a <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
    4224:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    4228:	b11b      	cbz	r3, 4232 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    422a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    422e:	f003 f97f 	bl	7530 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4232:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4234:	b2e8      	uxtb	r0, r5
    4236:	f7ff fd23 	bl	3c80 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    423a:	7a03      	ldrb	r3, [r0, #8]
    423c:	b113      	cbz	r3, 4244 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    423e:	7a40      	ldrb	r0, [r0, #9]
    4240:	f003 f976 	bl	7530 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4244:	3501      	adds	r5, #1
    4246:	2d08      	cmp	r5, #8
    4248:	d1f4      	bne.n	4234 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
    424a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    424e:	b11b      	cbz	r3, 4258 <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4250:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4254:	f003 f96c 	bl	7530 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4258:	2001      	movs	r0, #1
    425a:	f002 fcf9 	bl	6c50 <nrfx_usbd_start>
		ctx->ready = true;
    425e:	2301      	movs	r3, #1
    4260:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4264:	6823      	ldr	r3, [r4, #0]
    4266:	2b00      	cmp	r3, #0
    4268:	f43f af6a 	beq.w	4140 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    426c:	2100      	movs	r1, #0
    426e:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4270:	4798      	blx	r3
    4272:	e765      	b.n	4140 <usbd_work_handler+0xc4>
		ctx->ready = false;
    4274:	2500      	movs	r5, #0
    4276:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    427a:	f003 f915 	bl	74a8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    427e:	f7ff fe1b 	bl	3eb8 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4282:	6823      	ldr	r3, [r4, #0]
    4284:	2b00      	cmp	r3, #0
    4286:	f43f af5b 	beq.w	4140 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    428a:	4629      	mov	r1, r5
    428c:	2004      	movs	r0, #4
    428e:	e7ef      	b.n	4270 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
    4290:	2b00      	cmp	r3, #0
    4292:	f43f af55 	beq.w	4140 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    4296:	f002 fd03 	bl	6ca0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    429a:	6823      	ldr	r3, [r4, #0]
    429c:	2b00      	cmp	r3, #0
    429e:	f43f af4f 	beq.w	4140 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    42a2:	2100      	movs	r1, #0
    42a4:	2005      	movs	r0, #5
    42a6:	e7e3      	b.n	4270 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
    42a8:	6822      	ldr	r2, [r4, #0]
    42aa:	2a00      	cmp	r2, #0
    42ac:	f43f af48 	beq.w	4140 <usbd_work_handler+0xc4>
    42b0:	2b00      	cmp	r3, #0
    42b2:	f43f af45 	beq.w	4140 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    42b6:	2100      	movs	r1, #0
    42b8:	2006      	movs	r0, #6
    42ba:	4790      	blx	r2
    42bc:	e740      	b.n	4140 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    42be:	f107 0510 	add.w	r5, r7, #16
    42c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    42c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42ca:	4628      	mov	r0, r5
    42cc:	f005 fb8d 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    42d0:	f7ff fea0 	bl	4014 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    42d4:	4628      	mov	r0, r5
    42d6:	f005 fb8a 	bl	99ee <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    42da:	f857 3c28 	ldr.w	r3, [r7, #-40]
    42de:	2b00      	cmp	r3, #0
    42e0:	f43f af2e 	beq.w	4140 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    42e4:	2100      	movs	r1, #0
    42e6:	2001      	movs	r0, #1
    42e8:	e7c2      	b.n	4270 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
    42ea:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    42ee:	b17b      	cbz	r3, 4310 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
    42f0:	2501      	movs	r5, #1
    42f2:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    42f6:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    42fa:	f7ff fd15 	bl	3d28 <usbd_evt_alloc>
		if (!ev) {
    42fe:	b138      	cbz	r0, 4310 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
    4300:	4a0d      	ldr	r2, [pc, #52]	; (4338 <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
    4302:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4304:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4306:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4308:	f7ff fcf2 	bl	3cf0 <usbd_evt_put>
		usbd_work_schedule();
    430c:	f7ff fce8 	bl	3ce0 <usbd_work_schedule>
			if (ctx->status_cb) {
    4310:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4314:	2b00      	cmp	r3, #0
    4316:	f43f af13 	beq.w	4140 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    431a:	2100      	movs	r1, #0
    431c:	200a      	movs	r0, #10
    431e:	e7a7      	b.n	4270 <usbd_work_handler+0x1f4>
    4320:	20000e14 	.word	0x20000e14
    4324:	20000250 	.word	0x20000250
    4328:	40027000 	.word	0x40027000
    432c:	20000e18 	.word	0x20000e18
    4330:	20000e4c 	.word	0x20000e4c
    4334:	20000e34 	.word	0x20000e34
    4338:	20001080 	.word	0x20001080
	nrfx_power_usbevt_disable();
    433c:	f005 fdd7 	bl	9eee <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4340:	f003 f8b2 	bl	74a8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4344:	f002 fbd4 	bl	6af0 <nrfx_usbd_uninit>
	usbd_evt_flush();
    4348:	f7ff fce0 	bl	3d0c <usbd_evt_flush>
	ret = eps_ctx_init();
    434c:	f7ff fe62 	bl	4014 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4350:	f005 fdc6 	bl	9ee0 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4354:	4801      	ldr	r0, [pc, #4]	; (435c <usbd_work_handler+0x2e0>)
    4356:	f002 fccf 	bl	6cf8 <nrfx_usbd_init>
}
    435a:	e6f1      	b.n	4140 <usbd_work_handler+0xc4>
    435c:	00003ef9 	.word	0x00003ef9

00004360 <usb_dc_attach>:
{
    4360:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4362:	4d16      	ldr	r5, [pc, #88]	; (43bc <usb_dc_attach+0x5c>)
    4364:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    4368:	bb2c      	cbnz	r4, 43b6 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    436a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    436e:	f005 ff44 	bl	a1fa <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4372:	4620      	mov	r0, r4
    4374:	f000 fb10 	bl	4998 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4378:	4622      	mov	r2, r4
    437a:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    437c:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    437e:	2027      	movs	r0, #39	; 0x27
    4380:	f7ff f896 	bl	34b0 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    4384:	f005 fdac 	bl	9ee0 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    4388:	f7ff fe44 	bl	4014 <eps_ctx_init>
	if (ret == 0) {
    438c:	4604      	mov	r4, r0
    438e:	b910      	cbnz	r0, 4396 <usb_dc_attach+0x36>
		ctx->attached = true;
    4390:	2301      	movs	r3, #1
    4392:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    4396:	4b0a      	ldr	r3, [pc, #40]	; (43c0 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    4398:	681b      	ldr	r3, [r3, #0]
    439a:	b10b      	cbz	r3, 43a0 <usb_dc_attach+0x40>
		usbd_work_schedule();
    439c:	f7ff fca0 	bl	3ce0 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    43a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43a4:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    43a8:	07db      	lsls	r3, r3, #31
    43aa:	d502      	bpl.n	43b2 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    43ac:	2000      	movs	r0, #0
    43ae:	f7ff fcdd 	bl	3d6c <usb_dc_power_event_handler>
}
    43b2:	4620      	mov	r0, r4
    43b4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    43b6:	2400      	movs	r4, #0
    43b8:	e7fb      	b.n	43b2 <usb_dc_attach+0x52>
    43ba:	bf00      	nop
    43bc:	20000e14 	.word	0x20000e14
    43c0:	200002d0 	.word	0x200002d0

000043c4 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    43c4:	4b07      	ldr	r3, [pc, #28]	; (43e4 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    43c6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    43ca:	b13a      	cbz	r2, 43dc <usb_dc_set_address+0x18>
    43cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    43d0:	2b00      	cmp	r3, #0
    43d2:	bf14      	ite	ne
    43d4:	2000      	movne	r0, #0
    43d6:	f06f 0012 	mvneq.w	r0, #18
    43da:	4770      	bx	lr
    43dc:	f06f 0012 	mvn.w	r0, #18
}
    43e0:	4770      	bx	lr
    43e2:	bf00      	nop
    43e4:	20000e14 	.word	0x20000e14

000043e8 <usb_dc_ep_configure>:
{
    43e8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    43ea:	4b10      	ldr	r3, [pc, #64]	; (442c <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
    43ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    43f0:	4604      	mov	r4, r0
	if (!dev_attached()) {
    43f2:	b1c3      	cbz	r3, 4426 <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    43f4:	7805      	ldrb	r5, [r0, #0]
    43f6:	4628      	mov	r0, r5
    43f8:	f7ff fc42 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    43fc:	b910      	cbnz	r0, 4404 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    43fe:	f06f 0015 	mvn.w	r0, #21
}
    4402:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4404:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    4406:	7923      	ldrb	r3, [r4, #4]
    4408:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    440a:	8863      	ldrh	r3, [r4, #2]
    440c:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    440e:	7820      	ldrb	r0, [r4, #0]
    4410:	8861      	ldrh	r1, [r4, #2]
    4412:	f010 0f08 	tst.w	r0, #8
    4416:	d102      	bne.n	441e <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4418:	1e4b      	subs	r3, r1, #1
    441a:	420b      	tst	r3, r1
    441c:	d1ef      	bne.n	43fe <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    441e:	f005 fe1a 	bl	a056 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4422:	2000      	movs	r0, #0
    4424:	e7ed      	b.n	4402 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    4426:	f06f 0012 	mvn.w	r0, #18
    442a:	e7ea      	b.n	4402 <usb_dc_ep_configure+0x1a>
    442c:	20000e14 	.word	0x20000e14

00004430 <usb_dc_ep_set_stall>:
{
    4430:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4432:	4b12      	ldr	r3, [pc, #72]	; (447c <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    4434:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4438:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    443a:	b1ca      	cbz	r2, 4470 <usb_dc_ep_set_stall+0x40>
    443c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4440:	b1b3      	cbz	r3, 4470 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4442:	f7ff fc1d 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    4446:	4604      	mov	r4, r0
    4448:	b1a8      	cbz	r0, 4476 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    444a:	7a83      	ldrb	r3, [r0, #10]
    444c:	2b01      	cmp	r3, #1
    444e:	d012      	beq.n	4476 <usb_dc_ep_set_stall+0x46>
    4450:	d907      	bls.n	4462 <usb_dc_ep_set_stall+0x32>
    4452:	3b02      	subs	r3, #2
    4454:	2b01      	cmp	r3, #1
    4456:	d907      	bls.n	4468 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4458:	6963      	ldr	r3, [r4, #20]
    445a:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    445c:	2000      	movs	r0, #0
    445e:	60e0      	str	r0, [r4, #12]
}
    4460:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4462:	f002 febd 	bl	71e0 <nrfx_usbd_setup_stall>
		break;
    4466:	e7f7      	b.n	4458 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4468:	4628      	mov	r0, r5
    446a:	f002 fe2d 	bl	70c8 <nrfx_usbd_ep_stall>
		break;
    446e:	e7f3      	b.n	4458 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4470:	f06f 0012 	mvn.w	r0, #18
    4474:	e7f4      	b.n	4460 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    4476:	f06f 0015 	mvn.w	r0, #21
    447a:	e7f1      	b.n	4460 <usb_dc_ep_set_stall+0x30>
    447c:	20000e14 	.word	0x20000e14

00004480 <usb_dc_ep_clear_stall>:
{
    4480:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4482:	4b0e      	ldr	r3, [pc, #56]	; (44bc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    4484:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4488:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    448a:	b182      	cbz	r2, 44ae <usb_dc_ep_clear_stall+0x2e>
    448c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4490:	b16b      	cbz	r3, 44ae <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    4492:	f7ff fbf5 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    4496:	b168      	cbz	r0, 44b4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    4498:	f015 0408 	ands.w	r4, r5, #8
    449c:	d10a      	bne.n	44b4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    449e:	4628      	mov	r0, r5
    44a0:	f002 fe34 	bl	710c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    44a4:	4628      	mov	r0, r5
    44a6:	f003 f897 	bl	75d8 <nrfx_usbd_ep_stall_clear>
	return 0;
    44aa:	4620      	mov	r0, r4
}
    44ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    44ae:	f06f 0012 	mvn.w	r0, #18
    44b2:	e7fb      	b.n	44ac <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    44b4:	f06f 0015 	mvn.w	r0, #21
    44b8:	e7f8      	b.n	44ac <usb_dc_ep_clear_stall+0x2c>
    44ba:	bf00      	nop
    44bc:	20000e14 	.word	0x20000e14

000044c0 <usb_dc_ep_is_stalled>:
{
    44c0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    44c2:	4b0c      	ldr	r3, [pc, #48]	; (44f4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    44c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    44c8:	4605      	mov	r5, r0
    44ca:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    44cc:	b162      	cbz	r2, 44e8 <usb_dc_ep_is_stalled+0x28>
    44ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    44d2:	b14b      	cbz	r3, 44e8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    44d4:	f7ff fbd4 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    44d8:	b148      	cbz	r0, 44ee <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    44da:	b144      	cbz	r4, 44ee <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    44dc:	4628      	mov	r0, r5
    44de:	f002 fdfb 	bl	70d8 <nrfx_usbd_ep_stall_check>
    44e2:	7020      	strb	r0, [r4, #0]
	return 0;
    44e4:	2000      	movs	r0, #0
}
    44e6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    44e8:	f06f 0012 	mvn.w	r0, #18
    44ec:	e7fb      	b.n	44e6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    44ee:	f06f 0015 	mvn.w	r0, #21
    44f2:	e7f8      	b.n	44e6 <usb_dc_ep_is_stalled+0x26>
    44f4:	20000e14 	.word	0x20000e14

000044f8 <usb_dc_ep_enable>:
{
    44f8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    44fa:	4e13      	ldr	r6, [pc, #76]	; (4548 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    44fc:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    4500:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4502:	b1c3      	cbz	r3, 4536 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4504:	f7ff fbbc 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    4508:	4605      	mov	r5, r0
    450a:	b1b8      	cbz	r0, 453c <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    450c:	0723      	lsls	r3, r4, #28
    450e:	d405      	bmi.n	451c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4510:	4620      	mov	r0, r4
    4512:	f002 fdfb 	bl	710c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    4516:	4620      	mov	r0, r4
    4518:	f003 f85e 	bl	75d8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    451c:	7a2b      	ldrb	r3, [r5, #8]
    451e:	b983      	cbnz	r3, 4542 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4520:	2301      	movs	r3, #1
    4522:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4524:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    4528:	b90b      	cbnz	r3, 452e <usb_dc_ep_enable+0x36>
	return 0;
    452a:	2000      	movs	r0, #0
}
    452c:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    452e:	4620      	mov	r0, r4
    4530:	f002 fffe 	bl	7530 <nrfx_usbd_ep_enable>
    4534:	e7f9      	b.n	452a <usb_dc_ep_enable+0x32>
		return -ENODEV;
    4536:	f06f 0012 	mvn.w	r0, #18
    453a:	e7f7      	b.n	452c <usb_dc_ep_enable+0x34>
		return -EINVAL;
    453c:	f06f 0015 	mvn.w	r0, #21
    4540:	e7f4      	b.n	452c <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4542:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4546:	e7f1      	b.n	452c <usb_dc_ep_enable+0x34>
    4548:	20000e14 	.word	0x20000e14

0000454c <usb_dc_ep_write>:
{
    454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4550:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 4638 <usb_dc_ep_write+0xec>
{
    4554:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    4556:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    455a:	b085      	sub	sp, #20
    455c:	4607      	mov	r7, r0
    455e:	4689      	mov	r9, r1
    4560:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    4562:	2b00      	cmp	r3, #0
    4564:	d061      	beq.n	462a <usb_dc_ep_write+0xde>
    4566:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    456a:	2b00      	cmp	r3, #0
    456c:	d05d      	beq.n	462a <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    456e:	0603      	lsls	r3, r0, #24
    4570:	d55e      	bpl.n	4630 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    4572:	f7ff fb85 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    4576:	4604      	mov	r4, r0
    4578:	2800      	cmp	r0, #0
    457a:	d059      	beq.n	4630 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    457c:	7a03      	ldrb	r3, [r0, #8]
    457e:	2b00      	cmp	r3, #0
    4580:	d056      	beq.n	4630 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    458a:	f108 0038 	add.w	r0, r8, #56	; 0x38
    458e:	f005 fa2c 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4592:	7fa3      	ldrb	r3, [r4, #30]
    4594:	b14b      	cbz	r3, 45aa <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    4596:	f108 0038 	add.w	r0, r8, #56	; 0x38
    459a:	f005 fa28 	bl	99ee <k_mutex_unlock.isra.0>
		return -EAGAIN;
    459e:	f06f 040a 	mvn.w	r4, #10
}
    45a2:	4620      	mov	r0, r4
    45a4:	b005      	add	sp, #20
    45a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    45aa:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    45ac:	b1c5      	cbz	r5, 45e0 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    45ae:	b33b      	cbz	r3, 4600 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    45b0:	2301      	movs	r3, #1
    45b2:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    45b4:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    45b8:	a901      	add	r1, sp, #4
    45ba:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    45bc:	e9cd 9501 	strd	r9, r5, [sp, #4]
    45c0:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    45c4:	f002 fbda 	bl	6d7c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    45c8:	4b1c      	ldr	r3, [pc, #112]	; (463c <usb_dc_ep_write+0xf0>)
    45ca:	4298      	cmp	r0, r3
    45cc:	d029      	beq.n	4622 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    45ce:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    45d2:	bb1e      	cbnz	r6, 461c <usb_dc_ep_write+0xd0>
		result = -EIO;
    45d4:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    45d8:	4819      	ldr	r0, [pc, #100]	; (4640 <usb_dc_ep_write+0xf4>)
    45da:	f005 fa08 	bl	99ee <k_mutex_unlock.isra.0>
	return result;
    45de:	e7e0      	b.n	45a2 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    45e0:	7fe2      	ldrb	r2, [r4, #31]
    45e2:	b102      	cbz	r2, 45e6 <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    45e4:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    45e6:	2b00      	cmp	r3, #0
    45e8:	d1e2      	bne.n	45b0 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    45ea:	f002 fe01 	bl	71f0 <nrfx_usbd_last_setup_dir_get>
    45ee:	42b8      	cmp	r0, r7
    45f0:	d0de      	beq.n	45b0 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    45f2:	f002 fded 	bl	71d0 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    45f6:	4812      	ldr	r0, [pc, #72]	; (4640 <usb_dc_ep_write+0xf4>)
    45f8:	f005 f9f9 	bl	99ee <k_mutex_unlock.isra.0>
		return 0;
    45fc:	2400      	movs	r4, #0
    45fe:	e7d0      	b.n	45a2 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4600:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4604:	42ab      	cmp	r3, r5
    4606:	d9f0      	bls.n	45ea <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4608:	6862      	ldr	r2, [r4, #4]
    460a:	fbb5 f3f2 	udiv	r3, r5, r2
    460e:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4612:	2b00      	cmp	r3, #0
    4614:	d1e9      	bne.n	45ea <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    4616:	2301      	movs	r3, #1
    4618:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    461a:	e7e6      	b.n	45ea <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    461c:	f8c6 8000 	str.w	r8, [r6]
    4620:	e7d8      	b.n	45d4 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4622:	b106      	cbz	r6, 4626 <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4624:	6035      	str	r5, [r6, #0]
	int result = 0;
    4626:	2400      	movs	r4, #0
    4628:	e7d6      	b.n	45d8 <usb_dc_ep_write+0x8c>
		return -ENODEV;
    462a:	f06f 0412 	mvn.w	r4, #18
    462e:	e7b8      	b.n	45a2 <usb_dc_ep_write+0x56>
		return -EINVAL;
    4630:	f06f 0415 	mvn.w	r4, #21
    4634:	e7b5      	b.n	45a2 <usb_dc_ep_write+0x56>
    4636:	bf00      	nop
    4638:	20000e14 	.word	0x20000e14
    463c:	0bad0000 	.word	0x0bad0000
    4640:	20000e4c 	.word	0x20000e4c

00004644 <usb_dc_ep_read_wait>:
{
    4644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4648:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    464a:	4b20      	ldr	r3, [pc, #128]	; (46cc <usb_dc_ep_read_wait+0x88>)
{
    464c:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    464e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4652:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4654:	2a00      	cmp	r2, #0
    4656:	d033      	beq.n	46c0 <usb_dc_ep_read_wait+0x7c>
    4658:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    465c:	b383      	cbz	r3, 46c0 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    465e:	0603      	lsls	r3, r0, #24
    4660:	d431      	bmi.n	46c6 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4662:	b901      	cbnz	r1, 4666 <usb_dc_ep_read_wait+0x22>
    4664:	bb7f      	cbnz	r7, 46c6 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    4666:	f7ff fb0b 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    466a:	4604      	mov	r4, r0
    466c:	b358      	cbz	r0, 46c6 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    466e:	7a03      	ldrb	r3, [r0, #8]
    4670:	b34b      	cbz	r3, 46c6 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4676:	4816      	ldr	r0, [pc, #88]	; (46d0 <usb_dc_ep_read_wait+0x8c>)
    4678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    467c:	f005 f9b5 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    4680:	68e3      	ldr	r3, [r4, #12]
    4682:	429f      	cmp	r7, r3
    4684:	46b8      	mov	r8, r7
    4686:	bf28      	it	cs
    4688:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    468a:	b946      	cbnz	r6, 469e <usb_dc_ep_read_wait+0x5a>
    468c:	b93f      	cbnz	r7, 469e <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    468e:	b105      	cbz	r5, 4692 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    4690:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    4692:	480f      	ldr	r0, [pc, #60]	; (46d0 <usb_dc_ep_read_wait+0x8c>)
    4694:	f005 f9ab 	bl	99ee <k_mutex_unlock.isra.0>
		return 0;
    4698:	2000      	movs	r0, #0
}
    469a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    469e:	69a1      	ldr	r1, [r4, #24]
    46a0:	4642      	mov	r2, r8
    46a2:	4630      	mov	r0, r6
    46a4:	f005 f965 	bl	9972 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    46a8:	69a3      	ldr	r3, [r4, #24]
    46aa:	4443      	add	r3, r8
    46ac:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    46ae:	68e3      	ldr	r3, [r4, #12]
    46b0:	eba3 0308 	sub.w	r3, r3, r8
    46b4:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    46b6:	2d00      	cmp	r5, #0
    46b8:	d0eb      	beq.n	4692 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    46ba:	f8c5 8000 	str.w	r8, [r5]
    46be:	e7e8      	b.n	4692 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    46c0:	f06f 0012 	mvn.w	r0, #18
    46c4:	e7e9      	b.n	469a <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    46c6:	f06f 0015 	mvn.w	r0, #21
    46ca:	e7e6      	b.n	469a <usb_dc_ep_read_wait+0x56>
    46cc:	20000e14 	.word	0x20000e14
    46d0:	20000e4c 	.word	0x20000e4c

000046d4 <usb_dc_ep_read_continue>:
{
    46d4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    46d6:	4d1e      	ldr	r5, [pc, #120]	; (4750 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    46d8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    46dc:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    46de:	b382      	cbz	r2, 4742 <usb_dc_ep_read_continue+0x6e>
    46e0:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    46e4:	b36a      	cbz	r2, 4742 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    46e6:	061b      	lsls	r3, r3, #24
    46e8:	d42e      	bmi.n	4748 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    46ea:	f7ff fac9 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    46ee:	4604      	mov	r4, r0
    46f0:	b350      	cbz	r0, 4748 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    46f2:	7a03      	ldrb	r3, [r0, #8]
    46f4:	b343      	cbz	r3, 4748 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    46f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46fe:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4702:	f005 f972 	bl	99ea <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    4706:	68e3      	ldr	r3, [r4, #12]
    4708:	b9b3      	cbnz	r3, 4738 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    470a:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    470c:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    470e:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4710:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4712:	7f63      	ldrb	r3, [r4, #29]
    4714:	b183      	cbz	r3, 4738 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    4716:	f7ff fb07 	bl	3d28 <usbd_evt_alloc>
			if (!ev) {
    471a:	b930      	cbnz	r0, 472a <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    471c:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4720:	f005 f965 	bl	99ee <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4724:	f06f 000b 	mvn.w	r0, #11
}
    4728:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    472a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    472c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    472e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4730:	f7ff fade 	bl	3cf0 <usbd_evt_put>
			usbd_work_schedule();
    4734:	f7ff fad4 	bl	3ce0 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4738:	4806      	ldr	r0, [pc, #24]	; (4754 <usb_dc_ep_read_continue+0x80>)
    473a:	f005 f958 	bl	99ee <k_mutex_unlock.isra.0>
	return 0;
    473e:	2000      	movs	r0, #0
    4740:	e7f2      	b.n	4728 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4742:	f06f 0012 	mvn.w	r0, #18
    4746:	e7ef      	b.n	4728 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    4748:	f06f 0015 	mvn.w	r0, #21
    474c:	e7ec      	b.n	4728 <usb_dc_ep_read_continue+0x54>
    474e:	bf00      	nop
    4750:	20000e14 	.word	0x20000e14
    4754:	20000e4c 	.word	0x20000e4c

00004758 <usb_dc_ep_set_callback>:
{
    4758:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    475a:	4b08      	ldr	r3, [pc, #32]	; (477c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    475c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4760:	460c      	mov	r4, r1
	if (!dev_attached()) {
    4762:	b12b      	cbz	r3, 4770 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    4764:	f7ff fa8c 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    4768:	b128      	cbz	r0, 4776 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    476a:	6004      	str	r4, [r0, #0]
	return 0;
    476c:	2000      	movs	r0, #0
}
    476e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4770:	f06f 0012 	mvn.w	r0, #18
    4774:	e7fb      	b.n	476e <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    4776:	f06f 0015 	mvn.w	r0, #21
    477a:	e7f8      	b.n	476e <usb_dc_ep_set_callback+0x16>
    477c:	20000e14 	.word	0x20000e14

00004780 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4780:	4b01      	ldr	r3, [pc, #4]	; (4788 <usb_dc_set_status_callback+0x8>)
    4782:	6018      	str	r0, [r3, #0]
}
    4784:	4770      	bx	lr
    4786:	bf00      	nop
    4788:	20000e14 	.word	0x20000e14

0000478c <usb_dc_ep_mps>:
{
    478c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    478e:	4b07      	ldr	r3, [pc, #28]	; (47ac <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4790:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4794:	b123      	cbz	r3, 47a0 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    4796:	f7ff fa73 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    479a:	b120      	cbz	r0, 47a6 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    479c:	6840      	ldr	r0, [r0, #4]
}
    479e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    47a0:	f06f 0012 	mvn.w	r0, #18
    47a4:	e7fb      	b.n	479e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    47a6:	f06f 0015 	mvn.w	r0, #21
    47aa:	e7f8      	b.n	479e <usb_dc_ep_mps+0x12>
    47ac:	20000e14 	.word	0x20000e14

000047b0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    47b0:	4b08      	ldr	r3, [pc, #32]	; (47d4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    47b2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    47b4:	1ac3      	subs	r3, r0, r3
{
    47b6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    47b8:	4907      	ldr	r1, [pc, #28]	; (47d8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    47ba:	109b      	asrs	r3, r3, #2
{
    47bc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    47be:	4359      	muls	r1, r3
    47c0:	4806      	ldr	r0, [pc, #24]	; (47dc <onoff_stop+0x2c>)
    47c2:	2240      	movs	r2, #64	; 0x40
    47c4:	f005 f971 	bl	9aaa <stop>
	notify(mgr, res);
    47c8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    47ca:	4601      	mov	r1, r0
	notify(mgr, res);
    47cc:	4620      	mov	r0, r4
}
    47ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    47d2:	4718      	bx	r3
    47d4:	200016b8 	.word	0x200016b8
    47d8:	b6db6db7 	.word	0xb6db6db7
    47dc:	0000a7f0 	.word	0x0000a7f0

000047e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    47e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    47e2:	4c0c      	ldr	r4, [pc, #48]	; (4814 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    47e4:	4a0c      	ldr	r2, [pc, #48]	; (4818 <onoff_start+0x38>)
    47e6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    47e8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    47ea:	9300      	str	r3, [sp, #0]
{
    47ec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    47ee:	460b      	mov	r3, r1
    47f0:	490a      	ldr	r1, [pc, #40]	; (481c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    47f2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    47f4:	4361      	muls	r1, r4
{
    47f6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    47f8:	4809      	ldr	r0, [pc, #36]	; (4820 <onoff_start+0x40>)
    47fa:	f005 f983 	bl	9b04 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    47fe:	1e01      	subs	r1, r0, #0
    4800:	da05      	bge.n	480e <onoff_start+0x2e>
		notify(mgr, err);
    4802:	4630      	mov	r0, r6
    4804:	462b      	mov	r3, r5
	}
}
    4806:	b002      	add	sp, #8
    4808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    480c:	4718      	bx	r3
}
    480e:	b002      	add	sp, #8
    4810:	bd70      	pop	{r4, r5, r6, pc}
    4812:	bf00      	nop
    4814:	200016b8 	.word	0x200016b8
    4818:	00009b71 	.word	0x00009b71
    481c:	b6db6db7 	.word	0xb6db6db7
    4820:	0000a7f0 	.word	0x0000a7f0

00004824 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4824:	2200      	movs	r2, #0
{
    4826:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4828:	2101      	movs	r1, #1
{
    482a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    482c:	4610      	mov	r0, r2
    482e:	f7fe fe3f 	bl	34b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4832:	480f      	ldr	r0, [pc, #60]	; (4870 <clk_init+0x4c>)
    4834:	f001 f842 	bl	58bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4838:	4b0e      	ldr	r3, [pc, #56]	; (4874 <clk_init+0x50>)
    483a:	4298      	cmp	r0, r3
    483c:	d115      	bne.n	486a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    483e:	f001 f84d 	bl	58dc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4842:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4844:	490c      	ldr	r1, [pc, #48]	; (4878 <clk_init+0x54>)
    4846:	4630      	mov	r0, r6
    4848:	f004 fd2b 	bl	92a2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    484c:	2800      	cmp	r0, #0
    484e:	db0b      	blt.n	4868 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4850:	2501      	movs	r5, #1
    4852:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    4854:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4856:	4908      	ldr	r1, [pc, #32]	; (4878 <clk_init+0x54>)
    4858:	f104 001c 	add.w	r0, r4, #28
    485c:	f004 fd21 	bl	92a2 <onoff_manager_init>
		if (err < 0) {
    4860:	2800      	cmp	r0, #0
    4862:	db01      	blt.n	4868 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4864:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4866:	2000      	movs	r0, #0
}
    4868:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    486a:	f06f 0004 	mvn.w	r0, #4
    486e:	e7fb      	b.n	4868 <clk_init+0x44>
    4870:	000048b1 	.word	0x000048b1
    4874:	0bad0000 	.word	0x0bad0000
    4878:	0000abb8 	.word	0x0000abb8

0000487c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4880:	230c      	movs	r3, #12
    4882:	4809      	ldr	r0, [pc, #36]	; (48a8 <clkstarted_handle.constprop.0+0x2c>)
    4884:	434b      	muls	r3, r1
    4886:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4888:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    488c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    488e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4890:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4892:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4894:	f005 f8f6 	bl	9a84 <set_on_state>
	if (callback) {
    4898:	b12d      	cbz	r5, 48a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    489a:	4632      	mov	r2, r6
    489c:	462b      	mov	r3, r5
    489e:	4803      	ldr	r0, [pc, #12]	; (48ac <clkstarted_handle.constprop.0+0x30>)
}
    48a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    48a4:	4718      	bx	r3
}
    48a6:	bd70      	pop	{r4, r5, r6, pc}
    48a8:	200016b8 	.word	0x200016b8
    48ac:	0000a7f0 	.word	0x0000a7f0

000048b0 <clock_event_handler>:
	switch (event) {
    48b0:	b110      	cbz	r0, 48b8 <clock_event_handler+0x8>
    48b2:	2801      	cmp	r0, #1
    48b4:	d004      	beq.n	48c0 <clock_event_handler+0x10>
    48b6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    48b8:	4b03      	ldr	r3, [pc, #12]	; (48c8 <clock_event_handler+0x18>)
    48ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48bc:	075b      	lsls	r3, r3, #29
    48be:	d101      	bne.n	48c4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    48c0:	f7ff bfdc 	b.w	487c <clkstarted_handle.constprop.0>
}
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
    48c8:	200016b8 	.word	0x200016b8

000048cc <generic_hfclk_start>:
{
    48cc:	b508      	push	{r3, lr}
	__asm__ volatile(
    48ce:	f04f 0320 	mov.w	r3, #32
    48d2:	f3ef 8111 	mrs	r1, BASEPRI
    48d6:	f383 8812 	msr	BASEPRI_MAX, r3
    48da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    48de:	4a12      	ldr	r2, [pc, #72]	; (4928 <generic_hfclk_start+0x5c>)
    48e0:	6813      	ldr	r3, [r2, #0]
    48e2:	f043 0002 	orr.w	r0, r3, #2
    48e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    48e8:	07da      	lsls	r2, r3, #31
    48ea:	d408      	bmi.n	48fe <generic_hfclk_start+0x32>
	__asm__ volatile(
    48ec:	f381 8811 	msr	BASEPRI, r1
    48f0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    48f4:	2001      	movs	r0, #1
}
    48f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    48fa:	f005 ba4f 	b.w	9d9c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    48fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4902:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4906:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    490a:	07d3      	lsls	r3, r2, #31
    490c:	d5ee      	bpl.n	48ec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    490e:	4807      	ldr	r0, [pc, #28]	; (492c <generic_hfclk_start+0x60>)
    4910:	f005 f8b8 	bl	9a84 <set_on_state>
    4914:	f381 8811 	msr	BASEPRI, r1
    4918:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    491c:	2000      	movs	r0, #0
}
    491e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4922:	f7ff bfab 	b.w	487c <clkstarted_handle.constprop.0>
    4926:	bf00      	nop
    4928:	20001708 	.word	0x20001708
    492c:	200016f8 	.word	0x200016f8

00004930 <api_blocking_start>:
{
    4930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4932:	2200      	movs	r2, #0
    4934:	2301      	movs	r3, #1
    4936:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    493a:	4a09      	ldr	r2, [pc, #36]	; (4960 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    493c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4940:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4942:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4946:	f005 f90c 	bl	9b62 <api_start>
	if (err < 0) {
    494a:	2800      	cmp	r0, #0
    494c:	db05      	blt.n	495a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    494e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4952:	2300      	movs	r3, #0
    4954:	4668      	mov	r0, sp
    4956:	f003 f9d1 	bl	7cfc <z_impl_k_sem_take>
}
    495a:	b005      	add	sp, #20
    495c:	f85d fb04 	ldr.w	pc, [sp], #4
    4960:	00009b8f 	.word	0x00009b8f

00004964 <generic_hfclk_stop>:
{
    4964:	b510      	push	{r4, lr}
	__asm__ volatile(
    4966:	f04f 0320 	mov.w	r3, #32
    496a:	f3ef 8411 	mrs	r4, BASEPRI
    496e:	f383 8812 	msr	BASEPRI_MAX, r3
    4972:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4976:	4a07      	ldr	r2, [pc, #28]	; (4994 <generic_hfclk_stop+0x30>)
    4978:	6813      	ldr	r3, [r2, #0]
    497a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    497e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    4980:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    4982:	d402      	bmi.n	498a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4984:	2001      	movs	r0, #1
    4986:	f005 fa45 	bl	9e14 <nrfx_clock_stop>
	__asm__ volatile(
    498a:	f384 8811 	msr	BASEPRI, r4
    498e:	f3bf 8f6f 	isb	sy
}
    4992:	bd10      	pop	{r4, pc}
    4994:	20001708 	.word	0x20001708

00004998 <z_nrf_clock_control_get_onoff>:
}
    4998:	4a02      	ldr	r2, [pc, #8]	; (49a4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    499a:	b2c3      	uxtb	r3, r0
}
    499c:	201c      	movs	r0, #28
    499e:	fb03 2000 	mla	r0, r3, r0, r2
    49a2:	4770      	bx	lr
    49a4:	200016b8 	.word	0x200016b8

000049a8 <z_nrf_clock_control_lf_on>:
{
    49a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    49ac:	4938      	ldr	r1, [pc, #224]	; (4a90 <z_nrf_clock_control_lf_on+0xe8>)
    49ae:	f3bf 8f5b 	dmb	ish
    49b2:	4607      	mov	r7, r0
    49b4:	2201      	movs	r2, #1
    49b6:	e851 3f00 	ldrex	r3, [r1]
    49ba:	e841 2000 	strex	r0, r2, [r1]
    49be:	2800      	cmp	r0, #0
    49c0:	d1f9      	bne.n	49b6 <z_nrf_clock_control_lf_on+0xe>
    49c2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    49c6:	b933      	cbnz	r3, 49d6 <z_nrf_clock_control_lf_on+0x2e>
    49c8:	4932      	ldr	r1, [pc, #200]	; (4a94 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    49ca:	4833      	ldr	r0, [pc, #204]	; (4a98 <z_nrf_clock_control_lf_on+0xf0>)
    49cc:	604b      	str	r3, [r1, #4]
    49ce:	60cb      	str	r3, [r1, #12]
    49d0:	608a      	str	r2, [r1, #8]
    49d2:	f004 fc79 	bl	92c8 <onoff_request>
	switch (start_mode) {
    49d6:	1e7b      	subs	r3, r7, #1
    49d8:	2b01      	cmp	r3, #1
    49da:	d82b      	bhi.n	4a34 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    49dc:	2f01      	cmp	r7, #1
    49de:	d107      	bne.n	49f0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    49e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49e4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    49e8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    49ec:	2b01      	cmp	r3, #1
    49ee:	d021      	beq.n	4a34 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    49f0:	f005 fbe9 	bl	a1c6 <k_is_in_isr>
    49f4:	4605      	mov	r5, r0
    49f6:	b9f8      	cbnz	r0, 4a38 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    49f8:	4b28      	ldr	r3, [pc, #160]	; (4a9c <z_nrf_clock_control_lf_on+0xf4>)
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	b1e3      	cbz	r3, 4a38 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    49fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a02:	2202      	movs	r2, #2
    4a04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4a08:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a0a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4aa0 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a0e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4a12:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a16:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4a1a:	03d2      	lsls	r2, r2, #15
    4a1c:	d516      	bpl.n	4a4c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4a1e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4a22:	2b01      	cmp	r3, #1
    4a24:	d001      	beq.n	4a2a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4a26:	2f01      	cmp	r7, #1
    4a28:	d110      	bne.n	4a4c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    4a2a:	b35d      	cbz	r5, 4a84 <z_nrf_clock_control_lf_on+0xdc>
    4a2c:	f386 8811 	msr	BASEPRI, r6
    4a30:	f3bf 8f6f 	isb	sy
}
    4a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4a38:	f04f 0320 	mov.w	r3, #32
    4a3c:	f3ef 8611 	mrs	r6, BASEPRI
    4a40:	f383 8812 	msr	BASEPRI_MAX, r3
    4a44:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a48:	2501      	movs	r5, #1
    4a4a:	e7de      	b.n	4a0a <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4a4c:	b1ad      	cbz	r5, 4a7a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4a4e:	4630      	mov	r0, r6
    4a50:	f7fe fcf2 	bl	3438 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4a54:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d1da      	bne.n	4a12 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a5c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4a60:	2a00      	cmp	r2, #0
    4a62:	d0d6      	beq.n	4a12 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a64:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4a68:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a6c:	2301      	movs	r3, #1
    4a6e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4a72:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a76:	60a3      	str	r3, [r4, #8]
}
    4a78:	e7cb      	b.n	4a12 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4a7a:	2100      	movs	r1, #0
    4a7c:	2021      	movs	r0, #33	; 0x21
    4a7e:	f003 fd7f 	bl	8580 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4a82:	e7e7      	b.n	4a54 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    4a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a88:	2202      	movs	r2, #2
    4a8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4a8e:	e7d1      	b.n	4a34 <z_nrf_clock_control_lf_on+0x8c>
    4a90:	200016b4 	.word	0x200016b4
    4a94:	200016a4 	.word	0x200016a4
    4a98:	200016d4 	.word	0x200016d4
    4a9c:	20001c27 	.word	0x20001c27
    4aa0:	e000e100 	.word	0xe000e100

00004aa4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    4aa4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    4aa6:	4807      	ldr	r0, [pc, #28]	; (4ac4 <uart_console_init+0x20>)
    4aa8:	f005 fb16 	bl	a0d8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4aac:	b138      	cbz	r0, 4abe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    4aae:	4806      	ldr	r0, [pc, #24]	; (4ac8 <uart_console_init+0x24>)
    4ab0:	f7ff f8a8 	bl	3c04 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4ab4:	4804      	ldr	r0, [pc, #16]	; (4ac8 <uart_console_init+0x24>)
    4ab6:	f7fc fcbf 	bl	1438 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4aba:	2000      	movs	r0, #0
}
    4abc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4abe:	f06f 0012 	mvn.w	r0, #18
    4ac2:	e7fb      	b.n	4abc <uart_console_init+0x18>
    4ac4:	0000a838 	.word	0x0000a838
    4ac8:	00004acd 	.word	0x00004acd

00004acc <console_out>:
	if ('\n' == c) {
    4acc:	280a      	cmp	r0, #10
{
    4ace:	b538      	push	{r3, r4, r5, lr}
    4ad0:	4d07      	ldr	r5, [pc, #28]	; (4af0 <console_out+0x24>)
    4ad2:	4604      	mov	r4, r0
	if ('\n' == c) {
    4ad4:	d104      	bne.n	4ae0 <console_out+0x14>
	api->poll_out(dev, out_char);
    4ad6:	68ab      	ldr	r3, [r5, #8]
    4ad8:	210d      	movs	r1, #13
    4ada:	685b      	ldr	r3, [r3, #4]
    4adc:	4628      	mov	r0, r5
    4ade:	4798      	blx	r3
    4ae0:	68ab      	ldr	r3, [r5, #8]
    4ae2:	4803      	ldr	r0, [pc, #12]	; (4af0 <console_out+0x24>)
    4ae4:	685b      	ldr	r3, [r3, #4]
    4ae6:	b2e1      	uxtb	r1, r4
    4ae8:	4798      	blx	r3
}
    4aea:	4620      	mov	r0, r4
    4aec:	bd38      	pop	{r3, r4, r5, pc}
    4aee:	bf00      	nop
    4af0:	0000a838 	.word	0x0000a838

00004af4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4af4:	b530      	push	{r4, r5, lr}
	return port->config;
    4af6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4af8:	7b05      	ldrb	r5, [r0, #12]
    4afa:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4afe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    4b02:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4b04:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4b08:	d105      	bne.n	4b16 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4b0a:	4620      	mov	r0, r4
    4b0c:	f001 f96a 	bl	5de4 <nrfx_gpiote_trigger_disable>

		return 0;
    4b10:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    4b12:	b005      	add	sp, #20
    4b14:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    4b16:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4b18:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4b1c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4b20:	d114      	bne.n	4b4c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4b26:	bf0c      	ite	eq
    4b28:	2304      	moveq	r3, #4
    4b2a:	2305      	movne	r3, #5
    4b2c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4b30:	2300      	movs	r3, #0
    4b32:	4619      	mov	r1, r3
    4b34:	aa02      	add	r2, sp, #8
    4b36:	4620      	mov	r0, r4
    4b38:	f000 ff92 	bl	5a60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4b3c:	4b1f      	ldr	r3, [pc, #124]	; (4bbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4b3e:	4298      	cmp	r0, r3
    4b40:	d139      	bne.n	4bb6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4b42:	2101      	movs	r1, #1
    4b44:	4620      	mov	r0, r4
    4b46:	f001 f905 	bl	5d54 <nrfx_gpiote_trigger_enable>
	return 0;
    4b4a:	e7e1      	b.n	4b10 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4b4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4b50:	d026      	beq.n	4ba0 <gpio_nrfx_pin_interrupt_configure+0xac>
    4b52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4b56:	bf14      	ite	ne
    4b58:	2301      	movne	r3, #1
    4b5a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4b5c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4b60:	6883      	ldr	r3, [r0, #8]
    4b62:	40cb      	lsrs	r3, r1
    4b64:	07d9      	lsls	r1, r3, #31
    4b66:	d4e3      	bmi.n	4b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
    4b68:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4b6c:	d1e0      	bne.n	4b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4b6e:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    4b70:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4b72:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    4b76:	4a12      	ldr	r2, [pc, #72]	; (4bc0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4b7c:	bf18      	it	ne
    4b7e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4b86:	07db      	lsls	r3, r3, #31
    4b88:	d4d2      	bmi.n	4b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4b8a:	f10d 0507 	add.w	r5, sp, #7
    4b8e:	4629      	mov	r1, r5
    4b90:	4620      	mov	r0, r4
    4b92:	f001 f88b 	bl	5cac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4b96:	4b0b      	ldr	r3, [pc, #44]	; (4bc4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4b98:	4298      	cmp	r0, r3
    4b9a:	d003      	beq.n	4ba4 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    4b9c:	9503      	str	r5, [sp, #12]
    4b9e:	e7c7      	b.n	4b30 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4ba0:	2303      	movs	r3, #3
    4ba2:	e7db      	b.n	4b5c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    4ba4:	4628      	mov	r0, r5
    4ba6:	f001 f8cf 	bl	5d48 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4baa:	4b04      	ldr	r3, [pc, #16]	; (4bbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4bac:	4298      	cmp	r0, r3
    4bae:	d0f5      	beq.n	4b9c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    4bb0:	f06f 000b 	mvn.w	r0, #11
    4bb4:	e7ad      	b.n	4b12 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4bb6:	f06f 0015 	mvn.w	r0, #21
    4bba:	e7aa      	b.n	4b12 <gpio_nrfx_pin_interrupt_configure+0x1e>
    4bbc:	0bad0000 	.word	0x0bad0000
    4bc0:	50000300 	.word	0x50000300
    4bc4:	0bad0004 	.word	0x0bad0004

00004bc8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4bc8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4bca:	f001 f8ad 	bl	5d28 <nrfx_gpiote_is_init>
    4bce:	4604      	mov	r4, r0
    4bd0:	b968      	cbnz	r0, 4bee <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4bd2:	f001 f881 	bl	5cd8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4bd6:	4b08      	ldr	r3, [pc, #32]	; (4bf8 <gpio_nrfx_init+0x30>)
    4bd8:	4298      	cmp	r0, r3
    4bda:	d10a      	bne.n	4bf2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4bdc:	4807      	ldr	r0, [pc, #28]	; (4bfc <gpio_nrfx_init+0x34>)
    4bde:	4621      	mov	r1, r4
    4be0:	f001 f85e 	bl	5ca0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4be4:	4622      	mov	r2, r4
    4be6:	2105      	movs	r1, #5
    4be8:	2006      	movs	r0, #6
    4bea:	f7fe fc61 	bl	34b0 <z_arm_irq_priority_set>
		return 0;
    4bee:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4bf0:	bd10      	pop	{r4, pc}
		return -EIO;
    4bf2:	f06f 0004 	mvn.w	r0, #4
    4bf6:	e7fb      	b.n	4bf0 <gpio_nrfx_init+0x28>
    4bf8:	0bad0000 	.word	0x0bad0000
    4bfc:	00004c01 	.word	0x00004c01

00004c00 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c00:	0942      	lsrs	r2, r0, #5
{
    4c02:	b570      	push	{r4, r5, r6, lr}
    4c04:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c06:	d002      	beq.n	4c0e <nrfx_gpio_handler+0xe>
    4c08:	2a01      	cmp	r2, #1
    4c0a:	d017      	beq.n	4c3c <nrfx_gpio_handler+0x3c>
}
    4c0c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c0e:	4e0d      	ldr	r6, [pc, #52]	; (4c44 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4c10:	6932      	ldr	r2, [r6, #16]
    4c12:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4c14:	2900      	cmp	r1, #0
    4c16:	d0f9      	beq.n	4c0c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    4c18:	f003 031f 	and.w	r3, r3, #31
    4c1c:	2501      	movs	r5, #1
	return node->next;
    4c1e:	680c      	ldr	r4, [r1, #0]
    4c20:	409d      	lsls	r5, r3
    4c22:	2900      	cmp	r1, #0
    4c24:	d0f2      	beq.n	4c0c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4c26:	688a      	ldr	r2, [r1, #8]
    4c28:	402a      	ands	r2, r5
    4c2a:	d002      	beq.n	4c32 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4c2c:	684b      	ldr	r3, [r1, #4]
    4c2e:	4630      	mov	r0, r6
    4c30:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4c32:	b12c      	cbz	r4, 4c40 <nrfx_gpio_handler+0x40>
    4c34:	6823      	ldr	r3, [r4, #0]
    4c36:	4621      	mov	r1, r4
    4c38:	461c      	mov	r4, r3
    4c3a:	e7f2      	b.n	4c22 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4c3c:	4e02      	ldr	r6, [pc, #8]	; (4c48 <nrfx_gpio_handler+0x48>)
    4c3e:	e7e7      	b.n	4c10 <nrfx_gpio_handler+0x10>
    4c40:	4623      	mov	r3, r4
    4c42:	e7f8      	b.n	4c36 <nrfx_gpio_handler+0x36>
    4c44:	0000a820 	.word	0x0000a820
    4c48:	0000a808 	.word	0x0000a808

00004c4c <gpio_nrfx_pin_configure>:
{
    4c4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4c50:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4c52:	7b3b      	ldrb	r3, [r7, #12]
    4c54:	f001 051f 	and.w	r5, r1, #31
    4c58:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4c5c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4c5e:	4628      	mov	r0, r5
    4c60:	f10d 0103 	add.w	r1, sp, #3
{
    4c64:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4c66:	f001 f821 	bl	5cac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4c6a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4c6e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4c70:	d10b      	bne.n	4c8a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4c72:	4628      	mov	r0, r5
    4c74:	f001 f8de 	bl	5e34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4c78:	4b3d      	ldr	r3, [pc, #244]	; (4d70 <gpio_nrfx_pin_configure+0x124>)
    4c7a:	4598      	cmp	r8, r3
    4c7c:	d103      	bne.n	4c86 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    4c7e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4c82:	f001 f85b 	bl	5d3c <nrfx_gpiote_channel_free>
		return 0;
    4c86:	2000      	movs	r0, #0
    4c88:	e00c      	b.n	4ca4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c8a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c8c:	4619      	mov	r1, r3
    4c8e:	aa02      	add	r2, sp, #8
    4c90:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c92:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c96:	f000 fee3 	bl	5a60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4c9a:	4b35      	ldr	r3, [pc, #212]	; (4d70 <gpio_nrfx_pin_configure+0x124>)
    4c9c:	4298      	cmp	r0, r3
    4c9e:	d004      	beq.n	4caa <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    4ca0:	f06f 0015 	mvn.w	r0, #21
}
    4ca4:	b004      	add	sp, #16
    4ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4caa:	4580      	cmp	r8, r0
    4cac:	d103      	bne.n	4cb6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    4cae:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4cb2:	f001 f843 	bl	5d3c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4cb6:	03a3      	lsls	r3, r4, #14
    4cb8:	d54b      	bpl.n	4d52 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4cba:	f240 3306 	movw	r3, #774	; 0x306
    4cbe:	4023      	ands	r3, r4
    4cc0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4cc4:	d019      	beq.n	4cfa <gpio_nrfx_pin_configure+0xae>
    4cc6:	d80c      	bhi.n	4ce2 <gpio_nrfx_pin_configure+0x96>
    4cc8:	2b06      	cmp	r3, #6
    4cca:	d017      	beq.n	4cfc <gpio_nrfx_pin_configure+0xb0>
    4ccc:	d804      	bhi.n	4cd8 <gpio_nrfx_pin_configure+0x8c>
    4cce:	b1ab      	cbz	r3, 4cfc <gpio_nrfx_pin_configure+0xb0>
    4cd0:	2b02      	cmp	r3, #2
    4cd2:	d1e5      	bne.n	4ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    4cd4:	2304      	movs	r3, #4
    4cd6:	e011      	b.n	4cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4cdc:	d1e0      	bne.n	4ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    4cde:	2301      	movs	r3, #1
    4ce0:	e00c      	b.n	4cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4ce2:	f240 2202 	movw	r2, #514	; 0x202
    4ce6:	4293      	cmp	r3, r2
    4ce8:	d027      	beq.n	4d3a <gpio_nrfx_pin_configure+0xee>
    4cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4cee:	d026      	beq.n	4d3e <gpio_nrfx_pin_configure+0xf2>
    4cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4cf4:	d1d4      	bne.n	4ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    4cf6:	2302      	movs	r3, #2
    4cf8:	e000      	b.n	4cfc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    4cfa:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4cfc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4d00:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4d04:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4d08:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4d0a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4d0e:	bf54      	ite	pl
    4d10:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4d14:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4d16:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4d18:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4d1c:	d511      	bpl.n	4d42 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4d1e:	687a      	ldr	r2, [r7, #4]
    4d20:	2301      	movs	r3, #1
    4d22:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4d24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4d28:	2200      	movs	r2, #0
    4d2a:	a901      	add	r1, sp, #4
    4d2c:	4628      	mov	r0, r5
    4d2e:	f000 ff45 	bl	5bbc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4d32:	4b0f      	ldr	r3, [pc, #60]	; (4d70 <gpio_nrfx_pin_configure+0x124>)
    4d34:	4298      	cmp	r0, r3
    4d36:	d0a6      	beq.n	4c86 <gpio_nrfx_pin_configure+0x3a>
    4d38:	e7b2      	b.n	4ca0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    4d3a:	2305      	movs	r3, #5
    4d3c:	e7de      	b.n	4cfc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d3e:	2303      	movs	r3, #3
    4d40:	e7dc      	b.n	4cfc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4d42:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4d44:	bf41      	itttt	mi
    4d46:	2301      	movmi	r3, #1
    4d48:	687a      	ldrmi	r2, [r7, #4]
    4d4a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4d4c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4d50:	e7ea      	b.n	4d28 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    4d52:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4d54:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4d58:	bf54      	ite	pl
    4d5a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4d5e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4d60:	461a      	mov	r2, r3
    4d62:	a901      	add	r1, sp, #4
    4d64:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4d66:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4d6a:	f000 fe79 	bl	5a60 <nrfx_gpiote_input_configure>
    4d6e:	e7e0      	b.n	4d32 <gpio_nrfx_pin_configure+0xe6>
    4d70:	0bad0000 	.word	0x0bad0000

00004d74 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    4d74:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4d76:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    4d78:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
    4d7a:	69e3      	ldr	r3, [r4, #28]
    4d7c:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    4d7e:	6a20      	ldr	r0, [r4, #32]
    4d80:	f004 ff8d 	bl	9c9e <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    4d84:	2800      	cmp	r0, #0
    4d86:	db0d      	blt.n	4da4 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    4d88:	462b      	mov	r3, r5
    4d8a:	4a08      	ldr	r2, [pc, #32]	; (4dac <i2c_nrfx_twim_init+0x38>)
    4d8c:	f104 0108 	add.w	r1, r4, #8
    4d90:	4620      	mov	r0, r4
    4d92:	f001 f9f1 	bl	6178 <nrfx_twim_init>
    4d96:	4b06      	ldr	r3, [pc, #24]	; (4db0 <i2c_nrfx_twim_init+0x3c>)
    4d98:	4298      	cmp	r0, r3
    4d9a:	d104      	bne.n	4da6 <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    4d9c:	4620      	mov	r0, r4
    4d9e:	f001 fa4d 	bl	623c <nrfx_twim_enable>
#endif

	return 0;
    4da2:	2000      	movs	r0, #0
}
    4da4:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4da6:	f06f 0004 	mvn.w	r0, #4
    4daa:	e7fb      	b.n	4da4 <i2c_nrfx_twim_init+0x30>
    4dac:	00004df1 	.word	0x00004df1
    4db0:	0bad0000 	.word	0x0bad0000

00004db4 <i2c_nrfx_twim_recover_bus>:
{
    4db4:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4db6:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    4db8:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    4dba:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    4dbe:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    4dc2:	4620      	mov	r0, r4
    4dc4:	f001 fa4a 	bl	625c <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    4dc8:	4631      	mov	r1, r6
    4dca:	4628      	mov	r0, r5
    4dcc:	f002 fc22 	bl	7614 <nrfx_twi_twim_bus_recover>
    4dd0:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    4dd2:	6a20      	ldr	r0, [r4, #32]
    4dd4:	f004 ff63 	bl	9c9e <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    4dd8:	4620      	mov	r0, r4
    4dda:	f001 fa2f 	bl	623c <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4dde:	4b03      	ldr	r3, [pc, #12]	; (4dec <i2c_nrfx_twim_recover_bus+0x38>)
    4de0:	429d      	cmp	r5, r3
}
    4de2:	bf14      	ite	ne
    4de4:	f06f 000f 	mvnne.w	r0, #15
    4de8:	2000      	moveq	r0, #0
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	0bad0000 	.word	0x0bad0000

00004df0 <event_handler>:
	switch (p_event->type) {
    4df0:	7803      	ldrb	r3, [r0, #0]
    4df2:	2b01      	cmp	r3, #1
    4df4:	d008      	beq.n	4e08 <event_handler+0x18>
    4df6:	2b02      	cmp	r3, #2
    4df8:	d008      	beq.n	4e0c <event_handler+0x1c>
    4dfa:	b94b      	cbnz	r3, 4e10 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    4dfc:	4b05      	ldr	r3, [pc, #20]	; (4e14 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    4dfe:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    4e00:	f101 0010 	add.w	r0, r1, #16
    4e04:	f002 bf5a 	b.w	7cbc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4e08:	4b03      	ldr	r3, [pc, #12]	; (4e18 <event_handler+0x28>)
    4e0a:	e7f8      	b.n	4dfe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4e0c:	4b03      	ldr	r3, [pc, #12]	; (4e1c <event_handler+0x2c>)
    4e0e:	e7f6      	b.n	4dfe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    4e10:	4b03      	ldr	r3, [pc, #12]	; (4e20 <event_handler+0x30>)
    4e12:	e7f4      	b.n	4dfe <event_handler+0xe>
    4e14:	0bad0000 	.word	0x0bad0000
    4e18:	0bae0001 	.word	0x0bae0001
    4e1c:	0bae0002 	.word	0x0bae0002
    4e20:	0bad0001 	.word	0x0bad0001

00004e24 <i2c_nrfx_twim_transfer>:
{
    4e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4e28:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    4e2c:	6906      	ldr	r6, [r0, #16]
{
    4e2e:	b08b      	sub	sp, #44	; 0x2c
    4e30:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    4e32:	2214      	movs	r2, #20
{
    4e34:	461d      	mov	r5, r3
    4e36:	4681      	mov	r9, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    4e38:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    4e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    4e40:	9302      	str	r3, [sp, #8]
{
    4e42:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    4e44:	eb0d 0002 	add.w	r0, sp, r2
    4e48:	2100      	movs	r1, #0
    4e4a:	f004 fd9d 	bl	9988 <memset>
    4e4e:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    4e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e5a:	4630      	mov	r0, r6
    4e5c:	f002 ff4e 	bl	7cfc <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    4e60:	f106 0310 	add.w	r3, r6, #16
    4e64:	9301      	str	r3, [sp, #4]
    4e66:	2200      	movs	r2, #0
    4e68:	2300      	movs	r3, #0
    4e6a:	f106 0010 	add.w	r0, r6, #16
    4e6e:	f002 ff45 	bl	7cfc <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    4e72:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    4e74:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    4e76:	455f      	cmp	r7, fp
    4e78:	d301      	bcc.n	4e7e <i2c_nrfx_twim_transfer+0x5a>
    4e7a:	2400      	movs	r4, #0
    4e7c:	e068      	b.n	4f50 <i2c_nrfx_twim_transfer+0x12c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    4e7e:	7a20      	ldrb	r0, [r4, #8]
    4e80:	0702      	lsls	r2, r0, #28
    4e82:	f100 808a 	bmi.w	4f9a <i2c_nrfx_twim_transfer+0x176>
		bool concat_next = ((i + 1) < num_msgs)
    4e86:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    4e88:	455f      	cmp	r7, fp
    4e8a:	d20a      	bcs.n	4ea2 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    4e8c:	0783      	lsls	r3, r0, #30
    4e8e:	d408      	bmi.n	4ea2 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    4e90:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    4e92:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    4e96:	f002 0201 	and.w	r2, r2, #1
    4e9a:	f003 0304 	and.w	r3, r3, #4
    4e9e:	431a      	orrs	r2, r3
    4ea0:	d01a      	beq.n	4ed8 <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
    4ea2:	b1dd      	cbz	r5, 4edc <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
    4ea4:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    4ea6:	6862      	ldr	r2, [r4, #4]
    4ea8:	f8dd c008 	ldr.w	ip, [sp, #8]
    4eac:	18a9      	adds	r1, r5, r2
    4eae:	4561      	cmp	r1, ip
    4eb0:	d876      	bhi.n	4fa0 <i2c_nrfx_twim_transfer+0x17c>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    4eb2:	07c1      	lsls	r1, r0, #31
    4eb4:	d406      	bmi.n	4ec4 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
    4eb6:	6821      	ldr	r1, [r4, #0]
    4eb8:	9303      	str	r3, [sp, #12]
    4eba:	eb08 0005 	add.w	r0, r8, r5
    4ebe:	f004 fd58 	bl	9972 <memcpy>
    4ec2:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
    4ec4:	6862      	ldr	r2, [r4, #4]
    4ec6:	442a      	add	r2, r5
    4ec8:	b295      	uxth	r5, r2
		if (concat_next) {
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d14f      	bne.n	4f6e <i2c_nrfx_twim_transfer+0x14a>
		if (msg_buf_used == 0) {
    4ece:	b14d      	cbz	r5, 4ee4 <i2c_nrfx_twim_transfer+0xc0>
			cur_xfer.p_primary_buf = msg_buf;
    4ed0:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
    4ed4:	462b      	mov	r3, r5
    4ed6:	e009      	b.n	4eec <i2c_nrfx_twim_transfer+0xc8>
		bool concat_next = ((i + 1) < num_msgs)
    4ed8:	2301      	movs	r3, #1
    4eda:	e7e4      	b.n	4ea6 <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4edc:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    4ede:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4ee2:	d51b      	bpl.n	4f1c <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
    4ee4:	6823      	ldr	r3, [r4, #0]
    4ee6:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    4ee8:	6863      	ldr	r3, [r4, #4]
    4eea:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    4eec:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    4eee:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    4ef0:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    4ef4:	f082 0202 	eor.w	r2, r2, #2
    4ef8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    4efc:	0152      	lsls	r2, r2, #5
    4efe:	a905      	add	r1, sp, #20
    4f00:	4650      	mov	r0, sl
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    4f02:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    4f06:	f001 f9c7 	bl	6298 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    4f0a:	4b28      	ldr	r3, [pc, #160]	; (4fac <i2c_nrfx_twim_transfer+0x188>)
    4f0c:	4298      	cmp	r0, r3
    4f0e:	d013      	beq.n	4f38 <i2c_nrfx_twim_transfer+0x114>
			if (res == NRFX_ERROR_BUSY) {
    4f10:	330b      	adds	r3, #11
    4f12:	4298      	cmp	r0, r3
    4f14:	d11a      	bne.n	4f4c <i2c_nrfx_twim_transfer+0x128>
				ret = -EBUSY;
    4f16:	f06f 040f 	mvn.w	r4, #15
    4f1a:	e019      	b.n	4f50 <i2c_nrfx_twim_transfer+0x12c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4f1c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4f24:	d0de      	beq.n	4ee4 <i2c_nrfx_twim_transfer+0xc0>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    4f26:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    4f2a:	4293      	cmp	r3, r2
    4f2c:	d33b      	bcc.n	4fa6 <i2c_nrfx_twim_transfer+0x182>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    4f2e:	4640      	mov	r0, r8
    4f30:	f004 fd1f 	bl	9972 <memcpy>
			msg_buf_used = msgs[i].len;
    4f34:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    4f36:	e7ca      	b.n	4ece <i2c_nrfx_twim_transfer+0xaa>
    4f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4f3c:	9801      	ldr	r0, [sp, #4]
    4f3e:	2300      	movs	r3, #0
    4f40:	f002 fedc 	bl	7cfc <z_impl_k_sem_take>
		if (ret != 0) {
    4f44:	b158      	cbz	r0, 4f5e <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
    4f46:	4648      	mov	r0, r9
    4f48:	f7ff ff34 	bl	4db4 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    4f4c:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
    4f50:	4630      	mov	r0, r6
    4f52:	f002 feb3 	bl	7cbc <z_impl_k_sem_give>
}
    4f56:	4620      	mov	r0, r4
    4f58:	b00b      	add	sp, #44	; 0x2c
    4f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
    4f5e:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    4f60:	4a12      	ldr	r2, [pc, #72]	; (4fac <i2c_nrfx_twim_transfer+0x188>)
    4f62:	4293      	cmp	r3, r2
    4f64:	d1f2      	bne.n	4f4c <i2c_nrfx_twim_transfer+0x128>
		if ((msgs[i].flags & I2C_MSG_READ)
    4f66:	7a23      	ldrb	r3, [r4, #8]
    4f68:	07db      	lsls	r3, r3, #31
    4f6a:	d402      	bmi.n	4f72 <i2c_nrfx_twim_transfer+0x14e>
		msg_buf_used = 0;
    4f6c:	2500      	movs	r5, #0
    4f6e:	340c      	adds	r4, #12
    4f70:	e781      	b.n	4e76 <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
    4f72:	9b08      	ldr	r3, [sp, #32]
    4f74:	4598      	cmp	r8, r3
    4f76:	d1f9      	bne.n	4f6c <i2c_nrfx_twim_transfer+0x148>
    4f78:	4623      	mov	r3, r4
    4f7a:	e008      	b.n	4f8e <i2c_nrfx_twim_transfer+0x16a>
				msg_buf_used -= msgs[j].len;
    4f7c:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    4f7e:	68d8      	ldr	r0, [r3, #12]
    4f80:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
    4f82:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    4f84:	fa18 f181 	uxtah	r1, r8, r1
    4f88:	f004 fcf3 	bl	9972 <memcpy>
				j--;
    4f8c:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
    4f8e:	685a      	ldr	r2, [r3, #4]
    4f90:	4295      	cmp	r5, r2
    4f92:	f1a3 030c 	sub.w	r3, r3, #12
    4f96:	d2f1      	bcs.n	4f7c <i2c_nrfx_twim_transfer+0x158>
    4f98:	e7e8      	b.n	4f6c <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
    4f9a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4f9e:	e7d7      	b.n	4f50 <i2c_nrfx_twim_transfer+0x12c>
				ret = -ENOSPC;
    4fa0:	f06f 041b 	mvn.w	r4, #27
    4fa4:	e7d4      	b.n	4f50 <i2c_nrfx_twim_transfer+0x12c>
				ret = -EINVAL;
    4fa6:	f06f 0415 	mvn.w	r4, #21
    4faa:	e7d1      	b.n	4f50 <i2c_nrfx_twim_transfer+0x12c>
    4fac:	0bad0000 	.word	0x0bad0000

00004fb0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    4fb2:	4e1c      	ldr	r6, [pc, #112]	; (5024 <pinctrl_configure_pins+0x74>)
    4fb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4fb8:	4281      	cmp	r1, r0
    4fba:	d101      	bne.n	4fc0 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4fbc:	2000      	movs	r0, #0
    4fbe:	e010      	b.n	4fe2 <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4fc0:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4fc2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    4fc6:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4fc8:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    4fcc:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    4fd0:	bf08      	it	eq
    4fd2:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    4fd6:	2b0b      	cmp	r3, #11
    4fd8:	d004      	beq.n	4fe4 <pinctrl_configure_pins+0x34>
    4fda:	2b0c      	cmp	r3, #12
    4fdc:	d01f      	beq.n	501e <pinctrl_configure_pins+0x6e>
    4fde:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4fe4:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    4fe8:	b905      	cbnz	r5, 4fec <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    4fea:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4fec:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    4ff0:	f004 071f 	and.w	r7, r4, #31
    4ff4:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    4ff8:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    4ffa:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    4ffe:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5000:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    5004:	bf0c      	ite	eq
    5006:	46b4      	moveq	ip, r6
    5008:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    500c:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    5010:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5014:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5018:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    501c:	e7cc      	b.n	4fb8 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    501e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    5022:	e7e1      	b.n	4fe8 <pinctrl_configure_pins+0x38>
    5024:	50000300 	.word	0x50000300

00005028 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5028:	4b01      	ldr	r3, [pc, #4]	; (5030 <hfclk_on_callback+0x8>)
    502a:	2201      	movs	r2, #1
    502c:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    502e:	4770      	bx	lr
    5030:	4000c000 	.word	0x4000c000

00005034 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5034:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    5036:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5038:	d10b      	bne.n	5052 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    503c:	4906      	ldr	r1, [pc, #24]	; (5058 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    503e:	4807      	ldr	r0, [pc, #28]	; (505c <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5040:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    5042:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    5046:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    504a:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    504c:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    504e:	2000      	movs	r0, #0
    5050:	4770      	bx	lr
		return -ENOTSUP;
    5052:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5056:	4770      	bx	lr
    5058:	0003d090 	.word	0x0003d090
    505c:	000f4240 	.word	0x000f4240

00005060 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5060:	4b04      	ldr	r3, [pc, #16]	; (5074 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    5062:	6900      	ldr	r0, [r0, #16]
    5064:	2200      	movs	r2, #0
    5066:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    506a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    506e:	f002 be25 	b.w	7cbc <z_impl_k_sem_give>
    5072:	bf00      	nop
    5074:	4000c000 	.word	0x4000c000

00005078 <temp_nrf5_sample_fetch>:
{
    5078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    507a:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    507c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    507e:	b363      	cbz	r3, 50da <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    5080:	2939      	cmp	r1, #57	; 0x39
    5082:	d001      	beq.n	5088 <temp_nrf5_sample_fetch+0x10>
    5084:	290c      	cmp	r1, #12
    5086:	d12b      	bne.n	50e0 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    5088:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    508c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5094:	4630      	mov	r0, r6
    5096:	f002 fd27 	bl	7ae8 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    509a:	4b13      	ldr	r3, [pc, #76]	; (50e8 <temp_nrf5_sample_fetch+0x70>)
    509c:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    509e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    50a0:	2303      	movs	r3, #3
    50a2:	2400      	movs	r4, #0
    50a4:	4669      	mov	r1, sp
    50a6:	9403      	str	r4, [sp, #12]
    50a8:	9302      	str	r3, [sp, #8]
    50aa:	f004 f90d 	bl	92c8 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    50ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50b6:	4628      	mov	r0, r5
    50b8:	f002 fe20 	bl	7cfc <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    50bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    50be:	f004 f95b 	bl	9378 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    50c2:	4b0a      	ldr	r3, [pc, #40]	; (50ec <temp_nrf5_sample_fetch+0x74>)
    50c4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    50c8:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    50ca:	2201      	movs	r2, #1
    50cc:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    50ce:	4630      	mov	r0, r6
    50d0:	f002 fd84 	bl	7bdc <z_impl_k_mutex_unlock>
	return 0;
    50d4:	4620      	mov	r0, r4
}
    50d6:	b004      	add	sp, #16
    50d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    50da:	f06f 000a 	mvn.w	r0, #10
    50de:	e7fa      	b.n	50d6 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    50e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    50e4:	e7f7      	b.n	50d6 <temp_nrf5_sample_fetch+0x5e>
    50e6:	bf00      	nop
    50e8:	00005029 	.word	0x00005029
    50ec:	4000c000 	.word	0x4000c000

000050f0 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    50f0:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    50f2:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    50f4:	2000      	movs	r0, #0
    50f6:	f7ff fc4f 	bl	4998 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    50fa:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    50fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5100:	2100      	movs	r1, #0
    5102:	4620      	mov	r0, r4
    5104:	f005 f8f9 	bl	a2fa <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    5108:	f104 0010 	add.w	r0, r4, #16
    510c:	f005 f875 	bl	a1fa <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    5110:	2200      	movs	r2, #0
    5112:	2101      	movs	r1, #1
    5114:	200c      	movs	r0, #12
    5116:	f7fe f9cb 	bl	34b0 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    511a:	200c      	movs	r0, #12
    511c:	f7fe f998 	bl	3450 <arch_irq_enable>
    p_reg->INTENSET = mask;
    5120:	4b02      	ldr	r3, [pc, #8]	; (512c <temp_nrf5_init+0x3c>)
    5122:	2201      	movs	r2, #1
    5124:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    5128:	2000      	movs	r0, #0
    512a:	bd10      	pop	{r4, pc}
    512c:	4000c000 	.word	0x4000c000

00005130 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5130:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5132:	2301      	movs	r3, #1
    5134:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5136:	4a0e      	ldr	r2, [pc, #56]	; (5170 <compare_int_lock+0x40>)
    5138:	f3bf 8f5b 	dmb	ish
    513c:	43dc      	mvns	r4, r3
    513e:	e852 1f00 	ldrex	r1, [r2]
    5142:	ea01 0504 	and.w	r5, r1, r4
    5146:	e842 5600 	strex	r6, r5, [r2]
    514a:	2e00      	cmp	r6, #0
    514c:	d1f7      	bne.n	513e <compare_int_lock+0xe>
    514e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5156:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5158:	4806      	ldr	r0, [pc, #24]	; (5174 <compare_int_lock+0x44>)
    515a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    515e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5162:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5166:	420b      	tst	r3, r1
}
    5168:	bf14      	ite	ne
    516a:	2001      	movne	r0, #1
    516c:	2000      	moveq	r0, #0
    516e:	bd70      	pop	{r4, r5, r6, pc}
    5170:	20001754 	.word	0x20001754
    5174:	40011000 	.word	0x40011000

00005178 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    5178:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    517a:	490e      	ldr	r1, [pc, #56]	; (51b4 <sys_clock_timeout_handler+0x3c>)
    517c:	e9d1 3400 	ldrd	r3, r4, [r1]
    5180:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    5182:	18c3      	adds	r3, r0, r3
    5184:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    5188:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    518c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5190:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5198:	d209      	bcs.n	51ae <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    519a:	4b07      	ldr	r3, [pc, #28]	; (51b8 <sys_clock_timeout_handler+0x40>)
    519c:	681b      	ldr	r3, [r3, #0]
    519e:	0a1a      	lsrs	r2, r3, #8
    51a0:	061b      	lsls	r3, r3, #24
    51a2:	199c      	adds	r4, r3, r6
    51a4:	4b05      	ldr	r3, [pc, #20]	; (51bc <sys_clock_timeout_handler+0x44>)
    51a6:	f142 0500 	adc.w	r5, r2, #0
    51aa:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    51ae:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    51b0:	f003 bb68 	b.w	8884 <sys_clock_announce>
    51b4:	20000528 	.word	0x20000528
    51b8:	20001758 	.word	0x20001758
    51bc:	20000530 	.word	0x20000530

000051c0 <compare_int_unlock>:
	if (key) {
    51c0:	b311      	cbz	r1, 5208 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    51c2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    51c6:	2301      	movs	r3, #1
    51c8:	4a10      	ldr	r2, [pc, #64]	; (520c <compare_int_unlock+0x4c>)
    51ca:	4083      	lsls	r3, r0
    51cc:	e852 cf00 	ldrex	ip, [r2]
    51d0:	ea4c 0c03 	orr.w	ip, ip, r3
    51d4:	e842 c100 	strex	r1, ip, [r2]
    51d8:	2900      	cmp	r1, #0
    51da:	d1f7      	bne.n	51cc <compare_int_unlock+0xc>
    51dc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    51e0:	4a0b      	ldr	r2, [pc, #44]	; (5210 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    51e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    51e6:	4083      	lsls	r3, r0
    51e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    51ec:	4b09      	ldr	r3, [pc, #36]	; (5214 <compare_int_unlock+0x54>)
    51ee:	f3bf 8f5b 	dmb	ish
    51f2:	681b      	ldr	r3, [r3, #0]
    51f4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    51f8:	40c3      	lsrs	r3, r0
    51fa:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51fc:	bf42      	ittt	mi
    51fe:	4b06      	ldrmi	r3, [pc, #24]	; (5218 <compare_int_unlock+0x58>)
    5200:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5204:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5208:	4770      	bx	lr
    520a:	bf00      	nop
    520c:	20001754 	.word	0x20001754
    5210:	40011000 	.word	0x40011000
    5214:	20001750 	.word	0x20001750
    5218:	e000e100 	.word	0xe000e100

0000521c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    521c:	4b0d      	ldr	r3, [pc, #52]	; (5254 <z_nrf_rtc_timer_read+0x38>)
    521e:	6818      	ldr	r0, [r3, #0]
    5220:	0a01      	lsrs	r1, r0, #8
    5222:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5224:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5228:	4b0b      	ldr	r3, [pc, #44]	; (5258 <z_nrf_rtc_timer_read+0x3c>)
    522a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    522e:	1818      	adds	r0, r3, r0
    5230:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5238:	d20a      	bcs.n	5250 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    523a:	4b08      	ldr	r3, [pc, #32]	; (525c <z_nrf_rtc_timer_read+0x40>)
    523c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5240:	4290      	cmp	r0, r2
    5242:	eb71 0303 	sbcs.w	r3, r1, r3
    5246:	d203      	bcs.n	5250 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5248:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    524c:	f141 0100 	adc.w	r1, r1, #0
}
    5250:	4770      	bx	lr
    5252:	bf00      	nop
    5254:	20001758 	.word	0x20001758
    5258:	40011000 	.word	0x40011000
    525c:	20000530 	.word	0x20000530

00005260 <compare_set>:
{
    5260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5264:	4616      	mov	r6, r2
    5266:	461f      	mov	r7, r3
    5268:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    526a:	f7ff ff61 	bl	5130 <compare_int_lock>
    526e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5270:	f7ff ffd4 	bl	521c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5274:	42b0      	cmp	r0, r6
    5276:	eb71 0307 	sbcs.w	r3, r1, r7
    527a:	d251      	bcs.n	5320 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    527c:	4b3a      	ldr	r3, [pc, #232]	; (5368 <compare_set+0x108>)
    527e:	1a30      	subs	r0, r6, r0
    5280:	eb67 0101 	sbc.w	r1, r7, r1
    5284:	4298      	cmp	r0, r3
    5286:	f171 0100 	sbcs.w	r1, r1, #0
    528a:	d26a      	bcs.n	5362 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    528c:	4b37      	ldr	r3, [pc, #220]	; (536c <compare_set+0x10c>)
    528e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5292:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5296:	429f      	cmp	r7, r3
    5298:	bf08      	it	eq
    529a:	4296      	cmpeq	r6, r2
    529c:	d04e      	beq.n	533c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    529e:	4934      	ldr	r1, [pc, #208]	; (5370 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52a0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    52a4:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    52a8:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    52ac:	00ad      	lsls	r5, r5, #2
    52ae:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    52b2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52b4:	b2ad      	uxth	r5, r5
    52b6:	f004 fd53 	bl	9d60 <event_clear>
	return absolute_time & COUNTER_MAX;
    52ba:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    52be:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    52c2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    52c6:	4a2b      	ldr	r2, [pc, #172]	; (5374 <compare_set+0x114>)
    52c8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52ca:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    52ce:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    52d0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    52d4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    52d6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    52da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    52de:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    52e2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    52e6:	f06f 0002 	mvn.w	r0, #2
    52ea:	eba0 0008 	sub.w	r0, r0, r8
    52ee:	4460      	add	r0, ip
    52f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    52f4:	4290      	cmp	r0, r2
    52f6:	d921      	bls.n	533c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52f8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    52fa:	b160      	cbz	r0, 5316 <compare_set+0xb6>
     return p_reg->COUNTER;
    52fc:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5300:	eba8 000b 	sub.w	r0, r8, fp
    5304:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    5308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    530c:	d916      	bls.n	533c <compare_set+0xdc>
					event_clear(chan);
    530e:	4620      	mov	r0, r4
    5310:	f004 fd26 	bl	9d60 <event_clear>
    5314:	4a17      	ldr	r2, [pc, #92]	; (5374 <compare_set+0x114>)
			cc_val = now + cc_inc;
    5316:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    531a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    531e:	e7d9      	b.n	52d4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5320:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5322:	4a15      	ldr	r2, [pc, #84]	; (5378 <compare_set+0x118>)
    5324:	f3bf 8f5b 	dmb	ish
    5328:	40a3      	lsls	r3, r4
    532a:	e852 0f00 	ldrex	r0, [r2]
    532e:	4318      	orrs	r0, r3
    5330:	e842 0100 	strex	r1, r0, [r2]
    5334:	2900      	cmp	r1, #0
    5336:	d1f8      	bne.n	532a <compare_set+0xca>
    5338:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    533c:	490b      	ldr	r1, [pc, #44]	; (536c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    533e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5340:	0123      	lsls	r3, r4, #4
    5342:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    5346:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    534a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    534c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    534e:	6053      	str	r3, [r2, #4]
	return ret;
    5350:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    5352:	4620      	mov	r0, r4
    5354:	9900      	ldr	r1, [sp, #0]
    5356:	f7ff ff33 	bl	51c0 <compare_int_unlock>
}
    535a:	4628      	mov	r0, r5
    535c:	b003      	add	sp, #12
    535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    5362:	f06f 0515 	mvn.w	r5, #21
    5366:	e7f4      	b.n	5352 <compare_set+0xf2>
    5368:	00800001 	.word	0x00800001
    536c:	20000518 	.word	0x20000518
    5370:	40011000 	.word	0x40011000
    5374:	007ffffd 	.word	0x007ffffd
    5378:	20001750 	.word	0x20001750

0000537c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    537c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    537e:	4c1b      	ldr	r4, [pc, #108]	; (53ec <sys_clock_driver_init+0x70>)
    5380:	4b1b      	ldr	r3, [pc, #108]	; (53f0 <sys_clock_driver_init+0x74>)
    5382:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    5386:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    538a:	4b1a      	ldr	r3, [pc, #104]	; (53f4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    538c:	2500      	movs	r5, #0
    538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5396:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    539a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    539e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    53a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    53a6:	4b14      	ldr	r3, [pc, #80]	; (53f8 <sys_clock_driver_init+0x7c>)
    53a8:	2602      	movs	r6, #2
    53aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    53ae:	2101      	movs	r1, #1
    53b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    53b4:	2011      	movs	r0, #17
    53b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    53ba:	462a      	mov	r2, r5
    53bc:	f7fe f878 	bl	34b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    53c0:	2011      	movs	r0, #17
    53c2:	f7fe f845 	bl	3450 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    53c6:	4a0d      	ldr	r2, [pc, #52]	; (53fc <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    53c8:	2301      	movs	r3, #1
    53ca:	60a3      	str	r3, [r4, #8]
    53cc:	6023      	str	r3, [r4, #0]
    53ce:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    53d0:	4b0b      	ldr	r3, [pc, #44]	; (5400 <sys_clock_driver_init+0x84>)
    53d2:	4a0c      	ldr	r2, [pc, #48]	; (5404 <sys_clock_driver_init+0x88>)
    53d4:	9300      	str	r3, [sp, #0]
    53d6:	9501      	str	r5, [sp, #4]
    53d8:	2300      	movs	r3, #0
    53da:	4628      	mov	r0, r5
    53dc:	f7ff ff40 	bl	5260 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    53e0:	4630      	mov	r0, r6
    53e2:	f7ff fae1 	bl	49a8 <z_nrf_clock_control_lf_on>

	return 0;
}
    53e6:	4628      	mov	r0, r5
    53e8:	b002      	add	sp, #8
    53ea:	bd70      	pop	{r4, r5, r6, pc}
    53ec:	40011000 	.word	0x40011000
    53f0:	000f0003 	.word	0x000f0003
    53f4:	20000518 	.word	0x20000518
    53f8:	e000e100 	.word	0xe000e100
    53fc:	20001754 	.word	0x20001754
    5400:	00005179 	.word	0x00005179
    5404:	007fffff 	.word	0x007fffff

00005408 <rtc_nrf_isr>:
{
    5408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    540c:	4c2f      	ldr	r4, [pc, #188]	; (54cc <rtc_nrf_isr+0xc4>)
    540e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5412:	0799      	lsls	r1, r3, #30
    5414:	d50b      	bpl.n	542e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5416:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    541a:	b143      	cbz	r3, 542e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    541c:	4a2c      	ldr	r2, [pc, #176]	; (54d0 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    541e:	2300      	movs	r3, #0
    5420:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5424:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5428:	6813      	ldr	r3, [r2, #0]
    542a:	3301      	adds	r3, #1
    542c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    542e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5432:	03da      	lsls	r2, r3, #15
    5434:	d52a      	bpl.n	548c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5436:	f3bf 8f5b 	dmb	ish
    543a:	4b26      	ldr	r3, [pc, #152]	; (54d4 <rtc_nrf_isr+0xcc>)
    543c:	e853 2f00 	ldrex	r2, [r3]
    5440:	f022 0101 	bic.w	r1, r2, #1
    5444:	e843 1000 	strex	r0, r1, [r3]
    5448:	2800      	cmp	r0, #0
    544a:	d1f7      	bne.n	543c <rtc_nrf_isr+0x34>
    544c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5450:	07d3      	lsls	r3, r2, #31
    5452:	d402      	bmi.n	545a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5454:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5458:	b1c3      	cbz	r3, 548c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    545a:	2500      	movs	r5, #0
    545c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5460:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    5464:	f7ff feda 	bl	521c <z_nrf_rtc_timer_read>
    5468:	f04f 0320 	mov.w	r3, #32
    546c:	f3ef 8211 	mrs	r2, BASEPRI
    5470:	f383 8812 	msr	BASEPRI_MAX, r3
    5474:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5478:	4b17      	ldr	r3, [pc, #92]	; (54d8 <rtc_nrf_isr+0xd0>)
    547a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    547e:	42b0      	cmp	r0, r6
    5480:	41b9      	sbcs	r1, r7
    5482:	d206      	bcs.n	5492 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    5484:	f382 8811 	msr	BASEPRI, r2
    5488:	f3bf 8f6f 	isb	sy
}
    548c:	b003      	add	sp, #12
    548e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5492:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5496:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    549a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    549e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    54a2:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    54a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    54a8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    54ac:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    54b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    54b4:	f382 8811 	msr	BASEPRI, r2
    54b8:	f3bf 8f6f 	isb	sy
		if (handler) {
    54bc:	2900      	cmp	r1, #0
    54be:	d0e5      	beq.n	548c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    54c0:	9000      	str	r0, [sp, #0]
    54c2:	4632      	mov	r2, r6
    54c4:	463b      	mov	r3, r7
    54c6:	4628      	mov	r0, r5
    54c8:	4788      	blx	r1
    54ca:	e7df      	b.n	548c <rtc_nrf_isr+0x84>
    54cc:	40011000 	.word	0x40011000
    54d0:	20001758 	.word	0x20001758
    54d4:	20001750 	.word	0x20001750
    54d8:	20000518 	.word	0x20000518

000054dc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    54dc:	1c43      	adds	r3, r0, #1
{
    54de:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    54e0:	d022      	beq.n	5528 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    54e2:	2801      	cmp	r0, #1
    54e4:	dd22      	ble.n	552c <sys_clock_set_timeout+0x50>
    54e6:	4a12      	ldr	r2, [pc, #72]	; (5530 <sys_clock_set_timeout+0x54>)
    54e8:	4b12      	ldr	r3, [pc, #72]	; (5534 <sys_clock_set_timeout+0x58>)
    54ea:	4290      	cmp	r0, r2
    54ec:	bfd4      	ite	le
    54ee:	4604      	movle	r4, r0
    54f0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    54f2:	f7ff fe93 	bl	521c <z_nrf_rtc_timer_read>
    54f6:	4b10      	ldr	r3, [pc, #64]	; (5538 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    54f8:	490e      	ldr	r1, [pc, #56]	; (5534 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    54fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    54fe:	1a80      	subs	r0, r0, r2
		cyc = 0;
    5500:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5504:	bf28      	it	cs
    5506:	2400      	movcs	r4, #0
	cyc += unannounced;
    5508:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    550a:	428c      	cmp	r4, r1
    550c:	bf28      	it	cs
    550e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    5510:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5512:	490a      	ldr	r1, [pc, #40]	; (553c <sys_clock_set_timeout+0x60>)
    5514:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    5516:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    551a:	9001      	str	r0, [sp, #4]
    551c:	f143 0300 	adc.w	r3, r3, #0
    5520:	f7ff fe9e 	bl	5260 <compare_set>
}
    5524:	b002      	add	sp, #8
    5526:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    5528:	4c02      	ldr	r4, [pc, #8]	; (5534 <sys_clock_set_timeout+0x58>)
    552a:	e7e2      	b.n	54f2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    552c:	2401      	movs	r4, #1
    552e:	e7e0      	b.n	54f2 <sys_clock_set_timeout+0x16>
    5530:	007ffffe 	.word	0x007ffffe
    5534:	007fffff 	.word	0x007fffff
    5538:	20000528 	.word	0x20000528
    553c:	00005179 	.word	0x00005179

00005540 <sys_clock_elapsed>:
{
    5540:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5542:	f7ff fe6b 	bl	521c <z_nrf_rtc_timer_read>
    5546:	4b02      	ldr	r3, [pc, #8]	; (5550 <sys_clock_elapsed+0x10>)
    5548:	681b      	ldr	r3, [r3, #0]
}
    554a:	1ac0      	subs	r0, r0, r3
    554c:	bd08      	pop	{r3, pc}
    554e:	bf00      	nop
    5550:	20000528 	.word	0x20000528

00005554 <sys_clock_disable>:
{
    5554:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5556:	4c08      	ldr	r4, [pc, #32]	; (5578 <sys_clock_disable+0x24>)
    5558:	2301      	movs	r3, #1
    555a:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    555c:	2011      	movs	r0, #17
    555e:	f7fd ff85 	bl	346c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    5562:	4b06      	ldr	r3, [pc, #24]	; (557c <sys_clock_disable+0x28>)
    5564:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    5568:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    556c:	4b04      	ldr	r3, [pc, #16]	; (5580 <sys_clock_disable+0x2c>)
    556e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5572:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    5576:	bd10      	pop	{r4, pc}
    5578:	40011000 	.word	0x40011000
    557c:	000f0003 	.word	0x000f0003
    5580:	e000e100 	.word	0xe000e100

00005584 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5588:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    558c:	2a08      	cmp	r2, #8
    558e:	d106      	bne.n	559e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5590:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    5594:	2b05      	cmp	r3, #5
    5596:	d802      	bhi.n	559e <nrf52_errata_103+0x1a>
    5598:	4a02      	ldr	r2, [pc, #8]	; (55a4 <nrf52_errata_103+0x20>)
    559a:	5cd0      	ldrb	r0, [r2, r3]
    559c:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    559e:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    55a0:	4770      	bx	lr
    55a2:	bf00      	nop
    55a4:	0000afb4 	.word	0x0000afb4

000055a8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    55a8:	4a02      	ldr	r2, [pc, #8]	; (55b4 <nvmc_wait+0xc>)
    55aa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    55ae:	2b00      	cmp	r3, #0
    55b0:	d0fb      	beq.n	55aa <nvmc_wait+0x2>
}
    55b2:	4770      	bx	lr
    55b4:	4001e000 	.word	0x4001e000

000055b8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    55b8:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    55ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    55be:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    55c2:	2a08      	cmp	r2, #8
    55c4:	d14e      	bne.n	5664 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    55c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    55ca:	2100      	movs	r1, #0
    55cc:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    55d0:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    55d4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    55d8:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    55dc:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    55e0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    55e4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    55e8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    55ec:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    55f0:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    55f4:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    55f8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    55fc:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5600:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5604:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5608:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    560c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5610:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5614:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    5618:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    561c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    5620:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5624:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    5628:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    562c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    5630:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5634:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    5638:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    563c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    5640:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5644:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    5648:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    564c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    5650:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5654:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    5658:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    565c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    5660:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5664:	f7ff ff8e 	bl	5584 <nrf52_errata_103>
    5668:	b118      	cbz	r0, 5672 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    566a:	4b3a      	ldr	r3, [pc, #232]	; (5754 <SystemInit+0x19c>)
    566c:	4a3a      	ldr	r2, [pc, #232]	; (5758 <SystemInit+0x1a0>)
    566e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5672:	f7ff ff87 	bl	5584 <nrf52_errata_103>
    5676:	b118      	cbz	r0, 5680 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5678:	4b38      	ldr	r3, [pc, #224]	; (575c <SystemInit+0x1a4>)
    567a:	22fb      	movs	r2, #251	; 0xfb
    567c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5680:	f7ff ff80 	bl	5584 <nrf52_errata_103>
    5684:	b170      	cbz	r0, 56a4 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    568a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    568e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    5692:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5696:	f022 020f 	bic.w	r2, r2, #15
    569a:	f003 030f 	and.w	r3, r3, #15
    569e:	4313      	orrs	r3, r2
    56a0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    56a4:	f7ff ff6e 	bl	5584 <nrf52_errata_103>
    56a8:	b120      	cbz	r0, 56b4 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    56aa:	4b2d      	ldr	r3, [pc, #180]	; (5760 <SystemInit+0x1a8>)
    56ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    56b0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    56b8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    56bc:	2b08      	cmp	r3, #8
    56be:	d11a      	bne.n	56f6 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    56c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    56c8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    56ca:	bf44      	itt	mi
    56cc:	f06f 0201 	mvnmi.w	r2, #1
    56d0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    56d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    56d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    56dc:	2b05      	cmp	r3, #5
    56de:	d802      	bhi.n	56e6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    56e0:	4a20      	ldr	r2, [pc, #128]	; (5764 <SystemInit+0x1ac>)
    56e2:	5cd3      	ldrb	r3, [r2, r3]
    56e4:	b13b      	cbz	r3, 56f6 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    56e6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    56ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    56ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56f2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    56f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    56fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    56fe:	2a00      	cmp	r2, #0
    5700:	db03      	blt.n	570a <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5702:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5706:	2b00      	cmp	r3, #0
    5708:	da22      	bge.n	5750 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    570a:	4917      	ldr	r1, [pc, #92]	; (5768 <SystemInit+0x1b0>)
    570c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    570e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5712:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5716:	2412      	movs	r4, #18
    nvmc_wait();
    5718:	f7ff ff46 	bl	55a8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    571c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5720:	f7ff ff42 	bl	55a8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5724:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5728:	f7ff ff3e 	bl	55a8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    572c:	2300      	movs	r3, #0
    572e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5732:	f7ff ff39 	bl	55a8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5736:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    573a:	490c      	ldr	r1, [pc, #48]	; (576c <SystemInit+0x1b4>)
    573c:	4b0c      	ldr	r3, [pc, #48]	; (5770 <SystemInit+0x1b8>)
    573e:	68ca      	ldr	r2, [r1, #12]
    5740:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5744:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5746:	60cb      	str	r3, [r1, #12]
    5748:	f3bf 8f4f 	dsb	sy
    __NOP();
    574c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    574e:	e7fd      	b.n	574c <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    5750:	bd10      	pop	{r4, pc}
    5752:	bf00      	nop
    5754:	40005000 	.word	0x40005000
    5758:	00038148 	.word	0x00038148
    575c:	4000f000 	.word	0x4000f000
    5760:	40029000 	.word	0x40029000
    5764:	0000afae 	.word	0x0000afae
    5768:	4001e000 	.word	0x4001e000
    576c:	e000ed00 	.word	0xe000ed00
    5770:	05fa0004 	.word	0x05fa0004

00005774 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5774:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5776:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5778:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    577a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    577e:	fab2 f382 	clz	r3, r2
    5782:	f1c3 031f 	rsb	r3, r3, #31
    5786:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5788:	fa05 f403 	lsl.w	r4, r5, r3
    578c:	ea22 0404 	bic.w	r4, r2, r4
    5790:	e850 6f00 	ldrex	r6, [r0]
    5794:	4296      	cmp	r6, r2
    5796:	d104      	bne.n	57a2 <nrfx_flag32_alloc+0x2e>
    5798:	e840 4c00 	strex	ip, r4, [r0]
    579c:	f1bc 0f00 	cmp.w	ip, #0
    57a0:	d1f6      	bne.n	5790 <nrfx_flag32_alloc+0x1c>
    57a2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    57a6:	d1e7      	bne.n	5778 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    57a8:	4801      	ldr	r0, [pc, #4]	; (57b0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    57aa:	700b      	strb	r3, [r1, #0]
}
    57ac:	bd70      	pop	{r4, r5, r6, pc}
    57ae:	bf00      	nop
    57b0:	0bad0000 	.word	0x0bad0000

000057b4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    57b4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    57b6:	6803      	ldr	r3, [r0, #0]
    57b8:	40cb      	lsrs	r3, r1
    57ba:	07db      	lsls	r3, r3, #31
    57bc:	d414      	bmi.n	57e8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    57be:	2301      	movs	r3, #1
    57c0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    57c2:	6802      	ldr	r2, [r0, #0]
    57c4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    57c8:	ea43 0102 	orr.w	r1, r3, r2
    57cc:	e850 4f00 	ldrex	r4, [r0]
    57d0:	4294      	cmp	r4, r2
    57d2:	d104      	bne.n	57de <nrfx_flag32_free+0x2a>
    57d4:	e840 1c00 	strex	ip, r1, [r0]
    57d8:	f1bc 0f00 	cmp.w	ip, #0
    57dc:	d1f6      	bne.n	57cc <nrfx_flag32_free+0x18>
    57de:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    57e2:	d1ee      	bne.n	57c2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    57e4:	4801      	ldr	r0, [pc, #4]	; (57ec <nrfx_flag32_free+0x38>)
}
    57e6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57e8:	4801      	ldr	r0, [pc, #4]	; (57f0 <nrfx_flag32_free+0x3c>)
    57ea:	e7fc      	b.n	57e6 <nrfx_flag32_free+0x32>
    57ec:	0bad0000 	.word	0x0bad0000
    57f0:	0bad0004 	.word	0x0bad0004

000057f4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    57f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    57f6:	4604      	mov	r4, r0
    57f8:	b118      	cbz	r0, 5802 <clock_stop+0xe>
    57fa:	2801      	cmp	r0, #1
    57fc:	d022      	beq.n	5844 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    57fe:	b003      	add	sp, #12
    5800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    5802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5806:	2202      	movs	r2, #2
    5808:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    580c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    5810:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5814:	2201      	movs	r2, #1
    5816:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5818:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    581a:	2301      	movs	r3, #1
    581c:	f88d 3007 	strb.w	r3, [sp, #7]
    5820:	f242 7510 	movw	r5, #10000	; 0x2710
    5824:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5828:	b1cc      	cbz	r4, 585e <clock_stop+0x6a>
    582a:	2c01      	cmp	r4, #1
    582c:	d1e7      	bne.n	57fe <clock_stop+0xa>
            if (p_clk_src != NULL)
    582e:	b3c7      	cbz	r7, 58a2 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5830:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5834:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5838:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    583a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    583e:	03da      	lsls	r2, r3, #15
    5840:	d521      	bpl.n	5886 <clock_stop+0x92>
    5842:	e016      	b.n	5872 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    5844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5848:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    584a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    584e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5852:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5856:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5858:	f10d 0707 	add.w	r7, sp, #7
    585c:	e7dd      	b.n	581a <clock_stop+0x26>
            if (p_clk_src != NULL)
    585e:	b1b7      	cbz	r7, 588e <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5860:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5864:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5868:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    586a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    586e:	03d8      	lsls	r0, r3, #15
    5870:	d5c5      	bpl.n	57fe <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5872:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5876:	2801      	cmp	r0, #1
    5878:	d103      	bne.n	5882 <clock_stop+0x8e>
    587a:	f004 fa8d 	bl	9d98 <nrfx_busy_wait>
    587e:	3d01      	subs	r5, #1
    5880:	d1d2      	bne.n	5828 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5882:	2c01      	cmp	r4, #1
    5884:	d1bb      	bne.n	57fe <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    5886:	4b0c      	ldr	r3, [pc, #48]	; (58b8 <clock_stop+0xc4>)
    5888:	2200      	movs	r2, #0
    588a:	715a      	strb	r2, [r3, #5]
    588c:	e7b7      	b.n	57fe <clock_stop+0xa>
    588e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5892:	03d9      	lsls	r1, r3, #15
    5894:	d5b3      	bpl.n	57fe <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5896:	2001      	movs	r0, #1
    5898:	f004 fa7e 	bl	9d98 <nrfx_busy_wait>
    589c:	3d01      	subs	r5, #1
    589e:	d1f6      	bne.n	588e <clock_stop+0x9a>
    58a0:	e7ad      	b.n	57fe <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    58a2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    58a6:	03db      	lsls	r3, r3, #15
    58a8:	d5ed      	bpl.n	5886 <clock_stop+0x92>
    58aa:	2001      	movs	r0, #1
    58ac:	f004 fa74 	bl	9d98 <nrfx_busy_wait>
    58b0:	3d01      	subs	r5, #1
    58b2:	d1f6      	bne.n	58a2 <clock_stop+0xae>
    58b4:	e7e7      	b.n	5886 <clock_stop+0x92>
    58b6:	bf00      	nop
    58b8:	2000175c 	.word	0x2000175c

000058bc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    58bc:	4b04      	ldr	r3, [pc, #16]	; (58d0 <nrfx_clock_init+0x14>)
    58be:	791a      	ldrb	r2, [r3, #4]
    58c0:	b922      	cbnz	r2, 58cc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    58c2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    58c4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    58c6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    58c8:	4802      	ldr	r0, [pc, #8]	; (58d4 <nrfx_clock_init+0x18>)
    58ca:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    58cc:	4802      	ldr	r0, [pc, #8]	; (58d8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    58ce:	4770      	bx	lr
    58d0:	2000175c 	.word	0x2000175c
    58d4:	0bad0000 	.word	0x0bad0000
    58d8:	0bad000c 	.word	0x0bad000c

000058dc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    58dc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    58de:	2000      	movs	r0, #0
    58e0:	f7fd fdd8 	bl	3494 <arch_irq_is_enabled>
    58e4:	b908      	cbnz	r0, 58ea <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    58e6:	f7fd fdb3 	bl	3450 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ee:	2200      	movs	r2, #0
    58f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    58f4:	4b01      	ldr	r3, [pc, #4]	; (58fc <nrfx_clock_enable+0x20>)
    58f6:	2201      	movs	r2, #1
    58f8:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    58fa:	bd08      	pop	{r3, pc}
    58fc:	20001c21 	.word	0x20001c21

00005900 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5900:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5906:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    590a:	b16a      	cbz	r2, 5928 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    590c:	2200      	movs	r2, #0
    590e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5912:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5916:	2201      	movs	r2, #1
    5918:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    591c:	4b11      	ldr	r3, [pc, #68]	; (5964 <nrfx_clock_irq_handler+0x64>)
    591e:	7958      	ldrb	r0, [r3, #5]
    5920:	b910      	cbnz	r0, 5928 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5922:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    592c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5930:	b172      	cbz	r2, 5950 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5932:	2200      	movs	r2, #0
    5934:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5938:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    593c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5940:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5944:	0792      	lsls	r2, r2, #30
    5946:	d104      	bne.n	5952 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5948:	2201      	movs	r2, #1
    594a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    594e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5950:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5952:	2202      	movs	r2, #2
    5954:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5958:	4b02      	ldr	r3, [pc, #8]	; (5964 <nrfx_clock_irq_handler+0x64>)
}
    595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	2001      	movs	r0, #1
    5962:	4718      	bx	r3
    5964:	2000175c 	.word	0x2000175c

00005968 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5968:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    596a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    596e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    5970:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5972:	6002      	str	r2, [r0, #0]
}
    5974:	4802      	ldr	r0, [pc, #8]	; (5980 <nrf_gpio_pin_port_decode+0x18>)
    5976:	bf18      	it	ne
    5978:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    597c:	4770      	bx	lr
    597e:	bf00      	nop
    5980:	50000300 	.word	0x50000300

00005984 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5984:	4b03      	ldr	r3, [pc, #12]	; (5994 <pin_in_use_by_te+0x10>)
    5986:	3008      	adds	r0, #8
    5988:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    598c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5990:	4770      	bx	lr
    5992:	bf00      	nop
    5994:	2000015c 	.word	0x2000015c

00005998 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5998:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    599a:	f100 0308 	add.w	r3, r0, #8
    599e:	4c0c      	ldr	r4, [pc, #48]	; (59d0 <call_handler+0x38>)
    59a0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    59a4:	05da      	lsls	r2, r3, #23
{
    59a6:	4605      	mov	r5, r0
    59a8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    59aa:	d507      	bpl.n	59bc <call_handler+0x24>
    59ac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    59b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    59b4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    59b8:	6852      	ldr	r2, [r2, #4]
    59ba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    59bc:	68a3      	ldr	r3, [r4, #8]
    59be:	b12b      	cbz	r3, 59cc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    59c0:	68e2      	ldr	r2, [r4, #12]
    59c2:	4631      	mov	r1, r6
    59c4:	4628      	mov	r0, r5
    }
}
    59c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    59ca:	4718      	bx	r3
}
    59cc:	bd70      	pop	{r4, r5, r6, pc}
    59ce:	bf00      	nop
    59d0:	2000015c 	.word	0x2000015c

000059d4 <release_handler>:
{
    59d4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    59d6:	4a12      	ldr	r2, [pc, #72]	; (5a20 <release_handler+0x4c>)
    59d8:	3008      	adds	r0, #8
    59da:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    59de:	05d9      	lsls	r1, r3, #23
    59e0:	d51b      	bpl.n	5a1a <release_handler+0x46>
    59e2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    59e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    59ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    59ee:	f102 040e 	add.w	r4, r2, #14
    59f2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    59f4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    59f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    59fc:	d003      	beq.n	5a06 <release_handler+0x32>
    59fe:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5a02:	4299      	cmp	r1, r3
    5a04:	d009      	beq.n	5a1a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a06:	3001      	adds	r0, #1
    5a08:	2830      	cmp	r0, #48	; 0x30
    5a0a:	d1f3      	bne.n	59f4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5a0c:	2300      	movs	r3, #0
    5a0e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5a12:	4804      	ldr	r0, [pc, #16]	; (5a24 <release_handler+0x50>)
}
    5a14:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5a16:	f7ff becd 	b.w	57b4 <nrfx_flag32_free>
}
    5a1a:	bc10      	pop	{r4}
    5a1c:	4770      	bx	lr
    5a1e:	bf00      	nop
    5a20:	2000015c 	.word	0x2000015c
    5a24:	200001d0 	.word	0x200001d0

00005a28 <pin_handler_trigger_uninit>:
{
    5a28:	b538      	push	{r3, r4, r5, lr}
    5a2a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5a2c:	f7ff ffaa 	bl	5984 <pin_in_use_by_te>
    5a30:	4c09      	ldr	r4, [pc, #36]	; (5a58 <pin_handler_trigger_uninit+0x30>)
    5a32:	f102 0508 	add.w	r5, r2, #8
    5a36:	b140      	cbz	r0, 5a4a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a38:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5a3c:	4907      	ldr	r1, [pc, #28]	; (5a5c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5a3e:	0b5b      	lsrs	r3, r3, #13
    5a40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5a44:	2000      	movs	r0, #0
    5a46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    5a4a:	4610      	mov	r0, r2
    5a4c:	f7ff ffc2 	bl	59d4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5a50:	2300      	movs	r3, #0
    5a52:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5a56:	bd38      	pop	{r3, r4, r5, pc}
    5a58:	2000015c 	.word	0x2000015c
    5a5c:	40006000 	.word	0x40006000

00005a60 <nrfx_gpiote_input_configure>:
{
    5a60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5a64:	4604      	mov	r4, r0
    5a66:	4616      	mov	r6, r2
    5a68:	461d      	mov	r5, r3
    if (p_input_config)
    5a6a:	b301      	cbz	r1, 5aae <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a6c:	4f4e      	ldr	r7, [pc, #312]	; (5ba8 <nrfx_gpiote_input_configure+0x148>)
    5a6e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a72:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5a76:	079b      	lsls	r3, r3, #30
    5a78:	d502      	bpl.n	5a80 <nrfx_gpiote_input_configure+0x20>
    5a7a:	f7ff ff83 	bl	5984 <pin_in_use_by_te>
    5a7e:	bb10      	cbnz	r0, 5ac6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a80:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a82:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a86:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5a8a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a8e:	f10d 020f 	add.w	r2, sp, #15
    5a92:	460b      	mov	r3, r1
    5a94:	4620      	mov	r0, r4
    5a96:	f10d 010e 	add.w	r1, sp, #14
    5a9a:	f004 f9bd 	bl	9e18 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5a9e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5aa2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5aa6:	f043 0301 	orr.w	r3, r3, #1
    5aaa:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    5aae:	b346      	cbz	r6, 5b02 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ab0:	4b3d      	ldr	r3, [pc, #244]	; (5ba8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5ab2:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5ab6:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ab8:	f104 0708 	add.w	r7, r4, #8
    5abc:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    5ac0:	0788      	lsls	r0, r1, #30
    5ac2:	d502      	bpl.n	5aca <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    5ac4:	b1aa      	cbz	r2, 5af2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    5ac6:	4839      	ldr	r0, [pc, #228]	; (5bac <nrfx_gpiote_input_configure+0x14c>)
    5ac8:	e01d      	b.n	5b06 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5aca:	f021 0120 	bic.w	r1, r1, #32
    5ace:	04c9      	lsls	r1, r1, #19
    5ad0:	0cc9      	lsrs	r1, r1, #19
    5ad2:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    5ad6:	b162      	cbz	r2, 5af2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    5ad8:	f1bc 0f03 	cmp.w	ip, #3
    5adc:	d8f3      	bhi.n	5ac6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5ade:	6872      	ldr	r2, [r6, #4]
    5ae0:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5ae2:	f1bc 0f00 	cmp.w	ip, #0
    5ae6:	d111      	bne.n	5b0c <nrfx_gpiote_input_configure+0xac>
    5ae8:	4a31      	ldr	r2, [pc, #196]	; (5bb0 <nrfx_gpiote_input_configure+0x150>)
    5aea:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    5aee:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5af2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    5af6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5afa:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    5afe:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    5b02:	bb45      	cbnz	r5, 5b56 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    5b04:	482b      	ldr	r0, [pc, #172]	; (5bb4 <nrfx_gpiote_input_configure+0x154>)
}
    5b06:	b004      	add	sp, #16
    5b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5b0c:	00b2      	lsls	r2, r6, #2
    5b0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5b12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b16:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    5b1a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b1e:	f020 0003 	bic.w	r0, r0, #3
    5b22:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5b26:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b2a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5b2e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5b32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b36:	0220      	lsls	r0, r4, #8
    5b38:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5b3c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5b40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5b44:	ea40 000e 	orr.w	r0, r0, lr
    5b48:	f041 0120 	orr.w	r1, r1, #32
    5b4c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5b50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5b54:	e7cd      	b.n	5af2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5b56:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5b5a:	4620      	mov	r0, r4
    5b5c:	f7ff ff3a 	bl	59d4 <release_handler>
    if (!handler)
    5b60:	2e00      	cmp	r6, #0
    5b62:	d0cf      	beq.n	5b04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b64:	4d10      	ldr	r5, [pc, #64]	; (5ba8 <nrfx_gpiote_input_configure+0x148>)
    5b66:	e9d5 2300 	ldrd	r2, r3, [r5]
    5b6a:	4296      	cmp	r6, r2
    5b6c:	d101      	bne.n	5b72 <nrfx_gpiote_input_configure+0x112>
    5b6e:	429f      	cmp	r7, r3
    5b70:	d018      	beq.n	5ba4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b72:	4811      	ldr	r0, [pc, #68]	; (5bb8 <nrfx_gpiote_input_configure+0x158>)
    5b74:	f10d 010f 	add.w	r1, sp, #15
    5b78:	f7ff fdfc 	bl	5774 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b7c:	4b0d      	ldr	r3, [pc, #52]	; (5bb4 <nrfx_gpiote_input_configure+0x154>)
    5b7e:	4298      	cmp	r0, r3
    5b80:	d1c1      	bne.n	5b06 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    5b82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5b86:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5b8a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b8e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5b90:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b92:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5b96:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b9e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5ba2:	e7af      	b.n	5b04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ba4:	2200      	movs	r2, #0
    5ba6:	e7ee      	b.n	5b86 <nrfx_gpiote_input_configure+0x126>
    5ba8:	2000015c 	.word	0x2000015c
    5bac:	0bad0004 	.word	0x0bad0004
    5bb0:	40006000 	.word	0x40006000
    5bb4:	0bad0000 	.word	0x0bad0000
    5bb8:	200001d0 	.word	0x200001d0

00005bbc <nrfx_gpiote_output_configure>:
{
    5bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bbe:	4604      	mov	r4, r0
    5bc0:	b085      	sub	sp, #20
    5bc2:	4615      	mov	r5, r2
    if (p_config)
    5bc4:	b319      	cbz	r1, 5c0e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5bc6:	4e33      	ldr	r6, [pc, #204]	; (5c94 <nrfx_gpiote_output_configure+0xd8>)
    5bc8:	f100 0708 	add.w	r7, r0, #8
    5bcc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5bd0:	0793      	lsls	r3, r2, #30
    5bd2:	d403      	bmi.n	5bdc <nrfx_gpiote_output_configure+0x20>
    5bd4:	f7ff fed6 	bl	5984 <pin_in_use_by_te>
    5bd8:	2800      	cmp	r0, #0
    5bda:	d158      	bne.n	5c8e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5bdc:	f012 0f1c 	tst.w	r2, #28
    5be0:	d002      	beq.n	5be8 <nrfx_gpiote_output_configure+0x2c>
    5be2:	784b      	ldrb	r3, [r1, #1]
    5be4:	2b01      	cmp	r3, #1
    5be6:	d052      	beq.n	5c8e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5be8:	2301      	movs	r3, #1
    5bea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5bee:	2300      	movs	r3, #0
    5bf0:	e9cd 1300 	strd	r1, r3, [sp]
    5bf4:	1c4a      	adds	r2, r1, #1
    5bf6:	1c8b      	adds	r3, r1, #2
    5bf8:	4620      	mov	r0, r4
    5bfa:	f10d 010f 	add.w	r1, sp, #15
    5bfe:	f004 f90b 	bl	9e18 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5c02:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5c06:	f043 0303 	orr.w	r3, r3, #3
    5c0a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5c0e:	b915      	cbnz	r5, 5c16 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    5c10:	4821      	ldr	r0, [pc, #132]	; (5c98 <nrfx_gpiote_output_configure+0xdc>)
}
    5c12:	b005      	add	sp, #20
    5c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5c16:	4e1f      	ldr	r6, [pc, #124]	; (5c94 <nrfx_gpiote_output_configure+0xd8>)
    5c18:	f104 0708 	add.w	r7, r4, #8
    5c1c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5c20:	0783      	lsls	r3, r0, #30
    5c22:	d534      	bpl.n	5c8e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    5c24:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5c28:	4661      	mov	r1, ip
    5c2a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5c2c:	f020 0020 	bic.w	r0, r0, #32
    5c30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5c34:	04c0      	lsls	r0, r0, #19
    5c36:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5c3a:	0cc0      	lsrs	r0, r0, #19
    5c3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c40:	2300      	movs	r3, #0
    5c42:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5c46:	786a      	ldrb	r2, [r5, #1]
    5c48:	2a00      	cmp	r2, #0
    5c4a:	d0e1      	beq.n	5c10 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c4c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5c50:	78ad      	ldrb	r5, [r5, #2]
    5c52:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5c56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5c5a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c5e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5c62:	0223      	lsls	r3, r4, #8
    5c64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c68:	0412      	lsls	r2, r2, #16
    5c6a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c6e:	ea43 030e 	orr.w	r3, r3, lr
    5c72:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c74:	052a      	lsls	r2, r5, #20
    5c76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c7a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c7e:	4313      	orrs	r3, r2
    5c80:	f040 0020 	orr.w	r0, r0, #32
    5c84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5c8c:	e7c0      	b.n	5c10 <nrfx_gpiote_output_configure+0x54>
{
    5c8e:	4803      	ldr	r0, [pc, #12]	; (5c9c <nrfx_gpiote_output_configure+0xe0>)
    5c90:	e7bf      	b.n	5c12 <nrfx_gpiote_output_configure+0x56>
    5c92:	bf00      	nop
    5c94:	2000015c 	.word	0x2000015c
    5c98:	0bad0000 	.word	0x0bad0000
    5c9c:	0bad0004 	.word	0x0bad0004

00005ca0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5ca0:	4b01      	ldr	r3, [pc, #4]	; (5ca8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5ca2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5ca6:	4770      	bx	lr
    5ca8:	2000015c 	.word	0x2000015c

00005cac <nrfx_gpiote_channel_get>:
{
    5cac:	b508      	push	{r3, lr}
    5cae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5cb0:	f7ff fe68 	bl	5984 <pin_in_use_by_te>
    5cb4:	b138      	cbz	r0, 5cc6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cb6:	4b05      	ldr	r3, [pc, #20]	; (5ccc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5cb8:	4805      	ldr	r0, [pc, #20]	; (5cd0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cba:	3208      	adds	r2, #8
    5cbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5cc0:	0b5b      	lsrs	r3, r3, #13
    5cc2:	700b      	strb	r3, [r1, #0]
}
    5cc4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5cc6:	4803      	ldr	r0, [pc, #12]	; (5cd4 <nrfx_gpiote_channel_get+0x28>)
    5cc8:	e7fc      	b.n	5cc4 <nrfx_gpiote_channel_get+0x18>
    5cca:	bf00      	nop
    5ccc:	2000015c 	.word	0x2000015c
    5cd0:	0bad0000 	.word	0x0bad0000
    5cd4:	0bad0004 	.word	0x0bad0004

00005cd8 <nrfx_gpiote_init>:
{
    5cd8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5cda:	4c0f      	ldr	r4, [pc, #60]	; (5d18 <nrfx_gpiote_init+0x40>)
    5cdc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5ce0:	b9bd      	cbnz	r5, 5d12 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5ce2:	2260      	movs	r2, #96	; 0x60
    5ce4:	4629      	mov	r1, r5
    5ce6:	f104 0010 	add.w	r0, r4, #16
    5cea:	f003 fe4d 	bl	9988 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5cee:	2006      	movs	r0, #6
    5cf0:	f7fd fbae 	bl	3450 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5cf4:	4b09      	ldr	r3, [pc, #36]	; (5d1c <nrfx_gpiote_init+0x44>)
    return err_code;
    5cf6:	480a      	ldr	r0, [pc, #40]	; (5d20 <nrfx_gpiote_init+0x48>)
    5cf8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5cfc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5d00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5d08:	2301      	movs	r3, #1
    5d0a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5d0e:	6763      	str	r3, [r4, #116]	; 0x74
}
    5d10:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5d12:	4804      	ldr	r0, [pc, #16]	; (5d24 <nrfx_gpiote_init+0x4c>)
    5d14:	e7fc      	b.n	5d10 <nrfx_gpiote_init+0x38>
    5d16:	bf00      	nop
    5d18:	2000015c 	.word	0x2000015c
    5d1c:	40006000 	.word	0x40006000
    5d20:	0bad0000 	.word	0x0bad0000
    5d24:	0bad0005 	.word	0x0bad0005

00005d28 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5d28:	4b03      	ldr	r3, [pc, #12]	; (5d38 <nrfx_gpiote_is_init+0x10>)
    5d2a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5d2e:	3800      	subs	r0, #0
    5d30:	bf18      	it	ne
    5d32:	2001      	movne	r0, #1
    5d34:	4770      	bx	lr
    5d36:	bf00      	nop
    5d38:	2000015c 	.word	0x2000015c

00005d3c <nrfx_gpiote_channel_free>:
{
    5d3c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5d3e:	4801      	ldr	r0, [pc, #4]	; (5d44 <nrfx_gpiote_channel_free+0x8>)
    5d40:	f7ff bd38 	b.w	57b4 <nrfx_flag32_free>
    5d44:	200001cc 	.word	0x200001cc

00005d48 <nrfx_gpiote_channel_alloc>:
{
    5d48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5d4a:	4801      	ldr	r0, [pc, #4]	; (5d50 <nrfx_gpiote_channel_alloc+0x8>)
    5d4c:	f7ff bd12 	b.w	5774 <nrfx_flag32_alloc>
    5d50:	200001cc 	.word	0x200001cc

00005d54 <nrfx_gpiote_trigger_enable>:
{
    5d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d58:	f7ff fe14 	bl	5984 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d5c:	f104 0208 	add.w	r2, r4, #8
    5d60:	4b1e      	ldr	r3, [pc, #120]	; (5ddc <nrfx_gpiote_trigger_enable+0x88>)
    5d62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d66:	b1e8      	cbz	r0, 5da4 <nrfx_gpiote_trigger_enable+0x50>
    5d68:	f013 0502 	ands.w	r5, r3, #2
    5d6c:	d11a      	bne.n	5da4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d6e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5d70:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5d72:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    5d76:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    5d7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5d7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d82:	6005      	str	r5, [r0, #0]
    5d84:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5d86:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5d8a:	f040 0001 	orr.w	r0, r0, #1
    5d8e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5d92:	b129      	cbz	r1, 5da0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5d94:	2201      	movs	r2, #1
    5d96:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    5d9a:	4a11      	ldr	r2, [pc, #68]	; (5de0 <nrfx_gpiote_trigger_enable+0x8c>)
    5d9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5da0:	b003      	add	sp, #12
    5da2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5da4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5da8:	2b04      	cmp	r3, #4
    5daa:	d012      	beq.n	5dd2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5dac:	2b05      	cmp	r3, #5
    5dae:	d012      	beq.n	5dd6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5db0:	a801      	add	r0, sp, #4
    5db2:	9401      	str	r4, [sp, #4]
    5db4:	f7ff fdd8 	bl	5968 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5db8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5dba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5dbe:	40d9      	lsrs	r1, r3
    5dc0:	f001 0101 	and.w	r1, r1, #1
    5dc4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5dc6:	4620      	mov	r0, r4
}
    5dc8:	b003      	add	sp, #12
    5dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5dce:	f004 b86c 	b.w	9eaa <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5dd2:	2103      	movs	r1, #3
    5dd4:	e7f7      	b.n	5dc6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5dd6:	2102      	movs	r1, #2
    5dd8:	e7f5      	b.n	5dc6 <nrfx_gpiote_trigger_enable+0x72>
    5dda:	bf00      	nop
    5ddc:	2000015c 	.word	0x2000015c
    5de0:	40006000 	.word	0x40006000

00005de4 <nrfx_gpiote_trigger_disable>:
{
    5de4:	b508      	push	{r3, lr}
    5de6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5de8:	f7ff fdcc 	bl	5984 <pin_in_use_by_te>
    5dec:	b1c0      	cbz	r0, 5e20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5dee:	f102 0108 	add.w	r1, r2, #8
    5df2:	4b0e      	ldr	r3, [pc, #56]	; (5e2c <nrfx_gpiote_trigger_disable+0x48>)
    5df4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5df8:	0799      	lsls	r1, r3, #30
    5dfa:	d411      	bmi.n	5e20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5dfc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5dfe:	2201      	movs	r2, #1
    5e00:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5e02:	009b      	lsls	r3, r3, #2
    5e04:	490a      	ldr	r1, [pc, #40]	; (5e30 <nrfx_gpiote_trigger_disable+0x4c>)
    5e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5e0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5e12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5e16:	f022 0203 	bic.w	r2, r2, #3
    5e1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5e1e:	bd08      	pop	{r3, pc}
    5e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5e24:	2100      	movs	r1, #0
    5e26:	4610      	mov	r0, r2
    5e28:	f004 b83f 	b.w	9eaa <nrf_gpio_cfg_sense_set>
    5e2c:	2000015c 	.word	0x2000015c
    5e30:	40006000 	.word	0x40006000

00005e34 <nrfx_gpiote_pin_uninit>:
{
    5e34:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e36:	4b0e      	ldr	r3, [pc, #56]	; (5e70 <nrfx_gpiote_pin_uninit+0x3c>)
    5e38:	f100 0208 	add.w	r2, r0, #8
{
    5e3c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5e42:	07db      	lsls	r3, r3, #31
    5e44:	d511      	bpl.n	5e6a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5e46:	f7ff ffcd 	bl	5de4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5e4a:	4620      	mov	r0, r4
    5e4c:	f7ff fdec 	bl	5a28 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e50:	a801      	add	r0, sp, #4
    5e52:	9401      	str	r4, [sp, #4]
    5e54:	f7ff fd88 	bl	5968 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5e58:	9b01      	ldr	r3, [sp, #4]
    5e5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5e5e:	2202      	movs	r2, #2
    5e60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5e64:	4803      	ldr	r0, [pc, #12]	; (5e74 <nrfx_gpiote_pin_uninit+0x40>)
}
    5e66:	b002      	add	sp, #8
    5e68:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5e6a:	4803      	ldr	r0, [pc, #12]	; (5e78 <nrfx_gpiote_pin_uninit+0x44>)
    5e6c:	e7fb      	b.n	5e66 <nrfx_gpiote_pin_uninit+0x32>
    5e6e:	bf00      	nop
    5e70:	2000015c 	.word	0x2000015c
    5e74:	0bad0000 	.word	0x0bad0000
    5e78:	0bad0004 	.word	0x0bad0004

00005e7c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e80:	4b68      	ldr	r3, [pc, #416]	; (6024 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    5e82:	4869      	ldr	r0, [pc, #420]	; (6028 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5e84:	4969      	ldr	r1, [pc, #420]	; (602c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    5e86:	2600      	movs	r6, #0
{
    5e88:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5e8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e8c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e8e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5e90:	b135      	cbz	r5, 5ea0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5e92:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5e96:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5e98:	bf1e      	ittt	ne
    5e9a:	601c      	strne	r4, [r3, #0]
    5e9c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5e9e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ea0:	3304      	adds	r3, #4
    5ea2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5ea4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ea8:	d1f1      	bne.n	5e8e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eaa:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6028 <nrfx_gpiote_irq_handler+0x1ac>
    5eae:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	f000 8099 	beq.w	5fea <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    5eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5ebc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5ec0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5ec2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5ec6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    5eca:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5ecc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5ed0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    5ed4:	f10d 0a10 	add.w	sl, sp, #16
    5ed8:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5edc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5ede:	f04f 0b01 	mov.w	fp, #1
    5ee2:	e049      	b.n	5f78 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5ee4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5ee6:	4a52      	ldr	r2, [pc, #328]	; (6030 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5ee8:	fa94 f4a4 	rbit	r4, r4
    5eec:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5ef0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5ef2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5ef4:	f104 0308 	add.w	r3, r4, #8
    5ef8:	9403      	str	r4, [sp, #12]
    5efa:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5efe:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5f02:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5f06:	fa0b f202 	lsl.w	r2, fp, r2
    5f0a:	ea23 0302 	bic.w	r3, r3, r2
    5f0e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f12:	a803      	add	r0, sp, #12
    5f14:	f7ff fd28 	bl	5968 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f18:	9b03      	ldr	r3, [sp, #12]
    5f1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5f1e:	08b9      	lsrs	r1, r7, #2
    5f20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5f24:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    5f28:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f2a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5f2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    5f30:	d52c      	bpl.n	5f8c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    5f32:	4620      	mov	r0, r4
    5f34:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f36:	b2dd      	uxtb	r5, r3
    5f38:	f7ff fd2e 	bl	5998 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f3c:	a803      	add	r0, sp, #12
    5f3e:	9403      	str	r4, [sp, #12]
    5f40:	f7ff fd12 	bl	5968 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f44:	9b03      	ldr	r3, [sp, #12]
    5f46:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5f4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5f4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5f52:	429d      	cmp	r5, r3
    5f54:	d107      	bne.n	5f66 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5f56:	2100      	movs	r1, #0
    5f58:	4620      	mov	r0, r4
    5f5a:	f003 ffa6 	bl	9eaa <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5f5e:	4629      	mov	r1, r5
    5f60:	4620      	mov	r0, r4
    5f62:	f003 ffa2 	bl	9eaa <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f66:	a803      	add	r0, sp, #12
    5f68:	9403      	str	r4, [sp, #12]
    5f6a:	f7ff fcfd 	bl	5968 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5f6e:	9b03      	ldr	r3, [sp, #12]
    5f70:	fa0b f303 	lsl.w	r3, fp, r3
    5f74:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5f78:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    5f7c:	2c00      	cmp	r4, #0
    5f7e:	d1b1      	bne.n	5ee4 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5f80:	f1b8 0f00 	cmp.w	r8, #0
    5f84:	d11d      	bne.n	5fc2 <nrfx_gpiote_irq_handler+0x146>
    5f86:	f04f 0801 	mov.w	r8, #1
    5f8a:	e7a5      	b.n	5ed8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5f8c:	2b02      	cmp	r3, #2
    5f8e:	d10c      	bne.n	5faa <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5f90:	2103      	movs	r1, #3
    5f92:	4620      	mov	r0, r4
    5f94:	f003 ff89 	bl	9eaa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f98:	f005 0305 	and.w	r3, r5, #5
    5f9c:	2b01      	cmp	r3, #1
    5f9e:	d1e2      	bne.n	5f66 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5fa0:	4639      	mov	r1, r7
    5fa2:	4620      	mov	r0, r4
    5fa4:	f7ff fcf8 	bl	5998 <call_handler>
    5fa8:	e7dd      	b.n	5f66 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5faa:	2102      	movs	r1, #2
    5fac:	4620      	mov	r0, r4
    5fae:	9301      	str	r3, [sp, #4]
    5fb0:	f003 ff7b 	bl	9eaa <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5fb4:	2d03      	cmp	r5, #3
    5fb6:	d0f3      	beq.n	5fa0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5fb8:	9b01      	ldr	r3, [sp, #4]
    5fba:	2b03      	cmp	r3, #3
    5fbc:	d1d3      	bne.n	5f66 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5fbe:	2d02      	cmp	r5, #2
    5fc0:	e7ed      	b.n	5f9e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    5fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5fc6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    5fca:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    5fce:	4919      	ldr	r1, [pc, #100]	; (6034 <nrfx_gpiote_irq_handler+0x1b8>)
    5fd0:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5fd4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5fd6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5fda:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5fde:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5fe0:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5fe2:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    5fe6:	f47f af73 	bne.w	5ed0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    5fea:	2401      	movs	r4, #1
    while (mask)
    5fec:	b916      	cbnz	r6, 5ff4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5fee:	b007      	add	sp, #28
    5ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5ff4:	fa96 f3a6 	rbit	r3, r6
    5ff8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5ffc:	fa04 f203 	lsl.w	r2, r4, r3
    6000:	009b      	lsls	r3, r3, #2
    6002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6006:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    600a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    600e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6012:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6016:	f3c0 2005 	ubfx	r0, r0, #8, #6
    601a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    601e:	f7ff fcbb 	bl	5998 <call_handler>
    6022:	e7e3      	b.n	5fec <nrfx_gpiote_irq_handler+0x170>
    6024:	40006100 	.word	0x40006100
    6028:	40006000 	.word	0x40006000
    602c:	40006120 	.word	0x40006120
    6030:	2000015c 	.word	0x2000015c
    6034:	50000300 	.word	0x50000300

00006038 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    6038:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    603a:	4c18      	ldr	r4, [pc, #96]	; (609c <nrfx_power_init+0x64>)
    603c:	7823      	ldrb	r3, [r4, #0]
    603e:	bb53      	cbnz	r3, 6096 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    6040:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    6042:	f3c2 0340 	ubfx	r3, r2, #1, #1
    6046:	0792      	lsls	r2, r2, #30
    6048:	d512      	bpl.n	6070 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    604a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    604e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6052:	2a08      	cmp	r2, #8
    6054:	d10b      	bne.n	606e <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6056:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    605a:	2b05      	cmp	r3, #5
    605c:	d807      	bhi.n	606e <nrfx_power_init+0x36>
    605e:	4a10      	ldr	r2, [pc, #64]	; (60a0 <nrfx_power_init+0x68>)
    6060:	5cd3      	ldrb	r3, [r2, r3]
    6062:	b123      	cbz	r3, 606e <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6068:	2201      	movs	r2, #1
    606a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    606e:	2301      	movs	r3, #1
    6070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6074:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    6078:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    607a:	f003 0301 	and.w	r3, r3, #1
    607e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6082:	2000      	movs	r0, #0
    6084:	f7fd fa06 	bl	3494 <arch_irq_is_enabled>
    6088:	b908      	cbnz	r0, 608e <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    608a:	f7fd f9e1 	bl	3450 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    608e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6090:	4804      	ldr	r0, [pc, #16]	; (60a4 <nrfx_power_init+0x6c>)
    m_initialized = true;
    6092:	7023      	strb	r3, [r4, #0]
}
    6094:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6096:	4804      	ldr	r0, [pc, #16]	; (60a8 <nrfx_power_init+0x70>)
    6098:	e7fc      	b.n	6094 <nrfx_power_init+0x5c>
    609a:	bf00      	nop
    609c:	20001c22 	.word	0x20001c22
    60a0:	0000afd1 	.word	0x0000afd1
    60a4:	0bad0000 	.word	0x0bad0000
    60a8:	0bad000c 	.word	0x0bad000c

000060ac <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    60ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60b0:	f44f 7260 	mov.w	r2, #896	; 0x380
    60b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    60b8:	4b01      	ldr	r3, [pc, #4]	; (60c0 <nrfx_power_usbevt_uninit+0x14>)
    60ba:	2200      	movs	r2, #0
    60bc:	601a      	str	r2, [r3, #0]
}
    60be:	4770      	bx	lr
    60c0:	20001764 	.word	0x20001764

000060c4 <nrfx_power_usbevt_init>:
{
    60c4:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    60c6:	f7ff fff1 	bl	60ac <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    60ca:	6803      	ldr	r3, [r0, #0]
    60cc:	b10b      	cbz	r3, 60d2 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    60ce:	4a01      	ldr	r2, [pc, #4]	; (60d4 <nrfx_power_usbevt_init+0x10>)
    60d0:	6013      	str	r3, [r2, #0]
}
    60d2:	bd08      	pop	{r3, pc}
    60d4:	20001764 	.word	0x20001764

000060d8 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    60d8:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    60da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60de:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    60e2:	0762      	lsls	r2, r4, #29
    60e4:	d507      	bpl.n	60f6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    60e6:	f44f 7084 	mov.w	r0, #264	; 0x108
    60ea:	f003 feed 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    60ee:	b110      	cbz	r0, 60f6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    60f0:	4b1e      	ldr	r3, [pc, #120]	; (616c <nrfx_power_irq_handler+0x94>)
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    60f6:	06a3      	lsls	r3, r4, #26
    60f8:	d508      	bpl.n	610c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    60fa:	f44f 708a 	mov.w	r0, #276	; 0x114
    60fe:	f003 fee3 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6102:	b118      	cbz	r0, 610c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6104:	4b1a      	ldr	r3, [pc, #104]	; (6170 <nrfx_power_irq_handler+0x98>)
    6106:	2000      	movs	r0, #0
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    610c:	0660      	lsls	r0, r4, #25
    610e:	d508      	bpl.n	6122 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6110:	f44f 708c 	mov.w	r0, #280	; 0x118
    6114:	f003 fed8 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6118:	b118      	cbz	r0, 6122 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    611a:	4b15      	ldr	r3, [pc, #84]	; (6170 <nrfx_power_irq_handler+0x98>)
    611c:	2001      	movs	r0, #1
    611e:	681b      	ldr	r3, [r3, #0]
    6120:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6122:	0621      	lsls	r1, r4, #24
    6124:	d508      	bpl.n	6138 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    6126:	f44f 708e 	mov.w	r0, #284	; 0x11c
    612a:	f003 fecd 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    612e:	b118      	cbz	r0, 6138 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    6130:	4b10      	ldr	r3, [pc, #64]	; (6174 <nrfx_power_irq_handler+0x9c>)
    6132:	2000      	movs	r0, #0
    6134:	681b      	ldr	r3, [r3, #0]
    6136:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6138:	05e2      	lsls	r2, r4, #23
    613a:	d508      	bpl.n	614e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    613c:	f44f 7090 	mov.w	r0, #288	; 0x120
    6140:	f003 fec2 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6144:	b118      	cbz	r0, 614e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    6146:	4b0b      	ldr	r3, [pc, #44]	; (6174 <nrfx_power_irq_handler+0x9c>)
    6148:	2001      	movs	r0, #1
    614a:	681b      	ldr	r3, [r3, #0]
    614c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    614e:	05a3      	lsls	r3, r4, #22
    6150:	d50a      	bpl.n	6168 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6152:	f44f 7092 	mov.w	r0, #292	; 0x124
    6156:	f003 feb7 	bl	9ec8 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    615a:	b128      	cbz	r0, 6168 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    615c:	4b05      	ldr	r3, [pc, #20]	; (6174 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    615e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	2002      	movs	r0, #2
    6166:	4718      	bx	r3
}
    6168:	bd10      	pop	{r4, pc}
    616a:	bf00      	nop
    616c:	2000176c 	.word	0x2000176c
    6170:	20001768 	.word	0x20001768
    6174:	20001764 	.word	0x20001764

00006178 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    6178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    617c:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    617e:	4d2b      	ldr	r5, [pc, #172]	; (622c <nrfx_twim_init+0xb4>)
    6180:	f04f 0e34 	mov.w	lr, #52	; 0x34
    6184:	fb0e fe06 	mul.w	lr, lr, r6
    6188:	eb05 040e 	add.w	r4, r5, lr
    618c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    6190:	2f00      	cmp	r7, #0
    6192:	d148      	bne.n	6226 <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    6194:	f8d0 c000 	ldr.w	ip, [r0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    6198:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    619c:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    619e:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    61a0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    61a4:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    61a8:	7b4b      	ldrb	r3, [r1, #13]
    61aa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    61ae:	7b8b      	ldrb	r3, [r1, #14]
    61b0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    61b4:	b1cb      	cbz	r3, 61ea <nrfx_twim_init+0x72>
    61b6:	7bcb      	ldrb	r3, [r1, #15]
    61b8:	b92b      	cbnz	r3, 61c6 <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    61ba:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    61be:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    61c2:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    61c6:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    61c8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
    61cc:	b122      	cbz	r2, 61d8 <nrfx_twim_init+0x60>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    61ce:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    61d0:	f340 3007 	sbfx	r0, r0, #12, #8
    61d4:	f7fd f93c 	bl	3450 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61d8:	2334      	movs	r3, #52	; 0x34
    61da:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    61de:	4814      	ldr	r0, [pc, #80]	; (6230 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61e0:	2301      	movs	r3, #1
    61e2:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    61e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    61ea:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    61ec:	4b11      	ldr	r3, [pc, #68]	; (6234 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    61ee:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    61f2:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    61f4:	2c01      	cmp	r4, #1
    61f6:	bf08      	it	eq
    61f8:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    61fa:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
    61fe:	bf18      	it	ne
    6200:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6204:	f240 6e0c 	movw	lr, #1548	; 0x60c
    6208:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    620c:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    620e:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    6212:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    6214:	2c01      	cmp	r4, #1
    6216:	bf18      	it	ne
    6218:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    621c:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    6220:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    6224:	e7c7      	b.n	61b6 <nrfx_twim_init+0x3e>
        return err_code;
    6226:	4804      	ldr	r0, [pc, #16]	; (6238 <nrfx_twim_init+0xc0>)
    6228:	e7dd      	b.n	61e6 <nrfx_twim_init+0x6e>
    622a:	bf00      	nop
    622c:	20001770 	.word	0x20001770
    6230:	0bad0000 	.word	0x0bad0000
    6234:	50000300 	.word	0x50000300
    6238:	0bad0005 	.word	0x0bad0005

0000623c <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    623c:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    623e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6240:	2106      	movs	r1, #6
    6242:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    6246:	4b04      	ldr	r3, [pc, #16]	; (6258 <nrfx_twim_enable+0x1c>)
    6248:	2134      	movs	r1, #52	; 0x34
    624a:	fb01 3302 	mla	r3, r1, r2, r3
    624e:	2202      	movs	r2, #2
    6250:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    6254:	4770      	bx	lr
    6256:	bf00      	nop
    6258:	20001770 	.word	0x20001770

0000625c <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    625c:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    625e:	4b0c      	ldr	r3, [pc, #48]	; (6290 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    6260:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    6262:	2034      	movs	r0, #52	; 0x34
    6264:	fb00 3301 	mla	r3, r0, r1, r3
    6268:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    626a:	480a      	ldr	r0, [pc, #40]	; (6294 <nrfx_twim_disable+0x38>)
    626c:	6099      	str	r1, [r3, #8]
    626e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    6272:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    6276:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    627a:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    627e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6282:	2201      	movs	r2, #1
    6284:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    6288:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    628c:	4770      	bx	lr
    628e:	bf00      	nop
    6290:	20001770 	.word	0x20001770
    6294:	019c0202 	.word	0x019c0202

00006298 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    6298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    629c:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 658c <nrfx_twim_xfer+0x2f4>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    62a0:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    62a4:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    62a6:	2334      	movs	r3, #52	; 0x34
    62a8:	fb03 c30e 	mla	r3, r3, lr, ip
{
    62ac:	4617      	mov	r7, r2
    p_cb->error = false;
    62ae:	2200      	movs	r2, #0
    62b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    62b4:	684b      	ldr	r3, [r1, #4]
{
    62b6:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    62b8:	b14b      	cbz	r3, 62ce <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    62ba:	68cb      	ldr	r3, [r1, #12]
    62bc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    62c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    62c4:	d003      	beq.n	62ce <nrfx_twim_xfer+0x36>
        return err_code;
    62c6:	4eb2      	ldr	r6, [pc, #712]	; (6590 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    62c8:	4630      	mov	r0, r6
    62ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    62ce:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    62d0:	4bb0      	ldr	r3, [pc, #704]	; (6594 <nrfx_twim_xfer+0x2fc>)
    62d2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    62d6:	fb06 c60e 	mla	r6, r6, lr, ip
    62da:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    62de:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    62e2:	b123      	cbz	r3, 62ee <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    62e4:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    62e6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    62ea:	4eab      	ldr	r6, [pc, #684]	; (6598 <nrfx_twim_xfer+0x300>)
    62ec:	e7ec      	b.n	62c8 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    62ee:	f017 0f14 	tst.w	r7, #20
    62f2:	bf0c      	ite	eq
    62f4:	2301      	moveq	r3, #1
    62f6:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    62f8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    62fc:	46a9      	mov	r9, r5
    62fe:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    6302:	f106 080c 	add.w	r8, r6, #12
    6306:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    630a:	f8d9 3000 	ldr.w	r3, [r9]
    630e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    6312:	f3c7 1300 	ubfx	r3, r7, #4, #1
    6316:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    631a:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    631c:	786b      	ldrb	r3, [r5, #1]
    631e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6322:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    6326:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    632a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    632e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    6332:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    6336:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    633a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    633e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    6342:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    6346:	bf18      	it	ne
    6348:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    634a:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    634e:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    6352:	bf18      	it	ne
    6354:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    6356:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    635a:	782b      	ldrb	r3, [r5, #0]
    635c:	2b03      	cmp	r3, #3
    635e:	f200 80b9 	bhi.w	64d4 <nrfx_twim_xfer+0x23c>
    6362:	e8df f003 	tbb	[pc, r3]
    6366:	a48b      	.short	0xa48b
    6368:	026d      	.short	0x026d
    636a:	692b      	ldr	r3, [r5, #16]
    636c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6374:	d1a7      	bne.n	62c6 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    6376:	f44f 7380 	mov.w	r3, #256	; 0x100
    637a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    637e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6380:	68ea      	ldr	r2, [r5, #12]
    6382:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6386:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    638a:	2300      	movs	r3, #0
    638c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    6390:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6394:	2201      	movs	r2, #1
    6396:	6222      	str	r2, [r4, #32]
    6398:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    639a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    639e:	2a00      	cmp	r2, #0
    63a0:	d0fb      	beq.n	639a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63a2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    63a6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    63aa:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    63ac:	68ab      	ldr	r3, [r5, #8]
    63ae:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    63b2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    63b6:	2334      	movs	r3, #52	; 0x34
    63b8:	fb03 c30e 	mla	r3, r3, lr, ip
    63bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    63c0:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    63c2:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    63c4:	4e75      	ldr	r6, [pc, #468]	; (659c <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    63c6:	0738      	lsls	r0, r7, #28
    63c8:	d407      	bmi.n	63da <nrfx_twim_xfer+0x142>
    63ca:	782a      	ldrb	r2, [r5, #0]
    63cc:	2a03      	cmp	r2, #3
    63ce:	d004      	beq.n	63da <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63d0:	2201      	movs	r2, #1
    63d2:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    63d4:	686b      	ldr	r3, [r5, #4]
    63d6:	b903      	cbnz	r3, 63da <nrfx_twim_xfer+0x142>
    63d8:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    63da:	2334      	movs	r3, #52	; 0x34
    63dc:	fb03 f30e 	mul.w	r3, r3, lr
    63e0:	eb0c 0203 	add.w	r2, ip, r3
    63e4:	f85c 1003 	ldr.w	r1, [ip, r3]
    63e8:	2900      	cmp	r1, #0
    63ea:	d176      	bne.n	64da <nrfx_twim_xfer+0x242>
    63ec:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    63ee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    63f2:	2b00      	cmp	r3, #0
    63f4:	f000 8089 	beq.w	650a <nrfx_twim_xfer+0x272>
    63f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    63fc:	2b00      	cmp	r3, #0
    63fe:	f040 8087 	bne.w	6510 <nrfx_twim_xfer+0x278>
    6402:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    6406:	2b00      	cmp	r3, #0
    6408:	f000 8095 	beq.w	6536 <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    640c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    640e:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    6412:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6416:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    641a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    641e:	2d00      	cmp	r5, #0
    6420:	f000 8081 	beq.w	6526 <nrfx_twim_xfer+0x28e>
    6424:	f412 7f00 	tst.w	r2, #512	; 0x200
    6428:	f402 7280 	and.w	r2, r2, #256	; 0x100
    642c:	d17e      	bne.n	652c <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    642e:	6220      	str	r0, [r4, #32]
    6430:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    6432:	2a00      	cmp	r2, #0
    6434:	d0db      	beq.n	63ee <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6436:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    643a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    643e:	e7d6      	b.n	63ee <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6440:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6442:	68ea      	ldr	r2, [r5, #12]
    6444:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6448:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    644c:	692b      	ldr	r3, [r5, #16]
    644e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6452:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    6456:	f47f af36 	bne.w	62c6 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    645a:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    645c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    6460:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    6464:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    6468:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    646c:	2334      	movs	r3, #52	; 0x34
    646e:	fb03 c30e 	mla	r3, r3, lr, ip
    6472:	2202      	movs	r2, #2
    6474:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6476:	2301      	movs	r3, #1
    6478:	6223      	str	r3, [r4, #32]
    647a:	e7a2      	b.n	63c2 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    647c:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    647e:	68ea      	ldr	r2, [r5, #12]
    6480:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    6484:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    6488:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    648c:	f04f 0334 	mov.w	r3, #52	; 0x34
    6490:	d008      	beq.n	64a4 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    6492:	f44f 7280 	mov.w	r2, #256	; 0x100
    6496:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    649a:	fb03 c30e 	mla	r3, r3, lr, ip
    649e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    64a2:	e7e7      	b.n	6474 <nrfx_twim_xfer+0x1dc>
    64a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    64a8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    64ac:	e7df      	b.n	646e <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    64ae:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    64b0:	68ea      	ldr	r2, [r5, #12]
    64b2:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    64b6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    64ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    64be:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    64c2:	2334      	movs	r3, #52	; 0x34
    64c4:	fb03 c30e 	mla	r3, r3, lr, ip
    64c8:	2202      	movs	r2, #2
    64ca:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64cc:	2301      	movs	r3, #1
    64ce:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    64d0:	2300      	movs	r3, #0
    64d2:	e777      	b.n	63c4 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    64d4:	4e32      	ldr	r6, [pc, #200]	; (65a0 <nrfx_twim_xfer+0x308>)
    64d6:	2308      	movs	r3, #8
    64d8:	e775      	b.n	63c6 <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    64da:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    64dc:	bf44      	itt	mi
    64de:	2300      	movmi	r3, #0
    64e0:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    64e2:	067a      	lsls	r2, r7, #25
    64e4:	d406      	bmi.n	64f4 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    64e6:	2334      	movs	r3, #52	; 0x34
    64e8:	fb03 c30e 	mla	r3, r3, lr, ip
    64ec:	689a      	ldr	r2, [r3, #8]
    64ee:	f042 0202 	orr.w	r2, r2, #2
    64f2:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    64f4:	2334      	movs	r3, #52	; 0x34
    64f6:	fb03 c30e 	mla	r3, r3, lr, ip
    64fa:	689a      	ldr	r2, [r3, #8]
    64fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    6500:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6502:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    6504:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    6508:	e6de      	b.n	62c8 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    650a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    650e:	b123      	cbz	r3, 651a <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6510:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    6514:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6518:	e773      	b.n	6402 <nrfx_twim_xfer+0x16a>
    651a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    651e:	2a00      	cmp	r2, #0
    6520:	f43f af65 	beq.w	63ee <nrfx_twim_xfer+0x156>
    6524:	e773      	b.n	640e <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6526:	6220      	str	r0, [r4, #32]
    6528:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    652a:	e760      	b.n	63ee <nrfx_twim_xfer+0x156>
    652c:	2a00      	cmp	r2, #0
    652e:	d182      	bne.n	6436 <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    6530:	2b00      	cmp	r3, #0
    6532:	f43f af5c 	beq.w	63ee <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    6536:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    6538:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    653c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    6540:	fb01 c20e 	mla	r2, r1, lr, ip
    6544:	2000      	movs	r0, #0
    6546:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    654a:	b18b      	cbz	r3, 6570 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    654c:	4a15      	ldr	r2, [pc, #84]	; (65a4 <nrfx_twim_xfer+0x30c>)
    654e:	4e16      	ldr	r6, [pc, #88]	; (65a8 <nrfx_twim_xfer+0x310>)
    6550:	f013 0f01 	tst.w	r3, #1
    6554:	bf18      	it	ne
    6556:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6558:	f013 0f02 	tst.w	r3, #2
    655c:	f102 0201 	add.w	r2, r2, #1
    6560:	bf18      	it	ne
    6562:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6564:	f013 0f04 	tst.w	r3, #4
    6568:	4b10      	ldr	r3, [pc, #64]	; (65ac <nrfx_twim_xfer+0x314>)
    656a:	bf18      	it	ne
    656c:	461e      	movne	r6, r3
    656e:	e6ab      	b.n	62c8 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    6570:	067b      	lsls	r3, r7, #25
    6572:	f53f aea9 	bmi.w	62c8 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    6576:	fb0e c101 	mla	r1, lr, r1, ip
    657a:	4620      	mov	r0, r4
    657c:	f003 fcc5 	bl	9f0a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    6580:	4b09      	ldr	r3, [pc, #36]	; (65a8 <nrfx_twim_xfer+0x310>)
    6582:	2800      	cmp	r0, #0
    6584:	bf08      	it	eq
    6586:	461e      	moveq	r6, r3
    6588:	e69e      	b.n	62c8 <nrfx_twim_xfer+0x30>
    658a:	bf00      	nop
    658c:	20001770 	.word	0x20001770
    6590:	0bad000a 	.word	0x0bad000a
    6594:	019c0202 	.word	0x019c0202
    6598:	0bad000b 	.word	0x0bad000b
    659c:	0bad0000 	.word	0x0bad0000
    65a0:	0bad0004 	.word	0x0bad0004
    65a4:	0bae0000 	.word	0x0bae0000
    65a8:	0bad0001 	.word	0x0bad0001
    65ac:	0bae0002 	.word	0x0bae0002

000065b0 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    65b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65b2:	4d59      	ldr	r5, [pc, #356]	; (6718 <nrfx_twim_0_irq_handler+0x168>)
    65b4:	4c59      	ldr	r4, [pc, #356]	; (671c <nrfx_twim_0_irq_handler+0x16c>)
    65b6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    65ba:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    65bc:	b1fb      	cbz	r3, 65fe <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65be:	2300      	movs	r3, #0
    65c0:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    65c4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65c8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    65cc:	b9bb      	cbnz	r3, 65fe <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    65ce:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    65d0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    65d4:	2302      	movs	r3, #2
    65d6:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    65d8:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    65da:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65de:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    65e2:	b11b      	cbz	r3, 65ec <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    65e4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    65e8:	059e      	lsls	r6, r3, #22
    65ea:	d403      	bmi.n	65f4 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65ec:	4b4a      	ldr	r3, [pc, #296]	; (6718 <nrfx_twim_0_irq_handler+0x168>)
    65ee:	2201      	movs	r2, #1
    65f0:	621a      	str	r2, [r3, #32]
    65f2:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    65f4:	2301      	movs	r3, #1
    65f6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    65fa:	b007      	add	sp, #28
    65fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    65fe:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    6602:	2b00      	cmp	r3, #0
    6604:	d059      	beq.n	66ba <nrfx_twim_0_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6606:	2300      	movs	r3, #0
    6608:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    660c:	6a27      	ldr	r7, [r4, #32]
    660e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    6612:	067d      	lsls	r5, r7, #25
    6614:	d40a      	bmi.n	662c <nrfx_twim_0_irq_handler+0x7c>
    6616:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    661a:	b93b      	cbnz	r3, 662c <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    661c:	493f      	ldr	r1, [pc, #252]	; (671c <nrfx_twim_0_irq_handler+0x16c>)
    661e:	483e      	ldr	r0, [pc, #248]	; (6718 <nrfx_twim_0_irq_handler+0x168>)
    6620:	f003 fc73 	bl	9f0a <xfer_completeness_check>
    6624:	f080 0001 	eor.w	r0, r0, #1
    6628:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    662c:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    6630:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    6634:	d11f      	bne.n	6676 <nrfx_twim_0_irq_handler+0xc6>
            event.xfer_desc = p_cb->xfer_desc;
    6636:	4e3a      	ldr	r6, [pc, #232]	; (6720 <nrfx_twim_0_irq_handler+0x170>)
    6638:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    663a:	ad01      	add	r5, sp, #4
    663c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    663e:	6833      	ldr	r3, [r6, #0]
    6640:	602b      	str	r3, [r5, #0]
    6642:	4b35      	ldr	r3, [pc, #212]	; (6718 <nrfx_twim_0_irq_handler+0x168>)
    6644:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    6648:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    664c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    6650:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    6654:	f1bc 0f00 	cmp.w	ip, #0
    6658:	d002      	beq.n	6660 <nrfx_twim_0_irq_handler+0xb0>
    665a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    665e:	b152      	cbz	r2, 6676 <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    6660:	2200      	movs	r2, #0
    6662:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    6666:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    6668:	4a2e      	ldr	r2, [pc, #184]	; (6724 <nrfx_twim_0_irq_handler+0x174>)
    666a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    666e:	4b2e      	ldr	r3, [pc, #184]	; (6728 <nrfx_twim_0_irq_handler+0x178>)
    6670:	2208      	movs	r2, #8
    6672:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    6676:	4a28      	ldr	r2, [pc, #160]	; (6718 <nrfx_twim_0_irq_handler+0x168>)
    6678:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    667c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    6680:	0798      	lsls	r0, r3, #30
    6682:	d443      	bmi.n	670c <nrfx_twim_0_irq_handler+0x15c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    6684:	0759      	lsls	r1, r3, #29
    6686:	d443      	bmi.n	6710 <nrfx_twim_0_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    6688:	07da      	lsls	r2, r3, #31
    668a:	d443      	bmi.n	6714 <nrfx_twim_0_irq_handler+0x164>
    else if (p_cb->error)
    668c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    6690:	009b      	lsls	r3, r3, #2
    6692:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    6694:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    6698:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    669c:	b90b      	cbnz	r3, 66a2 <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    669e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    66a2:	6a23      	ldr	r3, [r4, #32]
    66a4:	075b      	lsls	r3, r3, #29
    66a6:	d503      	bpl.n	66b0 <nrfx_twim_0_irq_handler+0x100>
    66a8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    66ac:	2b00      	cmp	r3, #0
    66ae:	d0a4      	beq.n	65fa <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    66b0:	e9d4 3100 	ldrd	r3, r1, [r4]
    66b4:	4668      	mov	r0, sp
    66b6:	4798      	blx	r3
}
    66b8:	e79f      	b.n	65fa <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66ba:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    66be:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    66c2:	7b23      	ldrb	r3, [r4, #12]
    66c4:	b983      	cbnz	r3, 66e8 <nrfx_twim_0_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    66c6:	4f16      	ldr	r7, [pc, #88]	; (6720 <nrfx_twim_0_irq_handler+0x170>)
    66c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    66ca:	ae01      	add	r6, sp, #4
    66cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    66ce:	683b      	ldr	r3, [r7, #0]
    66d0:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    66d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    66d6:	2b00      	cmp	r3, #0
    66d8:	d1cd      	bne.n	6676 <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    66da:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    66de:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    66e0:	4b10      	ldr	r3, [pc, #64]	; (6724 <nrfx_twim_0_irq_handler+0x174>)
    66e2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    66e6:	e7c2      	b.n	666e <nrfx_twim_0_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    66e8:	f44f 7300 	mov.w	r3, #512	; 0x200
    66ec:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    66f0:	f240 2302 	movw	r3, #514	; 0x202
    66f4:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    66f6:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    66fa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    66fe:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    6700:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6704:	2301      	movs	r3, #1
    6706:	60ab      	str	r3, [r5, #8]
    6708:	622b      	str	r3, [r5, #32]
            return;
    670a:	e776      	b.n	65fa <nrfx_twim_0_irq_handler+0x4a>
    670c:	2301      	movs	r3, #1
    670e:	e7c1      	b.n	6694 <nrfx_twim_0_irq_handler+0xe4>
    6710:	2302      	movs	r3, #2
    6712:	e7bf      	b.n	6694 <nrfx_twim_0_irq_handler+0xe4>
    6714:	2303      	movs	r3, #3
    6716:	e7bd      	b.n	6694 <nrfx_twim_0_irq_handler+0xe4>
    6718:	40003000 	.word	0x40003000
    671c:	20001770 	.word	0x20001770
    6720:	2000177c 	.word	0x2000177c
    6724:	019c0202 	.word	0x019c0202
    6728:	e000e100 	.word	0xe000e100

0000672c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    672c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6730:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6734:	2a08      	cmp	r2, #8
    6736:	d106      	bne.n	6746 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6738:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    673c:	2b05      	cmp	r3, #5
    673e:	d804      	bhi.n	674a <nrf52_errata_187+0x1e>
    6740:	4a03      	ldr	r2, [pc, #12]	; (6750 <nrf52_errata_187+0x24>)
    6742:	5cd0      	ldrb	r0, [r2, r3]
    6744:	4770      	bx	lr
                        return false;
    6746:	2000      	movs	r0, #0
    6748:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    674a:	2001      	movs	r0, #1
}
    674c:	4770      	bx	lr
    674e:	bf00      	nop
    6750:	0000afe1 	.word	0x0000afe1

00006754 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6754:	4b05      	ldr	r3, [pc, #20]	; (676c <ep_state_access+0x18>)
    6756:	f010 0f80 	tst.w	r0, #128	; 0x80
    675a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    675e:	bf08      	it	eq
    6760:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    6762:	f000 000f 	and.w	r0, r0, #15
}
    6766:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    676a:	4770      	bx	lr
    676c:	2000194c 	.word	0x2000194c

00006770 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    6770:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    6772:	4a07      	ldr	r2, [pc, #28]	; (6790 <ev_usbreset_handler+0x20>)
    6774:	2300      	movs	r3, #0
    6776:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6778:	4a06      	ldr	r2, [pc, #24]	; (6794 <ev_usbreset_handler+0x24>)
    677a:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    677c:	2301      	movs	r3, #1
    677e:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    6780:	4b05      	ldr	r3, [pc, #20]	; (6798 <ev_usbreset_handler+0x28>)
    6782:	a801      	add	r0, sp, #4
    6784:	681b      	ldr	r3, [r3, #0]
    6786:	4798      	blx	r3
}
    6788:	b003      	add	sp, #12
    678a:	f85d fb04 	ldr.w	pc, [sp], #4
    678e:	bf00      	nop
    6790:	20001c25 	.word	0x20001c25
    6794:	20001c24 	.word	0x20001c24
    6798:	200019e4 	.word	0x200019e4

0000679c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    679c:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    679e:	4b19      	ldr	r3, [pc, #100]	; (6804 <ev_usbevent_handler+0x68>)
    67a0:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    67a4:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    67a8:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    67aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    67ae:	d508      	bpl.n	67c2 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    67b0:	4b15      	ldr	r3, [pc, #84]	; (6808 <ev_usbevent_handler+0x6c>)
    67b2:	2201      	movs	r2, #1
    67b4:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    67b6:	2302      	movs	r3, #2
    67b8:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    67ba:	4b14      	ldr	r3, [pc, #80]	; (680c <ev_usbevent_handler+0x70>)
    67bc:	a801      	add	r0, sp, #4
    67be:	681b      	ldr	r3, [r3, #0]
    67c0:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    67c2:	05a2      	lsls	r2, r4, #22
    67c4:	d508      	bpl.n	67d8 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    67c6:	4b10      	ldr	r3, [pc, #64]	; (6808 <ev_usbevent_handler+0x6c>)
    67c8:	2200      	movs	r2, #0
    67ca:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    67cc:	2303      	movs	r3, #3
    67ce:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    67d0:	4b0e      	ldr	r3, [pc, #56]	; (680c <ev_usbevent_handler+0x70>)
    67d2:	a801      	add	r0, sp, #4
    67d4:	681b      	ldr	r3, [r3, #0]
    67d6:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    67d8:	0563      	lsls	r3, r4, #21
    67da:	d510      	bpl.n	67fe <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    67dc:	4b0a      	ldr	r3, [pc, #40]	; (6808 <ev_usbevent_handler+0x6c>)
    67de:	781a      	ldrb	r2, [r3, #0]
    67e0:	b16a      	cbz	r2, 67fe <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    67e2:	2200      	movs	r2, #0
    67e4:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    67e6:	4b07      	ldr	r3, [pc, #28]	; (6804 <ev_usbevent_handler+0x68>)
    67e8:	2201      	movs	r2, #1
    67ea:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    67ee:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    67f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    67f2:	2304      	movs	r3, #4
    67f4:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    67f6:	4b05      	ldr	r3, [pc, #20]	; (680c <ev_usbevent_handler+0x70>)
    67f8:	a801      	add	r0, sp, #4
    67fa:	681b      	ldr	r3, [r3, #0]
    67fc:	4798      	blx	r3
        }
    }
}
    67fe:	b002      	add	sp, #8
    6800:	bd10      	pop	{r4, pc}
    6802:	bf00      	nop
    6804:	40027000 	.word	0x40027000
    6808:	20001c25 	.word	0x20001c25
    680c:	200019e4 	.word	0x200019e4

00006810 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    6810:	f04f 0320 	mov.w	r3, #32
    6814:	f3ef 8011 	mrs	r0, BASEPRI
    6818:	f383 8812 	msr	BASEPRI_MAX, r3
    681c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6820:	4b0a      	ldr	r3, [pc, #40]	; (684c <usbd_errata_187_211_begin+0x3c>)
    6822:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6826:	2203      	movs	r2, #3
    6828:	b961      	cbnz	r1, 6844 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    682a:	f249 3175 	movw	r1, #37749	; 0x9375
    682e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6832:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6836:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    683a:	f380 8811 	msr	BASEPRI, r0
    683e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6842:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6844:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6848:	e7f7      	b.n	683a <usbd_errata_187_211_begin+0x2a>
    684a:	bf00      	nop
    684c:	4006e000 	.word	0x4006e000

00006850 <usbd_errata_187_211_end>:
	__asm__ volatile(
    6850:	f04f 0320 	mov.w	r3, #32
    6854:	f3ef 8011 	mrs	r0, BASEPRI
    6858:	f383 8812 	msr	BASEPRI_MAX, r3
    685c:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6860:	4b0a      	ldr	r3, [pc, #40]	; (688c <usbd_errata_187_211_end+0x3c>)
    6862:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6866:	b961      	cbnz	r1, 6882 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6868:	f249 3275 	movw	r2, #37749	; 0x9375
    686c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6870:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6874:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6878:	f380 8811 	msr	BASEPRI, r0
    687c:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6880:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6882:	2200      	movs	r2, #0
    6884:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6888:	e7f6      	b.n	6878 <usbd_errata_187_211_end+0x28>
    688a:	bf00      	nop
    688c:	4006e000 	.word	0x4006e000

00006890 <nrfx_usbd_feeder_flash>:
{
    6890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6892:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6894:	4f0b      	ldr	r7, [pc, #44]	; (68c4 <nrfx_usbd_feeder_flash+0x34>)
    6896:	429a      	cmp	r2, r3
    6898:	bf28      	it	cs
    689a:	461a      	movcs	r2, r3
{
    689c:	460c      	mov	r4, r1
    689e:	4615      	mov	r5, r2
    68a0:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    68a2:	6809      	ldr	r1, [r1, #0]
    68a4:	4638      	mov	r0, r7
    68a6:	f003 f864 	bl	9972 <memcpy>
    p_next->size = tx_size;
    68aa:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    68ae:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    68b0:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    68b2:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    68b4:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    68b6:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    68b8:	6023      	str	r3, [r4, #0]
}
    68ba:	3800      	subs	r0, #0
    68bc:	bf18      	it	ne
    68be:	2001      	movne	r0, #1
    68c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68c2:	bf00      	nop
    68c4:	200017a4 	.word	0x200017a4

000068c8 <nrfx_usbd_feeder_flash_zlp>:
{
    68c8:	b570      	push	{r4, r5, r6, lr}
    68ca:	684b      	ldr	r3, [r1, #4]
    68cc:	429a      	cmp	r2, r3
    68ce:	bf28      	it	cs
    68d0:	461a      	movcs	r2, r3
    68d2:	4606      	mov	r6, r0
    68d4:	460d      	mov	r5, r1
    68d6:	4614      	mov	r4, r2
    if (tx_size != 0)
    68d8:	b182      	cbz	r2, 68fc <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    68da:	6809      	ldr	r1, [r1, #0]
    68dc:	4808      	ldr	r0, [pc, #32]	; (6900 <nrfx_usbd_feeder_flash_zlp+0x38>)
    68de:	f003 f848 	bl	9972 <memcpy>
        p_next->p_data.tx = p_buffer;
    68e2:	4b07      	ldr	r3, [pc, #28]	; (6900 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    68e4:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    68e8:	686b      	ldr	r3, [r5, #4]
    68ea:	1b1b      	subs	r3, r3, r4
    68ec:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    68ee:	682b      	ldr	r3, [r5, #0]
    68f0:	4423      	add	r3, r4
}
    68f2:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    68f4:	602b      	str	r3, [r5, #0]
}
    68f6:	bf18      	it	ne
    68f8:	2001      	movne	r0, #1
    68fa:	bd70      	pop	{r4, r5, r6, pc}
    68fc:	4613      	mov	r3, r2
    68fe:	e7f1      	b.n	68e4 <nrfx_usbd_feeder_flash_zlp+0x1c>
    6900:	200017a4 	.word	0x200017a4

00006904 <ev_sof_handler>:
{
    6904:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    6906:	2300      	movs	r3, #0
    6908:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    690c:	4b0b      	ldr	r3, [pc, #44]	; (693c <ev_sof_handler+0x38>)
    690e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    6912:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6916:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    691a:	4a09      	ldr	r2, [pc, #36]	; (6940 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    691c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    691e:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6920:	bf14      	ite	ne
    6922:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    6926:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    692a:	430b      	orrs	r3, r1
    692c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    692e:	4b05      	ldr	r3, [pc, #20]	; (6944 <ev_sof_handler+0x40>)
    6930:	a801      	add	r0, sp, #4
    6932:	681b      	ldr	r3, [r3, #0]
    6934:	4798      	blx	r3
}
    6936:	b003      	add	sp, #12
    6938:	f85d fb04 	ldr.w	pc, [sp], #4
    693c:	40027000 	.word	0x40027000
    6940:	200019e0 	.word	0x200019e0
    6944:	200019e4 	.word	0x200019e4

00006948 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6948:	4b06      	ldr	r3, [pc, #24]	; (6964 <atomic_and.constprop.0.isra.0+0x1c>)
    694a:	f3bf 8f5b 	dmb	ish
    694e:	e853 1f00 	ldrex	r1, [r3]
    6952:	4001      	ands	r1, r0
    6954:	e843 1200 	strex	r2, r1, [r3]
    6958:	2a00      	cmp	r2, #0
    695a:	d1f8      	bne.n	694e <atomic_and.constprop.0.isra.0+0x6>
    695c:	f3bf 8f5b 	dmb	ish
}
    6960:	4770      	bx	lr
    6962:	bf00      	nop
    6964:	200019dc 	.word	0x200019dc

00006968 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6968:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    696c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6970:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6972:	bf02      	ittt	eq
    6974:	4b03      	ldreq	r3, [pc, #12]	; (6984 <usbd_dma_pending_clear+0x1c>)
    6976:	2200      	moveq	r2, #0
    6978:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    697c:	4b02      	ldr	r3, [pc, #8]	; (6988 <usbd_dma_pending_clear+0x20>)
    697e:	2200      	movs	r2, #0
    6980:	701a      	strb	r2, [r3, #0]
}
    6982:	4770      	bx	lr
    6984:	40027000 	.word	0x40027000
    6988:	20001c23 	.word	0x20001c23

0000698c <nrf_usbd_ep0in_dma_handler>:
{
    698c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    698e:	f7ff ffeb 	bl	6968 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6992:	4b08      	ldr	r3, [pc, #32]	; (69b4 <nrf_usbd_ep0in_dma_handler+0x28>)
    6994:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    6998:	2a03      	cmp	r2, #3
    699a:	d105      	bne.n	69a8 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    699c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    69a0:	f06f 0001 	mvn.w	r0, #1
    69a4:	f7ff bfd0 	b.w	6948 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    69a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    69ac:	2b00      	cmp	r3, #0
    69ae:	d0f5      	beq.n	699c <nrf_usbd_ep0in_dma_handler+0x10>
}
    69b0:	bd08      	pop	{r3, pc}
    69b2:	bf00      	nop
    69b4:	200018bc 	.word	0x200018bc

000069b8 <usbd_ep_data_handler>:
{
    69b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    69ba:	2201      	movs	r2, #1
    69bc:	fa02 f501 	lsl.w	r5, r2, r1
    69c0:	491c      	ldr	r1, [pc, #112]	; (6a34 <usbd_ep_data_handler+0x7c>)
    69c2:	4e1d      	ldr	r6, [pc, #116]	; (6a38 <usbd_ep_data_handler+0x80>)
    69c4:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    69c6:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    69ca:	ea43 0305 	orr.w	r3, r3, r5
{
    69ce:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    69d0:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    69d2:	d024      	beq.n	6a1e <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    69d4:	f000 020f 	and.w	r2, r0, #15
    69d8:	4b18      	ldr	r3, [pc, #96]	; (6a3c <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    69da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    69de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69e2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    69e6:	681a      	ldr	r2, [r3, #0]
    if (ret)
    69e8:	b132      	cbz	r2, 69f8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    69ea:	2200      	movs	r2, #0
    69ec:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    69ee:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    69f0:	681b      	ldr	r3, [r3, #0]
    69f2:	d011      	beq.n	6a18 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    69f4:	f003 fb00 	bl	9ff8 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    69f8:	6833      	ldr	r3, [r6, #0]
    69fa:	402b      	ands	r3, r5
    69fc:	d10a      	bne.n	6a14 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    69fe:	2206      	movs	r2, #6
    6a00:	f88d 2004 	strb.w	r2, [sp, #4]
    6a04:	f88d 4006 	strb.w	r4, [sp, #6]
    6a08:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6a0c:	4b0c      	ldr	r3, [pc, #48]	; (6a40 <usbd_ep_data_handler+0x88>)
    6a0e:	a801      	add	r0, sp, #4
    6a10:	681b      	ldr	r3, [r3, #0]
    6a12:	4798      	blx	r3
}
    6a14:	b002      	add	sp, #8
    6a16:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    6a18:	f7ff ffb8 	bl	698c <nrf_usbd_ep0in_dma_handler>
    6a1c:	e7ec      	b.n	69f8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6a1e:	6833      	ldr	r3, [r6, #0]
    6a20:	421d      	tst	r5, r3
    6a22:	d1f7      	bne.n	6a14 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    6a24:	2306      	movs	r3, #6
    6a26:	f88d 3004 	strb.w	r3, [sp, #4]
    6a2a:	f88d 0006 	strb.w	r0, [sp, #6]
    6a2e:	f88d 2007 	strb.w	r2, [sp, #7]
    6a32:	e7eb      	b.n	6a0c <usbd_ep_data_handler+0x54>
    6a34:	200019e0 	.word	0x200019e0
    6a38:	200019dc 	.word	0x200019dc
    6a3c:	0000add6 	.word	0x0000add6
    6a40:	200019e4 	.word	0x200019e4

00006a44 <ev_setup_data_handler>:
{
    6a44:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6a46:	4b05      	ldr	r3, [pc, #20]	; (6a5c <ev_setup_data_handler+0x18>)
    6a48:	781a      	ldrb	r2, [r3, #0]
    6a4a:	4610      	mov	r0, r2
    6a4c:	f003 facb 	bl	9fe6 <ep2bit>
}
    6a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6a54:	4601      	mov	r1, r0
    6a56:	4610      	mov	r0, r2
    6a58:	f7ff bfae 	b.w	69b8 <usbd_ep_data_handler>
    6a5c:	20001c24 	.word	0x20001c24

00006a60 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6a60:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6a62:	f7ff ff81 	bl	6968 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6a66:	4b0c      	ldr	r3, [pc, #48]	; (6a98 <ev_dma_epout8_handler+0x38>)
    6a68:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6a6c:	2a03      	cmp	r2, #3
    6a6e:	d010      	beq.n	6a92 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    6a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6a74:	b96b      	cbnz	r3, 6a92 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6a76:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    6a7a:	f7ff ff65 	bl	6948 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6a7e:	2306      	movs	r3, #6
    6a80:	f88d 3004 	strb.w	r3, [sp, #4]
    6a84:	2308      	movs	r3, #8
    6a86:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6a8a:	4b04      	ldr	r3, [pc, #16]	; (6a9c <ev_dma_epout8_handler+0x3c>)
    6a8c:	a801      	add	r0, sp, #4
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6a92:	b003      	add	sp, #12
    6a94:	f85d fb04 	ldr.w	pc, [sp], #4
    6a98:	200018bc 	.word	0x200018bc
    6a9c:	200019e4 	.word	0x200019e4

00006aa0 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6aa0:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6aa2:	f7ff ff61 	bl	6968 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6aa6:	4b10      	ldr	r3, [pc, #64]	; (6ae8 <ev_dma_epin8_handler+0x48>)
    6aa8:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    6aac:	2a03      	cmp	r2, #3
    6aae:	d106      	bne.n	6abe <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6ab0:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6ab4:	b003      	add	sp, #12
    6ab6:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6aba:	f7ff bf45 	b.w	6948 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6abe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6ac2:	b96b      	cbnz	r3, 6ae0 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6ac4:	f46f 7080 	mvn.w	r0, #256	; 0x100
    6ac8:	f7ff ff3e 	bl	6948 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6acc:	2306      	movs	r3, #6
    6ace:	f88d 3004 	strb.w	r3, [sp, #4]
    6ad2:	2388      	movs	r3, #136	; 0x88
    6ad4:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6ad8:	4b04      	ldr	r3, [pc, #16]	; (6aec <ev_dma_epin8_handler+0x4c>)
    6ada:	a801      	add	r0, sp, #4
    6adc:	681b      	ldr	r3, [r3, #0]
    6ade:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6ae0:	b003      	add	sp, #12
    6ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae6:	bf00      	nop
    6ae8:	200018bc 	.word	0x200018bc
    6aec:	200019e4 	.word	0x200019e4

00006af0 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    6af0:	4a02      	ldr	r2, [pc, #8]	; (6afc <nrfx_usbd_uninit+0xc>)
    6af2:	2300      	movs	r3, #0
    6af4:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    6af6:	4a02      	ldr	r2, [pc, #8]	; (6b00 <nrfx_usbd_uninit+0x10>)
    6af8:	7013      	strb	r3, [r2, #0]
    return;
}
    6afa:	4770      	bx	lr
    6afc:	200019e4 	.word	0x200019e4
    6b00:	20001c26 	.word	0x20001c26

00006b04 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    6b04:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    6b06:	4b4c      	ldr	r3, [pc, #304]	; (6c38 <nrfx_usbd_enable+0x134>)
    6b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b0c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6b10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6b14:	f7ff fe0a 	bl	672c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6b18:	b108      	cbz	r0, 6b1e <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    6b1a:	f7ff fe79 	bl	6810 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6b22:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6b26:	2b08      	cmp	r3, #8
    6b28:	d119      	bne.n	6b5e <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    6b2a:	f04f 0320 	mov.w	r3, #32
    6b2e:	f3ef 8011 	mrs	r0, BASEPRI
    6b32:	f383 8812 	msr	BASEPRI_MAX, r3
    6b36:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6b3a:	4b40      	ldr	r3, [pc, #256]	; (6c3c <nrfx_usbd_enable+0x138>)
    6b3c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6b40:	22c0      	movs	r2, #192	; 0xc0
    6b42:	2900      	cmp	r1, #0
    6b44:	d170      	bne.n	6c28 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b46:	f249 3175 	movw	r1, #37749	; 0x9375
    6b4a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6b4e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b52:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6b56:	f380 8811 	msr	BASEPRI, r0
    6b5a:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    6b5e:	4b36      	ldr	r3, [pc, #216]	; (6c38 <nrfx_usbd_enable+0x134>)
    6b60:	2201      	movs	r2, #1
    6b62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6b66:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    6b6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    6b6e:	0512      	lsls	r2, r2, #20
    6b70:	d5fb      	bpl.n	6b6a <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    6b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b76:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6b7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6b82:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6b86:	2b08      	cmp	r3, #8
    6b88:	d118      	bne.n	6bbc <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    6b8a:	f04f 0320 	mov.w	r3, #32
    6b8e:	f3ef 8011 	mrs	r0, BASEPRI
    6b92:	f383 8812 	msr	BASEPRI_MAX, r3
    6b96:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6b9a:	4b28      	ldr	r3, [pc, #160]	; (6c3c <nrfx_usbd_enable+0x138>)
    6b9c:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6ba0:	2900      	cmp	r1, #0
    6ba2:	d144      	bne.n	6c2e <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6ba4:	f249 3275 	movw	r2, #37749	; 0x9375
    6ba8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6bac:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6bb0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6bb4:	f380 8811 	msr	BASEPRI, r0
    6bb8:	f3bf 8f6f 	isb	sy
    6bbc:	f7ff fdb6 	bl	672c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6bc0:	b130      	cbz	r0, 6bd0 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    6bc2:	f7ff fe45 	bl	6850 <usbd_errata_187_211_end>
    6bc6:	f7ff fdb1 	bl	672c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6bca:	b108      	cbz	r0, 6bd0 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    6bcc:	f7ff fe20 	bl	6810 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6bd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6bd4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6bd8:	2b08      	cmp	r3, #8
    6bda:	4b17      	ldr	r3, [pc, #92]	; (6c38 <nrfx_usbd_enable+0x134>)
    6bdc:	d10a      	bne.n	6bf4 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    6bde:	f240 72e3 	movw	r2, #2019	; 0x7e3
    6be2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    6be6:	2240      	movs	r2, #64	; 0x40
    6be8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    6bec:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6bf0:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6bf4:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    6bf6:	2280      	movs	r2, #128	; 0x80
    6bf8:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6bfc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6c00:	4b0f      	ldr	r3, [pc, #60]	; (6c40 <nrfx_usbd_enable+0x13c>)
    6c02:	f240 12ff 	movw	r2, #511	; 0x1ff
    6c06:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6c08:	4b0e      	ldr	r3, [pc, #56]	; (6c44 <nrfx_usbd_enable+0x140>)
    6c0a:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    6c0c:	f7ff feac 	bl	6968 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6c10:	4b0d      	ldr	r3, [pc, #52]	; (6c48 <nrfx_usbd_enable+0x144>)
    6c12:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    6c14:	4b0d      	ldr	r3, [pc, #52]	; (6c4c <nrfx_usbd_enable+0x148>)
    6c16:	2202      	movs	r2, #2
    6c18:	701a      	strb	r2, [r3, #0]
    6c1a:	f7ff fd87 	bl	672c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6c1e:	b150      	cbz	r0, 6c36 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    6c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    6c24:	f7ff be14 	b.w	6850 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6c28:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6c2c:	e793      	b.n	6b56 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6c2e:	2200      	movs	r2, #0
    6c30:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6c34:	e7be      	b.n	6bb4 <nrfx_usbd_enable+0xb0>
}
    6c36:	bd08      	pop	{r3, pc}
    6c38:	40027000 	.word	0x40027000
    6c3c:	4006e000 	.word	0x4006e000
    6c40:	200019e0 	.word	0x200019e0
    6c44:	200019dc 	.word	0x200019dc
    6c48:	20001c24 	.word	0x20001c24
    6c4c:	20001c26 	.word	0x20001c26

00006c50 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    6c50:	4b0a      	ldr	r3, [pc, #40]	; (6c7c <nrfx_usbd_start+0x2c>)
    6c52:	2200      	movs	r2, #0
{
    6c54:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    6c56:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    6c58:	4a09      	ldr	r2, [pc, #36]	; (6c80 <nrfx_usbd_start+0x30>)
    6c5a:	4b0a      	ldr	r3, [pc, #40]	; (6c84 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    6c5c:	4c0a      	ldr	r4, [pc, #40]	; (6c88 <nrfx_usbd_start+0x38>)
    6c5e:	2800      	cmp	r0, #0
    6c60:	bf08      	it	eq
    6c62:	4613      	moveq	r3, r2
    6c64:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    6c68:	2027      	movs	r0, #39	; 0x27
    6c6a:	f7fc fbf1 	bl	3450 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6c6e:	2301      	movs	r3, #1
    6c70:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6c74:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    6c78:	bd10      	pop	{r4, pc}
    6c7a:	bf00      	nop
    6c7c:	20001c25 	.word	0x20001c25
    6c80:	01c01407 	.word	0x01c01407
    6c84:	01e01407 	.word	0x01e01407
    6c88:	40027000 	.word	0x40027000

00006c8c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6c8c:	4b03      	ldr	r3, [pc, #12]	; (6c9c <nrfx_usbd_is_enabled+0x10>)
    6c8e:	7818      	ldrb	r0, [r3, #0]
}
    6c90:	2801      	cmp	r0, #1
    6c92:	bf94      	ite	ls
    6c94:	2000      	movls	r0, #0
    6c96:	2001      	movhi	r0, #1
    6c98:	4770      	bx	lr
    6c9a:	bf00      	nop
    6c9c:	20001c26 	.word	0x20001c26

00006ca0 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    6ca0:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ca2:	f04f 0320 	mov.w	r3, #32
    6ca6:	f3ef 8111 	mrs	r1, BASEPRI
    6caa:	f383 8812 	msr	BASEPRI_MAX, r3
    6cae:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    6cb2:	4b0f      	ldr	r3, [pc, #60]	; (6cf0 <nrfx_usbd_suspend+0x50>)
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6cba:	b193      	cbz	r3, 6ce2 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    6cbc:	4b0d      	ldr	r3, [pc, #52]	; (6cf4 <nrfx_usbd_suspend+0x54>)
    6cbe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6cc2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    6cc6:	d10c      	bne.n	6ce2 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    6cc8:	2401      	movs	r4, #1
    6cca:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6cce:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    6cd2:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6cd6:	05a4      	lsls	r4, r4, #22
    6cd8:	d504      	bpl.n	6ce4 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    6cda:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6cde:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    6ce2:	2000      	movs	r0, #0
	__asm__ volatile(
    6ce4:	f381 8811 	msr	BASEPRI, r1
    6ce8:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    6cec:	bd10      	pop	{r4, pc}
    6cee:	bf00      	nop
    6cf0:	20001c25 	.word	0x20001c25
    6cf4:	40027000 	.word	0x40027000

00006cf8 <nrfx_usbd_init>:
{
    6cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6cfa:	4b1c      	ldr	r3, [pc, #112]	; (6d6c <nrfx_usbd_init+0x74>)
    6cfc:	781c      	ldrb	r4, [r3, #0]
    6cfe:	bb94      	cbnz	r4, 6d66 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    6d00:	4a1b      	ldr	r2, [pc, #108]	; (6d70 <nrfx_usbd_init+0x78>)
    6d02:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6d04:	2201      	movs	r2, #1
    6d06:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d08:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    6d0c:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6d0e:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d12:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6d16:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d18:	bf14      	ite	ne
    6d1a:	4639      	movne	r1, r7
    6d1c:	2140      	moveq	r1, #64	; 0x40
    6d1e:	4628      	mov	r0, r5
    6d20:	f003 f999 	bl	a056 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6d24:	4628      	mov	r0, r5
    6d26:	f7ff fd15 	bl	6754 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6d2a:	3401      	adds	r4, #1
    6d2c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    6d2e:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    6d30:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    6d32:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6d34:	d1eb      	bne.n	6d0e <nrfx_usbd_init+0x16>
    6d36:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d38:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    6d3c:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d3e:	f014 0f08 	tst.w	r4, #8
    6d42:	b2e6      	uxtb	r6, r4
    6d44:	bf14      	ite	ne
    6d46:	4639      	movne	r1, r7
    6d48:	2140      	moveq	r1, #64	; 0x40
    6d4a:	4630      	mov	r0, r6
    6d4c:	f003 f983 	bl	a056 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6d50:	4630      	mov	r0, r6
    6d52:	f7ff fcff 	bl	6754 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6d56:	3401      	adds	r4, #1
    6d58:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    6d5a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    6d5c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    6d5e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6d60:	d1ed      	bne.n	6d3e <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    6d62:	4804      	ldr	r0, [pc, #16]	; (6d74 <nrfx_usbd_init+0x7c>)
}
    6d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    6d66:	4804      	ldr	r0, [pc, #16]	; (6d78 <nrfx_usbd_init+0x80>)
    6d68:	e7fc      	b.n	6d64 <nrfx_usbd_init+0x6c>
    6d6a:	bf00      	nop
    6d6c:	20001c26 	.word	0x20001c26
    6d70:	200019e4 	.word	0x200019e4
    6d74:	0bad0000 	.word	0x0bad0000
    6d78:	0bad0005 	.word	0x0bad0005

00006d7c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    6d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d80:	4604      	mov	r4, r0
	__asm__ volatile(
    6d82:	f04f 0320 	mov.w	r3, #32
    6d86:	f3ef 8611 	mrs	r6, BASEPRI
    6d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    6d8e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    6d92:	f010 090f 	ands.w	r9, r0, #15
    6d96:	d103      	bne.n	6da0 <nrfx_usbd_ep_transfer+0x24>
    6d98:	4b27      	ldr	r3, [pc, #156]	; (6e38 <nrfx_usbd_ep_transfer+0xbc>)
    6d9a:	781b      	ldrb	r3, [r3, #0]
    6d9c:	4283      	cmp	r3, r0
    6d9e:	d147      	bne.n	6e30 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6da0:	4b26      	ldr	r3, [pc, #152]	; (6e3c <nrfx_usbd_ep_transfer+0xc0>)
    6da2:	4f27      	ldr	r7, [pc, #156]	; (6e40 <nrfx_usbd_ep_transfer+0xc4>)
    6da4:	681a      	ldr	r2, [r3, #0]
    6da6:	683b      	ldr	r3, [r7, #0]
    6da8:	43d2      	mvns	r2, r2
    6daa:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    6dac:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6dae:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    6db0:	f003 f919 	bl	9fe6 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6db4:	f04f 0801 	mov.w	r8, #1
    6db8:	fa08 f800 	lsl.w	r8, r8, r0
    6dbc:	ea12 0f08 	tst.w	r2, r8
    6dc0:	d138      	bne.n	6e34 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6dc2:	4620      	mov	r0, r4
    6dc4:	f7ff fcc6 	bl	6754 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6dc8:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    6dca:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6dcc:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6dce:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    6dd2:	d529      	bpl.n	6e28 <nrfx_usbd_ep_transfer+0xac>
    6dd4:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6dd6:	6888      	ldr	r0, [r1, #8]
    6dd8:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6ddc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6de0:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6de4:	d11d      	bne.n	6e22 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6de6:	4a17      	ldr	r2, [pc, #92]	; (6e44 <nrfx_usbd_ep_transfer+0xc8>)
    6de8:	4c17      	ldr	r4, [pc, #92]	; (6e48 <nrfx_usbd_ep_transfer+0xcc>)
    6dea:	2800      	cmp	r0, #0
    6dec:	bf08      	it	eq
    6dee:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6df0:	4816      	ldr	r0, [pc, #88]	; (6e4c <nrfx_usbd_ep_transfer+0xd0>)
    6df2:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6df4:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    6df6:	c907      	ldmia	r1, {r0, r1, r2}
    6df8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    6dfc:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    6dfe:	2300      	movs	r3, #0
    6e00:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    6e02:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6e04:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    6e06:	4812      	ldr	r0, [pc, #72]	; (6e50 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6e08:	ea43 0308 	orr.w	r3, r3, r8
    6e0c:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e0e:	4b11      	ldr	r3, [pc, #68]	; (6e54 <nrfx_usbd_ep_transfer+0xd8>)
    6e10:	2280      	movs	r2, #128	; 0x80
    6e12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    6e16:	f386 8811 	msr	BASEPRI, r6
    6e1a:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6e22:	4a0d      	ldr	r2, [pc, #52]	; (6e58 <nrfx_usbd_ep_transfer+0xdc>)
    6e24:	4c0d      	ldr	r4, [pc, #52]	; (6e5c <nrfx_usbd_ep_transfer+0xe0>)
    6e26:	e7e0      	b.n	6dea <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    6e28:	4a0d      	ldr	r2, [pc, #52]	; (6e60 <nrfx_usbd_ep_transfer+0xe4>)
    6e2a:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    6e2c:	4a0d      	ldr	r2, [pc, #52]	; (6e64 <nrfx_usbd_ep_transfer+0xe8>)
    6e2e:	e7e1      	b.n	6df4 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    6e30:	480d      	ldr	r0, [pc, #52]	; (6e68 <nrfx_usbd_ep_transfer+0xec>)
    6e32:	e7f0      	b.n	6e16 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    6e34:	480d      	ldr	r0, [pc, #52]	; (6e6c <nrfx_usbd_ep_transfer+0xf0>)
    6e36:	e7ee      	b.n	6e16 <nrfx_usbd_ep_transfer+0x9a>
    6e38:	20001c24 	.word	0x20001c24
    6e3c:	200019e0 	.word	0x200019e0
    6e40:	200019dc 	.word	0x200019dc
    6e44:	00009fbf 	.word	0x00009fbf
    6e48:	00009f9d 	.word	0x00009f9d
    6e4c:	20001850 	.word	0x20001850
    6e50:	0bad0000 	.word	0x0bad0000
    6e54:	e000e100 	.word	0xe000e100
    6e58:	000068c9 	.word	0x000068c9
    6e5c:	00006891 	.word	0x00006891
    6e60:	200017e4 	.word	0x200017e4
    6e64:	00009f6b 	.word	0x00009f6b
    6e68:	0bad000a 	.word	0x0bad000a
    6e6c:	0bad000b 	.word	0x0bad000b

00006e70 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6e70:	f010 0f08 	tst.w	r0, #8
    6e74:	4b07      	ldr	r3, [pc, #28]	; (6e94 <nrfx_usbd_epout_size_get+0x24>)
    6e76:	d006      	beq.n	6e86 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    6e78:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    6e7c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6e80:	bf18      	it	ne
    6e82:	2000      	movne	r0, #0
    6e84:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6e86:	f000 000f 	and.w	r0, r0, #15
    6e8a:	f500 7094 	add.w	r0, r0, #296	; 0x128
    6e8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    6e92:	4770      	bx	lr
    6e94:	40027000 	.word	0x40027000

00006e98 <usbd_dmareq_process>:
{
    6e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    6e9c:	4e59      	ldr	r6, [pc, #356]	; (7004 <usbd_dmareq_process+0x16c>)
    6e9e:	7833      	ldrb	r3, [r6, #0]
{
    6ea0:	b085      	sub	sp, #20
    if (!m_dma_pending)
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d173      	bne.n	6f8e <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    6ea6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 7008 <usbd_dmareq_process+0x170>
    6eaa:	4d58      	ldr	r5, [pc, #352]	; (700c <usbd_dmareq_process+0x174>)
    6eac:	f8d8 4000 	ldr.w	r4, [r8]
    6eb0:	682b      	ldr	r3, [r5, #0]
    6eb2:	401c      	ands	r4, r3
    6eb4:	d06b      	beq.n	6f8e <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    6eb6:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    6eba:	bf14      	ite	ne
    6ebc:	fa93 f4a3 	rbitne	r4, r3
    6ec0:	fa94 f4a4 	rbiteq	r4, r4
    6ec4:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6ec8:	f04f 0901 	mov.w	r9, #1
    6ecc:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ed0:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6ed2:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ed6:	d95d      	bls.n	6f94 <usbd_dmareq_process+0xfc>
    6ed8:	3c10      	subs	r4, #16
    6eda:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6edc:	4620      	mov	r0, r4
    6ede:	f7ff fc39 	bl	6754 <ep_state_access>
    6ee2:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6ee4:	4620      	mov	r0, r4
    6ee6:	f7ff ffc3 	bl	6e70 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    6eea:	f8da 7000 	ldr.w	r7, [sl]
    6eee:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    6ef2:	f8da 1004 	ldr.w	r1, [sl, #4]
    6ef6:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6ef8:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    6efa:	a802      	add	r0, sp, #8
    6efc:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    6efe:	9b02      	ldr	r3, [sp, #8]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d153      	bne.n	6fac <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    6f04:	b908      	cbnz	r0, 6f0a <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    6f06:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    6f0e:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    6f10:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6f14:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    6f16:	bf02      	ittt	eq
    6f18:	4b3d      	ldreq	r3, [pc, #244]	; (7010 <usbd_dmareq_process+0x178>)
    6f1a:	2282      	moveq	r2, #130	; 0x82
    6f1c:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    6f20:	2301      	movs	r3, #1
    6f22:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    6f24:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    6f26:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    6f28:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    6f2a:	ea03 0309 	and.w	r3, r3, r9
    6f2e:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    6f30:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    6f34:	2900      	cmp	r1, #0
    6f36:	4413      	add	r3, r2
    6f38:	f8ca 3008 	str.w	r3, [sl, #8]
    6f3c:	f004 0508 	and.w	r5, r4, #8
    6f40:	4b33      	ldr	r3, [pc, #204]	; (7010 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6f42:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    6f46:	da4e      	bge.n	6fe6 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    6f48:	2d00      	cmp	r5, #0
    6f4a:	d044      	beq.n	6fd6 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    6f4c:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    6f50:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    6f54:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6f56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f5e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6f62:	2201      	movs	r2, #1
    6f64:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6f66:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6f68:	4a2a      	ldr	r2, [pc, #168]	; (7014 <usbd_dmareq_process+0x17c>)
    6f6a:	4b2b      	ldr	r3, [pc, #172]	; (7018 <usbd_dmareq_process+0x180>)
    6f6c:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    6f70:	bf38      	it	cc
    6f72:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6f74:	4926      	ldr	r1, [pc, #152]	; (7010 <usbd_dmareq_process+0x178>)
    6f76:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f7e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6f82:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    6f84:	b91a      	cbnz	r2, 6f8e <usbd_dmareq_process+0xf6>
    6f86:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    6f8a:	2a00      	cmp	r2, #0
    6f8c:	d0f9      	beq.n	6f82 <usbd_dmareq_process+0xea>
}
    6f8e:	b005      	add	sp, #20
    6f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6f94:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6f98:	4620      	mov	r0, r4
    6f9a:	f7ff fbdb 	bl	6754 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    6f9e:	6803      	ldr	r3, [r0, #0]
    6fa0:	8982      	ldrh	r2, [r0, #12]
    6fa2:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6fa4:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    6fa6:	a802      	add	r0, sp, #8
    6fa8:	4798      	blx	r3
    6faa:	e7ab      	b.n	6f04 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    6fac:	9b03      	ldr	r3, [sp, #12]
    6fae:	459b      	cmp	fp, r3
    6fb0:	d9a8      	bls.n	6f04 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6fb2:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6fb4:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6fb6:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6fba:	f7ff fcc5 	bl	6948 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fbe:	2306      	movs	r3, #6
    6fc0:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    6fc4:	4b15      	ldr	r3, [pc, #84]	; (701c <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fc6:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    6fca:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fcc:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    6fd0:	a801      	add	r0, sp, #4
    6fd2:	4798      	blx	r3
                    continue;
    6fd4:	e76a      	b.n	6eac <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    6fd6:	2514      	movs	r5, #20
    6fd8:	fb05 3304 	mla	r3, r5, r4, r3
    6fdc:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    6fe0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    6fe4:	e7b6      	b.n	6f54 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    6fe6:	b12d      	cbz	r5, 6ff4 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    6fe8:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    6fec:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    6ff0:	2328      	movs	r3, #40	; 0x28
    6ff2:	e7b0      	b.n	6f56 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    6ff4:	2514      	movs	r5, #20
    6ff6:	fb05 3304 	mla	r3, r5, r4, r3
    6ffa:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    6ffe:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    7002:	e7f5      	b.n	6ff0 <usbd_dmareq_process+0x158>
    7004:	20001c23 	.word	0x20001c23
    7008:	200019dc 	.word	0x200019dc
    700c:	200019e0 	.word	0x200019e0
    7010:	40027000 	.word	0x40027000
    7014:	0000adc4 	.word	0x0000adc4
    7018:	0000add6 	.word	0x0000add6
    701c:	200019e4 	.word	0x200019e4

00007020 <ev_epdata_handler>:
{
    7020:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    7022:	4b0f      	ldr	r3, [pc, #60]	; (7060 <ev_epdata_handler+0x40>)
    7024:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    7028:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    702c:	2501      	movs	r5, #1
    while (dataepstatus)
    702e:	b91c      	cbnz	r4, 7038 <ev_epdata_handler+0x18>
}
    7030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7034:	f7ff bf30 	b.w	6e98 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7038:	fa94 f3a4 	rbit	r3, r4
    703c:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7040:	2b0f      	cmp	r3, #15
    7042:	bfc8      	it	gt
    7044:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7048:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    704a:	bfd4      	ite	le
    704c:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    7050:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    7052:	fa05 f303 	lsl.w	r3, r5, r3
    7056:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    705a:	f7ff fcad 	bl	69b8 <usbd_ep_data_handler>
    705e:	e7e6      	b.n	702e <ev_epdata_handler+0xe>
    7060:	40027000 	.word	0x40027000

00007064 <nrf_usbd_epout_dma_handler>:
{
    7064:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    7066:	f7ff fc7f 	bl	6968 <usbd_dma_pending_clear>
{
    706a:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    706c:	f7ff fb72 	bl	6754 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7070:	7b83      	ldrb	r3, [r0, #14]
    7072:	2b03      	cmp	r3, #3
    7074:	d10d      	bne.n	7092 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7076:	4620      	mov	r0, r4
    7078:	f002 ffb5 	bl	9fe6 <ep2bit>
    707c:	2301      	movs	r3, #1
    707e:	fa03 f000 	lsl.w	r0, r3, r0
    7082:	43c0      	mvns	r0, r0
    7084:	f7ff fc60 	bl	6948 <atomic_and.constprop.0.isra.0>
}
    7088:	b003      	add	sp, #12
    708a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    708e:	f7ff bf03 	b.w	6e98 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    7092:	6805      	ldr	r5, [r0, #0]
    7094:	2d00      	cmp	r5, #0
    7096:	d1f7      	bne.n	7088 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7098:	4620      	mov	r0, r4
    709a:	f002 ffa4 	bl	9fe6 <ep2bit>
    709e:	2301      	movs	r3, #1
    70a0:	fa03 f000 	lsl.w	r0, r3, r0
    70a4:	43c0      	mvns	r0, r0
    70a6:	f7ff fc4f 	bl	6948 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70aa:	2306      	movs	r3, #6
    70ac:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    70b0:	4b04      	ldr	r3, [pc, #16]	; (70c4 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70b2:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    70b6:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70b8:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    70bc:	a801      	add	r0, sp, #4
    70be:	4798      	blx	r3
    70c0:	e7e2      	b.n	7088 <nrf_usbd_epout_dma_handler+0x24>
    70c2:	bf00      	nop
    70c4:	200019e4 	.word	0x200019e4

000070c8 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    70c8:	4b02      	ldr	r3, [pc, #8]	; (70d4 <nrfx_usbd_ep_stall+0xc>)
    70ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    70ce:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    70d2:	4770      	bx	lr
    70d4:	40027000 	.word	0x40027000

000070d8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    70d8:	0702      	lsls	r2, r0, #28
    70da:	d413      	bmi.n	7104 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    70dc:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    70e0:	f010 0f80 	tst.w	r0, #128	; 0x80
    70e4:	4a08      	ldr	r2, [pc, #32]	; (7108 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    70e6:	bf0b      	itete	eq
    70e8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    70ec:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    70f0:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    70f4:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    70f8:	bf08      	it	eq
    70fa:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    70fc:	1e43      	subs	r3, r0, #1
    70fe:	4258      	negs	r0, r3
    7100:	4158      	adcs	r0, r3
    7102:	4770      	bx	lr
        return false;
    7104:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    7106:	4770      	bx	lr
    7108:	40027000 	.word	0x40027000

0000710c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    710c:	4b04      	ldr	r3, [pc, #16]	; (7120 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    710e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    7112:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7116:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    711a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    711e:	4770      	bx	lr
    7120:	40027000 	.word	0x40027000

00007124 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    7124:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7126:	2208      	movs	r2, #8
    7128:	2100      	movs	r1, #0
{
    712a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    712c:	f002 fc2c 	bl	9988 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7130:	4b0e      	ldr	r3, [pc, #56]	; (716c <nrfx_usbd_setup_get+0x48>)
    7132:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    7136:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    7138:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    713c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    713e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7142:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    714a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    714c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    7150:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7154:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    7158:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    715a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    715e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7162:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    7166:	80e3      	strh	r3, [r4, #6]
}
    7168:	bd10      	pop	{r4, pc}
    716a:	bf00      	nop
    716c:	40027000 	.word	0x40027000

00007170 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7170:	4b02      	ldr	r3, [pc, #8]	; (717c <nrfx_usbd_setup_data_clear+0xc>)
    7172:	2201      	movs	r2, #1
    7174:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    7178:	4770      	bx	lr
    717a:	bf00      	nop
    717c:	40027000 	.word	0x40027000

00007180 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7180:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    7182:	f7ff fbf1 	bl	6968 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7186:	4b10      	ldr	r3, [pc, #64]	; (71c8 <ev_dma_epout0_handler+0x48>)
    7188:	7b9a      	ldrb	r2, [r3, #14]
    718a:	2a03      	cmp	r2, #3
    718c:	d106      	bne.n	719c <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    718e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7192:	b002      	add	sp, #8
    7194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7198:	f7ff bbd6 	b.w	6948 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    719c:	681c      	ldr	r4, [r3, #0]
    719e:	b974      	cbnz	r4, 71be <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    71a0:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    71a4:	f7ff fbd0 	bl	6948 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    71a8:	2306      	movs	r3, #6
    71aa:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    71ae:	4b07      	ldr	r3, [pc, #28]	; (71cc <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    71b0:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    71b4:	681b      	ldr	r3, [r3, #0]
    71b6:	a801      	add	r0, sp, #4
    71b8:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    71ba:	b002      	add	sp, #8
    71bc:	bd10      	pop	{r4, pc}
    71be:	b002      	add	sp, #8
    71c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    71c4:	f7ff bfd4 	b.w	7170 <nrfx_usbd_setup_data_clear>
    71c8:	200018bc 	.word	0x200018bc
    71cc:	200019e4 	.word	0x200019e4

000071d0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    71d0:	4b02      	ldr	r3, [pc, #8]	; (71dc <nrfx_usbd_setup_clear+0xc>)
    71d2:	2201      	movs	r2, #1
    71d4:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    71d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    71d8:	4770      	bx	lr
    71da:	bf00      	nop
    71dc:	40027000 	.word	0x40027000

000071e0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    71e0:	4b02      	ldr	r3, [pc, #8]	; (71ec <nrfx_usbd_setup_stall+0xc>)
    71e2:	2201      	movs	r2, #1
    71e4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    71e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    71e8:	4770      	bx	lr
    71ea:	bf00      	nop
    71ec:	40027000 	.word	0x40027000

000071f0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    71f0:	4b01      	ldr	r3, [pc, #4]	; (71f8 <nrfx_usbd_last_setup_dir_get+0x8>)
    71f2:	7818      	ldrb	r0, [r3, #0]
    71f4:	4770      	bx	lr
    71f6:	bf00      	nop
    71f8:	20001c24 	.word	0x20001c24

000071fc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    71fc:	b510      	push	{r4, lr}
    71fe:	4602      	mov	r2, r0
	__asm__ volatile(
    7200:	f04f 0320 	mov.w	r3, #32
    7204:	f3ef 8411 	mrs	r4, BASEPRI
    7208:	f383 8812 	msr	BASEPRI_MAX, r3
    720c:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7210:	f002 fee9 	bl	9fe6 <ep2bit>
    7214:	490d      	ldr	r1, [pc, #52]	; (724c <nrfx_usbd_transfer_out_drop+0x50>)
    7216:	2301      	movs	r3, #1
    7218:	fa03 f000 	lsl.w	r0, r3, r0
    721c:	680b      	ldr	r3, [r1, #0]
    721e:	ea23 0300 	bic.w	r3, r3, r0
    7222:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7224:	f012 0108 	ands.w	r1, r2, #8
    7228:	d10a      	bne.n	7240 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    722a:	f002 030f 	and.w	r3, r2, #15
    722e:	009b      	lsls	r3, r3, #2
    7230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7234:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7238:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    723c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    7240:	f384 8811 	msr	BASEPRI, r4
    7244:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7248:	bd10      	pop	{r4, pc}
    724a:	bf00      	nop
    724c:	200019e0 	.word	0x200019e0

00007250 <usbd_ep_abort>:
{
    7250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7252:	4601      	mov	r1, r0
	__asm__ volatile(
    7254:	f04f 0320 	mov.w	r3, #32
    7258:	f3ef 8511 	mrs	r5, BASEPRI
    725c:	f383 8812 	msr	BASEPRI_MAX, r3
    7260:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7264:	f7ff fa76 	bl	6754 <ep_state_access>
    7268:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    726a:	4608      	mov	r0, r1
    726c:	f002 febb 	bl	9fe6 <ep2bit>
    7270:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    7272:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7276:	fa02 f200 	lsl.w	r2, r2, r0
    727a:	482e      	ldr	r0, [pc, #184]	; (7334 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    727c:	d119      	bne.n	72b2 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    727e:	6803      	ldr	r3, [r0, #0]
    7280:	ea32 0303 	bics.w	r3, r2, r3
    7284:	d00a      	beq.n	729c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    7286:	4608      	mov	r0, r1
    7288:	f7ff ffb8 	bl	71fc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    728c:	2303      	movs	r3, #3
    728e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    7290:	f385 8811 	msr	BASEPRI, r5
    7294:	f3bf 8f6f 	isb	sy
}
    7298:	b003      	add	sp, #12
    729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    729c:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    729e:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    72a0:	4925      	ldr	r1, [pc, #148]	; (7338 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    72a2:	ea23 0302 	bic.w	r3, r3, r2
    72a6:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    72a8:	680b      	ldr	r3, [r1, #0]
    72aa:	ea23 0302 	bic.w	r3, r3, r2
    72ae:	600b      	str	r3, [r1, #0]
    72b0:	e7ec      	b.n	728c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    72b2:	070b      	lsls	r3, r1, #28
    72b4:	d415      	bmi.n	72e2 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    72b6:	2980      	cmp	r1, #128	; 0x80
    72b8:	4b20      	ldr	r3, [pc, #128]	; (733c <usbd_ep_abort+0xec>)
    72ba:	d02f      	beq.n	731c <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    72bc:	f001 040f 	and.w	r4, r1, #15
    72c0:	f204 34da 	addw	r4, r4, #986	; 0x3da
    72c4:	0064      	lsls	r4, r4, #1
    72c6:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    72ca:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72ce:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    72d2:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72d4:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72d8:	433c      	orrs	r4, r7
    72da:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    72de:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    72e2:	4f15      	ldr	r7, [pc, #84]	; (7338 <usbd_ep_abort+0xe8>)
    72e4:	6804      	ldr	r4, [r0, #0]
    72e6:	683b      	ldr	r3, [r7, #0]
    72e8:	ea64 0c03 	orn	ip, r4, r3
    72ec:	ea1c 0f02 	tst.w	ip, r2
    72f0:	d0ce      	beq.n	7290 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    72f2:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    72f4:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    72f8:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    72fa:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    72fc:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    72fe:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7300:	2303      	movs	r3, #3
    7302:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7304:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7308:	4b0d      	ldr	r3, [pc, #52]	; (7340 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    730a:	f88d 1006 	strb.w	r1, [sp, #6]
    730e:	2206      	movs	r2, #6
            m_event_handler(&evt);
    7310:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7312:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    7316:	a801      	add	r0, sp, #4
    7318:	4798      	blx	r3
    731a:	e7b9      	b.n	7290 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    731c:	f240 74b4 	movw	r4, #1972	; 0x7b4
    7320:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7324:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7328:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    732c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    732e:	f044 0404 	orr.w	r4, r4, #4
    7332:	e7d1      	b.n	72d8 <usbd_ep_abort+0x88>
    7334:	200019dc 	.word	0x200019dc
    7338:	200019e0 	.word	0x200019e0
    733c:	40027000 	.word	0x40027000
    7340:	200019e4 	.word	0x200019e4

00007344 <ev_setup_handler>:
{
    7344:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7346:	4b14      	ldr	r3, [pc, #80]	; (7398 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7348:	4c14      	ldr	r4, [pc, #80]	; (739c <ev_setup_handler+0x58>)
    734a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    734e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    7350:	4e13      	ldr	r6, [pc, #76]	; (73a0 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7352:	43da      	mvns	r2, r3
    7354:	4b13      	ldr	r3, [pc, #76]	; (73a4 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    7356:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7358:	681b      	ldr	r3, [r3, #0]
    735a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    735c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    735e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    7360:	f002 fe41 	bl	9fe6 <ep2bit>
    7364:	2301      	movs	r3, #1
    7366:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7368:	4213      	tst	r3, r2
    736a:	d002      	beq.n	7372 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    736c:	4608      	mov	r0, r1
    736e:	f7ff ff6f 	bl	7250 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    7372:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    7376:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    737a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    737c:	f7ff fae4 	bl	6948 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    7380:	6823      	ldr	r3, [r4, #0]
    7382:	f043 0301 	orr.w	r3, r3, #1
    7386:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    7388:	2305      	movs	r3, #5
    738a:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    738c:	4b06      	ldr	r3, [pc, #24]	; (73a8 <ev_setup_handler+0x64>)
    738e:	a801      	add	r0, sp, #4
    7390:	681b      	ldr	r3, [r3, #0]
    7392:	4798      	blx	r3
}
    7394:	b002      	add	sp, #8
    7396:	bd70      	pop	{r4, r5, r6, pc}
    7398:	40027000 	.word	0x40027000
    739c:	200019e0 	.word	0x200019e0
    73a0:	20001c24 	.word	0x20001c24
    73a4:	200019dc 	.word	0x200019dc
    73a8:	200019e4 	.word	0x200019e4

000073ac <nrfx_usbd_irq_handler>:
{
    73ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    73b0:	4b1a      	ldr	r3, [pc, #104]	; (741c <nrfx_usbd_irq_handler+0x70>)
    73b2:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    73b6:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    73b8:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    73ba:	461d      	mov	r5, r3
    while (to_process)
    73bc:	b970      	cbnz	r0, 73dc <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    73be:	4f18      	ldr	r7, [pc, #96]	; (7420 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    73c0:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    73c4:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    73c8:	f04f 0801 	mov.w	r8, #1
    while (active)
    73cc:	b9bc      	cbnz	r4, 73fe <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    73ce:	f7ff fd63 	bl	6e98 <usbd_dmareq_process>
    if (setup_active)
    73d2:	b306      	cbz	r6, 7416 <nrfx_usbd_irq_handler+0x6a>
}
    73d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    73d8:	f7ff bfb4 	b.w	7344 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    73dc:	fa90 f2a0 	rbit	r2, r0
    73e0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    73e4:	490f      	ldr	r1, [pc, #60]	; (7424 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    73e6:	0096      	lsls	r6, r2, #2
    73e8:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    73ea:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    73ee:	680e      	ldr	r6, [r1, #0]
    if (ret)
    73f0:	b116      	cbz	r6, 73f8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    73f2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    73f4:	6809      	ldr	r1, [r1, #0]
    73f6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    73f8:	ea20 0002 	bic.w	r0, r0, r2
    73fc:	e7de      	b.n	73bc <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    73fe:	fa94 f5a4 	rbit	r5, r4
    7402:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    7406:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    740a:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    740e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    7410:	ea24 0405 	bic.w	r4, r4, r5
    7414:	e7da      	b.n	73cc <nrfx_usbd_irq_handler+0x20>
}
    7416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    741a:	bf00      	nop
    741c:	40027000 	.word	0x40027000
    7420:	0000acbc 	.word	0x0000acbc
    7424:	40027100 	.word	0x40027100

00007428 <nrfx_usbd_stop>:
{
    7428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    742a:	4b1b      	ldr	r3, [pc, #108]	; (7498 <nrfx_usbd_stop+0x70>)
    742c:	2280      	movs	r2, #128	; 0x80
    742e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    7432:	2027      	movs	r0, #39	; 0x27
    7434:	f7fc f82e 	bl	3494 <arch_irq_is_enabled>
    7438:	b1b8      	cbz	r0, 746a <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    743a:	4e18      	ldr	r6, [pc, #96]	; (749c <nrfx_usbd_stop+0x74>)
    743c:	4b18      	ldr	r3, [pc, #96]	; (74a0 <nrfx_usbd_stop+0x78>)
    743e:	6834      	ldr	r4, [r6, #0]
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	0c24      	lsrs	r4, r4, #16
    7444:	0424      	lsls	r4, r4, #16
    7446:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    7448:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    744a:	b97c      	cbnz	r4, 746c <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    744c:	4d15      	ldr	r5, [pc, #84]	; (74a4 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    744e:	f240 13ff 	movw	r3, #511	; 0x1ff
    7452:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    7454:	2027      	movs	r0, #39	; 0x27
    7456:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    745a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    745e:	f7fc f805 	bl	346c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7466:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    746c:	fa94 f5a4 	rbit	r5, r4
    7470:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7474:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7476:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7478:	bfc6      	itte	gt
    747a:	f1a5 0010 	subgt.w	r0, r5, #16
    747e:	b2c0      	uxtbgt	r0, r0
    7480:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    7484:	0703      	lsls	r3, r0, #28
    7486:	d401      	bmi.n	748c <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    7488:	f7ff fee2 	bl	7250 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    748c:	fa07 f505 	lsl.w	r5, r7, r5
    7490:	ea24 0405 	bic.w	r4, r4, r5
    7494:	e7d9      	b.n	744a <nrfx_usbd_stop+0x22>
    7496:	bf00      	nop
    7498:	e000e100 	.word	0xe000e100
    749c:	200019e0 	.word	0x200019e0
    74a0:	200019dc 	.word	0x200019dc
    74a4:	40027000 	.word	0x40027000

000074a8 <nrfx_usbd_disable>:
{
    74a8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    74aa:	f7ff ffbd 	bl	7428 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    74ae:	4b08      	ldr	r3, [pc, #32]	; (74d0 <nrfx_usbd_disable+0x28>)
    74b0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    74b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    74b8:	2200      	movs	r2, #0
    74ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    74be:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    74c2:	f7ff fa51 	bl	6968 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    74c6:	4b03      	ldr	r3, [pc, #12]	; (74d4 <nrfx_usbd_disable+0x2c>)
    74c8:	2201      	movs	r2, #1
    74ca:	701a      	strb	r2, [r3, #0]
}
    74cc:	bd08      	pop	{r3, pc}
    74ce:	bf00      	nop
    74d0:	40027000 	.word	0x40027000
    74d4:	20001c26 	.word	0x20001c26

000074d8 <nrfx_usbd_ep_disable>:
{
    74d8:	b510      	push	{r4, lr}
    74da:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    74dc:	f7ff feb8 	bl	7250 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    74e0:	4a10      	ldr	r2, [pc, #64]	; (7524 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    74e2:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    74e6:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    74ea:	f04f 0301 	mov.w	r3, #1
    74ee:	bf14      	ite	ne
    74f0:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    74f4:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    74f8:	fa03 f300 	lsl.w	r3, r3, r0
    74fc:	ea6f 0303 	mvn.w	r3, r3
    7500:	bf15      	itete	ne
    7502:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7504:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    7506:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    750a:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    750e:	bf14      	ite	ne
    7510:	4b05      	ldrne	r3, [pc, #20]	; (7528 <nrfx_usbd_ep_disable+0x50>)
    7512:	4b06      	ldreq	r3, [pc, #24]	; (752c <nrfx_usbd_ep_disable+0x54>)
    7514:	5c1a      	ldrb	r2, [r3, r0]
    7516:	2301      	movs	r3, #1
    7518:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    751a:	4a02      	ldr	r2, [pc, #8]	; (7524 <nrfx_usbd_ep_disable+0x4c>)
    751c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7520:	bd10      	pop	{r4, pc}
    7522:	bf00      	nop
    7524:	40027000 	.word	0x40027000
    7528:	0000aff0 	.word	0x0000aff0
    752c:	0000afe7 	.word	0x0000afe7

00007530 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7530:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    7534:	b570      	push	{r4, r5, r6, lr}
    7536:	4924      	ldr	r1, [pc, #144]	; (75c8 <nrfx_usbd_ep_enable+0x98>)
    7538:	4604      	mov	r4, r0
    753a:	f000 030f 	and.w	r3, r0, #15
    753e:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7542:	d012      	beq.n	756a <nrfx_usbd_ep_enable+0x3a>
    7544:	4a21      	ldr	r2, [pc, #132]	; (75cc <nrfx_usbd_ep_enable+0x9c>)
    7546:	5cd2      	ldrb	r2, [r2, r3]
    7548:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    754c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7550:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7554:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7556:	07d0      	lsls	r0, r2, #31
    7558:	d406      	bmi.n	7568 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    755a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    755e:	fa05 f303 	lsl.w	r3, r5, r3
    7562:	4313      	orrs	r3, r2
    7564:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    7568:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    756a:	4a19      	ldr	r2, [pc, #100]	; (75d0 <nrfx_usbd_ep_enable+0xa0>)
    756c:	5cd2      	ldrb	r2, [r2, r3]
    756e:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7572:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7576:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    757a:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    757c:	07d2      	lsls	r2, r2, #31
    757e:	d4f3      	bmi.n	7568 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    7580:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    7584:	fa05 f203 	lsl.w	r2, r5, r3
    7588:	4332      	orrs	r2, r6
    758a:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    758e:	2b00      	cmp	r3, #0
    7590:	d0ea      	beq.n	7568 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    7592:	0703      	lsls	r3, r0, #28
    7594:	d4e8      	bmi.n	7568 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    7596:	f04f 0320 	mov.w	r3, #32
    759a:	f3ef 8611 	mrs	r6, BASEPRI
    759e:	f383 8812 	msr	BASEPRI_MAX, r3
    75a2:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    75a6:	f7ff fe29 	bl	71fc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    75aa:	4620      	mov	r0, r4
    75ac:	f002 fd1b 	bl	9fe6 <ep2bit>
    75b0:	4a08      	ldr	r2, [pc, #32]	; (75d4 <nrfx_usbd_ep_enable+0xa4>)
    75b2:	6813      	ldr	r3, [r2, #0]
    75b4:	fa05 f000 	lsl.w	r0, r5, r0
    75b8:	ea23 0300 	bic.w	r3, r3, r0
    75bc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    75be:	f386 8811 	msr	BASEPRI, r6
    75c2:	f3bf 8f6f 	isb	sy
}
    75c6:	e7cf      	b.n	7568 <nrfx_usbd_ep_enable+0x38>
    75c8:	40027000 	.word	0x40027000
    75cc:	0000aff0 	.word	0x0000aff0
    75d0:	0000afe7 	.word	0x0000afe7
    75d4:	200019dc 	.word	0x200019dc

000075d8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    75d8:	0603      	lsls	r3, r0, #24
{
    75da:	b510      	push	{r4, lr}
    75dc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    75de:	d405      	bmi.n	75ec <nrfx_usbd_ep_stall_clear+0x14>
    75e0:	f7ff fd7a 	bl	70d8 <nrfx_usbd_ep_stall_check>
    75e4:	b110      	cbz	r0, 75ec <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    75e6:	4620      	mov	r0, r4
    75e8:	f7ff fe08 	bl	71fc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    75ec:	4b01      	ldr	r3, [pc, #4]	; (75f4 <nrfx_usbd_ep_stall_clear+0x1c>)
    75ee:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    75f2:	bd10      	pop	{r4, pc}
    75f4:	40027000 	.word	0x40027000

000075f8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    75f8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    75fa:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    75fe:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    7600:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7602:	6002      	str	r2, [r0, #0]
}
    7604:	4802      	ldr	r0, [pc, #8]	; (7610 <nrf_gpio_pin_port_decode+0x18>)
    7606:	bf18      	it	ne
    7608:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    760c:	4770      	bx	lr
    760e:	bf00      	nop
    7610:	50000300 	.word	0x50000300

00007614 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    7614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7616:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    7618:	f002 fd50 	bl	a0bc <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    761c:	4608      	mov	r0, r1
    761e:	f002 fd4d 	bl	a0bc <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7622:	a801      	add	r0, sp, #4
    7624:	9601      	str	r6, [sp, #4]
    7626:	f7ff ffe7 	bl	75f8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    762a:	9b01      	ldr	r3, [sp, #4]
    762c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    7630:	460c      	mov	r4, r1
    7632:	f240 610d 	movw	r1, #1549	; 0x60d
    7636:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    763a:	a801      	add	r0, sp, #4
    763c:	9401      	str	r4, [sp, #4]
    763e:	f7ff ffdb 	bl	75f8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7642:	9b01      	ldr	r3, [sp, #4]
    7644:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7648:	2509      	movs	r5, #9
    764a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    764e:	2004      	movs	r0, #4
    7650:	f002 fba2 	bl	9d98 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7654:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7656:	a801      	add	r0, sp, #4
    7658:	9401      	str	r4, [sp, #4]
    765a:	f7ff ffcd 	bl	75f8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    765e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7660:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7664:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    7666:	07db      	lsls	r3, r3, #31
    7668:	d415      	bmi.n	7696 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    766a:	a801      	add	r0, sp, #4
    766c:	9601      	str	r6, [sp, #4]
    766e:	f7ff ffc3 	bl	75f8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7672:	9b01      	ldr	r3, [sp, #4]
    7674:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7678:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    767c:	2004      	movs	r0, #4
    767e:	f002 fb8b 	bl	9d98 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    7682:	4630      	mov	r0, r6
    7684:	f002 fd1a 	bl	a0bc <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    7688:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    768a:	2004      	movs	r0, #4
    768c:	f002 fb84 	bl	9d98 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7690:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    7694:	d1df      	bne.n	7656 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7696:	a801      	add	r0, sp, #4
    7698:	9401      	str	r4, [sp, #4]
    769a:	f7ff ffad 	bl	75f8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    769e:	9a01      	ldr	r2, [sp, #4]
    76a0:	2301      	movs	r3, #1
    76a2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    76a4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    76a8:	2004      	movs	r0, #4
    76aa:	f002 fb75 	bl	9d98 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    76ae:	4620      	mov	r0, r4
    76b0:	f002 fd04 	bl	a0bc <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    76b4:	2004      	movs	r0, #4
    76b6:	f002 fb6f 	bl	9d98 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76ba:	a801      	add	r0, sp, #4
    76bc:	9401      	str	r4, [sp, #4]
    76be:	f7ff ff9b 	bl	75f8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    76c2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    76c4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    76c8:	4803      	ldr	r0, [pc, #12]	; (76d8 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    76ca:	40d3      	lsrs	r3, r2
    76cc:	f003 0301 	and.w	r3, r3, #1
    76d0:	1ac0      	subs	r0, r0, r3
    76d2:	b003      	add	sp, #12
    76d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76d6:	bf00      	nop
    76d8:	0bad0001 	.word	0x0bad0001

000076dc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    76dc:	4b10      	ldr	r3, [pc, #64]	; (7720 <z_sys_init_run_level+0x44>)
{
    76de:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    76e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    76e4:	3001      	adds	r0, #1
    76e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    76ea:	42a6      	cmp	r6, r4
    76ec:	d800      	bhi.n	76f0 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    76ee:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    76f0:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    76f4:	b18d      	cbz	r5, 771a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    76f6:	4628      	mov	r0, r5
    76f8:	4798      	blx	r3
			if (rc != 0) {
    76fa:	b138      	cbz	r0, 770c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    76fc:	2800      	cmp	r0, #0
    76fe:	bfb8      	it	lt
    7700:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7702:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    7704:	28ff      	cmp	r0, #255	; 0xff
    7706:	bfa8      	it	ge
    7708:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    770a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    770c:	68ea      	ldr	r2, [r5, #12]
    770e:	7853      	ldrb	r3, [r2, #1]
    7710:	f043 0301 	orr.w	r3, r3, #1
    7714:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7716:	3408      	adds	r4, #8
    7718:	e7e7      	b.n	76ea <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    771a:	4798      	blx	r3
    771c:	e7fb      	b.n	7716 <z_sys_init_run_level+0x3a>
    771e:	bf00      	nop
    7720:	0000ad24 	.word	0x0000ad24

00007724 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7724:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7726:	4b0a      	ldr	r3, [pc, #40]	; (7750 <bg_thread_main+0x2c>)
    7728:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    772a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    772c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    772e:	f7ff ffd5 	bl	76dc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7732:	f001 f94b 	bl	89cc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    7736:	2004      	movs	r0, #4
    7738:	f7ff ffd0 	bl	76dc <z_sys_init_run_level>

	z_init_static_threads();
    773c:	f000 f95c 	bl	79f8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    7740:	f7f9 fe48 	bl	13d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7744:	4a03      	ldr	r2, [pc, #12]	; (7754 <bg_thread_main+0x30>)
    7746:	7b13      	ldrb	r3, [r2, #12]
    7748:	f023 0301 	bic.w	r3, r3, #1
    774c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    774e:	bd08      	pop	{r3, pc}
    7750:	20001c27 	.word	0x20001c27
    7754:	200005b8 	.word	0x200005b8

00007758 <z_bss_zero>:
{
    7758:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    775a:	4803      	ldr	r0, [pc, #12]	; (7768 <z_bss_zero+0x10>)
    775c:	4a03      	ldr	r2, [pc, #12]	; (776c <z_bss_zero+0x14>)
    775e:	2100      	movs	r1, #0
    7760:	1a12      	subs	r2, r2, r0
    7762:	f002 fcdf 	bl	a124 <z_early_memset>
}
    7766:	bd08      	pop	{r3, pc}
    7768:	200003d8 	.word	0x200003d8
    776c:	20001c2c 	.word	0x20001c2c

00007770 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7770:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    7772:	2300      	movs	r3, #0
{
    7774:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    7776:	2201      	movs	r2, #1
    7778:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    777c:	4e13      	ldr	r6, [pc, #76]	; (77cc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    777e:	4d14      	ldr	r5, [pc, #80]	; (77d0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7780:	9301      	str	r3, [sp, #4]
    7782:	220f      	movs	r2, #15
    7784:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7788:	4912      	ldr	r1, [pc, #72]	; (77d4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    778a:	2314      	movs	r3, #20
    778c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    7790:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    7794:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    7796:	f44f 70c0 	mov.w	r0, #384	; 0x180
    779a:	fb00 1104 	mla	r1, r0, r4, r1
    779e:	4b0e      	ldr	r3, [pc, #56]	; (77d8 <z_init_cpu+0x68>)
    77a0:	9500      	str	r5, [sp, #0]
    77a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    77a6:	4630      	mov	r0, r6
    77a8:	f000 f8c8 	bl	793c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    77ac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    77ae:	4a0b      	ldr	r2, [pc, #44]	; (77dc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    77b0:	60ee      	str	r6, [r5, #12]
    77b2:	f023 0304 	bic.w	r3, r3, #4
    77b6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    77b8:	f44f 6304 	mov.w	r3, #2112	; 0x840
    77bc:	fb04 3303 	mla	r3, r4, r3, r3
    77c0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    77c2:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    77c4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    77c6:	b006      	add	sp, #24
    77c8:	bd70      	pop	{r4, r5, r6, pc}
    77ca:	bf00      	nop
    77cc:	20000538 	.word	0x20000538
    77d0:	200019e8 	.word	0x200019e8
    77d4:	20002d00 	.word	0x20002d00
    77d8:	00007ab1 	.word	0x00007ab1
    77dc:	200024c0 	.word	0x200024c0

000077e0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    77e0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    77e2:	2000      	movs	r0, #0
{
    77e4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    77e6:	f7ff ff79 	bl	76dc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    77ea:	4b2d      	ldr	r3, [pc, #180]	; (78a0 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    77ec:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    77f0:	4d2c      	ldr	r5, [pc, #176]	; (78a4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    77f2:	4e2d      	ldr	r6, [pc, #180]	; (78a8 <z_cstart+0xc8>)
    77f4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    77f6:	4f2d      	ldr	r7, [pc, #180]	; (78ac <z_cstart+0xcc>)
    77f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    77fc:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77fe:	2400      	movs	r4, #0
    7800:	23e0      	movs	r3, #224	; 0xe0
    7802:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7806:	77ec      	strb	r4, [r5, #31]
    7808:	762c      	strb	r4, [r5, #24]
    780a:	766c      	strb	r4, [r5, #25]
    780c:	76ac      	strb	r4, [r5, #26]
    780e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7814:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7818:	626b      	str	r3, [r5, #36]	; 0x24
    781a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    781e:	f7fc f887 	bl	3930 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7822:	f7fb fdf5 	bl	3410 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    782a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    782c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    782e:	f7fc f9b9 	bl	3ba4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7832:	f7fc f91f 	bl	3a74 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7836:	f240 1301 	movw	r3, #257	; 0x101
    783a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    783e:	ab06      	add	r3, sp, #24
    7840:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7842:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    7846:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7848:	f002 fc45 	bl	a0d6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    784c:	2001      	movs	r0, #1
    784e:	f7ff ff45 	bl	76dc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7852:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    7854:	4d16      	ldr	r5, [pc, #88]	; (78b0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7856:	f7ff ff41 	bl	76dc <z_sys_init_run_level>
	z_sched_init();
    785a:	f000 fe07 	bl	846c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    785e:	4b15      	ldr	r3, [pc, #84]	; (78b4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    7860:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7862:	9305      	str	r3, [sp, #20]
    7864:	2301      	movs	r3, #1
    7866:	4914      	ldr	r1, [pc, #80]	; (78b8 <z_cstart+0xd8>)
    7868:	9400      	str	r4, [sp, #0]
    786a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    786e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7872:	463b      	mov	r3, r7
    7874:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7878:	4628      	mov	r0, r5
    787a:	f000 f85f 	bl	793c <z_setup_new_thread>
    787e:	7b6a      	ldrb	r2, [r5, #13]
    7880:	4606      	mov	r6, r0
    7882:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7886:	4628      	mov	r0, r5
    7888:	736a      	strb	r2, [r5, #13]
    788a:	f002 fde7 	bl	a45c <z_ready_thread>
	z_init_cpu(0);
    788e:	4620      	mov	r0, r4
    7890:	f7ff ff6e 	bl	7770 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7894:	463a      	mov	r2, r7
    7896:	4631      	mov	r1, r6
    7898:	4628      	mov	r0, r5
    789a:	f7fb fec7 	bl	362c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    789e:	bf00      	nop
    78a0:	20002d00 	.word	0x20002d00
    78a4:	e000ed00 	.word	0xe000ed00
    78a8:	200019e8 	.word	0x200019e8
    78ac:	00007725 	.word	0x00007725
    78b0:	200005b8 	.word	0x200005b8
    78b4:	0000b003 	.word	0x0000b003
    78b8:	20002e80 	.word	0x20002e80

000078bc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    78bc:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    78be:	4c06      	ldr	r4, [pc, #24]	; (78d8 <init_mem_slab_module+0x1c>)
    78c0:	4d06      	ldr	r5, [pc, #24]	; (78dc <init_mem_slab_module+0x20>)
	int rc = 0;
    78c2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    78c4:	42ac      	cmp	r4, r5
    78c6:	d300      	bcc.n	78ca <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    78c8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    78ca:	4620      	mov	r0, r4
    78cc:	f002 fc2e 	bl	a12c <create_free_list>
		if (rc < 0) {
    78d0:	2800      	cmp	r0, #0
    78d2:	dbf9      	blt.n	78c8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    78d4:	341c      	adds	r4, #28
    78d6:	e7f5      	b.n	78c4 <init_mem_slab_module+0x8>
    78d8:	20000250 	.word	0x20000250
    78dc:	2000026c 	.word	0x2000026c

000078e0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    78e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    78e2:	460c      	mov	r4, r1
	__asm__ volatile(
    78e4:	f04f 0520 	mov.w	r5, #32
    78e8:	f3ef 8111 	mrs	r1, BASEPRI
    78ec:	f385 8812 	msr	BASEPRI_MAX, r5
    78f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    78f4:	6945      	ldr	r5, [r0, #20]
    78f6:	b15d      	cbz	r5, 7910 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    78f8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    78fa:	682b      	ldr	r3, [r5, #0]
    78fc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    78fe:	6983      	ldr	r3, [r0, #24]
    7900:	3301      	adds	r3, #1
    7902:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7904:	2000      	movs	r0, #0
	__asm__ volatile(
    7906:	f381 8811 	msr	BASEPRI, r1
    790a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    790e:	e011      	b.n	7934 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7910:	ea52 0603 	orrs.w	r6, r2, r3
    7914:	d103      	bne.n	791e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7916:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7918:	f06f 000b 	mvn.w	r0, #11
    791c:	e7f3      	b.n	7906 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    791e:	e9cd 2300 	strd	r2, r3, [sp]
    7922:	4602      	mov	r2, r0
    7924:	3008      	adds	r0, #8
    7926:	f000 fcab 	bl	8280 <z_pend_curr>
		if (result == 0) {
    792a:	b918      	cbnz	r0, 7934 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    792c:	4b02      	ldr	r3, [pc, #8]	; (7938 <k_mem_slab_alloc+0x58>)
    792e:	689b      	ldr	r3, [r3, #8]
    7930:	695b      	ldr	r3, [r3, #20]
    7932:	6023      	str	r3, [r4, #0]
}
    7934:	b002      	add	sp, #8
    7936:	bd70      	pop	{r4, r5, r6, pc}
    7938:	200019e8 	.word	0x200019e8

0000793c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    793c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7940:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7942:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7944:	2604      	movs	r6, #4
    7946:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7948:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    794a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    794c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7950:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7952:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7954:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    795a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    795c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7960:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7962:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7966:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    796a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    796c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    796e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7970:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7974:	9202      	str	r2, [sp, #8]
    7976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7978:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    797a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    797c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    797e:	9200      	str	r2, [sp, #0]
    7980:	4642      	mov	r2, r8
{
    7982:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7984:	f7fb fe20 	bl	35c8 <arch_new_thread>
	if (!_current) {
    7988:	4b04      	ldr	r3, [pc, #16]	; (799c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    798a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    798c:	689b      	ldr	r3, [r3, #8]
    798e:	b103      	cbz	r3, 7992 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    7990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7992:	6723      	str	r3, [r4, #112]	; 0x70
}
    7994:	4640      	mov	r0, r8
    7996:	b004      	add	sp, #16
    7998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    799c:	200019e8 	.word	0x200019e8

000079a0 <z_impl_k_thread_create>:
{
    79a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79a2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79a4:	2500      	movs	r5, #0
    79a6:	9505      	str	r5, [sp, #20]
    79a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    79aa:	9504      	str	r5, [sp, #16]
    79ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    79ae:	9503      	str	r5, [sp, #12]
    79b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    79b2:	9502      	str	r5, [sp, #8]
{
    79b4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    79ba:	9501      	str	r5, [sp, #4]
    79bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    79be:	9500      	str	r5, [sp, #0]
{
    79c0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79c2:	f7ff ffbb 	bl	793c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    79c6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    79ca:	bf08      	it	eq
    79cc:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    79d0:	d005      	beq.n	79de <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    79d2:	ea56 0307 	orrs.w	r3, r6, r7
    79d6:	d105      	bne.n	79e4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    79d8:	4620      	mov	r0, r4
    79da:	f000 fcc7 	bl	836c <z_sched_start>
}
    79de:	4620      	mov	r0, r4
    79e0:	b007      	add	sp, #28
    79e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    79e4:	4903      	ldr	r1, [pc, #12]	; (79f4 <z_impl_k_thread_create+0x54>)
    79e6:	463a      	mov	r2, r7
    79e8:	4633      	mov	r3, r6
    79ea:	f104 0018 	add.w	r0, r4, #24
    79ee:	f000 fed3 	bl	8798 <z_add_timeout>
    79f2:	e7f4      	b.n	79de <z_impl_k_thread_create+0x3e>
    79f4:	0000a4c1 	.word	0x0000a4c1

000079f8 <z_init_static_threads>:
{
    79f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79fc:	4c29      	ldr	r4, [pc, #164]	; (7aa4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    79fe:	4d2a      	ldr	r5, [pc, #168]	; (7aa8 <z_init_static_threads+0xb0>)
{
    7a00:	b087      	sub	sp, #28
    7a02:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7a04:	42ae      	cmp	r6, r5
    7a06:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    7a0a:	d30f      	bcc.n	7a2c <z_init_static_threads+0x34>
	k_sched_lock();
    7a0c:	f000 fcfe 	bl	840c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a10:	4c24      	ldr	r4, [pc, #144]	; (7aa4 <z_init_static_threads+0xac>)
    7a12:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7aac <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7a16:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7a1a:	f240 37e7 	movw	r7, #999	; 0x3e7
    7a1e:	42ac      	cmp	r4, r5
    7a20:	d320      	bcc.n	7a64 <z_init_static_threads+0x6c>
}
    7a22:	b007      	add	sp, #28
    7a24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7a28:	f000 bd04 	b.w	8434 <k_sched_unlock>
		z_setup_new_thread(
    7a2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7a30:	9305      	str	r3, [sp, #20]
    7a32:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    7a36:	9304      	str	r3, [sp, #16]
    7a38:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7a3c:	9303      	str	r3, [sp, #12]
    7a3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7a42:	9302      	str	r3, [sp, #8]
    7a44:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7a48:	9301      	str	r3, [sp, #4]
    7a4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7a4e:	9300      	str	r3, [sp, #0]
    7a50:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    7a54:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    7a58:	f7ff ff70 	bl	793c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7a5c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    7a60:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7a62:	e7ce      	b.n	7a02 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7a66:	1c5a      	adds	r2, r3, #1
    7a68:	d00d      	beq.n	7a86 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7a6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7a6e:	2100      	movs	r1, #0
    7a70:	4638      	mov	r0, r7
    7a72:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a76:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7a7a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a7e:	d104      	bne.n	7a8a <z_init_static_threads+0x92>
	z_sched_start(thread);
    7a80:	4640      	mov	r0, r8
    7a82:	f000 fc73 	bl	836c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a86:	342c      	adds	r4, #44	; 0x2c
    7a88:	e7c9      	b.n	7a1e <z_init_static_threads+0x26>
    7a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a8e:	2300      	movs	r3, #0
    7a90:	f7f9 fb36 	bl	1100 <__aeabi_uldivmod>
    7a94:	4602      	mov	r2, r0
    7a96:	460b      	mov	r3, r1
    7a98:	f108 0018 	add.w	r0, r8, #24
    7a9c:	4649      	mov	r1, r9
    7a9e:	f000 fe7b 	bl	8798 <z_add_timeout>
    7aa2:	e7f0      	b.n	7a86 <z_init_static_threads+0x8e>
    7aa4:	0000aa18 	.word	0x0000aa18
    7aa8:	0000aa18 	.word	0x0000aa18
    7aac:	0000a4c1 	.word	0x0000a4c1

00007ab0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7ab0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7ab2:	4c0b      	ldr	r4, [pc, #44]	; (7ae0 <idle+0x30>)
	return !z_sys_post_kernel;
    7ab4:	4d0b      	ldr	r5, [pc, #44]	; (7ae4 <idle+0x34>)
	__asm__ volatile(
    7ab6:	f04f 0220 	mov.w	r2, #32
    7aba:	f3ef 8311 	mrs	r3, BASEPRI
    7abe:	f382 8812 	msr	BASEPRI_MAX, r2
    7ac2:	f3bf 8f6f 	isb	sy
    7ac6:	f002 fd92 	bl	a5ee <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7aca:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7acc:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7ace:	b913      	cbnz	r3, 7ad6 <idle+0x26>
	arch_cpu_idle();
    7ad0:	f7fb fca4 	bl	341c <arch_cpu_idle>
}
    7ad4:	e7ef      	b.n	7ab6 <idle+0x6>
    7ad6:	f7fa fa07 	bl	1ee8 <pm_system_suspend>
    7ada:	2800      	cmp	r0, #0
    7adc:	d1eb      	bne.n	7ab6 <idle+0x6>
    7ade:	e7f7      	b.n	7ad0 <idle+0x20>
    7ae0:	200019e8 	.word	0x200019e8
    7ae4:	20001c27 	.word	0x20001c27

00007ae8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7ae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7aec:	4604      	mov	r4, r0
    7aee:	4617      	mov	r7, r2
    7af0:	461e      	mov	r6, r3
    7af2:	f04f 0320 	mov.w	r3, #32
    7af6:	f3ef 8811 	mrs	r8, BASEPRI
    7afa:	f383 8812 	msr	BASEPRI_MAX, r3
    7afe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b02:	68c3      	ldr	r3, [r0, #12]
    7b04:	4a33      	ldr	r2, [pc, #204]	; (7bd4 <z_impl_k_mutex_lock+0xec>)
    7b06:	b17b      	cbz	r3, 7b28 <z_impl_k_mutex_lock+0x40>
    7b08:	6880      	ldr	r0, [r0, #8]
    7b0a:	6891      	ldr	r1, [r2, #8]
    7b0c:	4288      	cmp	r0, r1
    7b0e:	d019      	beq.n	7b44 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7b10:	ea57 0306 	orrs.w	r3, r7, r6
    7b14:	d118      	bne.n	7b48 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7b16:	f388 8811 	msr	BASEPRI, r8
    7b1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7b1e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7b22:	b002      	add	sp, #8
    7b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7b28:	6891      	ldr	r1, [r2, #8]
    7b2a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7b2e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7b30:	3301      	adds	r3, #1
    7b32:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7b34:	6893      	ldr	r3, [r2, #8]
    7b36:	60a3      	str	r3, [r4, #8]
    7b38:	f388 8811 	msr	BASEPRI, r8
    7b3c:	f3bf 8f6f 	isb	sy
		return 0;
    7b40:	2000      	movs	r0, #0
    7b42:	e7ee      	b.n	7b22 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    7b44:	6921      	ldr	r1, [r4, #16]
    7b46:	e7f2      	b.n	7b2e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7b48:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7b4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7b50:	4299      	cmp	r1, r3
    7b52:	bfa8      	it	ge
    7b54:	4619      	movge	r1, r3
    7b56:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7b5a:	4291      	cmp	r1, r2
    7b5c:	bfb8      	it	lt
    7b5e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7b60:	428b      	cmp	r3, r1
    7b62:	dd2e      	ble.n	7bc2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7b64:	f002 fb41 	bl	a1ea <adjust_owner_prio.isra.0>
    7b68:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7b6a:	e9cd 7600 	strd	r7, r6, [sp]
    7b6e:	481a      	ldr	r0, [pc, #104]	; (7bd8 <z_impl_k_mutex_lock+0xf0>)
    7b70:	4622      	mov	r2, r4
    7b72:	4641      	mov	r1, r8
    7b74:	f000 fb84 	bl	8280 <z_pend_curr>
	if (got_mutex == 0) {
    7b78:	2800      	cmp	r0, #0
    7b7a:	d0e1      	beq.n	7b40 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    7b7c:	f04f 0320 	mov.w	r3, #32
    7b80:	f3ef 8611 	mrs	r6, BASEPRI
    7b84:	f383 8812 	msr	BASEPRI_MAX, r3
    7b88:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    7b8c:	68a0      	ldr	r0, [r4, #8]
    7b8e:	b1d0      	cbz	r0, 7bc6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7b90:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7b92:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b94:	429c      	cmp	r4, r3
    7b96:	d00a      	beq.n	7bae <z_impl_k_mutex_lock+0xc6>
    7b98:	b14b      	cbz	r3, 7bae <z_impl_k_mutex_lock+0xc6>
    7b9a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7b9e:	4299      	cmp	r1, r3
    7ba0:	bfa8      	it	ge
    7ba2:	4619      	movge	r1, r3
    7ba4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7ba8:	4299      	cmp	r1, r3
    7baa:	bfb8      	it	lt
    7bac:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7bae:	f002 fb1c 	bl	a1ea <adjust_owner_prio.isra.0>
    7bb2:	b140      	cbz	r0, 7bc6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7bb4:	4808      	ldr	r0, [pc, #32]	; (7bd8 <z_impl_k_mutex_lock+0xf0>)
    7bb6:	4631      	mov	r1, r6
    7bb8:	f000 fbc6 	bl	8348 <z_reschedule>
	return -EAGAIN;
    7bbc:	f06f 000a 	mvn.w	r0, #10
    7bc0:	e7af      	b.n	7b22 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    7bc2:	2500      	movs	r5, #0
    7bc4:	e7d1      	b.n	7b6a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    7bc6:	2d00      	cmp	r5, #0
    7bc8:	d1f4      	bne.n	7bb4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    7bca:	f386 8811 	msr	BASEPRI, r6
    7bce:	f3bf 8f6f 	isb	sy
    7bd2:	e7f3      	b.n	7bbc <z_impl_k_mutex_lock+0xd4>
    7bd4:	200019e8 	.word	0x200019e8
    7bd8:	20001c28 	.word	0x20001c28

00007bdc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7bdc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7bde:	6883      	ldr	r3, [r0, #8]
{
    7be0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7be2:	b36b      	cbz	r3, 7c40 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7be4:	4a19      	ldr	r2, [pc, #100]	; (7c4c <z_impl_k_mutex_unlock+0x70>)
    7be6:	6892      	ldr	r2, [r2, #8]
    7be8:	4293      	cmp	r3, r2
    7bea:	d12c      	bne.n	7c46 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7bec:	68c3      	ldr	r3, [r0, #12]
    7bee:	2b01      	cmp	r3, #1
    7bf0:	d903      	bls.n	7bfa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7bf2:	3b01      	subs	r3, #1
    7bf4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7bf6:	2000      	movs	r0, #0
}
    7bf8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7bfa:	f04f 0320 	mov.w	r3, #32
    7bfe:	f3ef 8511 	mrs	r5, BASEPRI
    7c02:	f383 8812 	msr	BASEPRI_MAX, r3
    7c06:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7c0a:	6901      	ldr	r1, [r0, #16]
    7c0c:	6880      	ldr	r0, [r0, #8]
    7c0e:	f002 faec 	bl	a1ea <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7c12:	4620      	mov	r0, r4
    7c14:	f002 fc58 	bl	a4c8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7c18:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7c1a:	b158      	cbz	r0, 7c34 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    7c1c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7c20:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7c22:	2200      	movs	r2, #0
    7c24:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7c26:	f002 fc19 	bl	a45c <z_ready_thread>
		z_reschedule(&lock, key);
    7c2a:	4809      	ldr	r0, [pc, #36]	; (7c50 <z_impl_k_mutex_unlock+0x74>)
    7c2c:	4629      	mov	r1, r5
    7c2e:	f000 fb8b 	bl	8348 <z_reschedule>
    7c32:	e7e0      	b.n	7bf6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    7c34:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7c36:	f385 8811 	msr	BASEPRI, r5
    7c3a:	f3bf 8f6f 	isb	sy
    7c3e:	e7da      	b.n	7bf6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    7c40:	f06f 0015 	mvn.w	r0, #21
    7c44:	e7d8      	b.n	7bf8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    7c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7c4a:	e7d5      	b.n	7bf8 <z_impl_k_mutex_unlock+0x1c>
    7c4c:	200019e8 	.word	0x200019e8
    7c50:	20001c28 	.word	0x20001c28

00007c54 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    7c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c56:	4611      	mov	r1, r2
	__asm__ volatile(
    7c58:	f04f 0220 	mov.w	r2, #32
    7c5c:	f3ef 8511 	mrs	r5, BASEPRI
    7c60:	f382 8812 	msr	BASEPRI_MAX, r2
    7c64:	f3bf 8f6f 	isb	sy
    7c68:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7c6a:	b19c      	cbz	r4, 7c94 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7c6c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7c6e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7c70:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7c74:	4294      	cmp	r4, r2
	list->head = node;
    7c76:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7c78:	bf08      	it	eq
    7c7a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7c7c:	2101      	movs	r1, #1
    7c7e:	4620      	mov	r0, r4
    7c80:	f002 fb24 	bl	a2cc <z_queue_node_peek>
    7c84:	4604      	mov	r4, r0
	__asm__ volatile(
    7c86:	f385 8811 	msr	BASEPRI, r5
    7c8a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    7c8e:	4620      	mov	r0, r4
    7c90:	b003      	add	sp, #12
    7c92:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7c94:	ea51 0203 	orrs.w	r2, r1, r3
    7c98:	d0f5      	beq.n	7c86 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    7c9a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    7c9e:	e9cd 1300 	strd	r1, r3, [sp]
    7ca2:	4610      	mov	r0, r2
    7ca4:	4629      	mov	r1, r5
    7ca6:	f000 faeb 	bl	8280 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    7caa:	2800      	cmp	r0, #0
    7cac:	d1ef      	bne.n	7c8e <z_impl_k_queue_get+0x3a>
    7cae:	4b02      	ldr	r3, [pc, #8]	; (7cb8 <z_impl_k_queue_get+0x64>)
    7cb0:	689b      	ldr	r3, [r3, #8]
    7cb2:	695c      	ldr	r4, [r3, #20]
    7cb4:	e7eb      	b.n	7c8e <z_impl_k_queue_get+0x3a>
    7cb6:	bf00      	nop
    7cb8:	200019e8 	.word	0x200019e8

00007cbc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7cbc:	b538      	push	{r3, r4, r5, lr}
    7cbe:	4604      	mov	r4, r0
	__asm__ volatile(
    7cc0:	f04f 0320 	mov.w	r3, #32
    7cc4:	f3ef 8511 	mrs	r5, BASEPRI
    7cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    7ccc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7cd0:	f002 fbfa 	bl	a4c8 <z_unpend_first_thread>

	if (thread != NULL) {
    7cd4:	b148      	cbz	r0, 7cea <z_impl_k_sem_give+0x2e>
    7cd6:	2200      	movs	r2, #0
    7cd8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7cda:	f002 fbbf 	bl	a45c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7cde:	4629      	mov	r1, r5
    7ce0:	4805      	ldr	r0, [pc, #20]	; (7cf8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7ce6:	f000 bb2f 	b.w	8348 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7cea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7cee:	429a      	cmp	r2, r3
    7cf0:	bf18      	it	ne
    7cf2:	3301      	addne	r3, #1
    7cf4:	60a3      	str	r3, [r4, #8]
}
    7cf6:	e7f2      	b.n	7cde <z_impl_k_sem_give+0x22>
    7cf8:	20001c28 	.word	0x20001c28

00007cfc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7cfc:	b513      	push	{r0, r1, r4, lr}
    7cfe:	f04f 0420 	mov.w	r4, #32
    7d02:	f3ef 8111 	mrs	r1, BASEPRI
    7d06:	f384 8812 	msr	BASEPRI_MAX, r4
    7d0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7d0e:	6884      	ldr	r4, [r0, #8]
    7d10:	b144      	cbz	r4, 7d24 <z_impl_k_sem_take+0x28>
		sem->count--;
    7d12:	3c01      	subs	r4, #1
    7d14:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7d16:	f381 8811 	msr	BASEPRI, r1
    7d1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7d1e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7d20:	b002      	add	sp, #8
    7d22:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7d24:	ea52 0403 	orrs.w	r4, r2, r3
    7d28:	d106      	bne.n	7d38 <z_impl_k_sem_take+0x3c>
    7d2a:	f381 8811 	msr	BASEPRI, r1
    7d2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7d32:	f06f 000f 	mvn.w	r0, #15
    7d36:	e7f3      	b.n	7d20 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7d38:	e9cd 2300 	strd	r2, r3, [sp]
    7d3c:	4602      	mov	r2, r0
    7d3e:	4802      	ldr	r0, [pc, #8]	; (7d48 <z_impl_k_sem_take+0x4c>)
    7d40:	f000 fa9e 	bl	8280 <z_pend_curr>
	return ret;
    7d44:	e7ec      	b.n	7d20 <z_impl_k_sem_take+0x24>
    7d46:	bf00      	nop
    7d48:	20001c28 	.word	0x20001c28

00007d4c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    7d50:	4e4a      	ldr	r6, [pc, #296]	; (7e7c <work_queue_main+0x130>)
    7d52:	b085      	sub	sp, #20
    7d54:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    7d56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    7d5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    7d5e:	f04f 0320 	mov.w	r3, #32
    7d62:	f3ef 8711 	mrs	r7, BASEPRI
    7d66:	f383 8812 	msr	BASEPRI_MAX, r3
    7d6a:	f3bf 8f6f 	isb	sy
    7d6e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7d72:	b98d      	cbnz	r5, 7d98 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    7d74:	2102      	movs	r1, #2
    7d76:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7d7a:	f002 faca 	bl	a312 <flag_test_and_clear>
    7d7e:	2800      	cmp	r0, #0
    7d80:	d143      	bne.n	7e0a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7d82:	2300      	movs	r3, #0
    7d84:	e9cd 8900 	strd	r8, r9, [sp]
    7d88:	9302      	str	r3, [sp, #8]
    7d8a:	f104 0288 	add.w	r2, r4, #136	; 0x88
    7d8e:	4639      	mov	r1, r7
    7d90:	483b      	ldr	r0, [pc, #236]	; (7e80 <work_queue_main+0x134>)
    7d92:	f000 fc8f 	bl	86b4 <z_sched_wait>
			continue;
    7d96:	e7e2      	b.n	7d5e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7d98:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    7d9c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7d9e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7da2:	4295      	cmp	r5, r2
	list->tail = node;
    7da4:	bf08      	it	eq
    7da6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7daa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7dae:	f043 0302 	orr.w	r3, r3, #2
    7db2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7db6:	68eb      	ldr	r3, [r5, #12]
    7db8:	f023 0304 	bic.w	r3, r3, #4
    7dbc:	f043 0301 	orr.w	r3, r3, #1
    7dc0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    7dc2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    7dc4:	f387 8811 	msr	BASEPRI, r7
    7dc8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    7dcc:	4628      	mov	r0, r5
    7dce:	4798      	blx	r3
	__asm__ volatile(
    7dd0:	f04f 0320 	mov.w	r3, #32
    7dd4:	f3ef 8b11 	mrs	fp, BASEPRI
    7dd8:	f383 8812 	msr	BASEPRI_MAX, r3
    7ddc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7de0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7de2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7de4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7de8:	d419      	bmi.n	7e1e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    7dea:	60ea      	str	r2, [r5, #12]
    7dec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7df0:	f023 0302 	bic.w	r3, r3, #2
    7df4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    7df8:	f38b 8811 	msr	BASEPRI, fp
    7dfc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7e00:	05db      	lsls	r3, r3, #23
    7e02:	d4ac      	bmi.n	7d5e <work_queue_main+0x12>
	z_impl_k_yield();
    7e04:	f000 fb3a 	bl	847c <z_impl_k_yield>
}
    7e08:	e7a9      	b.n	7d5e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    7e0a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    7e0e:	2200      	movs	r2, #0
    7e10:	2101      	movs	r1, #1
    7e12:	4628      	mov	r0, r5
    7e14:	f002 fbb2 	bl	a57c <z_sched_wake>
    7e18:	2800      	cmp	r0, #0
    7e1a:	d1f8      	bne.n	7e0e <work_queue_main+0xc2>
    7e1c:	e7b1      	b.n	7d82 <work_queue_main+0x36>
	return list->head;
    7e1e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    7e20:	f023 0303 	bic.w	r3, r3, #3
    7e24:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e26:	2800      	cmp	r0, #0
    7e28:	d0e0      	beq.n	7dec <work_queue_main+0xa0>
	return node->next;
    7e2a:	2700      	movs	r7, #0
    7e2c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    7e30:	463b      	mov	r3, r7
    7e32:	2800      	cmp	r0, #0
    7e34:	d0da      	beq.n	7dec <work_queue_main+0xa0>
		if (wc->work == work) {
    7e36:	6842      	ldr	r2, [r0, #4]
    7e38:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    7e3a:	4601      	mov	r1, r0
		if (wc->work == work) {
    7e3c:	d10c      	bne.n	7e58 <work_queue_main+0x10c>
	return node->next;
    7e3e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7e40:	b99f      	cbnz	r7, 7e6a <work_queue_main+0x11e>
    7e42:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    7e44:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e46:	4282      	cmp	r2, r0
    7e48:	d100      	bne.n	7e4c <work_queue_main+0x100>
	list->tail = node;
    7e4a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    7e4c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    7e50:	f7ff ff34 	bl	7cbc <z_impl_k_sem_give>
}
    7e54:	4639      	mov	r1, r7
    7e56:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e58:	f1ba 0f00 	cmp.w	sl, #0
    7e5c:	d00b      	beq.n	7e76 <work_queue_main+0x12a>
	return node->next;
    7e5e:	f8da 2000 	ldr.w	r2, [sl]
    7e62:	4650      	mov	r0, sl
    7e64:	460f      	mov	r7, r1
    7e66:	4692      	mov	sl, r2
    7e68:	e7e3      	b.n	7e32 <work_queue_main+0xe6>
	parent->next = child;
    7e6a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e6c:	6872      	ldr	r2, [r6, #4]
    7e6e:	4282      	cmp	r2, r0
	list->tail = node;
    7e70:	bf08      	it	eq
    7e72:	6077      	streq	r7, [r6, #4]
}
    7e74:	e7ea      	b.n	7e4c <work_queue_main+0x100>
    7e76:	4652      	mov	r2, sl
    7e78:	e7f3      	b.n	7e62 <work_queue_main+0x116>
    7e7a:	bf00      	nop
    7e7c:	20001a0c 	.word	0x20001a0c
    7e80:	20001c28 	.word	0x20001c28

00007e84 <submit_to_queue_locked>:
{
    7e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    7e86:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7e88:	079a      	lsls	r2, r3, #30
{
    7e8a:	4604      	mov	r4, r0
    7e8c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7e8e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    7e92:	d42c      	bmi.n	7eee <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7e94:	075b      	lsls	r3, r3, #29
    7e96:	d41a      	bmi.n	7ece <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    7e98:	680b      	ldr	r3, [r1, #0]
    7e9a:	b90b      	cbnz	r3, 7ea0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7e9c:	6883      	ldr	r3, [r0, #8]
    7e9e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    7ea0:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7ea2:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    7ea4:	bf44      	itt	mi
    7ea6:	68a3      	ldrmi	r3, [r4, #8]
    7ea8:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    7eaa:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    7eac:	bf4c      	ite	mi
    7eae:	2602      	movmi	r6, #2
		ret = 1;
    7eb0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    7eb2:	2d00      	cmp	r5, #0
    7eb4:	d03a      	beq.n	7f2c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7eb6:	4b1f      	ldr	r3, [pc, #124]	; (7f34 <submit_to_queue_locked+0xb0>)
    7eb8:	689b      	ldr	r3, [r3, #8]
    7eba:	42ab      	cmp	r3, r5
    7ebc:	d00a      	beq.n	7ed4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    7ebe:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7ec2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7ec4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7ec8:	d414      	bmi.n	7ef4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    7eca:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    7ece:	2300      	movs	r3, #0
    7ed0:	603b      	str	r3, [r7, #0]
	return ret;
    7ed2:	e025      	b.n	7f20 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7ed4:	f002 f977 	bl	a1c6 <k_is_in_isr>
    7ed8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    7edc:	2800      	cmp	r0, #0
    7ede:	d1f0      	bne.n	7ec2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7ee0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7ee2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7ee6:	d5f0      	bpl.n	7eca <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    7ee8:	b152      	cbz	r2, 7f00 <submit_to_queue_locked+0x7c>
    7eea:	075b      	lsls	r3, r3, #29
    7eec:	d408      	bmi.n	7f00 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    7eee:	f06f 060f 	mvn.w	r6, #15
    7ef2:	e7ec      	b.n	7ece <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    7ef4:	2a00      	cmp	r2, #0
    7ef6:	d1fa      	bne.n	7eee <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    7ef8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    7efc:	2b00      	cmp	r3, #0
    7efe:	d1f6      	bne.n	7eee <submit_to_queue_locked+0x6a>
	parent->next = child;
    7f00:	2300      	movs	r3, #0
    7f02:	6023      	str	r3, [r4, #0]
	return list->tail;
    7f04:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    7f08:	b963      	cbnz	r3, 7f24 <submit_to_queue_locked+0xa0>
	list->head = node;
    7f0a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7f0e:	4628      	mov	r0, r5
    7f10:	f002 fa0a 	bl	a328 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    7f14:	68e3      	ldr	r3, [r4, #12]
    7f16:	f043 0304 	orr.w	r3, r3, #4
    7f1a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7f1c:	683b      	ldr	r3, [r7, #0]
    7f1e:	60a3      	str	r3, [r4, #8]
}
    7f20:	4630      	mov	r0, r6
    7f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7f24:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7f26:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    7f2a:	e7f0      	b.n	7f0e <submit_to_queue_locked+0x8a>
		return -EINVAL;
    7f2c:	f06f 0615 	mvn.w	r6, #21
    7f30:	e7cd      	b.n	7ece <submit_to_queue_locked+0x4a>
    7f32:	bf00      	nop
    7f34:	200019e8 	.word	0x200019e8

00007f38 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f3a:	b089      	sub	sp, #36	; 0x24
    7f3c:	4604      	mov	r4, r0
	list->head = NULL;
    7f3e:	2000      	movs	r0, #0
	list->tail = NULL;
    7f40:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    7f44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7f46:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7f4a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    7f4e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7f52:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7f56:	b31d      	cbz	r5, 7fa0 <k_work_queue_start+0x68>
    7f58:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7f5a:	2800      	cmp	r0, #0
    7f5c:	f240 1001 	movw	r0, #257	; 0x101
    7f60:	bf08      	it	eq
    7f62:	2001      	moveq	r0, #1
	*flagp = flags;
    7f64:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7f68:	2000      	movs	r0, #0
    7f6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    7f6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    7f72:	e9cd 3003 	strd	r3, r0, [sp, #12]
    7f76:	e9cd 0001 	strd	r0, r0, [sp, #4]
    7f7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    7f7e:	4b09      	ldr	r3, [pc, #36]	; (7fa4 <k_work_queue_start+0x6c>)
    7f80:	9400      	str	r4, [sp, #0]
    7f82:	4620      	mov	r0, r4
    7f84:	f7ff fd0c 	bl	79a0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    7f88:	b125      	cbz	r5, 7f94 <k_work_queue_start+0x5c>
    7f8a:	6829      	ldr	r1, [r5, #0]
    7f8c:	b111      	cbz	r1, 7f94 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    7f8e:	4620      	mov	r0, r4
    7f90:	f002 f91f 	bl	a1d2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7f94:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    7f96:	b009      	add	sp, #36	; 0x24
    7f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7f9c:	f002 b91c 	b.w	a1d8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7fa0:	2001      	movs	r0, #1
    7fa2:	e7df      	b.n	7f64 <k_work_queue_start+0x2c>
    7fa4:	00007d4d 	.word	0x00007d4d

00007fa8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    7fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7faa:	9001      	str	r0, [sp, #4]
    7fac:	4608      	mov	r0, r1
	__asm__ volatile(
    7fae:	f04f 0120 	mov.w	r1, #32
    7fb2:	f3ef 8411 	mrs	r4, BASEPRI
    7fb6:	f381 8812 	msr	BASEPRI_MAX, r1
    7fba:	f3bf 8f6f 	isb	sy
	return *flagp;
    7fbe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    7fc0:	f011 0f0e 	tst.w	r1, #14
    7fc4:	d116      	bne.n	7ff4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7fc6:	ea53 0502 	orrs.w	r5, r3, r2
    7fca:	d108      	bne.n	7fde <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    7fcc:	a901      	add	r1, sp, #4
    7fce:	f7ff ff59 	bl	7e84 <submit_to_queue_locked>
	__asm__ volatile(
    7fd2:	f384 8811 	msr	BASEPRI, r4
    7fd6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    7fda:	b003      	add	sp, #12
    7fdc:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    7fde:	f041 0108 	orr.w	r1, r1, #8
    7fe2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    7fe4:	9901      	ldr	r1, [sp, #4]
    7fe6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    7fe8:	3010      	adds	r0, #16
    7fea:	4903      	ldr	r1, [pc, #12]	; (7ff8 <k_work_schedule_for_queue+0x50>)
    7fec:	f000 fbd4 	bl	8798 <z_add_timeout>
	return ret;
    7ff0:	2001      	movs	r0, #1
    7ff2:	e7ee      	b.n	7fd2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    7ff4:	2000      	movs	r0, #0
    7ff6:	e7ec      	b.n	7fd2 <k_work_schedule_for_queue+0x2a>
    7ff8:	0000a337 	.word	0x0000a337

00007ffc <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    7ffc:	89c3      	ldrh	r3, [r0, #14]
    7ffe:	2b7f      	cmp	r3, #127	; 0x7f
    8000:	d812      	bhi.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
	int ret = slice_ticks;
    8002:	4b0a      	ldr	r3, [pc, #40]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8004:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    8006:	b163      	cbz	r3, 8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8008:	4b09      	ldr	r3, [pc, #36]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    800a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	429a      	cmp	r2, r3
    8012:	db09      	blt.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
		&& !z_is_thread_prevented_from_running(thread)
    8014:	7b43      	ldrb	r3, [r0, #13]
    8016:	06db      	lsls	r3, r3, #27
    8018:	d106      	bne.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
		&& !z_is_idle_thread_object(thread);
    801a:	4b06      	ldr	r3, [pc, #24]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    801c:	1ac3      	subs	r3, r0, r3
    801e:	bf18      	it	ne
    8020:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    8022:	f003 0001 	and.w	r0, r3, #1
    8026:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    8028:	2300      	movs	r3, #0
    802a:	e7fa      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    802c:	20001a1c 	.word	0x20001a1c
    8030:	20001a18 	.word	0x20001a18
    8034:	20000538 	.word	0x20000538

00008038 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    8038:	4b04      	ldr	r3, [pc, #16]	; (804c <slice_timeout+0x14>)
    803a:	1ac0      	subs	r0, r0, r3
    803c:	4b04      	ldr	r3, [pc, #16]	; (8050 <slice_timeout+0x18>)
    803e:	10c0      	asrs	r0, r0, #3
    8040:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    8042:	4b04      	ldr	r3, [pc, #16]	; (8054 <slice_timeout+0x1c>)
    8044:	2201      	movs	r2, #1
    8046:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    8048:	4770      	bx	lr
    804a:	bf00      	nop
    804c:	20000638 	.word	0x20000638
    8050:	aaaaaaab 	.word	0xaaaaaaab
    8054:	20001c28 	.word	0x20001c28

00008058 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    8058:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    805a:	4b0e      	ldr	r3, [pc, #56]	; (8094 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    805c:	4c0e      	ldr	r4, [pc, #56]	; (8098 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    805e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    8060:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8064:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    8068:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    806a:	4620      	mov	r0, r4
    806c:	f002 faa9 	bl	a5c2 <z_abort_timeout>
	slice_expired[cpu] = false;
    8070:	4b0a      	ldr	r3, [pc, #40]	; (809c <z_reset_time_slice+0x44>)
    8072:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    8074:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    8076:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    8078:	f7ff ffc0 	bl	7ffc <sliceable>
    807c:	b148      	cbz	r0, 8092 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    807e:	4b08      	ldr	r3, [pc, #32]	; (80a0 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    8080:	4908      	ldr	r1, [pc, #32]	; (80a4 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    8082:	681a      	ldr	r2, [r3, #0]
    8084:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    8086:	4620      	mov	r0, r4
    8088:	17d3      	asrs	r3, r2, #31
	}
}
    808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    808e:	f000 bb83 	b.w	8798 <z_add_timeout>
}
    8092:	bd70      	pop	{r4, r5, r6, pc}
    8094:	200019e8 	.word	0x200019e8
    8098:	20000638 	.word	0x20000638
    809c:	20001c28 	.word	0x20001c28
    80a0:	20001a1c 	.word	0x20001a1c
    80a4:	00008039 	.word	0x00008039

000080a8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    80a8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    80aa:	4d0d      	ldr	r5, [pc, #52]	; (80e0 <update_cache+0x38>)
    80ac:	462b      	mov	r3, r5
    80ae:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80b2:	429c      	cmp	r4, r3
    80b4:	d000      	beq.n	80b8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    80b6:	b904      	cbnz	r4, 80ba <update_cache+0x12>
    80b8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    80ba:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    80bc:	b938      	cbnz	r0, 80ce <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    80be:	7b5a      	ldrb	r2, [r3, #13]
    80c0:	06d2      	lsls	r2, r2, #27
    80c2:	d104      	bne.n	80ce <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    80c4:	69a2      	ldr	r2, [r4, #24]
    80c6:	b912      	cbnz	r2, 80ce <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    80c8:	89da      	ldrh	r2, [r3, #14]
    80ca:	2a7f      	cmp	r2, #127	; 0x7f
    80cc:	d805      	bhi.n	80da <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    80ce:	429c      	cmp	r4, r3
    80d0:	d002      	beq.n	80d8 <update_cache+0x30>
			z_reset_time_slice(thread);
    80d2:	4620      	mov	r0, r4
    80d4:	f7ff ffc0 	bl	8058 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    80d8:	4623      	mov	r3, r4
    80da:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    80dc:	bd38      	pop	{r3, r4, r5, pc}
    80de:	bf00      	nop
    80e0:	200019e8 	.word	0x200019e8

000080e4 <move_thread_to_end_of_prio_q>:
{
    80e4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    80e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    80ea:	7b43      	ldrb	r3, [r0, #13]
    80ec:	2a00      	cmp	r2, #0
{
    80ee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    80f0:	da04      	bge.n	80fc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    80f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    80f6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    80f8:	f002 f976 	bl	a3e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    80fc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    80fe:	4a15      	ldr	r2, [pc, #84]	; (8154 <move_thread_to_end_of_prio_q+0x70>)
    8100:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8104:	4610      	mov	r0, r2
    8106:	734b      	strb	r3, [r1, #13]
    8108:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    810c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    810e:	4283      	cmp	r3, r0
    8110:	bf08      	it	eq
    8112:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8114:	b923      	cbnz	r3, 8120 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    8116:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    811a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    811c:	6211      	str	r1, [r2, #32]
}
    811e:	e00c      	b.n	813a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    8120:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    8124:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    8128:	42b5      	cmp	r5, r6
    812a:	d00e      	beq.n	814a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    812c:	42ae      	cmp	r6, r5
    812e:	dd0c      	ble.n	814a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8130:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    8132:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    8136:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8138:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    813a:	6890      	ldr	r0, [r2, #8]
    813c:	1a43      	subs	r3, r0, r1
    813e:	4258      	negs	r0, r3
}
    8140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    8144:	4158      	adcs	r0, r3
    8146:	f7ff bfaf 	b.w	80a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    814a:	429c      	cmp	r4, r3
    814c:	d0e3      	beq.n	8116 <move_thread_to_end_of_prio_q+0x32>
    814e:	681b      	ldr	r3, [r3, #0]
    8150:	e7e0      	b.n	8114 <move_thread_to_end_of_prio_q+0x30>
    8152:	bf00      	nop
    8154:	200019e8 	.word	0x200019e8

00008158 <ready_thread>:
{
    8158:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    815a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    815e:	7b42      	ldrb	r2, [r0, #13]
    8160:	2b00      	cmp	r3, #0
    8162:	db29      	blt.n	81b8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8164:	06d3      	lsls	r3, r2, #27
    8166:	d127      	bne.n	81b8 <ready_thread+0x60>
	return node->next != NULL;
    8168:	6983      	ldr	r3, [r0, #24]
    816a:	bb2b      	cbnz	r3, 81b8 <ready_thread+0x60>
	return list->head == list;
    816c:	4913      	ldr	r1, [pc, #76]	; (81bc <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    816e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8172:	7342      	strb	r2, [r0, #13]
    8174:	460a      	mov	r2, r1
    8176:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    817a:	4294      	cmp	r4, r2
    817c:	bf18      	it	ne
    817e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    8180:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8182:	b923      	cbnz	r3, 818e <ready_thread+0x36>
	node->prev = tail;
    8184:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    8188:	6020      	str	r0, [r4, #0]
	list->tail = node;
    818a:	6208      	str	r0, [r1, #32]
}
    818c:	e00c      	b.n	81a8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    818e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    8192:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    8196:	42b5      	cmp	r5, r6
    8198:	d00a      	beq.n	81b0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    819a:	42ae      	cmp	r6, r5
    819c:	dd08      	ble.n	81b0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    819e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    81a0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    81a4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    81a6:	6058      	str	r0, [r3, #4]
}
    81a8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    81aa:	2000      	movs	r0, #0
    81ac:	f7ff bf7c 	b.w	80a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    81b0:	42a3      	cmp	r3, r4
    81b2:	d0e7      	beq.n	8184 <ready_thread+0x2c>
    81b4:	681b      	ldr	r3, [r3, #0]
    81b6:	e7e4      	b.n	8182 <ready_thread+0x2a>
}
    81b8:	bc70      	pop	{r4, r5, r6}
    81ba:	4770      	bx	lr
    81bc:	200019e8 	.word	0x200019e8

000081c0 <unready_thread>:
{
    81c0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    81c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    81c6:	7b43      	ldrb	r3, [r0, #13]
    81c8:	2a00      	cmp	r2, #0
{
    81ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    81cc:	da04      	bge.n	81d8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    81d4:	f002 f908 	bl	a3e8 <sys_dlist_remove>
	update_cache(thread == _current);
    81d8:	4b04      	ldr	r3, [pc, #16]	; (81ec <unready_thread+0x2c>)
    81da:	6898      	ldr	r0, [r3, #8]
    81dc:	1a43      	subs	r3, r0, r1
    81de:	4258      	negs	r0, r3
    81e0:	4158      	adcs	r0, r3
}
    81e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    81e6:	f7ff bf5f 	b.w	80a8 <update_cache>
    81ea:	bf00      	nop
    81ec:	200019e8 	.word	0x200019e8

000081f0 <pend_locked>:
{
    81f0:	b570      	push	{r4, r5, r6, lr}
    81f2:	4615      	mov	r5, r2
    81f4:	461c      	mov	r4, r3
    81f6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    81f8:	f002 f908 	bl	a40c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    81fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8200:	bf08      	it	eq
    8202:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8206:	d008      	beq.n	821a <pend_locked+0x2a>
    8208:	462a      	mov	r2, r5
    820a:	4623      	mov	r3, r4
    820c:	f106 0018 	add.w	r0, r6, #24
    8210:	4902      	ldr	r1, [pc, #8]	; (821c <pend_locked+0x2c>)
}
    8212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8216:	f000 babf 	b.w	8798 <z_add_timeout>
    821a:	bd70      	pop	{r4, r5, r6, pc}
    821c:	0000a4c1 	.word	0x0000a4c1

00008220 <z_time_slice>:
{
    8220:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8222:	f04f 0320 	mov.w	r3, #32
    8226:	f3ef 8511 	mrs	r5, BASEPRI
    822a:	f383 8812 	msr	BASEPRI_MAX, r3
    822e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    8232:	4b10      	ldr	r3, [pc, #64]	; (8274 <z_time_slice+0x54>)
	if (pending_current == curr) {
    8234:	4a10      	ldr	r2, [pc, #64]	; (8278 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    8236:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    8238:	6810      	ldr	r0, [r2, #0]
    823a:	42a0      	cmp	r0, r4
    823c:	d106      	bne.n	824c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    823e:	f7ff ff0b 	bl	8058 <z_reset_time_slice>
	__asm__ volatile(
    8242:	f385 8811 	msr	BASEPRI, r5
    8246:	f3bf 8f6f 	isb	sy
}
    824a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    824c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    824e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    8250:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    8252:	4a0a      	ldr	r2, [pc, #40]	; (827c <z_time_slice+0x5c>)
    8254:	5cd3      	ldrb	r3, [r2, r3]
    8256:	2b00      	cmp	r3, #0
    8258:	d0f3      	beq.n	8242 <z_time_slice+0x22>
    825a:	4620      	mov	r0, r4
    825c:	f7ff fece 	bl	7ffc <sliceable>
    8260:	2800      	cmp	r0, #0
    8262:	d0ee      	beq.n	8242 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    8264:	7b63      	ldrb	r3, [r4, #13]
    8266:	06db      	lsls	r3, r3, #27
    8268:	d102      	bne.n	8270 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    826a:	4620      	mov	r0, r4
    826c:	f7ff ff3a 	bl	80e4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    8270:	4620      	mov	r0, r4
    8272:	e7e4      	b.n	823e <z_time_slice+0x1e>
    8274:	200019e8 	.word	0x200019e8
    8278:	20001a14 	.word	0x20001a14
    827c:	20001c28 	.word	0x20001c28

00008280 <z_pend_curr>:
{
    8280:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    8282:	480c      	ldr	r0, [pc, #48]	; (82b4 <z_pend_curr+0x34>)
    8284:	4d0c      	ldr	r5, [pc, #48]	; (82b8 <z_pend_curr+0x38>)
    8286:	6886      	ldr	r6, [r0, #8]
    8288:	602e      	str	r6, [r5, #0]
{
    828a:	460c      	mov	r4, r1
    828c:	4611      	mov	r1, r2
    828e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    8292:	f04f 0620 	mov.w	r6, #32
    8296:	f3ef 8511 	mrs	r5, BASEPRI
    829a:	f386 8812 	msr	BASEPRI_MAX, r6
    829e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    82a2:	6880      	ldr	r0, [r0, #8]
    82a4:	f7ff ffa4 	bl	81f0 <pend_locked>
	ret = arch_swap(key);
    82a8:	4620      	mov	r0, r4
}
    82aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82ae:	f7fb b937 	b.w	3520 <arch_swap>
    82b2:	bf00      	nop
    82b4:	200019e8 	.word	0x200019e8
    82b8:	20001a14 	.word	0x20001a14

000082bc <z_set_prio>:
{
    82bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82be:	4604      	mov	r4, r0
    82c0:	f04f 0320 	mov.w	r3, #32
    82c4:	f3ef 8611 	mrs	r6, BASEPRI
    82c8:	f383 8812 	msr	BASEPRI_MAX, r3
    82cc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    82d0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    82d2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    82d4:	b249      	sxtb	r1, r1
    82d6:	d119      	bne.n	830c <z_set_prio+0x50>
	return node->next != NULL;
    82d8:	6985      	ldr	r5, [r0, #24]
    82da:	b9bd      	cbnz	r5, 830c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    82e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    82e2:	f002 f881 	bl	a3e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    82e6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    82e8:	4a16      	ldr	r2, [pc, #88]	; (8344 <z_set_prio+0x88>)
				thread->base.prio = prio;
    82ea:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    82ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    82f0:	7343      	strb	r3, [r0, #13]
    82f2:	4613      	mov	r3, r2
    82f4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82f8:	4298      	cmp	r0, r3
    82fa:	bf18      	it	ne
    82fc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    82fe:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8300:	b95d      	cbnz	r5, 831a <z_set_prio+0x5e>
	node->prev = tail;
    8302:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    8306:	6004      	str	r4, [r0, #0]
	list->tail = node;
    8308:	6214      	str	r4, [r2, #32]
}
    830a:	e011      	b.n	8330 <z_set_prio+0x74>
			thread->base.prio = prio;
    830c:	73a1      	strb	r1, [r4, #14]
    830e:	2000      	movs	r0, #0
	__asm__ volatile(
    8310:	f386 8811 	msr	BASEPRI, r6
    8314:	f3bf 8f6f 	isb	sy
}
    8318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    831a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    831e:	42b9      	cmp	r1, r7
    8320:	d00b      	beq.n	833a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8322:	428f      	cmp	r7, r1
    8324:	dd09      	ble.n	833a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    8326:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    8328:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    832c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    832e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8330:	2001      	movs	r0, #1
    8332:	f7ff feb9 	bl	80a8 <update_cache>
    8336:	2001      	movs	r0, #1
    8338:	e7ea      	b.n	8310 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    833a:	42a8      	cmp	r0, r5
    833c:	d0e1      	beq.n	8302 <z_set_prio+0x46>
    833e:	682d      	ldr	r5, [r5, #0]
    8340:	e7de      	b.n	8300 <z_set_prio+0x44>
    8342:	bf00      	nop
    8344:	200019e8 	.word	0x200019e8

00008348 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8348:	b949      	cbnz	r1, 835e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    834a:	f3ef 8005 	mrs	r0, IPSR
    834e:	b930      	cbnz	r0, 835e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8350:	4b05      	ldr	r3, [pc, #20]	; (8368 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    8352:	699a      	ldr	r2, [r3, #24]
    8354:	689b      	ldr	r3, [r3, #8]
    8356:	429a      	cmp	r2, r3
    8358:	d001      	beq.n	835e <z_reschedule+0x16>
    835a:	f7fb b8e1 	b.w	3520 <arch_swap>
    835e:	f381 8811 	msr	BASEPRI, r1
    8362:	f3bf 8f6f 	isb	sy
}
    8366:	4770      	bx	lr
    8368:	200019e8 	.word	0x200019e8

0000836c <z_sched_start>:
{
    836c:	b510      	push	{r4, lr}
	__asm__ volatile(
    836e:	f04f 0220 	mov.w	r2, #32
    8372:	f3ef 8411 	mrs	r4, BASEPRI
    8376:	f382 8812 	msr	BASEPRI_MAX, r2
    837a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    837e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    8380:	0751      	lsls	r1, r2, #29
    8382:	d404      	bmi.n	838e <z_sched_start+0x22>
	__asm__ volatile(
    8384:	f384 8811 	msr	BASEPRI, r4
    8388:	f3bf 8f6f 	isb	sy
}
    838c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    838e:	f022 0204 	bic.w	r2, r2, #4
    8392:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    8394:	f7ff fee0 	bl	8158 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8398:	4621      	mov	r1, r4
    839a:	4802      	ldr	r0, [pc, #8]	; (83a4 <z_sched_start+0x38>)
}
    839c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    83a0:	f7ff bfd2 	b.w	8348 <z_reschedule>
    83a4:	20001c29 	.word	0x20001c29

000083a8 <z_impl_k_thread_suspend>:
{
    83a8:	b570      	push	{r4, r5, r6, lr}
    83aa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    83ac:	3018      	adds	r0, #24
    83ae:	f002 f908 	bl	a5c2 <z_abort_timeout>
	__asm__ volatile(
    83b2:	f04f 0320 	mov.w	r3, #32
    83b6:	f3ef 8611 	mrs	r6, BASEPRI
    83ba:	f383 8812 	msr	BASEPRI_MAX, r3
    83be:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    83c2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    83c6:	7b63      	ldrb	r3, [r4, #13]
    83c8:	2a00      	cmp	r2, #0
    83ca:	da05      	bge.n	83d8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83d0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    83d2:	4620      	mov	r0, r4
    83d4:	f002 f808 	bl	a3e8 <sys_dlist_remove>
		update_cache(thread == _current);
    83d8:	4d0b      	ldr	r5, [pc, #44]	; (8408 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    83da:	7b63      	ldrb	r3, [r4, #13]
    83dc:	68a8      	ldr	r0, [r5, #8]
    83de:	f043 0310 	orr.w	r3, r3, #16
    83e2:	7363      	strb	r3, [r4, #13]
    83e4:	1b03      	subs	r3, r0, r4
    83e6:	4258      	negs	r0, r3
    83e8:	4158      	adcs	r0, r3
    83ea:	f7ff fe5d 	bl	80a8 <update_cache>
	__asm__ volatile(
    83ee:	f386 8811 	msr	BASEPRI, r6
    83f2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    83f6:	68ab      	ldr	r3, [r5, #8]
    83f8:	42a3      	cmp	r3, r4
    83fa:	d103      	bne.n	8404 <z_impl_k_thread_suspend+0x5c>
}
    83fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8400:	f002 b8a2 	b.w	a548 <z_reschedule_unlocked>
}
    8404:	bd70      	pop	{r4, r5, r6, pc}
    8406:	bf00      	nop
    8408:	200019e8 	.word	0x200019e8

0000840c <k_sched_lock>:
	__asm__ volatile(
    840c:	f04f 0320 	mov.w	r3, #32
    8410:	f3ef 8111 	mrs	r1, BASEPRI
    8414:	f383 8812 	msr	BASEPRI_MAX, r3
    8418:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    841c:	4b04      	ldr	r3, [pc, #16]	; (8430 <k_sched_lock+0x24>)
    841e:	689a      	ldr	r2, [r3, #8]
    8420:	7bd3      	ldrb	r3, [r2, #15]
    8422:	3b01      	subs	r3, #1
    8424:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8426:	f381 8811 	msr	BASEPRI, r1
    842a:	f3bf 8f6f 	isb	sy
}
    842e:	4770      	bx	lr
    8430:	200019e8 	.word	0x200019e8

00008434 <k_sched_unlock>:
{
    8434:	b510      	push	{r4, lr}
	__asm__ volatile(
    8436:	f04f 0320 	mov.w	r3, #32
    843a:	f3ef 8411 	mrs	r4, BASEPRI
    843e:	f383 8812 	msr	BASEPRI_MAX, r3
    8442:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    8446:	4b08      	ldr	r3, [pc, #32]	; (8468 <k_sched_unlock+0x34>)
    8448:	689a      	ldr	r2, [r3, #8]
    844a:	7bd3      	ldrb	r3, [r2, #15]
    844c:	3301      	adds	r3, #1
    844e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8450:	2000      	movs	r0, #0
    8452:	f7ff fe29 	bl	80a8 <update_cache>
	__asm__ volatile(
    8456:	f384 8811 	msr	BASEPRI, r4
    845a:	f3bf 8f6f 	isb	sy
}
    845e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    8462:	f002 b871 	b.w	a548 <z_reschedule_unlocked>
    8466:	bf00      	nop
    8468:	200019e8 	.word	0x200019e8

0000846c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    846c:	4b02      	ldr	r3, [pc, #8]	; (8478 <z_sched_init+0xc>)
    846e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    8472:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    8476:	4770      	bx	lr
    8478:	200019e8 	.word	0x200019e8

0000847c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    847e:	f04f 0320 	mov.w	r3, #32
    8482:	f3ef 8511 	mrs	r5, BASEPRI
    8486:	f383 8812 	msr	BASEPRI_MAX, r3
    848a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    848e:	4919      	ldr	r1, [pc, #100]	; (84f4 <z_impl_k_yield+0x78>)
    8490:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8492:	7b43      	ldrb	r3, [r0, #13]
    8494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8498:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    849a:	f001 ffa5 	bl	a3e8 <sys_dlist_remove>
	}
	queue_thread(_current);
    849e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    84a0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    84a2:	4608      	mov	r0, r1
    84a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    84a8:	735a      	strb	r2, [r3, #13]
    84aa:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    84ae:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84b0:	4282      	cmp	r2, r0
    84b2:	bf08      	it	eq
    84b4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84b6:	b922      	cbnz	r2, 84c2 <z_impl_k_yield+0x46>
	node->prev = tail;
    84b8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    84bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
    84be:	620b      	str	r3, [r1, #32]
}
    84c0:	e00c      	b.n	84dc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    84c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    84c6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    84ca:	42be      	cmp	r6, r7
    84cc:	d00e      	beq.n	84ec <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    84ce:	42b7      	cmp	r7, r6
    84d0:	dd0c      	ble.n	84ec <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    84d2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    84d4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    84d8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    84da:	6053      	str	r3, [r2, #4]
	update_cache(1);
    84dc:	2001      	movs	r0, #1
    84de:	f7ff fde3 	bl	80a8 <update_cache>
    84e2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    84e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    84e8:	f7fb b81a 	b.w	3520 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    84ec:	42a2      	cmp	r2, r4
    84ee:	d0e3      	beq.n	84b8 <z_impl_k_yield+0x3c>
    84f0:	6812      	ldr	r2, [r2, #0]
    84f2:	e7e0      	b.n	84b6 <z_impl_k_yield+0x3a>
    84f4:	200019e8 	.word	0x200019e8

000084f8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    84f8:	ea50 0301 	orrs.w	r3, r0, r1
{
    84fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8500:	4605      	mov	r5, r0
    8502:	460e      	mov	r6, r1
	if (ticks == 0) {
    8504:	d103      	bne.n	850e <z_tick_sleep+0x16>
	z_impl_k_yield();
    8506:	f7ff ffb9 	bl	847c <z_impl_k_yield>
		k_yield();
		return 0;
    850a:	2000      	movs	r0, #0
    850c:	e02c      	b.n	8568 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    850e:	1c83      	adds	r3, r0, #2
    8510:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    8514:	db2a      	blt.n	856c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8516:	f002 f87a 	bl	a60e <sys_clock_tick_get_32>
    851a:	182c      	adds	r4, r5, r0
    851c:	f04f 0320 	mov.w	r3, #32
    8520:	f3ef 8811 	mrs	r8, BASEPRI
    8524:	f383 8812 	msr	BASEPRI_MAX, r3
    8528:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    852c:	4f11      	ldr	r7, [pc, #68]	; (8574 <z_tick_sleep+0x7c>)
    852e:	4b12      	ldr	r3, [pc, #72]	; (8578 <z_tick_sleep+0x80>)
    8530:	68b8      	ldr	r0, [r7, #8]
    8532:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8534:	f7ff fe44 	bl	81c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8538:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    853a:	4910      	ldr	r1, [pc, #64]	; (857c <z_tick_sleep+0x84>)
    853c:	462a      	mov	r2, r5
    853e:	4633      	mov	r3, r6
    8540:	3018      	adds	r0, #24
    8542:	f000 f929 	bl	8798 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8546:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8548:	7b53      	ldrb	r3, [r2, #13]
    854a:	f043 0310 	orr.w	r3, r3, #16
    854e:	7353      	strb	r3, [r2, #13]
    8550:	4640      	mov	r0, r8
    8552:	f7fa ffe5 	bl	3520 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8556:	f002 f85a 	bl	a60e <sys_clock_tick_get_32>
    855a:	1a20      	subs	r0, r4, r0
    855c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8560:	2801      	cmp	r0, #1
    8562:	f173 0300 	sbcs.w	r3, r3, #0
    8566:	dbd0      	blt.n	850a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    8568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    856c:	f06f 0401 	mvn.w	r4, #1
    8570:	1a24      	subs	r4, r4, r0
    8572:	e7d3      	b.n	851c <z_tick_sleep+0x24>
    8574:	200019e8 	.word	0x200019e8
    8578:	20001a14 	.word	0x20001a14
    857c:	0000a4c1 	.word	0x0000a4c1

00008580 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8580:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    8584:	bf08      	it	eq
    8586:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    858a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    858c:	d106      	bne.n	859c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    858e:	4b08      	ldr	r3, [pc, #32]	; (85b0 <z_impl_k_sleep+0x30>)
    8590:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8592:	f7ff ff09 	bl	83a8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    859a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    859c:	f7ff ffac 	bl	84f8 <z_tick_sleep>
    85a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    85a4:	fb80 0303 	smull	r0, r3, r0, r3
    85a8:	0bc0      	lsrs	r0, r0, #15
    85aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    85ae:	e7f4      	b.n	859a <z_impl_k_sleep+0x1a>
    85b0:	200019e8 	.word	0x200019e8

000085b4 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    85b4:	b538      	push	{r3, r4, r5, lr}
    85b6:	4c0a      	ldr	r4, [pc, #40]	; (85e0 <z_impl_k_usleep+0x2c>)
    85b8:	4a0a      	ldr	r2, [pc, #40]	; (85e4 <z_impl_k_usleep+0x30>)
    85ba:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    85be:	2100      	movs	r1, #0
    85c0:	fbc0 4105 	smlal	r4, r1, r0, r5
    85c4:	2300      	movs	r3, #0
    85c6:	4620      	mov	r0, r4
    85c8:	f7f8 fd9a 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    85cc:	17c1      	asrs	r1, r0, #31
    85ce:	f7ff ff93 	bl	84f8 <z_tick_sleep>
    85d2:	4b04      	ldr	r3, [pc, #16]	; (85e4 <z_impl_k_usleep+0x30>)
    85d4:	fb80 0303 	smull	r0, r3, r0, r3
    85d8:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    85da:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    85de:	bd38      	pop	{r3, r4, r5, pc}
    85e0:	000f423f 	.word	0x000f423f
    85e4:	000f4240 	.word	0x000f4240

000085e8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    85e8:	4b01      	ldr	r3, [pc, #4]	; (85f0 <z_impl_z_current_get+0x8>)
    85ea:	6898      	ldr	r0, [r3, #8]
    85ec:	4770      	bx	lr
    85ee:	bf00      	nop
    85f0:	200019e8 	.word	0x200019e8

000085f4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    85f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85f8:	4604      	mov	r4, r0
    85fa:	f04f 0320 	mov.w	r3, #32
    85fe:	f3ef 8611 	mrs	r6, BASEPRI
    8602:	f383 8812 	msr	BASEPRI_MAX, r3
    8606:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    860a:	7b03      	ldrb	r3, [r0, #12]
    860c:	07d9      	lsls	r1, r3, #31
    860e:	d50b      	bpl.n	8628 <z_thread_abort+0x34>
	__asm__ volatile(
    8610:	f386 8811 	msr	BASEPRI, r6
    8614:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    8618:	4040      	eors	r0, r0
    861a:	f380 8811 	msr	BASEPRI, r0
    861e:	f04f 0004 	mov.w	r0, #4
    8622:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8628:	7b43      	ldrb	r3, [r0, #13]
    862a:	071a      	lsls	r2, r3, #28
    862c:	d504      	bpl.n	8638 <z_thread_abort+0x44>
    862e:	f386 8811 	msr	BASEPRI, r6
    8632:	f3bf 8f6f 	isb	sy
    8636:	e7f5      	b.n	8624 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8638:	f023 0220 	bic.w	r2, r3, #32
    863c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8640:	09d2      	lsrs	r2, r2, #7
    8642:	d120      	bne.n	8686 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8644:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    8646:	68a3      	ldr	r3, [r4, #8]
    8648:	b113      	cbz	r3, 8650 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    864a:	4620      	mov	r0, r4
    864c:	f001 fed4 	bl	a3f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8650:	f104 0018 	add.w	r0, r4, #24
    8654:	f001 ffb5 	bl	a5c2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8658:	f104 0758 	add.w	r7, r4, #88	; 0x58
    865c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8660:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8662:	42bd      	cmp	r5, r7
    8664:	d000      	beq.n	8668 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8666:	b9b5      	cbnz	r5, 8696 <z_thread_abort+0xa2>
		update_cache(1);
    8668:	2001      	movs	r0, #1
    866a:	f7ff fd1d 	bl	80a8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    866e:	4b10      	ldr	r3, [pc, #64]	; (86b0 <z_thread_abort+0xbc>)
    8670:	689b      	ldr	r3, [r3, #8]
    8672:	42a3      	cmp	r3, r4
    8674:	d1db      	bne.n	862e <z_thread_abort+0x3a>
    8676:	f3ef 8305 	mrs	r3, IPSR
    867a:	2b00      	cmp	r3, #0
    867c:	d1d7      	bne.n	862e <z_thread_abort+0x3a>
    867e:	4630      	mov	r0, r6
    8680:	f7fa ff4e 	bl	3520 <arch_swap>
	return ret;
    8684:	e7d3      	b.n	862e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8686:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    868a:	f043 0308 	orr.w	r3, r3, #8
    868e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8690:	f001 feaa 	bl	a3e8 <sys_dlist_remove>
}
    8694:	e7d7      	b.n	8646 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    8696:	4628      	mov	r0, r5
    8698:	f001 feae 	bl	a3f8 <unpend_thread_no_timeout>
    869c:	f105 0018 	add.w	r0, r5, #24
    86a0:	f001 ff8f 	bl	a5c2 <z_abort_timeout>
    86a4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    86a8:	4628      	mov	r0, r5
    86aa:	f7ff fd55 	bl	8158 <ready_thread>
    86ae:	e7d7      	b.n	8660 <z_thread_abort+0x6c>
    86b0:	200019e8 	.word	0x200019e8

000086b4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    86b4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    86b6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    86ba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    86bc:	e9cd 6700 	strd	r6, r7, [sp]
    86c0:	f7ff fdde 	bl	8280 <z_pend_curr>

	if (data != NULL) {
    86c4:	b11c      	cbz	r4, 86ce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    86c6:	4b03      	ldr	r3, [pc, #12]	; (86d4 <z_sched_wait+0x20>)
    86c8:	689b      	ldr	r3, [r3, #8]
    86ca:	695b      	ldr	r3, [r3, #20]
    86cc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    86ce:	b002      	add	sp, #8
    86d0:	bdd0      	pop	{r4, r6, r7, pc}
    86d2:	bf00      	nop
    86d4:	200019e8 	.word	0x200019e8

000086d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    86d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    86da:	4806      	ldr	r0, [pc, #24]	; (86f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    86dc:	4a06      	ldr	r2, [pc, #24]	; (86f8 <z_data_copy+0x20>)
    86de:	4907      	ldr	r1, [pc, #28]	; (86fc <z_data_copy+0x24>)
    86e0:	1a12      	subs	r2, r2, r0
    86e2:	f001 fd21 	bl	a128 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    86e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    86ea:	4a05      	ldr	r2, [pc, #20]	; (8700 <z_data_copy+0x28>)
    86ec:	4905      	ldr	r1, [pc, #20]	; (8704 <z_data_copy+0x2c>)
    86ee:	4806      	ldr	r0, [pc, #24]	; (8708 <z_data_copy+0x30>)
    86f0:	f001 bd1a 	b.w	a128 <z_early_memcpy>
    86f4:	20000000 	.word	0x20000000
    86f8:	200003d8 	.word	0x200003d8
    86fc:	0000b044 	.word	0x0000b044
    8700:	00000000 	.word	0x00000000
    8704:	0000b044 	.word	0x0000b044
    8708:	20000000 	.word	0x20000000

0000870c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    870c:	4b03      	ldr	r3, [pc, #12]	; (871c <elapsed+0x10>)
    870e:	681b      	ldr	r3, [r3, #0]
    8710:	b90b      	cbnz	r3, 8716 <elapsed+0xa>
    8712:	f7fc bf15 	b.w	5540 <sys_clock_elapsed>
}
    8716:	2000      	movs	r0, #0
    8718:	4770      	bx	lr
    871a:	bf00      	nop
    871c:	20001a20 	.word	0x20001a20

00008720 <next_timeout>:

static int32_t next_timeout(void)
{
    8720:	b510      	push	{r4, lr}
	return list->head == list;
    8722:	4b0e      	ldr	r3, [pc, #56]	; (875c <next_timeout+0x3c>)
    8724:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8726:	429c      	cmp	r4, r3
    8728:	d104      	bne.n	8734 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    872a:	f7ff ffef 	bl	870c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    872e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    8732:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8734:	f7ff ffea 	bl	870c <elapsed>
	if ((to == NULL) ||
    8738:	2c00      	cmp	r4, #0
    873a:	d0f8      	beq.n	872e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    873c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8740:	1a1b      	subs	r3, r3, r0
    8742:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    8746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    874a:	f172 0100 	sbcs.w	r1, r2, #0
    874e:	daee      	bge.n	872e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8750:	2a00      	cmp	r2, #0
    8752:	bfac      	ite	ge
    8754:	4618      	movge	r0, r3
    8756:	2000      	movlt	r0, #0
	return ret;
    8758:	e7eb      	b.n	8732 <next_timeout+0x12>
    875a:	bf00      	nop
    875c:	200001d8 	.word	0x200001d8

00008760 <remove_timeout>:
{
    8760:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8762:	b170      	cbz	r0, 8782 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    8764:	4b0b      	ldr	r3, [pc, #44]	; (8794 <remove_timeout+0x34>)
    8766:	685b      	ldr	r3, [r3, #4]
    8768:	4298      	cmp	r0, r3
    876a:	d00a      	beq.n	8782 <remove_timeout+0x22>
    876c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    876e:	b143      	cbz	r3, 8782 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8770:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8774:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8778:	1912      	adds	r2, r2, r4
    877a:	eb41 0105 	adc.w	r1, r1, r5
    877e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8782:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    8786:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8788:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    878a:	2300      	movs	r3, #0
	node->prev = NULL;
    878c:	e9c0 3300 	strd	r3, r3, [r0]
}
    8790:	bd30      	pop	{r4, r5, pc}
    8792:	bf00      	nop
    8794:	200001d8 	.word	0x200001d8

00008798 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    879c:	bf08      	it	eq
    879e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    87a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87a4:	4604      	mov	r4, r0
    87a6:	461d      	mov	r5, r3
    87a8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87aa:	d05c      	beq.n	8866 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    87ac:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    87ae:	f04f 0320 	mov.w	r3, #32
    87b2:	f3ef 8711 	mrs	r7, BASEPRI
    87b6:	f383 8812 	msr	BASEPRI_MAX, r3
    87ba:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    87be:	3201      	adds	r2, #1
    87c0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    87c4:	da24      	bge.n	8810 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    87c6:	492d      	ldr	r1, [pc, #180]	; (887c <z_add_timeout+0xe4>)
    87c8:	e9d1 2000 	ldrd	r2, r0, [r1]
    87cc:	f06f 0301 	mvn.w	r3, #1
    87d0:	1a9b      	subs	r3, r3, r2
    87d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    87d6:	eb62 0000 	sbc.w	r0, r2, r0
    87da:	1b9e      	subs	r6, r3, r6
    87dc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    87e0:	2e01      	cmp	r6, #1
    87e2:	f170 0300 	sbcs.w	r3, r0, #0
    87e6:	da01      	bge.n	87ec <z_add_timeout+0x54>
    87e8:	2601      	movs	r6, #1
    87ea:	2000      	movs	r0, #0
    87ec:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    87f0:	4e23      	ldr	r6, [pc, #140]	; (8880 <z_add_timeout+0xe8>)
    87f2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    87f6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87f8:	45b4      	cmp	ip, r6
    87fa:	bf08      	it	eq
    87fc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8800:	f1bc 0f00 	cmp.w	ip, #0
    8804:	d10d      	bne.n	8822 <z_add_timeout+0x8a>
	node->prev = tail;
    8806:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    880a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    880c:	6074      	str	r4, [r6, #4]
}
    880e:	e01c      	b.n	884a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    8810:	f7ff ff7c 	bl	870c <elapsed>
    8814:	3601      	adds	r6, #1
    8816:	f145 0500 	adc.w	r5, r5, #0
    881a:	1836      	adds	r6, r6, r0
    881c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8820:	e7e4      	b.n	87ec <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    8822:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    8826:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    882a:	4293      	cmp	r3, r2
    882c:	eb71 0e00 	sbcs.w	lr, r1, r0
    8830:	da1a      	bge.n	8868 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    8832:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    8834:	f8dc 3004 	ldr.w	r3, [ip, #4]
    8838:	eb60 0001 	sbc.w	r0, r0, r1
    883c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    8840:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    8844:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8846:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    884a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    884c:	42b3      	cmp	r3, r6
    884e:	d006      	beq.n	885e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8850:	429c      	cmp	r4, r3
    8852:	d104      	bne.n	885e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    8854:	f7ff ff64 	bl	8720 <next_timeout>
    8858:	2100      	movs	r1, #0
    885a:	f7fc fe3f 	bl	54dc <sys_clock_set_timeout>
	__asm__ volatile(
    885e:	f387 8811 	msr	BASEPRI, r7
    8862:	f3bf 8f6f 	isb	sy
		}
	}
}
    8866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    8868:	1a9b      	subs	r3, r3, r2
    886a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    886e:	45ac      	cmp	ip, r5
    8870:	e9c4 3104 	strd	r3, r1, [r4, #16]
    8874:	d0c7      	beq.n	8806 <z_add_timeout+0x6e>
    8876:	f8dc c000 	ldr.w	ip, [ip]
    887a:	e7c1      	b.n	8800 <z_add_timeout+0x68>
    887c:	20000650 	.word	0x20000650
    8880:	200001d8 	.word	0x200001d8

00008884 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    8884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    8888:	f04f 0320 	mov.w	r3, #32
    888c:	f3ef 8c11 	mrs	ip, BASEPRI
    8890:	f383 8812 	msr	BASEPRI_MAX, r3
    8894:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8898:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 894c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    889c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8950 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    88a0:	4f2c      	ldr	r7, [pc, #176]	; (8954 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    88a2:	f8c9 0000 	str.w	r0, [r9]
    88a6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    88aa:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88ac:	4550      	cmp	r0, sl
    88ae:	bf08      	it	eq
    88b0:	2000      	moveq	r0, #0
    88b2:	2500      	movs	r5, #0
		curr_tick += dt;
    88b4:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    88b8:	f8d9 3000 	ldr.w	r3, [r9]
    88bc:	46e0      	mov	r8, ip
    88be:	b380      	cbz	r0, 8922 <sys_clock_announce+0x9e>
    88c0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    88c4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    88c8:	42b3      	cmp	r3, r6
    88ca:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    88ce:	da05      	bge.n	88dc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    88d0:	1af6      	subs	r6, r6, r3
    88d2:	eb6c 040e 	sbc.w	r4, ip, lr
    88d6:	e9c0 6404 	strd	r6, r4, [r0, #16]
    88da:	e022      	b.n	8922 <sys_clock_announce+0x9e>
		curr_tick += dt;
    88dc:	18b2      	adds	r2, r6, r2
    88de:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    88e2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    88e6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    88ea:	f7ff ff39 	bl	8760 <remove_timeout>
	__asm__ volatile(
    88ee:	f388 8811 	msr	BASEPRI, r8
    88f2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    88f6:	6883      	ldr	r3, [r0, #8]
    88f8:	4798      	blx	r3
	__asm__ volatile(
    88fa:	f04f 0320 	mov.w	r3, #32
    88fe:	f3ef 8811 	mrs	r8, BASEPRI
    8902:	f383 8812 	msr	BASEPRI_MAX, r3
    8906:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    890a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    890e:	f8da 0000 	ldr.w	r0, [sl]
    8912:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8914:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    8916:	46c4      	mov	ip, r8
    8918:	f8c9 3000 	str.w	r3, [r9]
    891c:	d1ca      	bne.n	88b4 <sys_clock_announce+0x30>
		curr_tick += dt;
    891e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    8922:	189a      	adds	r2, r3, r2
    8924:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    8928:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    892a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    892e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    8932:	f7ff fef5 	bl	8720 <next_timeout>
    8936:	4621      	mov	r1, r4
    8938:	f7fc fdd0 	bl	54dc <sys_clock_set_timeout>
	__asm__ volatile(
    893c:	f388 8811 	msr	BASEPRI, r8
    8940:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    8944:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    8948:	f7ff bc6a 	b.w	8220 <z_time_slice>
    894c:	200001d8 	.word	0x200001d8
    8950:	20001a20 	.word	0x20001a20
    8954:	20000650 	.word	0x20000650

00008958 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8958:	b510      	push	{r4, lr}
	__asm__ volatile(
    895a:	f04f 0320 	mov.w	r3, #32
    895e:	f3ef 8411 	mrs	r4, BASEPRI
    8962:	f383 8812 	msr	BASEPRI_MAX, r3
    8966:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    896a:	f7ff fecf 	bl	870c <elapsed>
    896e:	4a06      	ldr	r2, [pc, #24]	; (8988 <sys_clock_tick_get+0x30>)
    8970:	4603      	mov	r3, r0
    8972:	e9d2 0100 	ldrd	r0, r1, [r2]
    8976:	1818      	adds	r0, r3, r0
    8978:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    897c:	f384 8811 	msr	BASEPRI, r4
    8980:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8984:	bd10      	pop	{r4, pc}
    8986:	bf00      	nop
    8988:	20000650 	.word	0x20000650

0000898c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    898c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    898e:	4606      	mov	r6, r0
    8990:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    8992:	f001 fc18 	bl	a1c6 <k_is_in_isr>
    8996:	b978      	cbnz	r0, 89b8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8998:	4b0b      	ldr	r3, [pc, #44]	; (89c8 <z_thread_aligned_alloc+0x3c>)
    899a:	689b      	ldr	r3, [r3, #8]
    899c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    899e:	b17c      	cbz	r4, 89c0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    89a0:	1d2a      	adds	r2, r5, #4
    89a2:	d209      	bcs.n	89b8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    89a4:	2000      	movs	r0, #0
    89a6:	2100      	movs	r1, #0
    89a8:	e9cd 0100 	strd	r0, r1, [sp]
    89ac:	f046 0104 	orr.w	r1, r6, #4
    89b0:	4620      	mov	r0, r4
    89b2:	f001 fe65 	bl	a680 <k_heap_aligned_alloc>
	if (mem == NULL) {
    89b6:	b908      	cbnz	r0, 89bc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    89b8:	2400      	movs	r4, #0
	}

	return ret;
    89ba:	e001      	b.n	89c0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    89bc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    89be:	1d04      	adds	r4, r0, #4
}
    89c0:	4620      	mov	r0, r4
    89c2:	b002      	add	sp, #8
    89c4:	bd70      	pop	{r4, r5, r6, pc}
    89c6:	bf00      	nop
    89c8:	200019e8 	.word	0x200019e8

000089cc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    89cc:	4801      	ldr	r0, [pc, #4]	; (89d4 <boot_banner+0x8>)
    89ce:	f000 ba21 	b.w	8e14 <printk>
    89d2:	bf00      	nop
    89d4:	0000b00b 	.word	0x0000b00b

000089d8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    89d8:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    89da:	4c06      	ldr	r4, [pc, #24]	; (89f4 <statics_init+0x1c>)
    89dc:	4d06      	ldr	r5, [pc, #24]	; (89f8 <statics_init+0x20>)
    89de:	42ac      	cmp	r4, r5
    89e0:	d301      	bcc.n	89e6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    89e2:	2000      	movs	r0, #0
    89e4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    89e6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    89ea:	4620      	mov	r0, r4
    89ec:	f001 fe40 	bl	a670 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    89f0:	3414      	adds	r4, #20
    89f2:	e7f4      	b.n	89de <statics_init+0x6>
    89f4:	2000026c 	.word	0x2000026c
    89f8:	2000026c 	.word	0x2000026c

000089fc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    89fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    89fe:	4b09      	ldr	r3, [pc, #36]	; (8a24 <k_sys_work_q_init+0x28>)
    8a00:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8a02:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8a04:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8a06:	9300      	str	r3, [sp, #0]
    8a08:	4907      	ldr	r1, [pc, #28]	; (8a28 <k_sys_work_q_init+0x2c>)
    8a0a:	4808      	ldr	r0, [pc, #32]	; (8a2c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8a0c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8a18:	f7ff fa8e 	bl	7f38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8a1c:	4620      	mov	r0, r4
    8a1e:	b004      	add	sp, #16
    8a20:	bd10      	pop	{r4, pc}
    8a22:	bf00      	nop
    8a24:	0000b039 	.word	0x0000b039
    8a28:	200032c0 	.word	0x200032c0
    8a2c:	20000658 	.word	0x20000658

00008a30 <nrf_cc3xx_platform_init_no_rng>:
    8a30:	b510      	push	{r4, lr}
    8a32:	4c0a      	ldr	r4, [pc, #40]	; (8a5c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8a34:	6823      	ldr	r3, [r4, #0]
    8a36:	b11b      	cbz	r3, 8a40 <nrf_cc3xx_platform_init_no_rng+0x10>
    8a38:	2301      	movs	r3, #1
    8a3a:	6023      	str	r3, [r4, #0]
    8a3c:	2000      	movs	r0, #0
    8a3e:	bd10      	pop	{r4, pc}
    8a40:	f000 f8ea 	bl	8c18 <CC_LibInitNoRng>
    8a44:	2800      	cmp	r0, #0
    8a46:	d0f7      	beq.n	8a38 <nrf_cc3xx_platform_init_no_rng+0x8>
    8a48:	3801      	subs	r0, #1
    8a4a:	2806      	cmp	r0, #6
    8a4c:	d803      	bhi.n	8a56 <nrf_cc3xx_platform_init_no_rng+0x26>
    8a4e:	4b04      	ldr	r3, [pc, #16]	; (8a60 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8a50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8a54:	bd10      	pop	{r4, pc}
    8a56:	4803      	ldr	r0, [pc, #12]	; (8a64 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8a58:	bd10      	pop	{r4, pc}
    8a5a:	bf00      	nop
    8a5c:	20001a24 	.word	0x20001a24
    8a60:	0000ad3c 	.word	0x0000ad3c
    8a64:	ffff8ffe 	.word	0xffff8ffe

00008a68 <nrf_cc3xx_platform_abort>:
    8a68:	f3bf 8f4f 	dsb	sy
    8a6c:	4905      	ldr	r1, [pc, #20]	; (8a84 <nrf_cc3xx_platform_abort+0x1c>)
    8a6e:	4b06      	ldr	r3, [pc, #24]	; (8a88 <nrf_cc3xx_platform_abort+0x20>)
    8a70:	68ca      	ldr	r2, [r1, #12]
    8a72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8a76:	4313      	orrs	r3, r2
    8a78:	60cb      	str	r3, [r1, #12]
    8a7a:	f3bf 8f4f 	dsb	sy
    8a7e:	bf00      	nop
    8a80:	e7fd      	b.n	8a7e <nrf_cc3xx_platform_abort+0x16>
    8a82:	bf00      	nop
    8a84:	e000ed00 	.word	0xe000ed00
    8a88:	05fa0004 	.word	0x05fa0004

00008a8c <CC_PalAbort>:
    8a8c:	b410      	push	{r4}
    8a8e:	4b09      	ldr	r3, [pc, #36]	; (8ab4 <CC_PalAbort+0x28>)
    8a90:	4909      	ldr	r1, [pc, #36]	; (8ab8 <CC_PalAbort+0x2c>)
    8a92:	4c0a      	ldr	r4, [pc, #40]	; (8abc <CC_PalAbort+0x30>)
    8a94:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8a98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8a9c:	6849      	ldr	r1, [r1, #4]
    8a9e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8aa2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8aa6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8aaa:	2300      	movs	r3, #0
    8aac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8ab0:	bc10      	pop	{r4}
    8ab2:	4708      	bx	r1
    8ab4:	5002b000 	.word	0x5002b000
    8ab8:	200001e0 	.word	0x200001e0
    8abc:	5002a000 	.word	0x5002a000

00008ac0 <nrf_cc3xx_platform_set_abort>:
    8ac0:	e9d0 1200 	ldrd	r1, r2, [r0]
    8ac4:	4b01      	ldr	r3, [pc, #4]	; (8acc <nrf_cc3xx_platform_set_abort+0xc>)
    8ac6:	e9c3 1200 	strd	r1, r2, [r3]
    8aca:	4770      	bx	lr
    8acc:	200001e0 	.word	0x200001e0

00008ad0 <mutex_free>:
    8ad0:	b510      	push	{r4, lr}
    8ad2:	4604      	mov	r4, r0
    8ad4:	b150      	cbz	r0, 8aec <mutex_free+0x1c>
    8ad6:	6863      	ldr	r3, [r4, #4]
    8ad8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8adc:	d005      	beq.n	8aea <mutex_free+0x1a>
    8ade:	4a06      	ldr	r2, [pc, #24]	; (8af8 <mutex_free+0x28>)
    8ae0:	4293      	cmp	r3, r2
    8ae2:	d002      	beq.n	8aea <mutex_free+0x1a>
    8ae4:	2300      	movs	r3, #0
    8ae6:	6023      	str	r3, [r4, #0]
    8ae8:	6062      	str	r2, [r4, #4]
    8aea:	bd10      	pop	{r4, pc}
    8aec:	4b03      	ldr	r3, [pc, #12]	; (8afc <mutex_free+0x2c>)
    8aee:	4804      	ldr	r0, [pc, #16]	; (8b00 <mutex_free+0x30>)
    8af0:	685b      	ldr	r3, [r3, #4]
    8af2:	4798      	blx	r3
    8af4:	e7ef      	b.n	8ad6 <mutex_free+0x6>
    8af6:	bf00      	nop
    8af8:	a95c5f2c 	.word	0xa95c5f2c
    8afc:	200001e0 	.word	0x200001e0
    8b00:	0000ad58 	.word	0x0000ad58

00008b04 <mutex_lock>:
    8b04:	b1c8      	cbz	r0, 8b3a <mutex_lock+0x36>
    8b06:	6843      	ldr	r3, [r0, #4]
    8b08:	4a0d      	ldr	r2, [pc, #52]	; (8b40 <mutex_lock+0x3c>)
    8b0a:	4293      	cmp	r3, r2
    8b0c:	d013      	beq.n	8b36 <mutex_lock+0x32>
    8b0e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8b12:	d00e      	beq.n	8b32 <mutex_lock+0x2e>
    8b14:	2301      	movs	r3, #1
    8b16:	e850 2f00 	ldrex	r2, [r0]
    8b1a:	4619      	mov	r1, r3
    8b1c:	e840 1c00 	strex	ip, r1, [r0]
    8b20:	f09c 0f00 	teq	ip, #0
    8b24:	d1f7      	bne.n	8b16 <mutex_lock+0x12>
    8b26:	2a01      	cmp	r2, #1
    8b28:	d0f5      	beq.n	8b16 <mutex_lock+0x12>
    8b2a:	f3bf 8f5f 	dmb	sy
    8b2e:	2000      	movs	r0, #0
    8b30:	4770      	bx	lr
    8b32:	4804      	ldr	r0, [pc, #16]	; (8b44 <mutex_lock+0x40>)
    8b34:	4770      	bx	lr
    8b36:	4804      	ldr	r0, [pc, #16]	; (8b48 <mutex_lock+0x44>)
    8b38:	4770      	bx	lr
    8b3a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b3e:	4770      	bx	lr
    8b40:	a95c5f2c 	.word	0xa95c5f2c
    8b44:	ffff8fe9 	.word	0xffff8fe9
    8b48:	ffff8fea 	.word	0xffff8fea

00008b4c <mutex_unlock>:
    8b4c:	b180      	cbz	r0, 8b70 <mutex_unlock+0x24>
    8b4e:	6843      	ldr	r3, [r0, #4]
    8b50:	4a09      	ldr	r2, [pc, #36]	; (8b78 <mutex_unlock+0x2c>)
    8b52:	4293      	cmp	r3, r2
    8b54:	d00a      	beq.n	8b6c <mutex_unlock+0x20>
    8b56:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8b5a:	d005      	beq.n	8b68 <mutex_unlock+0x1c>
    8b5c:	f3bf 8f5f 	dmb	sy
    8b60:	2300      	movs	r3, #0
    8b62:	6003      	str	r3, [r0, #0]
    8b64:	4618      	mov	r0, r3
    8b66:	4770      	bx	lr
    8b68:	4804      	ldr	r0, [pc, #16]	; (8b7c <mutex_unlock+0x30>)
    8b6a:	4770      	bx	lr
    8b6c:	4804      	ldr	r0, [pc, #16]	; (8b80 <mutex_unlock+0x34>)
    8b6e:	4770      	bx	lr
    8b70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b74:	4770      	bx	lr
    8b76:	bf00      	nop
    8b78:	a95c5f2c 	.word	0xa95c5f2c
    8b7c:	ffff8fe9 	.word	0xffff8fe9
    8b80:	ffff8fea 	.word	0xffff8fea

00008b84 <mutex_init>:
    8b84:	b510      	push	{r4, lr}
    8b86:	4604      	mov	r4, r0
    8b88:	b120      	cbz	r0, 8b94 <mutex_init+0x10>
    8b8a:	4b04      	ldr	r3, [pc, #16]	; (8b9c <mutex_init+0x18>)
    8b8c:	6063      	str	r3, [r4, #4]
    8b8e:	2200      	movs	r2, #0
    8b90:	6022      	str	r2, [r4, #0]
    8b92:	bd10      	pop	{r4, pc}
    8b94:	4802      	ldr	r0, [pc, #8]	; (8ba0 <mutex_init+0x1c>)
    8b96:	f7ff ff79 	bl	8a8c <CC_PalAbort>
    8b9a:	e7f6      	b.n	8b8a <mutex_init+0x6>
    8b9c:	3a00003a 	.word	0x3a00003a
    8ba0:	0000ad80 	.word	0x0000ad80

00008ba4 <nrf_cc3xx_platform_set_mutexes>:
    8ba4:	b570      	push	{r4, r5, r6, lr}
    8ba6:	e9d0 2300 	ldrd	r2, r3, [r0]
    8baa:	4c17      	ldr	r4, [pc, #92]	; (8c08 <nrf_cc3xx_platform_set_mutexes+0x64>)
    8bac:	4d17      	ldr	r5, [pc, #92]	; (8c0c <nrf_cc3xx_platform_set_mutexes+0x68>)
    8bae:	6063      	str	r3, [r4, #4]
    8bb0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8bb4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8bb8:	6022      	str	r2, [r4, #0]
    8bba:	6848      	ldr	r0, [r1, #4]
    8bbc:	f8d1 c000 	ldr.w	ip, [r1]
    8bc0:	4b13      	ldr	r3, [pc, #76]	; (8c10 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    8bc2:	e9c3 c000 	strd	ip, r0, [r3]
    8bc6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    8bca:	f8d1 c008 	ldr.w	ip, [r1, #8]
    8bce:	f8c3 c008 	str.w	ip, [r3, #8]
    8bd2:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    8bd6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    8bda:	6909      	ldr	r1, [r1, #16]
    8bdc:	f8c3 c00c 	str.w	ip, [r3, #12]
    8be0:	6119      	str	r1, [r3, #16]
    8be2:	d010      	beq.n	8c06 <nrf_cc3xx_platform_set_mutexes+0x62>
    8be4:	490b      	ldr	r1, [pc, #44]	; (8c14 <nrf_cc3xx_platform_set_mutexes+0x70>)
    8be6:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    8bea:	2300      	movs	r3, #0
    8bec:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    8bf0:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8bf4:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    8bf8:	4790      	blx	r2
    8bfa:	6823      	ldr	r3, [r4, #0]
    8bfc:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c04:	4718      	bx	r3
    8c06:	bd70      	pop	{r4, r5, r6, pc}
    8c08:	200001fc 	.word	0x200001fc
    8c0c:	20001a3c 	.word	0x20001a3c
    8c10:	200001e8 	.word	0x200001e8
    8c14:	a95c5f2c 	.word	0xa95c5f2c

00008c18 <CC_LibInitNoRng>:
    8c18:	b538      	push	{r3, r4, r5, lr}
    8c1a:	f000 f82f 	bl	8c7c <CC_HalInit>
    8c1e:	b120      	cbz	r0, 8c2a <CC_LibInitNoRng+0x12>
    8c20:	2403      	movs	r4, #3
    8c22:	f000 f863 	bl	8cec <CC_PalTerminate>
    8c26:	4620      	mov	r0, r4
    8c28:	bd38      	pop	{r3, r4, r5, pc}
    8c2a:	f000 f831 	bl	8c90 <CC_PalInit>
    8c2e:	b998      	cbnz	r0, 8c58 <CC_LibInitNoRng+0x40>
    8c30:	f000 f8ac 	bl	8d8c <CC_PalPowerSaveModeSelect>
    8c34:	b998      	cbnz	r0, 8c5e <CC_LibInitNoRng+0x46>
    8c36:	4d0f      	ldr	r5, [pc, #60]	; (8c74 <CC_LibInitNoRng+0x5c>)
    8c38:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8c3c:	0e1b      	lsrs	r3, r3, #24
    8c3e:	2bf0      	cmp	r3, #240	; 0xf0
    8c40:	d108      	bne.n	8c54 <CC_LibInitNoRng+0x3c>
    8c42:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8c46:	4b0c      	ldr	r3, [pc, #48]	; (8c78 <CC_LibInitNoRng+0x60>)
    8c48:	429a      	cmp	r2, r3
    8c4a:	d00a      	beq.n	8c62 <CC_LibInitNoRng+0x4a>
    8c4c:	2407      	movs	r4, #7
    8c4e:	f000 f817 	bl	8c80 <CC_HalTerminate>
    8c52:	e7e6      	b.n	8c22 <CC_LibInitNoRng+0xa>
    8c54:	2406      	movs	r4, #6
    8c56:	e7fa      	b.n	8c4e <CC_LibInitNoRng+0x36>
    8c58:	2404      	movs	r4, #4
    8c5a:	4620      	mov	r0, r4
    8c5c:	bd38      	pop	{r3, r4, r5, pc}
    8c5e:	2400      	movs	r4, #0
    8c60:	e7f5      	b.n	8c4e <CC_LibInitNoRng+0x36>
    8c62:	2001      	movs	r0, #1
    8c64:	f000 f892 	bl	8d8c <CC_PalPowerSaveModeSelect>
    8c68:	4604      	mov	r4, r0
    8c6a:	2800      	cmp	r0, #0
    8c6c:	d1f7      	bne.n	8c5e <CC_LibInitNoRng+0x46>
    8c6e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8c72:	e7d8      	b.n	8c26 <CC_LibInitNoRng+0xe>
    8c74:	5002b000 	.word	0x5002b000
    8c78:	20e00000 	.word	0x20e00000

00008c7c <CC_HalInit>:
    8c7c:	2000      	movs	r0, #0
    8c7e:	4770      	bx	lr

00008c80 <CC_HalTerminate>:
    8c80:	2000      	movs	r0, #0
    8c82:	4770      	bx	lr

00008c84 <CC_HalMaskInterrupt>:
    8c84:	4b01      	ldr	r3, [pc, #4]	; (8c8c <CC_HalMaskInterrupt+0x8>)
    8c86:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    8c8a:	4770      	bx	lr
    8c8c:	5002b000 	.word	0x5002b000

00008c90 <CC_PalInit>:
    8c90:	b510      	push	{r4, lr}
    8c92:	4811      	ldr	r0, [pc, #68]	; (8cd8 <CC_PalInit+0x48>)
    8c94:	f000 f848 	bl	8d28 <CC_PalMutexCreate>
    8c98:	b100      	cbz	r0, 8c9c <CC_PalInit+0xc>
    8c9a:	bd10      	pop	{r4, pc}
    8c9c:	480f      	ldr	r0, [pc, #60]	; (8cdc <CC_PalInit+0x4c>)
    8c9e:	f000 f843 	bl	8d28 <CC_PalMutexCreate>
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d1f9      	bne.n	8c9a <CC_PalInit+0xa>
    8ca6:	4c0e      	ldr	r4, [pc, #56]	; (8ce0 <CC_PalInit+0x50>)
    8ca8:	4620      	mov	r0, r4
    8caa:	f000 f83d 	bl	8d28 <CC_PalMutexCreate>
    8cae:	2800      	cmp	r0, #0
    8cb0:	d1f3      	bne.n	8c9a <CC_PalInit+0xa>
    8cb2:	4b0c      	ldr	r3, [pc, #48]	; (8ce4 <CC_PalInit+0x54>)
    8cb4:	480c      	ldr	r0, [pc, #48]	; (8ce8 <CC_PalInit+0x58>)
    8cb6:	601c      	str	r4, [r3, #0]
    8cb8:	f000 f836 	bl	8d28 <CC_PalMutexCreate>
    8cbc:	4601      	mov	r1, r0
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d1eb      	bne.n	8c9a <CC_PalInit+0xa>
    8cc2:	f000 f82d 	bl	8d20 <CC_PalDmaInit>
    8cc6:	4604      	mov	r4, r0
    8cc8:	b108      	cbz	r0, 8cce <CC_PalInit+0x3e>
    8cca:	4620      	mov	r0, r4
    8ccc:	bd10      	pop	{r4, pc}
    8cce:	f000 f83f 	bl	8d50 <CC_PalPowerSaveModeInit>
    8cd2:	4620      	mov	r0, r4
    8cd4:	e7fa      	b.n	8ccc <CC_PalInit+0x3c>
    8cd6:	bf00      	nop
    8cd8:	2000023c 	.word	0x2000023c
    8cdc:	20000238 	.word	0x20000238
    8ce0:	20000234 	.word	0x20000234
    8ce4:	2000022c 	.word	0x2000022c
    8ce8:	20000230 	.word	0x20000230

00008cec <CC_PalTerminate>:
    8cec:	b508      	push	{r3, lr}
    8cee:	4808      	ldr	r0, [pc, #32]	; (8d10 <CC_PalTerminate+0x24>)
    8cf0:	f000 f824 	bl	8d3c <CC_PalMutexDestroy>
    8cf4:	4807      	ldr	r0, [pc, #28]	; (8d14 <CC_PalTerminate+0x28>)
    8cf6:	f000 f821 	bl	8d3c <CC_PalMutexDestroy>
    8cfa:	4807      	ldr	r0, [pc, #28]	; (8d18 <CC_PalTerminate+0x2c>)
    8cfc:	f000 f81e 	bl	8d3c <CC_PalMutexDestroy>
    8d00:	4806      	ldr	r0, [pc, #24]	; (8d1c <CC_PalTerminate+0x30>)
    8d02:	f000 f81b 	bl	8d3c <CC_PalMutexDestroy>
    8d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8d0a:	f000 b80b 	b.w	8d24 <CC_PalDmaTerminate>
    8d0e:	bf00      	nop
    8d10:	2000023c 	.word	0x2000023c
    8d14:	20000238 	.word	0x20000238
    8d18:	20000234 	.word	0x20000234
    8d1c:	20000230 	.word	0x20000230

00008d20 <CC_PalDmaInit>:
    8d20:	2000      	movs	r0, #0
    8d22:	4770      	bx	lr

00008d24 <CC_PalDmaTerminate>:
    8d24:	4770      	bx	lr
    8d26:	bf00      	nop

00008d28 <CC_PalMutexCreate>:
    8d28:	b508      	push	{r3, lr}
    8d2a:	4b03      	ldr	r3, [pc, #12]	; (8d38 <CC_PalMutexCreate+0x10>)
    8d2c:	6802      	ldr	r2, [r0, #0]
    8d2e:	681b      	ldr	r3, [r3, #0]
    8d30:	6810      	ldr	r0, [r2, #0]
    8d32:	4798      	blx	r3
    8d34:	2000      	movs	r0, #0
    8d36:	bd08      	pop	{r3, pc}
    8d38:	200001fc 	.word	0x200001fc

00008d3c <CC_PalMutexDestroy>:
    8d3c:	b508      	push	{r3, lr}
    8d3e:	4b03      	ldr	r3, [pc, #12]	; (8d4c <CC_PalMutexDestroy+0x10>)
    8d40:	6802      	ldr	r2, [r0, #0]
    8d42:	685b      	ldr	r3, [r3, #4]
    8d44:	6810      	ldr	r0, [r2, #0]
    8d46:	4798      	blx	r3
    8d48:	2000      	movs	r0, #0
    8d4a:	bd08      	pop	{r3, pc}
    8d4c:	200001fc 	.word	0x200001fc

00008d50 <CC_PalPowerSaveModeInit>:
    8d50:	b570      	push	{r4, r5, r6, lr}
    8d52:	4c09      	ldr	r4, [pc, #36]	; (8d78 <CC_PalPowerSaveModeInit+0x28>)
    8d54:	4d09      	ldr	r5, [pc, #36]	; (8d7c <CC_PalPowerSaveModeInit+0x2c>)
    8d56:	6920      	ldr	r0, [r4, #16]
    8d58:	68ab      	ldr	r3, [r5, #8]
    8d5a:	4798      	blx	r3
    8d5c:	b118      	cbz	r0, 8d66 <CC_PalPowerSaveModeInit+0x16>
    8d5e:	4b08      	ldr	r3, [pc, #32]	; (8d80 <CC_PalPowerSaveModeInit+0x30>)
    8d60:	4808      	ldr	r0, [pc, #32]	; (8d84 <CC_PalPowerSaveModeInit+0x34>)
    8d62:	685b      	ldr	r3, [r3, #4]
    8d64:	4798      	blx	r3
    8d66:	4a08      	ldr	r2, [pc, #32]	; (8d88 <CC_PalPowerSaveModeInit+0x38>)
    8d68:	68eb      	ldr	r3, [r5, #12]
    8d6a:	6920      	ldr	r0, [r4, #16]
    8d6c:	2100      	movs	r1, #0
    8d6e:	6011      	str	r1, [r2, #0]
    8d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d74:	4718      	bx	r3
    8d76:	bf00      	nop
    8d78:	200001e8 	.word	0x200001e8
    8d7c:	200001fc 	.word	0x200001fc
    8d80:	200001e0 	.word	0x200001e0
    8d84:	0000ada4 	.word	0x0000ada4
    8d88:	20001a38 	.word	0x20001a38

00008d8c <CC_PalPowerSaveModeSelect>:
    8d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d8e:	4d1a      	ldr	r5, [pc, #104]	; (8df8 <CC_PalPowerSaveModeSelect+0x6c>)
    8d90:	4e1a      	ldr	r6, [pc, #104]	; (8dfc <CC_PalPowerSaveModeSelect+0x70>)
    8d92:	4604      	mov	r4, r0
    8d94:	68b2      	ldr	r2, [r6, #8]
    8d96:	6928      	ldr	r0, [r5, #16]
    8d98:	4790      	blx	r2
    8d9a:	b9e8      	cbnz	r0, 8dd8 <CC_PalPowerSaveModeSelect+0x4c>
    8d9c:	4f18      	ldr	r7, [pc, #96]	; (8e00 <CC_PalPowerSaveModeSelect+0x74>)
    8d9e:	683b      	ldr	r3, [r7, #0]
    8da0:	b14c      	cbz	r4, 8db6 <CC_PalPowerSaveModeSelect+0x2a>
    8da2:	b1a3      	cbz	r3, 8dce <CC_PalPowerSaveModeSelect+0x42>
    8da4:	2b01      	cmp	r3, #1
    8da6:	d019      	beq.n	8ddc <CC_PalPowerSaveModeSelect+0x50>
    8da8:	3b01      	subs	r3, #1
    8daa:	603b      	str	r3, [r7, #0]
    8dac:	6928      	ldr	r0, [r5, #16]
    8dae:	68f3      	ldr	r3, [r6, #12]
    8db0:	4798      	blx	r3
    8db2:	2000      	movs	r0, #0
    8db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8db6:	b943      	cbnz	r3, 8dca <CC_PalPowerSaveModeSelect+0x3e>
    8db8:	4a12      	ldr	r2, [pc, #72]	; (8e04 <CC_PalPowerSaveModeSelect+0x78>)
    8dba:	2101      	movs	r1, #1
    8dbc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    8dc0:	4911      	ldr	r1, [pc, #68]	; (8e08 <CC_PalPowerSaveModeSelect+0x7c>)
    8dc2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    8dc6:	2a00      	cmp	r2, #0
    8dc8:	d1fb      	bne.n	8dc2 <CC_PalPowerSaveModeSelect+0x36>
    8dca:	3301      	adds	r3, #1
    8dcc:	603b      	str	r3, [r7, #0]
    8dce:	68f3      	ldr	r3, [r6, #12]
    8dd0:	6928      	ldr	r0, [r5, #16]
    8dd2:	4798      	blx	r3
    8dd4:	2000      	movs	r0, #0
    8dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8dd8:	480c      	ldr	r0, [pc, #48]	; (8e0c <CC_PalPowerSaveModeSelect+0x80>)
    8dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ddc:	4a0a      	ldr	r2, [pc, #40]	; (8e08 <CC_PalPowerSaveModeSelect+0x7c>)
    8dde:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8de2:	2b00      	cmp	r3, #0
    8de4:	d1fb      	bne.n	8dde <CC_PalPowerSaveModeSelect+0x52>
    8de6:	4a07      	ldr	r2, [pc, #28]	; (8e04 <CC_PalPowerSaveModeSelect+0x78>)
    8de8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8dec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8df0:	f7ff ff48 	bl	8c84 <CC_HalMaskInterrupt>
    8df4:	683b      	ldr	r3, [r7, #0]
    8df6:	e7d7      	b.n	8da8 <CC_PalPowerSaveModeSelect+0x1c>
    8df8:	200001e8 	.word	0x200001e8
    8dfc:	200001fc 	.word	0x200001fc
    8e00:	20001a38 	.word	0x20001a38
    8e04:	5002a000 	.word	0x5002a000
    8e08:	5002b000 	.word	0x5002b000
    8e0c:	ffff8fe9 	.word	0xffff8fe9

00008e10 <arch_printk_char_out>:
}
    8e10:	2000      	movs	r0, #0
    8e12:	4770      	bx	lr

00008e14 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8e14:	b40f      	push	{r0, r1, r2, r3}
    8e16:	b507      	push	{r0, r1, r2, lr}
    8e18:	a904      	add	r1, sp, #16
    8e1a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8e1e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8e20:	f7f8 fb10 	bl	1444 <vprintk>

	va_end(ap);
}
    8e24:	b003      	add	sp, #12
    8e26:	f85d eb04 	ldr.w	lr, [sp], #4
    8e2a:	b004      	add	sp, #16
    8e2c:	4770      	bx	lr

00008e2e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8e2e:	4604      	mov	r4, r0
    8e30:	b508      	push	{r3, lr}
    8e32:	4608      	mov	r0, r1
    8e34:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8e36:	461a      	mov	r2, r3
    8e38:	47a0      	blx	r4
	return z_impl_z_current_get();
    8e3a:	f7ff fbd5 	bl	85e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8e3e:	f7fa fe03 	bl	3a48 <z_impl_k_thread_abort>

00008e42 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8e42:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8e46:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    8e48:	0840      	lsrs	r0, r0, #1
    8e4a:	4770      	bx	lr

00008e4c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    8e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    8e50:	f7ff fff7 	bl	8e42 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    8e54:	fab0 f080 	clz	r0, r0
    8e58:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    8e60:	00ca      	lsls	r2, r1, #3
    8e62:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8e66:	1d17      	adds	r7, r2, #4
{
    8e68:	460c      	mov	r4, r1
    8e6a:	3206      	adds	r2, #6
    8e6c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    8e6e:	b956      	cbnz	r6, 8e86 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8e70:	2101      	movs	r1, #1
    8e72:	fa01 f000 	lsl.w	r0, r1, r0
    8e76:	68d9      	ldr	r1, [r3, #12]
    8e78:	4301      	orrs	r1, r0
    8e7a:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8e7c:	f8cc 4010 	str.w	r4, [ip, #16]
    8e80:	53dd      	strh	r5, [r3, r7]
    8e82:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    8e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    8e86:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    8e88:	3104      	adds	r1, #4
    8e8a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8e8c:	53d8      	strh	r0, [r3, r7]
    8e8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8e92:	529e      	strh	r6, [r3, r2]
    8e94:	80c5      	strh	r5, [r0, #6]
    8e96:	525d      	strh	r5, [r3, r1]
    8e98:	e7f4      	b.n	8e84 <free_list_add+0x38>

00008e9a <free_list_remove_bidx>:
{
    8e9a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    8e9c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    8ea0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    8ea2:	4299      	cmp	r1, r3
    8ea4:	f102 0104 	add.w	r1, r2, #4
    8ea8:	d10a      	bne.n	8ec0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    8eaa:	2301      	movs	r3, #1
    8eac:	fa03 f202 	lsl.w	r2, r3, r2
    8eb0:	68c3      	ldr	r3, [r0, #12]
    8eb2:	ea23 0302 	bic.w	r3, r3, r2
    8eb6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    8eb8:	2300      	movs	r3, #0
    8eba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    8ebe:	bd10      	pop	{r4, pc}
    8ec0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    8ec2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    8ec6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    8eca:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    8ece:	80cb      	strh	r3, [r1, #6]
    8ed0:	8082      	strh	r2, [r0, #4]
}
    8ed2:	e7f4      	b.n	8ebe <free_list_remove_bidx+0x24>

00008ed4 <free_list_remove>:
{
    8ed4:	b508      	push	{r3, lr}
    8ed6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    8ed8:	f7ff ffb3 	bl	8e42 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8edc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    8ee0:	f1c2 021f 	rsb	r2, r2, #31
    8ee4:	4618      	mov	r0, r3
}
    8ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    8eea:	f7ff bfd6 	b.w	8e9a <free_list_remove_bidx>

00008eee <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    8eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ef2:	fab1 f581 	clz	r5, r1
    8ef6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    8efa:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    8efe:	4603      	mov	r3, r0
	if (b->next) {
    8f00:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    8f04:	460e      	mov	r6, r1
	if (b->next) {
    8f06:	b1c2      	cbz	r2, 8f3a <alloc_chunk+0x4c>
    8f08:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    8f0a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    8f0e:	4618      	mov	r0, r3
    8f10:	4621      	mov	r1, r4
    8f12:	f7ff ff96 	bl	8e42 <chunk_size>
    8f16:	42b0      	cmp	r0, r6
    8f18:	d306      	bcc.n	8f28 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    8f1a:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    8f1c:	4618      	mov	r0, r3
    8f1e:	f7ff ffbc 	bl	8e9a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    8f22:	4620      	mov	r0, r4
    8f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    8f28:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    8f2c:	3f01      	subs	r7, #1
    8f2e:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    8f30:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    8f34:	d001      	beq.n	8f3a <alloc_chunk+0x4c>
    8f36:	4282      	cmp	r2, r0
    8f38:	d1e7      	bne.n	8f0a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    8f3a:	f1c5 0220 	rsb	r2, r5, #32
    8f3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    8f42:	4094      	lsls	r4, r2
    8f44:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    8f46:	4014      	ands	r4, r2
    8f48:	d0eb      	beq.n	8f22 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    8f4a:	fa94 f2a4 	rbit	r2, r4
    8f4e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    8f52:	1d11      	adds	r1, r2, #4
    8f54:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    8f58:	4621      	mov	r1, r4
    8f5a:	e7df      	b.n	8f1c <alloc_chunk+0x2e>

00008f5c <merge_chunks>:
{
    8f5c:	b538      	push	{r3, r4, r5, lr}
    8f5e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    8f60:	f7ff ff6f 	bl	8e42 <chunk_size>
{
    8f64:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    8f66:	4604      	mov	r4, r0
    8f68:	4611      	mov	r1, r2
    8f6a:	4618      	mov	r0, r3
    8f6c:	f7ff ff69 	bl	8e42 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    8f70:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    8f74:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8f76:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    8f78:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    8f7a:	4618      	mov	r0, r3
    8f7c:	f7ff ff61 	bl	8e42 <chunk_size>
	void *cmem = &buf[c];
    8f80:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    8f82:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    8f86:	bd38      	pop	{r3, r4, r5, pc}

00008f88 <split_chunks>:
{
    8f88:	b538      	push	{r3, r4, r5, lr}
    8f8a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    8f8c:	f7ff ff59 	bl	8e42 <chunk_size>
{
    8f90:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    8f92:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    8f94:	1a51      	subs	r1, r2, r1
    8f96:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    8f9a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8f9c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    8f9e:	8060      	strh	r0, [r4, #2]
    8fa0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8fa4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    8fa6:	8044      	strh	r4, [r0, #2]
    8fa8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    8fac:	4618      	mov	r0, r3
    8fae:	4611      	mov	r1, r2
    8fb0:	f7ff ff47 	bl	8e42 <chunk_size>
	void *cmem = &buf[c];
    8fb4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    8fb6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    8fba:	bd38      	pop	{r3, r4, r5, pc}

00008fbc <free_chunk>:
{
    8fbc:	b538      	push	{r3, r4, r5, lr}
    8fbe:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    8fc0:	f7ff ff3f 	bl	8e42 <chunk_size>
    8fc4:	460c      	mov	r4, r1
    8fc6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    8fc8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8fcc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    8fce:	07da      	lsls	r2, r3, #31
    8fd0:	d40a      	bmi.n	8fe8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    8fd2:	4628      	mov	r0, r5
    8fd4:	f7ff ff7e 	bl	8ed4 <free_list_remove>
	return c + chunk_size(h, c);
    8fd8:	4621      	mov	r1, r4
    8fda:	4628      	mov	r0, r5
    8fdc:	f7ff ff31 	bl	8e42 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    8fe0:	1822      	adds	r2, r4, r0
    8fe2:	4628      	mov	r0, r5
    8fe4:	f7ff ffba 	bl	8f5c <merge_chunks>
		return ((uint16_t *)cmem)[f];
    8fe8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8fec:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    8fee:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8ff2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    8ff4:	07db      	lsls	r3, r3, #31
    8ff6:	d40c      	bmi.n	9012 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    8ff8:	4628      	mov	r0, r5
    8ffa:	f7ff ff6b 	bl	8ed4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    8ffe:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    9002:	4622      	mov	r2, r4
    9004:	1a61      	subs	r1, r4, r1
    9006:	4628      	mov	r0, r5
    9008:	f7ff ffa8 	bl	8f5c <merge_chunks>
    900c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9010:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    9012:	4621      	mov	r1, r4
    9014:	4628      	mov	r0, r5
}
    9016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    901a:	f7ff bf17 	b.w	8e4c <free_list_add>

0000901e <sys_heap_free>:
	if (mem == NULL) {
    901e:	b161      	cbz	r1, 903a <sys_heap_free+0x1c>
    9020:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9022:	3904      	subs	r1, #4
    9024:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    9026:	f021 0307 	bic.w	r3, r1, #7
    902a:	4403      	add	r3, r0
	free_chunk(h, c);
    902c:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    902e:	885a      	ldrh	r2, [r3, #2]
    9030:	f022 0201 	bic.w	r2, r2, #1
    9034:	805a      	strh	r2, [r3, #2]
    9036:	f7ff bfc1 	b.w	8fbc <free_chunk>
}
    903a:	4770      	bx	lr

0000903c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    903c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    903e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    9040:	b909      	cbnz	r1, 9046 <sys_heap_alloc+0xa>
		return NULL;
    9042:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    9044:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    9046:	68ab      	ldr	r3, [r5, #8]
    9048:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    904c:	d9f9      	bls.n	9042 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    904e:	310b      	adds	r1, #11
    9050:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9052:	4621      	mov	r1, r4
    9054:	4628      	mov	r0, r5
    9056:	f7ff ff4a 	bl	8eee <alloc_chunk>
	if (c == 0U) {
    905a:	4606      	mov	r6, r0
    905c:	2800      	cmp	r0, #0
    905e:	d0f0      	beq.n	9042 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    9060:	4601      	mov	r1, r0
    9062:	4628      	mov	r0, r5
    9064:	f7ff feed 	bl	8e42 <chunk_size>
    9068:	42a0      	cmp	r0, r4
    906a:	d907      	bls.n	907c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    906c:	1932      	adds	r2, r6, r4
    906e:	4628      	mov	r0, r5
    9070:	f7ff ff8a 	bl	8f88 <split_chunks>
		free_list_add(h, c + chunk_sz);
    9074:	4611      	mov	r1, r2
    9076:	4628      	mov	r0, r5
    9078:	f7ff fee8 	bl	8e4c <free_list_add>
	void *cmem = &buf[c];
    907c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    9080:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9082:	8853      	ldrh	r3, [r2, #2]
    9084:	f043 0301 	orr.w	r3, r3, #1
    9088:	8053      	strh	r3, [r2, #2]
    908a:	3004      	adds	r0, #4
	return mem;
    908c:	e7da      	b.n	9044 <sys_heap_alloc+0x8>

0000908e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    908e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9092:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    9096:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    909a:	6806      	ldr	r6, [r0, #0]
{
    909c:	460f      	mov	r7, r1
    909e:	4614      	mov	r4, r2
	if (align != rew) {
    90a0:	d00c      	beq.n	90bc <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    90a2:	424b      	negs	r3, r1
    90a4:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    90a6:	2b04      	cmp	r3, #4
    90a8:	461a      	mov	r2, r3
    90aa:	464f      	mov	r7, r9
    90ac:	bf28      	it	cs
    90ae:	2204      	movcs	r2, #4
	rew = align & -align;
    90b0:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    90b2:	b964      	cbnz	r4, 90ce <sys_heap_aligned_alloc+0x40>
		return NULL;
    90b4:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    90b6:	4628      	mov	r0, r5
    90b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    90bc:	2904      	cmp	r1, #4
    90be:	d804      	bhi.n	90ca <sys_heap_aligned_alloc+0x3c>
}
    90c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    90c4:	4611      	mov	r1, r2
    90c6:	f7ff bfb9 	b.w	903c <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    90ca:	2204      	movs	r2, #4
    90cc:	e7f1      	b.n	90b2 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    90ce:	68b3      	ldr	r3, [r6, #8]
    90d0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    90d4:	d9ee      	bls.n	90b4 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    90d6:	f104 010b 	add.w	r1, r4, #11
    90da:	4439      	add	r1, r7
    90dc:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    90de:	08c9      	lsrs	r1, r1, #3
    90e0:	4630      	mov	r0, r6
    90e2:	f7ff ff04 	bl	8eee <alloc_chunk>
	if (c0 == 0) {
    90e6:	4680      	mov	r8, r0
    90e8:	2800      	cmp	r0, #0
    90ea:	d0e3      	beq.n	90b4 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    90ec:	f109 0504 	add.w	r5, r9, #4
    90f0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    90f4:	1e7b      	subs	r3, r7, #1
    90f6:	4435      	add	r5, r6
    90f8:	441d      	add	r5, r3
    90fa:	427f      	negs	r7, r7
    90fc:	403d      	ands	r5, r7
    90fe:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9102:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9104:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9106:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9108:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    910a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    910e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9110:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9114:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9118:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    911c:	d208      	bcs.n	9130 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    911e:	4601      	mov	r1, r0
    9120:	463a      	mov	r2, r7
    9122:	4630      	mov	r0, r6
    9124:	f7ff ff30 	bl	8f88 <split_chunks>
		free_list_add(h, c0);
    9128:	4641      	mov	r1, r8
    912a:	4630      	mov	r0, r6
    912c:	f7ff fe8e 	bl	8e4c <free_list_add>
	return c + chunk_size(h, c);
    9130:	4639      	mov	r1, r7
    9132:	4630      	mov	r0, r6
    9134:	f7ff fe85 	bl	8e42 <chunk_size>
    9138:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    913a:	4284      	cmp	r4, r0
    913c:	d207      	bcs.n	914e <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    913e:	4630      	mov	r0, r6
    9140:	4622      	mov	r2, r4
    9142:	f7ff ff21 	bl	8f88 <split_chunks>
		free_list_add(h, c_end);
    9146:	4621      	mov	r1, r4
    9148:	4630      	mov	r0, r6
    914a:	f7ff fe7f 	bl	8e4c <free_list_add>
	void *cmem = &buf[c];
    914e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9152:	8873      	ldrh	r3, [r6, #2]
    9154:	f043 0301 	orr.w	r3, r3, #1
    9158:	8073      	strh	r3, [r6, #2]
    915a:	e7ac      	b.n	90b6 <sys_heap_aligned_alloc+0x28>

0000915c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    915c:	3a04      	subs	r2, #4
{
    915e:	b4f0      	push	{r4, r5, r6, r7}
    9160:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9162:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9164:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9166:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    916a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    916e:	1a0e      	subs	r6, r1, r0
    9170:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    9172:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    9174:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    9178:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    917a:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    917e:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    9180:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    9182:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    9184:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9188:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    918a:	f1c2 0220 	rsb	r2, r2, #32
    918e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    9190:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    9194:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9198:	4294      	cmp	r4, r2
    919a:	d1fb      	bne.n	9194 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    919c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    919e:	f042 0201 	orr.w	r2, r2, #1
    91a2:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    91a4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    91a8:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    91aa:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    91ac:	8007      	strh	r7, [r0, #0]
    91ae:	8065      	strh	r5, [r4, #2]
    91b0:	1984      	adds	r4, r0, r6
    91b2:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    91b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    91ba:	8067      	strh	r7, [r4, #2]
    91bc:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    91be:	885a      	ldrh	r2, [r3, #2]
    91c0:	f042 0201 	orr.w	r2, r2, #1
    91c4:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    91c6:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    91c8:	f7ff be40 	b.w	8e4c <free_list_add>

000091cc <sys_slist_find_and_remove>:
	return list->head;
    91cc:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    91ce:	2200      	movs	r2, #0
    91d0:	b90b      	cbnz	r3, 91d6 <sys_slist_find_and_remove+0xa>
    91d2:	4618      	mov	r0, r3
    91d4:	4770      	bx	lr
    91d6:	428b      	cmp	r3, r1
    91d8:	d110      	bne.n	91fc <sys_slist_find_and_remove+0x30>
	return node->next;
    91da:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    91dc:	b942      	cbnz	r2, 91f0 <sys_slist_find_and_remove+0x24>
    91de:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    91e0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    91e2:	4291      	cmp	r1, r2
    91e4:	d100      	bne.n	91e8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    91e6:	6043      	str	r3, [r0, #4]
	parent->next = child;
    91e8:	2300      	movs	r3, #0
    91ea:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    91ec:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    91ee:	4770      	bx	lr
	parent->next = child;
    91f0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    91f2:	6843      	ldr	r3, [r0, #4]
    91f4:	4299      	cmp	r1, r3
	list->tail = node;
    91f6:	bf08      	it	eq
    91f8:	6042      	streq	r2, [r0, #4]
}
    91fa:	e7f5      	b.n	91e8 <sys_slist_find_and_remove+0x1c>
	return node->next;
    91fc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    91fe:	681b      	ldr	r3, [r3, #0]
    9200:	e7e6      	b.n	91d0 <sys_slist_find_and_remove+0x4>

00009202 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9202:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9204:	f013 0307 	ands.w	r3, r3, #7
    9208:	d105      	bne.n	9216 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    920a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    920c:	2b00      	cmp	r3, #0
    920e:	bf0c      	ite	eq
    9210:	2000      	moveq	r0, #0
    9212:	2003      	movne	r0, #3
    9214:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9216:	2b02      	cmp	r3, #2
    9218:	d105      	bne.n	9226 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    921a:	8b40      	ldrh	r0, [r0, #26]
    921c:	fab0 f080 	clz	r0, r0
    9220:	0940      	lsrs	r0, r0, #5
    9222:	0080      	lsls	r0, r0, #2
    9224:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9226:	2b01      	cmp	r3, #1
    9228:	d105      	bne.n	9236 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    922a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    922c:	2b00      	cmp	r3, #0
    922e:	bf0c      	ite	eq
    9230:	2000      	moveq	r0, #0
    9232:	2005      	movne	r0, #5
    9234:	4770      	bx	lr
	int evt = EVT_NOP;
    9236:	2000      	movs	r0, #0
}
    9238:	4770      	bx	lr

0000923a <validate_args>:
{
    923a:	b510      	push	{r4, lr}
    923c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    923e:	b100      	cbz	r0, 9242 <validate_args+0x8>
    9240:	b911      	cbnz	r1, 9248 <validate_args+0xe>
		return -EINVAL;
    9242:	f06f 0015 	mvn.w	r0, #21
}
    9246:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    9248:	1d08      	adds	r0, r1, #4
    924a:	f000 f8d6 	bl	93fa <sys_notify_validate>
	if ((rv == 0)
    924e:	2800      	cmp	r0, #0
    9250:	d1f9      	bne.n	9246 <validate_args+0xc>
	    && ((cli->notify.flags
    9252:	68a3      	ldr	r3, [r4, #8]
    9254:	2b03      	cmp	r3, #3
    9256:	d9f6      	bls.n	9246 <validate_args+0xc>
    9258:	e7f3      	b.n	9242 <validate_args+0x8>

0000925a <notify_one>:
{
    925a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    925e:	460d      	mov	r5, r1
    9260:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9262:	4619      	mov	r1, r3
    9264:	1d28      	adds	r0, r5, #4
{
    9266:	4690      	mov	r8, r2
    9268:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    926a:	f000 f8d7 	bl	941c <sys_notify_finalize>
	if (cb) {
    926e:	4604      	mov	r4, r0
    9270:	b138      	cbz	r0, 9282 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9272:	4633      	mov	r3, r6
    9274:	4642      	mov	r2, r8
    9276:	4629      	mov	r1, r5
    9278:	4638      	mov	r0, r7
    927a:	46a4      	mov	ip, r4
}
    927c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9280:	4760      	bx	ip
}
    9282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009286 <transition_complete>:
{
    9286:	b410      	push	{r4}
	__asm__ volatile(
    9288:	f04f 0420 	mov.w	r4, #32
    928c:	f3ef 8211 	mrs	r2, BASEPRI
    9290:	f384 8812 	msr	BASEPRI_MAX, r4
    9294:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9298:	6141      	str	r1, [r0, #20]
}
    929a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    929c:	2101      	movs	r1, #1
    929e:	f7f8 b8df 	b.w	1460 <process_event>

000092a2 <onoff_manager_init>:
{
    92a2:	b538      	push	{r3, r4, r5, lr}
    92a4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    92a6:	4605      	mov	r5, r0
    92a8:	b158      	cbz	r0, 92c2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    92aa:	b151      	cbz	r1, 92c2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    92ac:	680b      	ldr	r3, [r1, #0]
    92ae:	b143      	cbz	r3, 92c2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    92b0:	684b      	ldr	r3, [r1, #4]
    92b2:	b133      	cbz	r3, 92c2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    92b4:	221c      	movs	r2, #28
    92b6:	2100      	movs	r1, #0
    92b8:	f000 fb66 	bl	9988 <memset>
    92bc:	612c      	str	r4, [r5, #16]
	return 0;
    92be:	2000      	movs	r0, #0
}
    92c0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    92c2:	f06f 0015 	mvn.w	r0, #21
    92c6:	e7fb      	b.n	92c0 <onoff_manager_init+0x1e>

000092c8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    92c8:	b570      	push	{r4, r5, r6, lr}
    92ca:	4605      	mov	r5, r0
    92cc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    92ce:	f7ff ffb4 	bl	923a <validate_args>

	if (rv < 0) {
    92d2:	1e04      	subs	r4, r0, #0
    92d4:	db15      	blt.n	9302 <onoff_request+0x3a>
    92d6:	f04f 0320 	mov.w	r3, #32
    92da:	f3ef 8211 	mrs	r2, BASEPRI
    92de:	f383 8812 	msr	BASEPRI_MAX, r3
    92e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    92e6:	8b6b      	ldrh	r3, [r5, #26]
    92e8:	8b2c      	ldrh	r4, [r5, #24]
    92ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    92ee:	428b      	cmp	r3, r1
    92f0:	f004 0407 	and.w	r4, r4, #7
    92f4:	d107      	bne.n	9306 <onoff_request+0x3e>
	__asm__ volatile(
    92f6:	f382 8811 	msr	BASEPRI, r2
    92fa:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    92fe:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    9302:	4620      	mov	r0, r4
    9304:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    9306:	2c02      	cmp	r4, #2
    9308:	d10c      	bne.n	9324 <onoff_request+0x5c>
		mgr->refs += 1U;
    930a:	3301      	adds	r3, #1
    930c:	836b      	strh	r3, [r5, #26]
    930e:	f382 8811 	msr	BASEPRI, r2
    9312:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    9316:	2300      	movs	r3, #0
    9318:	4622      	mov	r2, r4
    931a:	4631      	mov	r1, r6
    931c:	4628      	mov	r0, r5
    931e:	f7ff ff9c 	bl	925a <notify_one>
    9322:	e7ee      	b.n	9302 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    9324:	2c06      	cmp	r4, #6
    9326:	d814      	bhi.n	9352 <onoff_request+0x8a>
    9328:	e8df f004 	tbb	[pc, r4]
    932c:	13131304 	.word	0x13131304
    9330:	1a04      	.short	0x1a04
    9332:	04          	.byte	0x04
    9333:	00          	.byte	0x00
	parent->next = child;
    9334:	2300      	movs	r3, #0
    9336:	6033      	str	r3, [r6, #0]
	return list->tail;
    9338:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    933a:	b93b      	cbnz	r3, 934c <onoff_request+0x84>
	list->head = node;
    933c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    9340:	b9ac      	cbnz	r4, 936e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    9342:	2102      	movs	r1, #2
    9344:	4628      	mov	r0, r5
    9346:	f7f8 f88b 	bl	1460 <process_event>
    934a:	e7da      	b.n	9302 <onoff_request+0x3a>
	parent->next = child;
    934c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    934e:	606e      	str	r6, [r5, #4]
}
    9350:	e7f6      	b.n	9340 <onoff_request+0x78>
    9352:	f382 8811 	msr	BASEPRI, r2
    9356:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    935a:	f06f 0404 	mvn.w	r4, #4
    935e:	e7d0      	b.n	9302 <onoff_request+0x3a>
    9360:	f382 8811 	msr	BASEPRI, r2
    9364:	f3bf 8f6f 	isb	sy
    9368:	f06f 0485 	mvn.w	r4, #133	; 0x85
    936c:	e7c9      	b.n	9302 <onoff_request+0x3a>
    936e:	f382 8811 	msr	BASEPRI, r2
    9372:	f3bf 8f6f 	isb	sy
		if (notify) {
    9376:	e7c4      	b.n	9302 <onoff_request+0x3a>

00009378 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    9378:	b510      	push	{r4, lr}
	__asm__ volatile(
    937a:	f04f 0320 	mov.w	r3, #32
    937e:	f3ef 8211 	mrs	r2, BASEPRI
    9382:	f383 8812 	msr	BASEPRI_MAX, r3
    9386:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    938a:	8b04      	ldrh	r4, [r0, #24]
    938c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9390:	2c02      	cmp	r4, #2
    9392:	d00a      	beq.n	93aa <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9394:	2c01      	cmp	r4, #1
    9396:	bf0c      	ite	eq
    9398:	f06f 0004 	mvneq.w	r0, #4
    939c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    93a0:	f382 8811 	msr	BASEPRI, r2
    93a4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    93a8:	e008      	b.n	93bc <onoff_release+0x44>
	mgr->refs -= 1U;
    93aa:	8b43      	ldrh	r3, [r0, #26]
    93ac:	3b01      	subs	r3, #1
    93ae:	b29b      	uxth	r3, r3
    93b0:	8343      	strh	r3, [r0, #26]
	if (stop) {
    93b2:	b923      	cbnz	r3, 93be <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    93b4:	4621      	mov	r1, r4
    93b6:	f7f8 f853 	bl	1460 <process_event>
	int rv = state;
    93ba:	4620      	mov	r0, r4
}
    93bc:	bd10      	pop	{r4, pc}
	int rv = state;
    93be:	4620      	mov	r0, r4
    93c0:	e7ee      	b.n	93a0 <onoff_release+0x28>

000093c2 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    93c2:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    93c4:	b1b0      	cbz	r0, 93f4 <onoff_cancel+0x32>
    93c6:	b1a9      	cbz	r1, 93f4 <onoff_cancel+0x32>
	__asm__ volatile(
    93c8:	f04f 0220 	mov.w	r2, #32
    93cc:	f3ef 8511 	mrs	r5, BASEPRI
    93d0:	f382 8812 	msr	BASEPRI_MAX, r2
    93d4:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    93d8:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    93da:	f7ff fef7 	bl	91cc <sys_slist_find_and_remove>
    93de:	b130      	cbz	r0, 93ee <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    93e0:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    93e4:	f385 8811 	msr	BASEPRI, r5
    93e8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    93ec:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    93ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
    93f2:	e7f7      	b.n	93e4 <onoff_cancel+0x22>
		return -EINVAL;
    93f4:	f06f 0015 	mvn.w	r0, #21
    93f8:	e7f8      	b.n	93ec <onoff_cancel+0x2a>

000093fa <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    93fa:	4603      	mov	r3, r0
    93fc:	b158      	cbz	r0, 9416 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    93fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9400:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9404:	2a01      	cmp	r2, #1
    9406:	d003      	beq.n	9410 <sys_notify_validate+0x16>
    9408:	2a03      	cmp	r2, #3
    940a:	d104      	bne.n	9416 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    940c:	6802      	ldr	r2, [r0, #0]
    940e:	b112      	cbz	r2, 9416 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9410:	2000      	movs	r0, #0
    9412:	6098      	str	r0, [r3, #8]
    9414:	4770      	bx	lr
    9416:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    941a:	4770      	bx	lr

0000941c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    941c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    941e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9420:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9424:	2a03      	cmp	r2, #3
    9426:	f04f 0200 	mov.w	r2, #0
{
    942a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    942c:	bf0c      	ite	eq
    942e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9430:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9432:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9434:	4770      	bx	lr

00009436 <encode_uint>:
{
    9436:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    943a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    943c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    943e:	2b6f      	cmp	r3, #111	; 0x6f
{
    9440:	4680      	mov	r8, r0
    9442:	460f      	mov	r7, r1
    9444:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9446:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    944a:	d029      	beq.n	94a0 <encode_uint+0x6a>
    944c:	d824      	bhi.n	9498 <encode_uint+0x62>
		return 10;
    944e:	2b58      	cmp	r3, #88	; 0x58
    9450:	bf0c      	ite	eq
    9452:	2610      	moveq	r6, #16
    9454:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    9456:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    945a:	4632      	mov	r2, r6
    945c:	2300      	movs	r3, #0
    945e:	4640      	mov	r0, r8
    9460:	4639      	mov	r1, r7
    9462:	f7f7 fe4d 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9466:	2a09      	cmp	r2, #9
    9468:	b2d4      	uxtb	r4, r2
    946a:	d81e      	bhi.n	94aa <encode_uint+0x74>
    946c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    946e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9470:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    9472:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9476:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    947a:	d301      	bcc.n	9480 <encode_uint+0x4a>
    947c:	45d1      	cmp	r9, sl
    947e:	d811      	bhi.n	94a4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    9480:	782b      	ldrb	r3, [r5, #0]
    9482:	069b      	lsls	r3, r3, #26
    9484:	d505      	bpl.n	9492 <encode_uint+0x5c>
		if (radix == 8) {
    9486:	2e08      	cmp	r6, #8
    9488:	d115      	bne.n	94b6 <encode_uint+0x80>
			conv->altform_0 = true;
    948a:	78ab      	ldrb	r3, [r5, #2]
    948c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9490:	70ab      	strb	r3, [r5, #2]
}
    9492:	4648      	mov	r0, r9
    9494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9498:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    949c:	2b70      	cmp	r3, #112	; 0x70
    949e:	e7d7      	b.n	9450 <encode_uint+0x1a>
	switch (specifier) {
    94a0:	2608      	movs	r6, #8
    94a2:	e7d8      	b.n	9456 <encode_uint+0x20>
		value /= radix;
    94a4:	4680      	mov	r8, r0
    94a6:	460f      	mov	r7, r1
    94a8:	e7d7      	b.n	945a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    94aa:	f1bb 0f19 	cmp.w	fp, #25
    94ae:	bf94      	ite	ls
    94b0:	3437      	addls	r4, #55	; 0x37
    94b2:	3457      	addhi	r4, #87	; 0x57
    94b4:	e7db      	b.n	946e <encode_uint+0x38>
		} else if (radix == 16) {
    94b6:	2e10      	cmp	r6, #16
    94b8:	d1eb      	bne.n	9492 <encode_uint+0x5c>
			conv->altform_0c = true;
    94ba:	78ab      	ldrb	r3, [r5, #2]
    94bc:	f043 0310 	orr.w	r3, r3, #16
    94c0:	e7e6      	b.n	9490 <encode_uint+0x5a>

000094c2 <outs>:
{
    94c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94c6:	4607      	mov	r7, r0
    94c8:	4688      	mov	r8, r1
    94ca:	4615      	mov	r5, r2
    94cc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    94ce:	4614      	mov	r4, r2
    94d0:	42b4      	cmp	r4, r6
    94d2:	d305      	bcc.n	94e0 <outs+0x1e>
    94d4:	b10e      	cbz	r6, 94da <outs+0x18>
	return (int)count;
    94d6:	1b60      	subs	r0, r4, r5
    94d8:	e008      	b.n	94ec <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    94da:	7823      	ldrb	r3, [r4, #0]
    94dc:	2b00      	cmp	r3, #0
    94de:	d0fa      	beq.n	94d6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    94e0:	f814 0b01 	ldrb.w	r0, [r4], #1
    94e4:	4641      	mov	r1, r8
    94e6:	47b8      	blx	r7
		if (rc < 0) {
    94e8:	2800      	cmp	r0, #0
    94ea:	daf1      	bge.n	94d0 <outs+0xe>
}
    94ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000094f0 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    94f2:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    94f4:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    94f6:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    94f8:	1baf      	subs	r7, r5, r6
{
    94fa:	4604      	mov	r4, r0
    94fc:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    94fe:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    9500:	bf98      	it	ls
    9502:	1aff      	subls	r7, r7, r3
    9504:	eba5 0000 	sub.w	r0, r5, r0
{
    9508:	4694      	mov	ip, r2
		base += buf->size;
    950a:	bf98      	it	ls
    950c:	18f6      	addls	r6, r6, r3
    950e:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    9510:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    9512:	6823      	ldr	r3, [r4, #0]
    9514:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    9516:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    9518:	442b      	add	r3, r5
	size = MIN(size, free_space);
    951a:	bf28      	it	cs
    951c:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    951e:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    9520:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    9522:	4290      	cmp	r0, r2
    9524:	bf28      	it	cs
    9526:	4610      	movcs	r0, r2
	buf->put_head += size;
    9528:	4403      	add	r3, r0
    952a:	6063      	str	r3, [r4, #4]

	return size;
}
    952c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000952e <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    952e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    9532:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    9534:	428a      	cmp	r2, r1
    9536:	d30c      	bcc.n	9552 <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    9538:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    953a:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    953c:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    953e:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    9542:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    9544:	428a      	cmp	r2, r1
    9546:	d901      	bls.n	954c <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    9548:	2000      	movs	r0, #0
    954a:	4770      	bx	lr
		buf->put_base += buf->size;
    954c:	4413      	add	r3, r2
    954e:	60c3      	str	r3, [r0, #12]
    9550:	e7fa      	b.n	9548 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    9552:	f06f 0015 	mvn.w	r0, #21
}
    9556:	4770      	bx	lr

00009558 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    9558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    955c:	4680      	mov	r8, r0
    955e:	460e      	mov	r6, r1
    9560:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    9562:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    9564:	462a      	mov	r2, r5
    9566:	a901      	add	r1, sp, #4
    9568:	4640      	mov	r0, r8
    956a:	f7ff ffc1 	bl	94f0 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    956e:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    9570:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    9572:	4602      	mov	r2, r0
    9574:	9801      	ldr	r0, [sp, #4]
    9576:	f000 f9fc 	bl	9972 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    957a:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    957c:	4427      	add	r7, r4
		data += partial_size;
    957e:	4426      	add	r6, r4
	} while (size && partial_size);
    9580:	d001      	beq.n	9586 <ring_buf_put+0x2e>
    9582:	2c00      	cmp	r4, #0
    9584:	d1ee      	bne.n	9564 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    9586:	4639      	mov	r1, r7
    9588:	4640      	mov	r0, r8
    958a:	f7ff ffd0 	bl	952e <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    958e:	4638      	mov	r0, r7
    9590:	b002      	add	sp, #8
    9592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009596 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9596:	b5f0      	push	{r4, r5, r6, r7, lr}
    9598:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    959a:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    959c:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    959e:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    95a0:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    95a2:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    95a4:	42b8      	cmp	r0, r7
{
    95a6:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    95a8:	bf98      	it	ls
    95aa:	1836      	addls	r6, r6, r0
    95ac:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    95b0:	6823      	ldr	r3, [r4, #0]
    95b2:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    95b6:	bf98      	it	ls
    95b8:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    95ba:	442b      	add	r3, r5
	size = MIN(size, available_size);
    95bc:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    95be:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    95c2:	bf28      	it	cs
    95c4:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    95c6:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    95c8:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    95ca:	4290      	cmp	r0, r2
    95cc:	bf28      	it	cs
    95ce:	4610      	movcs	r0, r2
	buf->get_head += size;
    95d0:	4403      	add	r3, r0
    95d2:	6123      	str	r3, [r4, #16]

	return size;
}
    95d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000095d6 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    95d6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    95da:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    95dc:	428a      	cmp	r2, r1
    95de:	d30c      	bcc.n	95fa <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    95e0:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    95e2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    95e6:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    95ea:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    95ec:	428a      	cmp	r2, r1
    95ee:	d901      	bls.n	95f4 <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    95f0:	2000      	movs	r0, #0
    95f2:	4770      	bx	lr
		buf->get_base += buf->size;
    95f4:	4413      	add	r3, r2
    95f6:	6183      	str	r3, [r0, #24]
    95f8:	e7fa      	b.n	95f0 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    95fa:	f06f 0015 	mvn.w	r0, #21
}
    95fe:	4770      	bx	lr

00009600 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    9600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9604:	4680      	mov	r8, r0
    9606:	460d      	mov	r5, r1
    9608:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    960a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    960c:	4632      	mov	r2, r6
    960e:	a901      	add	r1, sp, #4
    9610:	4640      	mov	r0, r8
    9612:	f7ff ffc0 	bl	9596 <ring_buf_get_claim>
    9616:	4604      	mov	r4, r0
		if (data) {
    9618:	b12d      	cbz	r5, 9626 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    961a:	4602      	mov	r2, r0
    961c:	9901      	ldr	r1, [sp, #4]
    961e:	4628      	mov	r0, r5
    9620:	f000 f9a7 	bl	9972 <memcpy>
			data += partial_size;
    9624:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    9626:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    9628:	4427      	add	r7, r4
	} while (size && partial_size);
    962a:	d001      	beq.n	9630 <ring_buf_get+0x30>
    962c:	2c00      	cmp	r4, #0
    962e:	d1ed      	bne.n	960c <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    9630:	4639      	mov	r1, r7
    9632:	4640      	mov	r0, r8
    9634:	f7ff ffcf 	bl	95d6 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    9638:	4638      	mov	r0, r7
    963a:	b002      	add	sp, #8
    963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009640 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9640:	4770      	bx	lr

00009642 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    9642:	f010 0f70 	tst.w	r0, #112	; 0x70
    9646:	d108      	bne.n	965a <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
    9648:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    964c:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    9650:	bf18      	it	ne
    9652:	3310      	addne	r3, #16
    9654:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    9656:	4098      	lsls	r0, r3
    9658:	4770      	bx	lr
	uint32_t ep_bm = 0;
    965a:	2000      	movs	r0, #0
}
    965c:	4770      	bx	lr

0000965e <usb_write>:
{
    965e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9662:	4606      	mov	r6, r0
    9664:	460f      	mov	r7, r1
    9666:	4690      	mov	r8, r2
    9668:	4699      	mov	r9, r3
    966a:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    966c:	464b      	mov	r3, r9
    966e:	4642      	mov	r2, r8
    9670:	4639      	mov	r1, r7
    9672:	4630      	mov	r0, r6
    9674:	f7fa ff6a 	bl	454c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    9678:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    967c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    967e:	d103      	bne.n	9688 <usb_write+0x2a>
	z_impl_k_yield();
    9680:	f7fe fefc 	bl	847c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    9684:	3d01      	subs	r5, #1
    9686:	d1f1      	bne.n	966c <usb_write+0xe>
}
    9688:	4620      	mov	r0, r4
    968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000968e <usb_get_dev_data_by_cfg>:
	return list->head;
    968e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9690:	b140      	cbz	r0, 96a4 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    9692:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    9696:	685b      	ldr	r3, [r3, #4]
    9698:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    969a:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    969e:	d001      	beq.n	96a4 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    96a0:	6840      	ldr	r0, [r0, #4]
    96a2:	e7f5      	b.n	9690 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    96a4:	4770      	bx	lr

000096a6 <usb_get_dev_data_by_iface>:
	return list->head;
    96a6:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    96a8:	b150      	cbz	r0, 96c0 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    96aa:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    96ae:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    96b0:	685b      	ldr	r3, [r3, #4]
    96b2:	789b      	ldrb	r3, [r3, #2]
    96b4:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    96b6:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    96ba:	d001      	beq.n	96c0 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    96bc:	6840      	ldr	r0, [r0, #4]
    96be:	e7f3      	b.n	96a8 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    96c0:	4770      	bx	lr

000096c2 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    96c2:	b530      	push	{r4, r5, lr}
	return list->head;
    96c4:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    96c6:	b188      	cbz	r0, 96ec <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    96c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    96cc:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    96ce:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    96d0:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    96d2:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    96d4:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    96d6:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    96d8:	b2dc      	uxtb	r4, r3
    96da:	42a5      	cmp	r5, r4
    96dc:	d801      	bhi.n	96e2 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    96de:	6840      	ldr	r0, [r0, #4]
    96e0:	e7f1      	b.n	96c6 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    96e2:	3301      	adds	r3, #1
    96e4:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    96e8:	428c      	cmp	r4, r1
    96ea:	d1f5      	bne.n	96d8 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    96ec:	bd30      	pop	{r4, r5, pc}

000096ee <usb_transfer_is_busy>:
{
    96ee:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    96f0:	f7f9 fa1e 	bl	2b30 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    96f4:	b128      	cbz	r0, 9702 <usb_transfer_is_busy+0x14>
    96f6:	6840      	ldr	r0, [r0, #4]
    96f8:	f110 0f10 	cmn.w	r0, #16
    96fc:	bf14      	ite	ne
    96fe:	2000      	movne	r0, #0
    9700:	2001      	moveq	r0, #1
}
    9702:	bd08      	pop	{r3, pc}

00009704 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    9704:	1c4b      	adds	r3, r1, #1
    9706:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    9708:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    970a:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    970c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    9710:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    9712:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    9716:	4770      	bx	lr

00009718 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    9718:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    971c:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    9720:	4718      	bx	r3

00009722 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9722:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    9724:	2200      	movs	r2, #0
    9726:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    972a:	4770      	bx	lr

0000972c <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    972c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    972e:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    9732:	b108      	cbz	r0, 9738 <cdc_acm_irq_tx_ready+0xc>
    9734:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    9738:	4770      	bx	lr

0000973a <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    973a:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    973c:	2200      	movs	r2, #0
    973e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    9742:	4770      	bx	lr

00009744 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    9744:	6903      	ldr	r3, [r0, #16]
}
    9746:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    974a:	4770      	bx	lr

0000974c <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    974c:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    974e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    9752:	b112      	cbz	r2, 975a <cdc_acm_irq_is_pending+0xe>
    9754:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    9758:	b92a      	cbnz	r2, 9766 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    975a:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    975e:	b118      	cbz	r0, 9768 <cdc_acm_irq_is_pending+0x1c>
    9760:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    9764:	4770      	bx	lr
		return 1;
    9766:	2001      	movs	r0, #1
}
    9768:	4770      	bx	lr

0000976a <cdc_acm_irq_update>:
}
    976a:	2001      	movs	r0, #1
    976c:	4770      	bx	lr

0000976e <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    976e:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    9770:	e9c3 1200 	strd	r1, r2, [r3]
}
    9774:	4770      	bx	lr

00009776 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    9776:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9778:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    977a:	d008      	beq.n	978e <cdc_acm_line_ctrl_get+0x18>
    977c:	2904      	cmp	r1, #4
    977e:	d00b      	beq.n	9798 <cdc_acm_line_ctrl_get+0x22>
    9780:	2901      	cmp	r1, #1
    9782:	d10e      	bne.n	97a2 <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    9784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    9788:	6013      	str	r3, [r2, #0]
		return 0;
    978a:	2000      	movs	r0, #0
    978c:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    978e:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    9792:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    9796:	e7f7      	b.n	9788 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    9798:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    979c:	f003 0301 	and.w	r3, r3, #1
		return 0;
    97a0:	e7f2      	b.n	9788 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    97a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    97a6:	4770      	bx	lr

000097a8 <cdc_acm_configure>:
}
    97a8:	2000      	movs	r0, #0
    97aa:	4770      	bx	lr

000097ac <cdc_acm_config_get>:
{
    97ac:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    97ae:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    97b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    97b4:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    97b6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    97ba:	b16a      	cbz	r2, 97d8 <cdc_acm_config_get+0x2c>
    97bc:	2a01      	cmp	r2, #1
    97be:	bf0c      	ite	eq
    97c0:	2202      	moveq	r2, #2
    97c2:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    97c4:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    97c6:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    97ca:	1e50      	subs	r0, r2, #1
    97cc:	2803      	cmp	r0, #3
    97ce:	d805      	bhi.n	97dc <cdc_acm_config_get+0x30>
    97d0:	e8df f000 	tbb	[pc, r0]
    97d4:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    97d8:	2201      	movs	r2, #1
    97da:	e7f3      	b.n	97c4 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    97dc:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    97de:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    97e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    97e4:	2b06      	cmp	r3, #6
    97e6:	d009      	beq.n	97fc <cdc_acm_config_get+0x50>
    97e8:	2b07      	cmp	r3, #7
    97ea:	d009      	beq.n	9800 <cdc_acm_config_get+0x54>
    97ec:	2b05      	cmp	r3, #5
    97ee:	bf0c      	ite	eq
    97f0:	2300      	moveq	r3, #0
    97f2:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    97f4:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    97f6:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    97f8:	71c8      	strb	r0, [r1, #7]
}
    97fa:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    97fc:	2301      	movs	r3, #1
    97fe:	e7f9      	b.n	97f4 <cdc_acm_config_get+0x48>
    9800:	2302      	movs	r3, #2
    9802:	e7f7      	b.n	97f4 <cdc_acm_config_get+0x48>

00009804 <cdc_acm_line_ctrl_set>:
{
    9804:	b508      	push	{r3, lr}
	switch (ctrl) {
    9806:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9808:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    980a:	d03f      	beq.n	988c <cdc_acm_line_ctrl_set+0x88>
    980c:	d813      	bhi.n	9836 <cdc_acm_line_ctrl_set+0x32>
    980e:	2910      	cmp	r1, #16
    9810:	d032      	beq.n	9878 <cdc_acm_line_ctrl_set+0x74>
    9812:	d806      	bhi.n	9822 <cdc_acm_line_ctrl_set+0x1e>
    9814:	2901      	cmp	r1, #1
    9816:	d01e      	beq.n	9856 <cdc_acm_line_ctrl_set+0x52>
    9818:	2908      	cmp	r1, #8
    981a:	d020      	beq.n	985e <cdc_acm_line_ctrl_set+0x5a>
    981c:	f06f 0012 	mvn.w	r0, #18
}
    9820:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    9822:	2920      	cmp	r1, #32
    9824:	d1fa      	bne.n	981c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    9826:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    982a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    982e:	b352      	cbz	r2, 9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    9830:	f041 0104 	orr.w	r1, r1, #4
    9834:	e027      	b.n	9886 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    9836:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    983a:	d030      	beq.n	989e <cdc_acm_line_ctrl_set+0x9a>
    983c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9840:	d036      	beq.n	98b0 <cdc_acm_line_ctrl_set+0xac>
    9842:	2980      	cmp	r1, #128	; 0x80
    9844:	d1ea      	bne.n	981c <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    9846:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    984a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    984e:	b1d2      	cbz	r2, 9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    9850:	f041 0110 	orr.w	r1, r1, #16
    9854:	e017      	b.n	9886 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    9856:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    985a:	2000      	movs	r0, #0
    985c:	e7e0      	b.n	9820 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    985e:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9862:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    9866:	b10a      	cbz	r2, 986c <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    9868:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    986c:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    9870:	2101      	movs	r1, #1
    9872:	f7f9 fc2b 	bl	30cc <cdc_acm_send_notification.isra.0>
		return 0;
    9876:	e7f0      	b.n	985a <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    9878:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    987c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    9880:	b10a      	cbz	r2, 9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    9882:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    9886:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    988a:	e7f2      	b.n	9872 <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    988c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9890:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    9894:	2a00      	cmp	r2, #0
    9896:	d0f6      	beq.n	9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    9898:	f041 0108 	orr.w	r1, r1, #8
    989c:	e7f3      	b.n	9886 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    989e:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    98a2:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    98a6:	2a00      	cmp	r2, #0
    98a8:	d0ed      	beq.n	9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    98aa:	f041 0120 	orr.w	r1, r1, #32
    98ae:	e7ea      	b.n	9886 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    98b0:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    98b4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    98b8:	2a00      	cmp	r2, #0
    98ba:	d0e4      	beq.n	9886 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    98bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    98c0:	e7e1      	b.n	9886 <cdc_acm_line_ctrl_set+0x82>

000098c2 <cdc_acm_fifo_read>:
{
    98c2:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    98c4:	6904      	ldr	r4, [r0, #16]
{
    98c6:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    98c8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    98cc:	f7ff fe98 	bl	9600 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    98d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    98d4:	691a      	ldr	r2, [r3, #16]
    98d6:	6899      	ldr	r1, [r3, #8]
    98d8:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    98da:	bf04      	itt	eq
    98dc:	2200      	moveq	r2, #0
    98de:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    98e2:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    98e6:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    98e8:	b19a      	cbz	r2, 9912 <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    98ea:	685a      	ldr	r2, [r3, #4]
    98ec:	6959      	ldr	r1, [r3, #20]
    98ee:	69db      	ldr	r3, [r3, #28]
    98f0:	1a52      	subs	r2, r2, r1
    98f2:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    98f4:	2b3f      	cmp	r3, #63	; 0x3f
    98f6:	d90c      	bls.n	9912 <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    98f8:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    98fc:	b133      	cbz	r3, 990c <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    98fe:	686b      	ldr	r3, [r5, #4]
    9900:	6a1b      	ldr	r3, [r3, #32]
    9902:	4622      	mov	r2, r4
    9904:	7b18      	ldrb	r0, [r3, #12]
    9906:	2100      	movs	r1, #0
    9908:	f7f9 fc02 	bl	3110 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    990c:	2300      	movs	r3, #0
    990e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    9912:	4630      	mov	r0, r6
    9914:	bd70      	pop	{r4, r5, r6, pc}

00009916 <cdc_acm_poll_in>:
{
    9916:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    9918:	2201      	movs	r2, #1
    991a:	f7ff ffd2 	bl	98c2 <cdc_acm_fifo_read>
}
    991e:	3801      	subs	r0, #1
    9920:	bf18      	it	ne
    9922:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9926:	bd08      	pop	{r3, pc}

00009928 <abort_function>:
{
    9928:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    992a:	2000      	movs	r0, #0
    992c:	f7f8 fa58 	bl	1de0 <sys_reboot>

00009930 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9930:	f000 bbdd 	b.w	a0ee <z_fatal_error>

00009934 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9934:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9936:	6800      	ldr	r0, [r0, #0]
    9938:	f000 bbd9 	b.w	a0ee <z_fatal_error>

0000993c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    993c:	2100      	movs	r1, #0
    993e:	2001      	movs	r0, #1
    9940:	f7ff bff6 	b.w	9930 <z_arm_fatal_error>

00009944 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9944:	b508      	push	{r3, lr}
	handler();
    9946:	f7f9 fdcb 	bl	34e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    994a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    994e:	f7f9 bea3 	b.w	3698 <z_arm_exc_exit>

00009952 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9952:	4603      	mov	r3, r0
	size_t n = 0;
    9954:	2000      	movs	r0, #0

	while (*s != '\0') {
    9956:	5c1a      	ldrb	r2, [r3, r0]
    9958:	b902      	cbnz	r2, 995c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    995a:	4770      	bx	lr
		n++;
    995c:	3001      	adds	r0, #1
    995e:	e7fa      	b.n	9956 <strlen+0x4>

00009960 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9960:	4603      	mov	r3, r0
	size_t n = 0;
    9962:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9964:	5c1a      	ldrb	r2, [r3, r0]
    9966:	b10a      	cbz	r2, 996c <strnlen+0xc>
    9968:	4288      	cmp	r0, r1
    996a:	d100      	bne.n	996e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    996c:	4770      	bx	lr
		n++;
    996e:	3001      	adds	r0, #1
    9970:	e7f8      	b.n	9964 <strnlen+0x4>

00009972 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9972:	b510      	push	{r4, lr}
    9974:	1e43      	subs	r3, r0, #1
    9976:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9978:	4291      	cmp	r1, r2
    997a:	d100      	bne.n	997e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    997c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    997e:	f811 4b01 	ldrb.w	r4, [r1], #1
    9982:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9986:	e7f7      	b.n	9978 <memcpy+0x6>

00009988 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9988:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    998a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    998c:	4603      	mov	r3, r0
	while (n > 0) {
    998e:	4293      	cmp	r3, r2
    9990:	d100      	bne.n	9994 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9992:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9994:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9998:	e7f9      	b.n	998e <memset+0x6>

0000999a <_stdout_hook_default>:
}
    999a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    999e:	4770      	bx	lr

000099a0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    99a0:	2806      	cmp	r0, #6
    99a2:	d108      	bne.n	99b6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    99a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    99a8:	2201      	movs	r2, #1
    99aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    99ae:	f3bf 8f4f 	dsb	sy
        __WFE();
    99b2:	bf20      	wfe
    while (true)
    99b4:	e7fd      	b.n	99b2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    99b6:	4770      	bx	lr

000099b8 <pm_state_exit_post_ops>:
    99b8:	2300      	movs	r3, #0
    99ba:	f383 8811 	msr	BASEPRI, r3
    99be:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    99c2:	4770      	bx	lr

000099c4 <ep_ctx_reset>:
{
    99c4:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    99c6:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    99c8:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    99cc:	2300      	movs	r3, #0
    99ce:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    99d0:	7f83      	ldrb	r3, [r0, #30]
{
    99d2:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    99d4:	b113      	cbz	r3, 99dc <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    99d6:	7a40      	ldrb	r0, [r0, #9]
    99d8:	f000 fb6e 	bl	a0b8 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    99dc:	2301      	movs	r3, #1
    99de:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    99e0:	2300      	movs	r3, #0
    99e2:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    99e4:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    99e6:	77a3      	strb	r3, [r4, #30]
}
    99e8:	bd10      	pop	{r4, pc}

000099ea <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    99ea:	f7fe b87d 	b.w	7ae8 <z_impl_k_mutex_lock>

000099ee <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    99ee:	f7fe b8f5 	b.w	7bdc <z_impl_k_mutex_unlock>

000099f2 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    99f2:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    99f4:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    99f6:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    99fa:	b921      	cbnz	r1, 9a06 <usb_dc_ep_check_cap+0x14>
    99fc:	3a00      	subs	r2, #0
    99fe:	bf18      	it	ne
    9a00:	2201      	movne	r2, #1
    9a02:	4250      	negs	r0, r2
    9a04:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    9a06:	2a08      	cmp	r2, #8
    9a08:	d806      	bhi.n	9a18 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    9a0a:	2901      	cmp	r1, #1
    9a0c:	d107      	bne.n	9a1e <usb_dc_ep_check_cap+0x2c>
    9a0e:	f083 0008 	eor.w	r0, r3, #8
    9a12:	f340 00c0 	sbfx	r0, r0, #3, #1
    9a16:	4770      	bx	lr
		return -1;
    9a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9a1c:	4770      	bx	lr
	return 0;
    9a1e:	2000      	movs	r0, #0
}
    9a20:	4770      	bx	lr

00009a22 <usb_dc_ep_disable>:
{
    9a22:	b538      	push	{r3, r4, r5, lr}
    9a24:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    9a26:	f7fa f92b 	bl	3c80 <endpoint_ctx>
	if (!ep_ctx) {
    9a2a:	4605      	mov	r5, r0
    9a2c:	b160      	cbz	r0, 9a48 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    9a2e:	7a03      	ldrb	r3, [r0, #8]
    9a30:	b16b      	cbz	r3, 9a4e <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9a32:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    9a34:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9a36:	f7fd fd4f 	bl	74d8 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    9a3a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    9a3c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    9a3e:	f7ff ffc1 	bl	99c4 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    9a42:	722c      	strb	r4, [r5, #8]
	return 0;
    9a44:	4620      	mov	r0, r4
}
    9a46:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9a48:	f06f 0015 	mvn.w	r0, #21
    9a4c:	e7fb      	b.n	9a46 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    9a4e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a52:	e7f8      	b.n	9a46 <usb_dc_ep_disable+0x24>

00009a54 <usb_dc_ep_read>:
{
    9a54:	b570      	push	{r4, r5, r6, lr}
    9a56:	4604      	mov	r4, r0
    9a58:	460e      	mov	r6, r1
    9a5a:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    9a5c:	f7fa fdf2 	bl	4644 <usb_dc_ep_read_wait>
	if (ret) {
    9a60:	b930      	cbnz	r0, 9a70 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    9a62:	b906      	cbnz	r6, 9a66 <usb_dc_ep_read+0x12>
    9a64:	b125      	cbz	r5, 9a70 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    9a66:	4620      	mov	r0, r4
}
    9a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    9a6c:	f7fa be32 	b.w	46d4 <usb_dc_ep_read_continue>
}
    9a70:	bd70      	pop	{r4, r5, r6, pc}

00009a72 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9a72:	6903      	ldr	r3, [r0, #16]
    9a74:	b2c9      	uxtb	r1, r1
    9a76:	220c      	movs	r2, #12
    9a78:	fb01 3302 	mla	r3, r1, r2, r3
    9a7c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9a7e:	f000 0007 	and.w	r0, r0, #7
    9a82:	4770      	bx	lr

00009a84 <set_on_state>:
	__asm__ volatile(
    9a84:	f04f 0320 	mov.w	r3, #32
    9a88:	f3ef 8211 	mrs	r2, BASEPRI
    9a8c:	f383 8812 	msr	BASEPRI_MAX, r3
    9a90:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9a94:	6803      	ldr	r3, [r0, #0]
    9a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9a9a:	f043 0302 	orr.w	r3, r3, #2
    9a9e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9aa0:	f382 8811 	msr	BASEPRI, r2
    9aa4:	f3bf 8f6f 	isb	sy
}
    9aa8:	4770      	bx	lr

00009aaa <stop>:
{
    9aaa:	b570      	push	{r4, r5, r6, lr}
    9aac:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    9aae:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    9ab0:	f04f 0420 	mov.w	r4, #32
    9ab4:	f3ef 8511 	mrs	r5, BASEPRI
    9ab8:	f384 8812 	msr	BASEPRI_MAX, r4
    9abc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9ac0:	260c      	movs	r6, #12
    9ac2:	fb06 3401 	mla	r4, r6, r1, r3
    9ac6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9ac8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    9acc:	d008      	beq.n	9ae0 <stop+0x36>
    9ace:	42a2      	cmp	r2, r4
    9ad0:	d006      	beq.n	9ae0 <stop+0x36>
	__asm__ volatile(
    9ad2:	f385 8811 	msr	BASEPRI, r5
    9ad6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    9ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9ade:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    9ae0:	fb06 3301 	mla	r3, r6, r1, r3
    9ae4:	2201      	movs	r2, #1
    9ae6:	641a      	str	r2, [r3, #64]	; 0x40
    9ae8:	f385 8811 	msr	BASEPRI, r5
    9aec:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    9af0:	6843      	ldr	r3, [r0, #4]
    9af2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9af6:	685b      	ldr	r3, [r3, #4]
    9af8:	4798      	blx	r3
	return 0;
    9afa:	2000      	movs	r0, #0
    9afc:	e7ef      	b.n	9ade <stop+0x34>

00009afe <api_stop>:
	return stop(dev, subsys, CTX_API);
    9afe:	2280      	movs	r2, #128	; 0x80
    9b00:	f7ff bfd3 	b.w	9aaa <stop>

00009b04 <async_start>:
{
    9b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b06:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9b08:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    9b0a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    9b0c:	f04f 0520 	mov.w	r5, #32
    9b10:	f3ef 8611 	mrs	r6, BASEPRI
    9b14:	f385 8812 	msr	BASEPRI_MAX, r5
    9b18:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9b1c:	250c      	movs	r5, #12
    9b1e:	fb05 4401 	mla	r4, r5, r1, r4
    9b22:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9b24:	f005 0c07 	and.w	ip, r5, #7
    9b28:	f1bc 0f01 	cmp.w	ip, #1
    9b2c:	d10c      	bne.n	9b48 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9b2e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    9b30:	f386 8811 	msr	BASEPRI, r6
    9b34:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    9b38:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    9b3c:	6843      	ldr	r3, [r0, #4]
    9b3e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    9b42:	4798      	blx	r3
	return 0;
    9b44:	2000      	movs	r0, #0
}
    9b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9b48:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9b4c:	42af      	cmp	r7, r5
    9b4e:	f386 8811 	msr	BASEPRI, r6
    9b52:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    9b56:	bf0c      	ite	eq
    9b58:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9b60:	e7f1      	b.n	9b46 <async_start+0x42>

00009b62 <api_start>:
{
    9b62:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9b64:	2480      	movs	r4, #128	; 0x80
    9b66:	9400      	str	r4, [sp, #0]
    9b68:	f7ff ffcc 	bl	9b04 <async_start>
}
    9b6c:	b002      	add	sp, #8
    9b6e:	bd10      	pop	{r4, pc}

00009b70 <onoff_started_callback>:
{
    9b70:	b410      	push	{r4}
	return &data->mgr[type];
    9b72:	6900      	ldr	r0, [r0, #16]
    9b74:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9b76:	241c      	movs	r4, #28
    9b78:	fb03 0004 	mla	r0, r3, r4, r0
    9b7c:	2100      	movs	r1, #0
}
    9b7e:	bc10      	pop	{r4}
	notify(mgr, 0);
    9b80:	4710      	bx	r2

00009b82 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9b82:	2000      	movs	r0, #0
    9b84:	f000 b90a 	b.w	9d9c <nrfx_clock_start>

00009b88 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9b88:	2000      	movs	r0, #0
    9b8a:	f000 b943 	b.w	9e14 <nrfx_clock_stop>

00009b8e <blocking_start_callback>:
{
    9b8e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9b90:	f7fe b894 	b.w	7cbc <z_impl_k_sem_give>

00009b94 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9b94:	6843      	ldr	r3, [r0, #4]
    9b96:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9b98:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9b9c:	600b      	str	r3, [r1, #0]
}
    9b9e:	2000      	movs	r0, #0
    9ba0:	4770      	bx	lr

00009ba2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9ba2:	6843      	ldr	r3, [r0, #4]
    9ba4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    9ba6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    9baa:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    9bae:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9bb2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    9bb6:	2000      	movs	r0, #0
    9bb8:	4770      	bx	lr

00009bba <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9bba:	6843      	ldr	r3, [r0, #4]
    9bbc:	685b      	ldr	r3, [r3, #4]
}
    9bbe:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9bc0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9bc4:	4770      	bx	lr

00009bc6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9bc6:	6843      	ldr	r3, [r0, #4]
    9bc8:	685b      	ldr	r3, [r3, #4]
}
    9bca:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9bcc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9bd0:	4770      	bx	lr

00009bd2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9bd2:	6843      	ldr	r3, [r0, #4]
    9bd4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9bd6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    9bda:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    9bde:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    9be0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9be4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    9be8:	2000      	movs	r0, #0
    9bea:	4770      	bx	lr

00009bec <gpio_nrfx_manage_callback>:
{
    9bec:	b510      	push	{r4, lr}
	return port->data;
    9bee:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9bf0:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    9bf2:	b1f8      	cbz	r0, 9c34 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9bf4:	4288      	cmp	r0, r1
    9bf6:	d119      	bne.n	9c2c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    9bf8:	689c      	ldr	r4, [r3, #8]
	return node->next;
    9bfa:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    9bfc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9bfe:	42a1      	cmp	r1, r4
    9c00:	d100      	bne.n	9c04 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9c02:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9c04:	2000      	movs	r0, #0
    9c06:	6008      	str	r0, [r1, #0]
	if (set) {
    9c08:	b12a      	cbz	r2, 9c16 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    9c0a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    9c0c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    9c0e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    9c10:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9c12:	b902      	cbnz	r2, 9c16 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    9c14:	6099      	str	r1, [r3, #8]
	return 0;
    9c16:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9c18:	e010      	b.n	9c3c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9c1a:	4281      	cmp	r1, r0
    9c1c:	d106      	bne.n	9c2c <gpio_nrfx_manage_callback+0x40>
	return node->next;
    9c1e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    9c20:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9c22:	6898      	ldr	r0, [r3, #8]
    9c24:	4281      	cmp	r1, r0
    9c26:	d1ed      	bne.n	9c04 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9c28:	609c      	str	r4, [r3, #8]
}
    9c2a:	e7eb      	b.n	9c04 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    9c2c:	4604      	mov	r4, r0
    9c2e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9c30:	2800      	cmp	r0, #0
    9c32:	d1f2      	bne.n	9c1a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    9c34:	2a00      	cmp	r2, #0
    9c36:	d1e8      	bne.n	9c0a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    9c38:	f06f 0015 	mvn.w	r0, #21
}
    9c3c:	bd10      	pop	{r4, pc}

00009c3e <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    9c3e:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    9c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    9c44:	2908      	cmp	r1, #8
    9c46:	6e13      	ldr	r3, [r2, #96]	; 0x60
    9c48:	6e52      	ldr	r2, [r2, #100]	; 0x64
    9c4a:	bf28      	it	cs
    9c4c:	2108      	movcs	r1, #8
    9c4e:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    9c50:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    9c52:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    9c54:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    9c56:	460a      	mov	r2, r1
    9c58:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    9c5a:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    9c5c:	f7ff fe89 	bl	9972 <memcpy>

	return length;
}
    9c60:	4620      	mov	r0, r4
    9c62:	b002      	add	sp, #8
    9c64:	bd10      	pop	{r4, pc}

00009c66 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
    9c66:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    9c68:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    9c6a:	d405      	bmi.n	9c78 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
    9c6c:	f3c1 0142 	ubfx	r1, r1, #1, #3
    9c70:	2901      	cmp	r1, #1
    9c72:	d004      	beq.n	9c7e <i2c_nrfx_twim_configure+0x18>
    9c74:	2902      	cmp	r1, #2
    9c76:	d009      	beq.n	9c8c <i2c_nrfx_twim_configure+0x26>
    9c78:	f06f 0015 	mvn.w	r0, #21
}
    9c7c:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    9c7e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    9c80:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    9c84:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    9c88:	2000      	movs	r0, #0
    9c8a:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    9c92:	e7f7      	b.n	9c84 <i2c_nrfx_twim_configure+0x1e>

00009c94 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    9c94:	2200      	movs	r2, #0
    9c96:	2101      	movs	r1, #1
    9c98:	2003      	movs	r0, #3
    9c9a:	f7f9 bc09 	b.w	34b0 <z_arm_irq_priority_set>

00009c9e <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    9c9e:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    9ca0:	2100      	movs	r1, #0
    9ca2:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    9ca4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    9ca6:	f000 f80a 	bl	9cbe <pinctrl_lookup_state>
	if (ret < 0) {
    9caa:	2800      	cmp	r0, #0
    9cac:	db05      	blt.n	9cba <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    9cae:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    9cb0:	6822      	ldr	r2, [r4, #0]
    9cb2:	7919      	ldrb	r1, [r3, #4]
    9cb4:	6818      	ldr	r0, [r3, #0]
    9cb6:	f7fb f97b 	bl	4fb0 <pinctrl_configure_pins>
}
    9cba:	b002      	add	sp, #8
    9cbc:	bd10      	pop	{r4, pc}

00009cbe <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9cbe:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    9cc0:	6843      	ldr	r3, [r0, #4]
    9cc2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    9cc4:	7a05      	ldrb	r5, [r0, #8]
    9cc6:	6844      	ldr	r4, [r0, #4]
    9cc8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    9ccc:	42a3      	cmp	r3, r4
    9cce:	d302      	bcc.n	9cd6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    9cd0:	f06f 0001 	mvn.w	r0, #1
}
    9cd4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    9cd6:	795c      	ldrb	r4, [r3, #5]
    9cd8:	428c      	cmp	r4, r1
    9cda:	d001      	beq.n	9ce0 <pinctrl_lookup_state+0x22>
		(*state)++;
    9cdc:	3308      	adds	r3, #8
    9cde:	e7f0      	b.n	9cc2 <pinctrl_lookup_state+0x4>
			return 0;
    9ce0:	2000      	movs	r0, #0
    9ce2:	e7f7      	b.n	9cd4 <pinctrl_lookup_state+0x16>

00009ce4 <as5600_get>:
	return err;
}

static int as5600_get(const struct device *dev, enum sensor_channel chan,
			struct sensor_value *val)
{
    9ce4:	b510      	push	{r4, lr}
	struct as5600_dev_data *dev_data = dev->data;

	if (chan == SENSOR_CHAN_ROTATION) {
    9ce6:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    9ce8:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    9cea:	d10c      	bne.n	9d06 <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    9cec:	8823      	ldrh	r3, [r4, #0]
    9cee:	f44f 70b4 	mov.w	r0, #360	; 0x168
    9cf2:	4343      	muls	r3, r0
    9cf4:	131b      	asrs	r3, r3, #12
    9cf6:	6013      	str	r3, [r2, #0]
							AS5600_PULSES_PER_REV;

		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    9cf8:	8821      	ldrh	r1, [r4, #0]
    9cfa:	4341      	muls	r1, r0
    9cfc:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    9d00:	6053      	str	r3, [r2, #4]
					(val->val1 * AS5600_PULSES_PER_REV);
	} else {
		return -ENOTSUP;
	}

	return 0;
    9d02:	2000      	movs	r0, #0
}
    9d04:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    9d06:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9d0a:	e7fb      	b.n	9d04 <as5600_get+0x20>

00009d0c <as5600_initialize>:

static int as5600_initialize(const struct device *dev)
{
	struct as5600_dev_data *const dev_data = dev->data;
    9d0c:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    9d0e:	2000      	movs	r0, #0
    9d10:	8018      	strh	r0, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);

	return 0;
}
    9d12:	4770      	bx	lr

00009d14 <as5600_fetch>:
{
    9d14:	b530      	push	{r4, r5, lr}
    9d16:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    9d18:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    9d1a:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    9d1c:	6818      	ldr	r0, [r3, #0]
    9d1e:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    9d20:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    9d22:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    9d24:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    9d28:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    9d2c:	f8ad 2004 	strh.w	r2, [sp, #4]
    9d30:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    9d32:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    9d36:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    9d38:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    9d3a:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    9d3c:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    9d3e:	2107      	movs	r1, #7
	msg[1].len = num_read;
    9d40:	2202      	movs	r2, #2
    9d42:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    9d44:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    9d48:	6881      	ldr	r1, [r0, #8]
    9d4a:	688d      	ldr	r5, [r1, #8]
    9d4c:	a902      	add	r1, sp, #8
    9d4e:	47a8      	blx	r5
	if (!err) {
    9d50:	b918      	cbnz	r0, 9d5a <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    9d52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9d56:	ba5b      	rev16	r3, r3
    9d58:	8023      	strh	r3, [r4, #0]
}
    9d5a:	b009      	add	sp, #36	; 0x24
    9d5c:	bd30      	pop	{r4, r5, pc}

00009d5e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9d5e:	4770      	bx	lr

00009d60 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9d60:	f100 0350 	add.w	r3, r0, #80	; 0x50
    9d64:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    9d66:	b29b      	uxth	r3, r3
    9d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d6c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9d70:	2200      	movs	r2, #0
    9d72:	601a      	str	r2, [r3, #0]
    9d74:	681b      	ldr	r3, [r3, #0]
}
    9d76:	4770      	bx	lr

00009d78 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9d78:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    9d7a:	2000      	movs	r0, #0
    9d7c:	f7f9 ff60 	bl	3c40 <sys_arch_reboot>

00009d80 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9d80:	f7fe be56 	b.w	8a30 <nrf_cc3xx_platform_init_no_rng>

00009d84 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    9d84:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9d86:	f7f9 fa57 	bl	3238 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9d8a:	f7f9 fb2b 	bl	33e4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    9d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9d92:	f7fe be4d 	b.w	8a30 <nrf_cc3xx_platform_init_no_rng>

00009d96 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9d96:	4700      	bx	r0

00009d98 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9d98:	f000 bc3d 	b.w	a616 <z_impl_k_busy_wait>

00009d9c <nrfx_clock_start>:
{
    9d9c:	b508      	push	{r3, lr}
    switch (domain)
    9d9e:	b110      	cbz	r0, 9da6 <nrfx_clock_start+0xa>
    9da0:	2801      	cmp	r0, #1
    9da2:	d02c      	beq.n	9dfe <nrfx_clock_start+0x62>
}
    9da4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9daa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9dae:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9db2:	03c8      	lsls	r0, r1, #15
    9db4:	d40b      	bmi.n	9dce <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9db6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9dba:	07d9      	lsls	r1, r3, #31
    9dbc:	d50f      	bpl.n	9dde <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9dbe:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9dc2:	079b      	lsls	r3, r3, #30
    9dc4:	d408      	bmi.n	9dd8 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    9dc6:	2302      	movs	r3, #2
    9dc8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    9dcc:	e7ea      	b.n	9da4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9dce:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9dd2:	2b01      	cmp	r3, #1
    9dd4:	d004      	beq.n	9de0 <nrfx_clock_start+0x44>
    9dd6:	b113      	cbz	r3, 9dde <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9dd8:	2000      	movs	r0, #0
    9dda:	f7fb fd0b 	bl	57f4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9dde:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    9de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9de4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9de8:	2300      	movs	r3, #0
    9dea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    9dee:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    9df2:	2302      	movs	r3, #2
    9df4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9df8:	2301      	movs	r3, #1
    9dfa:	6093      	str	r3, [r2, #8]
}
    9dfc:	e7d2      	b.n	9da4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e02:	2200      	movs	r2, #0
    9e04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9e08:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9e0c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e10:	6018      	str	r0, [r3, #0]
}
    9e12:	e7c7      	b.n	9da4 <nrfx_clock_start+0x8>

00009e14 <nrfx_clock_stop>:
    clock_stop(domain);
    9e14:	f7fb bcee 	b.w	57f4 <clock_stop>

00009e18 <nrf_gpio_reconfigure>:
{
    9e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e1a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e1c:	a801      	add	r0, sp, #4
{
    9e1e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9e22:	4616      	mov	r6, r2
    9e24:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e26:	f7fb fd9f 	bl	5968 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e2a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9e2c:	f1b6 0c00 	subs.w	ip, r6, #0
    9e30:	bf18      	it	ne
    9e32:	f04f 0c01 	movne.w	ip, #1
    9e36:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9e3a:	1e0b      	subs	r3, r1, #0
    9e3c:	bf18      	it	ne
    9e3e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9e40:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9e42:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9e46:	bf14      	ite	ne
    9e48:	f04f 0c0c 	movne.w	ip, #12
    9e4c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9e50:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9e52:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9e56:	bf14      	ite	ne
    9e58:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    9e5c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9e60:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9e62:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e66:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9e6a:	bf14      	ite	ne
    9e6c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    9e70:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9e74:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9e78:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e7c:	b101      	cbz	r1, 9e80 <nrf_gpio_reconfigure+0x68>
    9e7e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9e80:	b10e      	cbz	r6, 9e86 <nrf_gpio_reconfigure+0x6e>
    9e82:	7836      	ldrb	r6, [r6, #0]
    9e84:	0076      	lsls	r6, r6, #1
    9e86:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9e88:	b10d      	cbz	r5, 9e8e <nrf_gpio_reconfigure+0x76>
    9e8a:	782d      	ldrb	r5, [r5, #0]
    9e8c:	00ad      	lsls	r5, r5, #2
    9e8e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9e90:	b10c      	cbz	r4, 9e96 <nrf_gpio_reconfigure+0x7e>
    9e92:	7824      	ldrb	r4, [r4, #0]
    9e94:	0224      	lsls	r4, r4, #8
    9e96:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9e98:	b10f      	cbz	r7, 9e9e <nrf_gpio_reconfigure+0x86>
    9e9a:	783f      	ldrb	r7, [r7, #0]
    9e9c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e9e:	430c      	orrs	r4, r1
    9ea0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9ea2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9ea6:	b003      	add	sp, #12
    9ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009eaa <nrf_gpio_cfg_sense_set>:
{
    9eaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9eac:	f10d 030f 	add.w	r3, sp, #15
    9eb0:	9301      	str	r3, [sp, #4]
    9eb2:	2300      	movs	r3, #0
{
    9eb4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9eb8:	9300      	str	r3, [sp, #0]
    9eba:	461a      	mov	r2, r3
    9ebc:	4619      	mov	r1, r3
    9ebe:	f7ff ffab 	bl	9e18 <nrf_gpio_reconfigure>
}
    9ec2:	b005      	add	sp, #20
    9ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00009ec8 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ec8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    9ecc:	681a      	ldr	r2, [r3, #0]
    9ece:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ed0:	bf1f      	itttt	ne
    9ed2:	2200      	movne	r2, #0
    9ed4:	601a      	strne	r2, [r3, #0]
    9ed6:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ed8:	2001      	movne	r0, #1
    9eda:	bf08      	it	eq
    9edc:	2000      	moveq	r0, #0
}
    9ede:	4770      	bx	lr

00009ee0 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    9ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ee4:	f44f 7260 	mov.w	r2, #896	; 0x380
    9ee8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9eec:	4770      	bx	lr

00009eee <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    9eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ef2:	f44f 7260 	mov.w	r2, #896	; 0x380
    9ef6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9efa:	4770      	bx	lr

00009efc <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    9efc:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    9efe:	f7fc f8eb 	bl	60d8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    9f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    9f06:	f7fb bcfb 	b.w	5900 <nrfx_clock_irq_handler>

00009f0a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    9f0a:	7b0a      	ldrb	r2, [r1, #12]
{
    9f0c:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    9f0e:	2a03      	cmp	r2, #3
    9f10:	d829      	bhi.n	9f66 <xfer_completeness_check+0x5c>
    9f12:	e8df f002 	tbb	[pc, r2]
    9f16:	2521      	.short	0x2521
    9f18:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9f1a:	688a      	ldr	r2, [r1, #8]
    9f1c:	0350      	lsls	r0, r2, #13
    9f1e:	d504      	bpl.n	9f2a <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    9f20:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    9f24:	6908      	ldr	r0, [r1, #16]
    9f26:	4290      	cmp	r0, r2
    9f28:	d107      	bne.n	9f3a <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9f2a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    9f2c:	0352      	lsls	r2, r2, #13
    9f2e:	d41a      	bmi.n	9f66 <xfer_completeness_check+0x5c>
    9f30:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    9f34:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    9f36:	4291      	cmp	r1, r2
    9f38:	d015      	beq.n	9f66 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9f3a:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9f3c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9f3e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9f42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9f46:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    9f48:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    9f4c:	6908      	ldr	r0, [r1, #16]
    9f4e:	4290      	cmp	r0, r2
    9f50:	d1f3      	bne.n	9f3a <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    9f52:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    9f56:	e7ed      	b.n	9f34 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    9f58:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    9f5c:	6909      	ldr	r1, [r1, #16]
    9f5e:	e7ea      	b.n	9f36 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    9f60:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    9f64:	e7fa      	b.n	9f5c <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    9f66:	2001      	movs	r0, #1
}
    9f68:	4770      	bx	lr

00009f6a <nrfx_usbd_consumer>:
{
    9f6a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    9f6c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    9f6e:	429c      	cmp	r4, r3
    9f70:	d209      	bcs.n	9f86 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    9f72:	2500      	movs	r5, #0
    9f74:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    9f76:	6809      	ldr	r1, [r1, #0]
    9f78:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    9f7a:	429a      	cmp	r2, r3
    9f7c:	d10c      	bne.n	9f98 <nrfx_usbd_consumer+0x2e>
    9f7e:	1e20      	subs	r0, r4, #0
    9f80:	bf18      	it	ne
    9f82:	2001      	movne	r0, #1
}
    9f84:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    9f86:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    9f88:	680d      	ldr	r5, [r1, #0]
    9f8a:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    9f8c:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    9f8e:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    9f90:	4418      	add	r0, r3
        p_transfer->size = size;
    9f92:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    9f94:	6008      	str	r0, [r1, #0]
    9f96:	e7f0      	b.n	9f7a <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    9f98:	2000      	movs	r0, #0
    9f9a:	e7f3      	b.n	9f84 <nrfx_usbd_consumer+0x1a>

00009f9c <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    9f9c:	684b      	ldr	r3, [r1, #4]
    9f9e:	429a      	cmp	r2, r3
    9fa0:	bf28      	it	cs
    9fa2:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    9fa4:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    9fa6:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    9faa:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9fac:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    9fae:	1a80      	subs	r0, r0, r2
    9fb0:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9fb2:	4413      	add	r3, r2
}
    9fb4:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    9fb6:	600b      	str	r3, [r1, #0]
}
    9fb8:	bf18      	it	ne
    9fba:	2001      	movne	r0, #1
    9fbc:	4770      	bx	lr

00009fbe <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    9fbe:	684b      	ldr	r3, [r1, #4]
    9fc0:	429a      	cmp	r2, r3
    9fc2:	bf28      	it	cs
    9fc4:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    9fc6:	b162      	cbz	r2, 9fe2 <nrfx_usbd_feeder_ram_zlp+0x24>
    9fc8:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    9fca:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    9fce:	684b      	ldr	r3, [r1, #4]
    9fd0:	1a9b      	subs	r3, r3, r2
    9fd2:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9fd4:	680b      	ldr	r3, [r1, #0]
}
    9fd6:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    9fd8:	4413      	add	r3, r2
    9fda:	600b      	str	r3, [r1, #0]
}
    9fdc:	bf18      	it	ne
    9fde:	2001      	movne	r0, #1
    9fe0:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    9fe2:	4613      	mov	r3, r2
    9fe4:	e7f1      	b.n	9fca <nrfx_usbd_feeder_ram_zlp+0xc>

00009fe6 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    9fe6:	43c3      	mvns	r3, r0
    9fe8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9fec:	f000 000f 	and.w	r0, r0, #15
}
    9ff0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    9ff4:	4770      	bx	lr

00009ff6 <ev_started_handler>:
}
    9ff6:	4770      	bx	lr

00009ff8 <nrf_usbd_epin_dma_handler>:
{
    9ff8:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    9ffa:	f7fc fcb5 	bl	6968 <usbd_dma_pending_clear>
{
    9ffe:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a000:	f7fc fba8 	bl	6754 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a004:	7b83      	ldrb	r3, [r0, #14]
    a006:	2b03      	cmp	r3, #3
    a008:	d10a      	bne.n	a020 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a00a:	4608      	mov	r0, r1
    a00c:	f7ff ffeb 	bl	9fe6 <ep2bit>
    a010:	2301      	movs	r3, #1
    a012:	fa03 f000 	lsl.w	r0, r3, r0
    a016:	43c0      	mvns	r0, r0
}
    a018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a01c:	f7fc bc94 	b.w	6948 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a020:	6803      	ldr	r3, [r0, #0]
    a022:	2b00      	cmp	r3, #0
    a024:	d0f1      	beq.n	a00a <nrf_usbd_epin_dma_handler+0x12>
}
    a026:	bd08      	pop	{r3, pc}

0000a028 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    a028:	2087      	movs	r0, #135	; 0x87
    a02a:	f7ff bfe5 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a02e <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    a02e:	2086      	movs	r0, #134	; 0x86
    a030:	f7ff bfe2 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a034 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    a034:	2085      	movs	r0, #133	; 0x85
    a036:	f7ff bfdf 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a03a <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    a03a:	2084      	movs	r0, #132	; 0x84
    a03c:	f7ff bfdc 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a040 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    a040:	2083      	movs	r0, #131	; 0x83
    a042:	f7ff bfd9 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a046 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    a046:	2082      	movs	r0, #130	; 0x82
    a048:	f7ff bfd6 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a04c <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    a04c:	2081      	movs	r0, #129	; 0x81
    a04e:	f7ff bfd3 	b.w	9ff8 <nrf_usbd_epin_dma_handler>

0000a052 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    a052:	f7fc bc9b 	b.w	698c <nrf_usbd_ep0in_dma_handler>

0000a056 <nrfx_usbd_ep_max_packet_size_set>:
{
    a056:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a058:	f7fc fb7c 	bl	6754 <ep_state_access>
    p_state->max_packet_size = size;
    a05c:	8181      	strh	r1, [r0, #12]
}
    a05e:	bd08      	pop	{r3, pc}

0000a060 <nrfx_usbd_ep_status_get>:
{
    a060:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    a062:	f7fc fb77 	bl	6754 <ep_state_access>
	__asm__ volatile(
    a066:	f04f 0220 	mov.w	r2, #32
    a06a:	f3ef 8311 	mrs	r3, BASEPRI
    a06e:	f382 8812 	msr	BASEPRI_MAX, r2
    a072:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    a076:	6882      	ldr	r2, [r0, #8]
    a078:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a07a:	6802      	ldr	r2, [r0, #0]
    a07c:	b92a      	cbnz	r2, a08a <nrfx_usbd_ep_status_get+0x2a>
    a07e:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    a080:	f383 8811 	msr	BASEPRI, r3
    a084:	f3bf 8f6f 	isb	sy
}
    a088:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a08a:	2004      	movs	r0, #4
    a08c:	e7f8      	b.n	a080 <nrfx_usbd_ep_status_get+0x20>

0000a08e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    a08e:	2007      	movs	r0, #7
    a090:	f7fc bfe8 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a094 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a094:	2006      	movs	r0, #6
    a096:	f7fc bfe5 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a09a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a09a:	2005      	movs	r0, #5
    a09c:	f7fc bfe2 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a0a0 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a0a0:	2004      	movs	r0, #4
    a0a2:	f7fc bfdf 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a0a6 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a0a6:	2003      	movs	r0, #3
    a0a8:	f7fc bfdc 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a0ac <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    a0ac:	2002      	movs	r0, #2
    a0ae:	f7fc bfd9 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a0b2 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    a0b2:	2001      	movs	r0, #1
    a0b4:	f7fc bfd6 	b.w	7064 <nrf_usbd_epout_dma_handler>

0000a0b8 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    a0b8:	f7fd b8ca 	b.w	7250 <usbd_ep_abort>

0000a0bc <nrf_gpio_pin_set>:
{
    a0bc:	b507      	push	{r0, r1, r2, lr}
    a0be:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a0c0:	a801      	add	r0, sp, #4
    a0c2:	f7fd fa99 	bl	75f8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a0c6:	9a01      	ldr	r2, [sp, #4]
    a0c8:	2301      	movs	r3, #1
    a0ca:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    a0cc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    a0d0:	b003      	add	sp, #12
    a0d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a0d6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    a0d6:	4770      	bx	lr

0000a0d8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a0d8:	b140      	cbz	r0, a0ec <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a0da:	68c3      	ldr	r3, [r0, #12]
    a0dc:	7858      	ldrb	r0, [r3, #1]
    a0de:	f010 0001 	ands.w	r0, r0, #1
    a0e2:	bf1e      	ittt	ne
    a0e4:	7818      	ldrbne	r0, [r3, #0]
    a0e6:	fab0 f080 	clzne	r0, r0
    a0ea:	0940      	lsrne	r0, r0, #5
}
    a0ec:	4770      	bx	lr

0000a0ee <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0f0:	4605      	mov	r5, r0
    a0f2:	460e      	mov	r6, r1
	__asm__ volatile(
    a0f4:	f04f 0320 	mov.w	r3, #32
    a0f8:	f3ef 8711 	mrs	r7, BASEPRI
    a0fc:	f383 8812 	msr	BASEPRI_MAX, r3
    a100:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a104:	f7fe fa70 	bl	85e8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a108:	4631      	mov	r1, r6
    a10a:	4604      	mov	r4, r0
    a10c:	4628      	mov	r0, r5
    a10e:	f7ff fe33 	bl	9d78 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a112:	f387 8811 	msr	BASEPRI, r7
    a116:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a11a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a11c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a120:	f7f9 bc92 	b.w	3a48 <z_impl_k_thread_abort>

0000a124 <z_early_memset>:
	(void) memset(dst, c, n);
    a124:	f7ff bc30 	b.w	9988 <memset>

0000a128 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    a128:	f7ff bc23 	b.w	9972 <memcpy>

0000a12c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a12c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    a130:	4313      	orrs	r3, r2
    a132:	f013 0303 	ands.w	r3, r3, #3
    a136:	d10c      	bne.n	a152 <create_free_list+0x26>
	slab->free_list = NULL;
    a138:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a13a:	6881      	ldr	r1, [r0, #8]
    a13c:	4299      	cmp	r1, r3
    a13e:	d801      	bhi.n	a144 <create_free_list+0x18>
	return 0;
    a140:	2000      	movs	r0, #0
    a142:	4770      	bx	lr
		*(char **)p = slab->free_list;
    a144:	6941      	ldr	r1, [r0, #20]
    a146:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    a148:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    a14a:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a14c:	3301      	adds	r3, #1
		p += slab->block_size;
    a14e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    a150:	e7f3      	b.n	a13a <create_free_list+0xe>
		return -EINVAL;
    a152:	f06f 0015 	mvn.w	r0, #21
}
    a156:	4770      	bx	lr

0000a158 <k_mem_slab_init>:
{
    a158:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    a15a:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    a15e:	2300      	movs	r3, #0
	slab->buffer = buffer;
    a160:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    a162:	6183      	str	r3, [r0, #24]
{
    a164:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    a166:	f7ff ffe1 	bl	a12c <create_free_list>
	if (rc < 0) {
    a16a:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    a16c:	bfa8      	it	ge
    a16e:	e9c4 4400 	strdge	r4, r4, [r4]
}
    a172:	bd10      	pop	{r4, pc}

0000a174 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a176:	4604      	mov	r4, r0
    a178:	460d      	mov	r5, r1
	__asm__ volatile(
    a17a:	f04f 0320 	mov.w	r3, #32
    a17e:	f3ef 8611 	mrs	r6, BASEPRI
    a182:	f383 8812 	msr	BASEPRI_MAX, r3
    a186:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a18a:	6947      	ldr	r7, [r0, #20]
    a18c:	b977      	cbnz	r7, a1ac <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a18e:	f000 f99b 	bl	a4c8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    a192:	b158      	cbz	r0, a1ac <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a194:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a196:	6142      	str	r2, [r0, #20]
    a198:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    a19a:	f000 f95f 	bl	a45c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a19e:	4631      	mov	r1, r6
    a1a0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a1a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    a1a8:	f7fe b8ce 	b.w	8348 <z_reschedule>
	**(char ***) mem = slab->free_list;
    a1ac:	682b      	ldr	r3, [r5, #0]
    a1ae:	6962      	ldr	r2, [r4, #20]
    a1b0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a1b2:	682b      	ldr	r3, [r5, #0]
    a1b4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a1b6:	69a3      	ldr	r3, [r4, #24]
    a1b8:	3b01      	subs	r3, #1
    a1ba:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a1bc:	f386 8811 	msr	BASEPRI, r6
    a1c0:	f3bf 8f6f 	isb	sy
}
    a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a1c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a1c6:	f3ef 8005 	mrs	r0, IPSR
}
    a1ca:	3800      	subs	r0, #0
    a1cc:	bf18      	it	ne
    a1ce:	2001      	movne	r0, #1
    a1d0:	4770      	bx	lr

0000a1d2 <z_impl_k_thread_name_set>:
}
    a1d2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    a1d6:	4770      	bx	lr

0000a1d8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    a1d8:	f7fe b8c8 	b.w	836c <z_sched_start>

0000a1dc <z_pm_save_idle_exit>:
{
    a1dc:	b508      	push	{r3, lr}
	pm_system_resume();
    a1de:	f7f7 fe47 	bl	1e70 <pm_system_resume>
}
    a1e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a1e6:	f7ff bdba 	b.w	9d5e <sys_clock_idle_exit>

0000a1ea <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    a1ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a1ee:	428b      	cmp	r3, r1
    a1f0:	d001      	beq.n	a1f6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    a1f2:	f7fe b863 	b.w	82bc <z_set_prio>
}
    a1f6:	2000      	movs	r0, #0
    a1f8:	4770      	bx	lr

0000a1fa <z_impl_k_mutex_init>:
{
    a1fa:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a1fc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a1fe:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a202:	e9c3 3300 	strd	r3, r3, [r3]
}
    a206:	4770      	bx	lr

0000a208 <queue_insert>:
{
    a208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a20c:	4699      	mov	r9, r3
    a20e:	4604      	mov	r4, r0
    a210:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a214:	460d      	mov	r5, r1
    a216:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a218:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a21c:	f04f 0220 	mov.w	r2, #32
    a220:	f3ef 8711 	mrs	r7, BASEPRI
    a224:	f382 8812 	msr	BASEPRI_MAX, r2
    a228:	f3bf 8f6f 	isb	sy
	if (is_append) {
    a22c:	b103      	cbz	r3, a230 <queue_insert+0x28>
	return list->tail;
    a22e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    a230:	4630      	mov	r0, r6
    a232:	f000 f949 	bl	a4c8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    a236:	b158      	cbz	r0, a250 <queue_insert+0x48>
    a238:	2300      	movs	r3, #0
    a23a:	6783      	str	r3, [r0, #120]	; 0x78
    a23c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    a240:	f000 f90c 	bl	a45c <z_ready_thread>
	z_reschedule(&queue->lock, key);
    a244:	4630      	mov	r0, r6
    a246:	4639      	mov	r1, r7
    a248:	f7fe f87e 	bl	8348 <z_reschedule>
		return 0;
    a24c:	2000      	movs	r0, #0
    a24e:	e00c      	b.n	a26a <queue_insert+0x62>
	if (alloc) {
    a250:	f1b9 0f00 	cmp.w	r9, #0
    a254:	d01c      	beq.n	a290 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    a256:	2108      	movs	r1, #8
    a258:	f7fe fb98 	bl	898c <z_thread_aligned_alloc>
		if (anode == NULL) {
    a25c:	b938      	cbnz	r0, a26e <queue_insert+0x66>
	__asm__ volatile(
    a25e:	f387 8811 	msr	BASEPRI, r7
    a262:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    a266:	f06f 000b 	mvn.w	r0, #11
}
    a26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    a26e:	2201      	movs	r2, #1
		anode->data = data;
    a270:	f8c0 8004 	str.w	r8, [r0, #4]
    a274:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a276:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a278:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    a27c:	b965      	cbnz	r5, a298 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a27e:	6822      	ldr	r2, [r4, #0]
    a280:	430a      	orrs	r2, r1
    a282:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a284:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    a286:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a288:	2a00      	cmp	r2, #0
    a28a:	d1db      	bne.n	a244 <queue_insert+0x3c>
	list->tail = node;
    a28c:	6060      	str	r0, [r4, #4]
}
    a28e:	e7d9      	b.n	a244 <queue_insert+0x3c>
	node->next_and_flags = flags;
    a290:	f8c8 9000 	str.w	r9, [r8]
}
    a294:	4640      	mov	r0, r8
    a296:	e7ee      	b.n	a276 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a298:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    a29a:	2a03      	cmp	r2, #3
    a29c:	d80b      	bhi.n	a2b6 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a29e:	6001      	str	r1, [r0, #0]
	return list->tail;
    a2a0:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    a2a2:	b911      	cbnz	r1, a2aa <queue_insert+0xa2>
	list->head = node;
    a2a4:	e9c4 0000 	strd	r0, r0, [r4]
}
    a2a8:	e7cc      	b.n	a244 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a2aa:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a2ac:	f002 0203 	and.w	r2, r2, #3
    a2b0:	4302      	orrs	r2, r0
    a2b2:	600a      	str	r2, [r1, #0]
    a2b4:	e7ea      	b.n	a28c <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a2b6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    a2ba:	430a      	orrs	r2, r1
    a2bc:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a2be:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a2c0:	f002 0203 	and.w	r2, r2, #3
    a2c4:	ea40 0302 	orr.w	r3, r0, r2
    a2c8:	602b      	str	r3, [r5, #0]
}
    a2ca:	e7bb      	b.n	a244 <queue_insert+0x3c>

0000a2cc <z_queue_node_peek>:
{
    a2cc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    a2ce:	4604      	mov	r4, r0
    a2d0:	b130      	cbz	r0, a2e0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a2d2:	6802      	ldr	r2, [r0, #0]
    a2d4:	0793      	lsls	r3, r2, #30
    a2d6:	d003      	beq.n	a2e0 <z_queue_node_peek+0x14>
		ret = anode->data;
    a2d8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    a2da:	b109      	cbz	r1, a2e0 <z_queue_node_peek+0x14>
			k_free(anode);
    a2dc:	f000 f9c1 	bl	a662 <k_free>
}
    a2e0:	4620      	mov	r0, r4
    a2e2:	bd10      	pop	{r4, pc}

0000a2e4 <k_queue_append>:
{
    a2e4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    a2e6:	2301      	movs	r3, #1
    a2e8:	9300      	str	r3, [sp, #0]
    a2ea:	2300      	movs	r3, #0
{
    a2ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    a2ee:	4619      	mov	r1, r3
    a2f0:	f7ff ff8a 	bl	a208 <queue_insert>
}
    a2f4:	b003      	add	sp, #12
    a2f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2fa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a2fa:	b13a      	cbz	r2, a30c <z_impl_k_sem_init+0x12>
    a2fc:	428a      	cmp	r2, r1
    a2fe:	d305      	bcc.n	a30c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    a300:	e9c0 1202 	strd	r1, r2, [r0, #8]
    a304:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    a308:	2000      	movs	r0, #0
    a30a:	4770      	bx	lr
		return -EINVAL;
    a30c:	f06f 0015 	mvn.w	r0, #21
}
    a310:	4770      	bx	lr

0000a312 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    a312:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    a314:	2301      	movs	r3, #1
    a316:	408b      	lsls	r3, r1
    a318:	ea22 0303 	bic.w	r3, r2, r3
    a31c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    a31e:	fa22 f001 	lsr.w	r0, r2, r1
}
    a322:	f000 0001 	and.w	r0, r0, #1
    a326:	4770      	bx	lr

0000a328 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    a328:	b120      	cbz	r0, a334 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a32a:	2200      	movs	r2, #0
    a32c:	4611      	mov	r1, r2
    a32e:	3088      	adds	r0, #136	; 0x88
    a330:	f000 b924 	b.w	a57c <z_sched_wake>
}
    a334:	4770      	bx	lr

0000a336 <work_timeout>:
{
    a336:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a338:	4604      	mov	r4, r0
	__asm__ volatile(
    a33a:	f04f 0320 	mov.w	r3, #32
    a33e:	f3ef 8511 	mrs	r5, BASEPRI
    a342:	f383 8812 	msr	BASEPRI_MAX, r3
    a346:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    a34a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a34c:	f1a0 0610 	sub.w	r6, r0, #16
    a350:	2103      	movs	r1, #3
    a352:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    a354:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a356:	f7ff ffdc 	bl	a312 <flag_test_and_clear>
    a35a:	b128      	cbz	r0, a368 <work_timeout+0x32>
		queue = dw->queue;
    a35c:	69a3      	ldr	r3, [r4, #24]
    a35e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    a360:	a901      	add	r1, sp, #4
    a362:	4630      	mov	r0, r6
    a364:	f7fd fd8e 	bl	7e84 <submit_to_queue_locked>
	__asm__ volatile(
    a368:	f385 8811 	msr	BASEPRI, r5
    a36c:	f3bf 8f6f 	isb	sy
}
    a370:	b002      	add	sp, #8
    a372:	bd70      	pop	{r4, r5, r6, pc}

0000a374 <k_work_init>:
{
    a374:	b538      	push	{r3, r4, r5, lr}
    a376:	4604      	mov	r4, r0
    a378:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a37a:	2210      	movs	r2, #16
    a37c:	2100      	movs	r1, #0
    a37e:	f7ff fb03 	bl	9988 <memset>
    a382:	6065      	str	r5, [r4, #4]
}
    a384:	bd38      	pop	{r3, r4, r5, pc}

0000a386 <z_work_submit_to_queue>:
{
    a386:	b513      	push	{r0, r1, r4, lr}
    a388:	9001      	str	r0, [sp, #4]
    a38a:	4608      	mov	r0, r1
	__asm__ volatile(
    a38c:	f04f 0320 	mov.w	r3, #32
    a390:	f3ef 8411 	mrs	r4, BASEPRI
    a394:	f383 8812 	msr	BASEPRI_MAX, r3
    a398:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    a39c:	a901      	add	r1, sp, #4
    a39e:	f7fd fd71 	bl	7e84 <submit_to_queue_locked>
	__asm__ volatile(
    a3a2:	f384 8811 	msr	BASEPRI, r4
    a3a6:	f3bf 8f6f 	isb	sy
}
    a3aa:	b002      	add	sp, #8
    a3ac:	bd10      	pop	{r4, pc}

0000a3ae <k_work_submit_to_queue>:
{
    a3ae:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    a3b0:	f7ff ffe9 	bl	a386 <z_work_submit_to_queue>
	if (ret > 0) {
    a3b4:	1e04      	subs	r4, r0, #0
    a3b6:	dd09      	ble.n	a3cc <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    a3b8:	f04f 0320 	mov.w	r3, #32
    a3bc:	f3ef 8011 	mrs	r0, BASEPRI
    a3c0:	f383 8812 	msr	BASEPRI_MAX, r3
    a3c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a3c8:	f000 f8b2 	bl	a530 <z_reschedule_irqlock>
}
    a3cc:	4620      	mov	r0, r4
    a3ce:	bd10      	pop	{r4, pc}

0000a3d0 <k_work_init_delayable>:
{
    a3d0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    a3d2:	2230      	movs	r2, #48	; 0x30
{
    a3d4:	4604      	mov	r4, r0
    a3d6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    a3d8:	2100      	movs	r1, #0
    a3da:	f7ff fad5 	bl	9988 <memset>
    a3de:	f44f 7380 	mov.w	r3, #256	; 0x100
    a3e2:	6065      	str	r5, [r4, #4]
    a3e4:	60e3      	str	r3, [r4, #12]
}
    a3e6:	bd38      	pop	{r3, r4, r5, pc}

0000a3e8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    a3e8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a3ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a3ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a3f0:	2300      	movs	r3, #0
	node->prev = NULL;
    a3f2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    a3f6:	4770      	bx	lr

0000a3f8 <unpend_thread_no_timeout>:
{
    a3f8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    a3fa:	f7ff fff5 	bl	a3e8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a3fe:	7b43      	ldrb	r3, [r0, #13]
    a400:	f023 0302 	bic.w	r3, r3, #2
    a404:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    a406:	2300      	movs	r3, #0
    a408:	6083      	str	r3, [r0, #8]
}
    a40a:	bd08      	pop	{r3, pc}

0000a40c <add_to_waitq_locked>:
{
    a40c:	b538      	push	{r3, r4, r5, lr}
    a40e:	4604      	mov	r4, r0
    a410:	460d      	mov	r5, r1
	unready_thread(thread);
    a412:	f7fd fed5 	bl	81c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a416:	7b63      	ldrb	r3, [r4, #13]
    a418:	f043 0302 	orr.w	r3, r3, #2
    a41c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a41e:	b1e5      	cbz	r5, a45a <_flash_used+0x3a>
		thread->base.pended_on = wait_q;
    a420:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    a422:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a424:	429d      	cmp	r5, r3
    a426:	d109      	bne.n	a43c <_flash_used+0x1c>
	sys_dnode_t *const tail = list->tail;
    a428:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    a42a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    a42e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a430:	606c      	str	r4, [r5, #4]
}
    a432:	e012      	b.n	a45a <_flash_used+0x3a>
	return (node == list->tail) ? NULL : node->next;
    a434:	686a      	ldr	r2, [r5, #4]
    a436:	4293      	cmp	r3, r2
    a438:	d0f6      	beq.n	a428 <_flash_used+0x8>
    a43a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a43c:	2b00      	cmp	r3, #0
    a43e:	d0f3      	beq.n	a428 <_flash_used+0x8>
	int32_t b1 = thread_1->base.prio;
    a440:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    a444:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    a448:	428a      	cmp	r2, r1
    a44a:	d0f3      	beq.n	a434 <_flash_used+0x14>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a44c:	4291      	cmp	r1, r2
    a44e:	ddf1      	ble.n	a434 <_flash_used+0x14>
	sys_dnode_t *const prev = successor->prev;
    a450:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a452:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a456:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a458:	605c      	str	r4, [r3, #4]
}
    a45a:	bd38      	pop	{r3, r4, r5, pc}

0000a45c <z_ready_thread>:
{
    a45c:	b510      	push	{r4, lr}
    a45e:	f04f 0320 	mov.w	r3, #32
    a462:	f3ef 8411 	mrs	r4, BASEPRI
    a466:	f383 8812 	msr	BASEPRI_MAX, r3
    a46a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    a46e:	f7fd fe73 	bl	8158 <ready_thread>
	__asm__ volatile(
    a472:	f384 8811 	msr	BASEPRI, r4
    a476:	f3bf 8f6f 	isb	sy
}
    a47a:	bd10      	pop	{r4, pc}

0000a47c <z_sched_wake_thread>:
{
    a47c:	b538      	push	{r3, r4, r5, lr}
    a47e:	4604      	mov	r4, r0
	__asm__ volatile(
    a480:	f04f 0320 	mov.w	r3, #32
    a484:	f3ef 8511 	mrs	r5, BASEPRI
    a488:	f383 8812 	msr	BASEPRI_MAX, r3
    a48c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    a490:	7b43      	ldrb	r3, [r0, #13]
    a492:	f013 0f28 	tst.w	r3, #40	; 0x28
    a496:	d10b      	bne.n	a4b0 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    a498:	6883      	ldr	r3, [r0, #8]
    a49a:	b10b      	cbz	r3, a4a0 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    a49c:	f7ff ffac 	bl	a3f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a4a0:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    a4a2:	b951      	cbnz	r1, a4ba <z_sched_wake_thread+0x3e>
    a4a4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a4a8:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    a4aa:	4620      	mov	r0, r4
    a4ac:	f7fd fe54 	bl	8158 <ready_thread>
	__asm__ volatile(
    a4b0:	f385 8811 	msr	BASEPRI, r5
    a4b4:	f3bf 8f6f 	isb	sy
}
    a4b8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a4ba:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    a4be:	e7f3      	b.n	a4a8 <z_sched_wake_thread+0x2c>

0000a4c0 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    a4c0:	2101      	movs	r1, #1
    a4c2:	3818      	subs	r0, #24
    a4c4:	f7ff bfda 	b.w	a47c <z_sched_wake_thread>

0000a4c8 <z_unpend_first_thread>:
{
    a4c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a4ca:	f04f 0320 	mov.w	r3, #32
    a4ce:	f3ef 8511 	mrs	r5, BASEPRI
    a4d2:	f383 8812 	msr	BASEPRI_MAX, r3
    a4d6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a4da:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4dc:	42a0      	cmp	r0, r4
    a4de:	d00d      	beq.n	a4fc <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    a4e0:	b134      	cbz	r4, a4f0 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    a4e2:	4620      	mov	r0, r4
    a4e4:	f7ff ff88 	bl	a3f8 <unpend_thread_no_timeout>
    a4e8:	f104 0018 	add.w	r0, r4, #24
    a4ec:	f000 f869 	bl	a5c2 <z_abort_timeout>
	__asm__ volatile(
    a4f0:	f385 8811 	msr	BASEPRI, r5
    a4f4:	f3bf 8f6f 	isb	sy
}
    a4f8:	4620      	mov	r0, r4
    a4fa:	bd38      	pop	{r3, r4, r5, pc}
    a4fc:	2400      	movs	r4, #0
    a4fe:	e7f7      	b.n	a4f0 <z_unpend_first_thread+0x28>

0000a500 <z_unpend_thread>:
{
    a500:	b510      	push	{r4, lr}
    a502:	4601      	mov	r1, r0
	__asm__ volatile(
    a504:	f04f 0320 	mov.w	r3, #32
    a508:	f3ef 8411 	mrs	r4, BASEPRI
    a50c:	f383 8812 	msr	BASEPRI_MAX, r3
    a510:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    a514:	6883      	ldr	r3, [r0, #8]
    a516:	b10b      	cbz	r3, a51c <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    a518:	f7ff ff6e 	bl	a3f8 <unpend_thread_no_timeout>
	__asm__ volatile(
    a51c:	f384 8811 	msr	BASEPRI, r4
    a520:	f3bf 8f6f 	isb	sy
}
    a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a528:	f101 0018 	add.w	r0, r1, #24
    a52c:	f000 b849 	b.w	a5c2 <z_abort_timeout>

0000a530 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a530:	4603      	mov	r3, r0
    a532:	b920      	cbnz	r0, a53e <z_reschedule_irqlock+0xe>
    a534:	f3ef 8205 	mrs	r2, IPSR
    a538:	b90a      	cbnz	r2, a53e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    a53a:	f7f8 bff1 	b.w	3520 <arch_swap>
    a53e:	f383 8811 	msr	BASEPRI, r3
    a542:	f3bf 8f6f 	isb	sy
}
    a546:	4770      	bx	lr

0000a548 <z_reschedule_unlocked>:
	__asm__ volatile(
    a548:	f04f 0320 	mov.w	r3, #32
    a54c:	f3ef 8011 	mrs	r0, BASEPRI
    a550:	f383 8812 	msr	BASEPRI_MAX, r3
    a554:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a558:	f7ff bfea 	b.w	a530 <z_reschedule_irqlock>

0000a55c <z_unpend_all>:
{
    a55c:	b538      	push	{r3, r4, r5, lr}
    a55e:	4605      	mov	r5, r0
	int need_sched = 0;
    a560:	2000      	movs	r0, #0
	return list->head == list;
    a562:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a564:	42a5      	cmp	r5, r4
    a566:	d000      	beq.n	a56a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a568:	b904      	cbnz	r4, a56c <z_unpend_all+0x10>
}
    a56a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    a56c:	4620      	mov	r0, r4
    a56e:	f7ff ffc7 	bl	a500 <z_unpend_thread>
		z_ready_thread(thread);
    a572:	4620      	mov	r0, r4
    a574:	f7ff ff72 	bl	a45c <z_ready_thread>
		need_sched = 1;
    a578:	2001      	movs	r0, #1
    a57a:	e7f2      	b.n	a562 <z_unpend_all+0x6>

0000a57c <z_sched_wake>:
{
    a57c:	b538      	push	{r3, r4, r5, lr}
    a57e:	f04f 0320 	mov.w	r3, #32
    a582:	f3ef 8511 	mrs	r5, BASEPRI
    a586:	f383 8812 	msr	BASEPRI_MAX, r3
    a58a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a58e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a590:	42a0      	cmp	r0, r4
    a592:	d012      	beq.n	a5ba <z_sched_wake+0x3e>
		if (thread != NULL) {
    a594:	b19c      	cbz	r4, a5be <z_sched_wake+0x42>
    a596:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    a598:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    a59a:	4620      	mov	r0, r4
    a59c:	f7ff ff2c 	bl	a3f8 <unpend_thread_no_timeout>
    a5a0:	f104 0018 	add.w	r0, r4, #24
    a5a4:	f000 f80d 	bl	a5c2 <z_abort_timeout>
			ready_thread(thread);
    a5a8:	4620      	mov	r0, r4
    a5aa:	f7fd fdd5 	bl	8158 <ready_thread>
			ret = true;
    a5ae:	2001      	movs	r0, #1
	__asm__ volatile(
    a5b0:	f385 8811 	msr	BASEPRI, r5
    a5b4:	f3bf 8f6f 	isb	sy
}
    a5b8:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    a5ba:	2000      	movs	r0, #0
    a5bc:	e7f8      	b.n	a5b0 <z_sched_wake+0x34>
    a5be:	4620      	mov	r0, r4
    a5c0:	e7f6      	b.n	a5b0 <z_sched_wake+0x34>

0000a5c2 <z_abort_timeout>:
{
    a5c2:	b510      	push	{r4, lr}
	__asm__ volatile(
    a5c4:	f04f 0220 	mov.w	r2, #32
    a5c8:	f3ef 8411 	mrs	r4, BASEPRI
    a5cc:	f382 8812 	msr	BASEPRI_MAX, r2
    a5d0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a5d4:	6803      	ldr	r3, [r0, #0]
    a5d6:	b13b      	cbz	r3, a5e8 <z_abort_timeout+0x26>
			remove_timeout(to);
    a5d8:	f7fe f8c2 	bl	8760 <remove_timeout>
			ret = 0;
    a5dc:	2000      	movs	r0, #0
	__asm__ volatile(
    a5de:	f384 8811 	msr	BASEPRI, r4
    a5e2:	f3bf 8f6f 	isb	sy
}
    a5e6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a5e8:	f06f 0015 	mvn.w	r0, #21
    a5ec:	e7f7      	b.n	a5de <z_abort_timeout+0x1c>

0000a5ee <z_get_next_timeout_expiry>:
{
    a5ee:	b510      	push	{r4, lr}
	__asm__ volatile(
    a5f0:	f04f 0320 	mov.w	r3, #32
    a5f4:	f3ef 8411 	mrs	r4, BASEPRI
    a5f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a5fc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a600:	f7fe f88e 	bl	8720 <next_timeout>
	__asm__ volatile(
    a604:	f384 8811 	msr	BASEPRI, r4
    a608:	f3bf 8f6f 	isb	sy
}
    a60c:	bd10      	pop	{r4, pc}

0000a60e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a60e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a610:	f7fe f9a2 	bl	8958 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a614:	bd08      	pop	{r3, pc}

0000a616 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a616:	b108      	cbz	r0, a61c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a618:	f7f9 bb28 	b.w	3c6c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a61c:	4770      	bx	lr

0000a61e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a61e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a622:	bf08      	it	eq
    a624:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a628:	b538      	push	{r3, r4, r5, lr}
    a62a:	460c      	mov	r4, r1
    a62c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a62e:	d014      	beq.n	a65a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a630:	4308      	orrs	r0, r1
    a632:	d103      	bne.n	a63c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    a634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    a638:	f7fe b98e 	b.w	8958 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a63c:	f06f 0001 	mvn.w	r0, #1
    a640:	1b40      	subs	r0, r0, r5
    a642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a646:	eb63 0101 	sbc.w	r1, r3, r1
    a64a:	2900      	cmp	r1, #0
    a64c:	da04      	bge.n	a658 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    a64e:	f7fe f983 	bl	8958 <sys_clock_tick_get>
    a652:	1940      	adds	r0, r0, r5
    a654:	eb41 0104 	adc.w	r1, r1, r4
}
    a658:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    a65a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a65e:	4601      	mov	r1, r0
    a660:	e7fa      	b.n	a658 <sys_clock_timeout_end_calc+0x3a>

0000a662 <k_free>:
	if (ptr != NULL) {
    a662:	b120      	cbz	r0, a66e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    a664:	1f01      	subs	r1, r0, #4
    a666:	f850 0c04 	ldr.w	r0, [r0, #-4]
    a66a:	f000 b856 	b.w	a71a <k_heap_free>
}
    a66e:	4770      	bx	lr

0000a670 <k_heap_init>:
{
    a670:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    a672:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    a676:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a67a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a67c:	f7fe bd6e 	b.w	915c <sys_heap_init>

0000a680 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a684:	b085      	sub	sp, #20
    a686:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    a68a:	4607      	mov	r7, r0
    a68c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a68e:	4650      	mov	r0, sl
    a690:	4621      	mov	r1, r4
{
    a692:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a694:	f7ff ffc3 	bl	a61e <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    a698:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a69c:	bf08      	it	eq
    a69e:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a6a2:	4605      	mov	r5, r0
    a6a4:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    a6a6:	bf04      	itt	eq
    a6a8:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    a6ac:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    a6b0:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    a6b4:	f04f 0320 	mov.w	r3, #32
    a6b8:	f3ef 8411 	mrs	r4, BASEPRI
    a6bc:	f383 8812 	msr	BASEPRI_MAX, r3
    a6c0:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a6c4:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    a6c8:	464a      	mov	r2, r9
    a6ca:	4641      	mov	r1, r8
    a6cc:	4638      	mov	r0, r7
    a6ce:	f7fe fcde 	bl	908e <sys_heap_aligned_alloc>
    a6d2:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    a6d4:	f7fe f940 	bl	8958 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    a6d8:	9b03      	ldr	r3, [sp, #12]
    a6da:	b13b      	cbz	r3, a6ec <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    a6dc:	f384 8811 	msr	BASEPRI, r4
    a6e0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    a6e4:	4618      	mov	r0, r3
    a6e6:	b005      	add	sp, #20
    a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    a6ec:	1a28      	subs	r0, r5, r0
    a6ee:	eb66 0101 	sbc.w	r1, r6, r1
    a6f2:	2801      	cmp	r0, #1
    a6f4:	f171 0200 	sbcs.w	r2, r1, #0
    a6f8:	dbf0      	blt.n	a6dc <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a6fa:	e9cd 0100 	strd	r0, r1, [sp]
    a6fe:	465a      	mov	r2, fp
    a700:	4621      	mov	r1, r4
    a702:	4650      	mov	r0, sl
    a704:	f7fd fdbc 	bl	8280 <z_pend_curr>
	__asm__ volatile(
    a708:	f04f 0320 	mov.w	r3, #32
    a70c:	f3ef 8411 	mrs	r4, BASEPRI
    a710:	f383 8812 	msr	BASEPRI_MAX, r3
    a714:	f3bf 8f6f 	isb	sy
	return k;
    a718:	e7d6      	b.n	a6c8 <k_heap_aligned_alloc+0x48>

0000a71a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    a71a:	b538      	push	{r3, r4, r5, lr}
    a71c:	4604      	mov	r4, r0
    a71e:	f04f 0320 	mov.w	r3, #32
    a722:	f3ef 8511 	mrs	r5, BASEPRI
    a726:	f383 8812 	msr	BASEPRI_MAX, r3
    a72a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    a72e:	f7fe fc76 	bl	901e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    a732:	f104 000c 	add.w	r0, r4, #12
    a736:	f7ff ff11 	bl	a55c <z_unpend_all>
    a73a:	b130      	cbz	r0, a74a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    a73c:	4629      	mov	r1, r5
    a73e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    a742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    a746:	f7fd bdff 	b.w	8348 <z_reschedule>
	__asm__ volatile(
    a74a:	f385 8811 	msr	BASEPRI, r5
    a74e:	f3bf 8f6f 	isb	sy
}
    a752:	bd38      	pop	{r3, r4, r5, pc}

0000a754 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a754:	4770      	bx	lr
	...
