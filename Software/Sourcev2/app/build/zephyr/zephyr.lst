
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	c0 37 00 20 19 3b 00 00 bd 9c 00 00 ed 3a 00 00     .7. .;.......:..
    1010:	ed 3a 00 00 ed 3a 00 00 ed 3a 00 00 00 00 00 00     .:...:...:......
	...
    102c:	55 37 00 00 ed 3a 00 00 00 00 00 00 01 37 00 00     U7...:.......7..
    103c:	ed 3a 00 00                                         .:..

00001040 <_irq_vector_table>:
    1040:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    1050:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    1060:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    1070:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    1080:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    1090:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10a0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10b0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10c0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10d0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10e0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..
    10f0:	05 38 00 00 05 38 00 00 05 38 00 00 05 38 00 00     .8...8...8...8..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <int_in_ready_cb>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    13d4:	4801      	ldr	r0, [pc, #4]	; (13dc <int_in_ready_cb+0x8>)
    13d6:	f006 be2d 	b.w	8034 <z_impl_k_sem_give>
    13da:	bf00      	nop
    13dc:	200002e8 	.word	0x200002e8

000013e0 <composite_pre_init>:
	
}


static int composite_pre_init(void)
{
    13e0:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    13e2:	480b      	ldr	r0, [pc, #44]	; (1410 <composite_pre_init+0x30>)
	hdev = device_get_binding("HID_0");
    13e4:	4c0b      	ldr	r4, [pc, #44]	; (1414 <composite_pre_init+0x34>)
    13e6:	f006 fb0b 	bl	7a00 <z_impl_device_get_binding>
    13ea:	6020      	str	r0, [r4, #0]
	if (hdev == NULL) {
    13ec:	b148      	cbz	r0, 1402 <composite_pre_init+0x22>
		printk("Cannot get USB HID Device");
		return -ENODEV;
	}


	usb_hid_register_device(hdev, hid_kbd_report_desc,sizeof(hid_kbd_report_desc), &ops);
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <composite_pre_init+0x38>)
    13f0:	490a      	ldr	r1, [pc, #40]	; (141c <composite_pre_init+0x3c>)
    13f2:	223f      	movs	r2, #63	; 0x3f
    13f4:	f002 fdc0 	bl	3f78 <usb_hid_register_device>

	return usb_hid_init(hdev);
    13f8:	6820      	ldr	r0, [r4, #0]
}
    13fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return usb_hid_init(hdev);
    13fe:	f008 bcad 	b.w	9d5c <usb_hid_init>
		printk("Cannot get USB HID Device");
    1402:	4807      	ldr	r0, [pc, #28]	; (1420 <composite_pre_init+0x40>)
    1404:	f007 fec2 	bl	918c <printk>
}
    1408:	f06f 0012 	mvn.w	r0, #18
    140c:	bd10      	pop	{r4, pc}
    140e:	bf00      	nop
    1410:	0000b200 	.word	0x0000b200
    1414:	200007c0 	.word	0x200007c0
    1418:	0000af08 	.word	0x0000af08
    141c:	0000b264 	.word	0x0000b264
    1420:	0000b206 	.word	0x0000b206

00001424 <as5600_refresh>:
{
    1424:	b513      	push	{r0, r1, r4, lr}
    1426:	4604      	mov	r4, r0
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
    1428:	6883      	ldr	r3, [r0, #8]
    142a:	2122      	movs	r1, #34	; 0x22
    142c:	68db      	ldr	r3, [r3, #12]
    142e:	4798      	blx	r3
	if (ret != 0){
    1430:	4601      	mov	r1, r0
    1432:	b110      	cbz	r0, 143a <as5600_refresh+0x16>
			printk("sample fetch error:,%d\n", ret);
    1434:	4805      	ldr	r0, [pc, #20]	; (144c <as5600_refresh+0x28>)
    1436:	f007 fea9 	bl	918c <printk>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    143a:	68a3      	ldr	r3, [r4, #8]
    143c:	466a      	mov	r2, sp
    143e:	691b      	ldr	r3, [r3, #16]
    1440:	2122      	movs	r1, #34	; 0x22
    1442:	4620      	mov	r0, r4
    1444:	4798      	blx	r3
}
    1446:	9800      	ldr	r0, [sp, #0]
    1448:	b002      	add	sp, #8
    144a:	bd10      	pop	{r4, pc}
    144c:	0000b220 	.word	0x0000b220

00001450 <threadA>:
{	
    1450:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1454:	4830      	ldr	r0, [pc, #192]	; (1518 <threadA+0xc8>)
    1456:	f009 f825 	bl	a4a4 <z_device_is_ready>
	if (as == NULL || !device_is_ready(as)) {
    145a:	b928      	cbnz	r0, 1468 <threadA+0x18>
		printk("as5600 device tree not configured\n");
    145c:	482f      	ldr	r0, [pc, #188]	; (151c <threadA+0xcc>)
}
    145e:	b002      	add	sp, #8
    1460:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("as5600 device tree not configured\n");
    1464:	f007 be92 	b.w	918c <printk>
	int lastIdent = (as5600_refresh(as) - (as5600_refresh(as) % 12))/12 ;
    1468:	482b      	ldr	r0, [pc, #172]	; (1518 <threadA+0xc8>)
		int degrees = as5600_refresh(as)  ;//+ 6;
    146a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 1518 <threadA+0xc8>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    146e:	4e2c      	ldr	r6, [pc, #176]	; (1520 <threadA+0xd0>)
	return z_impl_k_sem_take(sem, timeout);
    1470:	4f2c      	ldr	r7, [pc, #176]	; (1524 <threadA+0xd4>)
	int lastIdent = (as5600_refresh(as) - (as5600_refresh(as) % 12))/12 ;
    1472:	f7ff ffd7 	bl	1424 <as5600_refresh>
    1476:	4604      	mov	r4, r0
    1478:	4827      	ldr	r0, [pc, #156]	; (1518 <threadA+0xc8>)
    147a:	f7ff ffd3 	bl	1424 <as5600_refresh>
    147e:	230c      	movs	r3, #12
    1480:	fb90 f2f3 	sdiv	r2, r0, r3
    1484:	fb02 0013 	mls	r0, r2, r3, r0
    1488:	1a24      	subs	r4, r4, r0
	int lastDegree = as5600_refresh(as);
    148a:	4823      	ldr	r0, [pc, #140]	; (1518 <threadA+0xc8>)
	int lastIdent = (as5600_refresh(as) - (as5600_refresh(as) % 12))/12 ;
    148c:	fb94 f4f3 	sdiv	r4, r4, r3
	int lastDegree = as5600_refresh(as);
    1490:	f7ff ffc8 	bl	1424 <as5600_refresh>
    1494:	4682      	mov	sl, r0
		int degrees = as5600_refresh(as)  ;//+ 6;
    1496:	4640      	mov	r0, r8
    1498:	f7ff ffc4 	bl	1424 <as5600_refresh>
		if (degrees-lastDegree < -200 ){
    149c:	eba0 020a 	sub.w	r2, r0, sl
    14a0:	f112 0fc8 	cmn.w	r2, #200	; 0xc8
		int degrees = as5600_refresh(as)  ;//+ 6;
    14a4:	4605      	mov	r5, r0
		if (degrees-lastDegree < -200 ){
    14a6:	da31      	bge.n	150c <threadA+0xbc>
			deltadegrees = (degrees-lastDegree) + 360 + 50;
    14a8:	f502 72cd 	add.w	r2, r2, #410	; 0x19a
		if (lastIdent != (((degrees+6+IDENT_OFFSET)) - ((degrees+6+IDENT_OFFSET) % 12))/12 && (((degrees+6+IDENT_OFFSET)) - ((degrees+6+IDENT_OFFSET) % 12))/12!= 30) {
    14ac:	1deb      	adds	r3, r5, #7
    14ae:	f04f 090c 	mov.w	r9, #12
    14b2:	fb93 f1f9 	sdiv	r1, r3, r9
    14b6:	fb09 3111 	mls	r1, r9, r1, r3
    14ba:	1a5b      	subs	r3, r3, r1
    14bc:	fb93 f9f9 	sdiv	r9, r3, r9
    14c0:	45a1      	cmp	r9, r4
    14c2:	d0e8      	beq.n	1496 <threadA+0x46>
    14c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
    14c8:	2b0b      	cmp	r3, #11
    14ca:	d9e4      	bls.n	1496 <threadA+0x46>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    14cc:	6830      	ldr	r0, [r6, #0]
    14ce:	6871      	ldr	r1, [r6, #4]
    14d0:	466b      	mov	r3, sp
    14d2:	c303      	stmia	r3!, {r0, r1}
		if (deltadegrees > 0){
    14d4:	2a00      	cmp	r2, #0
			rep[0] = KEY_1_MODIFYER;
    14d6:	bfc4      	itt	gt
    14d8:	2302      	movgt	r3, #2
    14da:	f88d 3000 	strbgt.w	r3, [sp]
			rep[7] = KEY_1_CONFIGURE; 
    14de:	2316      	movs	r3, #22
    14e0:	f88d 3007 	strb.w	r3, [sp, #7]
    14e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14ec:	4638      	mov	r0, r7
    14ee:	f006 fdc1 	bl	8074 <z_impl_k_sem_take>
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    14f2:	480d      	ldr	r0, [pc, #52]	; (1528 <threadA+0xd8>)
    14f4:	2300      	movs	r3, #0
    14f6:	2208      	movs	r2, #8
    14f8:	4669      	mov	r1, sp
    14fa:	6800      	ldr	r0, [r0, #0]
    14fc:	f008 fc38 	bl	9d70 <hid_int_ep_write>
	z_impl_k_sem_give(sem);
    1500:	480a      	ldr	r0, [pc, #40]	; (152c <threadA+0xdc>)
    1502:	f006 fd97 	bl	8034 <z_impl_k_sem_give>
			lastDegree = degrees;
    1506:	46aa      	mov	sl, r5
    1508:	464c      	mov	r4, r9
    150a:	e7c4      	b.n	1496 <threadA+0x46>
		} else if (degrees-lastDegree > 200){
    150c:	2ac8      	cmp	r2, #200	; 0xc8
			deltadegrees = (degrees-lastDegree) - 360 - 50;
    150e:	bfc8      	it	gt
    1510:	f5a2 72cd 	subgt.w	r2, r2, #410	; 0x19a
    1514:	e7ca      	b.n	14ac <threadA+0x5c>
    1516:	bf00      	nop
    1518:	0000ac5c 	.word	0x0000ac5c
    151c:	0000b238 	.word	0x0000b238
    1520:	0000aef0 	.word	0x0000aef0
    1524:	200002e8 	.word	0x200002e8
    1528:	200007c0 	.word	0x200007c0
    152c:	200002d8 	.word	0x200002d8

00001530 <main>:
{
    1530:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (usb_enable(NULL)) {
    1532:	2000      	movs	r0, #0
{
    1534:	b08b      	sub	sp, #44	; 0x2c
	if (usb_enable(NULL)) {
    1536:	f001 fa31 	bl	299c <usb_enable>
    153a:	2800      	cmp	r0, #0
    153c:	d138      	bne.n	15b0 <main+0x80>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    153e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1546:	e9cd 2306 	strd	r2, r3, [sp, #24]
    154a:	2301      	movs	r3, #1
    154c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1550:	e9cd 0000 	strd	r0, r0, [sp]
    1554:	9004      	str	r0, [sp, #16]
    1556:	4b18      	ldr	r3, [pc, #96]	; (15b8 <main+0x88>)
    1558:	4918      	ldr	r1, [pc, #96]	; (15bc <main+0x8c>)
    155a:	4819      	ldr	r0, [pc, #100]	; (15c0 <main+0x90>)
    155c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1560:	f006 fbda 	bl	7d18 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1564:	4917      	ldr	r1, [pc, #92]	; (15c4 <main+0x94>)
    1566:	4816      	ldr	r0, [pc, #88]	; (15c0 <main+0x90>)
    1568:	f009 f819 	bl	a59e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    156c:	4814      	ldr	r0, [pc, #80]	; (15c0 <main+0x90>)
	return z_impl_k_sem_take(sem, timeout);
    156e:	4f16      	ldr	r7, [pc, #88]	; (15c8 <main+0x98>)
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    1570:	4d16      	ldr	r5, [pc, #88]	; (15cc <main+0x9c>)
    1572:	4e17      	ldr	r6, [pc, #92]	; (15d0 <main+0xa0>)
	z_impl_k_thread_start(thread);
    1574:	f009 f816 	bl	a5a4 <z_impl_k_thread_start>
	return z_impl_k_sem_take(sem, timeout);
    1578:	f240 6267 	movw	r2, #1639	; 0x667
    157c:	2300      	movs	r3, #0
    157e:	4638      	mov	r0, r7
    1580:	f006 fd78 	bl	8074 <z_impl_k_sem_take>
		if (k_sem_take(&my_sem, K_MSEC(50)) != 0) {
    1584:	4604      	mov	r4, r0
    1586:	2800      	cmp	r0, #0
    1588:	d1f6      	bne.n	1578 <main+0x48>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    158a:	6828      	ldr	r0, [r5, #0]
    158c:	6869      	ldr	r1, [r5, #4]
    158e:	ab08      	add	r3, sp, #32
    1590:	c303      	stmia	r3!, {r0, r1}
    1592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    159a:	4630      	mov	r0, r6
    159c:	f006 fd6a 	bl	8074 <z_impl_k_sem_take>
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    15a0:	480c      	ldr	r0, [pc, #48]	; (15d4 <main+0xa4>)
    15a2:	4623      	mov	r3, r4
    15a4:	2208      	movs	r2, #8
    15a6:	a908      	add	r1, sp, #32
    15a8:	6800      	ldr	r0, [r0, #0]
    15aa:	f008 fbe1 	bl	9d70 <hid_int_ep_write>
		if (k_sem_take(&my_sem, K_MSEC(50)) != 0) {
    15ae:	e7e3      	b.n	1578 <main+0x48>
}
    15b0:	2000      	movs	r0, #0
    15b2:	b00b      	add	sp, #44	; 0x2c
    15b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15b6:	bf00      	nop
    15b8:	00001451 	.word	0x00001451
    15bc:	20001d40 	.word	0x20001d40
    15c0:	20000420 	.word	0x20000420
    15c4:	0000b25b 	.word	0x0000b25b
    15c8:	200002d8 	.word	0x200002d8
    15cc:	0000aef0 	.word	0x0000aef0
    15d0:	200002e8 	.word	0x200002e8
    15d4:	200007c0 	.word	0x200007c0

000015d8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    15d8:	4b01      	ldr	r3, [pc, #4]	; (15e0 <char_out+0x8>)
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	4718      	bx	r3
    15de:	bf00      	nop
    15e0:	200000b0 	.word	0x200000b0

000015e4 <__printk_hook_install>:
	_char_out = fn;
    15e4:	4b01      	ldr	r3, [pc, #4]	; (15ec <__printk_hook_install+0x8>)
    15e6:	6018      	str	r0, [r3, #0]
}
    15e8:	4770      	bx	lr
    15ea:	bf00      	nop
    15ec:	200000b0 	.word	0x200000b0

000015f0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    15f0:	b507      	push	{r0, r1, r2, lr}
    15f2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    15f4:	2100      	movs	r1, #0
    15f6:	4602      	mov	r2, r0
    15f8:	9100      	str	r1, [sp, #0]
    15fa:	4803      	ldr	r0, [pc, #12]	; (1608 <vprintk+0x18>)
    15fc:	f000 f914 	bl	1828 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1600:	b003      	add	sp, #12
    1602:	f85d fb04 	ldr.w	pc, [sp], #4
    1606:	bf00      	nop
    1608:	000015d9 	.word	0x000015d9

0000160c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1610:	8b05      	ldrh	r5, [r0, #24]
{
    1612:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1614:	0728      	lsls	r0, r5, #28
{
    1616:	4690      	mov	r8, r2
	if (processing) {
    1618:	d411      	bmi.n	163e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    161a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    161c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1620:	f040 80cd 	bne.w	17be <process_event+0x1b2>
			evt = process_recheck(mgr);
    1624:	4620      	mov	r0, r4
    1626:	f007 ffa8 	bl	957a <process_recheck>
		}

		if (evt == EVT_NOP) {
    162a:	b178      	cbz	r0, 164c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    162c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    162e:	8b21      	ldrh	r1, [r4, #24]
    1630:	2804      	cmp	r0, #4
    1632:	d811      	bhi.n	1658 <process_event+0x4c>
    1634:	e8df f000 	tbb	[pc, r0]
    1638:	856d10c3 	.word	0x856d10c3
    163c:	95          	.byte	0x95
    163d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    163e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1640:	bf0c      	ite	eq
    1642:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1646:	f045 0520 	orrne.w	r5, r5, #32
    164a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    164c:	f388 8811 	msr	BASEPRI, r8
    1650:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1658:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    165c:	45aa      	cmp	sl, r5
    165e:	f000 80a6 	beq.w	17ae <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1662:	2700      	movs	r7, #0
    1664:	46b9      	mov	r9, r7
    1666:	463e      	mov	r6, r7
    1668:	68a3      	ldr	r3, [r4, #8]
    166a:	2b00      	cmp	r3, #0
    166c:	f000 80bd 	beq.w	17ea <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1670:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1674:	8321      	strh	r1, [r4, #24]
    1676:	f388 8811 	msr	BASEPRI, r8
    167a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    167e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1680:	2900      	cmp	r1, #0
    1682:	f000 80bb 	beq.w	17fc <process_event+0x1f0>
	return node->next;
    1686:	680d      	ldr	r5, [r1, #0]
    1688:	2900      	cmp	r1, #0
    168a:	f000 80b7 	beq.w	17fc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    168e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1692:	4633      	mov	r3, r6
    1694:	4652      	mov	r2, sl
    1696:	4620      	mov	r0, r4
    1698:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    169a:	2d00      	cmp	r5, #0
    169c:	d076      	beq.n	178c <process_event+0x180>
    169e:	682b      	ldr	r3, [r5, #0]
    16a0:	4629      	mov	r1, r5
    16a2:	461d      	mov	r5, r3
    16a4:	e7f0      	b.n	1688 <process_event+0x7c>
    16a6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    16aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    16ac:	2a01      	cmp	r2, #1
    16ae:	d81b      	bhi.n	16e8 <process_event+0xdc>
	list->head = NULL;
    16b0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16b2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    16b6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    16b8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16ba:	b289      	uxth	r1, r1
	list->tail = NULL;
    16bc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    16c0:	d109      	bne.n	16d6 <process_event+0xca>
    16c2:	463b      	mov	r3, r7
    16c4:	e003      	b.n	16ce <process_event+0xc2>
				mgr->refs += 1U;
    16c6:	8b62      	ldrh	r2, [r4, #26]
    16c8:	3201      	adds	r2, #1
    16ca:	8362      	strh	r2, [r4, #26]
	return node->next;
    16cc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    16ce:	2b00      	cmp	r3, #0
    16d0:	d1f9      	bne.n	16c6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16d2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    16d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    16d8:	4620      	mov	r0, r4
    16da:	f007 ff4e 	bl	957a <process_recheck>
    16de:	2800      	cmp	r0, #0
    16e0:	d07b      	beq.n	17da <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16e2:	f041 0120 	orr.w	r1, r1, #32
    16e6:	e077      	b.n	17d8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    16e8:	2b04      	cmp	r3, #4
    16ea:	d10a      	bne.n	1702 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16ec:	f021 0107 	bic.w	r1, r1, #7
    16f0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    16f2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    16f4:	4620      	mov	r0, r4
    16f6:	f007 ff40 	bl	957a <process_recheck>
    16fa:	b110      	cbz	r0, 1702 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16fc:	f041 0120 	orr.w	r1, r1, #32
    1700:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1702:	8b21      	ldrh	r1, [r4, #24]
    1704:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1708:	45aa      	cmp	sl, r5
    170a:	d050      	beq.n	17ae <process_event+0x1a2>
    170c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    170e:	46b9      	mov	r9, r7
    1710:	e7aa      	b.n	1668 <process_event+0x5c>
			transit = mgr->transitions->start;
    1712:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1714:	f021 0107 	bic.w	r1, r1, #7
    1718:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    171c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    171e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1722:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1724:	d12d      	bne.n	1782 <process_event+0x176>
		    || (transit != NULL)) {
    1726:	f1b9 0f00 	cmp.w	r9, #0
    172a:	d040      	beq.n	17ae <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    172c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1730:	8321      	strh	r1, [r4, #24]
    1732:	f388 8811 	msr	BASEPRI, r8
    1736:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    173a:	493a      	ldr	r1, [pc, #232]	; (1824 <process_event+0x218>)
    173c:	4620      	mov	r0, r4
    173e:	47c8      	blx	r9
    1740:	e029      	b.n	1796 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1742:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1746:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1748:	f041 0104 	orr.w	r1, r1, #4
    174c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    174e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1750:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1754:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1756:	d0e6      	beq.n	1726 <process_event+0x11a>
    1758:	2700      	movs	r7, #0
		res = 0;
    175a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    175c:	f04f 0a04 	mov.w	sl, #4
    1760:	e782      	b.n	1668 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1762:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1766:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1768:	f041 0105 	orr.w	r1, r1, #5
    176c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    176e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1770:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1774:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1776:	d0d6      	beq.n	1726 <process_event+0x11a>
    1778:	2700      	movs	r7, #0
		res = 0;
    177a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    177c:	f04f 0a05 	mov.w	sl, #5
    1780:	e772      	b.n	1668 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1782:	2700      	movs	r7, #0
		res = 0;
    1784:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1786:	f04f 0a06 	mov.w	sl, #6
    178a:	e76d      	b.n	1668 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    178c:	462b      	mov	r3, r5
    178e:	e787      	b.n	16a0 <process_event+0x94>
			if (transit != NULL) {
    1790:	f1b9 0f00 	cmp.w	r9, #0
    1794:	d1d1      	bne.n	173a <process_event+0x12e>
	__asm__ volatile(
    1796:	f04f 0320 	mov.w	r3, #32
    179a:	f3ef 8811 	mrs	r8, BASEPRI
    179e:	f383 8812 	msr	BASEPRI_MAX, r3
    17a2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    17a6:	8b23      	ldrh	r3, [r4, #24]
    17a8:	f023 0308 	bic.w	r3, r3, #8
    17ac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    17ae:	8b25      	ldrh	r5, [r4, #24]
    17b0:	06ea      	lsls	r2, r5, #27
    17b2:	d52e      	bpl.n	1812 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17b4:	f025 0310 	bic.w	r3, r5, #16
    17b8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    17ba:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    17be:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17c0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    17c2:	2e00      	cmp	r6, #0
    17c4:	f6bf af6f 	bge.w	16a6 <process_event+0x9a>
	list->head = NULL;
    17c8:	2300      	movs	r3, #0
		*clients = mgr->clients;
    17ca:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    17cc:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d0:	f021 0107 	bic.w	r1, r1, #7
    17d4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17d8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17da:	8b21      	ldrh	r1, [r4, #24]
    17dc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17e0:	45aa      	cmp	sl, r5
    17e2:	f04f 0900 	mov.w	r9, #0
    17e6:	f47f af3f 	bne.w	1668 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    17ea:	2f00      	cmp	r7, #0
    17ec:	d09b      	beq.n	1726 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17ee:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17f2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    17f4:	f388 8811 	msr	BASEPRI, r8
    17f8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    17fc:	2f00      	cmp	r7, #0
    17fe:	d0c7      	beq.n	1790 <process_event+0x184>
	return node->next;
    1800:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1802:	4639      	mov	r1, r7
    1804:	4633      	mov	r3, r6
    1806:	4652      	mov	r2, sl
    1808:	4620      	mov	r0, r4
    180a:	f007 fee2 	bl	95d2 <notify_one>
	list->head = node;
    180e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1810:	e7f4      	b.n	17fc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1812:	06ab      	lsls	r3, r5, #26
    1814:	f57f af1a 	bpl.w	164c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1818:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    181c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    181e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1822:	e6ff      	b.n	1624 <process_event+0x18>
    1824:	000095ff 	.word	0x000095ff

00001828 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    182c:	4681      	mov	r9, r0
    182e:	b095      	sub	sp, #84	; 0x54
    1830:	468b      	mov	fp, r1
    1832:	4617      	mov	r7, r2
    1834:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1836:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1838:	7838      	ldrb	r0, [r7, #0]
    183a:	b908      	cbnz	r0, 1840 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    183c:	4628      	mov	r0, r5
    183e:	e358      	b.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
			OUTC(*fp++);
    1840:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    1842:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1844:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1846:	d006      	beq.n	1856 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1848:	4659      	mov	r1, fp
    184a:	47c8      	blx	r9
    184c:	2800      	cmp	r0, #0
    184e:	f2c0 8350 	blt.w	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1852:	3501      	adds	r5, #1
		if (bps == NULL) {
    1854:	e1fb      	b.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		} state = {
    1856:	2218      	movs	r2, #24
    1858:	2100      	movs	r1, #0
    185a:	a80e      	add	r0, sp, #56	; 0x38
    185c:	f008 fa5c 	bl	9d18 <memset>
	if (*sp == '%') {
    1860:	787b      	ldrb	r3, [r7, #1]
    1862:	2b25      	cmp	r3, #37	; 0x25
    1864:	d07d      	beq.n	1962 <CONFIG_USB_DEVICE_VID+0x4d>
    1866:	2300      	movs	r3, #0
    1868:	1c78      	adds	r0, r7, #1
    186a:	4698      	mov	r8, r3
    186c:	469e      	mov	lr, r3
    186e:	469c      	mov	ip, r3
    1870:	461e      	mov	r6, r3
    1872:	4601      	mov	r1, r0
		switch (*sp) {
    1874:	f810 2b01 	ldrb.w	r2, [r0], #1
    1878:	2a2b      	cmp	r2, #43	; 0x2b
    187a:	f000 80a1 	beq.w	19c0 <CONFIG_USB_DEVICE_VID+0xab>
    187e:	f200 8098 	bhi.w	19b2 <CONFIG_USB_DEVICE_VID+0x9d>
    1882:	2a20      	cmp	r2, #32
    1884:	f000 809f 	beq.w	19c6 <CONFIG_USB_DEVICE_VID+0xb1>
    1888:	2a23      	cmp	r2, #35	; 0x23
    188a:	f000 809f 	beq.w	19cc <CONFIG_USB_DEVICE_VID+0xb7>
    188e:	b12b      	cbz	r3, 189c <z_cbvprintf_impl+0x74>
    1890:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1898:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    189c:	f1b8 0f00 	cmp.w	r8, #0
    18a0:	d005      	beq.n	18ae <z_cbvprintf_impl+0x86>
    18a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18a6:	f043 0320 	orr.w	r3, r3, #32
    18aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    18ae:	f1be 0f00 	cmp.w	lr, #0
    18b2:	d005      	beq.n	18c0 <z_cbvprintf_impl+0x98>
    18b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18b8:	f043 0310 	orr.w	r3, r3, #16
    18bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    18c0:	f1bc 0f00 	cmp.w	ip, #0
    18c4:	d005      	beq.n	18d2 <z_cbvprintf_impl+0xaa>
    18c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18ca:	f043 0308 	orr.w	r3, r3, #8
    18ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    18d2:	b12e      	cbz	r6, 18e0 <z_cbvprintf_impl+0xb8>
    18d4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18d8:	f043 0304 	orr.w	r3, r3, #4
    18dc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    18e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18e4:	f003 0044 	and.w	r0, r3, #68	; 0x44
    18e8:	2844      	cmp	r0, #68	; 0x44
    18ea:	d103      	bne.n	18f4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    18ec:	f36f 1386 	bfc	r3, #6, #1
    18f0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    18f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    18f8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    18fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    18fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1902:	d17f      	bne.n	1a04 <CONFIG_USB_DEVICE_VID+0xef>
		conv->width_star = true;
    1904:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1908:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    190c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    190e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1912:	781a      	ldrb	r2, [r3, #0]
    1914:	2a2e      	cmp	r2, #46	; 0x2e
    1916:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    191a:	bf0c      	ite	eq
    191c:	2101      	moveq	r1, #1
    191e:	2100      	movne	r1, #0
    1920:	f361 0241 	bfi	r2, r1, #1, #1
    1924:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1928:	d178      	bne.n	1a1c <CONFIG_USB_DEVICE_VID+0x107>
	if (*sp == '*') {
    192a:	785a      	ldrb	r2, [r3, #1]
    192c:	2a2a      	cmp	r2, #42	; 0x2a
    192e:	d06e      	beq.n	1a0e <CONFIG_USB_DEVICE_VID+0xf9>
	++sp;
    1930:	3301      	adds	r3, #1
	size_t val = 0;
    1932:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1934:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1938:	4619      	mov	r1, r3
    193a:	f811 0b01 	ldrb.w	r0, [r1], #1
    193e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1942:	2e09      	cmp	r6, #9
    1944:	f240 8095 	bls.w	1a72 <CONFIG_USB_DEVICE_VID+0x15d>
	conv->unsupported |= ((conv->prec_value < 0)
    1948:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    194c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    194e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1952:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1956:	460a      	mov	r2, r1
    1958:	f360 0241 	bfi	r2, r0, #1, #1
    195c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1960:	e05c      	b.n	1a1c <CONFIG_USB_DEVICE_VID+0x107>
		conv->specifier = *sp++;
    1962:	1cba      	adds	r2, r7, #2
    1964:	9203      	str	r2, [sp, #12]
    1966:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    196a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    196e:	07da      	lsls	r2, r3, #31
    1970:	f140 812e 	bpl.w	1bd0 <CONFIG_USB_DEVICE_VID+0x2bb>
			width = va_arg(ap, int);
    1974:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1978:	f1b8 0f00 	cmp.w	r8, #0
    197c:	da07      	bge.n	198e <CONFIG_USB_DEVICE_VID+0x79>
				conv->flag_dash = true;
    197e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1982:	f042 0204 	orr.w	r2, r2, #4
    1986:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    198a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    198e:	075e      	lsls	r6, r3, #29
    1990:	f140 8127 	bpl.w	1be2 <CONFIG_USB_DEVICE_VID+0x2cd>
			int arg = va_arg(ap, int);
    1994:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1998:	f1ba 0f00 	cmp.w	sl, #0
    199c:	f280 8126 	bge.w	1bec <CONFIG_USB_DEVICE_VID+0x2d7>
				conv->prec_present = false;
    19a0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    19a4:	f36f 0341 	bfc	r3, #1, #1
    19a8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    19ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    19b0:	e11c      	b.n	1bec <CONFIG_USB_DEVICE_VID+0x2d7>
		switch (*sp) {
    19b2:	2a2d      	cmp	r2, #45	; 0x2d
    19b4:	d00d      	beq.n	19d2 <CONFIG_USB_DEVICE_VID+0xbd>
    19b6:	2a30      	cmp	r2, #48	; 0x30
    19b8:	f47f af69 	bne.w	188e <z_cbvprintf_impl+0x66>
    19bc:	2301      	movs	r3, #1
	} while (loop);
    19be:	e758      	b.n	1872 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    19c0:	f04f 0c01 	mov.w	ip, #1
    19c4:	e755      	b.n	1872 <z_cbvprintf_impl+0x4a>
    19c6:	f04f 0e01 	mov.w	lr, #1
    19ca:	e752      	b.n	1872 <z_cbvprintf_impl+0x4a>
    19cc:	f04f 0801 	mov.w	r8, #1
    19d0:	e74f      	b.n	1872 <z_cbvprintf_impl+0x4a>
    19d2:	2601      	movs	r6, #1
    19d4:	e74d      	b.n	1872 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    19d6:	fb0e 6202 	mla	r2, lr, r2, r6
    19da:	3a30      	subs	r2, #48	; 0x30
    19dc:	4603      	mov	r3, r0
    19de:	4618      	mov	r0, r3
    19e0:	f810 6b01 	ldrb.w	r6, [r0], #1
    19e4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    19e8:	f1bc 0f09 	cmp.w	ip, #9
    19ec:	d9f3      	bls.n	19d6 <CONFIG_USB_DEVICE_VID+0xc1>
	if (sp != wp) {
    19ee:	4299      	cmp	r1, r3
    19f0:	d08f      	beq.n	1912 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    19f2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    19f6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    19f8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    19fa:	f362 0141 	bfi	r1, r2, #1, #1
    19fe:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1a02:	e786      	b.n	1912 <z_cbvprintf_impl+0xea>
    1a04:	460b      	mov	r3, r1
	size_t val = 0;
    1a06:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1a08:	f04f 0e0a 	mov.w	lr, #10
    1a0c:	e7e7      	b.n	19de <CONFIG_USB_DEVICE_VID+0xc9>
		conv->prec_star = true;
    1a0e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a12:	f042 0204 	orr.w	r2, r2, #4
    1a16:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1a1a:	3302      	adds	r3, #2
	switch (*sp) {
    1a1c:	781a      	ldrb	r2, [r3, #0]
    1a1e:	2a6c      	cmp	r2, #108	; 0x6c
    1a20:	d047      	beq.n	1ab2 <CONFIG_USB_DEVICE_VID+0x19d>
    1a22:	d82b      	bhi.n	1a7c <CONFIG_USB_DEVICE_VID+0x167>
    1a24:	2a68      	cmp	r2, #104	; 0x68
    1a26:	d031      	beq.n	1a8c <CONFIG_USB_DEVICE_VID+0x177>
    1a28:	2a6a      	cmp	r2, #106	; 0x6a
    1a2a:	d04b      	beq.n	1ac4 <CONFIG_USB_DEVICE_VID+0x1af>
    1a2c:	2a4c      	cmp	r2, #76	; 0x4c
    1a2e:	d051      	beq.n	1ad4 <CONFIG_USB_DEVICE_VID+0x1bf>
	conv->specifier = *sp++;
    1a30:	461a      	mov	r2, r3
    1a32:	f812 3b01 	ldrb.w	r3, [r2], #1
    1a36:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1a38:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a3a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1a3e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1a42:	f200 80be 	bhi.w	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
    1a46:	2b6d      	cmp	r3, #109	; 0x6d
    1a48:	d851      	bhi.n	1aee <CONFIG_USB_DEVICE_VID+0x1d9>
    1a4a:	2b69      	cmp	r3, #105	; 0x69
    1a4c:	f200 80b9 	bhi.w	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
    1a50:	2b57      	cmp	r3, #87	; 0x57
    1a52:	d867      	bhi.n	1b24 <CONFIG_USB_DEVICE_VID+0x20f>
    1a54:	2b41      	cmp	r3, #65	; 0x41
    1a56:	d003      	beq.n	1a60 <CONFIG_USB_DEVICE_VID+0x14b>
    1a58:	3b45      	subs	r3, #69	; 0x45
    1a5a:	2b02      	cmp	r3, #2
    1a5c:	f200 80b1 	bhi.w	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
		conv->specifier_cat = SPECIFIER_FP;
    1a60:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a64:	2204      	movs	r2, #4
    1a66:	f362 0302 	bfi	r3, r2, #0, #3
    1a6a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1a6e:	2301      	movs	r3, #1
			break;
    1a70:	e073      	b.n	1b5a <CONFIG_USB_DEVICE_VID+0x245>
		val = 10U * val + *sp++ - '0';
    1a72:	fb0c 0202 	mla	r2, ip, r2, r0
    1a76:	3a30      	subs	r2, #48	; 0x30
    1a78:	460b      	mov	r3, r1
    1a7a:	e75d      	b.n	1938 <CONFIG_USB_DEVICE_VID+0x23>
	switch (*sp) {
    1a7c:	2a74      	cmp	r2, #116	; 0x74
    1a7e:	d025      	beq.n	1acc <CONFIG_USB_DEVICE_VID+0x1b7>
    1a80:	2a7a      	cmp	r2, #122	; 0x7a
    1a82:	d1d5      	bne.n	1a30 <CONFIG_USB_DEVICE_VID+0x11b>
		conv->length_mod = LENGTH_Z;
    1a84:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a88:	2106      	movs	r1, #6
    1a8a:	e00c      	b.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
		if (*++sp == 'h') {
    1a8c:	785a      	ldrb	r2, [r3, #1]
    1a8e:	2a68      	cmp	r2, #104	; 0x68
    1a90:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a94:	d106      	bne.n	1aa4 <CONFIG_USB_DEVICE_VID+0x18f>
			conv->length_mod = LENGTH_HH;
    1a96:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1a98:	f361 02c6 	bfi	r2, r1, #3, #4
    1a9c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1aa0:	3302      	adds	r3, #2
    1aa2:	e7c5      	b.n	1a30 <CONFIG_USB_DEVICE_VID+0x11b>
			conv->length_mod = LENGTH_H;
    1aa4:	2102      	movs	r1, #2
    1aa6:	f361 02c6 	bfi	r2, r1, #3, #4
    1aaa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1aae:	3301      	adds	r3, #1
    1ab0:	e7be      	b.n	1a30 <CONFIG_USB_DEVICE_VID+0x11b>
		if (*++sp == 'l') {
    1ab2:	785a      	ldrb	r2, [r3, #1]
    1ab4:	2a6c      	cmp	r2, #108	; 0x6c
    1ab6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1aba:	d101      	bne.n	1ac0 <CONFIG_USB_DEVICE_VID+0x1ab>
			conv->length_mod = LENGTH_LL;
    1abc:	2104      	movs	r1, #4
    1abe:	e7eb      	b.n	1a98 <CONFIG_USB_DEVICE_VID+0x183>
			conv->length_mod = LENGTH_L;
    1ac0:	2103      	movs	r1, #3
    1ac2:	e7f0      	b.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
		conv->length_mod = LENGTH_J;
    1ac4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1ac8:	2105      	movs	r1, #5
    1aca:	e7ec      	b.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
		conv->length_mod = LENGTH_T;
    1acc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1ad0:	2107      	movs	r1, #7
    1ad2:	e7e8      	b.n	1aa6 <CONFIG_USB_DEVICE_VID+0x191>
		conv->unsupported = true;
    1ad4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1ad8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1adc:	f022 0202 	bic.w	r2, r2, #2
    1ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1ae4:	f042 0202 	orr.w	r2, r2, #2
    1ae8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1aec:	e7df      	b.n	1aae <CONFIG_USB_DEVICE_VID+0x199>
	switch (conv->specifier) {
    1aee:	3b6e      	subs	r3, #110	; 0x6e
    1af0:	b2d9      	uxtb	r1, r3
    1af2:	2301      	movs	r3, #1
    1af4:	408b      	lsls	r3, r1
    1af6:	f240 4182 	movw	r1, #1154	; 0x482
    1afa:	420b      	tst	r3, r1
    1afc:	d137      	bne.n	1b6e <CONFIG_USB_DEVICE_VID+0x259>
    1afe:	f013 0f24 	tst.w	r3, #36	; 0x24
    1b02:	d151      	bne.n	1ba8 <CONFIG_USB_DEVICE_VID+0x293>
    1b04:	07d8      	lsls	r0, r3, #31
    1b06:	d55c      	bpl.n	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
		conv->specifier_cat = SPECIFIER_PTR;
    1b08:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b0c:	2103      	movs	r1, #3
    1b0e:	f361 0302 	bfi	r3, r1, #0, #3
    1b12:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b16:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1b1a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1b1e:	424b      	negs	r3, r1
    1b20:	414b      	adcs	r3, r1
    1b22:	e01a      	b.n	1b5a <CONFIG_USB_DEVICE_VID+0x245>
	switch (conv->specifier) {
    1b24:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1b28:	b2c9      	uxtb	r1, r1
    1b2a:	2001      	movs	r0, #1
    1b2c:	fa00 f101 	lsl.w	r1, r0, r1
    1b30:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1b34:	d194      	bne.n	1a60 <CONFIG_USB_DEVICE_VID+0x14b>
    1b36:	f640 0601 	movw	r6, #2049	; 0x801
    1b3a:	4231      	tst	r1, r6
    1b3c:	d11d      	bne.n	1b7a <CONFIG_USB_DEVICE_VID+0x265>
    1b3e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1b42:	d03e      	beq.n	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
		conv->specifier_cat = SPECIFIER_SINT;
    1b44:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b48:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b4c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1b50:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1b52:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b56:	d034      	beq.n	1bc2 <CONFIG_USB_DEVICE_VID+0x2ad>
	bool unsupported = false;
    1b58:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1b5a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1b5e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1b62:	430b      	orrs	r3, r1
    1b64:	f363 0241 	bfi	r2, r3, #1, #1
    1b68:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1b6c:	e6fd      	b.n	196a <CONFIG_USB_DEVICE_VID+0x55>
		conv->specifier_cat = SPECIFIER_UINT;
    1b6e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b72:	2102      	movs	r1, #2
    1b74:	f361 0302 	bfi	r3, r1, #0, #3
    1b78:	e7e8      	b.n	1b4c <CONFIG_USB_DEVICE_VID+0x237>
    1b7a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1b7e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b80:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1b84:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b88:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1b8a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1b8e:	bf02      	ittt	eq
    1b90:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1b94:	f041 0101 	orreq.w	r1, r1, #1
    1b98:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1b9c:	2b63      	cmp	r3, #99	; 0x63
    1b9e:	d1db      	bne.n	1b58 <CONFIG_USB_DEVICE_VID+0x243>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1ba0:	1e13      	subs	r3, r2, #0
    1ba2:	bf18      	it	ne
    1ba4:	2301      	movne	r3, #1
    1ba6:	e7d8      	b.n	1b5a <CONFIG_USB_DEVICE_VID+0x245>
		conv->specifier_cat = SPECIFIER_PTR;
    1ba8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1bac:	2103      	movs	r1, #3
    1bae:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1bb2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1bb6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1bba:	bf14      	ite	ne
    1bbc:	2301      	movne	r3, #1
    1bbe:	2300      	moveq	r3, #0
    1bc0:	e7cb      	b.n	1b5a <CONFIG_USB_DEVICE_VID+0x245>
		conv->invalid = true;
    1bc2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1bc6:	f043 0301 	orr.w	r3, r3, #1
    1bca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1bce:	e7c3      	b.n	1b58 <CONFIG_USB_DEVICE_VID+0x243>
		} else if (conv->width_present) {
    1bd0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1bd4:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1bd6:	bfb4      	ite	lt
    1bd8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1bdc:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1be0:	e6d5      	b.n	198e <CONFIG_USB_DEVICE_VID+0x79>
		} else if (conv->prec_present) {
    1be2:	0798      	lsls	r0, r3, #30
    1be4:	f57f aee2 	bpl.w	19ac <CONFIG_USB_DEVICE_VID+0x97>
			precision = conv->prec_value;
    1be8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1bec:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1bf0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1bf2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1bf6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1bfa:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1bfe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1c00:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1c04:	d133      	bne.n	1c6e <CONFIG_USB_DEVICE_VID+0x359>
			switch (length_mod) {
    1c06:	1ecb      	subs	r3, r1, #3
    1c08:	2b04      	cmp	r3, #4
    1c0a:	d804      	bhi.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
    1c0c:	e8df f003 	tbb	[pc, r3]
    1c10:	21464621 	.word	0x21464621
    1c14:	21          	.byte	0x21
    1c15:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1c16:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1c18:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1c1a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1c1e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1c22:	d11c      	bne.n	1c5e <CONFIG_USB_DEVICE_VID+0x349>
				value->sint = (signed char)value->sint;
    1c24:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1c28:	17da      	asrs	r2, r3, #31
    1c2a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1c2e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1c30:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c34:	f013 0603 	ands.w	r6, r3, #3
    1c38:	d050      	beq.n	1cdc <CONFIG_USB_DEVICE_VID+0x3c7>
			OUTS(sp, fp);
    1c3a:	9b03      	ldr	r3, [sp, #12]
    1c3c:	463a      	mov	r2, r7
    1c3e:	4659      	mov	r1, fp
    1c40:	4648      	mov	r0, r9
    1c42:	f007 fdfa 	bl	983a <outs>
    1c46:	2800      	cmp	r0, #0
    1c48:	f2c0 8153 	blt.w	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1c4c:	4405      	add	r5, r0
			continue;
    1c4e:	9f03      	ldr	r7, [sp, #12]
    1c50:	e5f2      	b.n	1838 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1c52:	f854 3b04 	ldr.w	r3, [r4], #4
    1c56:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1c58:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1c5c:	e7e8      	b.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
			} else if (length_mod == LENGTH_H) {
    1c5e:	2902      	cmp	r1, #2
    1c60:	d1e5      	bne.n	1c2e <CONFIG_USB_DEVICE_VID+0x319>
				value->sint = (short)value->sint;
    1c62:	b21a      	sxth	r2, r3
    1c64:	f343 33c0 	sbfx	r3, r3, #15, #1
    1c68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1c6c:	e7df      	b.n	1c2e <CONFIG_USB_DEVICE_VID+0x319>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1c6e:	2b02      	cmp	r3, #2
    1c70:	d124      	bne.n	1cbc <CONFIG_USB_DEVICE_VID+0x3a7>
			switch (length_mod) {
    1c72:	1ecb      	subs	r3, r1, #3
    1c74:	2b04      	cmp	r3, #4
    1c76:	d804      	bhi.n	1c82 <CONFIG_USB_DEVICE_VID+0x36d>
    1c78:	e8df f003 	tbb	[pc, r3]
    1c7c:	18101018 	.word	0x18101018
    1c80:	18          	.byte	0x18
    1c81:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1c82:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1c84:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1c88:	f04f 0200 	mov.w	r2, #0
    1c8c:	d014      	beq.n	1cb8 <CONFIG_USB_DEVICE_VID+0x3a3>
			} else if (length_mod == LENGTH_H) {
    1c8e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1c90:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1c94:	d1cc      	bne.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
				value->uint = (unsigned short)value->uint;
    1c96:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1c98:	930e      	str	r3, [sp, #56]	; 0x38
    1c9a:	e7c9      	b.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
					(uint_value_type)va_arg(ap,
    1c9c:	3407      	adds	r4, #7
    1c9e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1ca2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1ca6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1caa:	e7c1      	b.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
					(uint_value_type)va_arg(ap, size_t);
    1cac:	f854 3b04 	ldr.w	r3, [r4], #4
    1cb0:	930e      	str	r3, [sp, #56]	; 0x38
    1cb2:	2300      	movs	r3, #0
    1cb4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1cb6:	e7bb      	b.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
				value->uint = (unsigned char)value->uint;
    1cb8:	b2db      	uxtb	r3, r3
    1cba:	e7cd      	b.n	1c58 <CONFIG_USB_DEVICE_VID+0x343>
		} else if (specifier_cat == SPECIFIER_FP) {
    1cbc:	2b04      	cmp	r3, #4
    1cbe:	d108      	bne.n	1cd2 <CONFIG_USB_DEVICE_VID+0x3bd>
					(sint_value_type)va_arg(ap, long long);
    1cc0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1cc2:	f024 0407 	bic.w	r4, r4, #7
    1cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
    1cca:	3408      	adds	r4, #8
    1ccc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1cd0:	e7ae      	b.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1cd2:	2b03      	cmp	r3, #3
    1cd4:	d1ac      	bne.n	1c30 <CONFIG_USB_DEVICE_VID+0x31b>
			value->ptr = va_arg(ap, void *);
    1cd6:	f854 3b04 	ldr.w	r3, [r4], #4
    1cda:	e7dd      	b.n	1c98 <CONFIG_USB_DEVICE_VID+0x383>
		switch (conv->specifier) {
    1cdc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1ce0:	2878      	cmp	r0, #120	; 0x78
    1ce2:	d8b4      	bhi.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
    1ce4:	2862      	cmp	r0, #98	; 0x62
    1ce6:	d81c      	bhi.n	1d22 <CONFIG_USB_DEVICE_VID+0x40d>
    1ce8:	2825      	cmp	r0, #37	; 0x25
    1cea:	f43f adad 	beq.w	1848 <z_cbvprintf_impl+0x20>
    1cee:	2858      	cmp	r0, #88	; 0x58
    1cf0:	d1ad      	bne.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1cf2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cf6:	9300      	str	r3, [sp, #0]
    1cf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1cfc:	ab08      	add	r3, sp, #32
    1cfe:	aa10      	add	r2, sp, #64	; 0x40
    1d00:	f007 fd55 	bl	97ae <encode_uint>
			if (precision >= 0) {
    1d04:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1d08:	4607      	mov	r7, r0
			if (precision >= 0) {
    1d0a:	f280 809a 	bge.w	1e42 <CONFIG_USB_DEVICE_VID+0x52d>
		if (bps == NULL) {
    1d0e:	2f00      	cmp	r7, #0
    1d10:	d09d      	beq.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		size_t nj_len = (bpe - bps);
    1d12:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1d16:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1d18:	2e00      	cmp	r6, #0
    1d1a:	f000 80c1 	beq.w	1ea0 <CONFIG_USB_DEVICE_VID+0x58b>
			nj_len += 1U;
    1d1e:	3001      	adds	r0, #1
    1d20:	e0be      	b.n	1ea0 <CONFIG_USB_DEVICE_VID+0x58b>
		switch (conv->specifier) {
    1d22:	3863      	subs	r0, #99	; 0x63
    1d24:	2815      	cmp	r0, #21
    1d26:	d892      	bhi.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
    1d28:	a201      	add	r2, pc, #4	; (adr r2, 1d30 <CONFIG_USB_DEVICE_VID+0x41b>)
    1d2a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1d2e:	bf00      	nop
    1d30:	00001e05 	.word	0x00001e05
    1d34:	00001e17 	.word	0x00001e17
    1d38:	00001c4f 	.word	0x00001c4f
    1d3c:	00001c4f 	.word	0x00001c4f
    1d40:	00001c4f 	.word	0x00001c4f
    1d44:	00001c4f 	.word	0x00001c4f
    1d48:	00001e17 	.word	0x00001e17
    1d4c:	00001c4f 	.word	0x00001c4f
    1d50:	00001c4f 	.word	0x00001c4f
    1d54:	00001c4f 	.word	0x00001c4f
    1d58:	00001c4f 	.word	0x00001c4f
    1d5c:	00001ea5 	.word	0x00001ea5
    1d60:	00001e3d 	.word	0x00001e3d
    1d64:	00001e63 	.word	0x00001e63
    1d68:	00001c4f 	.word	0x00001c4f
    1d6c:	00001c4f 	.word	0x00001c4f
    1d70:	00001d89 	.word	0x00001d89
    1d74:	00001c4f 	.word	0x00001c4f
    1d78:	00001e3d 	.word	0x00001e3d
    1d7c:	00001c4f 	.word	0x00001c4f
    1d80:	00001c4f 	.word	0x00001c4f
    1d84:	00001e3d 	.word	0x00001e3d
			if (precision >= 0) {
    1d88:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1d8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1d8e:	db35      	blt.n	1dfc <CONFIG_USB_DEVICE_VID+0x4e7>
				len = strnlen(bps, precision);
    1d90:	4651      	mov	r1, sl
    1d92:	4638      	mov	r0, r7
    1d94:	f007 ffa0 	bl	9cd8 <strnlen>
			bpe = bps + len;
    1d98:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1d9c:	2f00      	cmp	r7, #0
    1d9e:	f43f af56 	beq.w	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		char sign = 0;
    1da2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1da4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1da8:	f013 0210 	ands.w	r2, r3, #16
    1dac:	9205      	str	r2, [sp, #20]
    1dae:	f000 8093 	beq.w	1ed8 <CONFIG_USB_DEVICE_VID+0x5c3>
			nj_len += 2U;
    1db2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1db4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1db6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1db8:	bf48      	it	mi
    1dba:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1dbc:	9204      	str	r2, [sp, #16]
    1dbe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1dc0:	bf48      	it	mi
    1dc2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1dc4:	f1b8 0f00 	cmp.w	r8, #0
    1dc8:	f340 80a0 	ble.w	1f0c <CONFIG_USB_DEVICE_VID+0x5f7>
			if (!conv->flag_dash) {
    1dcc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1dd0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1dd4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1dd8:	0750      	lsls	r0, r2, #29
    1dda:	9306      	str	r3, [sp, #24]
    1ddc:	f100 8096 	bmi.w	1f0c <CONFIG_USB_DEVICE_VID+0x5f7>
				if (conv->flag_zero) {
    1de0:	0651      	lsls	r1, r2, #25
    1de2:	f140 8089 	bpl.w	1ef8 <CONFIG_USB_DEVICE_VID+0x5e3>
					if (sign != 0) {
    1de6:	b13e      	cbz	r6, 1df8 <CONFIG_USB_DEVICE_VID+0x4e3>
						OUTC(sign);
    1de8:	4659      	mov	r1, fp
    1dea:	4630      	mov	r0, r6
    1dec:	47c8      	blx	r9
    1dee:	2800      	cmp	r0, #0
    1df0:	db7f      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1df2:	9b06      	ldr	r3, [sp, #24]
    1df4:	3501      	adds	r5, #1
    1df6:	461e      	mov	r6, r3
					pad = '0';
    1df8:	2230      	movs	r2, #48	; 0x30
    1dfa:	e07e      	b.n	1efa <CONFIG_USB_DEVICE_VID+0x5e5>
				len = strlen(bps);
    1dfc:	4638      	mov	r0, r7
    1dfe:	f007 ff64 	bl	9cca <strlen>
    1e02:	e7c9      	b.n	1d98 <CONFIG_USB_DEVICE_VID+0x483>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e06:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1e0a:	2600      	movs	r6, #0
			bps = buf;
    1e0c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1e0e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1e12:	2001      	movs	r0, #1
    1e14:	e7c6      	b.n	1da4 <CONFIG_USB_DEVICE_VID+0x48f>
			if (conv->flag_plus) {
    1e16:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1e18:	bf5c      	itt	pl
    1e1a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1e1e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1e20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1e24:	bf48      	it	mi
    1e26:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1e28:	2b00      	cmp	r3, #0
    1e2a:	f6bf af62 	bge.w	1cf2 <CONFIG_USB_DEVICE_VID+0x3dd>
				value->uint = (uint_value_type)-sint;
    1e2e:	4252      	negs	r2, r2
    1e30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1e38:	262d      	movs	r6, #45	; 0x2d
    1e3a:	e75a      	b.n	1cf2 <CONFIG_USB_DEVICE_VID+0x3dd>
		switch (conv->specifier) {
    1e3c:	2600      	movs	r6, #0
    1e3e:	e758      	b.n	1cf2 <CONFIG_USB_DEVICE_VID+0x3dd>
		char sign = 0;
    1e40:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1e42:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1e46:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e4a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1e4c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1e50:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1e52:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1e56:	f67f af5a 	bls.w	1d0e <CONFIG_USB_DEVICE_VID+0x3f9>
					conv->pad0_value = precision - (int)len;
    1e5a:	ebaa 0303 	sub.w	r3, sl, r3
    1e5e:	9311      	str	r3, [sp, #68]	; 0x44
    1e60:	e755      	b.n	1d0e <CONFIG_USB_DEVICE_VID+0x3f9>
			if (value->ptr != NULL) {
    1e62:	980e      	ldr	r0, [sp, #56]	; 0x38
    1e64:	b390      	cbz	r0, 1ecc <CONFIG_USB_DEVICE_VID+0x5b7>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e6a:	9300      	str	r3, [sp, #0]
    1e6c:	aa10      	add	r2, sp, #64	; 0x40
    1e6e:	ab08      	add	r3, sp, #32
    1e70:	2100      	movs	r1, #0
    1e72:	f007 fc9c 	bl	97ae <encode_uint>
				conv->altform_0c = true;
    1e76:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1e7a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1e7e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1e82:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1e86:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e8a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1e8c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1e90:	dad6      	bge.n	1e40 <CONFIG_USB_DEVICE_VID+0x52b>
		if (bps == NULL) {
    1e92:	2800      	cmp	r0, #0
    1e94:	f43f aedb 	beq.w	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		size_t nj_len = (bpe - bps);
    1e98:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e9c:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1e9e:	2600      	movs	r6, #0
    1ea0:	469a      	mov	sl, r3
    1ea2:	e77f      	b.n	1da4 <CONFIG_USB_DEVICE_VID+0x48f>
				store_count(conv, value->ptr, count);
    1ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1ea6:	2907      	cmp	r1, #7
    1ea8:	f63f aed1 	bhi.w	1c4e <CONFIG_USB_DEVICE_VID+0x339>
    1eac:	e8df f001 	tbb	[pc, r1]
    1eb0:	0c06040c 	.word	0x0c06040c
    1eb4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1eb8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1eba:	e6c8      	b.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		*(short *)dp = (short)count;
    1ebc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1ebe:	e6c6      	b.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		*(intmax_t *)dp = (intmax_t)count;
    1ec0:	17ea      	asrs	r2, r5, #31
    1ec2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1ec6:	e6c2      	b.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1ec8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1eca:	e6c0      	b.n	1c4e <CONFIG_USB_DEVICE_VID+0x339>
    1ecc:	4f2e      	ldr	r7, [pc, #184]	; (1f88 <CONFIG_USB_DEVICE_VID+0x673>)
		char sign = 0;
    1ece:	4606      	mov	r6, r0
			bpe = bps + 5;
    1ed0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1ed4:	2005      	movs	r0, #5
    1ed6:	e765      	b.n	1da4 <CONFIG_USB_DEVICE_VID+0x48f>
		} else if (conv->altform_0) {
    1ed8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1eda:	bf48      	it	mi
    1edc:	3001      	addmi	r0, #1
    1ede:	e769      	b.n	1db4 <CONFIG_USB_DEVICE_VID+0x49f>
    1ee0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1ee2:	4610      	mov	r0, r2
    1ee4:	9206      	str	r2, [sp, #24]
    1ee6:	4659      	mov	r1, fp
    1ee8:	47c8      	blx	r9
    1eea:	2800      	cmp	r0, #0
    1eec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1ef0:	da04      	bge.n	1efc <CONFIG_USB_DEVICE_VID+0x5e7>
#undef OUTS
#undef OUTC
}
    1ef2:	b015      	add	sp, #84	; 0x54
    1ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1ef8:	2220      	movs	r2, #32
					pad = '0';
    1efa:	4643      	mov	r3, r8
				while (width-- > 0) {
    1efc:	4619      	mov	r1, r3
    1efe:	2900      	cmp	r1, #0
    1f00:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1f04:	dcec      	bgt.n	1ee0 <CONFIG_USB_DEVICE_VID+0x5cb>
    1f06:	4445      	add	r5, r8
    1f08:	1a6d      	subs	r5, r5, r1
    1f0a:	4698      	mov	r8, r3
		if (sign != 0) {
    1f0c:	b12e      	cbz	r6, 1f1a <CONFIG_USB_DEVICE_VID+0x605>
			OUTC(sign);
    1f0e:	4659      	mov	r1, fp
    1f10:	4630      	mov	r0, r6
    1f12:	47c8      	blx	r9
    1f14:	2800      	cmp	r0, #0
    1f16:	dbec      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f18:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1f1a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1f1e:	06da      	lsls	r2, r3, #27
    1f20:	d401      	bmi.n	1f26 <CONFIG_USB_DEVICE_VID+0x611>
    1f22:	071b      	lsls	r3, r3, #28
    1f24:	d505      	bpl.n	1f32 <CONFIG_USB_DEVICE_VID+0x61d>
				OUTC('0');
    1f26:	4659      	mov	r1, fp
    1f28:	2030      	movs	r0, #48	; 0x30
    1f2a:	47c8      	blx	r9
    1f2c:	2800      	cmp	r0, #0
    1f2e:	dbe0      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f30:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1f32:	9b05      	ldr	r3, [sp, #20]
    1f34:	b133      	cbz	r3, 1f44 <CONFIG_USB_DEVICE_VID+0x62f>
				OUTC(conv->specifier);
    1f36:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1f3a:	4659      	mov	r1, fp
    1f3c:	47c8      	blx	r9
    1f3e:	2800      	cmp	r0, #0
    1f40:	dbd7      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f42:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f44:	9e04      	ldr	r6, [sp, #16]
    1f46:	442e      	add	r6, r5
    1f48:	e005      	b.n	1f56 <CONFIG_USB_DEVICE_VID+0x641>
				OUTC('0');
    1f4a:	4659      	mov	r1, fp
    1f4c:	2030      	movs	r0, #48	; 0x30
    1f4e:	47c8      	blx	r9
    1f50:	2800      	cmp	r0, #0
    1f52:	dbce      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f54:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f56:	1b73      	subs	r3, r6, r5
    1f58:	2b00      	cmp	r3, #0
    1f5a:	dcf6      	bgt.n	1f4a <CONFIG_USB_DEVICE_VID+0x635>
			OUTS(bps, bpe);
    1f5c:	4653      	mov	r3, sl
    1f5e:	463a      	mov	r2, r7
    1f60:	4659      	mov	r1, fp
    1f62:	4648      	mov	r0, r9
    1f64:	f007 fc69 	bl	983a <outs>
    1f68:	2800      	cmp	r0, #0
    1f6a:	dbc2      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f6c:	4405      	add	r5, r0
		while (width > 0) {
    1f6e:	44a8      	add	r8, r5
    1f70:	eba8 0305 	sub.w	r3, r8, r5
    1f74:	2b00      	cmp	r3, #0
    1f76:	f77f ae6a 	ble.w	1c4e <CONFIG_USB_DEVICE_VID+0x339>
			OUTC(' ');
    1f7a:	4659      	mov	r1, fp
    1f7c:	2020      	movs	r0, #32
    1f7e:	47c8      	blx	r9
    1f80:	2800      	cmp	r0, #0
    1f82:	dbb6      	blt.n	1ef2 <CONFIG_USB_DEVICE_VID+0x5dd>
    1f84:	3501      	adds	r5, #1
			--width;
    1f86:	e7f3      	b.n	1f70 <CONFIG_USB_DEVICE_VID+0x65b>
    1f88:	0000b2b4 	.word	0x0000b2b4

00001f8c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1f8c:	b508      	push	{r3, lr}
    1f8e:	4604      	mov	r4, r0
	__asm__ volatile(
    1f90:	f04f 0220 	mov.w	r2, #32
    1f94:	f3ef 8311 	mrs	r3, BASEPRI
    1f98:	f382 8812 	msr	BASEPRI_MAX, r2
    1f9c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1fa0:	f003 fc6a 	bl	5878 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1fa4:	4620      	mov	r0, r4
    1fa6:	f001 ff21 	bl	3dec <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1faa:	4803      	ldr	r0, [pc, #12]	; (1fb8 <sys_reboot+0x2c>)
    1fac:	f007 f8ee 	bl	918c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1fb0:	f001 fb0a 	bl	35c8 <arch_cpu_idle>
    1fb4:	e7fc      	b.n	1fb0 <sys_reboot+0x24>
    1fb6:	bf00      	nop
    1fb8:	0000b2ba 	.word	0x0000b2ba

00001fbc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1fbc:	f003 bc8e 	b.w	58dc <SystemInit>

00001fc0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fc4:	4605      	mov	r5, r0
    1fc6:	f04f 0320 	mov.w	r3, #32
    1fca:	f3ef 8611 	mrs	r6, BASEPRI
    1fce:	f383 8812 	msr	BASEPRI_MAX, r3
    1fd2:	f3bf 8f6f 	isb	sy
	return list->head;
    1fd6:	4b0e      	ldr	r3, [pc, #56]	; (2010 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1fd8:	4f0e      	ldr	r7, [pc, #56]	; (2014 <pm_state_notify+0x54>)
    1fda:	681c      	ldr	r4, [r3, #0]
    1fdc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2018 <pm_state_notify+0x58>
    1fe0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1fe4:	b92c      	cbnz	r4, 1ff2 <pm_state_notify+0x32>
	__asm__ volatile(
    1fe6:	f386 8811 	msr	BASEPRI, r6
    1fea:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1ff2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1ff6:	2d00      	cmp	r5, #0
    1ff8:	bf18      	it	ne
    1ffa:	4613      	movne	r3, r2
		if (callback) {
    1ffc:	b12b      	cbz	r3, 200a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1ffe:	f898 2010 	ldrb.w	r2, [r8, #16]
    2002:	fb09 f202 	mul.w	r2, r9, r2
    2006:	5cb8      	ldrb	r0, [r7, r2]
    2008:	4798      	blx	r3
	return node->next;
    200a:	6824      	ldr	r4, [r4, #0]
    200c:	e7ea      	b.n	1fe4 <pm_state_notify+0x24>
    200e:	bf00      	nop
    2010:	200007dc 	.word	0x200007dc
    2014:	200007d0 	.word	0x200007d0
    2018:	20001ad4 	.word	0x20001ad4

0000201c <pm_system_resume>:

void pm_system_resume(void)
{
    201c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    201e:	4b19      	ldr	r3, [pc, #100]	; (2084 <pm_system_resume+0x68>)
    2020:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2022:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2026:	f004 031f 	and.w	r3, r4, #31
    202a:	2201      	movs	r2, #1
    202c:	409a      	lsls	r2, r3
    202e:	4b16      	ldr	r3, [pc, #88]	; (2088 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2030:	0961      	lsrs	r1, r4, #5
    2032:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2036:	43d0      	mvns	r0, r2
    2038:	e853 1f00 	ldrex	r1, [r3]
    203c:	ea01 0500 	and.w	r5, r1, r0
    2040:	e843 5600 	strex	r6, r5, [r3]
    2044:	2e00      	cmp	r6, #0
    2046:	d1f7      	bne.n	2038 <pm_system_resume+0x1c>
    2048:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    204c:	420a      	tst	r2, r1
    204e:	d013      	beq.n	2078 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2050:	4b0e      	ldr	r3, [pc, #56]	; (208c <pm_system_resume+0x70>)
    2052:	4d0f      	ldr	r5, [pc, #60]	; (2090 <pm_system_resume+0x74>)
    2054:	b18b      	cbz	r3, 207a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2056:	230c      	movs	r3, #12
    2058:	4363      	muls	r3, r4
    205a:	18ea      	adds	r2, r5, r3
    205c:	5ce8      	ldrb	r0, [r5, r3]
    205e:	7851      	ldrb	r1, [r2, #1]
    2060:	f007 fe72 	bl	9d48 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2064:	2000      	movs	r0, #0
    2066:	f7ff ffab 	bl	1fc0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    206a:	230c      	movs	r3, #12
    206c:	435c      	muls	r4, r3
    206e:	192a      	adds	r2, r5, r4
    2070:	2300      	movs	r3, #0
    2072:	512b      	str	r3, [r5, r4]
    2074:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2078:	bd70      	pop	{r4, r5, r6, pc}
    207a:	f383 8811 	msr	BASEPRI, r3
    207e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2082:	e7ef      	b.n	2064 <pm_system_resume+0x48>
    2084:	20001ad4 	.word	0x20001ad4
    2088:	200007e4 	.word	0x200007e4
    208c:	00009d49 	.word	0x00009d49
    2090:	200007d0 	.word	0x200007d0

00002094 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2098:	4b35      	ldr	r3, [pc, #212]	; (2170 <pm_system_suspend+0xdc>)
{
    209a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    209c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    209e:	f04f 0320 	mov.w	r3, #32
    20a2:	f3ef 8811 	mrs	r8, BASEPRI
    20a6:	f383 8812 	msr	BASEPRI_MAX, r3
    20aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    20ae:	240c      	movs	r4, #12
    20b0:	4b30      	ldr	r3, [pc, #192]	; (2174 <pm_system_suspend+0xe0>)
    20b2:	4e31      	ldr	r6, [pc, #196]	; (2178 <pm_system_suspend+0xe4>)
    20b4:	436c      	muls	r4, r5
    20b6:	191a      	adds	r2, r3, r4
    20b8:	5d19      	ldrb	r1, [r3, r4]
    20ba:	2900      	cmp	r1, #0
    20bc:	d04c      	beq.n	2158 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    20be:	ca07      	ldmia	r2, {r0, r1, r2}
    20c0:	eb06 0c04 	add.w	ip, r6, r4
    20c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    20c8:	2200      	movs	r2, #0
    20ca:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    20cc:	f388 8811 	msr	BASEPRI, r8
    20d0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    20d4:	230c      	movs	r3, #12
    20d6:	436b      	muls	r3, r5
    20d8:	18f2      	adds	r2, r6, r3
    20da:	5cf0      	ldrb	r0, [r6, r3]
    20dc:	2800      	cmp	r0, #0
    20de:	d039      	beq.n	2154 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    20e0:	1c7b      	adds	r3, r7, #1
    20e2:	d010      	beq.n	2106 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    20e4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    20e8:	4c24      	ldr	r4, [pc, #144]	; (217c <pm_system_suspend+0xe8>)
    20ea:	4a25      	ldr	r2, [pc, #148]	; (2180 <pm_system_suspend+0xec>)
    20ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    20f0:	2100      	movs	r1, #0
    20f2:	fbec 4100 	umlal	r4, r1, ip, r0
    20f6:	2300      	movs	r3, #0
    20f8:	4620      	mov	r0, r4
    20fa:	f7ff f801 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    20fe:	2101      	movs	r1, #1
    2100:	1a38      	subs	r0, r7, r0
    2102:	f003 fb7d 	bl	5800 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2106:	f006 fb3d 	bl	8784 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    210a:	2001      	movs	r0, #1
    210c:	f7ff ff58 	bl	1fc0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2110:	f3bf 8f5b 	dmb	ish
    2114:	4b1b      	ldr	r3, [pc, #108]	; (2184 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2116:	096a      	lsrs	r2, r5, #5
    2118:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    211c:	f005 011f 	and.w	r1, r5, #31
    2120:	2201      	movs	r2, #1
    2122:	408a      	lsls	r2, r1
    2124:	e853 0f00 	ldrex	r0, [r3]
    2128:	4310      	orrs	r0, r2
    212a:	e843 0100 	strex	r1, r0, [r3]
    212e:	2900      	cmp	r1, #0
    2130:	d1f8      	bne.n	2124 <pm_system_suspend+0x90>
    2132:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2136:	4b14      	ldr	r3, [pc, #80]	; (2188 <pm_system_suspend+0xf4>)
    2138:	b13b      	cbz	r3, 214a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    213a:	230c      	movs	r3, #12
    213c:	fb03 f005 	mul.w	r0, r3, r5
    2140:	1833      	adds	r3, r6, r0
    2142:	5c30      	ldrb	r0, [r6, r0]
    2144:	7859      	ldrb	r1, [r3, #1]
    2146:	f007 fdf3 	bl	9d30 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    214a:	f7ff ff67 	bl	201c <pm_system_resume>
	k_sched_unlock();
    214e:	f006 fb2d 	bl	87ac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2152:	2001      	movs	r0, #1
}
    2154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2158:	4601      	mov	r1, r0
    215a:	4628      	mov	r0, r5
    215c:	f000 f816 	bl	218c <pm_policy_next_state>
		if (info != NULL) {
    2160:	2800      	cmp	r0, #0
    2162:	d0b3      	beq.n	20cc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2164:	c807      	ldmia	r0, {r0, r1, r2}
    2166:	4434      	add	r4, r6
    2168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    216c:	e7ae      	b.n	20cc <pm_system_suspend+0x38>
    216e:	bf00      	nop
    2170:	20001ad4 	.word	0x20001ad4
    2174:	200007c4 	.word	0x200007c4
    2178:	200007d0 	.word	0x200007d0
    217c:	000f423f 	.word	0x000f423f
    2180:	000f4240 	.word	0x000f4240
    2184:	200007e4 	.word	0x200007e4
    2188:	00009d31 	.word	0x00009d31

0000218c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	b085      	sub	sp, #20
    2192:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2194:	a903      	add	r1, sp, #12
    2196:	f000 f843 	bl	2220 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    219a:	4b1e      	ldr	r3, [pc, #120]	; (2214 <pm_policy_next_state+0x88>)
    219c:	9d03      	ldr	r5, [sp, #12]
    219e:	f8d3 a000 	ldr.w	sl, [r3]
    21a2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2218 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    21a6:	1e43      	subs	r3, r0, #1
    21a8:	b21b      	sxth	r3, r3
    21aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    21ae:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    21b0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    21b4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    21b8:	f04f 0b00 	mov.w	fp, #0
    21bc:	b924      	cbnz	r4, 21c8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    21be:	46a1      	mov	r9, r4
}
    21c0:	4648      	mov	r0, r9
    21c2:	b005      	add	sp, #20
    21c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21c8:	6868      	ldr	r0, [r5, #4]
    21ca:	4a14      	ldr	r2, [pc, #80]	; (221c <pm_policy_next_state+0x90>)
    21cc:	46c4      	mov	ip, r8
    21ce:	4659      	mov	r1, fp
    21d0:	fbe0 c107 	umlal	ip, r1, r0, r7
    21d4:	2300      	movs	r3, #0
    21d6:	4660      	mov	r0, ip
    21d8:	f7fe ff92 	bl	1100 <__aeabi_uldivmod>
    21dc:	9001      	str	r0, [sp, #4]
    21de:	68a8      	ldr	r0, [r5, #8]
    21e0:	4a0e      	ldr	r2, [pc, #56]	; (221c <pm_policy_next_state+0x90>)
    21e2:	46c4      	mov	ip, r8
    21e4:	4659      	mov	r1, fp
    21e6:	fbe0 c107 	umlal	ip, r1, r0, r7
    21ea:	2300      	movs	r3, #0
    21ec:	4660      	mov	r0, ip
    21ee:	f7fe ff87 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    21f2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    21f6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    21f8:	d001      	beq.n	21fe <pm_policy_next_state+0x72>
    21fa:	4582      	cmp	sl, r0
    21fc:	d905      	bls.n	220a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    21fe:	1c73      	adds	r3, r6, #1
    2200:	d0de      	beq.n	21c0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2202:	9b01      	ldr	r3, [sp, #4]
    2204:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2206:	42b0      	cmp	r0, r6
    2208:	d9da      	bls.n	21c0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    220a:	3c01      	subs	r4, #1
    220c:	b2a4      	uxth	r4, r4
    220e:	3d0c      	subs	r5, #12
    2210:	e7d4      	b.n	21bc <pm_policy_next_state+0x30>
    2212:	bf00      	nop
    2214:	200000b4 	.word	0x200000b4
    2218:	000f423f 	.word	0x000f423f
    221c:	000f4240 	.word	0x000f4240

00002220 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2220:	b908      	cbnz	r0, 2226 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2222:	4b02      	ldr	r3, [pc, #8]	; (222c <pm_state_cpu_get_all+0xc>)
    2224:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2226:	2000      	movs	r0, #0
    2228:	4770      	bx	lr
    222a:	bf00      	nop
    222c:	0000af1c 	.word	0x0000af1c

00002230 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2230:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2232:	4b0c      	ldr	r3, [pc, #48]	; (2264 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2234:	4e0c      	ldr	r6, [pc, #48]	; (2268 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2236:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <class_handler+0x3c>)
    223a:	42b3      	cmp	r3, r6
    223c:	d303      	bcc.n	2246 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    223e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2242:	bcf0      	pop	{r4, r5, r6, r7}
    2244:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2246:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2248:	42bd      	cmp	r5, r7
    224a:	d309      	bcc.n	2260 <class_handler+0x30>
		if (iface->class_handler &&
    224c:	691c      	ldr	r4, [r3, #16]
    224e:	b13c      	cbz	r4, 2260 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2250:	f895 c002 	ldrb.w	ip, [r5, #2]
    2254:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2256:	45ac      	cmp	ip, r5
    2258:	d102      	bne.n	2260 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    225a:	4623      	mov	r3, r4
}
    225c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    225e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2260:	3324      	adds	r3, #36	; 0x24
    2262:	e7ea      	b.n	223a <class_handler+0xa>
    2264:	200007e8 	.word	0x200007e8
    2268:	2000041c 	.word	0x2000041c
    226c:	200003d4 	.word	0x200003d4

00002270 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2274:	4c13      	ldr	r4, [pc, #76]	; (22c4 <custom_handler+0x54>)
    2276:	f8df 8050 	ldr.w	r8, [pc, #80]	; 22c8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    227a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 22cc <custom_handler+0x5c>
{
    227e:	4605      	mov	r5, r0
    2280:	460e      	mov	r6, r1
    2282:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2284:	4544      	cmp	r4, r8
    2286:	d303      	bcc.n	2290 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2288:	f06f 0085 	mvn.w	r0, #133	; 0x85
    228c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2290:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2292:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2296:	429a      	cmp	r2, r3
    2298:	d312      	bcc.n	22c0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    229a:	69a3      	ldr	r3, [r4, #24]
    229c:	b183      	cbz	r3, 22c0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    229e:	7890      	ldrb	r0, [r2, #2]
    22a0:	7929      	ldrb	r1, [r5, #4]
    22a2:	4288      	cmp	r0, r1
    22a4:	d105      	bne.n	22b2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    22a6:	463a      	mov	r2, r7
    22a8:	4631      	mov	r1, r6
    22aa:	4628      	mov	r0, r5
}
    22ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    22b0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    22b2:	7952      	ldrb	r2, [r2, #5]
    22b4:	2a01      	cmp	r2, #1
    22b6:	d103      	bne.n	22c0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    22b8:	463a      	mov	r2, r7
    22ba:	4631      	mov	r1, r6
    22bc:	4628      	mov	r0, r5
    22be:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22c0:	3424      	adds	r4, #36	; 0x24
    22c2:	e7df      	b.n	2284 <custom_handler+0x14>
    22c4:	200003d4 	.word	0x200003d4
    22c8:	2000041c 	.word	0x2000041c
    22cc:	200007e8 	.word	0x200007e8

000022d0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    22d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22d4:	4c0b      	ldr	r4, [pc, #44]	; (2304 <vendor_handler+0x34>)
    22d6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2308 <vendor_handler+0x38>
{
    22da:	4605      	mov	r5, r0
    22dc:	460e      	mov	r6, r1
    22de:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22e0:	4544      	cmp	r4, r8
    22e2:	d302      	bcc.n	22ea <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    22e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    22e8:	e009      	b.n	22fe <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    22ea:	6963      	ldr	r3, [r4, #20]
    22ec:	b90b      	cbnz	r3, 22f2 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22ee:	3424      	adds	r4, #36	; 0x24
    22f0:	e7f6      	b.n	22e0 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    22f2:	463a      	mov	r2, r7
    22f4:	4631      	mov	r1, r6
    22f6:	4628      	mov	r0, r5
    22f8:	4798      	blx	r3
    22fa:	2800      	cmp	r0, #0
    22fc:	d1f7      	bne.n	22ee <vendor_handler+0x1e>
}
    22fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2302:	bf00      	nop
    2304:	200003d4 	.word	0x200003d4
    2308:	2000041c 	.word	0x2000041c

0000230c <disable_endpoint>:
{
    230c:	b510      	push	{r4, lr}
    230e:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    2310:	f007 fd6d 	bl	9dee <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2314:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2318:	d000      	beq.n	231c <disable_endpoint+0x10>
	} else if (ret) {
    231a:	b950      	cbnz	r0, 2332 <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
    231c:	4a05      	ldr	r2, [pc, #20]	; (2334 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
    231e:	4620      	mov	r0, r4
    2320:	f007 fb4b 	bl	99ba <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2324:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2328:	ea23 0300 	bic.w	r3, r3, r0
    232c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2330:	2000      	movs	r0, #0
}
    2332:	bd10      	pop	{r4, pc}
    2334:	200007e8 	.word	0x200007e8

00002338 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2338:	4802      	ldr	r0, [pc, #8]	; (2344 <usb_reset_alt_setting+0xc>)
    233a:	2208      	movs	r2, #8
    233c:	2100      	movs	r1, #0
    233e:	f007 bceb 	b.w	9d18 <memset>
    2342:	bf00      	nop
    2344:	200008a3 	.word	0x200008a3

00002348 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    2348:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    234a:	4b0b      	ldr	r3, [pc, #44]	; (2378 <is_ep_valid.part.0+0x30>)
    234c:	4c0b      	ldr	r4, [pc, #44]	; (237c <is_ep_valid.part.0+0x34>)
    234e:	42a3      	cmp	r3, r4
    2350:	d301      	bcc.n	2356 <is_ep_valid.part.0+0xe>
	return false;
    2352:	2000      	movs	r0, #0
}
    2354:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    2356:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2358:	7f1e      	ldrb	r6, [r3, #28]
    235a:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    235c:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    235e:	b2d5      	uxtb	r5, r2
    2360:	42ae      	cmp	r6, r5
    2362:	d801      	bhi.n	2368 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2364:	3324      	adds	r3, #36	; 0x24
    2366:	e7f2      	b.n	234e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    2368:	3201      	adds	r2, #1
    236a:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    236e:	4285      	cmp	r5, r0
    2370:	d1f5      	bne.n	235e <is_ep_valid.part.0+0x16>
		return true;
    2372:	2001      	movs	r0, #1
    2374:	e7ee      	b.n	2354 <is_ep_valid.part.0+0xc>
    2376:	bf00      	nop
    2378:	200003d4 	.word	0x200003d4
    237c:	2000041c 	.word	0x2000041c

00002380 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    2380:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    2382:	4809      	ldr	r0, [pc, #36]	; (23a8 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    2384:	7803      	ldrb	r3, [r0, #0]
    2386:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    238a:	330a      	adds	r3, #10
    238c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    2390:	b13b      	cbz	r3, 23a2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    2392:	f100 0208 	add.w	r2, r0, #8
    2396:	f100 0110 	add.w	r1, r0, #16
    239a:	4798      	blx	r3
    239c:	43c0      	mvns	r0, r0
    239e:	0fc0      	lsrs	r0, r0, #31
}
    23a0:	bd08      	pop	{r3, pc}
		return false;
    23a2:	4618      	mov	r0, r3
    23a4:	e7fc      	b.n	23a0 <usb_handle_request.constprop.0+0x20>
    23a6:	bf00      	nop
    23a8:	200007e8 	.word	0x200007e8

000023ac <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    23ac:	2804      	cmp	r0, #4
{
    23ae:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 244c <forward_status_cb+0xa0>
    23b6:	4604      	mov	r4, r0
    23b8:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    23ba:	d016      	beq.n	23ea <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    23bc:	2801      	cmp	r0, #1
    23be:	d12d      	bne.n	241c <forward_status_cb+0x70>
		if (usb_dev.configured) {
    23c0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2450 <forward_status_cb+0xa4>
    23c4:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    23c8:	b343      	cbz	r3, 241c <forward_status_cb+0x70>
			usb_cancel_transfers();
    23ca:	f000 fddf 	bl	2f8c <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23ce:	4d21      	ldr	r5, [pc, #132]	; (2454 <forward_status_cb+0xa8>)
    23d0:	454d      	cmp	r5, r9
    23d2:	d220      	bcs.n	2416 <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
    23d4:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23d8:	f04f 0a00 	mov.w	sl, #0
    23dc:	7f2b      	ldrb	r3, [r5, #28]
    23de:	fa5f f68a 	uxtb.w	r6, sl
    23e2:	42b3      	cmp	r3, r6
    23e4:	d804      	bhi.n	23f0 <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23e6:	3524      	adds	r5, #36	; 0x24
    23e8:	e7f2      	b.n	23d0 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    23ea:	f7ff ffa5 	bl	2338 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    23ee:	e7e7      	b.n	23c0 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    23f0:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
    23f4:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    23f8:	7930      	ldrb	r0, [r6, #4]
    23fa:	f007 fcf8 	bl	9dee <usb_dc_ep_disable>
    23fe:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2400:	7930      	ldrb	r0, [r6, #4]
    2402:	f007 fada 	bl	99ba <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2406:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    240a:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    240c:	ea23 0300 	bic.w	r3, r3, r0
    2410:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2414:	dae2      	bge.n	23dc <forward_status_cb+0x30>
			usb_dev.configured = false;
    2416:	2300      	movs	r3, #0
    2418:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    241c:	4d0d      	ldr	r5, [pc, #52]	; (2454 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    241e:	454d      	cmp	r5, r9
    2420:	d308      	bcc.n	2434 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
    2422:	4b0b      	ldr	r3, [pc, #44]	; (2450 <forward_status_cb+0xa4>)
    2424:	6a1b      	ldr	r3, [r3, #32]
    2426:	b16b      	cbz	r3, 2444 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
    2428:	4639      	mov	r1, r7
    242a:	4620      	mov	r0, r4
}
    242c:	b001      	add	sp, #4
    242e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    2432:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    2434:	68eb      	ldr	r3, [r5, #12]
    2436:	b11b      	cbz	r3, 2440 <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2438:	463a      	mov	r2, r7
    243a:	4621      	mov	r1, r4
    243c:	4628      	mov	r0, r5
    243e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2440:	3524      	adds	r5, #36	; 0x24
    2442:	e7ec      	b.n	241e <forward_status_cb+0x72>
}
    2444:	b001      	add	sp, #4
    2446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    244a:	bf00      	nop
    244c:	2000041c 	.word	0x2000041c
    2450:	200007e8 	.word	0x200007e8
    2454:	200003d4 	.word	0x200003d4

00002458 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2458:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    245a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    245c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    245e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2460:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2464:	d007      	beq.n	2476 <usb_halt_endpoint_req.isra.0+0x1e>
    2466:	4620      	mov	r0, r4
    2468:	f7ff ff6e 	bl	2348 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    246c:	b178      	cbz	r0, 248e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    246e:	4b0d      	ldr	r3, [pc, #52]	; (24a4 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2470:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2474:	b158      	cbz	r0, 248e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    2476:	4e0b      	ldr	r6, [pc, #44]	; (24a4 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    2478:	4620      	mov	r0, r4
		if (halt) {
    247a:	b155      	cbz	r5, 2492 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    247c:	f002 f96a 	bl	4754 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2480:	69f3      	ldr	r3, [r6, #28]
    2482:	b11b      	cbz	r3, 248c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2484:	f10d 0107 	add.w	r1, sp, #7
    2488:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    248a:	4798      	blx	r3
		return true;
    248c:	2001      	movs	r0, #1
}
    248e:	b002      	add	sp, #8
    2490:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    2492:	f002 f987 	bl	47a4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2496:	69f3      	ldr	r3, [r6, #28]
    2498:	2b00      	cmp	r3, #0
    249a:	d0f7      	beq.n	248c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    249c:	f10d 0107 	add.w	r1, sp, #7
    24a0:	2009      	movs	r0, #9
    24a2:	e7f2      	b.n	248a <usb_halt_endpoint_req.isra.0+0x32>
    24a4:	200007e8 	.word	0x200007e8

000024a8 <set_endpoint>:
{
    24a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    24aa:	7886      	ldrb	r6, [r0, #2]
    24ac:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    24b0:	7903      	ldrb	r3, [r0, #4]
    24b2:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
    24b4:	4c1c      	ldr	r4, [pc, #112]	; (2528 <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    24b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    24ba:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24be:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24c0:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24c2:	f003 0303 	and.w	r3, r3, #3
    24c6:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24ca:	f007 fa76 	bl	99ba <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    24ce:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    24d2:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24d4:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    24d6:	d00b      	beq.n	24f0 <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    24d8:	4630      	mov	r0, r6
    24da:	f000 fd39 	bl	2f50 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    24de:	4630      	mov	r0, r6
    24e0:	f7ff ff14 	bl	230c <disable_endpoint>
		if (!k_is_in_isr()) {
    24e4:	f008 f855 	bl	a592 <k_is_in_isr>
    24e8:	b910      	cbnz	r0, 24f0 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    24ea:	2096      	movs	r0, #150	; 0x96
    24ec:	f006 fa1e 	bl	892c <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    24f0:	4668      	mov	r0, sp
    24f2:	f002 f90b 	bl	470c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    24f6:	f110 0f78 	cmn.w	r0, #120	; 0x78
    24fa:	d003      	beq.n	2504 <set_endpoint+0x5c>
	} else if (ret) {
    24fc:	b110      	cbz	r0, 2504 <set_endpoint+0x5c>
		return false;
    24fe:	2000      	movs	r0, #0
}
    2500:	b002      	add	sp, #8
    2502:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2504:	f89d 0000 	ldrb.w	r0, [sp]
    2508:	f002 f988 	bl	481c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    250c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2510:	d001      	beq.n	2516 <set_endpoint+0x6e>
	} else if (ret) {
    2512:	2800      	cmp	r0, #0
    2514:	d1f3      	bne.n	24fe <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
    2516:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    251a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    251c:	432b      	orrs	r3, r5
	usb_dev.configured = true;
    251e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2522:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    2526:	e7eb      	b.n	2500 <set_endpoint+0x58>
    2528:	200007e8 	.word	0x200007e8

0000252c <usb_handle_standard_request>:
{
    252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2530:	4ea3      	ldr	r6, [pc, #652]	; (27c0 <usb_handle_standard_request+0x294>)
    2532:	69b3      	ldr	r3, [r6, #24]
{
    2534:	4604      	mov	r4, r0
    2536:	460f      	mov	r7, r1
    2538:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    253a:	b9fb      	cbnz	r3, 257c <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    253c:	7823      	ldrb	r3, [r4, #0]
    253e:	f003 031f 	and.w	r3, r3, #31
    2542:	2b01      	cmp	r3, #1
    2544:	f000 809d 	beq.w	2682 <usb_handle_standard_request+0x156>
    2548:	2b02      	cmp	r3, #2
    254a:	f000 8104 	beq.w	2756 <usb_handle_standard_request+0x22a>
    254e:	bb33      	cbnz	r3, 259e <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    2550:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    2554:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    2556:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2558:	2800      	cmp	r0, #0
    255a:	da34      	bge.n	25c6 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    255c:	2906      	cmp	r1, #6
    255e:	d012      	beq.n	2586 <usb_handle_standard_request+0x5a>
    2560:	2908      	cmp	r1, #8
    2562:	d02b      	beq.n	25bc <usb_handle_standard_request+0x90>
    2564:	b9d9      	cbnz	r1, 259e <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2566:	2301      	movs	r3, #1
    2568:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    256a:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    256c:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    2570:	005b      	lsls	r3, r3, #1
    2572:	f043 0301 	orr.w	r3, r3, #1
    2576:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2578:	2302      	movs	r3, #2
    257a:	e12a      	b.n	27d2 <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    257c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    257e:	2800      	cmp	r0, #0
    2580:	d1dc      	bne.n	253c <usb_handle_standard_request+0x10>
		return 0;
    2582:	2000      	movs	r0, #0
    2584:	e00d      	b.n	25a2 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    2586:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2588:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    258a:	1f01      	subs	r1, r0, #4
    258c:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    258e:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2590:	d905      	bls.n	259e <usb_handle_standard_request+0x72>
    2592:	2807      	cmp	r0, #7
    2594:	d803      	bhi.n	259e <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    2596:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2598:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    259a:	780c      	ldrb	r4, [r1, #0]
    259c:	b91c      	cbnz	r4, 25a6 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    259e:	f06f 0015 	mvn.w	r0, #21
}
    25a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    25a6:	784e      	ldrb	r6, [r1, #1]
    25a8:	4566      	cmp	r6, ip
    25aa:	d103      	bne.n	25b4 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    25ac:	429a      	cmp	r2, r3
    25ae:	f000 810b 	beq.w	27c8 <usb_handle_standard_request+0x29c>
			cur_index++;
    25b2:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    25b4:	4421      	add	r1, r4
    25b6:	e7f0      	b.n	259a <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    25b8:	780b      	ldrb	r3, [r1, #0]
    25ba:	e10a      	b.n	27d2 <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    25bc:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    25c0:	7013      	strb	r3, [r2, #0]
				*len = 1;
    25c2:	2301      	movs	r3, #1
    25c4:	e105      	b.n	27d2 <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    25c6:	3901      	subs	r1, #1
    25c8:	2908      	cmp	r1, #8
    25ca:	d8e8      	bhi.n	259e <usb_handle_standard_request+0x72>
    25cc:	a301      	add	r3, pc, #4	; (adr r3, 25d4 <usb_handle_standard_request+0xa8>)
    25ce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    25d2:	bf00      	nop
    25d4:	0000266d 	.word	0x0000266d
    25d8:	0000259f 	.word	0x0000259f
    25dc:	0000267b 	.word	0x0000267b
    25e0:	0000259f 	.word	0x0000259f
    25e4:	000025f9 	.word	0x000025f9
    25e8:	0000259f 	.word	0x0000259f
    25ec:	0000259f 	.word	0x0000259f
    25f0:	0000259f 	.word	0x0000259f
    25f4:	00002605 	.word	0x00002605
			return !usb_dc_set_address(setup->wValue);
    25f8:	78a0      	ldrb	r0, [r4, #2]
    25fa:	f002 f875 	bl	46e8 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25fe:	2800      	cmp	r0, #0
    2600:	d0bf      	beq.n	2582 <usb_handle_standard_request+0x56>
    2602:	e7cc      	b.n	259e <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    2604:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2606:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    2608:	bb63      	cbnz	r3, 2664 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    260a:	f7ff fe95 	bl	2338 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    260e:	8863      	ldrh	r3, [r4, #2]
    2610:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2614:	69f3      	ldr	r3, [r6, #28]
    2616:	2b00      	cmp	r3, #0
    2618:	d0b3      	beq.n	2582 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    261a:	496a      	ldr	r1, [pc, #424]	; (27c4 <usb_handle_standard_request+0x298>)
    261c:	2003      	movs	r0, #3
    261e:	4798      	blx	r3
    2620:	e7af      	b.n	2582 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    2622:	786b      	ldrb	r3, [r5, #1]
    2624:	2b04      	cmp	r3, #4
    2626:	d010      	beq.n	264a <usb_handle_standard_request+0x11e>
    2628:	2b05      	cmp	r3, #5
    262a:	d011      	beq.n	2650 <usb_handle_standard_request+0x124>
    262c:	2b02      	cmp	r3, #2
    262e:	d104      	bne.n	263a <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2630:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    2632:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2634:	42bb      	cmp	r3, r7
    2636:	bf08      	it	eq
    2638:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    263a:	782b      	ldrb	r3, [r5, #0]
    263c:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    263e:	782b      	ldrb	r3, [r5, #0]
    2640:	2b00      	cmp	r3, #0
    2642:	d1ee      	bne.n	2622 <usb_handle_standard_request+0xf6>
	if (found) {
    2644:	2800      	cmp	r0, #0
    2646:	d0aa      	beq.n	259e <usb_handle_standard_request+0x72>
    2648:	e7df      	b.n	260a <usb_handle_standard_request+0xde>
			cur_alt_setting =
    264a:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    264e:	e7f4      	b.n	263a <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    2650:	8863      	ldrh	r3, [r4, #2]
    2652:	42bb      	cmp	r3, r7
    2654:	d1f1      	bne.n	263a <usb_handle_standard_request+0x10e>
    2656:	f1b8 0f00 	cmp.w	r8, #0
    265a:	d1ee      	bne.n	263a <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    265c:	4628      	mov	r0, r5
    265e:	f7ff ff23 	bl	24a8 <set_endpoint>
			break;
    2662:	e7ea      	b.n	263a <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    2664:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    2666:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    2668:	46b8      	mov	r8, r7
    266a:	e7e8      	b.n	263e <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    266c:	8863      	ldrh	r3, [r4, #2]
    266e:	2b01      	cmp	r3, #1
    2670:	d195      	bne.n	259e <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    2672:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    2674:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2678:	e783      	b.n	2582 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    267a:	8863      	ldrh	r3, [r4, #2]
    267c:	2b01      	cmp	r3, #1
    267e:	d18e      	bne.n	259e <usb_handle_standard_request+0x72>
    2680:	e7f8      	b.n	2674 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    2682:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2686:	f8d5 c000 	ldr.w	ip, [r5]
    268a:	2b00      	cmp	r3, #0
    268c:	d087      	beq.n	259e <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    268e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2690:	88a3      	ldrh	r3, [r4, #4]
    2692:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2696:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    2698:	7810      	ldrb	r0, [r2, #0]
    269a:	2800      	cmp	r0, #0
    269c:	f43f af7f 	beq.w	259e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    26a0:	7851      	ldrb	r1, [r2, #1]
    26a2:	2902      	cmp	r1, #2
    26a4:	d104      	bne.n	26b0 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    26a6:	f892 8004 	ldrb.w	r8, [r2, #4]
    26aa:	45f0      	cmp	r8, lr
    26ac:	f200 8093 	bhi.w	27d6 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    26b0:	4402      	add	r2, r0
    26b2:	e7f1      	b.n	2698 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    26b4:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    26b8:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    26bc:	6039      	str	r1, [r7, #0]
			return true;
    26be:	e760      	b.n	2582 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    26c0:	4415      	add	r5, r2
    26c2:	e094      	b.n	27ee <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    26c4:	2a0b      	cmp	r2, #11
    26c6:	f47f af6a 	bne.w	259e <usb_handle_standard_request+0x72>
	bool ret = false;
    26ca:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    26cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    26d0:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    26d2:	46ba      	mov	sl, r7
    26d4:	e006      	b.n	26e4 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    26d6:	786b      	ldrb	r3, [r5, #1]
    26d8:	2b04      	cmp	r3, #4
    26da:	d00f      	beq.n	26fc <usb_handle_standard_request+0x1d0>
    26dc:	2b05      	cmp	r3, #5
    26de:	d021      	beq.n	2724 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    26e0:	782b      	ldrb	r3, [r5, #0]
    26e2:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    26e4:	782b      	ldrb	r3, [r5, #0]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d1f5      	bne.n	26d6 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    26ea:	69f3      	ldr	r3, [r6, #28]
    26ec:	b113      	cbz	r3, 26f4 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    26ee:	4651      	mov	r1, sl
    26f0:	2007      	movs	r0, #7
    26f2:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    26f4:	2f00      	cmp	r7, #0
    26f6:	f47f af44 	bne.w	2582 <usb_handle_standard_request+0x56>
    26fa:	e750      	b.n	259e <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    26fc:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2700:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2702:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2706:	4598      	cmp	r8, r3
    2708:	d1ea      	bne.n	26e0 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    270a:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    270c:	4599      	cmp	r9, r3
    270e:	d1e7      	bne.n	26e0 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2710:	f1b8 0f07 	cmp.w	r8, #7
    2714:	d81c      	bhi.n	2750 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    2716:	eb06 0308 	add.w	r3, r6, r8
		return true;
    271a:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    271c:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2720:	2701      	movs	r7, #1
    2722:	e7dd      	b.n	26e0 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2724:	88a3      	ldrh	r3, [r4, #4]
    2726:	4543      	cmp	r3, r8
    2728:	d1da      	bne.n	26e0 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    272a:	78a3      	ldrb	r3, [r4, #2]
    272c:	454b      	cmp	r3, r9
    272e:	d00a      	beq.n	2746 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    2730:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2732:	4638      	mov	r0, r7
    2734:	f000 fc0c 	bl	2f50 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2738:	4638      	mov	r0, r7
    273a:	f7ff fde7 	bl	230c <disable_endpoint>
    273e:	fab0 f780 	clz	r7, r0
    2742:	097f      	lsrs	r7, r7, #5
    2744:	e7cc      	b.n	26e0 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    2746:	4628      	mov	r0, r5
    2748:	f7ff feae 	bl	24a8 <set_endpoint>
    274c:	4607      	mov	r7, r0
    274e:	e7c7      	b.n	26e0 <usb_handle_standard_request+0x1b4>
    2750:	46aa      	mov	sl, r5
	return false;
    2752:	2700      	movs	r7, #0
    2754:	e7c4      	b.n	26e0 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    2756:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    275a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    275c:	2a00      	cmp	r2, #0
    275e:	da18      	bge.n	2792 <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2760:	2b00      	cmp	r3, #0
    2762:	f47f af1c 	bne.w	259e <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    2766:	7924      	ldrb	r4, [r4, #4]
    2768:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    276a:	0663      	lsls	r3, r4, #25
    276c:	d00a      	beq.n	2784 <usb_handle_standard_request+0x258>
    276e:	4620      	mov	r0, r4
    2770:	f7ff fdea 	bl	2348 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2774:	2800      	cmp	r0, #0
    2776:	f43f af12 	beq.w	259e <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    277a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    277e:	2b00      	cmp	r3, #0
    2780:	f43f af0d 	beq.w	259e <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2784:	4629      	mov	r1, r5
    2786:	4620      	mov	r0, r4
    2788:	f002 f82c 	bl	47e4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    278c:	2300      	movs	r3, #0
    278e:	706b      	strb	r3, [r5, #1]
    2790:	e6f2      	b.n	2578 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    2792:	2b01      	cmp	r3, #1
    2794:	d008      	beq.n	27a8 <usb_handle_standard_request+0x27c>
    2796:	2b03      	cmp	r3, #3
    2798:	f47f af01 	bne.w	259e <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    279c:	8863      	ldrh	r3, [r4, #2]
    279e:	2b00      	cmp	r3, #0
    27a0:	f47f aefd 	bne.w	259e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    27a4:	2101      	movs	r1, #1
    27a6:	e003      	b.n	27b0 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    27a8:	8861      	ldrh	r1, [r4, #2]
    27aa:	2900      	cmp	r1, #0
    27ac:	f47f aef7 	bne.w	259e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    27b0:	88a0      	ldrh	r0, [r4, #4]
    27b2:	f7ff fe51 	bl	2458 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    27b6:	2800      	cmp	r0, #0
    27b8:	f47f aee3 	bne.w	2582 <usb_handle_standard_request+0x56>
    27bc:	e6ef      	b.n	259e <usb_handle_standard_request+0x72>
    27be:	bf00      	nop
    27c0:	200007e8 	.word	0x200007e8
    27c4:	200008a2 	.word	0x200008a2
		if (type == USB_DESC_CONFIGURATION) {
    27c8:	2802      	cmp	r0, #2
		*data = p;
    27ca:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    27cc:	f47f aef4 	bne.w	25b8 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    27d0:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    27d2:	603b      	str	r3, [r7, #0]
		return true;
    27d4:	e6d5      	b.n	2582 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    27d6:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    27da:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    27dc:	2800      	cmp	r0, #0
    27de:	f6bf af71 	bge.w	26c4 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    27e2:	2a00      	cmp	r2, #0
    27e4:	f43f af66 	beq.w	26b4 <usb_handle_standard_request+0x188>
    27e8:	2a0a      	cmp	r2, #10
    27ea:	f47f aed8 	bne.w	259e <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    27ee:	782a      	ldrb	r2, [r5, #0]
    27f0:	2a00      	cmp	r2, #0
    27f2:	f43f aed4 	beq.w	259e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    27f6:	7869      	ldrb	r1, [r5, #1]
    27f8:	2904      	cmp	r1, #4
    27fa:	f47f af61 	bne.w	26c0 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    27fe:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2800:	428b      	cmp	r3, r1
    2802:	f47f af5d 	bne.w	26c0 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2806:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2808:	bf96      	itet	ls
    280a:	199b      	addls	r3, r3, r6
	return 0;
    280c:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    280e:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2812:	f88c 3000 	strb.w	r3, [ip]
    2816:	e6d4      	b.n	25c2 <usb_handle_standard_request+0x96>

00002818 <usb_data_to_host>:
{
    2818:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    281a:	4c13      	ldr	r4, [pc, #76]	; (2868 <usb_data_to_host+0x50>)
    281c:	7d23      	ldrb	r3, [r4, #20]
    281e:	b9cb      	cbnz	r3, 2854 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2820:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2822:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2824:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2826:	ab01      	add	r3, sp, #4
    2828:	2080      	movs	r0, #128	; 0x80
    282a:	f007 f8d4 	bl	99d6 <usb_write>
		usb_dev.data_buf += chunk;
    282e:	9a01      	ldr	r2, [sp, #4]
    2830:	68a3      	ldr	r3, [r4, #8]
    2832:	4413      	add	r3, r2
    2834:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2836:	68e3      	ldr	r3, [r4, #12]
    2838:	1a9b      	subs	r3, r3, r2
    283a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    283c:	b943      	cbnz	r3, 2850 <usb_data_to_host+0x38>
    283e:	b13a      	cbz	r2, 2850 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2840:	6923      	ldr	r3, [r4, #16]
    2842:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2844:	429a      	cmp	r2, r3
    2846:	dd03      	ble.n	2850 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2848:	069b      	lsls	r3, r3, #26
    284a:	d101      	bne.n	2850 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    284c:	2301      	movs	r3, #1
    284e:	7523      	strb	r3, [r4, #20]
}
    2850:	b002      	add	sp, #8
    2852:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2854:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2856:	461a      	mov	r2, r3
    2858:	4619      	mov	r1, r3
    285a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    285c:	7523      	strb	r3, [r4, #20]
}
    285e:	b002      	add	sp, #8
    2860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2864:	f002 b804 	b.w	4870 <usb_dc_ep_write>
    2868:	200007e8 	.word	0x200007e8

0000286c <usb_handle_control_transfer>:
{
    286c:	b530      	push	{r4, r5, lr}
    286e:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    2870:	2300      	movs	r3, #0
{
    2872:	4602      	mov	r2, r0
    2874:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    2876:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2878:	2800      	cmp	r0, #0
    287a:	d158      	bne.n	292e <usb_handle_control_transfer+0xc2>
    287c:	2900      	cmp	r1, #0
    287e:	d135      	bne.n	28ec <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2880:	2208      	movs	r2, #8
    2882:	460b      	mov	r3, r1
    2884:	eb0d 0102 	add.w	r1, sp, r2
    2888:	f007 faca 	bl	9e20 <usb_dc_ep_read>
    288c:	2800      	cmp	r0, #0
    288e:	da04      	bge.n	289a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2890:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2892:	f001 ff5f 	bl	4754 <usb_dc_ep_set_stall>
}
    2896:	b005      	add	sp, #20
    2898:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    289a:	4c2a      	ldr	r4, [pc, #168]	; (2944 <usb_handle_control_transfer+0xd8>)
    289c:	9a02      	ldr	r2, [sp, #8]
    289e:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    28a0:	9a03      	ldr	r2, [sp, #12]
    28a2:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    28a4:	f104 0238 	add.w	r2, r4, #56	; 0x38
    28a8:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    28aa:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    28ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    28b2:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    28b4:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    28b6:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    28ba:	db0a      	blt.n	28d2 <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    28bc:	2b80      	cmp	r3, #128	; 0x80
    28be:	d904      	bls.n	28ca <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    28c0:	2080      	movs	r0, #128	; 0x80
    28c2:	f001 ff47 	bl	4754 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    28c6:	2000      	movs	r0, #0
    28c8:	e7e3      	b.n	2892 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    28ca:	b113      	cbz	r3, 28d2 <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    28cc:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    28d0:	e7e1      	b.n	2896 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    28d2:	f7ff fd55 	bl	2380 <usb_handle_request.constprop.0>
    28d6:	2800      	cmp	r0, #0
    28d8:	d0da      	beq.n	2890 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    28da:	88e2      	ldrh	r2, [r4, #6]
    28dc:	6923      	ldr	r3, [r4, #16]
    28de:	429a      	cmp	r2, r3
    28e0:	bfd4      	ite	le
    28e2:	60e2      	strle	r2, [r4, #12]
    28e4:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    28e6:	f7ff ff97 	bl	2818 <usb_data_to_host>
    28ea:	e7d4      	b.n	2896 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    28ec:	4c15      	ldr	r4, [pc, #84]	; (2944 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28ee:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    28f2:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28f4:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    28f6:	dc04      	bgt.n	2902 <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28f8:	f007 fa92 	bl	9e20 <usb_dc_ep_read>
    28fc:	2800      	cmp	r0, #0
    28fe:	daca      	bge.n	2896 <usb_handle_control_transfer+0x2a>
    2900:	e7c6      	b.n	2890 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2902:	462a      	mov	r2, r5
    2904:	f007 fa8c 	bl	9e20 <usb_dc_ep_read>
    2908:	2800      	cmp	r0, #0
    290a:	dbd9      	blt.n	28c0 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    290c:	9a01      	ldr	r2, [sp, #4]
    290e:	68a3      	ldr	r3, [r4, #8]
    2910:	4413      	add	r3, r2
    2912:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2914:	68e3      	ldr	r3, [r4, #12]
    2916:	1a9b      	subs	r3, r3, r2
    2918:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    291a:	2b00      	cmp	r3, #0
    291c:	d1bb      	bne.n	2896 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    291e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    2922:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    2924:	f7ff fd2c 	bl	2380 <usb_handle_request.constprop.0>
    2928:	2800      	cmp	r0, #0
    292a:	d1dc      	bne.n	28e6 <usb_handle_control_transfer+0x7a>
    292c:	e7b0      	b.n	2890 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    292e:	2880      	cmp	r0, #128	; 0x80
    2930:	d1b1      	bne.n	2896 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2932:	4b04      	ldr	r3, [pc, #16]	; (2944 <usb_handle_control_transfer+0xd8>)
    2934:	68da      	ldr	r2, [r3, #12]
    2936:	2a00      	cmp	r2, #0
    2938:	d1d5      	bne.n	28e6 <usb_handle_control_transfer+0x7a>
    293a:	7d1b      	ldrb	r3, [r3, #20]
    293c:	2b00      	cmp	r3, #0
    293e:	d1d2      	bne.n	28e6 <usb_handle_control_transfer+0x7a>
    2940:	e7a9      	b.n	2896 <usb_handle_control_transfer+0x2a>
    2942:	bf00      	nop
    2944:	200007e8 	.word	0x200007e8

00002948 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2948:	4b05      	ldr	r3, [pc, #20]	; (2960 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    294a:	4a06      	ldr	r2, [pc, #24]	; (2964 <usb_set_config+0x1c>)
    294c:	629a      	str	r2, [r3, #40]	; 0x28
    294e:	4a06      	ldr	r2, [pc, #24]	; (2968 <usb_set_config+0x20>)
    2950:	62da      	str	r2, [r3, #44]	; 0x2c
    2952:	4a06      	ldr	r2, [pc, #24]	; (296c <usb_set_config+0x24>)
    2954:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    2956:	4a06      	ldr	r2, [pc, #24]	; (2970 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2958:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    295a:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    295c:	2000      	movs	r0, #0
    295e:	4770      	bx	lr
    2960:	200007e8 	.word	0x200007e8
    2964:	0000252d 	.word	0x0000252d
    2968:	00002231 	.word	0x00002231
    296c:	000022d1 	.word	0x000022d1
    2970:	00002271 	.word	0x00002271

00002974 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    2974:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    2976:	4b08      	ldr	r3, [pc, #32]	; (2998 <usb_device_init+0x24>)
    2978:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    297c:	b934      	cbnz	r4, 298c <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    297e:	f000 f8d7 	bl	2b30 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2982:	b130      	cbz	r0, 2992 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    2984:	f7ff ffe0 	bl	2948 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    2988:	4620      	mov	r0, r4
}
    298a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    298c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2990:	e7fb      	b.n	298a <usb_device_init+0x16>
		return -1;
    2992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2996:	e7f8      	b.n	298a <usb_device_init+0x16>
    2998:	200007e8 	.word	0x200007e8

0000299c <usb_enable>:
{
    299c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    29a0:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    29a2:	4d3b      	ldr	r5, [pc, #236]	; (2a90 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    29a4:	483b      	ldr	r0, [pc, #236]	; (2a94 <usb_enable+0xf8>)
    29a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    29aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    29ae:	f005 fa57 	bl	7e60 <z_impl_k_mutex_lock>
    29b2:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    29b6:	2e00      	cmp	r6, #0
    29b8:	d167      	bne.n	2a8a <usb_enable+0xee>
	usb_dev.status_callback = cb;
    29ba:	4837      	ldr	r0, [pc, #220]	; (2a98 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    29bc:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    29be:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    29c0:	f002 f870 	bl	4aa4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    29c4:	f001 fe5e 	bl	4684 <usb_dc_attach>
	if (ret < 0) {
    29c8:	1e04      	subs	r4, r0, #0
    29ca:	db42      	blt.n	2a52 <usb_enable+0xb6>
	ret = usb_transfer_init();
    29cc:	f000 fb02 	bl	2fd4 <usb_transfer_init>
	if (ret < 0) {
    29d0:	1e04      	subs	r4, r0, #0
    29d2:	db3e      	blt.n	2a52 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    29d4:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    29d6:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    29d8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    29dc:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    29e0:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29e4:	f001 fe92 	bl	470c <usb_dc_ep_configure>
	if (ret < 0) {
    29e8:	1e04      	subs	r4, r0, #0
    29ea:	db32      	blt.n	2a52 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    29ec:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    29ee:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    29f0:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29f4:	f001 fe8a 	bl	470c <usb_dc_ep_configure>
	if (ret < 0) {
    29f8:	1e04      	subs	r4, r0, #0
    29fa:	db2a      	blt.n	2a52 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    29fc:	4927      	ldr	r1, [pc, #156]	; (2a9c <usb_enable+0x100>)
    29fe:	4630      	mov	r0, r6
    2a00:	f002 f83c 	bl	4a7c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a04:	1e04      	subs	r4, r0, #0
    2a06:	db24      	blt.n	2a52 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2a08:	4924      	ldr	r1, [pc, #144]	; (2a9c <usb_enable+0x100>)
    2a0a:	4638      	mov	r0, r7
    2a0c:	f002 f836 	bl	4a7c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a10:	1e04      	subs	r4, r0, #0
    2a12:	db1e      	blt.n	2a52 <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a14:	4c22      	ldr	r4, [pc, #136]	; (2aa0 <usb_enable+0x104>)
    2a16:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2aa4 <usb_enable+0x108>
    2a1a:	4544      	cmp	r4, r8
    2a1c:	d320      	bcc.n	2a60 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2a1e:	2000      	movs	r0, #0
    2a20:	f001 fefc 	bl	481c <usb_dc_ep_enable>
	if (ret < 0) {
    2a24:	1e04      	subs	r4, r0, #0
    2a26:	db14      	blt.n	2a52 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2a28:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2a2c:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2a2e:	f043 0301 	orr.w	r3, r3, #1
    2a32:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2a36:	f001 fef1 	bl	481c <usb_dc_ep_enable>
	if (ret < 0) {
    2a3a:	1e04      	subs	r4, r0, #0
    2a3c:	db09      	blt.n	2a52 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2a3e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a46:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    2a4a:	2301      	movs	r3, #1
    2a4c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2a50:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    2a52:	4810      	ldr	r0, [pc, #64]	; (2a94 <usb_enable+0xf8>)
    2a54:	f005 fa7e 	bl	7f54 <z_impl_k_mutex_unlock>
}
    2a58:	4620      	mov	r0, r4
    2a5a:	b002      	add	sp, #8
    2a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    2a60:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2a62:	2600      	movs	r6, #0
    2a64:	7f22      	ldrb	r2, [r4, #28]
    2a66:	b2f3      	uxtb	r3, r6
    2a68:	429a      	cmp	r2, r3
    2a6a:	d801      	bhi.n	2a70 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a6c:	3424      	adds	r4, #36	; 0x24
    2a6e:	e7d4      	b.n	2a1a <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2a70:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2a74:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2a78:	7910      	ldrb	r0, [r2, #4]
    2a7a:	f001 ffff 	bl	4a7c <usb_dc_ep_set_callback>
    2a7e:	3601      	adds	r6, #1
    2a80:	2800      	cmp	r0, #0
    2a82:	d0ef      	beq.n	2a64 <usb_enable+0xc8>
    2a84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2a88:	e7e3      	b.n	2a52 <usb_enable+0xb6>
		ret = -EALREADY;
    2a8a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    2a8e:	e7e0      	b.n	2a52 <usb_enable+0xb6>
    2a90:	200007e8 	.word	0x200007e8
    2a94:	200002c4 	.word	0x200002c4
    2a98:	000023ad 	.word	0x000023ad
    2a9c:	0000286d 	.word	0x0000286d
    2aa0:	200003d4 	.word	0x200003d4
    2aa4:	2000041c 	.word	0x2000041c

00002aa8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2aa8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2aaa:	4b1f      	ldr	r3, [pc, #124]	; (2b28 <usb_update_sn_string_descriptor+0x80>)
{
    2aac:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2aae:	aa05      	add	r2, sp, #20
    2ab0:	f103 0510 	add.w	r5, r3, #16
    2ab4:	6818      	ldr	r0, [r3, #0]
    2ab6:	6859      	ldr	r1, [r3, #4]
    2ab8:	4614      	mov	r4, r2
    2aba:	c403      	stmia	r4!, {r0, r1}
    2abc:	3308      	adds	r3, #8
    2abe:	42ab      	cmp	r3, r5
    2ac0:	4622      	mov	r2, r4
    2ac2:	d1f7      	bne.n	2ab4 <usb_update_sn_string_descriptor+0xc>
    2ac4:	781b      	ldrb	r3, [r3, #0]
    2ac6:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2ac8:	2210      	movs	r2, #16
    2aca:	2100      	movs	r1, #0
    2acc:	a801      	add	r0, sp, #4
    2ace:	f007 f923 	bl	9d18 <memset>
	memset(sn, 0, sizeof(sn));
    2ad2:	2212      	movs	r2, #18
    2ad4:	2100      	movs	r1, #0
    2ad6:	4815      	ldr	r0, [pc, #84]	; (2b2c <usb_update_sn_string_descriptor+0x84>)
    2ad8:	f007 f91e 	bl	9d18 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2adc:	2110      	movs	r1, #16
    2ade:	a801      	add	r0, sp, #4
    2ae0:	f007 fa93 	bl	a00a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2ae4:	2800      	cmp	r0, #0
    2ae6:	dd1b      	ble.n	2b20 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2ae8:	2808      	cmp	r0, #8
    2aea:	bfb8      	it	lt
    2aec:	2008      	movlt	r0, #8
    2aee:	3809      	subs	r0, #9
    2af0:	ab01      	add	r3, sp, #4
    2af2:	490e      	ldr	r1, [pc, #56]	; (2b2c <usb_update_sn_string_descriptor+0x84>)
    2af4:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2af6:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2af8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2afc:	ac0a      	add	r4, sp, #40	; 0x28
    2afe:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b02:	f003 030f 	and.w	r3, r3, #15
    2b06:	3328      	adds	r3, #40	; 0x28
    2b08:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    2b0a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b0c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b10:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b14:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    2b16:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b18:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2b1a:	f101 0102 	add.w	r1, r1, #2
    2b1e:	d1eb      	bne.n	2af8 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2b20:	4802      	ldr	r0, [pc, #8]	; (2b2c <usb_update_sn_string_descriptor+0x84>)
    2b22:	b00b      	add	sp, #44	; 0x2c
    2b24:	bd30      	pop	{r4, r5, pc}
    2b26:	bf00      	nop
    2b28:	0000b2f1 	.word	0x0000b2f1
    2b2c:	20001cea 	.word	0x20001cea

00002b30 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b34:	4c64      	ldr	r4, [pc, #400]	; (2cc8 <usb_get_device_descriptor+0x198>)
    2b36:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
    2b38:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2b3a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2b3e:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
    2b40:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2b42:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
    2b44:	7823      	ldrb	r3, [r4, #0]
    2b46:	b92b      	cbnz	r3, 2b54 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
    2b48:	4b60      	ldr	r3, [pc, #384]	; (2ccc <usb_get_device_descriptor+0x19c>)
    2b4a:	3402      	adds	r4, #2
    2b4c:	429c      	cmp	r4, r3
    2b4e:	d1f3      	bne.n	2b38 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2b50:	485d      	ldr	r0, [pc, #372]	; (2cc8 <usb_get_device_descriptor+0x198>)
    2b52:	e01c      	b.n	2b8e <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
    2b54:	7863      	ldrb	r3, [r4, #1]
    2b56:	2b05      	cmp	r3, #5
    2b58:	d805      	bhi.n	2b66 <usb_get_device_descriptor+0x36>
    2b5a:	e8df f003 	tbb	[pc, r3]
    2b5e:	047b      	.short	0x047b
    2b60:	25077b03 	.word	0x25077b03
    2b64:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2b66:	7823      	ldrb	r3, [r4, #0]
    2b68:	441c      	add	r4, r3
    2b6a:	e7eb      	b.n	2b44 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
    2b6c:	78e3      	ldrb	r3, [r4, #3]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d1f9      	bne.n	2b66 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
    2b72:	78a3      	ldrb	r3, [r4, #2]
    2b74:	b173      	cbz	r3, 2b94 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
    2b76:	f109 0901 	add.w	r9, r9, #1
    2b7a:	fa5f f989 	uxtb.w	r9, r9
			break;
    2b7e:	e7f2      	b.n	2b66 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
    2b80:	686a      	ldr	r2, [r5, #4]
    2b82:	4294      	cmp	r4, r2
    2b84:	d009      	beq.n	2b9a <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b86:	3524      	adds	r5, #36	; 0x24
    2b88:	429d      	cmp	r5, r3
    2b8a:	d3f9      	bcc.n	2b80 <usb_get_device_descriptor+0x50>
		return NULL;
    2b8c:	2000      	movs	r0, #0
}
    2b8e:	b005      	add	sp, #20
    2b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b94:	4d4e      	ldr	r5, [pc, #312]	; (2cd0 <usb_get_device_descriptor+0x1a0>)
    2b96:	4b4f      	ldr	r3, [pc, #316]	; (2cd4 <usb_get_device_descriptor+0x1a4>)
    2b98:	e7f6      	b.n	2b88 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
    2b9a:	68ab      	ldr	r3, [r5, #8]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d0ea      	beq.n	2b76 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
    2ba0:	4649      	mov	r1, r9
    2ba2:	4620      	mov	r0, r4
    2ba4:	4798      	blx	r3
    2ba6:	e7e6      	b.n	2b76 <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
    2ba8:	2d00      	cmp	r5, #0
    2baa:	d0ef      	beq.n	2b8c <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2bac:	2300      	movs	r3, #0
    2bae:	2101      	movs	r1, #1
    2bb0:	7f2a      	ldrb	r2, [r5, #28]
    2bb2:	4293      	cmp	r3, r2
    2bb4:	d2ea      	bcs.n	2b8c <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    2bb6:	6a2a      	ldr	r2, [r5, #32]
    2bb8:	78a7      	ldrb	r7, [r4, #2]
    2bba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2bbe:	7910      	ldrb	r0, [r2, #4]
    2bc0:	4287      	cmp	r7, r0
    2bc2:	d001      	beq.n	2bc8 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2bc4:	3301      	adds	r3, #1
    2bc6:	e7f3      	b.n	2bb0 <usb_get_device_descriptor+0x80>
    2bc8:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2bca:	78e0      	ldrb	r0, [r4, #3]
    2bcc:	f000 0003 	and.w	r0, r0, #3
    2bd0:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2bd4:	7920      	ldrb	r0, [r4, #4]
    2bd6:	f894 c005 	ldrb.w	ip, [r4, #5]
    2bda:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2bde:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2be2:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2be6:	2800      	cmp	r0, #0
    2be8:	fa5f f887 	uxtb.w	r8, r7
    2bec:	da27      	bge.n	2c3e <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2bee:	f107 0010 	add.w	r0, r7, #16
    2bf2:	fa01 f000 	lsl.w	r0, r1, r0
    2bf6:	ea10 0f0b 	tst.w	r0, fp
    2bfa:	d127      	bne.n	2c4c <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2bfc:	f048 0080 	orr.w	r0, r8, #128	; 0x80
    2c00:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2c04:	a802      	add	r0, sp, #8
    2c06:	e9cd 3200 	strd	r3, r2, [sp]
    2c0a:	f007 f8d8 	bl	9dbe <usb_dc_ep_check_cap>
    2c0e:	e9dd 3200 	ldrd	r3, r2, [sp]
    2c12:	2101      	movs	r1, #1
    2c14:	b9d0      	cbnz	r0, 2c4c <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2c16:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2c1a:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2c20:	bf18      	it	ne
    2c22:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2c26:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
    2c28:	bf18      	it	ne
    2c2a:	fa5f f888 	uxtbne.w	r8, r8
    2c2e:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
    2c30:	bf0c      	ite	eq
    2c32:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
    2c34:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
    2c38:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
    2c3c:	e793      	b.n	2b66 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
    2c3e:	fa01 f007 	lsl.w	r0, r1, r7
    2c42:	ea10 0f0b 	tst.w	r0, fp
    2c46:	d101      	bne.n	2c4c <usb_get_device_descriptor+0x11c>
    2c48:	4640      	mov	r0, r8
    2c4a:	e7d9      	b.n	2c00 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2c4c:	3701      	adds	r7, #1
    2c4e:	2f10      	cmp	r7, #16
    2c50:	d1bb      	bne.n	2bca <usb_get_device_descriptor+0x9a>
    2c52:	e7b7      	b.n	2bc4 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2c54:	2e03      	cmp	r6, #3
    2c56:	d11d      	bne.n	2c94 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2c58:	f7ff ff26 	bl	2aa8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2c5c:	4607      	mov	r7, r0
    2c5e:	b168      	cbz	r0, 2c7c <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
    2c60:	f007 f833 	bl	9cca <strlen>
	if (!runtime_sn_len) {
    2c64:	4680      	mov	r8, r0
    2c66:	b148      	cbz	r0, 2c7c <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2c68:	481b      	ldr	r0, [pc, #108]	; (2cd8 <usb_get_device_descriptor+0x1a8>)
    2c6a:	f007 f82e 	bl	9cca <strlen>
	if (runtime_sn_len != default_sn_len) {
    2c6e:	4580      	cmp	r8, r0
    2c70:	d104      	bne.n	2c7c <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2c72:	4642      	mov	r2, r8
    2c74:	4639      	mov	r1, r7
    2c76:	1ca0      	adds	r0, r4, #2
    2c78:	f007 f843 	bl	9d02 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2c7c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2c7e:	f06f 0102 	mvn.w	r1, #2
    2c82:	18e2      	adds	r2, r4, r3
    2c84:	1b09      	subs	r1, r1, r4
    2c86:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    2c8a:	42d1      	cmn	r1, r2
    2c8c:	d513      	bpl.n	2cb6 <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
    2c8e:	3601      	adds	r6, #1
    2c90:	b2f6      	uxtb	r6, r6
			break;
    2c92:	e768      	b.n	2b66 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
    2c94:	2e00      	cmp	r6, #0
    2c96:	d1f1      	bne.n	2c7c <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
    2c98:	f1ba 0f00 	cmp.w	sl, #0
    2c9c:	f43f af76 	beq.w	2b8c <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2ca0:	eba4 030a 	sub.w	r3, r4, sl
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2ca4:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
    2ca8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2cac:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2cb0:	f88a 9004 	strb.w	r9, [sl, #4]
    2cb4:	e7eb      	b.n	2c8e <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
    2cb6:	f04f 0000 	mov.w	r0, #0
    2cba:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2cbe:	f813 0901 	ldrb.w	r0, [r3], #-1
    2cc2:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2cc6:	e7e0      	b.n	2c8a <usb_get_device_descriptor+0x15a>
    2cc8:	20000308 	.word	0x20000308
    2ccc:	200003d2 	.word	0x200003d2
    2cd0:	200003d4 	.word	0x200003d4
    2cd4:	2000041c 	.word	0x2000041c
    2cd8:	0000b2f1 	.word	0x0000b2f1

00002cdc <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2cdc:	b510      	push	{r4, lr}
    2cde:	4b09      	ldr	r3, [pc, #36]	; (2d04 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ce0:	2100      	movs	r1, #0
    2ce2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2ce4:	781c      	ldrb	r4, [r3, #0]
    2ce6:	4284      	cmp	r4, r0
    2ce8:	d104      	bne.n	2cf4 <usb_ep_get_transfer+0x18>
    2cea:	685c      	ldr	r4, [r3, #4]
    2cec:	b114      	cbz	r4, 2cf4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2cee:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2cf2:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2cf4:	3101      	adds	r1, #1
    2cf6:	2904      	cmp	r1, #4
    2cf8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2cfc:	d1f2      	bne.n	2ce4 <usb_ep_get_transfer+0x8>
	return NULL;
    2cfe:	2000      	movs	r0, #0
    2d00:	e7f7      	b.n	2cf2 <usb_ep_get_transfer+0x16>
    2d02:	bf00      	nop
    2d04:	200008b0 	.word	0x200008b0

00002d08 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2d0c:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    2d10:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2d14:	3310      	adds	r3, #16
{
    2d16:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2d18:	d110      	bne.n	2d3c <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2d1a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2d1c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2d20:	0799      	lsls	r1, r3, #30
    2d22:	d53c      	bpl.n	2d9e <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2d24:	bb02      	cbnz	r2, 2d68 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2d26:	f013 0304 	ands.w	r3, r3, #4
    2d2a:	d104      	bne.n	2d36 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2d2c:	461a      	mov	r2, r3
    2d2e:	4619      	mov	r1, r3
    2d30:	4630      	mov	r0, r6
    2d32:	f006 fe50 	bl	99d6 <usb_write>
			}
			trans->status = 0;
    2d36:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2d38:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2d3c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d40:	3310      	adds	r3, #16
    2d42:	d00e      	beq.n	2d62 <usb_transfer_work+0x5a>
    2d44:	f854 5c18 	ldr.w	r5, [r4, #-24]
    2d48:	b15d      	cbz	r5, 2d62 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2d4a:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2d4e:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2d52:	f007 fc1e 	bl	a592 <k_is_in_isr>
    2d56:	2800      	cmp	r0, #0
    2d58:	d04c      	beq.n	2df4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2d5a:	482c      	ldr	r0, [pc, #176]	; (2e0c <usb_transfer_work+0x104>)
    2d5c:	4621      	mov	r1, r4
    2d5e:	f007 fd0c 	bl	a77a <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    2d62:	b002      	add	sp, #8
    2d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2d68:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2d6c:	ab01      	add	r3, sp, #4
    2d6e:	4630      	mov	r0, r6
    2d70:	f006 fe31 	bl	99d6 <usb_write>
		if (ret) {
    2d74:	b110      	cbz	r0, 2d7c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2d76:	f06f 0315 	mvn.w	r3, #21
    2d7a:	e7dd      	b.n	2d38 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    2d7c:	9a01      	ldr	r2, [sp, #4]
    2d7e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2d82:	4413      	add	r3, r2
    2d84:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2d88:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2d8c:	1a9b      	subs	r3, r3, r2
    2d8e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2d92:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2d96:	4413      	add	r3, r2
    2d98:	f844 3c1c 	str.w	r3, [r4, #-28]
    2d9c:	e7ce      	b.n	2d3c <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2d9e:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2da2:	ab01      	add	r3, sp, #4
    2da4:	4630      	mov	r0, r6
    2da6:	f001 fddf 	bl	4968 <usb_dc_ep_read_wait>
		if (ret) {
    2daa:	2800      	cmp	r0, #0
    2dac:	d1e3      	bne.n	2d76 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2dae:	9d01      	ldr	r5, [sp, #4]
    2db0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2db4:	442b      	add	r3, r5
    2db6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2dba:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2dbe:	1b5b      	subs	r3, r3, r5
    2dc0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2dc4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2dc8:	442b      	add	r3, r5
    2dca:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2dce:	2d00      	cmp	r5, #0
    2dd0:	d0b1      	beq.n	2d36 <usb_transfer_work+0x2e>
    2dd2:	4630      	mov	r0, r6
    2dd4:	f001 fe6c 	bl	4ab0 <usb_dc_ep_mps>
    2dd8:	fbb5 f3f0 	udiv	r3, r5, r0
    2ddc:	fb03 5510 	mls	r5, r3, r0, r5
    2de0:	2d00      	cmp	r5, #0
    2de2:	d1a8      	bne.n	2d36 <usb_transfer_work+0x2e>
    2de4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d0a4      	beq.n	2d36 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2dec:	4630      	mov	r0, r6
    2dee:	f001 fe03 	bl	49f8 <usb_dc_ep_read_continue>
    2df2:	e7a3      	b.n	2d3c <usb_transfer_work+0x34>
		trans->cb = NULL;
    2df4:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    2df8:	f1a4 0010 	sub.w	r0, r4, #16
    2dfc:	f005 f91a 	bl	8034 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    2e00:	4642      	mov	r2, r8
    2e02:	4639      	mov	r1, r7
    2e04:	4630      	mov	r0, r6
    2e06:	47a8      	blx	r5
    2e08:	e7ab      	b.n	2d62 <usb_transfer_work+0x5a>
    2e0a:	bf00      	nop
    2e0c:	200004a0 	.word	0x200004a0

00002e10 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e10:	1e4b      	subs	r3, r1, #1
    2e12:	2b01      	cmp	r3, #1
{
    2e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e16:	4606      	mov	r6, r0
    2e18:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e1a:	d80f      	bhi.n	2e3c <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2e1c:	f7ff ff5e 	bl	2cdc <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2e20:	4604      	mov	r4, r0
    2e22:	b968      	cbnz	r0, 2e40 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2e24:	2d01      	cmp	r5, #1
    2e26:	d109      	bne.n	2e3c <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2e28:	ab01      	add	r3, sp, #4
    2e2a:	2201      	movs	r2, #1
    2e2c:	f10d 0103 	add.w	r1, sp, #3
    2e30:	4630      	mov	r0, r6
    2e32:	f001 fd99 	bl	4968 <usb_dc_ep_read_wait>
			} while (bytes);
    2e36:	9b01      	ldr	r3, [sp, #4]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d1f5      	bne.n	2e28 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2e3c:	b002      	add	sp, #8
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e40:	f007 fba7 	bl	a592 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e44:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e48:	b108      	cbz	r0, 2e4e <usb_transfer_ep_callback+0x3e>
    2e4a:	2d01      	cmp	r5, #1
    2e4c:	d105      	bne.n	2e5a <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2e4e:	4608      	mov	r0, r1
}
    2e50:	b002      	add	sp, #8
    2e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2e56:	f7ff bf57 	b.w	2d08 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e5a:	4803      	ldr	r0, [pc, #12]	; (2e68 <usb_transfer_ep_callback+0x58>)
}
    2e5c:	b002      	add	sp, #8
    2e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e62:	f007 bc8a 	b.w	a77a <k_work_submit_to_queue>
    2e66:	bf00      	nop
    2e68:	200004a0 	.word	0x200004a0

00002e6c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e70:	4606      	mov	r6, r0
    2e72:	9101      	str	r1, [sp, #4]
    2e74:	4615      	mov	r5, r2
    2e76:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2e78:	f006 fdf5 	bl	9a66 <usb_transfer_is_busy>
    2e7c:	4604      	mov	r4, r0
    2e7e:	2800      	cmp	r0, #0
    2e80:	d15c      	bne.n	2f3c <usb_transfer+0xd0>
	__asm__ volatile(
    2e82:	f04f 0320 	mov.w	r3, #32
    2e86:	f3ef 8a11 	mrs	sl, BASEPRI
    2e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    2e8e:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2e92:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2f44 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    2e96:	2200      	movs	r2, #0
    2e98:	2300      	movs	r3, #0
    2e9a:	4658      	mov	r0, fp
    2e9c:	f005 f8ea 	bl	8074 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2ea0:	b970      	cbnz	r0, 2ec0 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2ea2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2f48 <usb_transfer+0xdc>
    2ea6:	01a7      	lsls	r7, r4, #6
    2ea8:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2eac:	6863      	ldr	r3, [r4, #4]
    2eae:	f113 0f10 	cmn.w	r3, #16
    2eb2:	d114      	bne.n	2ede <usb_transfer+0x72>
    2eb4:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2eb6:	4658      	mov	r0, fp
    2eb8:	f005 f8bc 	bl	8034 <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2ebc:	9b01      	ldr	r3, [sp, #4]
    2ebe:	e006      	b.n	2ece <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ec0:	3401      	adds	r4, #1
    2ec2:	2c04      	cmp	r4, #4
    2ec4:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2ec8:	d1e5      	bne.n	2e96 <usb_transfer+0x2a>
		ret = -ENOMEM;
    2eca:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2ece:	f38a 8811 	msr	BASEPRI, sl
    2ed2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2ed6:	4618      	mov	r0, r3
    2ed8:	b003      	add	sp, #12
    2eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2ede:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2ee0:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2ee2:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ee8:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2eec:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2eee:	4630      	mov	r0, r6
	trans->status = -EBUSY;
    2ef0:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    2ef4:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    2ef8:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2efc:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2efe:	f001 fdd7 	bl	4ab0 <usb_dc_ep_mps>
    2f02:	b158      	cbz	r0, 2f1c <usb_transfer+0xb0>
    2f04:	4630      	mov	r0, r6
    2f06:	f001 fdd3 	bl	4ab0 <usb_dc_ep_mps>
    2f0a:	fbb5 f3f0 	udiv	r3, r5, r0
    2f0e:	fb03 5510 	mls	r5, r3, r0, r5
    2f12:	b11d      	cbz	r5, 2f1c <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2f14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2f16:	f043 0304 	orr.w	r3, r3, #4
    2f1a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2f1c:	f018 0f02 	tst.w	r8, #2
    2f20:	d007      	beq.n	2f32 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f22:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2f26:	4809      	ldr	r0, [pc, #36]	; (2f4c <usb_transfer+0xe0>)
    2f28:	4449      	add	r1, r9
    2f2a:	f007 fc26 	bl	a77a <k_work_submit_to_queue>
	int key, ret = 0;
    2f2e:	2300      	movs	r3, #0
    2f30:	e7cd      	b.n	2ece <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2f32:	4630      	mov	r0, r6
    2f34:	f001 fd60 	bl	49f8 <usb_dc_ep_read_continue>
    2f38:	4603      	mov	r3, r0
    2f3a:	e7c8      	b.n	2ece <usb_transfer+0x62>
		return -EBUSY;
    2f3c:	f06f 030f 	mvn.w	r3, #15
    2f40:	e7c9      	b.n	2ed6 <usb_transfer+0x6a>
    2f42:	bf00      	nop
    2f44:	200008cc 	.word	0x200008cc
    2f48:	200008b0 	.word	0x200008b0
    2f4c:	200004a0 	.word	0x200004a0

00002f50 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2f50:	b510      	push	{r4, lr}
	__asm__ volatile(
    2f52:	f04f 0320 	mov.w	r3, #32
    2f56:	f3ef 8411 	mrs	r4, BASEPRI
    2f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    2f5e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2f62:	f7ff febb 	bl	2cdc <usb_ep_get_transfer>
	if (!trans) {
    2f66:	b150      	cbz	r0, 2f7e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2f68:	6843      	ldr	r3, [r0, #4]
    2f6a:	3310      	adds	r3, #16
    2f6c:	d107      	bne.n	2f7e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2f6e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    2f72:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f74:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2f78:	4803      	ldr	r0, [pc, #12]	; (2f88 <usb_cancel_transfer+0x38>)
    2f7a:	f007 fbfe 	bl	a77a <k_work_submit_to_queue>
	__asm__ volatile(
    2f7e:	f384 8811 	msr	BASEPRI, r4
    2f82:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2f86:	bd10      	pop	{r4, pc}
    2f88:	200004a0 	.word	0x200004a0

00002f8c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2f8c:	b570      	push	{r4, r5, r6, lr}
    2f8e:	4c0f      	ldr	r4, [pc, #60]	; (2fcc <usb_cancel_transfers+0x40>)
    2f90:	2504      	movs	r5, #4
	__asm__ volatile(
    2f92:	f04f 0320 	mov.w	r3, #32
    2f96:	f3ef 8611 	mrs	r6, BASEPRI
    2f9a:	f383 8812 	msr	BASEPRI_MAX, r3
    2f9e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2fa2:	6863      	ldr	r3, [r4, #4]
    2fa4:	3310      	adds	r3, #16
    2fa6:	d107      	bne.n	2fb8 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2fa8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fac:	4808      	ldr	r0, [pc, #32]	; (2fd0 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2fae:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fb0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2fb4:	f007 fbe1 	bl	a77a <k_work_submit_to_queue>
	__asm__ volatile(
    2fb8:	f386 8811 	msr	BASEPRI, r6
    2fbc:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2fc0:	3d01      	subs	r5, #1
    2fc2:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2fc6:	d1e4      	bne.n	2f92 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    2fc8:	bd70      	pop	{r4, r5, r6, pc}
    2fca:	bf00      	nop
    2fcc:	200008b0 	.word	0x200008b0
    2fd0:	200004a0 	.word	0x200004a0

00002fd4 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    2fd4:	b570      	push	{r4, r5, r6, lr}
    2fd6:	4c0a      	ldr	r4, [pc, #40]	; (3000 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2fd8:	4e0a      	ldr	r6, [pc, #40]	; (3004 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2fda:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    2fdc:	4631      	mov	r1, r6
    2fde:	4620      	mov	r0, r4
    2fe0:	f007 fbae 	bl	a740 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2fe4:	2201      	movs	r2, #1
    2fe6:	f1a4 0010 	sub.w	r0, r4, #16
    2fea:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2fec:	3501      	adds	r5, #1
    2fee:	f007 fb6a 	bl	a6c6 <z_impl_k_sem_init>
    2ff2:	2d04      	cmp	r5, #4
    2ff4:	f104 0440 	add.w	r4, r4, #64	; 0x40
    2ff8:	d1f0      	bne.n	2fdc <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    2ffa:	2000      	movs	r0, #0
    2ffc:	bd70      	pop	{r4, r5, r6, pc}
    2ffe:	bf00      	nop
    3000:	200008dc 	.word	0x200008dc
    3004:	00002d09 	.word	0x00002d09

00003008 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3008:	b570      	push	{r4, r5, r6, lr}
    300a:	4604      	mov	r4, r0
    300c:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    300e:	7901      	ldrb	r1, [r0, #4]
    3010:	4812      	ldr	r0, [pc, #72]	; (305c <cdc_acm_class_handle_req+0x54>)
{
    3012:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    3014:	f006 fd03 	bl	9a1e <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3018:	b1e8      	cbz	r0, 3056 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    301a:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    301e:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    3020:	2a00      	cmp	r2, #0
    3022:	db11      	blt.n	3048 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    3024:	2b20      	cmp	r3, #32
    3026:	d004      	beq.n	3032 <cdc_acm_class_handle_req+0x2a>
    3028:	2b22      	cmp	r3, #34	; 0x22
    302a:	d009      	beq.n	3040 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    302c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3030:	e005      	b.n	303e <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    3032:	6829      	ldr	r1, [r5, #0]
    3034:	2207      	movs	r2, #7
    3036:	3810      	subs	r0, #16
    3038:	f006 fe63 	bl	9d02 <memcpy>
			return 0;
    303c:	2000      	movs	r0, #0
}
    303e:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    3040:	8863      	ldrh	r3, [r4, #2]
    3042:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    3046:	e7f9      	b.n	303c <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    3048:	2b21      	cmp	r3, #33	; 0x21
    304a:	d1ef      	bne.n	302c <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    304c:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    304e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    3050:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    3052:	6033      	str	r3, [r6, #0]
			return 0;
    3054:	e7f2      	b.n	303c <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    3056:	f06f 0012 	mvn.w	r0, #18
    305a:	e7f0      	b.n	303e <cdc_acm_class_handle_req+0x36>
    305c:	200009b0 	.word	0x200009b0

00003060 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    3060:	b508      	push	{r3, lr}
    3062:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3064:	4803      	ldr	r0, [pc, #12]	; (3074 <cdc_acm_int_in+0x14>)
    3066:	f006 fce8 	bl	9a3a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    306a:	b110      	cbz	r0, 3072 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    306c:	2301      	movs	r3, #1
    306e:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3072:	bd08      	pop	{r3, pc}
    3074:	200009b0 	.word	0x200009b0

00003078 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3078:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    307a:	2301      	movs	r3, #1
    307c:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    3080:	680b      	ldr	r3, [r1, #0]
    3082:	b133      	cbz	r3, 3092 <cdc_acm_irq_rx_enable+0x1a>
    3084:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    3088:	b11b      	cbz	r3, 3092 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    308a:	4802      	ldr	r0, [pc, #8]	; (3094 <cdc_acm_irq_rx_enable+0x1c>)
    308c:	3108      	adds	r1, #8
    308e:	f007 bb74 	b.w	a77a <k_work_submit_to_queue>
	}
}
    3092:	4770      	bx	lr
    3094:	200004a0 	.word	0x200004a0

00003098 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3098:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    309a:	2301      	movs	r3, #1
    309c:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    30a0:	680b      	ldr	r3, [r1, #0]
    30a2:	b133      	cbz	r3, 30b2 <cdc_acm_irq_tx_enable+0x1a>
    30a4:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    30a8:	b11b      	cbz	r3, 30b2 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    30aa:	4802      	ldr	r0, [pc, #8]	; (30b4 <cdc_acm_irq_tx_enable+0x1c>)
    30ac:	3108      	adds	r1, #8
    30ae:	f007 bb64 	b.w	a77a <k_work_submit_to_queue>
}
    30b2:	4770      	bx	lr
    30b4:	200004a0 	.word	0x200004a0

000030b8 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    30b8:	4a0d      	ldr	r2, [pc, #52]	; (30f0 <cdc_acm_reset_port+0x38>)
{
    30ba:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    30bc:	2100      	movs	r1, #0
    30be:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    30c2:	6810      	ldr	r0, [r2, #0]
    30c4:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    30c8:	8890      	ldrh	r0, [r2, #4]
    30ca:	7992      	ldrb	r2, [r2, #6]
    30cc:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    30d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    30d4:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    30d8:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    30dc:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    30e0:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    30e4:	2240      	movs	r2, #64	; 0x40
    30e6:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    30ea:	f006 be15 	b.w	9d18 <memset>
    30ee:	bf00      	nop
    30f0:	0000aef8 	.word	0x0000aef8

000030f4 <cdc_acm_fifo_fill>:
{
    30f4:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    30f6:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    30f8:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    30fc:	b188      	cbz	r0, 3122 <cdc_acm_fifo_fill+0x2e>
    30fe:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    3102:	b97b      	cbnz	r3, 3124 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    3104:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3108:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    310c:	f006 fbe0 	bl	98d0 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3110:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3112:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3114:	2300      	movs	r3, #0
    3116:	4804      	ldr	r0, [pc, #16]	; (3128 <cdc_acm_fifo_fill+0x34>)
    3118:	f105 0118 	add.w	r1, r5, #24
    311c:	f005 f900 	bl	8320 <k_work_schedule_for_queue>
	return wrote;
    3120:	4620      	mov	r0, r4
}
    3122:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    3124:	2000      	movs	r0, #0
    3126:	e7fc      	b.n	3122 <cdc_acm_fifo_fill+0x2e>
    3128:	200004a0 	.word	0x200004a0

0000312c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    312c:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    312e:	6904      	ldr	r4, [r0, #16]
{
    3130:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    3134:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    3138:	b1a3      	cbz	r3, 3164 <cdc_acm_poll_out+0x38>
    313a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    313e:	b98b      	cbnz	r3, 3164 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3140:	f10d 0107 	add.w	r1, sp, #7
    3144:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    3148:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    314c:	2201      	movs	r2, #1
    314e:	f006 fbbf 	bl	98d0 <ring_buf_put>
    3152:	4601      	mov	r1, r0
    3154:	b140      	cbz	r0, 3168 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    3156:	480d      	ldr	r0, [pc, #52]	; (318c <cdc_acm_poll_out+0x60>)
    3158:	2221      	movs	r2, #33	; 0x21
    315a:	2300      	movs	r3, #0
    315c:	f104 0118 	add.w	r1, r4, #24
    3160:	f005 f8de 	bl	8320 <k_work_schedule_for_queue>
}
    3164:	b002      	add	sp, #8
    3166:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3168:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    316c:	2201      	movs	r2, #1
    316e:	f006 fc03 	bl	9978 <ring_buf_get>
    3172:	2800      	cmp	r0, #0
    3174:	d0f6      	beq.n	3164 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3176:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    317a:	2201      	movs	r2, #1
    317c:	f10d 0107 	add.w	r1, sp, #7
    3180:	f006 fba6 	bl	98d0 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3184:	2800      	cmp	r0, #0
    3186:	d1e6      	bne.n	3156 <cdc_acm_poll_out+0x2a>
    3188:	e7ec      	b.n	3164 <cdc_acm_poll_out+0x38>
    318a:	bf00      	nop
    318c:	200004a0 	.word	0x200004a0

00003190 <tx_work_handler>:
{
    3190:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    3192:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    3196:	685b      	ldr	r3, [r3, #4]
    3198:	6a1b      	ldr	r3, [r3, #32]
    319a:	7d1f      	ldrb	r7, [r3, #20]
{
    319c:	b085      	sub	sp, #20
    319e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    31a0:	4638      	mov	r0, r7
    31a2:	f006 fc60 	bl	9a66 <usb_transfer_is_busy>
    31a6:	4606      	mov	r6, r0
    31a8:	b9e0      	cbnz	r0, 31e4 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    31aa:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    31ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31b0:	a903      	add	r1, sp, #12
    31b2:	f006 fbac 	bl	990e <ring_buf_get_claim>
	if (!len) {
    31b6:	4604      	mov	r4, r0
    31b8:	b1a0      	cbz	r0, 31e4 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    31ba:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    31bc:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    31c0:	bf08      	it	eq
    31c2:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
    31c6:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    31ca:	9301      	str	r3, [sp, #4]
    31cc:	4b06      	ldr	r3, [pc, #24]	; (31e8 <tx_work_handler+0x58>)
    31ce:	9903      	ldr	r1, [sp, #12]
    31d0:	9300      	str	r3, [sp, #0]
    31d2:	4622      	mov	r2, r4
    31d4:	2302      	movs	r3, #2
    31d6:	4638      	mov	r0, r7
    31d8:	f7ff fe48 	bl	2e6c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    31dc:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    31de:	4621      	mov	r1, r4
    31e0:	f006 fbb5 	bl	994e <ring_buf_get_finish>
}
    31e4:	b005      	add	sp, #20
    31e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e8:	000031ed 	.word	0x000031ed

000031ec <cdc_acm_write_cb>:
{
    31ec:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    31ee:	2301      	movs	r3, #1
    31f0:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    31f4:	6813      	ldr	r3, [r2, #0]
{
    31f6:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    31f8:	b13b      	cbz	r3, 320a <cdc_acm_write_cb+0x1e>
    31fa:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    31fe:	b123      	cbz	r3, 320a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3200:	480a      	ldr	r0, [pc, #40]	; (322c <cdc_acm_write_cb+0x40>)
    3202:	f102 0108 	add.w	r1, r2, #8
    3206:	f007 fab8 	bl	a77a <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    320a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    320e:	689a      	ldr	r2, [r3, #8]
    3210:	691b      	ldr	r3, [r3, #16]
    3212:	429a      	cmp	r2, r3
    3214:	d008      	beq.n	3228 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3216:	f104 0118 	add.w	r1, r4, #24
    321a:	4804      	ldr	r0, [pc, #16]	; (322c <cdc_acm_write_cb+0x40>)
}
    321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3220:	2200      	movs	r2, #0
    3222:	2300      	movs	r3, #0
    3224:	f005 b87c 	b.w	8320 <k_work_schedule_for_queue>
}
    3228:	bd10      	pop	{r4, pc}
    322a:	bf00      	nop
    322c:	200004a0 	.word	0x200004a0

00003230 <cdc_acm_init>:
{
    3230:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3232:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    3234:	2300      	movs	r3, #0
    3236:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    323a:	4b0c      	ldr	r3, [pc, #48]	; (326c <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    323c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    3240:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3242:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3246:	b969      	cbnz	r1, 3264 <cdc_acm_init+0x34>
	list->head = node;
    3248:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    324c:	f104 0008 	add.w	r0, r4, #8
    3250:	4907      	ldr	r1, [pc, #28]	; (3270 <cdc_acm_init+0x40>)
    3252:	f007 fa75 	bl	a740 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    3256:	f104 0018 	add.w	r0, r4, #24
    325a:	4906      	ldr	r1, [pc, #24]	; (3274 <cdc_acm_init+0x44>)
    325c:	f007 fa9e 	bl	a79c <k_work_init_delayable>
}
    3260:	2000      	movs	r0, #0
    3262:	bd10      	pop	{r4, pc}
	parent->next = child;
    3264:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3266:	605a      	str	r2, [r3, #4]
}
    3268:	e7f0      	b.n	324c <cdc_acm_init+0x1c>
    326a:	bf00      	nop
    326c:	200009b0 	.word	0x200009b0
    3270:	00009a91 	.word	0x00009a91
    3274:	00003191 	.word	0x00003191

00003278 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    3278:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    327a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    327e:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3280:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3282:	4c0d      	ldr	r4, [pc, #52]	; (32b8 <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    3284:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    3286:	f242 00a1 	movw	r0, #8353	; 0x20a1
    328a:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    328e:	2300      	movs	r3, #0
    3290:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3294:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    3296:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    329a:	7900      	ldrb	r0, [r0, #4]
    329c:	220a      	movs	r2, #10
    329e:	a901      	add	r1, sp, #4
    32a0:	f006 fb99 	bl	99d6 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    32a4:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    32a8:	b923      	cbnz	r3, 32b4 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    32aa:	2001      	movs	r0, #1
    32ac:	f007 fb99 	bl	a9e2 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    32b0:	3c01      	subs	r4, #1
    32b2:	d1f7      	bne.n	32a4 <cdc_acm_send_notification.isra.0+0x2c>
}
    32b4:	b005      	add	sp, #20
    32b6:	bd30      	pop	{r4, r5, pc}
    32b8:	000186a1 	.word	0x000186a1

000032bc <cdc_acm_read_cb>:
{
    32bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    32be:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    32c0:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    32c4:	1e0a      	subs	r2, r1, #0
{
    32c6:	4605      	mov	r5, r0
	if (size <= 0) {
    32c8:	dd1f      	ble.n	330a <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    32ca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    32ce:	4631      	mov	r1, r6
    32d0:	f006 fafe 	bl	98d0 <ring_buf_put>
	dev_data->rx_ready = true;
    32d4:	2301      	movs	r3, #1
    32d6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    32da:	6823      	ldr	r3, [r4, #0]
    32dc:	b13b      	cbz	r3, 32ee <cdc_acm_read_cb+0x32>
    32de:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    32e2:	b123      	cbz	r3, 32ee <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    32e4:	480e      	ldr	r0, [pc, #56]	; (3320 <cdc_acm_read_cb+0x64>)
    32e6:	f104 0108 	add.w	r1, r4, #8
    32ea:	f007 fa46 	bl	a77a <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    32ee:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    32f2:	684b      	ldr	r3, [r1, #4]
    32f4:	694a      	ldr	r2, [r1, #20]
    32f6:	1a9a      	subs	r2, r3, r2
    32f8:	69cb      	ldr	r3, [r1, #28]
    32fa:	1a9b      	subs	r3, r3, r2
    32fc:	2b3f      	cmp	r3, #63	; 0x3f
    32fe:	d804      	bhi.n	330a <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    3300:	2301      	movs	r3, #1
    3302:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    3306:	b002      	add	sp, #8
    3308:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    330a:	4b06      	ldr	r3, [pc, #24]	; (3324 <cdc_acm_read_cb+0x68>)
    330c:	9300      	str	r3, [sp, #0]
    330e:	9401      	str	r4, [sp, #4]
    3310:	2301      	movs	r3, #1
    3312:	2240      	movs	r2, #64	; 0x40
    3314:	4631      	mov	r1, r6
    3316:	4628      	mov	r0, r5
    3318:	f7ff fda8 	bl	2e6c <usb_transfer>
    331c:	e7f3      	b.n	3306 <cdc_acm_read_cb+0x4a>
    331e:	bf00      	nop
    3320:	200004a0 	.word	0x200004a0
    3324:	000032bd 	.word	0x000032bd

00003328 <cdc_acm_dev_status_cb>:
{
    3328:	b538      	push	{r3, r4, r5, lr}
    332a:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    332c:	4601      	mov	r1, r0
    332e:	481e      	ldr	r0, [pc, #120]	; (33a8 <cdc_acm_dev_status_cb+0x80>)
    3330:	f006 fb69 	bl	9a06 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3334:	4604      	mov	r4, r0
    3336:	b380      	cbz	r0, 339a <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    3338:	4602      	mov	r2, r0
	switch (status) {
    333a:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    333c:	f852 39a4 	ldr.w	r3, [r2], #-164
    3340:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    3342:	2905      	cmp	r1, #5
    3344:	d829      	bhi.n	339a <cdc_acm_dev_status_cb+0x72>
    3346:	e8df f001 	tbb	[pc, r1]
    334a:	2820      	.short	0x2820
    334c:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    3350:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    3354:	b931      	cbnz	r1, 3364 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    3356:	6a1b      	ldr	r3, [r3, #32]
    3358:	7b18      	ldrb	r0, [r3, #12]
    335a:	f7ff ffaf 	bl	32bc <cdc_acm_read_cb>
			dev_data->configured = true;
    335e:	2301      	movs	r3, #1
    3360:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    3364:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    3368:	b9bb      	cbnz	r3, 339a <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    336a:	2301      	movs	r3, #1
    336c:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    3370:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    3374:	b18b      	cbz	r3, 339a <cdc_acm_dev_status_cb+0x72>
    3376:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    337a:	b173      	cbz	r3, 339a <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    337c:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    3380:	480a      	ldr	r0, [pc, #40]	; (33ac <cdc_acm_dev_status_cb+0x84>)
}
    3382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3386:	f007 b9f8 	b.w	a77a <k_work_submit_to_queue>
}
    338a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    338e:	4610      	mov	r0, r2
    3390:	f7ff be92 	b.w	30b8 <cdc_acm_reset_port>
		dev_data->suspended = true;
    3394:	2301      	movs	r3, #1
			dev_data->suspended = false;
    3396:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    339a:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    339c:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    33a0:	2b00      	cmp	r3, #0
    33a2:	d0fa      	beq.n	339a <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    33a4:	2300      	movs	r3, #0
    33a6:	e7f6      	b.n	3396 <cdc_acm_dev_status_cb+0x6e>
    33a8:	200009b0 	.word	0x200009b0
    33ac:	200004a0 	.word	0x200004a0

000033b0 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    33b0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    33b2:	4d09      	ldr	r5, [pc, #36]	; (33d8 <z_usb_work_q_init+0x28>)
    33b4:	4909      	ldr	r1, [pc, #36]	; (33dc <z_usb_work_q_init+0x2c>)
    33b6:	2400      	movs	r4, #0
    33b8:	9400      	str	r4, [sp, #0]
    33ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    33c2:	4628      	mov	r0, r5
    33c4:	f004 ff74 	bl	82b0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    33c8:	4905      	ldr	r1, [pc, #20]	; (33e0 <z_usb_work_q_init+0x30>)
    33ca:	4628      	mov	r0, r5
    33cc:	f007 f8e7 	bl	a59e <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    33d0:	4620      	mov	r0, r4
    33d2:	b003      	add	sp, #12
    33d4:	bd30      	pop	{r4, r5, pc}
    33d6:	bf00      	nop
    33d8:	200004a0 	.word	0x200004a0
    33dc:	20002180 	.word	0x20002180
    33e0:	0000b338 	.word	0x0000b338

000033e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    33e4:	4801      	ldr	r0, [pc, #4]	; (33ec <nrf_cc3xx_platform_abort_init+0x8>)
    33e6:	f005 bd27 	b.w	8e38 <nrf_cc3xx_platform_set_abort>
    33ea:	bf00      	nop
    33ec:	0000af70 	.word	0x0000af70

000033f0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    33f0:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    33f2:	4604      	mov	r4, r0
    33f4:	b918      	cbnz	r0, 33fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    33f6:	4b0f      	ldr	r3, [pc, #60]	; (3434 <mutex_free_platform+0x44>)
    33f8:	480f      	ldr	r0, [pc, #60]	; (3438 <mutex_free_platform+0x48>)
    33fa:	685b      	ldr	r3, [r3, #4]
    33fc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    33fe:	6861      	ldr	r1, [r4, #4]
    3400:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3404:	d00f      	beq.n	3426 <mutex_free_platform+0x36>
    3406:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    340a:	d00c      	beq.n	3426 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    340c:	4d0b      	ldr	r5, [pc, #44]	; (343c <mutex_free_platform+0x4c>)
    340e:	42a9      	cmp	r1, r5
    3410:	d009      	beq.n	3426 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3412:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    3416:	d007      	beq.n	3428 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3418:	4809      	ldr	r0, [pc, #36]	; (3440 <mutex_free_platform+0x50>)
    341a:	4621      	mov	r1, r4
    341c:	f007 f890 	bl	a540 <k_mem_slab_free>
        mutex->mutex = NULL;
    3420:	2300      	movs	r3, #0
    3422:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3424:	6065      	str	r5, [r4, #4]
}
    3426:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3428:	6820      	ldr	r0, [r4, #0]
    342a:	2214      	movs	r2, #20
    342c:	f006 fc74 	bl	9d18 <memset>
    3430:	e7f8      	b.n	3424 <mutex_free_platform+0x34>
    3432:	bf00      	nop
    3434:	200001e8 	.word	0x200001e8
    3438:	0000b341 	.word	0x0000b341
    343c:	a95c5f2c 	.word	0xa95c5f2c
    3440:	20000eb8 	.word	0x20000eb8

00003444 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3444:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3446:	b320      	cbz	r0, 3492 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3448:	6843      	ldr	r3, [r0, #4]
    344a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    344e:	d110      	bne.n	3472 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3450:	2201      	movs	r2, #1
    3452:	6803      	ldr	r3, [r0, #0]
    3454:	f3bf 8f5b 	dmb	ish
    3458:	e853 1f00 	ldrex	r1, [r3]
    345c:	2900      	cmp	r1, #0
    345e:	d103      	bne.n	3468 <mutex_lock_platform+0x24>
    3460:	e843 2000 	strex	r0, r2, [r3]
    3464:	2800      	cmp	r0, #0
    3466:	d1f7      	bne.n	3458 <mutex_lock_platform+0x14>
    3468:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    346c:	d10d      	bne.n	348a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    346e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3470:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3472:	4a09      	ldr	r2, [pc, #36]	; (3498 <mutex_lock_platform+0x54>)
    3474:	4293      	cmp	r3, r2
    3476:	d00a      	beq.n	348e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3478:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    347a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    347e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3482:	f004 fced 	bl	7e60 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3486:	2800      	cmp	r0, #0
    3488:	d0f1      	beq.n	346e <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    348a:	4804      	ldr	r0, [pc, #16]	; (349c <mutex_lock_platform+0x58>)
    348c:	e7f0      	b.n	3470 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    348e:	4804      	ldr	r0, [pc, #16]	; (34a0 <mutex_lock_platform+0x5c>)
    3490:	e7ee      	b.n	3470 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3492:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3496:	e7eb      	b.n	3470 <mutex_lock_platform+0x2c>
    3498:	a95c5f2c 	.word	0xa95c5f2c
    349c:	ffff8fe9 	.word	0xffff8fe9
    34a0:	ffff8fea 	.word	0xffff8fea

000034a4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    34a4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    34a6:	b1d8      	cbz	r0, 34e0 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    34a8:	6843      	ldr	r3, [r0, #4]
    34aa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    34ae:	d110      	bne.n	34d2 <mutex_unlock_platform+0x2e>
    34b0:	2200      	movs	r2, #0
    34b2:	6803      	ldr	r3, [r0, #0]
    34b4:	f3bf 8f5b 	dmb	ish
    34b8:	e853 1f00 	ldrex	r1, [r3]
    34bc:	2901      	cmp	r1, #1
    34be:	d103      	bne.n	34c8 <mutex_unlock_platform+0x24>
    34c0:	e843 2000 	strex	r0, r2, [r3]
    34c4:	2800      	cmp	r0, #0
    34c6:	d1f7      	bne.n	34b8 <mutex_unlock_platform+0x14>
    34c8:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    34cc:	d10b      	bne.n	34e6 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    34ce:	2000      	movs	r0, #0
    }
}
    34d0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    34d2:	4a07      	ldr	r2, [pc, #28]	; (34f0 <mutex_unlock_platform+0x4c>)
    34d4:	4293      	cmp	r3, r2
    34d6:	d008      	beq.n	34ea <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    34d8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    34da:	f004 fd3b 	bl	7f54 <z_impl_k_mutex_unlock>
    34de:	e7f6      	b.n	34ce <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    34e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    34e4:	e7f4      	b.n	34d0 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    34e6:	4803      	ldr	r0, [pc, #12]	; (34f4 <mutex_unlock_platform+0x50>)
    34e8:	e7f2      	b.n	34d0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    34ea:	4803      	ldr	r0, [pc, #12]	; (34f8 <mutex_unlock_platform+0x54>)
    34ec:	e7f0      	b.n	34d0 <mutex_unlock_platform+0x2c>
    34ee:	bf00      	nop
    34f0:	a95c5f2c 	.word	0xa95c5f2c
    34f4:	ffff8fe9 	.word	0xffff8fe9
    34f8:	ffff8fea 	.word	0xffff8fea

000034fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    34fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    34fe:	4604      	mov	r4, r0
    3500:	b918      	cbnz	r0, 350a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3502:	4b1d      	ldr	r3, [pc, #116]	; (3578 <mutex_init_platform+0x7c>)
    3504:	481d      	ldr	r0, [pc, #116]	; (357c <mutex_init_platform+0x80>)
    3506:	685b      	ldr	r3, [r3, #4]
    3508:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    350a:	6863      	ldr	r3, [r4, #4]
    350c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3510:	d02f      	beq.n	3572 <mutex_init_platform+0x76>
    3512:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3516:	d02c      	beq.n	3572 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3518:	4a19      	ldr	r2, [pc, #100]	; (3580 <mutex_init_platform+0x84>)
    351a:	4293      	cmp	r3, r2
    351c:	d119      	bne.n	3552 <mutex_init_platform+0x56>
    351e:	6823      	ldr	r3, [r4, #0]
    3520:	bb03      	cbnz	r3, 3564 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3522:	4818      	ldr	r0, [pc, #96]	; (3584 <mutex_init_platform+0x88>)
    3524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    352c:	4621      	mov	r1, r4
    352e:	f004 fb93 	bl	7c58 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3532:	b908      	cbnz	r0, 3538 <mutex_init_platform+0x3c>
    3534:	6823      	ldr	r3, [r4, #0]
    3536:	b91b      	cbnz	r3, 3540 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3538:	4b0f      	ldr	r3, [pc, #60]	; (3578 <mutex_init_platform+0x7c>)
    353a:	4813      	ldr	r0, [pc, #76]	; (3588 <mutex_init_platform+0x8c>)
    353c:	685b      	ldr	r3, [r3, #4]
    353e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3540:	6820      	ldr	r0, [r4, #0]
    3542:	2214      	movs	r2, #20
    3544:	2100      	movs	r1, #0
    3546:	f006 fbe7 	bl	9d18 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    354a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    354e:	6063      	str	r3, [r4, #4]
    3550:	e008      	b.n	3564 <mutex_init_platform+0x68>
    switch(flags){
    3552:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3556:	d80d      	bhi.n	3574 <mutex_init_platform+0x78>
    3558:	2b3a      	cmp	r3, #58	; 0x3a
    355a:	d003      	beq.n	3564 <mutex_init_platform+0x68>
    355c:	f640 62ba 	movw	r2, #3770	; 0xeba
    3560:	4293      	cmp	r3, r2
    3562:	d1de      	bne.n	3522 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3564:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3566:	f007 f82e 	bl	a5c6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    356a:	6863      	ldr	r3, [r4, #4]
    356c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    3570:	6063      	str	r3, [r4, #4]
}
    3572:	bd10      	pop	{r4, pc}
    switch(flags){
    3574:	4a05      	ldr	r2, [pc, #20]	; (358c <mutex_init_platform+0x90>)
    3576:	e7f3      	b.n	3560 <mutex_init_platform+0x64>
    3578:	200001e8 	.word	0x200001e8
    357c:	0000b341 	.word	0x0000b341
    3580:	a95c5f2c 	.word	0xa95c5f2c
    3584:	20000eb8 	.word	0x20000eb8
    3588:	0000b367 	.word	0x0000b367
    358c:	3a00003a 	.word	0x3a00003a

00003590 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3590:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3592:	4906      	ldr	r1, [pc, #24]	; (35ac <nrf_cc3xx_platform_mutex_init+0x1c>)
    3594:	4806      	ldr	r0, [pc, #24]	; (35b0 <nrf_cc3xx_platform_mutex_init+0x20>)
    3596:	2340      	movs	r3, #64	; 0x40
    3598:	2214      	movs	r2, #20
    359a:	f006 ffc3 	bl	a524 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    359e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    35a2:	4904      	ldr	r1, [pc, #16]	; (35b4 <nrf_cc3xx_platform_mutex_init+0x24>)
    35a4:	4804      	ldr	r0, [pc, #16]	; (35b8 <nrf_cc3xx_platform_mutex_init+0x28>)
    35a6:	f005 bcb9 	b.w	8f1c <nrf_cc3xx_platform_set_mutexes>
    35aa:	bf00      	nop
    35ac:	200009b8 	.word	0x200009b8
    35b0:	20000eb8 	.word	0x20000eb8
    35b4:	0000af78 	.word	0x0000af78
    35b8:	0000af8c 	.word	0x0000af8c

000035bc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    35bc:	4901      	ldr	r1, [pc, #4]	; (35c4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    35be:	2210      	movs	r2, #16
	str	r2, [r1]
    35c0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    35c2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    35c4:	e000ed10 	.word	0xe000ed10

000035c8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    35c8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    35ca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    35cc:	f380 8811 	msr	BASEPRI, r0
	isb
    35d0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    35d4:	f3bf 8f4f 	dsb	sy
    35d8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    35da:	b662      	cpsie	i
	isb
    35dc:	f3bf 8f6f 	isb	sy

	bx	lr
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop

000035e4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    35e4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    35e6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    35e8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    35ec:	f3bf 8f4f 	dsb	sy
    35f0:	bf20      	wfe

	msr	BASEPRI, r0
    35f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    35f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    35f8:	4770      	bx	lr
    35fa:	bf00      	nop

000035fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    35fc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    35fe:	2800      	cmp	r0, #0
    3600:	db07      	blt.n	3612 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3602:	4a04      	ldr	r2, [pc, #16]	; (3614 <arch_irq_enable+0x18>)
    3604:	0941      	lsrs	r1, r0, #5
    3606:	2301      	movs	r3, #1
    3608:	f000 001f 	and.w	r0, r0, #31
    360c:	4083      	lsls	r3, r0
    360e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3612:	4770      	bx	lr
    3614:	e000e100 	.word	0xe000e100

00003618 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3618:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    361a:	2800      	cmp	r0, #0
    361c:	db0c      	blt.n	3638 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    361e:	0943      	lsrs	r3, r0, #5
    3620:	4906      	ldr	r1, [pc, #24]	; (363c <arch_irq_disable+0x24>)
    3622:	f000 001f 	and.w	r0, r0, #31
    3626:	3320      	adds	r3, #32
    3628:	2201      	movs	r2, #1
    362a:	4082      	lsls	r2, r0
    362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3634:	f3bf 8f6f 	isb	sy
}
    3638:	4770      	bx	lr
    363a:	bf00      	nop
    363c:	e000e100 	.word	0xe000e100

00003640 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <arch_irq_is_enabled+0x18>)
    3642:	0942      	lsrs	r2, r0, #5
    3644:	f000 001f 	and.w	r0, r0, #31
    3648:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    364c:	2301      	movs	r3, #1
    364e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3652:	4010      	ands	r0, r2
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	e000e100 	.word	0xe000e100

0000365c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    365c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    365e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3660:	bfa8      	it	ge
    3662:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3666:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    366a:	bfb8      	it	lt
    366c:	4b06      	ldrlt	r3, [pc, #24]	; (3688 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    366e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3672:	bfac      	ite	ge
    3674:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3678:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    367c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    367e:	bfb4      	ite	lt
    3680:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3682:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3686:	4770      	bx	lr
    3688:	e000ed14 	.word	0xe000ed14

0000368c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    368c:	bf30      	wfi
    b z_SysNmiOnReset
    368e:	f7ff bffd 	b.w	368c <z_SysNmiOnReset>
    3692:	bf00      	nop

00003694 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3694:	4a0b      	ldr	r2, [pc, #44]	; (36c4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3696:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3698:	4b0b      	ldr	r3, [pc, #44]	; (36c8 <z_arm_prep_c+0x34>)
    369a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    369e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    36a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    36a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    36ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    36b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    36b4:	f004 fa0c 	bl	7ad0 <z_bss_zero>
	z_data_copy();
    36b8:	f005 f9ca 	bl	8a50 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    36bc:	f000 fa20 	bl	3b00 <z_arm_interrupt_init>
	z_cstart();
    36c0:	f004 fa4a 	bl	7b58 <z_cstart>
    36c4:	00001000 	.word	0x00001000
    36c8:	e000ed00 	.word	0xe000ed00

000036cc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    36cc:	4a09      	ldr	r2, [pc, #36]	; (36f4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    36ce:	490a      	ldr	r1, [pc, #40]	; (36f8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    36d0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    36d2:	6809      	ldr	r1, [r1, #0]
    36d4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    36d6:	4909      	ldr	r1, [pc, #36]	; (36fc <arch_swap+0x30>)
	_current->arch.basepri = key;
    36d8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    36da:	684b      	ldr	r3, [r1, #4]
    36dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    36e0:	604b      	str	r3, [r1, #4]
    36e2:	2300      	movs	r3, #0
    36e4:	f383 8811 	msr	BASEPRI, r3
    36e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    36ec:	6893      	ldr	r3, [r2, #8]
}
    36ee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	20001ad4 	.word	0x20001ad4
    36f8:	0000b138 	.word	0x0000b138
    36fc:	e000ed00 	.word	0xe000ed00

00003700 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3700:	4912      	ldr	r1, [pc, #72]	; (374c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3702:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3704:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3708:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    370a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    370e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3712:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3714:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3718:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    371c:	4f0c      	ldr	r7, [pc, #48]	; (3750 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    371e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3722:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3724:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3726:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3728:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    372a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    372c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    372e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3732:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3734:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3736:	f000 fa7f 	bl	3c38 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    373a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    373e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3742:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3746:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    374a:	4770      	bx	lr
    ldr r1, =_kernel
    374c:	20001ad4 	.word	0x20001ad4
    ldr v4, =_SCS_ICSR
    3750:	e000ed04 	.word	0xe000ed04

00003754 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3754:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3758:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    375a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    375e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3762:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3764:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3768:	2902      	cmp	r1, #2
    beq _oops
    376a:	d0ff      	beq.n	376c <_oops>

0000376c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    376c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    376e:	f006 fa9d 	bl	9cac <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3772:	bd01      	pop	{r0, pc}

00003774 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3774:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3778:	9b00      	ldr	r3, [sp, #0]
    377a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    377e:	490a      	ldr	r1, [pc, #40]	; (37a8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3780:	9b01      	ldr	r3, [sp, #4]
    3782:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3786:	9b02      	ldr	r3, [sp, #8]
    3788:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    378c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3794:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3798:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    379c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    379e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    37a0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    37a2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    37a4:	4770      	bx	lr
    37a6:	bf00      	nop
    37a8:	000091a7 	.word	0x000091a7

000037ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    37ac:	4a09      	ldr	r2, [pc, #36]	; (37d4 <z_check_thread_stack_fail+0x28>)
{
    37ae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    37b0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    37b2:	b170      	cbz	r0, 37d2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    37b4:	f113 0f16 	cmn.w	r3, #22
    37b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    37ba:	d005      	beq.n	37c8 <z_check_thread_stack_fail+0x1c>
    37bc:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    37c0:	429a      	cmp	r2, r3
    37c2:	d805      	bhi.n	37d0 <z_check_thread_stack_fail+0x24>
    37c4:	4283      	cmp	r3, r0
    37c6:	d203      	bcs.n	37d0 <z_check_thread_stack_fail+0x24>
		return 0;
    37c8:	4281      	cmp	r1, r0
    37ca:	bf28      	it	cs
    37cc:	2000      	movcs	r0, #0
    37ce:	4770      	bx	lr
    37d0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    37d2:	4770      	bx	lr
    37d4:	20001ad4 	.word	0x20001ad4

000037d8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    37d8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    37da:	4b09      	ldr	r3, [pc, #36]	; (3800 <arch_switch_to_main_thread+0x28>)
{
    37dc:	460d      	mov	r5, r1
    37de:	4614      	mov	r4, r2
	_current = main_thread;
    37e0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    37e2:	f000 fa29 	bl	3c38 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    37e6:	4620      	mov	r0, r4
    37e8:	f385 8809 	msr	PSP, r5
    37ec:	2100      	movs	r1, #0
    37ee:	b663      	cpsie	if
    37f0:	f381 8811 	msr	BASEPRI, r1
    37f4:	f3bf 8f6f 	isb	sy
    37f8:	2200      	movs	r2, #0
    37fa:	2300      	movs	r3, #0
    37fc:	f005 fcd3 	bl	91a6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3800:	20001ad4 	.word	0x20001ad4

00003804 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3804:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3806:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3808:	4a0b      	ldr	r2, [pc, #44]	; (3838 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    380a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    380c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    380e:	bf1e      	ittt	ne
	movne	r1, #0
    3810:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3812:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3814:	f006 fec8 	blne	a5a8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3818:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    381a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    381e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3822:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3826:	4905      	ldr	r1, [pc, #20]	; (383c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3828:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    382a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    382c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    382e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3832:	4903      	ldr	r1, [pc, #12]	; (3840 <_isr_wrapper+0x3c>)
	bx r1
    3834:	4708      	bx	r1
    3836:	0000      	.short	0x0000
	ldr r2, =_kernel
    3838:	20001ad4 	.word	0x20001ad4
	ldr r1, =_sw_isr_table
    383c:	0000ac8c 	.word	0x0000ac8c
	ldr r1, =z_arm_int_exit
    3840:	00003845 	.word	0x00003845

00003844 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3844:	4b04      	ldr	r3, [pc, #16]	; (3858 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3846:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3848:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    384a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    384c:	d003      	beq.n	3856 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    384e:	4903      	ldr	r1, [pc, #12]	; (385c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3854:	600a      	str	r2, [r1, #0]

00003856 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3856:	4770      	bx	lr
	ldr r3, =_kernel
    3858:	20001ad4 	.word	0x20001ad4
	ldr r1, =_SCS_ICSR
    385c:	e000ed04 	.word	0xe000ed04

00003860 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3860:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3862:	4b26      	ldr	r3, [pc, #152]	; (38fc <mem_manage_fault+0x9c>)
{
    3864:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3868:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    386c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    386e:	bf14      	ite	ne
    3870:	2411      	movne	r4, #17
    3872:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3874:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    387a:	bf18      	it	ne
    387c:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    387e:	0792      	lsls	r2, r2, #30
{
    3880:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3882:	d50a      	bpl.n	389a <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3884:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3888:	0614      	lsls	r4, r2, #24
    388a:	d534      	bpl.n	38f6 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    388c:	b119      	cbz	r1, 3896 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    388e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3894:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3896:	2413      	movs	r4, #19
    3898:	e001      	b.n	389e <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    389a:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    389e:	4b17      	ldr	r3, [pc, #92]	; (38fc <mem_manage_fault+0x9c>)
    38a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    38a2:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    38a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    38a8:	bf18      	it	ne
    38aa:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    38ac:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    38b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    38b2:	bf18      	it	ne
    38b4:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    38b6:	06d2      	lsls	r2, r2, #27
    38b8:	d402      	bmi.n	38c0 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    38ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    38bc:	079b      	lsls	r3, r3, #30
    38be:	d50a      	bpl.n	38d6 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    38c0:	4b0e      	ldr	r3, [pc, #56]	; (38fc <mem_manage_fault+0x9c>)
    38c2:	685b      	ldr	r3, [r3, #4]
    38c4:	0519      	lsls	r1, r3, #20
    38c6:	d506      	bpl.n	38d6 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    38c8:	4631      	mov	r1, r6
    38ca:	f7ff ff6f 	bl	37ac <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    38ce:	b110      	cbz	r0, 38d6 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    38d0:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    38d4:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    38d6:	4b09      	ldr	r3, [pc, #36]	; (38fc <mem_manage_fault+0x9c>)
    38d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38da:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    38dc:	bf42      	ittt	mi
    38de:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    38e0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    38e4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    38e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    38e8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    38ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    38ee:	2300      	movs	r3, #0
    38f0:	702b      	strb	r3, [r5, #0]

	return reason;
}
    38f2:	4620      	mov	r0, r4
    38f4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    38f6:	f06f 0015 	mvn.w	r0, #21
    38fa:	e7cc      	b.n	3896 <mem_manage_fault+0x36>
    38fc:	e000ed00 	.word	0xe000ed00

00003900 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3900:	4b13      	ldr	r3, [pc, #76]	; (3950 <usage_fault.constprop.0+0x50>)
    3902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3904:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    390a:	bf14      	ite	ne
    390c:	201e      	movne	r0, #30
    390e:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3910:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3916:	bf18      	it	ne
    3918:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    391a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3920:	bf18      	it	ne
    3922:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3924:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    392a:	bf18      	it	ne
    392c:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    392e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3934:	bf18      	it	ne
    3936:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3938:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    393c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    393e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3942:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3946:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3948:	bf18      	it	ne
    394a:	2024      	movne	r0, #36	; 0x24
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	e000ed00 	.word	0xe000ed00

00003954 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3954:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3956:	4b19      	ldr	r3, [pc, #100]	; (39bc <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3958:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    395a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    395c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    395e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    3962:	bf14      	ite	ne
    3964:	2017      	movne	r0, #23
    3966:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3968:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    396c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    396e:	bf18      	it	ne
    3970:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3972:	05a4      	lsls	r4, r4, #22
    3974:	d509      	bpl.n	398a <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    3976:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3978:	6a98      	ldr	r0, [r3, #40]	; 0x28
    397a:	0400      	lsls	r0, r0, #16
    397c:	d504      	bpl.n	3988 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    397e:	b11a      	cbz	r2, 3988 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3986:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3988:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    398a:	4b0c      	ldr	r3, [pc, #48]	; (39bc <bus_fault.constprop.0+0x68>)
    398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    398e:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3994:	bf18      	it	ne
    3996:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3998:	05d2      	lsls	r2, r2, #23
    399a:	d40c      	bmi.n	39b6 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    399e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    39a2:	bf18      	it	ne
    39a4:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    39a6:	4a05      	ldr	r2, [pc, #20]	; (39bc <bus_fault.constprop.0+0x68>)
    39a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    39aa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    39ae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    39b0:	2300      	movs	r3, #0
    39b2:	700b      	strb	r3, [r1, #0]
}
    39b4:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    39b6:	201b      	movs	r0, #27
    39b8:	e7f5      	b.n	39a6 <bus_fault.constprop.0+0x52>
    39ba:	bf00      	nop
    39bc:	e000ed00 	.word	0xe000ed00

000039c0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    39c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39c2:	4b45      	ldr	r3, [pc, #276]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    39c4:	685b      	ldr	r3, [r3, #4]
{
    39c6:	b08a      	sub	sp, #40	; 0x28
    39c8:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    39ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
    39ce:	2600      	movs	r6, #0
    39d0:	f386 8811 	msr	BASEPRI, r6
    39d4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    39d8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    39dc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    39e0:	d111      	bne.n	3a06 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    39e2:	f002 000c 	and.w	r0, r2, #12
    39e6:	2808      	cmp	r0, #8
    39e8:	d00d      	beq.n	3a06 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    39ea:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    39ec:	bf4c      	ite	mi
    39ee:	460d      	movmi	r5, r1
			*nested_exc = true;
    39f0:	2601      	movpl	r6, #1
	*recoverable = false;
    39f2:	2200      	movs	r2, #0
	switch (fault) {
    39f4:	3b03      	subs	r3, #3
	*recoverable = false;
    39f6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    39fa:	2b03      	cmp	r3, #3
    39fc:	d805      	bhi.n	3a0a <z_arm_fault+0x4a>
    39fe:	e8df f003 	tbb	[pc, r3]
    3a02:	5d1e      	.short	0x5d1e
    3a04:	5a61      	.short	0x5a61
		return NULL;
    3a06:	4635      	mov	r5, r6
    3a08:	e7f3      	b.n	39f2 <z_arm_fault+0x32>
    3a0a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3a10:	b99b      	cbnz	r3, 3a3a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3a12:	2220      	movs	r2, #32
    3a14:	4629      	mov	r1, r5
    3a16:	a802      	add	r0, sp, #8
    3a18:	f006 f973 	bl	9d02 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a1e:	2e00      	cmp	r6, #0
    3a20:	d054      	beq.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3a26:	b922      	cbnz	r2, 3a32 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3a28:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3a2c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3a30:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3a32:	a902      	add	r1, sp, #8
    3a34:	4620      	mov	r0, r4
    3a36:	f006 f937 	bl	9ca8 <z_arm_fatal_error>
}
    3a3a:	b00a      	add	sp, #40	; 0x28
    3a3c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3a3e:	4b26      	ldr	r3, [pc, #152]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a42:	0791      	lsls	r1, r2, #30
    3a44:	d4e1      	bmi.n	3a0a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a48:	2a00      	cmp	r2, #0
    3a4a:	dbde      	blt.n	3a0a <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a4e:	0052      	lsls	r2, r2, #1
    3a50:	d5db      	bpl.n	3a0a <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3a52:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3a54:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3a5a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a60:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3a64:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3a66:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3a6e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a74:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3a78:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3a7c:	4291      	cmp	r1, r2
    3a7e:	d00a      	beq.n	3a96 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a82:	b2d2      	uxtb	r2, r2
    3a84:	b14a      	cbz	r2, 3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
			reason = mem_manage_fault(esf, 1, recoverable);
    3a86:	f10d 0207 	add.w	r2, sp, #7
    3a8a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3a8c:	4628      	mov	r0, r5
    3a8e:	f7ff fee7 	bl	3860 <mem_manage_fault>
		reason = usage_fault(esf);
    3a92:	4604      	mov	r4, r0
		break;
    3a94:	e7ba      	b.n	3a0c <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    3a96:	682c      	ldr	r4, [r5, #0]
    3a98:	e7b8      	b.n	3a0c <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3a9c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3aa0:	d005      	beq.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
			reason = bus_fault(esf, 1, recoverable);
    3aa2:	f10d 0107 	add.w	r1, sp, #7
    3aa6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3aa8:	f7ff ff54 	bl	3954 <bus_fault.constprop.0>
    3aac:	e7f1      	b.n	3a92 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3ab4:	d3a9      	bcc.n	3a0a <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    3ab6:	f7ff ff23 	bl	3900 <usage_fault.constprop.0>
    3aba:	e7ea      	b.n	3a92 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3abc:	f10d 0207 	add.w	r2, sp, #7
    3ac0:	2100      	movs	r1, #0
    3ac2:	e7e3      	b.n	3a8c <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    3ac4:	f10d 0107 	add.w	r1, sp, #7
    3ac8:	2000      	movs	r0, #0
    3aca:	e7ed      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3acc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3ad0:	f023 0301 	bic.w	r3, r3, #1
    3ad4:	e7ac      	b.n	3a30 <z_arm_fault+0x70>
    3ad6:	bf00      	nop
    3ad8:	e000ed00 	.word	0xe000ed00

00003adc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3adc:	4a02      	ldr	r2, [pc, #8]	; (3ae8 <z_arm_fault_init+0xc>)
    3ade:	6953      	ldr	r3, [r2, #20]
    3ae0:	f043 0310 	orr.w	r3, r3, #16
    3ae4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3ae6:	4770      	bx	lr
    3ae8:	e000ed00 	.word	0xe000ed00

00003aec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3aec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3af0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3af4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3af6:	4672      	mov	r2, lr
	bl z_arm_fault
    3af8:	f7ff ff62 	bl	39c0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3afc:	bd01      	pop	{r0, pc}
    3afe:	bf00      	nop

00003b00 <z_arm_interrupt_init>:
    3b00:	4804      	ldr	r0, [pc, #16]	; (3b14 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3b02:	2300      	movs	r3, #0
    3b04:	2120      	movs	r1, #32
    3b06:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3b08:	3301      	adds	r3, #1
    3b0a:	2b30      	cmp	r3, #48	; 0x30
    3b0c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3b10:	d1f9      	bne.n	3b06 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3b12:	4770      	bx	lr
    3b14:	e000e100 	.word	0xe000e100

00003b18 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3b18:	2000      	movs	r0, #0
    msr CONTROL, r0
    3b1a:	f380 8814 	msr	CONTROL, r0
    isb
    3b1e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3b22:	f7fe fa4b 	bl	1fbc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3b26:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3b28:	490d      	ldr	r1, [pc, #52]	; (3b60 <__start+0x48>)
    str r0, [r1]
    3b2a:	6008      	str	r0, [r1, #0]
    dsb
    3b2c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3b30:	480c      	ldr	r0, [pc, #48]	; (3b64 <__start+0x4c>)
    msr msp, r0
    3b32:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3b36:	f000 f82b 	bl	3b90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3b3a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3b3c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3b40:	4809      	ldr	r0, [pc, #36]	; (3b68 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3b42:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    3b46:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3b48:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3b4c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3b50:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3b52:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3b54:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3b58:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3b5c:	f7ff fd9a 	bl	3694 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3b60:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3b64:	200037c0 	.word	0x200037c0
    ldr r0, =z_interrupt_stacks
    3b68:	20002a00 	.word	0x20002a00

00003b6c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3b6c:	4907      	ldr	r1, [pc, #28]	; (3b8c <z_arm_clear_arm_mpu_config+0x20>)
    3b6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3b72:	2300      	movs	r3, #0
	int num_regions =
    3b74:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3b78:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3b7a:	4293      	cmp	r3, r2
    3b7c:	db00      	blt.n	3b80 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3b7e:	4770      	bx	lr
  MPU->RNR = rnr;
    3b80:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3b84:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3b88:	3301      	adds	r3, #1
    3b8a:	e7f6      	b.n	3b7a <z_arm_clear_arm_mpu_config+0xe>
    3b8c:	e000ed00 	.word	0xe000ed00

00003b90 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3b90:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3b92:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3b94:	2300      	movs	r3, #0
    3b96:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3b9a:	f7ff ffe7 	bl	3b6c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3b9e:	4b14      	ldr	r3, [pc, #80]	; (3bf0 <z_arm_init_arch_hw_at_boot+0x60>)
    3ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3bb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3bbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3bc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3bc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3bc8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3bcc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3bd0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3bd4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3bd8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3bdc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3be0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3be4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bea:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3bee:	bd08      	pop	{r3, pc}
    3bf0:	e000e100 	.word	0xe000e100

00003bf4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3bf4:	4b08      	ldr	r3, [pc, #32]	; (3c18 <z_impl_k_thread_abort+0x24>)
    3bf6:	689b      	ldr	r3, [r3, #8]
    3bf8:	4283      	cmp	r3, r0
    3bfa:	d10b      	bne.n	3c14 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3bfc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3c00:	b143      	cbz	r3, 3c14 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c02:	4b06      	ldr	r3, [pc, #24]	; (3c1c <z_impl_k_thread_abort+0x28>)
    3c04:	685a      	ldr	r2, [r3, #4]
    3c06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3c0a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3c12:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3c14:	f004 beaa 	b.w	896c <z_thread_abort>
    3c18:	20001ad4 	.word	0x20001ad4
    3c1c:	e000ed00 	.word	0xe000ed00

00003c20 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3c20:	4b02      	ldr	r3, [pc, #8]	; (3c2c <z_arm_configure_static_mpu_regions+0xc>)
    3c22:	4a03      	ldr	r2, [pc, #12]	; (3c30 <z_arm_configure_static_mpu_regions+0x10>)
    3c24:	4803      	ldr	r0, [pc, #12]	; (3c34 <z_arm_configure_static_mpu_regions+0x14>)
    3c26:	2101      	movs	r1, #1
    3c28:	f000 b870 	b.w	3d0c <arm_core_mpu_configure_static_mpu_regions>
    3c2c:	20040000 	.word	0x20040000
    3c30:	20000000 	.word	0x20000000
    3c34:	0000af9c 	.word	0x0000af9c

00003c38 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3c38:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3c3c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    3c3e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3c40:	4a04      	ldr	r2, [pc, #16]	; (3c54 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3c42:	2140      	movs	r1, #64	; 0x40
    3c44:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3c48:	4618      	mov	r0, r3
    3c4a:	2101      	movs	r1, #1
    3c4c:	f000 b868 	b.w	3d20 <arm_core_mpu_configure_dynamic_mpu_regions>
    3c50:	20000ed4 	.word	0x20000ed4
    3c54:	150b0000 	.word	0x150b0000

00003c58 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3c58:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3c5a:	4e20      	ldr	r6, [pc, #128]	; (3cdc <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3c5c:	2500      	movs	r5, #0
    3c5e:	428d      	cmp	r5, r1
    3c60:	da39      	bge.n	3cd6 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    3c62:	6844      	ldr	r4, [r0, #4]
    3c64:	b374      	cbz	r4, 3cc4 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3c66:	b153      	cbz	r3, 3c7e <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3c68:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3c6c:	ea14 0f0c 	tst.w	r4, ip
    3c70:	d12f      	bne.n	3cd2 <mpu_configure_regions+0x7a>
		&&
    3c72:	2c1f      	cmp	r4, #31
    3c74:	d92d      	bls.n	3cd2 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    3c76:	6807      	ldr	r7, [r0, #0]
		&&
    3c78:	ea1c 0f07 	tst.w	ip, r7
    3c7c:	d129      	bne.n	3cd2 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3c7e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3c80:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3c82:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3c86:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3c8a:	d91e      	bls.n	3cca <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    3c8c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3c90:	d81d      	bhi.n	3cce <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3c92:	3c01      	subs	r4, #1
    3c94:	fab4 f484 	clz	r4, r4
    3c98:	f1c4 041f 	rsb	r4, r4, #31
    3c9c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3c9e:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3ca2:	ea4c 0c04 	orr.w	ip, ip, r4
    3ca6:	d814      	bhi.n	3cd2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ca8:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3cac:	4314      	orrs	r4, r2
    3cae:	f044 0410 	orr.w	r4, r4, #16
    3cb2:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3cb6:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3cba:	f04c 0401 	orr.w	r4, ip, #1
    3cbe:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3cc2:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3cc4:	3501      	adds	r5, #1
    3cc6:	300c      	adds	r0, #12
    3cc8:	e7c9      	b.n	3c5e <mpu_configure_regions+0x6>
		return REGION_32B;
    3cca:	2408      	movs	r4, #8
    3ccc:	e7e7      	b.n	3c9e <mpu_configure_regions+0x46>
		return REGION_4G;
    3cce:	243e      	movs	r4, #62	; 0x3e
    3cd0:	e7e5      	b.n	3c9e <mpu_configure_regions+0x46>
			return -EINVAL;
    3cd2:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    3cd6:	4610      	mov	r0, r2
    3cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cda:	bf00      	nop
    3cdc:	e000ed00 	.word	0xe000ed00

00003ce0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3ce0:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <arm_core_mpu_enable+0x14>)
    3ce2:	2205      	movs	r2, #5
    3ce4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3cec:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3cf0:	4770      	bx	lr
    3cf2:	bf00      	nop
    3cf4:	e000ed00 	.word	0xe000ed00

00003cf8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3cf8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3cfc:	4b02      	ldr	r3, [pc, #8]	; (3d08 <arm_core_mpu_disable+0x10>)
    3cfe:	2200      	movs	r2, #0
    3d00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop
    3d08:	e000ed00 	.word	0xe000ed00

00003d0c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3d0c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3d0e:	4c03      	ldr	r4, [pc, #12]	; (3d1c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3d10:	2301      	movs	r3, #1
    3d12:	7822      	ldrb	r2, [r4, #0]
    3d14:	f7ff ffa0 	bl	3c58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3d18:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3d1a:	bd10      	pop	{r4, pc}
    3d1c:	20001cfc 	.word	0x20001cfc

00003d20 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3d20:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3d22:	4a09      	ldr	r2, [pc, #36]	; (3d48 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3d24:	2300      	movs	r3, #0
    3d26:	7812      	ldrb	r2, [r2, #0]
    3d28:	f7ff ff96 	bl	3c58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3d2c:	f110 0f16 	cmn.w	r0, #22
    3d30:	d002      	beq.n	3d38 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    3d32:	4a06      	ldr	r2, [pc, #24]	; (3d4c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3d34:	2807      	cmp	r0, #7
    3d36:	dd00      	ble.n	3d3a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3d38:	bd08      	pop	{r3, pc}
    3d3a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3d3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3d42:	3001      	adds	r0, #1
    3d44:	e7f6      	b.n	3d34 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3d46:	bf00      	nop
    3d48:	20001cfc 	.word	0x20001cfc
    3d4c:	e000ed00 	.word	0xe000ed00

00003d50 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3d50:	4914      	ldr	r1, [pc, #80]	; (3da4 <z_arm_mpu_init+0x54>)
    3d52:	6808      	ldr	r0, [r1, #0]
    3d54:	2808      	cmp	r0, #8
{
    3d56:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3d58:	d821      	bhi.n	3d9e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3d5a:	f7ff ffcd 	bl	3cf8 <arm_core_mpu_disable>
    3d5e:	4c12      	ldr	r4, [pc, #72]	; (3da8 <z_arm_mpu_init+0x58>)
    3d60:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3d62:	2200      	movs	r2, #0
    3d64:	4290      	cmp	r0, r2
    3d66:	f101 010c 	add.w	r1, r1, #12
    3d6a:	d105      	bne.n	3d78 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3d6c:	4b0f      	ldr	r3, [pc, #60]	; (3dac <z_arm_mpu_init+0x5c>)
    3d6e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3d70:	f7ff ffb6 	bl	3ce0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3d74:	2000      	movs	r0, #0
}
    3d76:	bd10      	pop	{r4, pc}
    3d78:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3d7c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3d80:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3d84:	4313      	orrs	r3, r2
    3d86:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3d8a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3d92:	f043 0301 	orr.w	r3, r3, #1
    3d96:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3d9a:	3201      	adds	r2, #1
    3d9c:	e7e2      	b.n	3d64 <z_arm_mpu_init+0x14>
		return -1;
    3d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3da2:	e7e8      	b.n	3d76 <z_arm_mpu_init+0x26>
    3da4:	0000afa8 	.word	0x0000afa8
    3da8:	e000ed00 	.word	0xe000ed00
    3dac:	20001cfc 	.word	0x20001cfc

00003db0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3db0:	4b01      	ldr	r3, [pc, #4]	; (3db8 <__stdout_hook_install+0x8>)
    3db2:	6018      	str	r0, [r3, #0]
}
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop
    3db8:	20000130 	.word	0x20000130

00003dbc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3dbc:	f04f 0320 	mov.w	r3, #32
    3dc0:	f3ef 8211 	mrs	r2, BASEPRI
    3dc4:	f383 8812 	msr	BASEPRI_MAX, r3
    3dc8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3dcc:	4906      	ldr	r1, [pc, #24]	; (3de8 <nordicsemi_nrf52_init+0x2c>)
    3dce:	2301      	movs	r3, #1
    3dd0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3dd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3dd8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    3ddc:	f382 8811 	msr	BASEPRI, r2
    3de0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3de4:	2000      	movs	r0, #0
    3de6:	4770      	bx	lr
    3de8:	4001e000 	.word	0x4001e000

00003dec <sys_arch_reboot>:
    *p_gpregret = val;
    3dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3df0:	b2c0      	uxtb	r0, r0
    3df2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3df6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3dfa:	4905      	ldr	r1, [pc, #20]	; (3e10 <sys_arch_reboot+0x24>)
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <sys_arch_reboot+0x28>)
    3dfe:	68ca      	ldr	r2, [r1, #12]
    3e00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3e04:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3e06:	60cb      	str	r3, [r1, #12]
    3e08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3e0c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3e0e:	e7fd      	b.n	3e0c <sys_arch_reboot+0x20>
    3e10:	e000ed00 	.word	0xe000ed00
    3e14:	05fa0004 	.word	0x05fa0004

00003e18 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3e18:	b120      	cbz	r0, 3e24 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3e1a:	4b03      	ldr	r3, [pc, #12]	; (3e28 <arch_busy_wait+0x10>)
    3e1c:	0180      	lsls	r0, r0, #6
    3e1e:	f043 0301 	orr.w	r3, r3, #1
    3e22:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3e24:	4770      	bx	lr
    3e26:	bf00      	nop
    3e28:	0000af00 	.word	0x0000af00

00003e2c <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    3e2c:	b510      	push	{r4, lr}
    3e2e:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    3e30:	4601      	mov	r1, r0
    3e32:	4808      	ldr	r0, [pc, #32]	; (3e54 <hid_int_in+0x28>)
    3e34:	f005 fe01 	bl	9a3a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3e38:	b150      	cbz	r0, 3e50 <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    3e3a:	2c02      	cmp	r4, #2
    3e3c:	d108      	bne.n	3e50 <hid_int_in+0x24>
    3e3e:	f850 3c08 	ldr.w	r3, [r0, #-8]
    3e42:	b12b      	cbz	r3, 3e50 <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
    3e44:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    3e46:	b11b      	cbz	r3, 3e50 <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    3e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
    3e4c:	6800      	ldr	r0, [r0, #0]
    3e4e:	4718      	bx	r3
}
    3e50:	bd10      	pop	{r4, pc}
    3e52:	bf00      	nop
    3e54:	20000ef8 	.word	0x20000ef8

00003e58 <hid_custom_handle_req>:
{
    3e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (usb_reqtype_is_to_host(setup) &&
    3e5a:	f990 3000 	ldrsb.w	r3, [r0]
    3e5e:	2b00      	cmp	r3, #0
{
    3e60:	4604      	mov	r4, r0
    3e62:	460d      	mov	r5, r1
    3e64:	4617      	mov	r7, r2
	if (usb_reqtype_is_to_host(setup) &&
    3e66:	db02      	blt.n	3e6e <hid_custom_handle_req+0x16>
			return -EINVAL;
    3e68:	f06f 0015 	mvn.w	r0, #21
}
    3e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    3e6e:	8803      	ldrh	r3, [r0, #0]
    3e70:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    3e74:	b29b      	uxth	r3, r3
    3e76:	f240 6201 	movw	r2, #1537	; 0x601
    3e7a:	4293      	cmp	r3, r2
    3e7c:	d1f4      	bne.n	3e68 <hid_custom_handle_req+0x10>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3e7e:	8846      	ldrh	r6, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    3e80:	7901      	ldrb	r1, [r0, #4]
    3e82:	4812      	ldr	r0, [pc, #72]	; (3ecc <hid_custom_handle_req+0x74>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3e84:	0a36      	lsrs	r6, r6, #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    3e86:	f005 fdca 	bl	9a1e <usb_get_dev_data_by_iface>
		if (common == NULL) {
    3e8a:	2800      	cmp	r0, #0
    3e8c:	d0ec      	beq.n	3e68 <hid_custom_handle_req+0x10>
		switch (value) {
    3e8e:	2e21      	cmp	r6, #33	; 0x21
    3e90:	d004      	beq.n	3e9c <hid_custom_handle_req+0x44>
    3e92:	2e22      	cmp	r6, #34	; 0x22
    3e94:	d00f      	beq.n	3eb6 <hid_custom_handle_req+0x5e>
    3e96:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e9a:	e7e7      	b.n	3e6c <hid_custom_handle_req+0x14>
			cfg = common->dev->config;
    3e9c:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    3e9e:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    3ea0:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    3ea2:	685b      	ldr	r3, [r3, #4]
    3ea4:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    3ea8:	4291      	cmp	r1, r2
    3eaa:	bf94      	ite	ls
    3eac:	6029      	strls	r1, [r5, #0]
    3eae:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    3eb0:	603b      	str	r3, [r7, #0]
		return 0;
    3eb2:	2000      	movs	r0, #0
    3eb4:	e7da      	b.n	3e6c <hid_custom_handle_req+0x14>
			*len = MIN(setup->wLength, dev_data->report_size);
    3eb6:	88e3      	ldrh	r3, [r4, #6]
    3eb8:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    3ebc:	429a      	cmp	r2, r3
    3ebe:	bf94      	ite	ls
    3ec0:	602a      	strls	r2, [r5, #0]
    3ec2:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    3ec4:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
    3ec8:	e7f2      	b.n	3eb0 <hid_custom_handle_req+0x58>
    3eca:	bf00      	nop
    3ecc:	20000ef8 	.word	0x20000ef8

00003ed0 <hid_class_handle_req>:
{
    3ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ed4:	4604      	mov	r4, r0
    3ed6:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    3ed8:	7901      	ldrb	r1, [r0, #4]
    3eda:	4814      	ldr	r0, [pc, #80]	; (3f2c <hid_class_handle_req+0x5c>)
{
    3edc:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    3ede:	f005 fd9e 	bl	9a1e <usb_get_dev_data_by_iface>
	if (common == NULL) {
    3ee2:	4605      	mov	r5, r0
    3ee4:	b1d0      	cbz	r0, 3f1c <hid_class_handle_req+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
    3ee6:	f994 2000 	ldrsb.w	r2, [r4]
	dev = common->dev;
    3eea:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    3eec:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3eee:	2a00      	cmp	r2, #0
    3ef0:	da0d      	bge.n	3f0e <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
    3ef2:	2b01      	cmp	r3, #1
    3ef4:	d116      	bne.n	3f24 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
    3ef6:	f855 3c08 	ldr.w	r3, [r5, #-8]
    3efa:	b19b      	cbz	r3, 3f24 <hid_class_handle_req+0x54>
    3efc:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    3efe:	b18d      	cbz	r5, 3f24 <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
    3f00:	463b      	mov	r3, r7
    3f02:	4632      	mov	r2, r6
    3f04:	4621      	mov	r1, r4
    3f06:	46ac      	mov	ip, r5
}
    3f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
    3f0c:	4760      	bx	ip
		switch (setup->bRequest) {
    3f0e:	2b09      	cmp	r3, #9
    3f10:	d108      	bne.n	3f24 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    3f12:	f855 3c08 	ldr.w	r3, [r5, #-8]
    3f16:	b12b      	cbz	r3, 3f24 <hid_class_handle_req+0x54>
    3f18:	685d      	ldr	r5, [r3, #4]
    3f1a:	e7f0      	b.n	3efe <hid_class_handle_req+0x2e>
		return -ENODEV;
    3f1c:	f06f 0012 	mvn.w	r0, #18
}
    3f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return hid_on_get_idle(dev_data, setup, len, data);
    3f24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f28:	e7fa      	b.n	3f20 <hid_class_handle_req+0x50>
    3f2a:	bf00      	nop
    3f2c:	20000ef8 	.word	0x20000ef8

00003f30 <hid_status_cb>:
{
    3f30:	b510      	push	{r4, lr}
    3f32:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    3f34:	4601      	mov	r1, r0
    3f36:	480f      	ldr	r0, [pc, #60]	; (3f74 <hid_status_cb+0x44>)
    3f38:	f005 fd65 	bl	9a06 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3f3c:	b150      	cbz	r0, 3f54 <hid_status_cb+0x24>
	switch (status) {
    3f3e:	1e61      	subs	r1, r4, #1
    3f40:	2905      	cmp	r1, #5
    3f42:	d807      	bhi.n	3f54 <hid_status_cb+0x24>
    3f44:	e8df f001 	tbb	[pc, r1]
    3f48:	07030607 	.word	0x07030607
    3f4c:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
    3f4e:	2301      	movs	r3, #1
    3f50:	f800 3c04 	strb.w	r3, [r0, #-4]
}
    3f54:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
    3f56:	2300      	movs	r3, #0
    3f58:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
    3f5c:	f800 3c03 	strb.w	r3, [r0, #-3]
    3f60:	e7f8      	b.n	3f54 <hid_status_cb+0x24>
		dev_data->suspended = true;
    3f62:	2301      	movs	r3, #1
    3f64:	e7fa      	b.n	3f5c <hid_status_cb+0x2c>
		if (dev_data->suspended) {
    3f66:	f810 3c03 	ldrb.w	r3, [r0, #-3]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d0f2      	beq.n	3f54 <hid_status_cb+0x24>
			dev_data->suspended = false;
    3f6e:	2300      	movs	r3, #0
    3f70:	e7f4      	b.n	3f5c <hid_status_cb+0x2c>
    3f72:	bf00      	nop
    3f74:	20000ef8 	.word	0x20000ef8

00003f78 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    3f78:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    3f7a:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    3f7c:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    3f80:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    3f82:	2300      	movs	r3, #0
    3f84:	6163      	str	r3, [r4, #20]
	return list->tail;
    3f86:	4b06      	ldr	r3, [pc, #24]	; (3fa0 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    3f88:	6120      	str	r0, [r4, #16]
    3f8a:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    3f8c:	f104 0214 	add.w	r2, r4, #20
Z_GENLIST_APPEND(slist, snode)
    3f90:	b911      	cbnz	r1, 3f98 <usb_hid_register_device+0x20>
	list->head = node;
    3f92:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    3f96:	bd10      	pop	{r4, pc}
	parent->next = child;
    3f98:	600a      	str	r2, [r1, #0]
	list->tail = node;
    3f9a:	605a      	str	r2, [r3, #4]
    3f9c:	e7fb      	b.n	3f96 <usb_hid_register_device+0x1e>
    3f9e:	bf00      	nop
    3fa0:	20000ef8 	.word	0x20000ef8

00003fa4 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3fa4:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3fa6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3faa:	d512      	bpl.n	3fd2 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3fac:	2b08      	cmp	r3, #8
    3fae:	d105      	bne.n	3fbc <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3fb0:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3fb2:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3fb6:	d506      	bpl.n	3fc6 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3fb8:	480e      	ldr	r0, [pc, #56]	; (3ff4 <endpoint_ctx+0x50>)
    3fba:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    3fbc:	f010 0f78 	tst.w	r0, #120	; 0x78
    3fc0:	d112      	bne.n	3fe8 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3fc2:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    3fc6:	204c      	movs	r0, #76	; 0x4c
    3fc8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3fcc:	4b0a      	ldr	r3, [pc, #40]	; (3ff8 <endpoint_ctx+0x54>)
    3fce:	4418      	add	r0, r3
    3fd0:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3fd2:	2b08      	cmp	r3, #8
    3fd4:	d105      	bne.n	3fe2 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3fd6:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3fd8:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3fdc:	d506      	bpl.n	3fec <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3fde:	4807      	ldr	r0, [pc, #28]	; (3ffc <endpoint_ctx+0x58>)
    3fe0:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    3fe2:	f010 0f78 	tst.w	r0, #120	; 0x78
    3fe6:	d0f6      	beq.n	3fd6 <endpoint_ctx+0x32>
		return NULL;
    3fe8:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    3fea:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3fec:	4804      	ldr	r0, [pc, #16]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3fee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3ff2:	4770      	bx	lr
    3ff4:	2000104c 	.word	0x2000104c
    3ff8:	20000f00 	.word	0x20000f00
    3ffc:	2000116c 	.word	0x2000116c
    4000:	2000106c 	.word	0x2000106c

00004004 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4004:	4901      	ldr	r1, [pc, #4]	; (400c <usbd_work_schedule+0x8>)
    4006:	4802      	ldr	r0, [pc, #8]	; (4010 <usbd_work_schedule+0xc>)
    4008:	f006 bbb7 	b.w	a77a <k_work_submit_to_queue>
    400c:	20000f28 	.word	0x20000f28
    4010:	20000540 	.word	0x20000540

00004014 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4014:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4016:	4801      	ldr	r0, [pc, #4]	; (401c <usbd_evt_put+0x8>)
    4018:	f006 bb4a 	b.w	a6b0 <k_queue_append>
    401c:	200002f8 	.word	0x200002f8

00004020 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4020:	4802      	ldr	r0, [pc, #8]	; (402c <usbd_evt_get+0xc>)
    4022:	2200      	movs	r2, #0
    4024:	2300      	movs	r3, #0
    4026:	f003 bfd1 	b.w	7fcc <z_impl_k_queue_get>
    402a:	bf00      	nop
    402c:	200002f8 	.word	0x200002f8

00004030 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4030:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4032:	4c05      	ldr	r4, [pc, #20]	; (4048 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    4034:	f7ff fff4 	bl	4020 <usbd_evt_get>
		if (ev) {
    4038:	b120      	cbz	r0, 4044 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    403a:	1d01      	adds	r1, r0, #4
    403c:	4620      	mov	r0, r4
    403e:	f006 fa7f 	bl	a540 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    4042:	e7f7      	b.n	4034 <usbd_evt_flush+0x4>
}
    4044:	bd10      	pop	{r4, pc}
    4046:	bf00      	nop
    4048:	20000258 	.word	0x20000258

0000404c <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    404c:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    404e:	2300      	movs	r3, #0
    4050:	480e      	ldr	r0, [pc, #56]	; (408c <usbd_evt_alloc+0x40>)
    4052:	2200      	movs	r2, #0
    4054:	a901      	add	r1, sp, #4
    4056:	f003 fdff 	bl	7c58 <k_mem_slab_alloc>
    405a:	b190      	cbz	r0, 4082 <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    405c:	f7ff ffe8 	bl	4030 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4060:	480a      	ldr	r0, [pc, #40]	; (408c <usbd_evt_alloc+0x40>)
    4062:	2200      	movs	r2, #0
    4064:	2300      	movs	r3, #0
    4066:	a901      	add	r1, sp, #4
    4068:	f003 fdf6 	bl	7c58 <k_mem_slab_alloc>
    406c:	b938      	cbnz	r0, 407e <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
    406e:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4070:	2304      	movs	r3, #4
		ev->block = block;
    4072:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4074:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    4076:	f7ff ffcd 	bl	4014 <usbd_evt_put>
		usbd_work_schedule();
    407a:	f7ff ffc3 	bl	4004 <usbd_work_schedule>

		return NULL;
    407e:	2000      	movs	r0, #0
    4080:	e001      	b.n	4086 <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    4082:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4084:	6040      	str	r0, [r0, #4]

	return ev;
}
    4086:	b003      	add	sp, #12
    4088:	f85d fb04 	ldr.w	pc, [sp], #4
    408c:	20000258 	.word	0x20000258

00004090 <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
    4090:	2802      	cmp	r0, #2
{
    4092:	b510      	push	{r4, lr}
    4094:	d811      	bhi.n	40ba <usb_dc_power_event_handler+0x2a>
    4096:	4b09      	ldr	r3, [pc, #36]	; (40bc <usb_dc_power_event_handler+0x2c>)
    4098:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    409a:	f7ff ffd7 	bl	404c <usbd_evt_alloc>
	if (!ev) {
    409e:	b160      	cbz	r0, 40ba <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    40a0:	2200      	movs	r2, #0
    40a2:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    40a4:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    40a6:	f7ff ffb5 	bl	4014 <usbd_evt_put>
	if (usbd_ctx.attached) {
    40aa:	4b05      	ldr	r3, [pc, #20]	; (40c0 <usb_dc_power_event_handler+0x30>)
    40ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    40b0:	b11b      	cbz	r3, 40ba <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    40b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    40b6:	f7ff bfa5 	b.w	4004 <usbd_work_schedule>
}
    40ba:	bd10      	pop	{r4, pc}
    40bc:	0000b3be 	.word	0x0000b3be
    40c0:	20000f00 	.word	0x20000f00

000040c4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    40c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    40c6:	7887      	ldrb	r7, [r0, #2]
{
    40c8:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    40ca:	4638      	mov	r0, r7
    40cc:	f7ff ff6a 	bl	3fa4 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    40d0:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    40d2:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    40d4:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    40d6:	d512      	bpl.n	40fe <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    40d8:	2d00      	cmp	r5, #0
    40da:	d143      	bne.n	4164 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    40dc:	f7ff ffb6 	bl	404c <usbd_evt_alloc>

			if (!ev) {
    40e0:	4603      	mov	r3, r0
    40e2:	2800      	cmp	r0, #0
    40e4:	d03e      	beq.n	4164 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    40e6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    40e8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    40ea:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    40ec:	2203      	movs	r2, #3
    40ee:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    40f0:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    40f2:	f7ff ff8f 	bl	4014 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    40f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    40fa:	f7ff bf83 	b.w	4004 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    40fe:	b14d      	cbz	r5, 4114 <usbd_event_transfer_data+0x50>
    4100:	2d01      	cmp	r5, #1
    4102:	d12f      	bne.n	4164 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    4104:	f7ff ffa2 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    4108:	4603      	mov	r3, r0
    410a:	b358      	cbz	r0, 4164 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    410c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    410e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4110:	7305      	strb	r5, [r0, #12]
    4112:	e7ed      	b.n	40f0 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    4114:	f7ff ff9a 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    4118:	b320      	cbz	r0, 4164 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    411a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    411c:	4b12      	ldr	r3, [pc, #72]	; (4168 <usbd_event_transfer_data+0xa4>)
    411e:	f012 0f80 	tst.w	r2, #128	; 0x80
    4122:	f002 0108 	and.w	r1, r2, #8
    4126:	d011      	beq.n	414c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4128:	b141      	cbz	r1, 413c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    412a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    412e:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    4130:	2301      	movs	r3, #1
    4132:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4134:	2302      	movs	r3, #2
    4136:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4138:	6084      	str	r4, [r0, #8]
    413a:	e7da      	b.n	40f2 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    413c:	f002 020f 	and.w	r2, r2, #15
    4140:	2114      	movs	r1, #20
    4142:	fb01 3302 	mla	r3, r1, r2, r3
    4146:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    414a:	e7f0      	b.n	412e <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    414c:	b111      	cbz	r1, 4154 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    414e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4152:	e7ec      	b.n	412e <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4154:	f002 020f 	and.w	r2, r2, #15
    4158:	2114      	movs	r1, #20
    415a:	fb01 3302 	mla	r3, r1, r2, r3
    415e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4162:	e7e4      	b.n	412e <usbd_event_transfer_data+0x6a>
}
    4164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4166:	bf00      	nop
    4168:	40027000 	.word	0x40027000

0000416c <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    416c:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    416e:	4812      	ldr	r0, [pc, #72]	; (41b8 <usb_init+0x4c>)
    4170:	f002 ff54 	bl	701c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4174:	4b11      	ldr	r3, [pc, #68]	; (41bc <usb_init+0x50>)
    4176:	4298      	cmp	r0, r3
    4178:	d11a      	bne.n	41b0 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    417a:	4811      	ldr	r0, [pc, #68]	; (41c0 <usb_init+0x54>)
    417c:	f002 f8ee 	bl	635c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4180:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    4182:	4810      	ldr	r0, [pc, #64]	; (41c4 <usb_init+0x58>)
    4184:	f002 f930 	bl	63e8 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    4188:	490f      	ldr	r1, [pc, #60]	; (41c8 <usb_init+0x5c>)
    418a:	4810      	ldr	r0, [pc, #64]	; (41cc <usb_init+0x60>)
    418c:	9400      	str	r4, [sp, #0]
    418e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4192:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4196:	f004 f88b 	bl	82b0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    419a:	490d      	ldr	r1, [pc, #52]	; (41d0 <usb_init+0x64>)
    419c:	480b      	ldr	r0, [pc, #44]	; (41cc <usb_init+0x60>)
    419e:	f006 f9fe 	bl	a59e <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    41a2:	480c      	ldr	r0, [pc, #48]	; (41d4 <usb_init+0x68>)
    41a4:	490c      	ldr	r1, [pc, #48]	; (41d8 <usb_init+0x6c>)
    41a6:	f006 facb 	bl	a740 <k_work_init>

	return 0;
    41aa:	4620      	mov	r0, r4
}
    41ac:	b002      	add	sp, #8
    41ae:	bd10      	pop	{r4, pc}
		return -EIO;
    41b0:	f06f 0004 	mvn.w	r0, #4
    41b4:	e7fa      	b.n	41ac <usb_init+0x40>
    41b6:	bf00      	nop
    41b8:	0000421d 	.word	0x0000421d
    41bc:	0bad0000 	.word	0x0bad0000
    41c0:	0000b3c1 	.word	0x0000b3c1
    41c4:	0000afcc 	.word	0x0000afcc
    41c8:	200025c0 	.word	0x200025c0
    41cc:	20000540 	.word	0x20000540
    41d0:	0000b3b3 	.word	0x0000b3b3
    41d4:	20000f28 	.word	0x20000f28
    41d8:	000043a1 	.word	0x000043a1

000041dc <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    41dc:	b510      	push	{r4, lr}
    41de:	490e      	ldr	r1, [pc, #56]	; (4218 <hfxo_stop.constprop.0.isra.0+0x3c>)
    41e0:	f3bf 8f5b 	dmb	ish
    41e4:	2300      	movs	r3, #0
    41e6:	e851 2f00 	ldrex	r2, [r1]
    41ea:	2a01      	cmp	r2, #1
    41ec:	d103      	bne.n	41f6 <hfxo_stop.constprop.0.isra.0+0x1a>
    41ee:	e841 3000 	strex	r0, r3, [r1]
    41f2:	2800      	cmp	r0, #0
    41f4:	d1f7      	bne.n	41e6 <hfxo_stop.constprop.0.isra.0+0xa>
    41f6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    41fa:	d10c      	bne.n	4216 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    41fc:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4200:	3914      	subs	r1, #20
    4202:	4620      	mov	r0, r4
    4204:	f005 fa99 	bl	973a <onoff_cancel>

	if (rv == -EALREADY) {
    4208:	3078      	adds	r0, #120	; 0x78
    420a:	d104      	bne.n	4216 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    420c:	4620      	mov	r0, r4
}
    420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4212:	f005 ba6d 	b.w	96f0 <onoff_release>
    4216:	bd10      	pop	{r4, pc}
    4218:	20000f20 	.word	0x20000f20

0000421c <usbd_event_handler>:
{
    421c:	b5f0      	push	{r4, r5, r6, r7, lr}
    421e:	4606      	mov	r6, r0
    4220:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    4222:	2214      	movs	r2, #20
    4224:	2100      	movs	r1, #0
    4226:	a803      	add	r0, sp, #12
    4228:	f005 fd76 	bl	9d18 <memset>
	switch (p_event->type) {
    422c:	7833      	ldrb	r3, [r6, #0]
    422e:	3b01      	subs	r3, #1
    4230:	2b05      	cmp	r3, #5
    4232:	d821      	bhi.n	4278 <usbd_event_handler+0x5c>
    4234:	e8df f003 	tbb	[pc, r3]
    4238:	1414037a 	.word	0x1414037a
    423c:	166a      	.short	0x166a
    423e:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4240:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    4244:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    4246:	f7ff ff01 	bl	404c <usbd_evt_alloc>
		if (!ev) {
    424a:	4603      	mov	r3, r0
    424c:	b1a0      	cbz	r0, 4278 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    424e:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4250:	f100 0208 	add.w	r2, r0, #8
    4254:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    4258:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    425c:	4618      	mov	r0, r3
    425e:	e01d      	b.n	429c <usbd_event_handler+0x80>
	switch (p_event->type) {
    4260:	2304      	movs	r3, #4
    4262:	e7ed      	b.n	4240 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4264:	78b7      	ldrb	r7, [r6, #2]
    4266:	4638      	mov	r0, r7
    4268:	f7ff fe9c 	bl	3fa4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    426c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    426e:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    4270:	b123      	cbz	r3, 427c <usbd_event_handler+0x60>
    4272:	3b01      	subs	r3, #1
    4274:	2b02      	cmp	r3, #2
    4276:	d943      	bls.n	4300 <usbd_event_handler+0xe4>
}
    4278:	b009      	add	sp, #36	; 0x24
    427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    427c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    427e:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4280:	d513      	bpl.n	42aa <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    4282:	2d00      	cmp	r5, #0
    4284:	d1f8      	bne.n	4278 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    4286:	f7ff fee1 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    428a:	4603      	mov	r3, r0
    428c:	2800      	cmp	r0, #0
    428e:	d0f3      	beq.n	4278 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    4290:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4292:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    4294:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4296:	2203      	movs	r2, #3
    4298:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    429a:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    429c:	f7ff feba 	bl	4014 <usbd_evt_put>
}
    42a0:	b009      	add	sp, #36	; 0x24
    42a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    42a6:	f7ff bead 	b.w	4004 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    42aa:	b155      	cbz	r5, 42c2 <usbd_event_handler+0xa6>
    42ac:	2d01      	cmp	r5, #1
    42ae:	d1e3      	bne.n	4278 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    42b0:	f7ff fecc 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    42b4:	4603      	mov	r3, r0
    42b6:	2800      	cmp	r0, #0
    42b8:	d0de      	beq.n	4278 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    42ba:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    42bc:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    42be:	7305      	strb	r5, [r0, #12]
    42c0:	e7eb      	b.n	429a <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    42c2:	f7ff fec3 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    42c6:	4607      	mov	r7, r0
    42c8:	2800      	cmp	r0, #0
    42ca:	d0d5      	beq.n	4278 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    42cc:	2301      	movs	r3, #1
    42ce:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    42d0:	2302      	movs	r3, #2
    42d2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    42d4:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    42d6:	f104 010c 	add.w	r1, r4, #12
    42da:	78b0      	ldrb	r0, [r6, #2]
    42dc:	f006 f8a6 	bl	a42c <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    42e0:	4a13      	ldr	r2, [pc, #76]	; (4330 <usbd_event_handler+0x114>)
    42e2:	68e1      	ldr	r1, [r4, #12]
    42e4:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    42e8:	428b      	cmp	r3, r1
    42ea:	d906      	bls.n	42fa <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    42ec:	1a5b      	subs	r3, r3, r1
    42ee:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    42f2:	f003 f8cf 	bl	7494 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    42f6:	4638      	mov	r0, r7
    42f8:	e7d0      	b.n	429c <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    42fa:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    42fe:	e7fa      	b.n	42f6 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    4300:	4630      	mov	r0, r6
}
    4302:	b009      	add	sp, #36	; 0x24
    4304:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    4308:	f7ff bedc 	b.w	40c4 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    430c:	a801      	add	r0, sp, #4
    430e:	f003 f89b 	bl	7448 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4312:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4316:	2b05      	cmp	r3, #5
    4318:	d104      	bne.n	4324 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    431a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    431e:	f013 0f60 	tst.w	r3, #96	; 0x60
    4322:	d0a9      	beq.n	4278 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    4324:	4b03      	ldr	r3, [pc, #12]	; (4334 <usbd_event_handler+0x118>)
    4326:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    4328:	2401      	movs	r4, #1
    432a:	e78c      	b.n	4246 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    432c:	2402      	movs	r4, #2
    432e:	e78a      	b.n	4246 <usbd_event_handler+0x2a>
    4330:	20000f00 	.word	0x20000f00
    4334:	2000106c 	.word	0x2000106c

00004338 <eps_ctx_init>:
{
    4338:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    433a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    433c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4340:	b2c0      	uxtb	r0, r0
    4342:	f7ff fe2f 	bl	3fa4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4346:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4348:	f005 fd22 	bl	9d90 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    434c:	2c08      	cmp	r4, #8
    434e:	d1f5      	bne.n	433c <eps_ctx_init+0x4>
    4350:	4d0e      	ldr	r5, [pc, #56]	; (438c <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4352:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4354:	b2e0      	uxtb	r0, r4
    4356:	f7ff fe25 	bl	3fa4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    435a:	6903      	ldr	r3, [r0, #16]
    435c:	b903      	cbnz	r3, 4360 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    435e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4360:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4362:	f005 fd15 	bl	9d90 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4366:	2c08      	cmp	r4, #8
    4368:	f105 0540 	add.w	r5, r5, #64	; 0x40
    436c:	d1f2      	bne.n	4354 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    436e:	4808      	ldr	r0, [pc, #32]	; (4390 <eps_ctx_init+0x58>)
    4370:	f005 fd0e 	bl	9d90 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4374:	4b07      	ldr	r3, [pc, #28]	; (4394 <eps_ctx_init+0x5c>)
    4376:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    437a:	b912      	cbnz	r2, 4382 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    437c:	4a06      	ldr	r2, [pc, #24]	; (4398 <eps_ctx_init+0x60>)
    437e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4382:	4806      	ldr	r0, [pc, #24]	; (439c <eps_ctx_init+0x64>)
    4384:	f005 fd04 	bl	9d90 <ep_ctx_reset>
}
    4388:	2000      	movs	r0, #0
    438a:	bd38      	pop	{r3, r4, r5, pc}
    438c:	20001590 	.word	0x20001590
    4390:	2000104c 	.word	0x2000104c
    4394:	20000f00 	.word	0x20000f00
    4398:	20001190 	.word	0x20001190
    439c:	2000116c 	.word	0x2000116c

000043a0 <usbd_work_handler>:
{
    43a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    43a4:	4ca7      	ldr	r4, [pc, #668]	; (4644 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43a6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4648 <usbd_work_handler+0x2a8>
{
    43aa:	b085      	sub	sp, #20
    43ac:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    43ae:	f7ff fe37 	bl	4020 <usbd_evt_get>
    43b2:	b910      	cbnz	r0, 43ba <usbd_work_handler+0x1a>
}
    43b4:	b005      	add	sp, #20
    43b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    43ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    43be:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43c0:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    43c4:	b93b      	cbnz	r3, 43d6 <usbd_work_handler+0x36>
    43c6:	2a00      	cmp	r2, #0
    43c8:	f000 8088 	beq.w	44dc <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    43cc:	489e      	ldr	r0, [pc, #632]	; (4648 <usbd_work_handler+0x2a8>)
    43ce:	4649      	mov	r1, r9
    43d0:	f006 f8b6 	bl	a540 <k_mem_slab_free>
}
    43d4:	e7eb      	b.n	43ae <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    43d6:	2a04      	cmp	r2, #4
    43d8:	d844      	bhi.n	4464 <usbd_work_handler+0xc4>
    43da:	e8df f012 	tbh	[pc, r2, lsl #1]
    43de:	007f      	.short	0x007f
    43e0:	01020005 	.word	0x01020005
    43e4:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
    43e8:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    43ea:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    43ec:	2b03      	cmp	r3, #3
    43ee:	d839      	bhi.n	4464 <usbd_work_handler+0xc4>
    43f0:	e8df f003 	tbb	[pc, r3]
    43f4:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    43f8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    43fa:	2208      	movs	r2, #8
    43fc:	2100      	movs	r1, #0
    43fe:	4630      	mov	r0, r6
    4400:	f005 fc8a 	bl	9d18 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4404:	4b91      	ldr	r3, [pc, #580]	; (464c <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4406:	4892      	ldr	r0, [pc, #584]	; (4650 <usbd_work_handler+0x2b0>)
    4408:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    440c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    440e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4412:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4414:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4418:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    441c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4420:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4422:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4426:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    442a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    442e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4430:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4434:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4438:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    443c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    443e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4440:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4442:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4444:	f005 fc5d 	bl	9d02 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4448:	682b      	ldr	r3, [r5, #0]
    444a:	7a68      	ldrb	r0, [r5, #9]
    444c:	2100      	movs	r1, #0
    444e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4450:	f996 3000 	ldrsb.w	r3, [r6]
    4454:	2b00      	cmp	r3, #0
    4456:	db08      	blt.n	446a <usbd_work_handler+0xca>
    4458:	88f3      	ldrh	r3, [r6, #6]
    445a:	b133      	cbz	r3, 446a <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    445c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4460:	f003 f818 	bl	7494 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4464:	4649      	mov	r1, r9
    4466:	4640      	mov	r0, r8
    4468:	e7b2      	b.n	43d0 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    446a:	2300      	movs	r3, #0
    446c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4470:	e7f8      	b.n	4464 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
    4472:	7f6b      	ldrb	r3, [r5, #29]
    4474:	2b00      	cmp	r3, #0
    4476:	d0f5      	beq.n	4464 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
    4478:	7f2b      	ldrb	r3, [r5, #28]
    447a:	2b00      	cmp	r3, #0
    447c:	d0f2      	beq.n	4464 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
    447e:	2600      	movs	r6, #0
    4480:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4486:	4873      	ldr	r0, [pc, #460]	; (4654 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
    4488:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    448a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    448e:	f005 fc92 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4492:	696b      	ldr	r3, [r5, #20]
    4494:	9301      	str	r3, [sp, #4]
    4496:	686b      	ldr	r3, [r5, #4]
    4498:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    449c:	a901      	add	r1, sp, #4
    449e:	7a68      	ldrb	r0, [r5, #9]
    44a0:	f002 fdfe 	bl	70a0 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    44a4:	486b      	ldr	r0, [pc, #428]	; (4654 <usbd_work_handler+0x2b4>)
    44a6:	f005 fc88 	bl	9dba <k_mutex_unlock.isra.0>
    44aa:	e7db      	b.n	4464 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    44ac:	682b      	ldr	r3, [r5, #0]
    44ae:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    44b0:	7a68      	ldrb	r0, [r5, #9]
    44b2:	4798      	blx	r3
		break;
    44b4:	e7d6      	b.n	4464 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    44b6:	7aab      	ldrb	r3, [r5, #10]
    44b8:	b96b      	cbnz	r3, 44d6 <usbd_work_handler+0x136>
    44ba:	7feb      	ldrb	r3, [r5, #31]
    44bc:	b95b      	cbnz	r3, 44d6 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    44be:	4865      	ldr	r0, [pc, #404]	; (4654 <usbd_work_handler+0x2b4>)
    44c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    44c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    44c8:	f005 fc75 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    44cc:	f003 f812 	bl	74f4 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    44d0:	4860      	ldr	r0, [pc, #384]	; (4654 <usbd_work_handler+0x2b4>)
    44d2:	f005 fc72 	bl	9dba <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    44d6:	682b      	ldr	r3, [r5, #0]
    44d8:	2102      	movs	r1, #2
    44da:	e7e9      	b.n	44b0 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
    44dc:	7a02      	ldrb	r2, [r0, #8]
    44de:	2a04      	cmp	r2, #4
    44e0:	d8c0      	bhi.n	4464 <usbd_work_handler+0xc4>
    44e2:	e8df f002 	tbb	[pc, r2]
    44e6:	0359      	.short	0x0359
    44e8:	6723      	.short	0x6723
    44ea:	73          	.byte	0x73
    44eb:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    44ec:	f002 fd60 	bl	6fb0 <nrfx_usbd_is_enabled>
    44f0:	4605      	mov	r5, r0
    44f2:	2800      	cmp	r0, #0
    44f4:	d1b6      	bne.n	4464 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
    44f6:	f002 fc97 	bl	6e28 <nrfx_usbd_enable>
    44fa:	f3bf 8f5b 	dmb	ish
    44fe:	4956      	ldr	r1, [pc, #344]	; (4658 <usbd_work_handler+0x2b8>)
    4500:	2301      	movs	r3, #1
    4502:	e851 2f00 	ldrex	r2, [r1]
    4506:	2a00      	cmp	r2, #0
    4508:	d103      	bne.n	4512 <usbd_work_handler+0x172>
    450a:	e841 3000 	strex	r0, r3, [r1]
    450e:	2800      	cmp	r0, #0
    4510:	d1f7      	bne.n	4502 <usbd_work_handler+0x162>
    4512:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4516:	d1a5      	bne.n	4464 <usbd_work_handler+0xc4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4518:	f841 5c08 	str.w	r5, [r1, #-8]
    451c:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4520:	69e0      	ldr	r0, [r4, #28]
    4522:	6163      	str	r3, [r4, #20]
    4524:	3914      	subs	r1, #20
    4526:	f005 f88b 	bl	9640 <onoff_request>
    452a:	e79b      	b.n	4464 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
    452c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    452e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4532:	b2c0      	uxtb	r0, r0
    4534:	f7ff fd36 	bl	3fa4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4538:	7a03      	ldrb	r3, [r0, #8]
    453a:	b113      	cbz	r3, 4542 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    453c:	7a40      	ldrb	r0, [r0, #9]
    453e:	f003 f989 	bl	7854 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4542:	3501      	adds	r5, #1
    4544:	2d08      	cmp	r5, #8
    4546:	d1f2      	bne.n	452e <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
    4548:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    454c:	b11b      	cbz	r3, 4556 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    454e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4552:	f003 f97f 	bl	7854 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4556:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4558:	b2e8      	uxtb	r0, r5
    455a:	f7ff fd23 	bl	3fa4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    455e:	7a03      	ldrb	r3, [r0, #8]
    4560:	b113      	cbz	r3, 4568 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4562:	7a40      	ldrb	r0, [r0, #9]
    4564:	f003 f976 	bl	7854 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4568:	3501      	adds	r5, #1
    456a:	2d08      	cmp	r5, #8
    456c:	d1f4      	bne.n	4558 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
    456e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4572:	b11b      	cbz	r3, 457c <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4574:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4578:	f003 f96c 	bl	7854 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    457c:	2001      	movs	r0, #1
    457e:	f002 fcf9 	bl	6f74 <nrfx_usbd_start>
		ctx->ready = true;
    4582:	2301      	movs	r3, #1
    4584:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    4588:	6823      	ldr	r3, [r4, #0]
    458a:	2b00      	cmp	r3, #0
    458c:	f43f af6a 	beq.w	4464 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4590:	2100      	movs	r1, #0
    4592:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    4594:	4798      	blx	r3
    4596:	e765      	b.n	4464 <usbd_work_handler+0xc4>
		ctx->ready = false;
    4598:	2500      	movs	r5, #0
    459a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    459e:	f003 f915 	bl	77cc <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    45a2:	f7ff fe1b 	bl	41dc <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    45a6:	6823      	ldr	r3, [r4, #0]
    45a8:	2b00      	cmp	r3, #0
    45aa:	f43f af5b 	beq.w	4464 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    45ae:	4629      	mov	r1, r5
    45b0:	2004      	movs	r0, #4
    45b2:	e7ef      	b.n	4594 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
    45b4:	2b00      	cmp	r3, #0
    45b6:	f43f af55 	beq.w	4464 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
    45ba:	f002 fd03 	bl	6fc4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    45be:	6823      	ldr	r3, [r4, #0]
    45c0:	2b00      	cmp	r3, #0
    45c2:	f43f af4f 	beq.w	4464 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    45c6:	2100      	movs	r1, #0
    45c8:	2005      	movs	r0, #5
    45ca:	e7e3      	b.n	4594 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
    45cc:	6822      	ldr	r2, [r4, #0]
    45ce:	2a00      	cmp	r2, #0
    45d0:	f43f af48 	beq.w	4464 <usbd_work_handler+0xc4>
    45d4:	2b00      	cmp	r3, #0
    45d6:	f43f af45 	beq.w	4464 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    45da:	2100      	movs	r1, #0
    45dc:	2006      	movs	r0, #6
    45de:	4790      	blx	r2
    45e0:	e740      	b.n	4464 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    45e2:	f107 0510 	add.w	r5, r7, #16
    45e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45ee:	4628      	mov	r0, r5
    45f0:	f005 fbe1 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    45f4:	f7ff fea0 	bl	4338 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    45f8:	4628      	mov	r0, r5
    45fa:	f005 fbde 	bl	9dba <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    45fe:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4602:	2b00      	cmp	r3, #0
    4604:	f43f af2e 	beq.w	4464 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
    4608:	2100      	movs	r1, #0
    460a:	2001      	movs	r0, #1
    460c:	e7c2      	b.n	4594 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
    460e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4612:	b17b      	cbz	r3, 4634 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
    4614:	2501      	movs	r5, #1
    4616:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    461a:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    461e:	f7ff fd15 	bl	404c <usbd_evt_alloc>
		if (!ev) {
    4622:	b138      	cbz	r0, 4634 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
    4624:	4a0d      	ldr	r2, [pc, #52]	; (465c <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
    4626:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4628:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    462a:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    462c:	f7ff fcf2 	bl	4014 <usbd_evt_put>
		usbd_work_schedule();
    4630:	f7ff fce8 	bl	4004 <usbd_work_schedule>
			if (ctx->status_cb) {
    4634:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4638:	2b00      	cmp	r3, #0
    463a:	f43f af13 	beq.w	4464 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
    463e:	2100      	movs	r1, #0
    4640:	200a      	movs	r0, #10
    4642:	e7a7      	b.n	4594 <usbd_work_handler+0x1f4>
    4644:	20000f00 	.word	0x20000f00
    4648:	20000258 	.word	0x20000258
    464c:	40027000 	.word	0x40027000
    4650:	20000f04 	.word	0x20000f04
    4654:	20000f38 	.word	0x20000f38
    4658:	20000f20 	.word	0x20000f20
    465c:	2000116c 	.word	0x2000116c
	nrfx_power_usbevt_disable();
    4660:	f005 fe2b 	bl	a2ba <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4664:	f003 f8b2 	bl	77cc <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4668:	f002 fbd4 	bl	6e14 <nrfx_usbd_uninit>
	usbd_evt_flush();
    466c:	f7ff fce0 	bl	4030 <usbd_evt_flush>
	ret = eps_ctx_init();
    4670:	f7ff fe62 	bl	4338 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4674:	f005 fe1a 	bl	a2ac <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4678:	4801      	ldr	r0, [pc, #4]	; (4680 <usbd_work_handler+0x2e0>)
    467a:	f002 fccf 	bl	701c <nrfx_usbd_init>
}
    467e:	e6f1      	b.n	4464 <usbd_work_handler+0xc4>
    4680:	0000421d 	.word	0x0000421d

00004684 <usb_dc_attach>:
{
    4684:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    4686:	4d16      	ldr	r5, [pc, #88]	; (46e0 <usb_dc_attach+0x5c>)
    4688:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    468c:	bb2c      	cbnz	r4, 46da <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    468e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4692:	f005 ff98 	bl	a5c6 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    4696:	4620      	mov	r0, r4
    4698:	f000 fb10 	bl	4cbc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    469c:	4622      	mov	r2, r4
    469e:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    46a0:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    46a2:	2027      	movs	r0, #39	; 0x27
    46a4:	f7fe ffda 	bl	365c <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    46a8:	f005 fe00 	bl	a2ac <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    46ac:	f7ff fe44 	bl	4338 <eps_ctx_init>
	if (ret == 0) {
    46b0:	4604      	mov	r4, r0
    46b2:	b910      	cbnz	r0, 46ba <usb_dc_attach+0x36>
		ctx->attached = true;
    46b4:	2301      	movs	r3, #1
    46b6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    46ba:	4b0a      	ldr	r3, [pc, #40]	; (46e4 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	b10b      	cbz	r3, 46c4 <usb_dc_attach+0x40>
		usbd_work_schedule();
    46c0:	f7ff fca0 	bl	4004 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    46c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46c8:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    46cc:	07db      	lsls	r3, r3, #31
    46ce:	d502      	bpl.n	46d6 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    46d0:	2000      	movs	r0, #0
    46d2:	f7ff fcdd 	bl	4090 <usb_dc_power_event_handler>
}
    46d6:	4620      	mov	r0, r4
    46d8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    46da:	2400      	movs	r4, #0
    46dc:	e7fb      	b.n	46d6 <usb_dc_attach+0x52>
    46de:	bf00      	nop
    46e0:	20000f00 	.word	0x20000f00
    46e4:	200002f8 	.word	0x200002f8

000046e8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    46e8:	4b07      	ldr	r3, [pc, #28]	; (4708 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    46ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    46ee:	b13a      	cbz	r2, 4700 <usb_dc_set_address+0x18>
    46f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    46f4:	2b00      	cmp	r3, #0
    46f6:	bf14      	ite	ne
    46f8:	2000      	movne	r0, #0
    46fa:	f06f 0012 	mvneq.w	r0, #18
    46fe:	4770      	bx	lr
    4700:	f06f 0012 	mvn.w	r0, #18
}
    4704:	4770      	bx	lr
    4706:	bf00      	nop
    4708:	20000f00 	.word	0x20000f00

0000470c <usb_dc_ep_configure>:
{
    470c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    470e:	4b10      	ldr	r3, [pc, #64]	; (4750 <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
    4710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4714:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4716:	b1c3      	cbz	r3, 474a <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4718:	7805      	ldrb	r5, [r0, #0]
    471a:	4628      	mov	r0, r5
    471c:	f7ff fc42 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    4720:	b910      	cbnz	r0, 4728 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4722:	f06f 0015 	mvn.w	r0, #21
}
    4726:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4728:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    472a:	7923      	ldrb	r3, [r4, #4]
    472c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    472e:	8863      	ldrh	r3, [r4, #2]
    4730:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4732:	7820      	ldrb	r0, [r4, #0]
    4734:	8861      	ldrh	r1, [r4, #2]
    4736:	f010 0f08 	tst.w	r0, #8
    473a:	d102      	bne.n	4742 <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    473c:	1e4b      	subs	r3, r1, #1
    473e:	420b      	tst	r3, r1
    4740:	d1ef      	bne.n	4722 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4742:	f005 fe6e 	bl	a422 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4746:	2000      	movs	r0, #0
    4748:	e7ed      	b.n	4726 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    474a:	f06f 0012 	mvn.w	r0, #18
    474e:	e7ea      	b.n	4726 <usb_dc_ep_configure+0x1a>
    4750:	20000f00 	.word	0x20000f00

00004754 <usb_dc_ep_set_stall>:
{
    4754:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4756:	4b12      	ldr	r3, [pc, #72]	; (47a0 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    4758:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    475c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    475e:	b1ca      	cbz	r2, 4794 <usb_dc_ep_set_stall+0x40>
    4760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4764:	b1b3      	cbz	r3, 4794 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4766:	f7ff fc1d 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    476a:	4604      	mov	r4, r0
    476c:	b1a8      	cbz	r0, 479a <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    476e:	7a83      	ldrb	r3, [r0, #10]
    4770:	2b01      	cmp	r3, #1
    4772:	d012      	beq.n	479a <usb_dc_ep_set_stall+0x46>
    4774:	d907      	bls.n	4786 <usb_dc_ep_set_stall+0x32>
    4776:	3b02      	subs	r3, #2
    4778:	2b01      	cmp	r3, #1
    477a:	d907      	bls.n	478c <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    477c:	6963      	ldr	r3, [r4, #20]
    477e:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4780:	2000      	movs	r0, #0
    4782:	60e0      	str	r0, [r4, #12]
}
    4784:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    4786:	f002 febd 	bl	7504 <nrfx_usbd_setup_stall>
		break;
    478a:	e7f7      	b.n	477c <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    478c:	4628      	mov	r0, r5
    478e:	f002 fe2d 	bl	73ec <nrfx_usbd_ep_stall>
		break;
    4792:	e7f3      	b.n	477c <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    4794:	f06f 0012 	mvn.w	r0, #18
    4798:	e7f4      	b.n	4784 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    479a:	f06f 0015 	mvn.w	r0, #21
    479e:	e7f1      	b.n	4784 <usb_dc_ep_set_stall+0x30>
    47a0:	20000f00 	.word	0x20000f00

000047a4 <usb_dc_ep_clear_stall>:
{
    47a4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    47a6:	4b0e      	ldr	r3, [pc, #56]	; (47e0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    47a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    47ac:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    47ae:	b182      	cbz	r2, 47d2 <usb_dc_ep_clear_stall+0x2e>
    47b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    47b4:	b16b      	cbz	r3, 47d2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    47b6:	f7ff fbf5 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    47ba:	b168      	cbz	r0, 47d8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    47bc:	f015 0408 	ands.w	r4, r5, #8
    47c0:	d10a      	bne.n	47d8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    47c2:	4628      	mov	r0, r5
    47c4:	f002 fe34 	bl	7430 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    47c8:	4628      	mov	r0, r5
    47ca:	f003 f897 	bl	78fc <nrfx_usbd_ep_stall_clear>
	return 0;
    47ce:	4620      	mov	r0, r4
}
    47d0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    47d2:	f06f 0012 	mvn.w	r0, #18
    47d6:	e7fb      	b.n	47d0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    47d8:	f06f 0015 	mvn.w	r0, #21
    47dc:	e7f8      	b.n	47d0 <usb_dc_ep_clear_stall+0x2c>
    47de:	bf00      	nop
    47e0:	20000f00 	.word	0x20000f00

000047e4 <usb_dc_ep_is_stalled>:
{
    47e4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    47e6:	4b0c      	ldr	r3, [pc, #48]	; (4818 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    47e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    47ec:	4605      	mov	r5, r0
    47ee:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    47f0:	b162      	cbz	r2, 480c <usb_dc_ep_is_stalled+0x28>
    47f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    47f6:	b14b      	cbz	r3, 480c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    47f8:	f7ff fbd4 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    47fc:	b148      	cbz	r0, 4812 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    47fe:	b144      	cbz	r4, 4812 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4800:	4628      	mov	r0, r5
    4802:	f002 fdfb 	bl	73fc <nrfx_usbd_ep_stall_check>
    4806:	7020      	strb	r0, [r4, #0]
	return 0;
    4808:	2000      	movs	r0, #0
}
    480a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    480c:	f06f 0012 	mvn.w	r0, #18
    4810:	e7fb      	b.n	480a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4812:	f06f 0015 	mvn.w	r0, #21
    4816:	e7f8      	b.n	480a <usb_dc_ep_is_stalled+0x26>
    4818:	20000f00 	.word	0x20000f00

0000481c <usb_dc_ep_enable>:
{
    481c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    481e:	4e13      	ldr	r6, [pc, #76]	; (486c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4820:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    4824:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4826:	b1c3      	cbz	r3, 485a <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4828:	f7ff fbbc 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    482c:	4605      	mov	r5, r0
    482e:	b1b8      	cbz	r0, 4860 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4830:	0723      	lsls	r3, r4, #28
    4832:	d405      	bmi.n	4840 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4834:	4620      	mov	r0, r4
    4836:	f002 fdfb 	bl	7430 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    483a:	4620      	mov	r0, r4
    483c:	f003 f85e 	bl	78fc <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4840:	7a2b      	ldrb	r3, [r5, #8]
    4842:	b983      	cbnz	r3, 4866 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4844:	2301      	movs	r3, #1
    4846:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4848:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    484c:	b90b      	cbnz	r3, 4852 <usb_dc_ep_enable+0x36>
	return 0;
    484e:	2000      	movs	r0, #0
}
    4850:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4852:	4620      	mov	r0, r4
    4854:	f002 fffe 	bl	7854 <nrfx_usbd_ep_enable>
    4858:	e7f9      	b.n	484e <usb_dc_ep_enable+0x32>
		return -ENODEV;
    485a:	f06f 0012 	mvn.w	r0, #18
    485e:	e7f7      	b.n	4850 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4860:	f06f 0015 	mvn.w	r0, #21
    4864:	e7f4      	b.n	4850 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4866:	f06f 0077 	mvn.w	r0, #119	; 0x77
    486a:	e7f1      	b.n	4850 <usb_dc_ep_enable+0x34>
    486c:	20000f00 	.word	0x20000f00

00004870 <usb_dc_ep_write>:
{
    4870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4874:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 495c <usb_dc_ep_write+0xec>
{
    4878:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    487a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    487e:	b085      	sub	sp, #20
    4880:	4607      	mov	r7, r0
    4882:	4689      	mov	r9, r1
    4884:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    4886:	2b00      	cmp	r3, #0
    4888:	d061      	beq.n	494e <usb_dc_ep_write+0xde>
    488a:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    488e:	2b00      	cmp	r3, #0
    4890:	d05d      	beq.n	494e <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4892:	0603      	lsls	r3, r0, #24
    4894:	d55e      	bpl.n	4954 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    4896:	f7ff fb85 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    489a:	4604      	mov	r4, r0
    489c:	2800      	cmp	r0, #0
    489e:	d059      	beq.n	4954 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    48a0:	7a03      	ldrb	r3, [r0, #8]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d056      	beq.n	4954 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    48a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    48aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    48ae:	f108 0038 	add.w	r0, r8, #56	; 0x38
    48b2:	f005 fa80 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    48b6:	7fa3      	ldrb	r3, [r4, #30]
    48b8:	b14b      	cbz	r3, 48ce <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    48ba:	f108 0038 	add.w	r0, r8, #56	; 0x38
    48be:	f005 fa7c 	bl	9dba <k_mutex_unlock.isra.0>
		return -EAGAIN;
    48c2:	f06f 040a 	mvn.w	r4, #10
}
    48c6:	4620      	mov	r0, r4
    48c8:	b005      	add	sp, #20
    48ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    48ce:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    48d0:	b1c5      	cbz	r5, 4904 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    48d2:	b33b      	cbz	r3, 4924 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    48d4:	2301      	movs	r3, #1
    48d6:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    48d8:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    48dc:	a901      	add	r1, sp, #4
    48de:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    48e0:	e9cd 9501 	strd	r9, r5, [sp, #4]
    48e4:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    48e8:	f002 fbda 	bl	70a0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    48ec:	4b1c      	ldr	r3, [pc, #112]	; (4960 <usb_dc_ep_write+0xf0>)
    48ee:	4298      	cmp	r0, r3
    48f0:	d029      	beq.n	4946 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    48f2:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    48f6:	bb1e      	cbnz	r6, 4940 <usb_dc_ep_write+0xd0>
		result = -EIO;
    48f8:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    48fc:	4819      	ldr	r0, [pc, #100]	; (4964 <usb_dc_ep_write+0xf4>)
    48fe:	f005 fa5c 	bl	9dba <k_mutex_unlock.isra.0>
	return result;
    4902:	e7e0      	b.n	48c6 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4904:	7fe2      	ldrb	r2, [r4, #31]
    4906:	b102      	cbz	r2, 490a <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    4908:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    490a:	2b00      	cmp	r3, #0
    490c:	d1e2      	bne.n	48d4 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    490e:	f002 fe01 	bl	7514 <nrfx_usbd_last_setup_dir_get>
    4912:	42b8      	cmp	r0, r7
    4914:	d0de      	beq.n	48d4 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    4916:	f002 fded 	bl	74f4 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    491a:	4812      	ldr	r0, [pc, #72]	; (4964 <usb_dc_ep_write+0xf4>)
    491c:	f005 fa4d 	bl	9dba <k_mutex_unlock.isra.0>
		return 0;
    4920:	2400      	movs	r4, #0
    4922:	e7d0      	b.n	48c6 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4924:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4928:	42ab      	cmp	r3, r5
    492a:	d9f0      	bls.n	490e <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    492c:	6862      	ldr	r2, [r4, #4]
    492e:	fbb5 f3f2 	udiv	r3, r5, r2
    4932:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4936:	2b00      	cmp	r3, #0
    4938:	d1e9      	bne.n	490e <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    493a:	2301      	movs	r3, #1
    493c:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    493e:	e7e6      	b.n	490e <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    4940:	f8c6 8000 	str.w	r8, [r6]
    4944:	e7d8      	b.n	48f8 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4946:	b106      	cbz	r6, 494a <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4948:	6035      	str	r5, [r6, #0]
	int result = 0;
    494a:	2400      	movs	r4, #0
    494c:	e7d6      	b.n	48fc <usb_dc_ep_write+0x8c>
		return -ENODEV;
    494e:	f06f 0412 	mvn.w	r4, #18
    4952:	e7b8      	b.n	48c6 <usb_dc_ep_write+0x56>
		return -EINVAL;
    4954:	f06f 0415 	mvn.w	r4, #21
    4958:	e7b5      	b.n	48c6 <usb_dc_ep_write+0x56>
    495a:	bf00      	nop
    495c:	20000f00 	.word	0x20000f00
    4960:	0bad0000 	.word	0x0bad0000
    4964:	20000f38 	.word	0x20000f38

00004968 <usb_dc_ep_read_wait>:
{
    4968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    496c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    496e:	4b20      	ldr	r3, [pc, #128]	; (49f0 <usb_dc_ep_read_wait+0x88>)
{
    4970:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4972:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4976:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4978:	2a00      	cmp	r2, #0
    497a:	d033      	beq.n	49e4 <usb_dc_ep_read_wait+0x7c>
    497c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4980:	b383      	cbz	r3, 49e4 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4982:	0603      	lsls	r3, r0, #24
    4984:	d431      	bmi.n	49ea <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    4986:	b901      	cbnz	r1, 498a <usb_dc_ep_read_wait+0x22>
    4988:	bb7f      	cbnz	r7, 49ea <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    498a:	f7ff fb0b 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    498e:	4604      	mov	r4, r0
    4990:	b358      	cbz	r0, 49ea <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    4992:	7a03      	ldrb	r3, [r0, #8]
    4994:	b34b      	cbz	r3, 49ea <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    499a:	4816      	ldr	r0, [pc, #88]	; (49f4 <usb_dc_ep_read_wait+0x8c>)
    499c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49a0:	f005 fa09 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    49a4:	68e3      	ldr	r3, [r4, #12]
    49a6:	429f      	cmp	r7, r3
    49a8:	46b8      	mov	r8, r7
    49aa:	bf28      	it	cs
    49ac:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    49ae:	b946      	cbnz	r6, 49c2 <usb_dc_ep_read_wait+0x5a>
    49b0:	b93f      	cbnz	r7, 49c2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    49b2:	b105      	cbz	r5, 49b6 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    49b4:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    49b6:	480f      	ldr	r0, [pc, #60]	; (49f4 <usb_dc_ep_read_wait+0x8c>)
    49b8:	f005 f9ff 	bl	9dba <k_mutex_unlock.isra.0>
		return 0;
    49bc:	2000      	movs	r0, #0
}
    49be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    49c2:	69a1      	ldr	r1, [r4, #24]
    49c4:	4642      	mov	r2, r8
    49c6:	4630      	mov	r0, r6
    49c8:	f005 f99b 	bl	9d02 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    49cc:	69a3      	ldr	r3, [r4, #24]
    49ce:	4443      	add	r3, r8
    49d0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    49d2:	68e3      	ldr	r3, [r4, #12]
    49d4:	eba3 0308 	sub.w	r3, r3, r8
    49d8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    49da:	2d00      	cmp	r5, #0
    49dc:	d0eb      	beq.n	49b6 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    49de:	f8c5 8000 	str.w	r8, [r5]
    49e2:	e7e8      	b.n	49b6 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    49e4:	f06f 0012 	mvn.w	r0, #18
    49e8:	e7e9      	b.n	49be <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    49ea:	f06f 0015 	mvn.w	r0, #21
    49ee:	e7e6      	b.n	49be <usb_dc_ep_read_wait+0x56>
    49f0:	20000f00 	.word	0x20000f00
    49f4:	20000f38 	.word	0x20000f38

000049f8 <usb_dc_ep_read_continue>:
{
    49f8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    49fa:	4d1e      	ldr	r5, [pc, #120]	; (4a74 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    49fc:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    4a00:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4a02:	b382      	cbz	r2, 4a66 <usb_dc_ep_read_continue+0x6e>
    4a04:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    4a08:	b36a      	cbz	r2, 4a66 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4a0a:	061b      	lsls	r3, r3, #24
    4a0c:	d42e      	bmi.n	4a6c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    4a0e:	f7ff fac9 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    4a12:	4604      	mov	r4, r0
    4a14:	b350      	cbz	r0, 4a6c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    4a16:	7a03      	ldrb	r3, [r0, #8]
    4a18:	b343      	cbz	r3, 4a6c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a22:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4a26:	f005 f9c6 	bl	9db6 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    4a2a:	68e3      	ldr	r3, [r4, #12]
    4a2c:	b9b3      	cbnz	r3, 4a5c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    4a2e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4a30:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4a32:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4a34:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4a36:	7f63      	ldrb	r3, [r4, #29]
    4a38:	b183      	cbz	r3, 4a5c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    4a3a:	f7ff fb07 	bl	404c <usbd_evt_alloc>
			if (!ev) {
    4a3e:	b930      	cbnz	r0, 4a4e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4a40:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4a44:	f005 f9b9 	bl	9dba <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4a48:	f06f 000b 	mvn.w	r0, #11
}
    4a4c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    4a4e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4a50:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4a52:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4a54:	f7ff fade 	bl	4014 <usbd_evt_put>
			usbd_work_schedule();
    4a58:	f7ff fad4 	bl	4004 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    4a5c:	4806      	ldr	r0, [pc, #24]	; (4a78 <usb_dc_ep_read_continue+0x80>)
    4a5e:	f005 f9ac 	bl	9dba <k_mutex_unlock.isra.0>
	return 0;
    4a62:	2000      	movs	r0, #0
    4a64:	e7f2      	b.n	4a4c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4a66:	f06f 0012 	mvn.w	r0, #18
    4a6a:	e7ef      	b.n	4a4c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    4a6c:	f06f 0015 	mvn.w	r0, #21
    4a70:	e7ec      	b.n	4a4c <usb_dc_ep_read_continue+0x54>
    4a72:	bf00      	nop
    4a74:	20000f00 	.word	0x20000f00
    4a78:	20000f38 	.word	0x20000f38

00004a7c <usb_dc_ep_set_callback>:
{
    4a7c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    4a7e:	4b08      	ldr	r3, [pc, #32]	; (4aa0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    4a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4a84:	460c      	mov	r4, r1
	if (!dev_attached()) {
    4a86:	b12b      	cbz	r3, 4a94 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    4a88:	f7ff fa8c 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    4a8c:	b128      	cbz	r0, 4a9a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    4a8e:	6004      	str	r4, [r0, #0]
	return 0;
    4a90:	2000      	movs	r0, #0
}
    4a92:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4a94:	f06f 0012 	mvn.w	r0, #18
    4a98:	e7fb      	b.n	4a92 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    4a9a:	f06f 0015 	mvn.w	r0, #21
    4a9e:	e7f8      	b.n	4a92 <usb_dc_ep_set_callback+0x16>
    4aa0:	20000f00 	.word	0x20000f00

00004aa4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    4aa4:	4b01      	ldr	r3, [pc, #4]	; (4aac <usb_dc_set_status_callback+0x8>)
    4aa6:	6018      	str	r0, [r3, #0]
}
    4aa8:	4770      	bx	lr
    4aaa:	bf00      	nop
    4aac:	20000f00 	.word	0x20000f00

00004ab0 <usb_dc_ep_mps>:
{
    4ab0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    4ab2:	4b07      	ldr	r3, [pc, #28]	; (4ad0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    4ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4ab8:	b123      	cbz	r3, 4ac4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    4aba:	f7ff fa73 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    4abe:	b120      	cbz	r0, 4aca <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    4ac0:	6840      	ldr	r0, [r0, #4]
}
    4ac2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4ac4:	f06f 0012 	mvn.w	r0, #18
    4ac8:	e7fb      	b.n	4ac2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    4aca:	f06f 0015 	mvn.w	r0, #21
    4ace:	e7f8      	b.n	4ac2 <usb_dc_ep_mps+0x12>
    4ad0:	20000f00 	.word	0x20000f00

00004ad4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4ad4:	4b08      	ldr	r3, [pc, #32]	; (4af8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4ad6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4ad8:	1ac3      	subs	r3, r0, r3
{
    4ada:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4adc:	4907      	ldr	r1, [pc, #28]	; (4afc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4ade:	109b      	asrs	r3, r3, #2
{
    4ae0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4ae2:	4359      	muls	r1, r3
    4ae4:	4806      	ldr	r0, [pc, #24]	; (4b00 <onoff_stop+0x2c>)
    4ae6:	2240      	movs	r2, #64	; 0x40
    4ae8:	f005 f9c5 	bl	9e76 <stop>
	notify(mgr, res);
    4aec:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4aee:	4601      	mov	r1, r0
	notify(mgr, res);
    4af0:	4620      	mov	r0, r4
}
    4af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4af6:	4718      	bx	r3
    4af8:	200017a4 	.word	0x200017a4
    4afc:	b6db6db7 	.word	0xb6db6db7
    4b00:	0000abcc 	.word	0x0000abcc

00004b04 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4b06:	4c0c      	ldr	r4, [pc, #48]	; (4b38 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b08:	4a0c      	ldr	r2, [pc, #48]	; (4b3c <onoff_start+0x38>)
    4b0a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4b0c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b0e:	9300      	str	r3, [sp, #0]
{
    4b10:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b12:	460b      	mov	r3, r1
    4b14:	490a      	ldr	r1, [pc, #40]	; (4b40 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4b16:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b18:	4361      	muls	r1, r4
{
    4b1a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b1c:	4809      	ldr	r0, [pc, #36]	; (4b44 <onoff_start+0x40>)
    4b1e:	f005 f9d7 	bl	9ed0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4b22:	1e01      	subs	r1, r0, #0
    4b24:	da05      	bge.n	4b32 <onoff_start+0x2e>
		notify(mgr, err);
    4b26:	4630      	mov	r0, r6
    4b28:	462b      	mov	r3, r5
	}
}
    4b2a:	b002      	add	sp, #8
    4b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4b30:	4718      	bx	r3
}
    4b32:	b002      	add	sp, #8
    4b34:	bd70      	pop	{r4, r5, r6, pc}
    4b36:	bf00      	nop
    4b38:	200017a4 	.word	0x200017a4
    4b3c:	00009f3d 	.word	0x00009f3d
    4b40:	b6db6db7 	.word	0xb6db6db7
    4b44:	0000abcc 	.word	0x0000abcc

00004b48 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b48:	2200      	movs	r2, #0
{
    4b4a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b4c:	2101      	movs	r1, #1
{
    4b4e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b50:	4610      	mov	r0, r2
    4b52:	f7fe fd83 	bl	365c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4b56:	480f      	ldr	r0, [pc, #60]	; (4b94 <clk_init+0x4c>)
    4b58:	f001 f842 	bl	5be0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4b5c:	4b0e      	ldr	r3, [pc, #56]	; (4b98 <clk_init+0x50>)
    4b5e:	4298      	cmp	r0, r3
    4b60:	d115      	bne.n	4b8e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4b62:	f001 f84d 	bl	5c00 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4b66:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b68:	490c      	ldr	r1, [pc, #48]	; (4b9c <clk_init+0x54>)
    4b6a:	4630      	mov	r0, r6
    4b6c:	f004 fd55 	bl	961a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4b70:	2800      	cmp	r0, #0
    4b72:	db0b      	blt.n	4b8c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b74:	2501      	movs	r5, #1
    4b76:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    4b78:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b7a:	4908      	ldr	r1, [pc, #32]	; (4b9c <clk_init+0x54>)
    4b7c:	f104 001c 	add.w	r0, r4, #28
    4b80:	f004 fd4b 	bl	961a <onoff_manager_init>
		if (err < 0) {
    4b84:	2800      	cmp	r0, #0
    4b86:	db01      	blt.n	4b8c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b88:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4b8a:	2000      	movs	r0, #0
}
    4b8c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4b8e:	f06f 0004 	mvn.w	r0, #4
    4b92:	e7fb      	b.n	4b8c <clk_init+0x44>
    4b94:	00004bd5 	.word	0x00004bd5
    4b98:	0bad0000 	.word	0x0bad0000
    4b9c:	0000afd0 	.word	0x0000afd0

00004ba0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4ba0:	b570      	push	{r4, r5, r6, lr}
    4ba2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4ba4:	230c      	movs	r3, #12
    4ba6:	4809      	ldr	r0, [pc, #36]	; (4bcc <clkstarted_handle.constprop.0+0x2c>)
    4ba8:	434b      	muls	r3, r1
    4baa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4bac:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4bb0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4bb2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4bb4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4bb6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4bb8:	f005 f94a 	bl	9e50 <set_on_state>
	if (callback) {
    4bbc:	b12d      	cbz	r5, 4bca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4bbe:	4632      	mov	r2, r6
    4bc0:	462b      	mov	r3, r5
    4bc2:	4803      	ldr	r0, [pc, #12]	; (4bd0 <clkstarted_handle.constprop.0+0x30>)
}
    4bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4bc8:	4718      	bx	r3
}
    4bca:	bd70      	pop	{r4, r5, r6, pc}
    4bcc:	200017a4 	.word	0x200017a4
    4bd0:	0000abcc 	.word	0x0000abcc

00004bd4 <clock_event_handler>:
	switch (event) {
    4bd4:	b110      	cbz	r0, 4bdc <clock_event_handler+0x8>
    4bd6:	2801      	cmp	r0, #1
    4bd8:	d004      	beq.n	4be4 <clock_event_handler+0x10>
    4bda:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4bdc:	4b03      	ldr	r3, [pc, #12]	; (4bec <clock_event_handler+0x18>)
    4bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4be0:	075b      	lsls	r3, r3, #29
    4be2:	d101      	bne.n	4be8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4be4:	f7ff bfdc 	b.w	4ba0 <clkstarted_handle.constprop.0>
}
    4be8:	4770      	bx	lr
    4bea:	bf00      	nop
    4bec:	200017a4 	.word	0x200017a4

00004bf0 <generic_hfclk_start>:
{
    4bf0:	b508      	push	{r3, lr}
	__asm__ volatile(
    4bf2:	f04f 0320 	mov.w	r3, #32
    4bf6:	f3ef 8111 	mrs	r1, BASEPRI
    4bfa:	f383 8812 	msr	BASEPRI_MAX, r3
    4bfe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4c02:	4a12      	ldr	r2, [pc, #72]	; (4c4c <generic_hfclk_start+0x5c>)
    4c04:	6813      	ldr	r3, [r2, #0]
    4c06:	f043 0002 	orr.w	r0, r3, #2
    4c0a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4c0c:	07da      	lsls	r2, r3, #31
    4c0e:	d408      	bmi.n	4c22 <generic_hfclk_start+0x32>
	__asm__ volatile(
    4c10:	f381 8811 	msr	BASEPRI, r1
    4c14:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4c18:	2001      	movs	r0, #1
}
    4c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4c1e:	f005 baa3 	b.w	a168 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c26:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4c2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4c2e:	07d3      	lsls	r3, r2, #31
    4c30:	d5ee      	bpl.n	4c10 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4c32:	4807      	ldr	r0, [pc, #28]	; (4c50 <generic_hfclk_start+0x60>)
    4c34:	f005 f90c 	bl	9e50 <set_on_state>
    4c38:	f381 8811 	msr	BASEPRI, r1
    4c3c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4c40:	2000      	movs	r0, #0
}
    4c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4c46:	f7ff bfab 	b.w	4ba0 <clkstarted_handle.constprop.0>
    4c4a:	bf00      	nop
    4c4c:	200017f4 	.word	0x200017f4
    4c50:	200017e4 	.word	0x200017e4

00004c54 <api_blocking_start>:
{
    4c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c56:	2200      	movs	r2, #0
    4c58:	2301      	movs	r3, #1
    4c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c5e:	4a09      	ldr	r2, [pc, #36]	; (4c84 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c60:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c64:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c66:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c6a:	f005 f960 	bl	9f2e <api_start>
	if (err < 0) {
    4c6e:	2800      	cmp	r0, #0
    4c70:	db05      	blt.n	4c7e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c76:	2300      	movs	r3, #0
    4c78:	4668      	mov	r0, sp
    4c7a:	f003 f9fb 	bl	8074 <z_impl_k_sem_take>
}
    4c7e:	b005      	add	sp, #20
    4c80:	f85d fb04 	ldr.w	pc, [sp], #4
    4c84:	00009f5b 	.word	0x00009f5b

00004c88 <generic_hfclk_stop>:
{
    4c88:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c8a:	f04f 0320 	mov.w	r3, #32
    4c8e:	f3ef 8411 	mrs	r4, BASEPRI
    4c92:	f383 8812 	msr	BASEPRI_MAX, r3
    4c96:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4c9a:	4a07      	ldr	r2, [pc, #28]	; (4cb8 <generic_hfclk_stop+0x30>)
    4c9c:	6813      	ldr	r3, [r2, #0]
    4c9e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    4ca2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    4ca4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    4ca6:	d402      	bmi.n	4cae <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4ca8:	2001      	movs	r0, #1
    4caa:	f005 fa99 	bl	a1e0 <nrfx_clock_stop>
	__asm__ volatile(
    4cae:	f384 8811 	msr	BASEPRI, r4
    4cb2:	f3bf 8f6f 	isb	sy
}
    4cb6:	bd10      	pop	{r4, pc}
    4cb8:	200017f4 	.word	0x200017f4

00004cbc <z_nrf_clock_control_get_onoff>:
}
    4cbc:	4a02      	ldr	r2, [pc, #8]	; (4cc8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    4cbe:	b2c3      	uxtb	r3, r0
}
    4cc0:	201c      	movs	r0, #28
    4cc2:	fb03 2000 	mla	r0, r3, r0, r2
    4cc6:	4770      	bx	lr
    4cc8:	200017a4 	.word	0x200017a4

00004ccc <z_nrf_clock_control_lf_on>:
{
    4ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cd0:	4938      	ldr	r1, [pc, #224]	; (4db4 <z_nrf_clock_control_lf_on+0xe8>)
    4cd2:	f3bf 8f5b 	dmb	ish
    4cd6:	4607      	mov	r7, r0
    4cd8:	2201      	movs	r2, #1
    4cda:	e851 3f00 	ldrex	r3, [r1]
    4cde:	e841 2000 	strex	r0, r2, [r1]
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d1f9      	bne.n	4cda <z_nrf_clock_control_lf_on+0xe>
    4ce6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4cea:	b933      	cbnz	r3, 4cfa <z_nrf_clock_control_lf_on+0x2e>
    4cec:	4932      	ldr	r1, [pc, #200]	; (4db8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    4cee:	4833      	ldr	r0, [pc, #204]	; (4dbc <z_nrf_clock_control_lf_on+0xf0>)
    4cf0:	604b      	str	r3, [r1, #4]
    4cf2:	60cb      	str	r3, [r1, #12]
    4cf4:	608a      	str	r2, [r1, #8]
    4cf6:	f004 fca3 	bl	9640 <onoff_request>
	switch (start_mode) {
    4cfa:	1e7b      	subs	r3, r7, #1
    4cfc:	2b01      	cmp	r3, #1
    4cfe:	d82b      	bhi.n	4d58 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4d00:	2f01      	cmp	r7, #1
    4d02:	d107      	bne.n	4d14 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d08:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d0c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4d10:	2b01      	cmp	r3, #1
    4d12:	d021      	beq.n	4d58 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d14:	f005 fc3d 	bl	a592 <k_is_in_isr>
    4d18:	4605      	mov	r5, r0
    4d1a:	b9f8      	cbnz	r0, 4d5c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    4d1c:	4b28      	ldr	r3, [pc, #160]	; (4dc0 <z_nrf_clock_control_lf_on+0xf4>)
    4d1e:	781b      	ldrb	r3, [r3, #0]
    4d20:	b1e3      	cbz	r3, 4d5c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    4d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d26:	2202      	movs	r2, #2
    4d28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4d2c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d2e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4dc4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d32:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4d36:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d3a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4d3e:	03d2      	lsls	r2, r2, #15
    4d40:	d516      	bpl.n	4d70 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4d42:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d46:	2b01      	cmp	r3, #1
    4d48:	d001      	beq.n	4d4e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d4a:	2f01      	cmp	r7, #1
    4d4c:	d110      	bne.n	4d70 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    4d4e:	b35d      	cbz	r5, 4da8 <z_nrf_clock_control_lf_on+0xdc>
    4d50:	f386 8811 	msr	BASEPRI, r6
    4d54:	f3bf 8f6f 	isb	sy
}
    4d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4d5c:	f04f 0320 	mov.w	r3, #32
    4d60:	f3ef 8611 	mrs	r6, BASEPRI
    4d64:	f383 8812 	msr	BASEPRI_MAX, r3
    4d68:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d6c:	2501      	movs	r5, #1
    4d6e:	e7de      	b.n	4d2e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4d70:	b1ad      	cbz	r5, 4d9e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4d72:	4630      	mov	r0, r6
    4d74:	f7fe fc36 	bl	35e4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4d78:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d1da      	bne.n	4d36 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d80:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4d84:	2a00      	cmp	r2, #0
    4d86:	d0d6      	beq.n	4d36 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4d8c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d90:	2301      	movs	r3, #1
    4d92:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4d96:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d9a:	60a3      	str	r3, [r4, #8]
}
    4d9c:	e7cb      	b.n	4d36 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4d9e:	2100      	movs	r1, #0
    4da0:	2021      	movs	r0, #33	; 0x21
    4da2:	f003 fda9 	bl	88f8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4da6:	e7e7      	b.n	4d78 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    4da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dac:	2202      	movs	r2, #2
    4dae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4db2:	e7d1      	b.n	4d58 <z_nrf_clock_control_lf_on+0x8c>
    4db4:	200017a0 	.word	0x200017a0
    4db8:	20001790 	.word	0x20001790
    4dbc:	200017c0 	.word	0x200017c0
    4dc0:	20001d13 	.word	0x20001d13
    4dc4:	e000e100 	.word	0xe000e100

00004dc8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    4dc8:	b508      	push	{r3, lr}
    4dca:	4807      	ldr	r0, [pc, #28]	; (4de8 <uart_console_init+0x20>)
    4dcc:	f005 fb6a 	bl	a4a4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4dd0:	b138      	cbz	r0, 4de2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    4dd2:	4806      	ldr	r0, [pc, #24]	; (4dec <uart_console_init+0x24>)
    4dd4:	f7fe ffec 	bl	3db0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4dd8:	4804      	ldr	r0, [pc, #16]	; (4dec <uart_console_init+0x24>)
    4dda:	f7fc fc03 	bl	15e4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4dde:	2000      	movs	r0, #0
}
    4de0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4de2:	f06f 0012 	mvn.w	r0, #18
    4de6:	e7fb      	b.n	4de0 <uart_console_init+0x18>
    4de8:	0000ac14 	.word	0x0000ac14
    4dec:	00004df1 	.word	0x00004df1

00004df0 <console_out>:
	if ('\n' == c) {
    4df0:	280a      	cmp	r0, #10
{
    4df2:	b538      	push	{r3, r4, r5, lr}
    4df4:	4d07      	ldr	r5, [pc, #28]	; (4e14 <console_out+0x24>)
    4df6:	4604      	mov	r4, r0
	if ('\n' == c) {
    4df8:	d104      	bne.n	4e04 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    4dfa:	68ab      	ldr	r3, [r5, #8]
    4dfc:	210d      	movs	r1, #13
    4dfe:	685b      	ldr	r3, [r3, #4]
    4e00:	4628      	mov	r0, r5
    4e02:	4798      	blx	r3
    4e04:	68ab      	ldr	r3, [r5, #8]
    4e06:	4803      	ldr	r0, [pc, #12]	; (4e14 <console_out+0x24>)
    4e08:	685b      	ldr	r3, [r3, #4]
    4e0a:	b2e1      	uxtb	r1, r4
    4e0c:	4798      	blx	r3
}
    4e0e:	4620      	mov	r0, r4
    4e10:	bd38      	pop	{r3, r4, r5, pc}
    4e12:	bf00      	nop
    4e14:	0000ac14 	.word	0x0000ac14

00004e18 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4e18:	b530      	push	{r4, r5, lr}
	return port->config;
    4e1a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4e1c:	7b05      	ldrb	r5, [r0, #12]
    4e1e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4e22:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    4e26:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4e28:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4e2c:	d105      	bne.n	4e3a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4e2e:	4620      	mov	r0, r4
    4e30:	f001 f96a 	bl	6108 <nrfx_gpiote_trigger_disable>

		return 0;
    4e34:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    4e36:	b005      	add	sp, #20
    4e38:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e3a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4e3c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e40:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4e44:	d114      	bne.n	4e70 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e4a:	bf0c      	ite	eq
    4e4c:	2304      	moveq	r3, #4
    4e4e:	2305      	movne	r3, #5
    4e50:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e54:	2300      	movs	r3, #0
    4e56:	4619      	mov	r1, r3
    4e58:	aa02      	add	r2, sp, #8
    4e5a:	4620      	mov	r0, r4
    4e5c:	f000 ff92 	bl	5d84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4e60:	4b1f      	ldr	r3, [pc, #124]	; (4ee0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4e62:	4298      	cmp	r0, r3
    4e64:	d139      	bne.n	4eda <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4e66:	2101      	movs	r1, #1
    4e68:	4620      	mov	r0, r4
    4e6a:	f001 f905 	bl	6078 <nrfx_gpiote_trigger_enable>
	return 0;
    4e6e:	e7e1      	b.n	4e34 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4e70:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4e74:	d026      	beq.n	4ec4 <gpio_nrfx_pin_interrupt_configure+0xac>
    4e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4e7a:	bf14      	ite	ne
    4e7c:	2301      	movne	r3, #1
    4e7e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e80:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4e84:	6883      	ldr	r3, [r0, #8]
    4e86:	40cb      	lsrs	r3, r1
    4e88:	07d9      	lsls	r1, r3, #31
    4e8a:	d4e3      	bmi.n	4e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
    4e8c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4e90:	d1e0      	bne.n	4e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4e92:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    4e94:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4e96:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    4e9a:	4a12      	ldr	r2, [pc, #72]	; (4ee4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4e9c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4ea0:	bf18      	it	ne
    4ea2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4eaa:	07db      	lsls	r3, r3, #31
    4eac:	d4d2      	bmi.n	4e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4eae:	f10d 0507 	add.w	r5, sp, #7
    4eb2:	4629      	mov	r1, r5
    4eb4:	4620      	mov	r0, r4
    4eb6:	f001 f88b 	bl	5fd0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4eba:	4b0b      	ldr	r3, [pc, #44]	; (4ee8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4ebc:	4298      	cmp	r0, r3
    4ebe:	d003      	beq.n	4ec8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    4ec0:	9503      	str	r5, [sp, #12]
    4ec2:	e7c7      	b.n	4e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4ec4:	2303      	movs	r3, #3
    4ec6:	e7db      	b.n	4e80 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    4ec8:	4628      	mov	r0, r5
    4eca:	f001 f8cf 	bl	606c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4ece:	4b04      	ldr	r3, [pc, #16]	; (4ee0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4ed0:	4298      	cmp	r0, r3
    4ed2:	d0f5      	beq.n	4ec0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    4ed4:	f06f 000b 	mvn.w	r0, #11
    4ed8:	e7ad      	b.n	4e36 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4eda:	f06f 0015 	mvn.w	r0, #21
    4ede:	e7aa      	b.n	4e36 <gpio_nrfx_pin_interrupt_configure+0x1e>
    4ee0:	0bad0000 	.word	0x0bad0000
    4ee4:	50000300 	.word	0x50000300
    4ee8:	0bad0004 	.word	0x0bad0004

00004eec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4eec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4eee:	f001 f8ad 	bl	604c <nrfx_gpiote_is_init>
    4ef2:	4604      	mov	r4, r0
    4ef4:	b968      	cbnz	r0, 4f12 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4ef6:	f001 f881 	bl	5ffc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4efa:	4b08      	ldr	r3, [pc, #32]	; (4f1c <gpio_nrfx_init+0x30>)
    4efc:	4298      	cmp	r0, r3
    4efe:	d10a      	bne.n	4f16 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4f00:	4807      	ldr	r0, [pc, #28]	; (4f20 <gpio_nrfx_init+0x34>)
    4f02:	4621      	mov	r1, r4
    4f04:	f001 f85e 	bl	5fc4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4f08:	4622      	mov	r2, r4
    4f0a:	2105      	movs	r1, #5
    4f0c:	2006      	movs	r0, #6
    4f0e:	f7fe fba5 	bl	365c <z_arm_irq_priority_set>
		return 0;
    4f12:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4f14:	bd10      	pop	{r4, pc}
		return -EIO;
    4f16:	f06f 0004 	mvn.w	r0, #4
    4f1a:	e7fb      	b.n	4f14 <gpio_nrfx_init+0x28>
    4f1c:	0bad0000 	.word	0x0bad0000
    4f20:	00004f25 	.word	0x00004f25

00004f24 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4f24:	0942      	lsrs	r2, r0, #5
{
    4f26:	b570      	push	{r4, r5, r6, lr}
    4f28:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4f2a:	d002      	beq.n	4f32 <nrfx_gpio_handler+0xe>
    4f2c:	2a01      	cmp	r2, #1
    4f2e:	d017      	beq.n	4f60 <nrfx_gpio_handler+0x3c>
}
    4f30:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4f32:	4e0d      	ldr	r6, [pc, #52]	; (4f68 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4f34:	6932      	ldr	r2, [r6, #16]
    4f36:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4f38:	2900      	cmp	r1, #0
    4f3a:	d0f9      	beq.n	4f30 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    4f3c:	f003 031f 	and.w	r3, r3, #31
    4f40:	2501      	movs	r5, #1
	return node->next;
    4f42:	680c      	ldr	r4, [r1, #0]
    4f44:	409d      	lsls	r5, r3
    4f46:	2900      	cmp	r1, #0
    4f48:	d0f2      	beq.n	4f30 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4f4a:	688a      	ldr	r2, [r1, #8]
    4f4c:	402a      	ands	r2, r5
    4f4e:	d002      	beq.n	4f56 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4f50:	684b      	ldr	r3, [r1, #4]
    4f52:	4630      	mov	r0, r6
    4f54:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4f56:	b12c      	cbz	r4, 4f64 <nrfx_gpio_handler+0x40>
    4f58:	6823      	ldr	r3, [r4, #0]
    4f5a:	4621      	mov	r1, r4
    4f5c:	461c      	mov	r4, r3
    4f5e:	e7f2      	b.n	4f46 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4f60:	4e02      	ldr	r6, [pc, #8]	; (4f6c <nrfx_gpio_handler+0x48>)
    4f62:	e7e7      	b.n	4f34 <nrfx_gpio_handler+0x10>
    4f64:	4623      	mov	r3, r4
    4f66:	e7f8      	b.n	4f5a <nrfx_gpio_handler+0x36>
    4f68:	0000abfc 	.word	0x0000abfc
    4f6c:	0000abe4 	.word	0x0000abe4

00004f70 <gpio_nrfx_pin_configure>:
{
    4f70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4f74:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4f76:	7b3b      	ldrb	r3, [r7, #12]
    4f78:	f001 051f 	and.w	r5, r1, #31
    4f7c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4f80:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4f82:	4628      	mov	r0, r5
    4f84:	f10d 0103 	add.w	r1, sp, #3
{
    4f88:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4f8a:	f001 f821 	bl	5fd0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4f8e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4f92:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4f94:	d10b      	bne.n	4fae <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4f96:	4628      	mov	r0, r5
    4f98:	f001 f8de 	bl	6158 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4f9c:	4b3d      	ldr	r3, [pc, #244]	; (5094 <gpio_nrfx_pin_configure+0x124>)
    4f9e:	4598      	cmp	r8, r3
    4fa0:	d103      	bne.n	4faa <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    4fa2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4fa6:	f001 f85b 	bl	6060 <nrfx_gpiote_channel_free>
		return 0;
    4faa:	2000      	movs	r0, #0
    4fac:	e00c      	b.n	4fc8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4fae:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4fb0:	4619      	mov	r1, r3
    4fb2:	aa02      	add	r2, sp, #8
    4fb4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4fb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4fba:	f000 fee3 	bl	5d84 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4fbe:	4b35      	ldr	r3, [pc, #212]	; (5094 <gpio_nrfx_pin_configure+0x124>)
    4fc0:	4298      	cmp	r0, r3
    4fc2:	d004      	beq.n	4fce <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    4fc4:	f06f 0015 	mvn.w	r0, #21
}
    4fc8:	b004      	add	sp, #16
    4fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4fce:	4580      	cmp	r8, r0
    4fd0:	d103      	bne.n	4fda <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    4fd2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4fd6:	f001 f843 	bl	6060 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4fda:	03a3      	lsls	r3, r4, #14
    4fdc:	d54b      	bpl.n	5076 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4fde:	f240 3306 	movw	r3, #774	; 0x306
    4fe2:	4023      	ands	r3, r4
    4fe4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4fe8:	d019      	beq.n	501e <gpio_nrfx_pin_configure+0xae>
    4fea:	d80c      	bhi.n	5006 <gpio_nrfx_pin_configure+0x96>
    4fec:	2b06      	cmp	r3, #6
    4fee:	d017      	beq.n	5020 <gpio_nrfx_pin_configure+0xb0>
    4ff0:	d804      	bhi.n	4ffc <gpio_nrfx_pin_configure+0x8c>
    4ff2:	b1ab      	cbz	r3, 5020 <gpio_nrfx_pin_configure+0xb0>
    4ff4:	2b02      	cmp	r3, #2
    4ff6:	d1e5      	bne.n	4fc4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    4ff8:	2304      	movs	r3, #4
    4ffa:	e011      	b.n	5020 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5000:	d1e0      	bne.n	4fc4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5002:	2301      	movs	r3, #1
    5004:	e00c      	b.n	5020 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5006:	f240 2202 	movw	r2, #514	; 0x202
    500a:	4293      	cmp	r3, r2
    500c:	d027      	beq.n	505e <gpio_nrfx_pin_configure+0xee>
    500e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5012:	d026      	beq.n	5062 <gpio_nrfx_pin_configure+0xf2>
    5014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5018:	d1d4      	bne.n	4fc4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    501a:	2302      	movs	r3, #2
    501c:	e000      	b.n	5020 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    501e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5020:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5024:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5028:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    502c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    502e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5032:	bf54      	ite	pl
    5034:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5038:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    503a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    503c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5040:	d511      	bpl.n	5066 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5042:	687a      	ldr	r2, [r7, #4]
    5044:	2301      	movs	r3, #1
    5046:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    504c:	2200      	movs	r2, #0
    504e:	a901      	add	r1, sp, #4
    5050:	4628      	mov	r0, r5
    5052:	f000 ff45 	bl	5ee0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5056:	4b0f      	ldr	r3, [pc, #60]	; (5094 <gpio_nrfx_pin_configure+0x124>)
    5058:	4298      	cmp	r0, r3
    505a:	d0a6      	beq.n	4faa <gpio_nrfx_pin_configure+0x3a>
    505c:	e7b2      	b.n	4fc4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    505e:	2305      	movs	r3, #5
    5060:	e7de      	b.n	5020 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5062:	2303      	movs	r3, #3
    5064:	e7dc      	b.n	5020 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5066:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5068:	bf41      	itttt	mi
    506a:	2301      	movmi	r3, #1
    506c:	687a      	ldrmi	r2, [r7, #4]
    506e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5070:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5074:	e7ea      	b.n	504c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    5076:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5078:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    507c:	bf54      	ite	pl
    507e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5082:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5084:	461a      	mov	r2, r3
    5086:	a901      	add	r1, sp, #4
    5088:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    508a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    508e:	f000 fe79 	bl	5d84 <nrfx_gpiote_input_configure>
    5092:	e7e0      	b.n	5056 <gpio_nrfx_pin_configure+0xe6>
    5094:	0bad0000 	.word	0x0bad0000

00005098 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    5098:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    509a:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    509c:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
    509e:	69e3      	ldr	r3, [r4, #28]
    50a0:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    50a2:	6a20      	ldr	r0, [r4, #32]
    50a4:	f004 ffe1 	bl	a06a <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    50a8:	2800      	cmp	r0, #0
    50aa:	db0d      	blt.n	50c8 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    50ac:	462b      	mov	r3, r5
    50ae:	4a08      	ldr	r2, [pc, #32]	; (50d0 <i2c_nrfx_twim_init+0x38>)
    50b0:	f104 0108 	add.w	r1, r4, #8
    50b4:	4620      	mov	r0, r4
    50b6:	f001 f9f1 	bl	649c <nrfx_twim_init>
    50ba:	4b06      	ldr	r3, [pc, #24]	; (50d4 <i2c_nrfx_twim_init+0x3c>)
    50bc:	4298      	cmp	r0, r3
    50be:	d104      	bne.n	50ca <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    50c0:	4620      	mov	r0, r4
    50c2:	f001 fa4d 	bl	6560 <nrfx_twim_enable>
#endif

	return 0;
    50c6:	2000      	movs	r0, #0
}
    50c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    50ca:	f06f 0004 	mvn.w	r0, #4
    50ce:	e7fb      	b.n	50c8 <i2c_nrfx_twim_init+0x30>
    50d0:	00005115 	.word	0x00005115
    50d4:	0bad0000 	.word	0x0bad0000

000050d8 <i2c_nrfx_twim_recover_bus>:
{
    50d8:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    50da:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    50dc:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    50de:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    50e2:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    50e6:	4620      	mov	r0, r4
    50e8:	f001 fa4a 	bl	6580 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    50ec:	4631      	mov	r1, r6
    50ee:	4628      	mov	r0, r5
    50f0:	f002 fc22 	bl	7938 <nrfx_twi_twim_bus_recover>
    50f4:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    50f6:	6a20      	ldr	r0, [r4, #32]
    50f8:	f004 ffb7 	bl	a06a <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    50fc:	4620      	mov	r0, r4
    50fe:	f001 fa2f 	bl	6560 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    5102:	4b03      	ldr	r3, [pc, #12]	; (5110 <i2c_nrfx_twim_recover_bus+0x38>)
    5104:	429d      	cmp	r5, r3
}
    5106:	bf14      	ite	ne
    5108:	f06f 000f 	mvnne.w	r0, #15
    510c:	2000      	moveq	r0, #0
    510e:	bd70      	pop	{r4, r5, r6, pc}
    5110:	0bad0000 	.word	0x0bad0000

00005114 <event_handler>:
	switch (p_event->type) {
    5114:	7803      	ldrb	r3, [r0, #0]
    5116:	2b01      	cmp	r3, #1
    5118:	d008      	beq.n	512c <event_handler+0x18>
    511a:	2b02      	cmp	r3, #2
    511c:	d008      	beq.n	5130 <event_handler+0x1c>
    511e:	b94b      	cbnz	r3, 5134 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    5120:	4b05      	ldr	r3, [pc, #20]	; (5138 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    5122:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    5124:	f101 0010 	add.w	r0, r1, #16
    5128:	f002 bf84 	b.w	8034 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    512c:	4b03      	ldr	r3, [pc, #12]	; (513c <event_handler+0x28>)
    512e:	e7f8      	b.n	5122 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5130:	4b03      	ldr	r3, [pc, #12]	; (5140 <event_handler+0x2c>)
    5132:	e7f6      	b.n	5122 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    5134:	4b03      	ldr	r3, [pc, #12]	; (5144 <event_handler+0x30>)
    5136:	e7f4      	b.n	5122 <event_handler+0xe>
    5138:	0bad0000 	.word	0x0bad0000
    513c:	0bae0001 	.word	0x0bae0001
    5140:	0bae0002 	.word	0x0bae0002
    5144:	0bad0001 	.word	0x0bad0001

00005148 <i2c_nrfx_twim_transfer>:
{
    5148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    514c:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5150:	6906      	ldr	r6, [r0, #16]
{
    5152:	b08b      	sub	sp, #44	; 0x2c
    5154:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    5156:	2214      	movs	r2, #20
{
    5158:	461d      	mov	r5, r3
    515a:	4681      	mov	r9, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    515c:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    5160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    5164:	9302      	str	r3, [sp, #8]
{
    5166:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    5168:	eb0d 0002 	add.w	r0, sp, r2
    516c:	2100      	movs	r1, #0
    516e:	f004 fdd3 	bl	9d18 <memset>
    5172:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    5176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    517a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    517e:	4630      	mov	r0, r6
    5180:	f002 ff78 	bl	8074 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    5184:	f106 0310 	add.w	r3, r6, #16
    5188:	9301      	str	r3, [sp, #4]
    518a:	2200      	movs	r2, #0
    518c:	2300      	movs	r3, #0
    518e:	f106 0010 	add.w	r0, r6, #16
    5192:	f002 ff6f 	bl	8074 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    5196:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    5198:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    519a:	455f      	cmp	r7, fp
    519c:	d301      	bcc.n	51a2 <i2c_nrfx_twim_transfer+0x5a>
    519e:	2400      	movs	r4, #0
    51a0:	e068      	b.n	5274 <i2c_nrfx_twim_transfer+0x12c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    51a2:	7a20      	ldrb	r0, [r4, #8]
    51a4:	0702      	lsls	r2, r0, #28
    51a6:	f100 808a 	bmi.w	52be <i2c_nrfx_twim_transfer+0x176>
		bool concat_next = ((i + 1) < num_msgs)
    51aa:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    51ac:	455f      	cmp	r7, fp
    51ae:	d20a      	bcs.n	51c6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    51b0:	0783      	lsls	r3, r0, #30
    51b2:	d408      	bmi.n	51c6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    51b4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    51b6:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    51ba:	f002 0201 	and.w	r2, r2, #1
    51be:	f003 0304 	and.w	r3, r3, #4
    51c2:	431a      	orrs	r2, r3
    51c4:	d01a      	beq.n	51fc <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
    51c6:	b1dd      	cbz	r5, 5200 <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
    51c8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    51ca:	6862      	ldr	r2, [r4, #4]
    51cc:	f8dd c008 	ldr.w	ip, [sp, #8]
    51d0:	18a9      	adds	r1, r5, r2
    51d2:	4561      	cmp	r1, ip
    51d4:	d876      	bhi.n	52c4 <i2c_nrfx_twim_transfer+0x17c>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    51d6:	07c1      	lsls	r1, r0, #31
    51d8:	d406      	bmi.n	51e8 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
    51da:	6821      	ldr	r1, [r4, #0]
    51dc:	9303      	str	r3, [sp, #12]
    51de:	eb08 0005 	add.w	r0, r8, r5
    51e2:	f004 fd8e 	bl	9d02 <memcpy>
    51e6:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
    51e8:	6862      	ldr	r2, [r4, #4]
    51ea:	442a      	add	r2, r5
    51ec:	b295      	uxth	r5, r2
		if (concat_next) {
    51ee:	2b00      	cmp	r3, #0
    51f0:	d14f      	bne.n	5292 <i2c_nrfx_twim_transfer+0x14a>
		if (msg_buf_used == 0) {
    51f2:	b14d      	cbz	r5, 5208 <i2c_nrfx_twim_transfer+0xc0>
			cur_xfer.p_primary_buf = msg_buf;
    51f4:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
    51f8:	462b      	mov	r3, r5
    51fa:	e009      	b.n	5210 <i2c_nrfx_twim_transfer+0xc8>
		bool concat_next = ((i + 1) < num_msgs)
    51fc:	2301      	movs	r3, #1
    51fe:	e7e4      	b.n	51ca <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5200:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    5202:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5206:	d51b      	bpl.n	5240 <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
    5208:	6823      	ldr	r3, [r4, #0]
    520a:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    520c:	6863      	ldr	r3, [r4, #4]
    520e:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5210:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    5212:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    5214:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    5218:	f082 0202 	eor.w	r2, r2, #2
    521c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    5220:	0152      	lsls	r2, r2, #5
    5222:	a905      	add	r1, sp, #20
    5224:	4650      	mov	r0, sl
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    5226:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    522a:	f001 f9c7 	bl	65bc <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    522e:	4b28      	ldr	r3, [pc, #160]	; (52d0 <i2c_nrfx_twim_transfer+0x188>)
    5230:	4298      	cmp	r0, r3
    5232:	d013      	beq.n	525c <i2c_nrfx_twim_transfer+0x114>
			if (res == NRFX_ERROR_BUSY) {
    5234:	330b      	adds	r3, #11
    5236:	4298      	cmp	r0, r3
    5238:	d11a      	bne.n	5270 <i2c_nrfx_twim_transfer+0x128>
				ret = -EBUSY;
    523a:	f06f 040f 	mvn.w	r4, #15
    523e:	e019      	b.n	5274 <i2c_nrfx_twim_transfer+0x12c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5240:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    5244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5248:	d0de      	beq.n	5208 <i2c_nrfx_twim_transfer+0xc0>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    524a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    524e:	4293      	cmp	r3, r2
    5250:	d33b      	bcc.n	52ca <i2c_nrfx_twim_transfer+0x182>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    5252:	4640      	mov	r0, r8
    5254:	f004 fd55 	bl	9d02 <memcpy>
			msg_buf_used = msgs[i].len;
    5258:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    525a:	e7ca      	b.n	51f2 <i2c_nrfx_twim_transfer+0xaa>
    525c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5260:	9801      	ldr	r0, [sp, #4]
    5262:	2300      	movs	r3, #0
    5264:	f002 ff06 	bl	8074 <z_impl_k_sem_take>
		if (ret != 0) {
    5268:	b158      	cbz	r0, 5282 <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
    526a:	4648      	mov	r0, r9
    526c:	f7ff ff34 	bl	50d8 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    5270:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
    5274:	4630      	mov	r0, r6
    5276:	f002 fedd 	bl	8034 <z_impl_k_sem_give>
}
    527a:	4620      	mov	r0, r4
    527c:	b00b      	add	sp, #44	; 0x2c
    527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
    5282:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    5284:	4a12      	ldr	r2, [pc, #72]	; (52d0 <i2c_nrfx_twim_transfer+0x188>)
    5286:	4293      	cmp	r3, r2
    5288:	d1f2      	bne.n	5270 <i2c_nrfx_twim_transfer+0x128>
		if ((msgs[i].flags & I2C_MSG_READ)
    528a:	7a23      	ldrb	r3, [r4, #8]
    528c:	07db      	lsls	r3, r3, #31
    528e:	d402      	bmi.n	5296 <i2c_nrfx_twim_transfer+0x14e>
		msg_buf_used = 0;
    5290:	2500      	movs	r5, #0
    5292:	340c      	adds	r4, #12
    5294:	e781      	b.n	519a <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
    5296:	9b08      	ldr	r3, [sp, #32]
    5298:	4598      	cmp	r8, r3
    529a:	d1f9      	bne.n	5290 <i2c_nrfx_twim_transfer+0x148>
    529c:	4623      	mov	r3, r4
    529e:	e008      	b.n	52b2 <i2c_nrfx_twim_transfer+0x16a>
				msg_buf_used -= msgs[j].len;
    52a0:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    52a2:	68d8      	ldr	r0, [r3, #12]
    52a4:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
    52a6:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    52a8:	fa18 f181 	uxtah	r1, r8, r1
    52ac:	f004 fd29 	bl	9d02 <memcpy>
				j--;
    52b0:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
    52b2:	685a      	ldr	r2, [r3, #4]
    52b4:	4295      	cmp	r5, r2
    52b6:	f1a3 030c 	sub.w	r3, r3, #12
    52ba:	d2f1      	bcs.n	52a0 <i2c_nrfx_twim_transfer+0x158>
    52bc:	e7e8      	b.n	5290 <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
    52be:	f06f 0485 	mvn.w	r4, #133	; 0x85
    52c2:	e7d7      	b.n	5274 <i2c_nrfx_twim_transfer+0x12c>
				ret = -ENOSPC;
    52c4:	f06f 041b 	mvn.w	r4, #27
    52c8:	e7d4      	b.n	5274 <i2c_nrfx_twim_transfer+0x12c>
				ret = -EINVAL;
    52ca:	f06f 0415 	mvn.w	r4, #21
    52ce:	e7d1      	b.n	5274 <i2c_nrfx_twim_transfer+0x12c>
    52d0:	0bad0000 	.word	0x0bad0000

000052d4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    52d4:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    52d6:	4e1c      	ldr	r6, [pc, #112]	; (5348 <pinctrl_configure_pins+0x74>)
    52d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    52dc:	4281      	cmp	r1, r0
    52de:	d101      	bne.n	52e4 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    52e0:	2000      	movs	r0, #0
    52e2:	e010      	b.n	5306 <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    52e4:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    52e6:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    52ea:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    52ec:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    52f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    52f4:	bf08      	it	eq
    52f6:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    52fa:	2b0b      	cmp	r3, #11
    52fc:	d004      	beq.n	5308 <pinctrl_configure_pins+0x34>
    52fe:	2b0c      	cmp	r3, #12
    5300:	d01f      	beq.n	5342 <pinctrl_configure_pins+0x6e>
    5302:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5306:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    5308:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    530c:	b905      	cbnz	r5, 5310 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    530e:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5310:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    5314:	f004 071f 	and.w	r7, r4, #31
    5318:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    531c:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    531e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    5322:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5324:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    5328:	bf0c      	ite	eq
    532a:	46b4      	moveq	ip, r6
    532c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    5330:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    5334:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5338:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    533c:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5340:	e7cc      	b.n	52dc <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    5342:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    5346:	e7e1      	b.n	530c <pinctrl_configure_pins+0x38>
    5348:	50000300 	.word	0x50000300

0000534c <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    534c:	4b01      	ldr	r3, [pc, #4]	; (5354 <hfclk_on_callback+0x8>)
    534e:	2201      	movs	r2, #1
    5350:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    5352:	4770      	bx	lr
    5354:	4000c000 	.word	0x4000c000

00005358 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5358:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    535a:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    535c:	d10b      	bne.n	5376 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5360:	4906      	ldr	r1, [pc, #24]	; (537c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    5362:	4807      	ldr	r0, [pc, #28]	; (5380 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5364:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    5366:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    536a:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    536e:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    5370:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    5372:	2000      	movs	r0, #0
    5374:	4770      	bx	lr
		return -ENOTSUP;
    5376:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    537a:	4770      	bx	lr
    537c:	0003d090 	.word	0x0003d090
    5380:	000f4240 	.word	0x000f4240

00005384 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5384:	4b04      	ldr	r3, [pc, #16]	; (5398 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    5386:	6900      	ldr	r0, [r0, #16]
    5388:	2200      	movs	r2, #0
    538a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    538e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5392:	f002 be4f 	b.w	8034 <z_impl_k_sem_give>
    5396:	bf00      	nop
    5398:	4000c000 	.word	0x4000c000

0000539c <temp_nrf5_sample_fetch>:
{
    539c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    539e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    53a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    53a2:	b363      	cbz	r3, 53fe <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    53a4:	2939      	cmp	r1, #57	; 0x39
    53a6:	d001      	beq.n	53ac <temp_nrf5_sample_fetch+0x10>
    53a8:	290c      	cmp	r1, #12
    53aa:	d12b      	bne.n	5404 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    53ac:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    53b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53b8:	4630      	mov	r0, r6
    53ba:	f002 fd51 	bl	7e60 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    53be:	4b13      	ldr	r3, [pc, #76]	; (540c <temp_nrf5_sample_fetch+0x70>)
    53c0:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    53c2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    53c4:	2303      	movs	r3, #3
    53c6:	2400      	movs	r4, #0
    53c8:	4669      	mov	r1, sp
    53ca:	9403      	str	r4, [sp, #12]
    53cc:	9302      	str	r3, [sp, #8]
    53ce:	f004 f937 	bl	9640 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    53d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    53da:	4628      	mov	r0, r5
    53dc:	f002 fe4a 	bl	8074 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    53e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    53e2:	f004 f985 	bl	96f0 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    53e6:	4b0a      	ldr	r3, [pc, #40]	; (5410 <temp_nrf5_sample_fetch+0x74>)
    53e8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    53ec:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    53ee:	2201      	movs	r2, #1
    53f0:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    53f2:	4630      	mov	r0, r6
    53f4:	f002 fdae 	bl	7f54 <z_impl_k_mutex_unlock>
	return 0;
    53f8:	4620      	mov	r0, r4
}
    53fa:	b004      	add	sp, #16
    53fc:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    53fe:	f06f 000a 	mvn.w	r0, #10
    5402:	e7fa      	b.n	53fa <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    5404:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5408:	e7f7      	b.n	53fa <temp_nrf5_sample_fetch+0x5e>
    540a:	bf00      	nop
    540c:	0000534d 	.word	0x0000534d
    5410:	4000c000 	.word	0x4000c000

00005414 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    5414:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    5416:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    5418:	2000      	movs	r0, #0
    541a:	f7ff fc4f 	bl	4cbc <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    541e:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    5420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5424:	2100      	movs	r1, #0
    5426:	4620      	mov	r0, r4
    5428:	f005 f94d 	bl	a6c6 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    542c:	f104 0010 	add.w	r0, r4, #16
    5430:	f005 f8c9 	bl	a5c6 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    5434:	2200      	movs	r2, #0
    5436:	2101      	movs	r1, #1
    5438:	200c      	movs	r0, #12
    543a:	f7fe f90f 	bl	365c <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    543e:	200c      	movs	r0, #12
    5440:	f7fe f8dc 	bl	35fc <arch_irq_enable>
    p_reg->INTENSET = mask;
    5444:	4b02      	ldr	r3, [pc, #8]	; (5450 <temp_nrf5_init+0x3c>)
    5446:	2201      	movs	r2, #1
    5448:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    544c:	2000      	movs	r0, #0
    544e:	bd10      	pop	{r4, pc}
    5450:	4000c000 	.word	0x4000c000

00005454 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5454:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5456:	2301      	movs	r3, #1
    5458:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    545a:	4a0e      	ldr	r2, [pc, #56]	; (5494 <compare_int_lock+0x40>)
    545c:	f3bf 8f5b 	dmb	ish
    5460:	43dc      	mvns	r4, r3
    5462:	e852 1f00 	ldrex	r1, [r2]
    5466:	ea01 0504 	and.w	r5, r1, r4
    546a:	e842 5600 	strex	r6, r5, [r2]
    546e:	2e00      	cmp	r6, #0
    5470:	d1f7      	bne.n	5462 <compare_int_lock+0xe>
    5472:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    547a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    547c:	4806      	ldr	r0, [pc, #24]	; (5498 <compare_int_lock+0x44>)
    547e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5482:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5486:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    548a:	420b      	tst	r3, r1
}
    548c:	bf14      	ite	ne
    548e:	2001      	movne	r0, #1
    5490:	2000      	moveq	r0, #0
    5492:	bd70      	pop	{r4, r5, r6, pc}
    5494:	20001840 	.word	0x20001840
    5498:	40011000 	.word	0x40011000

0000549c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    549c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    549e:	490e      	ldr	r1, [pc, #56]	; (54d8 <sys_clock_timeout_handler+0x3c>)
    54a0:	e9d1 3400 	ldrd	r3, r4, [r1]
    54a4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    54a6:	18c3      	adds	r3, r0, r3
    54a8:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    54ac:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    54b0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    54b4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    54b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    54bc:	d209      	bcs.n	54d2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    54be:	4b07      	ldr	r3, [pc, #28]	; (54dc <sys_clock_timeout_handler+0x40>)
    54c0:	681b      	ldr	r3, [r3, #0]
    54c2:	0a1a      	lsrs	r2, r3, #8
    54c4:	061b      	lsls	r3, r3, #24
    54c6:	199c      	adds	r4, r3, r6
    54c8:	4b05      	ldr	r3, [pc, #20]	; (54e0 <sys_clock_timeout_handler+0x44>)
    54ca:	f142 0500 	adc.w	r5, r2, #0
    54ce:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    54d2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    54d4:	f003 bb92 	b.w	8bfc <sys_clock_announce>
    54d8:	200005f0 	.word	0x200005f0
    54dc:	20001844 	.word	0x20001844
    54e0:	200005f8 	.word	0x200005f8

000054e4 <compare_int_unlock>:
	if (key) {
    54e4:	b311      	cbz	r1, 552c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54e6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    54ea:	2301      	movs	r3, #1
    54ec:	4a10      	ldr	r2, [pc, #64]	; (5530 <compare_int_unlock+0x4c>)
    54ee:	4083      	lsls	r3, r0
    54f0:	e852 cf00 	ldrex	ip, [r2]
    54f4:	ea4c 0c03 	orr.w	ip, ip, r3
    54f8:	e842 c100 	strex	r1, ip, [r2]
    54fc:	2900      	cmp	r1, #0
    54fe:	d1f7      	bne.n	54f0 <compare_int_unlock+0xc>
    5500:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5504:	4a0b      	ldr	r2, [pc, #44]	; (5534 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    550a:	4083      	lsls	r3, r0
    550c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5510:	4b09      	ldr	r3, [pc, #36]	; (5538 <compare_int_unlock+0x54>)
    5512:	f3bf 8f5b 	dmb	ish
    5516:	681b      	ldr	r3, [r3, #0]
    5518:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    551c:	40c3      	lsrs	r3, r0
    551e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5520:	bf42      	ittt	mi
    5522:	4b06      	ldrmi	r3, [pc, #24]	; (553c <compare_int_unlock+0x58>)
    5524:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5528:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    552c:	4770      	bx	lr
    552e:	bf00      	nop
    5530:	20001840 	.word	0x20001840
    5534:	40011000 	.word	0x40011000
    5538:	2000183c 	.word	0x2000183c
    553c:	e000e100 	.word	0xe000e100

00005540 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5540:	4b0d      	ldr	r3, [pc, #52]	; (5578 <z_nrf_rtc_timer_read+0x38>)
    5542:	6818      	ldr	r0, [r3, #0]
    5544:	0a01      	lsrs	r1, r0, #8
    5546:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5548:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    554c:	4b0b      	ldr	r3, [pc, #44]	; (557c <z_nrf_rtc_timer_read+0x3c>)
    554e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5552:	1818      	adds	r0, r3, r0
    5554:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    555c:	d20a      	bcs.n	5574 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    555e:	4b08      	ldr	r3, [pc, #32]	; (5580 <z_nrf_rtc_timer_read+0x40>)
    5560:	e9d3 2300 	ldrd	r2, r3, [r3]
    5564:	4290      	cmp	r0, r2
    5566:	eb71 0303 	sbcs.w	r3, r1, r3
    556a:	d203      	bcs.n	5574 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    556c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5570:	f141 0100 	adc.w	r1, r1, #0
}
    5574:	4770      	bx	lr
    5576:	bf00      	nop
    5578:	20001844 	.word	0x20001844
    557c:	40011000 	.word	0x40011000
    5580:	200005f8 	.word	0x200005f8

00005584 <compare_set>:
{
    5584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5588:	4616      	mov	r6, r2
    558a:	461f      	mov	r7, r3
    558c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    558e:	f7ff ff61 	bl	5454 <compare_int_lock>
    5592:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5594:	f7ff ffd4 	bl	5540 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5598:	42b0      	cmp	r0, r6
    559a:	eb71 0307 	sbcs.w	r3, r1, r7
    559e:	d251      	bcs.n	5644 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    55a0:	4b3a      	ldr	r3, [pc, #232]	; (568c <compare_set+0x108>)
    55a2:	1a30      	subs	r0, r6, r0
    55a4:	eb67 0101 	sbc.w	r1, r7, r1
    55a8:	4298      	cmp	r0, r3
    55aa:	f171 0100 	sbcs.w	r1, r1, #0
    55ae:	d26a      	bcs.n	5686 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    55b0:	4b37      	ldr	r3, [pc, #220]	; (5690 <compare_set+0x10c>)
    55b2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    55b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    55ba:	429f      	cmp	r7, r3
    55bc:	bf08      	it	eq
    55be:	4296      	cmpeq	r6, r2
    55c0:	d04e      	beq.n	5660 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    55c2:	4934      	ldr	r1, [pc, #208]	; (5694 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55c4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    55c8:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55cc:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    55d0:	00ad      	lsls	r5, r5, #2
    55d2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    55d6:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    55d8:	b2ad      	uxth	r5, r5
    55da:	f004 fda7 	bl	a12c <event_clear>
	return absolute_time & COUNTER_MAX;
    55de:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    55e2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    55e6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    55ea:	4a2b      	ldr	r2, [pc, #172]	; (5698 <compare_set+0x114>)
    55ec:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    55ee:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    55f2:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    55f4:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    55f8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    55fa:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    55fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    5602:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    5606:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    560a:	f06f 0002 	mvn.w	r0, #2
    560e:	eba0 0008 	sub.w	r0, r0, r8
    5612:	4460      	add	r0, ip
    5614:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    5618:	4290      	cmp	r0, r2
    561a:	d921      	bls.n	5660 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    561c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    561e:	b160      	cbz	r0, 563a <compare_set+0xb6>
     return p_reg->COUNTER;
    5620:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5624:	eba8 000b 	sub.w	r0, r8, fp
    5628:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    562c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5630:	d916      	bls.n	5660 <compare_set+0xdc>
					event_clear(chan);
    5632:	4620      	mov	r0, r4
    5634:	f004 fd7a 	bl	a12c <event_clear>
    5638:	4a17      	ldr	r2, [pc, #92]	; (5698 <compare_set+0x114>)
			cc_val = now + cc_inc;
    563a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    563e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    5642:	e7d9      	b.n	55f8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5644:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5646:	4a15      	ldr	r2, [pc, #84]	; (569c <compare_set+0x118>)
    5648:	f3bf 8f5b 	dmb	ish
    564c:	40a3      	lsls	r3, r4
    564e:	e852 0f00 	ldrex	r0, [r2]
    5652:	4318      	orrs	r0, r3
    5654:	e842 0100 	strex	r1, r0, [r2]
    5658:	2900      	cmp	r1, #0
    565a:	d1f8      	bne.n	564e <compare_set+0xca>
    565c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    5660:	490b      	ldr	r1, [pc, #44]	; (5690 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    5662:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5664:	0123      	lsls	r3, r4, #4
    5666:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    566a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    566e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5672:	6053      	str	r3, [r2, #4]
	return ret;
    5674:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    5676:	4620      	mov	r0, r4
    5678:	9900      	ldr	r1, [sp, #0]
    567a:	f7ff ff33 	bl	54e4 <compare_int_unlock>
}
    567e:	4628      	mov	r0, r5
    5680:	b003      	add	sp, #12
    5682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    5686:	f06f 0515 	mvn.w	r5, #21
    568a:	e7f4      	b.n	5676 <compare_set+0xf2>
    568c:	00800001 	.word	0x00800001
    5690:	200005e0 	.word	0x200005e0
    5694:	40011000 	.word	0x40011000
    5698:	007ffffd 	.word	0x007ffffd
    569c:	2000183c 	.word	0x2000183c

000056a0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    56a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    56a2:	4c1b      	ldr	r4, [pc, #108]	; (5710 <sys_clock_driver_init+0x70>)
    56a4:	4b1b      	ldr	r3, [pc, #108]	; (5714 <sys_clock_driver_init+0x74>)
    56a6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    56aa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    56ae:	4b1a      	ldr	r3, [pc, #104]	; (5718 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    56b0:	2500      	movs	r5, #0
    56b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    56b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    56ba:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    56be:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    56c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    56c6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56ca:	4b14      	ldr	r3, [pc, #80]	; (571c <sys_clock_driver_init+0x7c>)
    56cc:	2602      	movs	r6, #2
    56ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    56d2:	2101      	movs	r1, #1
    56d4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    56d8:	2011      	movs	r0, #17
    56da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    56de:	462a      	mov	r2, r5
    56e0:	f7fd ffbc 	bl	365c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    56e4:	2011      	movs	r0, #17
    56e6:	f7fd ff89 	bl	35fc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    56ea:	4a0d      	ldr	r2, [pc, #52]	; (5720 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    56ec:	2301      	movs	r3, #1
    56ee:	60a3      	str	r3, [r4, #8]
    56f0:	6023      	str	r3, [r4, #0]
    56f2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    56f4:	4b0b      	ldr	r3, [pc, #44]	; (5724 <sys_clock_driver_init+0x84>)
    56f6:	4a0c      	ldr	r2, [pc, #48]	; (5728 <sys_clock_driver_init+0x88>)
    56f8:	9300      	str	r3, [sp, #0]
    56fa:	9501      	str	r5, [sp, #4]
    56fc:	2300      	movs	r3, #0
    56fe:	4628      	mov	r0, r5
    5700:	f7ff ff40 	bl	5584 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5704:	4630      	mov	r0, r6
    5706:	f7ff fae1 	bl	4ccc <z_nrf_clock_control_lf_on>

	return 0;
}
    570a:	4628      	mov	r0, r5
    570c:	b002      	add	sp, #8
    570e:	bd70      	pop	{r4, r5, r6, pc}
    5710:	40011000 	.word	0x40011000
    5714:	000f0003 	.word	0x000f0003
    5718:	200005e0 	.word	0x200005e0
    571c:	e000e100 	.word	0xe000e100
    5720:	20001840 	.word	0x20001840
    5724:	0000549d 	.word	0x0000549d
    5728:	007fffff 	.word	0x007fffff

0000572c <rtc_nrf_isr>:
{
    572c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5730:	4c2f      	ldr	r4, [pc, #188]	; (57f0 <rtc_nrf_isr+0xc4>)
    5732:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5736:	0799      	lsls	r1, r3, #30
    5738:	d50b      	bpl.n	5752 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    573a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    573e:	b143      	cbz	r3, 5752 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5740:	4a2c      	ldr	r2, [pc, #176]	; (57f4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5742:	2300      	movs	r3, #0
    5744:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5748:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    574c:	6813      	ldr	r3, [r2, #0]
    574e:	3301      	adds	r3, #1
    5750:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5752:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5756:	03da      	lsls	r2, r3, #15
    5758:	d52a      	bpl.n	57b0 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    575a:	f3bf 8f5b 	dmb	ish
    575e:	4b26      	ldr	r3, [pc, #152]	; (57f8 <rtc_nrf_isr+0xcc>)
    5760:	e853 2f00 	ldrex	r2, [r3]
    5764:	f022 0101 	bic.w	r1, r2, #1
    5768:	e843 1000 	strex	r0, r1, [r3]
    576c:	2800      	cmp	r0, #0
    576e:	d1f7      	bne.n	5760 <rtc_nrf_isr+0x34>
    5770:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5774:	07d3      	lsls	r3, r2, #31
    5776:	d402      	bmi.n	577e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5778:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    577c:	b1c3      	cbz	r3, 57b0 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    577e:	2500      	movs	r5, #0
    5780:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5784:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    5788:	f7ff feda 	bl	5540 <z_nrf_rtc_timer_read>
    578c:	f04f 0320 	mov.w	r3, #32
    5790:	f3ef 8211 	mrs	r2, BASEPRI
    5794:	f383 8812 	msr	BASEPRI_MAX, r3
    5798:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    579c:	4b17      	ldr	r3, [pc, #92]	; (57fc <rtc_nrf_isr+0xd0>)
    579e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    57a2:	42b0      	cmp	r0, r6
    57a4:	41b9      	sbcs	r1, r7
    57a6:	d206      	bcs.n	57b6 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    57a8:	f382 8811 	msr	BASEPRI, r2
    57ac:	f3bf 8f6f 	isb	sy
}
    57b0:	b003      	add	sp, #12
    57b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    57b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    57ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    57be:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    57c2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    57c6:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    57c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57cc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    57d0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    57d4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    57d8:	f382 8811 	msr	BASEPRI, r2
    57dc:	f3bf 8f6f 	isb	sy
		if (handler) {
    57e0:	2900      	cmp	r1, #0
    57e2:	d0e5      	beq.n	57b0 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    57e4:	9000      	str	r0, [sp, #0]
    57e6:	4632      	mov	r2, r6
    57e8:	463b      	mov	r3, r7
    57ea:	4628      	mov	r0, r5
    57ec:	4788      	blx	r1
    57ee:	e7df      	b.n	57b0 <rtc_nrf_isr+0x84>
    57f0:	40011000 	.word	0x40011000
    57f4:	20001844 	.word	0x20001844
    57f8:	2000183c 	.word	0x2000183c
    57fc:	200005e0 	.word	0x200005e0

00005800 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    5800:	1c43      	adds	r3, r0, #1
{
    5802:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    5804:	d022      	beq.n	584c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5806:	2801      	cmp	r0, #1
    5808:	dd22      	ble.n	5850 <sys_clock_set_timeout+0x50>
    580a:	4a12      	ldr	r2, [pc, #72]	; (5854 <sys_clock_set_timeout+0x54>)
    580c:	4b12      	ldr	r3, [pc, #72]	; (5858 <sys_clock_set_timeout+0x58>)
    580e:	4290      	cmp	r0, r2
    5810:	bfd4      	ite	le
    5812:	4604      	movle	r4, r0
    5814:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5816:	f7ff fe93 	bl	5540 <z_nrf_rtc_timer_read>
    581a:	4b10      	ldr	r3, [pc, #64]	; (585c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    581c:	490e      	ldr	r1, [pc, #56]	; (5858 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    581e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5822:	1a80      	subs	r0, r0, r2
		cyc = 0;
    5824:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5828:	bf28      	it	cs
    582a:	2400      	movcs	r4, #0
	cyc += unannounced;
    582c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    582e:	428c      	cmp	r4, r1
    5830:	bf28      	it	cs
    5832:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    5834:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5836:	490a      	ldr	r1, [pc, #40]	; (5860 <sys_clock_set_timeout+0x60>)
    5838:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    583a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    583e:	9001      	str	r0, [sp, #4]
    5840:	f143 0300 	adc.w	r3, r3, #0
    5844:	f7ff fe9e 	bl	5584 <compare_set>
}
    5848:	b002      	add	sp, #8
    584a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    584c:	4c02      	ldr	r4, [pc, #8]	; (5858 <sys_clock_set_timeout+0x58>)
    584e:	e7e2      	b.n	5816 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5850:	2401      	movs	r4, #1
    5852:	e7e0      	b.n	5816 <sys_clock_set_timeout+0x16>
    5854:	007ffffe 	.word	0x007ffffe
    5858:	007fffff 	.word	0x007fffff
    585c:	200005f0 	.word	0x200005f0
    5860:	0000549d 	.word	0x0000549d

00005864 <sys_clock_elapsed>:
{
    5864:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5866:	f7ff fe6b 	bl	5540 <z_nrf_rtc_timer_read>
    586a:	4b02      	ldr	r3, [pc, #8]	; (5874 <sys_clock_elapsed+0x10>)
    586c:	681b      	ldr	r3, [r3, #0]
}
    586e:	1ac0      	subs	r0, r0, r3
    5870:	bd08      	pop	{r3, pc}
    5872:	bf00      	nop
    5874:	200005f0 	.word	0x200005f0

00005878 <sys_clock_disable>:
{
    5878:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    587a:	4c08      	ldr	r4, [pc, #32]	; (589c <sys_clock_disable+0x24>)
    587c:	2301      	movs	r3, #1
    587e:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    5880:	2011      	movs	r0, #17
    5882:	f7fd fec9 	bl	3618 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    5886:	4b06      	ldr	r3, [pc, #24]	; (58a0 <sys_clock_disable+0x28>)
    5888:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    588c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    5890:	4b04      	ldr	r3, [pc, #16]	; (58a4 <sys_clock_disable+0x2c>)
    5892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5896:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    589a:	bd10      	pop	{r4, pc}
    589c:	40011000 	.word	0x40011000
    58a0:	000f0003 	.word	0x000f0003
    58a4:	e000e100 	.word	0xe000e100

000058a8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    58a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    58ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    58b0:	2a08      	cmp	r2, #8
    58b2:	d106      	bne.n	58c2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    58b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    58b8:	2b05      	cmp	r3, #5
    58ba:	d802      	bhi.n	58c2 <nrf52_errata_103+0x1a>
    58bc:	4a02      	ldr	r2, [pc, #8]	; (58c8 <nrf52_errata_103+0x20>)
    58be:	5cd0      	ldrb	r0, [r2, r3]
    58c0:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    58c2:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    58c4:	4770      	bx	lr
    58c6:	bf00      	nop
    58c8:	0000b462 	.word	0x0000b462

000058cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    58cc:	4a02      	ldr	r2, [pc, #8]	; (58d8 <nvmc_wait+0xc>)
    58ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    58d2:	2b00      	cmp	r3, #0
    58d4:	d0fb      	beq.n	58ce <nvmc_wait+0x2>
}
    58d6:	4770      	bx	lr
    58d8:	4001e000 	.word	0x4001e000

000058dc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    58dc:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    58de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    58e2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    58e6:	2a08      	cmp	r2, #8
    58e8:	d14e      	bne.n	5988 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    58ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    58ee:	2100      	movs	r1, #0
    58f0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    58f4:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    58f8:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    58fc:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5900:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    5904:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5908:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    590c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5910:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5914:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5918:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    591c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5920:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5924:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5928:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    592c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5930:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5934:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5938:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    593c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5940:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    5944:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5948:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    594c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5950:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    5954:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5958:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    595c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5960:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    5964:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5968:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    596c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5970:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    5974:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5978:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    597c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5980:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    5984:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5988:	f7ff ff8e 	bl	58a8 <nrf52_errata_103>
    598c:	b118      	cbz	r0, 5996 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    598e:	4b3a      	ldr	r3, [pc, #232]	; (5a78 <SystemInit+0x19c>)
    5990:	4a3a      	ldr	r2, [pc, #232]	; (5a7c <SystemInit+0x1a0>)
    5992:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5996:	f7ff ff87 	bl	58a8 <nrf52_errata_103>
    599a:	b118      	cbz	r0, 59a4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    599c:	4b38      	ldr	r3, [pc, #224]	; (5a80 <SystemInit+0x1a4>)
    599e:	22fb      	movs	r2, #251	; 0xfb
    59a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    59a4:	f7ff ff80 	bl	58a8 <nrf52_errata_103>
    59a8:	b170      	cbz	r0, 59c8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    59aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    59ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    59b2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    59b6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    59ba:	f022 020f 	bic.w	r2, r2, #15
    59be:	f003 030f 	and.w	r3, r3, #15
    59c2:	4313      	orrs	r3, r2
    59c4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    59c8:	f7ff ff6e 	bl	58a8 <nrf52_errata_103>
    59cc:	b120      	cbz	r0, 59d8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    59ce:	4b2d      	ldr	r3, [pc, #180]	; (5a84 <SystemInit+0x1a8>)
    59d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    59d4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    59d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    59dc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    59e0:	2b08      	cmp	r3, #8
    59e2:	d11a      	bne.n	5a1a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    59e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    59ec:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    59ee:	bf44      	itt	mi
    59f0:	f06f 0201 	mvnmi.w	r2, #1
    59f4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    59f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    59fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5a00:	2b05      	cmp	r3, #5
    5a02:	d802      	bhi.n	5a0a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5a04:	4a20      	ldr	r2, [pc, #128]	; (5a88 <SystemInit+0x1ac>)
    5a06:	5cd3      	ldrb	r3, [r2, r3]
    5a08:	b13b      	cbz	r3, 5a1a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5a0a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5a0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a16:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5a1a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5a1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5a22:	2a00      	cmp	r2, #0
    5a24:	db03      	blt.n	5a2e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5a26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	da22      	bge.n	5a74 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a2e:	4917      	ldr	r1, [pc, #92]	; (5a8c <SystemInit+0x1b0>)
    5a30:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a32:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a36:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a3a:	2412      	movs	r4, #18
    nvmc_wait();
    5a3c:	f7ff ff46 	bl	58cc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5a40:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5a44:	f7ff ff42 	bl	58cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5a48:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5a4c:	f7ff ff3e 	bl	58cc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5a50:	2300      	movs	r3, #0
    5a52:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5a56:	f7ff ff39 	bl	58cc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5a5a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5a5e:	490c      	ldr	r1, [pc, #48]	; (5a90 <SystemInit+0x1b4>)
    5a60:	4b0c      	ldr	r3, [pc, #48]	; (5a94 <SystemInit+0x1b8>)
    5a62:	68ca      	ldr	r2, [r1, #12]
    5a64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5a68:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5a6a:	60cb      	str	r3, [r1, #12]
    5a6c:	f3bf 8f4f 	dsb	sy
    __NOP();
    5a70:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5a72:	e7fd      	b.n	5a70 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    5a74:	bd10      	pop	{r4, pc}
    5a76:	bf00      	nop
    5a78:	40005000 	.word	0x40005000
    5a7c:	00038148 	.word	0x00038148
    5a80:	4000f000 	.word	0x4000f000
    5a84:	40029000 	.word	0x40029000
    5a88:	0000b45c 	.word	0x0000b45c
    5a8c:	4001e000 	.word	0x4001e000
    5a90:	e000ed00 	.word	0xe000ed00
    5a94:	05fa0004 	.word	0x05fa0004

00005a98 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5a98:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5a9a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5a9c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5a9e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5aa2:	fab2 f382 	clz	r3, r2
    5aa6:	f1c3 031f 	rsb	r3, r3, #31
    5aaa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5aac:	fa05 f403 	lsl.w	r4, r5, r3
    5ab0:	ea22 0404 	bic.w	r4, r2, r4
    5ab4:	e850 6f00 	ldrex	r6, [r0]
    5ab8:	4296      	cmp	r6, r2
    5aba:	d104      	bne.n	5ac6 <nrfx_flag32_alloc+0x2e>
    5abc:	e840 4c00 	strex	ip, r4, [r0]
    5ac0:	f1bc 0f00 	cmp.w	ip, #0
    5ac4:	d1f6      	bne.n	5ab4 <nrfx_flag32_alloc+0x1c>
    5ac6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5aca:	d1e7      	bne.n	5a9c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5acc:	4801      	ldr	r0, [pc, #4]	; (5ad4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5ace:	700b      	strb	r3, [r1, #0]
}
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
    5ad2:	bf00      	nop
    5ad4:	0bad0000 	.word	0x0bad0000

00005ad8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    5ad8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5ada:	6803      	ldr	r3, [r0, #0]
    5adc:	40cb      	lsrs	r3, r1
    5ade:	07db      	lsls	r3, r3, #31
    5ae0:	d414      	bmi.n	5b0c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5ae2:	2301      	movs	r3, #1
    5ae4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    5ae6:	6802      	ldr	r2, [r0, #0]
    5ae8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5aec:	ea43 0102 	orr.w	r1, r3, r2
    5af0:	e850 4f00 	ldrex	r4, [r0]
    5af4:	4294      	cmp	r4, r2
    5af6:	d104      	bne.n	5b02 <nrfx_flag32_free+0x2a>
    5af8:	e840 1c00 	strex	ip, r1, [r0]
    5afc:	f1bc 0f00 	cmp.w	ip, #0
    5b00:	d1f6      	bne.n	5af0 <nrfx_flag32_free+0x18>
    5b02:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5b06:	d1ee      	bne.n	5ae6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    5b08:	4801      	ldr	r0, [pc, #4]	; (5b10 <nrfx_flag32_free+0x38>)
}
    5b0a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5b0c:	4801      	ldr	r0, [pc, #4]	; (5b14 <nrfx_flag32_free+0x3c>)
    5b0e:	e7fc      	b.n	5b0a <nrfx_flag32_free+0x32>
    5b10:	0bad0000 	.word	0x0bad0000
    5b14:	0bad0004 	.word	0x0bad0004

00005b18 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    5b1a:	4604      	mov	r4, r0
    5b1c:	b118      	cbz	r0, 5b26 <clock_stop+0xe>
    5b1e:	2801      	cmp	r0, #1
    5b20:	d022      	beq.n	5b68 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5b22:	b003      	add	sp, #12
    5b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    5b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b2a:	2202      	movs	r2, #2
    5b2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b30:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    5b34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b38:	2201      	movs	r2, #1
    5b3a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5b3c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5b3e:	2301      	movs	r3, #1
    5b40:	f88d 3007 	strb.w	r3, [sp, #7]
    5b44:	f242 7510 	movw	r5, #10000	; 0x2710
    5b48:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5b4c:	b1cc      	cbz	r4, 5b82 <clock_stop+0x6a>
    5b4e:	2c01      	cmp	r4, #1
    5b50:	d1e7      	bne.n	5b22 <clock_stop+0xa>
            if (p_clk_src != NULL)
    5b52:	b3c7      	cbz	r7, 5bc6 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5b54:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5b58:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5b5c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5b5e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5b62:	03da      	lsls	r2, r3, #15
    5b64:	d521      	bpl.n	5baa <clock_stop+0x92>
    5b66:	e016      	b.n	5b96 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    5b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b6c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5b6e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5b76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b7a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5b7c:	f10d 0707 	add.w	r7, sp, #7
    5b80:	e7dd      	b.n	5b3e <clock_stop+0x26>
            if (p_clk_src != NULL)
    5b82:	b1b7      	cbz	r7, 5bb2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b84:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5b88:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5b8c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b8e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5b92:	03d8      	lsls	r0, r3, #15
    5b94:	d5c5      	bpl.n	5b22 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5b96:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5b9a:	2801      	cmp	r0, #1
    5b9c:	d103      	bne.n	5ba6 <clock_stop+0x8e>
    5b9e:	f004 fae1 	bl	a164 <nrfx_busy_wait>
    5ba2:	3d01      	subs	r5, #1
    5ba4:	d1d2      	bne.n	5b4c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5ba6:	2c01      	cmp	r4, #1
    5ba8:	d1bb      	bne.n	5b22 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    5baa:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <clock_stop+0xc4>)
    5bac:	2200      	movs	r2, #0
    5bae:	715a      	strb	r2, [r3, #5]
    5bb0:	e7b7      	b.n	5b22 <clock_stop+0xa>
    5bb2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5bb6:	03d9      	lsls	r1, r3, #15
    5bb8:	d5b3      	bpl.n	5b22 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5bba:	2001      	movs	r0, #1
    5bbc:	f004 fad2 	bl	a164 <nrfx_busy_wait>
    5bc0:	3d01      	subs	r5, #1
    5bc2:	d1f6      	bne.n	5bb2 <clock_stop+0x9a>
    5bc4:	e7ad      	b.n	5b22 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5bc6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5bca:	03db      	lsls	r3, r3, #15
    5bcc:	d5ed      	bpl.n	5baa <clock_stop+0x92>
    5bce:	2001      	movs	r0, #1
    5bd0:	f004 fac8 	bl	a164 <nrfx_busy_wait>
    5bd4:	3d01      	subs	r5, #1
    5bd6:	d1f6      	bne.n	5bc6 <clock_stop+0xae>
    5bd8:	e7e7      	b.n	5baa <clock_stop+0x92>
    5bda:	bf00      	nop
    5bdc:	20001848 	.word	0x20001848

00005be0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5be0:	4b04      	ldr	r3, [pc, #16]	; (5bf4 <nrfx_clock_init+0x14>)
    5be2:	791a      	ldrb	r2, [r3, #4]
    5be4:	b922      	cbnz	r2, 5bf0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5be6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    5be8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5bea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5bec:	4802      	ldr	r0, [pc, #8]	; (5bf8 <nrfx_clock_init+0x18>)
    5bee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5bf0:	4802      	ldr	r0, [pc, #8]	; (5bfc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5bf2:	4770      	bx	lr
    5bf4:	20001848 	.word	0x20001848
    5bf8:	0bad0000 	.word	0x0bad0000
    5bfc:	0bad000c 	.word	0x0bad000c

00005c00 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5c00:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5c02:	2000      	movs	r0, #0
    5c04:	f7fd fd1c 	bl	3640 <arch_irq_is_enabled>
    5c08:	b908      	cbnz	r0, 5c0e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5c0a:	f7fd fcf7 	bl	35fc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c12:	2200      	movs	r2, #0
    5c14:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    5c18:	4b01      	ldr	r3, [pc, #4]	; (5c20 <nrfx_clock_enable+0x20>)
    5c1a:	2201      	movs	r2, #1
    5c1c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5c1e:	bd08      	pop	{r3, pc}
    5c20:	20001d0d 	.word	0x20001d0d

00005c24 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5c24:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5c2e:	b16a      	cbz	r2, 5c4c <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c30:	2200      	movs	r2, #0
    5c32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5c36:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5c3a:	2201      	movs	r2, #1
    5c3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5c40:	4b11      	ldr	r3, [pc, #68]	; (5c88 <nrfx_clock_irq_handler+0x64>)
    5c42:	7958      	ldrb	r0, [r3, #5]
    5c44:	b910      	cbnz	r0, 5c4c <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5c46:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5c48:	681b      	ldr	r3, [r3, #0]
    5c4a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5c54:	b172      	cbz	r2, 5c74 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c56:	2200      	movs	r2, #0
    5c58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5c5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c60:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c64:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5c68:	0792      	lsls	r2, r2, #30
    5c6a:	d104      	bne.n	5c76 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5c6c:	2201      	movs	r2, #1
    5c6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c72:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5c74:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    5c76:	2202      	movs	r2, #2
    5c78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5c7c:	4b02      	ldr	r3, [pc, #8]	; (5c88 <nrfx_clock_irq_handler+0x64>)
}
    5c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	2001      	movs	r0, #1
    5c86:	4718      	bx	r3
    5c88:	20001848 	.word	0x20001848

00005c8c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    5c8c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    5c8e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5c92:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    5c94:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    5c96:	6002      	str	r2, [r0, #0]
}
    5c98:	4802      	ldr	r0, [pc, #8]	; (5ca4 <nrf_gpio_pin_port_decode+0x18>)
    5c9a:	bf18      	it	ne
    5c9c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop
    5ca4:	50000300 	.word	0x50000300

00005ca8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5ca8:	4b03      	ldr	r3, [pc, #12]	; (5cb8 <pin_in_use_by_te+0x10>)
    5caa:	3008      	adds	r0, #8
    5cac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5cb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5cb4:	4770      	bx	lr
    5cb6:	bf00      	nop
    5cb8:	20000164 	.word	0x20000164

00005cbc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5cbc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5cbe:	f100 0308 	add.w	r3, r0, #8
    5cc2:	4c0c      	ldr	r4, [pc, #48]	; (5cf4 <call_handler+0x38>)
    5cc4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5cc8:	05da      	lsls	r2, r3, #23
{
    5cca:	4605      	mov	r5, r0
    5ccc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5cce:	d507      	bpl.n	5ce0 <call_handler+0x24>
    5cd0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5cd4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5cd8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5cdc:	6852      	ldr	r2, [r2, #4]
    5cde:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5ce0:	68a3      	ldr	r3, [r4, #8]
    5ce2:	b12b      	cbz	r3, 5cf0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5ce4:	68e2      	ldr	r2, [r4, #12]
    5ce6:	4631      	mov	r1, r6
    5ce8:	4628      	mov	r0, r5
    }
}
    5cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5cee:	4718      	bx	r3
}
    5cf0:	bd70      	pop	{r4, r5, r6, pc}
    5cf2:	bf00      	nop
    5cf4:	20000164 	.word	0x20000164

00005cf8 <release_handler>:
{
    5cf8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5cfa:	4a12      	ldr	r2, [pc, #72]	; (5d44 <release_handler+0x4c>)
    5cfc:	3008      	adds	r0, #8
    5cfe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5d02:	05d9      	lsls	r1, r3, #23
    5d04:	d51b      	bpl.n	5d3e <release_handler+0x46>
    5d06:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5d0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5d0e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5d12:	f102 040e 	add.w	r4, r2, #14
    5d16:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5d18:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5d1c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5d20:	d003      	beq.n	5d2a <release_handler+0x32>
    5d22:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5d26:	4299      	cmp	r1, r3
    5d28:	d009      	beq.n	5d3e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5d2a:	3001      	adds	r0, #1
    5d2c:	2830      	cmp	r0, #48	; 0x30
    5d2e:	d1f3      	bne.n	5d18 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5d30:	2300      	movs	r3, #0
    5d32:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5d36:	4804      	ldr	r0, [pc, #16]	; (5d48 <release_handler+0x50>)
}
    5d38:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5d3a:	f7ff becd 	b.w	5ad8 <nrfx_flag32_free>
}
    5d3e:	bc10      	pop	{r4}
    5d40:	4770      	bx	lr
    5d42:	bf00      	nop
    5d44:	20000164 	.word	0x20000164
    5d48:	200001d8 	.word	0x200001d8

00005d4c <pin_handler_trigger_uninit>:
{
    5d4c:	b538      	push	{r3, r4, r5, lr}
    5d4e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5d50:	f7ff ffaa 	bl	5ca8 <pin_in_use_by_te>
    5d54:	4c09      	ldr	r4, [pc, #36]	; (5d7c <pin_handler_trigger_uninit+0x30>)
    5d56:	f102 0508 	add.w	r5, r2, #8
    5d5a:	b140      	cbz	r0, 5d6e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d5c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5d60:	4907      	ldr	r1, [pc, #28]	; (5d80 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5d62:	0b5b      	lsrs	r3, r3, #13
    5d64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5d68:	2000      	movs	r0, #0
    5d6a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    5d6e:	4610      	mov	r0, r2
    5d70:	f7ff ffc2 	bl	5cf8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5d74:	2300      	movs	r3, #0
    5d76:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5d7a:	bd38      	pop	{r3, r4, r5, pc}
    5d7c:	20000164 	.word	0x20000164
    5d80:	40006000 	.word	0x40006000

00005d84 <nrfx_gpiote_input_configure>:
{
    5d84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5d88:	4604      	mov	r4, r0
    5d8a:	4616      	mov	r6, r2
    5d8c:	461d      	mov	r5, r3
    if (p_input_config)
    5d8e:	b301      	cbz	r1, 5dd2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d90:	4f4e      	ldr	r7, [pc, #312]	; (5ecc <nrfx_gpiote_input_configure+0x148>)
    5d92:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5d96:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5d9a:	079b      	lsls	r3, r3, #30
    5d9c:	d502      	bpl.n	5da4 <nrfx_gpiote_input_configure+0x20>
    5d9e:	f7ff ff83 	bl	5ca8 <pin_in_use_by_te>
    5da2:	bb10      	cbnz	r0, 5dea <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5da4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5da6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5daa:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5dae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5db2:	f10d 020f 	add.w	r2, sp, #15
    5db6:	460b      	mov	r3, r1
    5db8:	4620      	mov	r0, r4
    5dba:	f10d 010e 	add.w	r1, sp, #14
    5dbe:	f004 fa11 	bl	a1e4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5dc2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5dc6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5dca:	f043 0301 	orr.w	r3, r3, #1
    5dce:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    5dd2:	b346      	cbz	r6, 5e26 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5dd4:	4b3d      	ldr	r3, [pc, #244]	; (5ecc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5dd6:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5dda:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ddc:	f104 0708 	add.w	r7, r4, #8
    5de0:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    5de4:	0788      	lsls	r0, r1, #30
    5de6:	d502      	bpl.n	5dee <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    5de8:	b1aa      	cbz	r2, 5e16 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    5dea:	4839      	ldr	r0, [pc, #228]	; (5ed0 <nrfx_gpiote_input_configure+0x14c>)
    5dec:	e01d      	b.n	5e2a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5dee:	f021 0120 	bic.w	r1, r1, #32
    5df2:	04c9      	lsls	r1, r1, #19
    5df4:	0cc9      	lsrs	r1, r1, #19
    5df6:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    5dfa:	b162      	cbz	r2, 5e16 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    5dfc:	f1bc 0f03 	cmp.w	ip, #3
    5e00:	d8f3      	bhi.n	5dea <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5e02:	6872      	ldr	r2, [r6, #4]
    5e04:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5e06:	f1bc 0f00 	cmp.w	ip, #0
    5e0a:	d111      	bne.n	5e30 <nrfx_gpiote_input_configure+0xac>
    5e0c:	4a31      	ldr	r2, [pc, #196]	; (5ed4 <nrfx_gpiote_input_configure+0x150>)
    5e0e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    5e12:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5e16:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    5e1a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5e1e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    5e22:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    5e26:	bb45      	cbnz	r5, 5e7a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    5e28:	482b      	ldr	r0, [pc, #172]	; (5ed8 <nrfx_gpiote_input_configure+0x154>)
}
    5e2a:	b004      	add	sp, #16
    5e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5e30:	00b2      	lsls	r2, r6, #2
    5e32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5e36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5e3a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    5e3e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5e42:	f020 0003 	bic.w	r0, r0, #3
    5e46:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5e4a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5e4e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5e52:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5e56:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5e5a:	0220      	lsls	r0, r4, #8
    5e5c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5e60:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5e68:	ea40 000e 	orr.w	r0, r0, lr
    5e6c:	f041 0120 	orr.w	r1, r1, #32
    5e70:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5e74:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5e78:	e7cd      	b.n	5e16 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5e7a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5e7e:	4620      	mov	r0, r4
    5e80:	f7ff ff3a 	bl	5cf8 <release_handler>
    if (!handler)
    5e84:	2e00      	cmp	r6, #0
    5e86:	d0cf      	beq.n	5e28 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5e88:	4d10      	ldr	r5, [pc, #64]	; (5ecc <nrfx_gpiote_input_configure+0x148>)
    5e8a:	e9d5 2300 	ldrd	r2, r3, [r5]
    5e8e:	4296      	cmp	r6, r2
    5e90:	d101      	bne.n	5e96 <nrfx_gpiote_input_configure+0x112>
    5e92:	429f      	cmp	r7, r3
    5e94:	d018      	beq.n	5ec8 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5e96:	4811      	ldr	r0, [pc, #68]	; (5edc <nrfx_gpiote_input_configure+0x158>)
    5e98:	f10d 010f 	add.w	r1, sp, #15
    5e9c:	f7ff fdfc 	bl	5a98 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5ea0:	4b0d      	ldr	r3, [pc, #52]	; (5ed8 <nrfx_gpiote_input_configure+0x154>)
    5ea2:	4298      	cmp	r0, r3
    5ea4:	d1c1      	bne.n	5e2a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    5ea6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5eaa:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5eae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5eb2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5eb4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5eb6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5eba:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5ec2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5ec6:	e7af      	b.n	5e28 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ec8:	2200      	movs	r2, #0
    5eca:	e7ee      	b.n	5eaa <nrfx_gpiote_input_configure+0x126>
    5ecc:	20000164 	.word	0x20000164
    5ed0:	0bad0004 	.word	0x0bad0004
    5ed4:	40006000 	.word	0x40006000
    5ed8:	0bad0000 	.word	0x0bad0000
    5edc:	200001d8 	.word	0x200001d8

00005ee0 <nrfx_gpiote_output_configure>:
{
    5ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ee2:	4604      	mov	r4, r0
    5ee4:	b085      	sub	sp, #20
    5ee6:	4615      	mov	r5, r2
    if (p_config)
    5ee8:	b319      	cbz	r1, 5f32 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5eea:	4e33      	ldr	r6, [pc, #204]	; (5fb8 <nrfx_gpiote_output_configure+0xd8>)
    5eec:	f100 0708 	add.w	r7, r0, #8
    5ef0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5ef4:	0793      	lsls	r3, r2, #30
    5ef6:	d403      	bmi.n	5f00 <nrfx_gpiote_output_configure+0x20>
    5ef8:	f7ff fed6 	bl	5ca8 <pin_in_use_by_te>
    5efc:	2800      	cmp	r0, #0
    5efe:	d158      	bne.n	5fb2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5f00:	f012 0f1c 	tst.w	r2, #28
    5f04:	d002      	beq.n	5f0c <nrfx_gpiote_output_configure+0x2c>
    5f06:	784b      	ldrb	r3, [r1, #1]
    5f08:	2b01      	cmp	r3, #1
    5f0a:	d052      	beq.n	5fb2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5f0c:	2301      	movs	r3, #1
    5f0e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5f12:	2300      	movs	r3, #0
    5f14:	e9cd 1300 	strd	r1, r3, [sp]
    5f18:	1c4a      	adds	r2, r1, #1
    5f1a:	1c8b      	adds	r3, r1, #2
    5f1c:	4620      	mov	r0, r4
    5f1e:	f10d 010f 	add.w	r1, sp, #15
    5f22:	f004 f95f 	bl	a1e4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5f26:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5f2a:	f043 0303 	orr.w	r3, r3, #3
    5f2e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5f32:	b915      	cbnz	r5, 5f3a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    5f34:	4821      	ldr	r0, [pc, #132]	; (5fbc <nrfx_gpiote_output_configure+0xdc>)
}
    5f36:	b005      	add	sp, #20
    5f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5f3a:	4e1f      	ldr	r6, [pc, #124]	; (5fb8 <nrfx_gpiote_output_configure+0xd8>)
    5f3c:	f104 0708 	add.w	r7, r4, #8
    5f40:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5f44:	0783      	lsls	r3, r0, #30
    5f46:	d534      	bpl.n	5fb2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    5f48:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5f4c:	4661      	mov	r1, ip
    5f4e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5f50:	f020 0020 	bic.w	r0, r0, #32
    5f54:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5f58:	04c0      	lsls	r0, r0, #19
    5f5a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5f5e:	0cc0      	lsrs	r0, r0, #19
    5f60:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5f64:	2300      	movs	r3, #0
    5f66:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5f6a:	786a      	ldrb	r2, [r5, #1]
    5f6c:	2a00      	cmp	r2, #0
    5f6e:	d0e1      	beq.n	5f34 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5f70:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5f74:	78ad      	ldrb	r5, [r5, #2]
    5f76:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5f7a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5f7e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5f82:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5f86:	0223      	lsls	r3, r4, #8
    5f88:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5f8c:	0412      	lsls	r2, r2, #16
    5f8e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5f92:	ea43 030e 	orr.w	r3, r3, lr
    5f96:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5f98:	052a      	lsls	r2, r5, #20
    5f9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5f9e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5fa2:	4313      	orrs	r3, r2
    5fa4:	f040 0020 	orr.w	r0, r0, #32
    5fa8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5fac:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5fb0:	e7c0      	b.n	5f34 <nrfx_gpiote_output_configure+0x54>
{
    5fb2:	4803      	ldr	r0, [pc, #12]	; (5fc0 <nrfx_gpiote_output_configure+0xe0>)
    5fb4:	e7bf      	b.n	5f36 <nrfx_gpiote_output_configure+0x56>
    5fb6:	bf00      	nop
    5fb8:	20000164 	.word	0x20000164
    5fbc:	0bad0000 	.word	0x0bad0000
    5fc0:	0bad0004 	.word	0x0bad0004

00005fc4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5fc4:	4b01      	ldr	r3, [pc, #4]	; (5fcc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5fc6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5fca:	4770      	bx	lr
    5fcc:	20000164 	.word	0x20000164

00005fd0 <nrfx_gpiote_channel_get>:
{
    5fd0:	b508      	push	{r3, lr}
    5fd2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5fd4:	f7ff fe68 	bl	5ca8 <pin_in_use_by_te>
    5fd8:	b138      	cbz	r0, 5fea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5fda:	4b05      	ldr	r3, [pc, #20]	; (5ff0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5fdc:	4805      	ldr	r0, [pc, #20]	; (5ff4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5fde:	3208      	adds	r2, #8
    5fe0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5fe4:	0b5b      	lsrs	r3, r3, #13
    5fe6:	700b      	strb	r3, [r1, #0]
}
    5fe8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5fea:	4803      	ldr	r0, [pc, #12]	; (5ff8 <nrfx_gpiote_channel_get+0x28>)
    5fec:	e7fc      	b.n	5fe8 <nrfx_gpiote_channel_get+0x18>
    5fee:	bf00      	nop
    5ff0:	20000164 	.word	0x20000164
    5ff4:	0bad0000 	.word	0x0bad0000
    5ff8:	0bad0004 	.word	0x0bad0004

00005ffc <nrfx_gpiote_init>:
{
    5ffc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5ffe:	4c0f      	ldr	r4, [pc, #60]	; (603c <nrfx_gpiote_init+0x40>)
    6000:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6004:	b9bd      	cbnz	r5, 6036 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6006:	2260      	movs	r2, #96	; 0x60
    6008:	4629      	mov	r1, r5
    600a:	f104 0010 	add.w	r0, r4, #16
    600e:	f003 fe83 	bl	9d18 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6012:	2006      	movs	r0, #6
    6014:	f7fd faf2 	bl	35fc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6018:	4b09      	ldr	r3, [pc, #36]	; (6040 <nrfx_gpiote_init+0x44>)
    return err_code;
    601a:	480a      	ldr	r0, [pc, #40]	; (6044 <nrfx_gpiote_init+0x48>)
    601c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6020:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6024:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6028:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    602c:	2301      	movs	r3, #1
    602e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6032:	6763      	str	r3, [r4, #116]	; 0x74
}
    6034:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6036:	4804      	ldr	r0, [pc, #16]	; (6048 <nrfx_gpiote_init+0x4c>)
    6038:	e7fc      	b.n	6034 <nrfx_gpiote_init+0x38>
    603a:	bf00      	nop
    603c:	20000164 	.word	0x20000164
    6040:	40006000 	.word	0x40006000
    6044:	0bad0000 	.word	0x0bad0000
    6048:	0bad0005 	.word	0x0bad0005

0000604c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    604c:	4b03      	ldr	r3, [pc, #12]	; (605c <nrfx_gpiote_is_init+0x10>)
    604e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6052:	3800      	subs	r0, #0
    6054:	bf18      	it	ne
    6056:	2001      	movne	r0, #1
    6058:	4770      	bx	lr
    605a:	bf00      	nop
    605c:	20000164 	.word	0x20000164

00006060 <nrfx_gpiote_channel_free>:
{
    6060:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6062:	4801      	ldr	r0, [pc, #4]	; (6068 <nrfx_gpiote_channel_free+0x8>)
    6064:	f7ff bd38 	b.w	5ad8 <nrfx_flag32_free>
    6068:	200001d4 	.word	0x200001d4

0000606c <nrfx_gpiote_channel_alloc>:
{
    606c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    606e:	4801      	ldr	r0, [pc, #4]	; (6074 <nrfx_gpiote_channel_alloc+0x8>)
    6070:	f7ff bd12 	b.w	5a98 <nrfx_flag32_alloc>
    6074:	200001d4 	.word	0x200001d4

00006078 <nrfx_gpiote_trigger_enable>:
{
    6078:	b537      	push	{r0, r1, r2, r4, r5, lr}
    607a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    607c:	f7ff fe14 	bl	5ca8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6080:	f104 0208 	add.w	r2, r4, #8
    6084:	4b1e      	ldr	r3, [pc, #120]	; (6100 <nrfx_gpiote_trigger_enable+0x88>)
    6086:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    608a:	b1e8      	cbz	r0, 60c8 <nrfx_gpiote_trigger_enable+0x50>
    608c:	f013 0502 	ands.w	r5, r3, #2
    6090:	d11a      	bne.n	60c8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6092:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6094:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6096:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    609a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    609e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    60a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    60a6:	6005      	str	r5, [r0, #0]
    60a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    60aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    60ae:	f040 0001 	orr.w	r0, r0, #1
    60b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    60b6:	b129      	cbz	r1, 60c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    60b8:	2201      	movs	r2, #1
    60ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    60be:	4a11      	ldr	r2, [pc, #68]	; (6104 <nrfx_gpiote_trigger_enable+0x8c>)
    60c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    60c4:	b003      	add	sp, #12
    60c6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    60c8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    60cc:	2b04      	cmp	r3, #4
    60ce:	d012      	beq.n	60f6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    60d0:	2b05      	cmp	r3, #5
    60d2:	d012      	beq.n	60fa <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    60d4:	a801      	add	r0, sp, #4
    60d6:	9401      	str	r4, [sp, #4]
    60d8:	f7ff fdd8 	bl	5c8c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    60dc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    60de:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    60e2:	40d9      	lsrs	r1, r3
    60e4:	f001 0101 	and.w	r1, r1, #1
    60e8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    60ea:	4620      	mov	r0, r4
}
    60ec:	b003      	add	sp, #12
    60ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    60f2:	f004 b8c0 	b.w	a276 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    60f6:	2103      	movs	r1, #3
    60f8:	e7f7      	b.n	60ea <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    60fa:	2102      	movs	r1, #2
    60fc:	e7f5      	b.n	60ea <nrfx_gpiote_trigger_enable+0x72>
    60fe:	bf00      	nop
    6100:	20000164 	.word	0x20000164
    6104:	40006000 	.word	0x40006000

00006108 <nrfx_gpiote_trigger_disable>:
{
    6108:	b508      	push	{r3, lr}
    610a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    610c:	f7ff fdcc 	bl	5ca8 <pin_in_use_by_te>
    6110:	b1c0      	cbz	r0, 6144 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6112:	f102 0108 	add.w	r1, r2, #8
    6116:	4b0e      	ldr	r3, [pc, #56]	; (6150 <nrfx_gpiote_trigger_disable+0x48>)
    6118:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    611c:	0799      	lsls	r1, r3, #30
    611e:	d411      	bmi.n	6144 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6120:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6122:	2201      	movs	r2, #1
    6124:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6126:	009b      	lsls	r3, r3, #2
    6128:	490a      	ldr	r1, [pc, #40]	; (6154 <nrfx_gpiote_trigger_disable+0x4c>)
    612a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    612e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6132:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6136:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    613a:	f022 0203 	bic.w	r2, r2, #3
    613e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6142:	bd08      	pop	{r3, pc}
    6144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6148:	2100      	movs	r1, #0
    614a:	4610      	mov	r0, r2
    614c:	f004 b893 	b.w	a276 <nrf_gpio_cfg_sense_set>
    6150:	20000164 	.word	0x20000164
    6154:	40006000 	.word	0x40006000

00006158 <nrfx_gpiote_pin_uninit>:
{
    6158:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    615a:	4b0e      	ldr	r3, [pc, #56]	; (6194 <nrfx_gpiote_pin_uninit+0x3c>)
    615c:	f100 0208 	add.w	r2, r0, #8
{
    6160:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6162:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6166:	07db      	lsls	r3, r3, #31
    6168:	d511      	bpl.n	618e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    616a:	f7ff ffcd 	bl	6108 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    616e:	4620      	mov	r0, r4
    6170:	f7ff fdec 	bl	5d4c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6174:	a801      	add	r0, sp, #4
    6176:	9401      	str	r4, [sp, #4]
    6178:	f7ff fd88 	bl	5c8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6182:	2202      	movs	r2, #2
    6184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6188:	4803      	ldr	r0, [pc, #12]	; (6198 <nrfx_gpiote_pin_uninit+0x40>)
}
    618a:	b002      	add	sp, #8
    618c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    618e:	4803      	ldr	r0, [pc, #12]	; (619c <nrfx_gpiote_pin_uninit+0x44>)
    6190:	e7fb      	b.n	618a <nrfx_gpiote_pin_uninit+0x32>
    6192:	bf00      	nop
    6194:	20000164 	.word	0x20000164
    6198:	0bad0000 	.word	0x0bad0000
    619c:	0bad0004 	.word	0x0bad0004

000061a0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    61a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61a4:	4b68      	ldr	r3, [pc, #416]	; (6348 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    61a6:	4869      	ldr	r0, [pc, #420]	; (634c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    61a8:	4969      	ldr	r1, [pc, #420]	; (6350 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    61aa:	2600      	movs	r6, #0
{
    61ac:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    61ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    61b0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61b2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    61b4:	b135      	cbz	r5, 61c4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    61b6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    61ba:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    61bc:	bf1e      	ittt	ne
    61be:	601c      	strne	r4, [r3, #0]
    61c0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    61c2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    61c4:	3304      	adds	r3, #4
    61c6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    61c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    61cc:	d1f1      	bne.n	61b2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61ce:	f8df 917c 	ldr.w	r9, [pc, #380]	; 634c <nrfx_gpiote_irq_handler+0x1ac>
    61d2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    61d6:	2b00      	cmp	r3, #0
    61d8:	f000 8099 	beq.w	630e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    61dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    61e0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    61e4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    61e6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    61ea:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    61ee:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    61f0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    61f4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    61f8:	f10d 0a10 	add.w	sl, sp, #16
    61fc:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6200:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6202:	f04f 0b01 	mov.w	fp, #1
    6206:	e049      	b.n	629c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    6208:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    620a:	4a52      	ldr	r2, [pc, #328]	; (6354 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    620c:	fa94 f4a4 	rbit	r4, r4
    6210:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6214:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6216:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6218:	f104 0308 	add.w	r3, r4, #8
    621c:	9403      	str	r4, [sp, #12]
    621e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6222:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    6226:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    622a:	fa0b f202 	lsl.w	r2, fp, r2
    622e:	ea23 0302 	bic.w	r3, r3, r2
    6232:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6236:	a803      	add	r0, sp, #12
    6238:	f7ff fd28 	bl	5c8c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    623c:	9b03      	ldr	r3, [sp, #12]
    623e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6242:	08b9      	lsrs	r1, r7, #2
    6244:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6248:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    624c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    624e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6250:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6254:	d52c      	bpl.n	62b0 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    6256:	4620      	mov	r0, r4
    6258:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    625a:	b2dd      	uxtb	r5, r3
    625c:	f7ff fd2e 	bl	5cbc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6260:	a803      	add	r0, sp, #12
    6262:	9403      	str	r4, [sp, #12]
    6264:	f7ff fd12 	bl	5c8c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6268:	9b03      	ldr	r3, [sp, #12]
    626a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    626e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6272:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6276:	429d      	cmp	r5, r3
    6278:	d107      	bne.n	628a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    627a:	2100      	movs	r1, #0
    627c:	4620      	mov	r0, r4
    627e:	f003 fffa 	bl	a276 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6282:	4629      	mov	r1, r5
    6284:	4620      	mov	r0, r4
    6286:	f003 fff6 	bl	a276 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    628a:	a803      	add	r0, sp, #12
    628c:	9403      	str	r4, [sp, #12]
    628e:	f7ff fcfd 	bl	5c8c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6292:	9b03      	ldr	r3, [sp, #12]
    6294:	fa0b f303 	lsl.w	r3, fp, r3
    6298:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    629c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    62a0:	2c00      	cmp	r4, #0
    62a2:	d1b1      	bne.n	6208 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    62a4:	f1b8 0f00 	cmp.w	r8, #0
    62a8:	d11d      	bne.n	62e6 <nrfx_gpiote_irq_handler+0x146>
    62aa:	f04f 0801 	mov.w	r8, #1
    62ae:	e7a5      	b.n	61fc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    62b0:	2b02      	cmp	r3, #2
    62b2:	d10c      	bne.n	62ce <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    62b4:	2103      	movs	r1, #3
    62b6:	4620      	mov	r0, r4
    62b8:	f003 ffdd 	bl	a276 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    62bc:	f005 0305 	and.w	r3, r5, #5
    62c0:	2b01      	cmp	r3, #1
    62c2:	d1e2      	bne.n	628a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    62c4:	4639      	mov	r1, r7
    62c6:	4620      	mov	r0, r4
    62c8:	f7ff fcf8 	bl	5cbc <call_handler>
    62cc:	e7dd      	b.n	628a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    62ce:	2102      	movs	r1, #2
    62d0:	4620      	mov	r0, r4
    62d2:	9301      	str	r3, [sp, #4]
    62d4:	f003 ffcf 	bl	a276 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    62d8:	2d03      	cmp	r5, #3
    62da:	d0f3      	beq.n	62c4 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    62dc:	9b01      	ldr	r3, [sp, #4]
    62de:	2b03      	cmp	r3, #3
    62e0:	d1d3      	bne.n	628a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    62e2:	2d02      	cmp	r5, #2
    62e4:	e7ed      	b.n	62c2 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    62e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    62ea:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    62ee:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    62f2:	4919      	ldr	r1, [pc, #100]	; (6358 <nrfx_gpiote_irq_handler+0x1b8>)
    62f4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    62f8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    62fa:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    62fe:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6302:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6304:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6306:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    630a:	f47f af73 	bne.w	61f4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    630e:	2401      	movs	r4, #1
    while (mask)
    6310:	b916      	cbnz	r6, 6318 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6312:	b007      	add	sp, #28
    6314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6318:	fa96 f3a6 	rbit	r3, r6
    631c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6320:	fa04 f203 	lsl.w	r2, r4, r3
    6324:	009b      	lsls	r3, r3, #2
    6326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    632a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    632e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6332:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6336:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    633a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    633e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6342:	f7ff fcbb 	bl	5cbc <call_handler>
    6346:	e7e3      	b.n	6310 <nrfx_gpiote_irq_handler+0x170>
    6348:	40006100 	.word	0x40006100
    634c:	40006000 	.word	0x40006000
    6350:	40006120 	.word	0x40006120
    6354:	20000164 	.word	0x20000164
    6358:	50000300 	.word	0x50000300

0000635c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    635c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    635e:	4c18      	ldr	r4, [pc, #96]	; (63c0 <nrfx_power_init+0x64>)
    6360:	7823      	ldrb	r3, [r4, #0]
    6362:	bb53      	cbnz	r3, 63ba <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    6364:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    6366:	f3c2 0340 	ubfx	r3, r2, #1, #1
    636a:	0792      	lsls	r2, r2, #30
    636c:	d512      	bpl.n	6394 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    636e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6372:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6376:	2a08      	cmp	r2, #8
    6378:	d10b      	bne.n	6392 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    637a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    637e:	2b05      	cmp	r3, #5
    6380:	d807      	bhi.n	6392 <nrfx_power_init+0x36>
    6382:	4a10      	ldr	r2, [pc, #64]	; (63c4 <nrfx_power_init+0x68>)
    6384:	5cd3      	ldrb	r3, [r2, r3]
    6386:	b123      	cbz	r3, 6392 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    638c:	2201      	movs	r2, #1
    638e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6392:	2301      	movs	r3, #1
    6394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6398:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    639c:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    639e:	f003 0301 	and.w	r3, r3, #1
    63a2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    63a6:	2000      	movs	r0, #0
    63a8:	f7fd f94a 	bl	3640 <arch_irq_is_enabled>
    63ac:	b908      	cbnz	r0, 63b2 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    63ae:	f7fd f925 	bl	35fc <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    63b2:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    63b4:	4804      	ldr	r0, [pc, #16]	; (63c8 <nrfx_power_init+0x6c>)
    m_initialized = true;
    63b6:	7023      	strb	r3, [r4, #0]
}
    63b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    63ba:	4804      	ldr	r0, [pc, #16]	; (63cc <nrfx_power_init+0x70>)
    63bc:	e7fc      	b.n	63b8 <nrfx_power_init+0x5c>
    63be:	bf00      	nop
    63c0:	20001d0e 	.word	0x20001d0e
    63c4:	0000b47f 	.word	0x0000b47f
    63c8:	0bad0000 	.word	0x0bad0000
    63cc:	0bad000c 	.word	0x0bad000c

000063d0 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    63d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63d4:	f44f 7260 	mov.w	r2, #896	; 0x380
    63d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    63dc:	4b01      	ldr	r3, [pc, #4]	; (63e4 <nrfx_power_usbevt_uninit+0x14>)
    63de:	2200      	movs	r2, #0
    63e0:	601a      	str	r2, [r3, #0]
}
    63e2:	4770      	bx	lr
    63e4:	20001850 	.word	0x20001850

000063e8 <nrfx_power_usbevt_init>:
{
    63e8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    63ea:	f7ff fff1 	bl	63d0 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    63ee:	6803      	ldr	r3, [r0, #0]
    63f0:	b10b      	cbz	r3, 63f6 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    63f2:	4a01      	ldr	r2, [pc, #4]	; (63f8 <nrfx_power_usbevt_init+0x10>)
    63f4:	6013      	str	r3, [r2, #0]
}
    63f6:	bd08      	pop	{r3, pc}
    63f8:	20001850 	.word	0x20001850

000063fc <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    63fc:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    63fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6402:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6406:	0762      	lsls	r2, r4, #29
    6408:	d507      	bpl.n	641a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    640a:	f44f 7084 	mov.w	r0, #264	; 0x108
    640e:	f003 ff41 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6412:	b110      	cbz	r0, 641a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    6414:	4b1e      	ldr	r3, [pc, #120]	; (6490 <nrfx_power_irq_handler+0x94>)
    6416:	681b      	ldr	r3, [r3, #0]
    6418:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    641a:	06a3      	lsls	r3, r4, #26
    641c:	d508      	bpl.n	6430 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    641e:	f44f 708a 	mov.w	r0, #276	; 0x114
    6422:	f003 ff37 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6426:	b118      	cbz	r0, 6430 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6428:	4b1a      	ldr	r3, [pc, #104]	; (6494 <nrfx_power_irq_handler+0x98>)
    642a:	2000      	movs	r0, #0
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6430:	0660      	lsls	r0, r4, #25
    6432:	d508      	bpl.n	6446 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6434:	f44f 708c 	mov.w	r0, #280	; 0x118
    6438:	f003 ff2c 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    643c:	b118      	cbz	r0, 6446 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    643e:	4b15      	ldr	r3, [pc, #84]	; (6494 <nrfx_power_irq_handler+0x98>)
    6440:	2001      	movs	r0, #1
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6446:	0621      	lsls	r1, r4, #24
    6448:	d508      	bpl.n	645c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    644a:	f44f 708e 	mov.w	r0, #284	; 0x11c
    644e:	f003 ff21 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6452:	b118      	cbz	r0, 645c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    6454:	4b10      	ldr	r3, [pc, #64]	; (6498 <nrfx_power_irq_handler+0x9c>)
    6456:	2000      	movs	r0, #0
    6458:	681b      	ldr	r3, [r3, #0]
    645a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    645c:	05e2      	lsls	r2, r4, #23
    645e:	d508      	bpl.n	6472 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    6460:	f44f 7090 	mov.w	r0, #288	; 0x120
    6464:	f003 ff16 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6468:	b118      	cbz	r0, 6472 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    646a:	4b0b      	ldr	r3, [pc, #44]	; (6498 <nrfx_power_irq_handler+0x9c>)
    646c:	2001      	movs	r0, #1
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6472:	05a3      	lsls	r3, r4, #22
    6474:	d50a      	bpl.n	648c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6476:	f44f 7092 	mov.w	r0, #292	; 0x124
    647a:	f003 ff0b 	bl	a294 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    647e:	b128      	cbz	r0, 648c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6480:	4b05      	ldr	r3, [pc, #20]	; (6498 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6486:	681b      	ldr	r3, [r3, #0]
    6488:	2002      	movs	r0, #2
    648a:	4718      	bx	r3
}
    648c:	bd10      	pop	{r4, pc}
    648e:	bf00      	nop
    6490:	20001858 	.word	0x20001858
    6494:	20001854 	.word	0x20001854
    6498:	20001850 	.word	0x20001850

0000649c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    64a0:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    64a2:	4d2b      	ldr	r5, [pc, #172]	; (6550 <nrfx_twim_init+0xb4>)
    64a4:	f04f 0e34 	mov.w	lr, #52	; 0x34
    64a8:	fb0e fe06 	mul.w	lr, lr, r6
    64ac:	eb05 040e 	add.w	r4, r5, lr
    64b0:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    64b4:	2f00      	cmp	r7, #0
    64b6:	d148      	bne.n	654a <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    64b8:	f8d0 c000 	ldr.w	ip, [r0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    64bc:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    64c0:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    64c2:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    64c4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    64c8:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    64cc:	7b4b      	ldrb	r3, [r1, #13]
    64ce:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    64d2:	7b8b      	ldrb	r3, [r1, #14]
    64d4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    64d8:	b1cb      	cbz	r3, 650e <nrfx_twim_init+0x72>
    64da:	7bcb      	ldrb	r3, [r1, #15]
    64dc:	b92b      	cbnz	r3, 64ea <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    64de:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    64e2:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    64e6:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    64ea:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    64ec:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
    64f0:	b122      	cbz	r2, 64fc <nrfx_twim_init+0x60>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    64f2:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    64f4:	f340 3007 	sbfx	r0, r0, #12, #8
    64f8:	f7fd f880 	bl	35fc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    64fc:	2334      	movs	r3, #52	; 0x34
    64fe:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6502:	4814      	ldr	r0, [pc, #80]	; (6554 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6504:	2301      	movs	r3, #1
    6506:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    650a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    650e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    6510:	4b11      	ldr	r3, [pc, #68]	; (6558 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    6512:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    6516:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    6518:	2c01      	cmp	r4, #1
    651a:	bf08      	it	eq
    651c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    651e:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
    6522:	bf18      	it	ne
    6524:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6528:	f240 6e0c 	movw	lr, #1548	; 0x60c
    652c:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    6530:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    6532:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    6536:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    6538:	2c01      	cmp	r4, #1
    653a:	bf18      	it	ne
    653c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6540:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    6544:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    6548:	e7c7      	b.n	64da <nrfx_twim_init+0x3e>
        return err_code;
    654a:	4804      	ldr	r0, [pc, #16]	; (655c <nrfx_twim_init+0xc0>)
    654c:	e7dd      	b.n	650a <nrfx_twim_init+0x6e>
    654e:	bf00      	nop
    6550:	2000185c 	.word	0x2000185c
    6554:	0bad0000 	.word	0x0bad0000
    6558:	50000300 	.word	0x50000300
    655c:	0bad0005 	.word	0x0bad0005

00006560 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    6560:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6562:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    6564:	2106      	movs	r1, #6
    6566:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    656a:	4b04      	ldr	r3, [pc, #16]	; (657c <nrfx_twim_enable+0x1c>)
    656c:	2134      	movs	r1, #52	; 0x34
    656e:	fb01 3302 	mla	r3, r1, r2, r3
    6572:	2202      	movs	r2, #2
    6574:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    6578:	4770      	bx	lr
    657a:	bf00      	nop
    657c:	2000185c 	.word	0x2000185c

00006580 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6580:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    6582:	4b0c      	ldr	r3, [pc, #48]	; (65b4 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    6584:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    6586:	2034      	movs	r0, #52	; 0x34
    6588:	fb00 3301 	mla	r3, r0, r1, r3
    658c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    658e:	480a      	ldr	r0, [pc, #40]	; (65b8 <nrfx_twim_disable+0x38>)
    6590:	6099      	str	r1, [r3, #8]
    6592:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    6596:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    659a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    659e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    65a2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    65a6:	2201      	movs	r2, #1
    65a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    65ac:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    65b0:	4770      	bx	lr
    65b2:	bf00      	nop
    65b4:	2000185c 	.word	0x2000185c
    65b8:	019c0202 	.word	0x019c0202

000065bc <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    65bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    65c0:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 68b0 <nrfx_twim_xfer+0x2f4>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    65c4:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    65c8:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    65ca:	2334      	movs	r3, #52	; 0x34
    65cc:	fb03 c30e 	mla	r3, r3, lr, ip
{
    65d0:	4617      	mov	r7, r2
    p_cb->error = false;
    65d2:	2200      	movs	r2, #0
    65d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    65d8:	684b      	ldr	r3, [r1, #4]
{
    65da:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    65dc:	b14b      	cbz	r3, 65f2 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    65de:	68cb      	ldr	r3, [r1, #12]
    65e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    65e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    65e8:	d003      	beq.n	65f2 <nrfx_twim_xfer+0x36>
        return err_code;
    65ea:	4eb2      	ldr	r6, [pc, #712]	; (68b4 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    65ec:	4630      	mov	r0, r6
    65ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    65f2:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    65f4:	4bb0      	ldr	r3, [pc, #704]	; (68b8 <nrfx_twim_xfer+0x2fc>)
    65f6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    65fa:	fb06 c60e 	mla	r6, r6, lr, ip
    65fe:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    6602:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    6606:	b123      	cbz	r3, 6612 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6608:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    660a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    660e:	4eab      	ldr	r6, [pc, #684]	; (68bc <nrfx_twim_xfer+0x300>)
    6610:	e7ec      	b.n	65ec <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    6612:	f017 0f14 	tst.w	r7, #20
    6616:	bf0c      	ite	eq
    6618:	2301      	moveq	r3, #1
    661a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    661c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    6620:	46a9      	mov	r9, r5
    6622:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    6626:	f106 080c 	add.w	r8, r6, #12
    662a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    662e:	f8d9 3000 	ldr.w	r3, [r9]
    6632:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    6636:	f3c7 1300 	ubfx	r3, r7, #4, #1
    663a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    663e:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    6640:	786b      	ldrb	r3, [r5, #1]
    6642:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6646:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    664a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    664e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    6652:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    6656:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    665a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    665e:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    6662:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    6666:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    666a:	bf18      	it	ne
    666c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    666e:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    6672:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    6676:	bf18      	it	ne
    6678:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    667a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    667e:	782b      	ldrb	r3, [r5, #0]
    6680:	2b03      	cmp	r3, #3
    6682:	f200 80b9 	bhi.w	67f8 <nrfx_twim_xfer+0x23c>
    6686:	e8df f003 	tbb	[pc, r3]
    668a:	a48b      	.short	0xa48b
    668c:	026d      	.short	0x026d
    668e:	692b      	ldr	r3, [r5, #16]
    6690:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6698:	d1a7      	bne.n	65ea <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    669a:	f44f 7380 	mov.w	r3, #256	; 0x100
    669e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    66a2:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    66a4:	68ea      	ldr	r2, [r5, #12]
    66a6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    66aa:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66ae:	2300      	movs	r3, #0
    66b0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    66b4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66b8:	2201      	movs	r2, #1
    66ba:	6222      	str	r2, [r4, #32]
    66bc:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66be:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    66c2:	2a00      	cmp	r2, #0
    66c4:	d0fb      	beq.n	66be <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66c6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    66ca:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    66ce:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    66d0:	68ab      	ldr	r3, [r5, #8]
    66d2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    66d6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    66da:	2334      	movs	r3, #52	; 0x34
    66dc:	fb03 c30e 	mla	r3, r3, lr, ip
    66e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    66e4:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    66e6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    66e8:	4e75      	ldr	r6, [pc, #468]	; (68c0 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    66ea:	0738      	lsls	r0, r7, #28
    66ec:	d407      	bmi.n	66fe <nrfx_twim_xfer+0x142>
    66ee:	782a      	ldrb	r2, [r5, #0]
    66f0:	2a03      	cmp	r2, #3
    66f2:	d004      	beq.n	66fe <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66f4:	2201      	movs	r2, #1
    66f6:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    66f8:	686b      	ldr	r3, [r5, #4]
    66fa:	b903      	cbnz	r3, 66fe <nrfx_twim_xfer+0x142>
    66fc:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    66fe:	2334      	movs	r3, #52	; 0x34
    6700:	fb03 f30e 	mul.w	r3, r3, lr
    6704:	eb0c 0203 	add.w	r2, ip, r3
    6708:	f85c 1003 	ldr.w	r1, [ip, r3]
    670c:	2900      	cmp	r1, #0
    670e:	d176      	bne.n	67fe <nrfx_twim_xfer+0x242>
    6710:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6712:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    6716:	2b00      	cmp	r3, #0
    6718:	f000 8089 	beq.w	682e <nrfx_twim_xfer+0x272>
    671c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    6720:	2b00      	cmp	r3, #0
    6722:	f040 8087 	bne.w	6834 <nrfx_twim_xfer+0x278>
    6726:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    672a:	2b00      	cmp	r3, #0
    672c:	f000 8095 	beq.w	685a <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    6730:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6732:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    6736:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    673a:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    673e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    6742:	2d00      	cmp	r5, #0
    6744:	f000 8081 	beq.w	684a <nrfx_twim_xfer+0x28e>
    6748:	f412 7f00 	tst.w	r2, #512	; 0x200
    674c:	f402 7280 	and.w	r2, r2, #256	; 0x100
    6750:	d17e      	bne.n	6850 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6752:	6220      	str	r0, [r4, #32]
    6754:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    6756:	2a00      	cmp	r2, #0
    6758:	d0db      	beq.n	6712 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    675a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    675e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    6762:	e7d6      	b.n	6712 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    6764:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6766:	68ea      	ldr	r2, [r5, #12]
    6768:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    676c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    6770:	692b      	ldr	r3, [r5, #16]
    6772:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    6776:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    677a:	f47f af36 	bne.w	65ea <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    677e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6780:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    6784:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    6788:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    678c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6790:	2334      	movs	r3, #52	; 0x34
    6792:	fb03 c30e 	mla	r3, r3, lr, ip
    6796:	2202      	movs	r2, #2
    6798:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    679a:	2301      	movs	r3, #1
    679c:	6223      	str	r3, [r4, #32]
    679e:	e7a2      	b.n	66e6 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    67a0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    67a2:	68ea      	ldr	r2, [r5, #12]
    67a4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    67a8:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    67ac:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    67b0:	f04f 0334 	mov.w	r3, #52	; 0x34
    67b4:	d008      	beq.n	67c8 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    67b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    67ba:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    67be:	fb03 c30e 	mla	r3, r3, lr, ip
    67c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    67c6:	e7e7      	b.n	6798 <nrfx_twim_xfer+0x1dc>
    67c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    67cc:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    67d0:	e7df      	b.n	6792 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    67d2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    67d4:	68ea      	ldr	r2, [r5, #12]
    67d6:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    67da:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    67de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    67e2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    67e6:	2334      	movs	r3, #52	; 0x34
    67e8:	fb03 c30e 	mla	r3, r3, lr, ip
    67ec:	2202      	movs	r2, #2
    67ee:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67f0:	2301      	movs	r3, #1
    67f2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    67f4:	2300      	movs	r3, #0
    67f6:	e777      	b.n	66e8 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    67f8:	4e32      	ldr	r6, [pc, #200]	; (68c4 <nrfx_twim_xfer+0x308>)
    67fa:	2308      	movs	r3, #8
    67fc:	e775      	b.n	66ea <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    67fe:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    6800:	bf44      	itt	mi
    6802:	2300      	movmi	r3, #0
    6804:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    6806:	067a      	lsls	r2, r7, #25
    6808:	d406      	bmi.n	6818 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    680a:	2334      	movs	r3, #52	; 0x34
    680c:	fb03 c30e 	mla	r3, r3, lr, ip
    6810:	689a      	ldr	r2, [r3, #8]
    6812:	f042 0202 	orr.w	r2, r2, #2
    6816:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    6818:	2334      	movs	r3, #52	; 0x34
    681a:	fb03 c30e 	mla	r3, r3, lr, ip
    681e:	689a      	ldr	r2, [r3, #8]
    6820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    6824:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6826:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    6828:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    682c:	e6de      	b.n	65ec <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    682e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    6832:	b123      	cbz	r3, 683e <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6834:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    6838:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    683c:	e773      	b.n	6726 <nrfx_twim_xfer+0x16a>
    683e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    6842:	2a00      	cmp	r2, #0
    6844:	f43f af65 	beq.w	6712 <nrfx_twim_xfer+0x156>
    6848:	e773      	b.n	6732 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    684a:	6220      	str	r0, [r4, #32]
    684c:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    684e:	e760      	b.n	6712 <nrfx_twim_xfer+0x156>
    6850:	2a00      	cmp	r2, #0
    6852:	d182      	bne.n	675a <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    6854:	2b00      	cmp	r3, #0
    6856:	f43f af5c 	beq.w	6712 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    685a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    685c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    6860:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    6864:	fb01 c20e 	mla	r2, r1, lr, ip
    6868:	2000      	movs	r0, #0
    686a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    686e:	b18b      	cbz	r3, 6894 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    6870:	4a15      	ldr	r2, [pc, #84]	; (68c8 <nrfx_twim_xfer+0x30c>)
    6872:	4e16      	ldr	r6, [pc, #88]	; (68cc <nrfx_twim_xfer+0x310>)
    6874:	f013 0f01 	tst.w	r3, #1
    6878:	bf18      	it	ne
    687a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    687c:	f013 0f02 	tst.w	r3, #2
    6880:	f102 0201 	add.w	r2, r2, #1
    6884:	bf18      	it	ne
    6886:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6888:	f013 0f04 	tst.w	r3, #4
    688c:	4b10      	ldr	r3, [pc, #64]	; (68d0 <nrfx_twim_xfer+0x314>)
    688e:	bf18      	it	ne
    6890:	461e      	movne	r6, r3
    6892:	e6ab      	b.n	65ec <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    6894:	067b      	lsls	r3, r7, #25
    6896:	f53f aea9 	bmi.w	65ec <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    689a:	fb0e c101 	mla	r1, lr, r1, ip
    689e:	4620      	mov	r0, r4
    68a0:	f003 fd19 	bl	a2d6 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    68a4:	4b09      	ldr	r3, [pc, #36]	; (68cc <nrfx_twim_xfer+0x310>)
    68a6:	2800      	cmp	r0, #0
    68a8:	bf08      	it	eq
    68aa:	461e      	moveq	r6, r3
    68ac:	e69e      	b.n	65ec <nrfx_twim_xfer+0x30>
    68ae:	bf00      	nop
    68b0:	2000185c 	.word	0x2000185c
    68b4:	0bad000a 	.word	0x0bad000a
    68b8:	019c0202 	.word	0x019c0202
    68bc:	0bad000b 	.word	0x0bad000b
    68c0:	0bad0000 	.word	0x0bad0000
    68c4:	0bad0004 	.word	0x0bad0004
    68c8:	0bae0000 	.word	0x0bae0000
    68cc:	0bad0001 	.word	0x0bad0001
    68d0:	0bae0002 	.word	0x0bae0002

000068d4 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    68d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68d6:	4d59      	ldr	r5, [pc, #356]	; (6a3c <nrfx_twim_0_irq_handler+0x168>)
    68d8:	4c59      	ldr	r4, [pc, #356]	; (6a40 <nrfx_twim_0_irq_handler+0x16c>)
    68da:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    68de:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    68e0:	b1fb      	cbz	r3, 6922 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68e2:	2300      	movs	r3, #0
    68e4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    68e8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68ec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    68f0:	b9bb      	cbnz	r3, 6922 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    68f2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    68f4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    68f8:	2302      	movs	r3, #2
    68fa:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    68fc:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    68fe:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6902:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    6906:	b11b      	cbz	r3, 6910 <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    6908:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    690c:	059e      	lsls	r6, r3, #22
    690e:	d403      	bmi.n	6918 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6910:	4b4a      	ldr	r3, [pc, #296]	; (6a3c <nrfx_twim_0_irq_handler+0x168>)
    6912:	2201      	movs	r2, #1
    6914:	621a      	str	r2, [r3, #32]
    6916:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    6918:	2301      	movs	r3, #1
    691a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    691e:	b007      	add	sp, #28
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6922:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    6926:	2b00      	cmp	r3, #0
    6928:	d059      	beq.n	69de <nrfx_twim_0_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    692a:	2300      	movs	r3, #0
    692c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    6930:	6a27      	ldr	r7, [r4, #32]
    6932:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    6936:	067d      	lsls	r5, r7, #25
    6938:	d40a      	bmi.n	6950 <nrfx_twim_0_irq_handler+0x7c>
    693a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    693e:	b93b      	cbnz	r3, 6950 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    6940:	493f      	ldr	r1, [pc, #252]	; (6a40 <nrfx_twim_0_irq_handler+0x16c>)
    6942:	483e      	ldr	r0, [pc, #248]	; (6a3c <nrfx_twim_0_irq_handler+0x168>)
    6944:	f003 fcc7 	bl	a2d6 <xfer_completeness_check>
    6948:	f080 0001 	eor.w	r0, r0, #1
    694c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    6950:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    6954:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    6958:	d11f      	bne.n	699a <nrfx_twim_0_irq_handler+0xc6>
            event.xfer_desc = p_cb->xfer_desc;
    695a:	4e3a      	ldr	r6, [pc, #232]	; (6a44 <nrfx_twim_0_irq_handler+0x170>)
    695c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    695e:	ad01      	add	r5, sp, #4
    6960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6962:	6833      	ldr	r3, [r6, #0]
    6964:	602b      	str	r3, [r5, #0]
    6966:	4b35      	ldr	r3, [pc, #212]	; (6a3c <nrfx_twim_0_irq_handler+0x168>)
    6968:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    696c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    6970:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    6974:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    6978:	f1bc 0f00 	cmp.w	ip, #0
    697c:	d002      	beq.n	6984 <nrfx_twim_0_irq_handler+0xb0>
    697e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    6982:	b152      	cbz	r2, 699a <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    6984:	2200      	movs	r2, #0
    6986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    698a:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    698c:	4a2e      	ldr	r2, [pc, #184]	; (6a48 <nrfx_twim_0_irq_handler+0x174>)
    698e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6992:	4b2e      	ldr	r3, [pc, #184]	; (6a4c <nrfx_twim_0_irq_handler+0x178>)
    6994:	2208      	movs	r2, #8
    6996:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    699a:	4a28      	ldr	r2, [pc, #160]	; (6a3c <nrfx_twim_0_irq_handler+0x168>)
    699c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    69a0:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    69a4:	0798      	lsls	r0, r3, #30
    69a6:	d443      	bmi.n	6a30 <nrfx_twim_0_irq_handler+0x15c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    69a8:	0759      	lsls	r1, r3, #29
    69aa:	d443      	bmi.n	6a34 <nrfx_twim_0_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    69ac:	07da      	lsls	r2, r3, #31
    69ae:	d443      	bmi.n	6a38 <nrfx_twim_0_irq_handler+0x164>
    else if (p_cb->error)
    69b0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    69b4:	009b      	lsls	r3, r3, #2
    69b6:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    69b8:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    69bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    69c0:	b90b      	cbnz	r3, 69c6 <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    69c2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    69c6:	6a23      	ldr	r3, [r4, #32]
    69c8:	075b      	lsls	r3, r3, #29
    69ca:	d503      	bpl.n	69d4 <nrfx_twim_0_irq_handler+0x100>
    69cc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    69d0:	2b00      	cmp	r3, #0
    69d2:	d0a4      	beq.n	691e <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    69d4:	e9d4 3100 	ldrd	r3, r1, [r4]
    69d8:	4668      	mov	r0, sp
    69da:	4798      	blx	r3
}
    69dc:	e79f      	b.n	691e <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69de:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    69e2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    69e6:	7b23      	ldrb	r3, [r4, #12]
    69e8:	b983      	cbnz	r3, 6a0c <nrfx_twim_0_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    69ea:	4f16      	ldr	r7, [pc, #88]	; (6a44 <nrfx_twim_0_irq_handler+0x170>)
    69ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    69ee:	ae01      	add	r6, sp, #4
    69f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    69f2:	683b      	ldr	r3, [r7, #0]
    69f4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    69f6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    69fa:	2b00      	cmp	r3, #0
    69fc:	d1cd      	bne.n	699a <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    69fe:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    6a02:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    6a04:	4b10      	ldr	r3, [pc, #64]	; (6a48 <nrfx_twim_0_irq_handler+0x174>)
    6a06:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    6a0a:	e7c2      	b.n	6992 <nrfx_twim_0_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    6a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
    6a10:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    6a14:	f240 2302 	movw	r3, #514	; 0x202
    6a18:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    6a1a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    6a1e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    6a22:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    6a24:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a28:	2301      	movs	r3, #1
    6a2a:	60ab      	str	r3, [r5, #8]
    6a2c:	622b      	str	r3, [r5, #32]
            return;
    6a2e:	e776      	b.n	691e <nrfx_twim_0_irq_handler+0x4a>
    6a30:	2301      	movs	r3, #1
    6a32:	e7c1      	b.n	69b8 <nrfx_twim_0_irq_handler+0xe4>
    6a34:	2302      	movs	r3, #2
    6a36:	e7bf      	b.n	69b8 <nrfx_twim_0_irq_handler+0xe4>
    6a38:	2303      	movs	r3, #3
    6a3a:	e7bd      	b.n	69b8 <nrfx_twim_0_irq_handler+0xe4>
    6a3c:	40003000 	.word	0x40003000
    6a40:	2000185c 	.word	0x2000185c
    6a44:	20001868 	.word	0x20001868
    6a48:	019c0202 	.word	0x019c0202
    6a4c:	e000e100 	.word	0xe000e100

00006a50 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6a50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6a54:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6a58:	2a08      	cmp	r2, #8
    6a5a:	d106      	bne.n	6a6a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6a5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6a60:	2b05      	cmp	r3, #5
    6a62:	d804      	bhi.n	6a6e <nrf52_errata_187+0x1e>
    6a64:	4a03      	ldr	r2, [pc, #12]	; (6a74 <nrf52_errata_187+0x24>)
    6a66:	5cd0      	ldrb	r0, [r2, r3]
    6a68:	4770      	bx	lr
                        return false;
    6a6a:	2000      	movs	r0, #0
    6a6c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6a6e:	2001      	movs	r0, #1
}
    6a70:	4770      	bx	lr
    6a72:	bf00      	nop
    6a74:	0000b48f 	.word	0x0000b48f

00006a78 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6a78:	4b05      	ldr	r3, [pc, #20]	; (6a90 <ep_state_access+0x18>)
    6a7a:	f010 0f80 	tst.w	r0, #128	; 0x80
    6a7e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    6a82:	bf08      	it	eq
    6a84:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    6a86:	f000 000f 	and.w	r0, r0, #15
}
    6a8a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6a8e:	4770      	bx	lr
    6a90:	20001a38 	.word	0x20001a38

00006a94 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    6a94:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    6a96:	4a07      	ldr	r2, [pc, #28]	; (6ab4 <ev_usbreset_handler+0x20>)
    6a98:	2300      	movs	r3, #0
    6a9a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6a9c:	4a06      	ldr	r2, [pc, #24]	; (6ab8 <ev_usbreset_handler+0x24>)
    6a9e:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    6aa0:	2301      	movs	r3, #1
    6aa2:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    6aa4:	4b05      	ldr	r3, [pc, #20]	; (6abc <ev_usbreset_handler+0x28>)
    6aa6:	a801      	add	r0, sp, #4
    6aa8:	681b      	ldr	r3, [r3, #0]
    6aaa:	4798      	blx	r3
}
    6aac:	b003      	add	sp, #12
    6aae:	f85d fb04 	ldr.w	pc, [sp], #4
    6ab2:	bf00      	nop
    6ab4:	20001d11 	.word	0x20001d11
    6ab8:	20001d10 	.word	0x20001d10
    6abc:	20001ad0 	.word	0x20001ad0

00006ac0 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    6ac0:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    6ac2:	4b19      	ldr	r3, [pc, #100]	; (6b28 <ev_usbevent_handler+0x68>)
    6ac4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    6ac8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    6acc:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    6ace:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    6ad2:	d508      	bpl.n	6ae6 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    6ad4:	4b15      	ldr	r3, [pc, #84]	; (6b2c <ev_usbevent_handler+0x6c>)
    6ad6:	2201      	movs	r2, #1
    6ad8:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    6ada:	2302      	movs	r3, #2
    6adc:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    6ade:	4b14      	ldr	r3, [pc, #80]	; (6b30 <ev_usbevent_handler+0x70>)
    6ae0:	a801      	add	r0, sp, #4
    6ae2:	681b      	ldr	r3, [r3, #0]
    6ae4:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6ae6:	05a2      	lsls	r2, r4, #22
    6ae8:	d508      	bpl.n	6afc <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    6aea:	4b10      	ldr	r3, [pc, #64]	; (6b2c <ev_usbevent_handler+0x6c>)
    6aec:	2200      	movs	r2, #0
    6aee:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    6af0:	2303      	movs	r3, #3
    6af2:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    6af4:	4b0e      	ldr	r3, [pc, #56]	; (6b30 <ev_usbevent_handler+0x70>)
    6af6:	a801      	add	r0, sp, #4
    6af8:	681b      	ldr	r3, [r3, #0]
    6afa:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    6afc:	0563      	lsls	r3, r4, #21
    6afe:	d510      	bpl.n	6b22 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    6b00:	4b0a      	ldr	r3, [pc, #40]	; (6b2c <ev_usbevent_handler+0x6c>)
    6b02:	781a      	ldrb	r2, [r3, #0]
    6b04:	b16a      	cbz	r2, 6b22 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    6b06:	2200      	movs	r2, #0
    6b08:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    6b0a:	4b07      	ldr	r3, [pc, #28]	; (6b28 <ev_usbevent_handler+0x68>)
    6b0c:	2201      	movs	r2, #1
    6b0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6b12:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    6b16:	2304      	movs	r3, #4
    6b18:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    6b1a:	4b05      	ldr	r3, [pc, #20]	; (6b30 <ev_usbevent_handler+0x70>)
    6b1c:	a801      	add	r0, sp, #4
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	4798      	blx	r3
        }
    }
}
    6b22:	b002      	add	sp, #8
    6b24:	bd10      	pop	{r4, pc}
    6b26:	bf00      	nop
    6b28:	40027000 	.word	0x40027000
    6b2c:	20001d11 	.word	0x20001d11
    6b30:	20001ad0 	.word	0x20001ad0

00006b34 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    6b34:	f04f 0320 	mov.w	r3, #32
    6b38:	f3ef 8011 	mrs	r0, BASEPRI
    6b3c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b40:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6b44:	4b0a      	ldr	r3, [pc, #40]	; (6b70 <usbd_errata_187_211_begin+0x3c>)
    6b46:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6b4a:	2203      	movs	r2, #3
    6b4c:	b961      	cbnz	r1, 6b68 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b4e:	f249 3175 	movw	r1, #37749	; 0x9375
    6b52:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6b56:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b5a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6b5e:	f380 8811 	msr	BASEPRI, r0
    6b62:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6b66:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6b68:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6b6c:	e7f7      	b.n	6b5e <usbd_errata_187_211_begin+0x2a>
    6b6e:	bf00      	nop
    6b70:	4006e000 	.word	0x4006e000

00006b74 <usbd_errata_187_211_end>:
	__asm__ volatile(
    6b74:	f04f 0320 	mov.w	r3, #32
    6b78:	f3ef 8011 	mrs	r0, BASEPRI
    6b7c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b80:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6b84:	4b0a      	ldr	r3, [pc, #40]	; (6bb0 <usbd_errata_187_211_end+0x3c>)
    6b86:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6b8a:	b961      	cbnz	r1, 6ba6 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b8c:	f249 3275 	movw	r2, #37749	; 0x9375
    6b90:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6b94:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b98:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6b9c:	f380 8811 	msr	BASEPRI, r0
    6ba0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    6ba4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    6ba6:	2200      	movs	r2, #0
    6ba8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6bac:	e7f6      	b.n	6b9c <usbd_errata_187_211_end+0x28>
    6bae:	bf00      	nop
    6bb0:	4006e000 	.word	0x4006e000

00006bb4 <nrfx_usbd_feeder_flash>:
{
    6bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bb6:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6bb8:	4f0b      	ldr	r7, [pc, #44]	; (6be8 <nrfx_usbd_feeder_flash+0x34>)
    6bba:	429a      	cmp	r2, r3
    6bbc:	bf28      	it	cs
    6bbe:	461a      	movcs	r2, r3
{
    6bc0:	460c      	mov	r4, r1
    6bc2:	4615      	mov	r5, r2
    6bc4:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6bc6:	6809      	ldr	r1, [r1, #0]
    6bc8:	4638      	mov	r0, r7
    6bca:	f003 f89a 	bl	9d02 <memcpy>
    p_next->size = tx_size;
    6bce:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    6bd2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    6bd4:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    6bd6:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    6bd8:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    6bda:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    6bdc:	6023      	str	r3, [r4, #0]
}
    6bde:	3800      	subs	r0, #0
    6be0:	bf18      	it	ne
    6be2:	2001      	movne	r0, #1
    6be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6be6:	bf00      	nop
    6be8:	20001890 	.word	0x20001890

00006bec <nrfx_usbd_feeder_flash_zlp>:
{
    6bec:	b570      	push	{r4, r5, r6, lr}
    6bee:	684b      	ldr	r3, [r1, #4]
    6bf0:	429a      	cmp	r2, r3
    6bf2:	bf28      	it	cs
    6bf4:	461a      	movcs	r2, r3
    6bf6:	4606      	mov	r6, r0
    6bf8:	460d      	mov	r5, r1
    6bfa:	4614      	mov	r4, r2
    if (tx_size != 0)
    6bfc:	b182      	cbz	r2, 6c20 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    6bfe:	6809      	ldr	r1, [r1, #0]
    6c00:	4808      	ldr	r0, [pc, #32]	; (6c24 <nrfx_usbd_feeder_flash_zlp+0x38>)
    6c02:	f003 f87e 	bl	9d02 <memcpy>
        p_next->p_data.tx = p_buffer;
    6c06:	4b07      	ldr	r3, [pc, #28]	; (6c24 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    6c08:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    6c0c:	686b      	ldr	r3, [r5, #4]
    6c0e:	1b1b      	subs	r3, r3, r4
    6c10:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    6c12:	682b      	ldr	r3, [r5, #0]
    6c14:	4423      	add	r3, r4
}
    6c16:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    6c18:	602b      	str	r3, [r5, #0]
}
    6c1a:	bf18      	it	ne
    6c1c:	2001      	movne	r0, #1
    6c1e:	bd70      	pop	{r4, r5, r6, pc}
    6c20:	4613      	mov	r3, r2
    6c22:	e7f1      	b.n	6c08 <nrfx_usbd_feeder_flash_zlp+0x1c>
    6c24:	20001890 	.word	0x20001890

00006c28 <ev_sof_handler>:
{
    6c28:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    6c2a:	2300      	movs	r3, #0
    6c2c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    6c30:	4b0b      	ldr	r3, [pc, #44]	; (6c60 <ev_sof_handler+0x38>)
    6c32:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    6c36:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6c3a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    6c3e:	4a09      	ldr	r2, [pc, #36]	; (6c64 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6c40:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    6c42:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6c44:	bf14      	ite	ne
    6c46:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    6c4a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    6c4e:	430b      	orrs	r3, r1
    6c50:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    6c52:	4b05      	ldr	r3, [pc, #20]	; (6c68 <ev_sof_handler+0x40>)
    6c54:	a801      	add	r0, sp, #4
    6c56:	681b      	ldr	r3, [r3, #0]
    6c58:	4798      	blx	r3
}
    6c5a:	b003      	add	sp, #12
    6c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c60:	40027000 	.word	0x40027000
    6c64:	20001acc 	.word	0x20001acc
    6c68:	20001ad0 	.word	0x20001ad0

00006c6c <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6c6c:	4b06      	ldr	r3, [pc, #24]	; (6c88 <atomic_and.constprop.0.isra.0+0x1c>)
    6c6e:	f3bf 8f5b 	dmb	ish
    6c72:	e853 1f00 	ldrex	r1, [r3]
    6c76:	4001      	ands	r1, r0
    6c78:	e843 1200 	strex	r2, r1, [r3]
    6c7c:	2a00      	cmp	r2, #0
    6c7e:	d1f8      	bne.n	6c72 <atomic_and.constprop.0.isra.0+0x6>
    6c80:	f3bf 8f5b 	dmb	ish
}
    6c84:	4770      	bx	lr
    6c86:	bf00      	nop
    6c88:	20001ac8 	.word	0x20001ac8

00006c8c <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6c90:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6c94:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    6c96:	bf02      	ittt	eq
    6c98:	4b03      	ldreq	r3, [pc, #12]	; (6ca8 <usbd_dma_pending_clear+0x1c>)
    6c9a:	2200      	moveq	r2, #0
    6c9c:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    6ca0:	4b02      	ldr	r3, [pc, #8]	; (6cac <usbd_dma_pending_clear+0x20>)
    6ca2:	2200      	movs	r2, #0
    6ca4:	701a      	strb	r2, [r3, #0]
}
    6ca6:	4770      	bx	lr
    6ca8:	40027000 	.word	0x40027000
    6cac:	20001d0f 	.word	0x20001d0f

00006cb0 <nrf_usbd_ep0in_dma_handler>:
{
    6cb0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    6cb2:	f7ff ffeb 	bl	6c8c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6cb6:	4b08      	ldr	r3, [pc, #32]	; (6cd8 <nrf_usbd_ep0in_dma_handler+0x28>)
    6cb8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    6cbc:	2a03      	cmp	r2, #3
    6cbe:	d105      	bne.n	6ccc <nrf_usbd_ep0in_dma_handler+0x1c>
}
    6cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6cc4:	f06f 0001 	mvn.w	r0, #1
    6cc8:	f7ff bfd0 	b.w	6c6c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	d0f5      	beq.n	6cc0 <nrf_usbd_ep0in_dma_handler+0x10>
}
    6cd4:	bd08      	pop	{r3, pc}
    6cd6:	bf00      	nop
    6cd8:	200019a8 	.word	0x200019a8

00006cdc <usbd_ep_data_handler>:
{
    6cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    6cde:	2201      	movs	r2, #1
    6ce0:	fa02 f501 	lsl.w	r5, r2, r1
    6ce4:	491c      	ldr	r1, [pc, #112]	; (6d58 <usbd_ep_data_handler+0x7c>)
    6ce6:	4e1d      	ldr	r6, [pc, #116]	; (6d5c <usbd_ep_data_handler+0x80>)
    6ce8:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    6cea:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    6cee:	ea43 0305 	orr.w	r3, r3, r5
{
    6cf2:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    6cf4:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    6cf6:	d024      	beq.n	6d42 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6cf8:	f000 020f 	and.w	r2, r0, #15
    6cfc:	4b18      	ldr	r3, [pc, #96]	; (6d60 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6cfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6d02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6d06:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6d0a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    6d0c:	b132      	cbz	r2, 6d1c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    6d0e:	2200      	movs	r2, #0
    6d10:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    6d12:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    6d14:	681b      	ldr	r3, [r3, #0]
    6d16:	d011      	beq.n	6d3c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    6d18:	f003 fb54 	bl	a3c4 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6d1c:	6833      	ldr	r3, [r6, #0]
    6d1e:	402b      	ands	r3, r5
    6d20:	d10a      	bne.n	6d38 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6d22:	2206      	movs	r2, #6
    6d24:	f88d 2004 	strb.w	r2, [sp, #4]
    6d28:	f88d 4006 	strb.w	r4, [sp, #6]
    6d2c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6d30:	4b0c      	ldr	r3, [pc, #48]	; (6d64 <usbd_ep_data_handler+0x88>)
    6d32:	a801      	add	r0, sp, #4
    6d34:	681b      	ldr	r3, [r3, #0]
    6d36:	4798      	blx	r3
}
    6d38:	b002      	add	sp, #8
    6d3a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    6d3c:	f7ff ffb8 	bl	6cb0 <nrf_usbd_ep0in_dma_handler>
    6d40:	e7ec      	b.n	6d1c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6d42:	6833      	ldr	r3, [r6, #0]
    6d44:	421d      	tst	r5, r3
    6d46:	d1f7      	bne.n	6d38 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    6d48:	2306      	movs	r3, #6
    6d4a:	f88d 3004 	strb.w	r3, [sp, #4]
    6d4e:	f88d 0006 	strb.w	r0, [sp, #6]
    6d52:	f88d 2007 	strb.w	r2, [sp, #7]
    6d56:	e7eb      	b.n	6d30 <usbd_ep_data_handler+0x54>
    6d58:	20001acc 	.word	0x20001acc
    6d5c:	20001ac8 	.word	0x20001ac8
    6d60:	0000b1ee 	.word	0x0000b1ee
    6d64:	20001ad0 	.word	0x20001ad0

00006d68 <ev_setup_data_handler>:
{
    6d68:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6d6a:	4b05      	ldr	r3, [pc, #20]	; (6d80 <ev_setup_data_handler+0x18>)
    6d6c:	781a      	ldrb	r2, [r3, #0]
    6d6e:	4610      	mov	r0, r2
    6d70:	f003 fb1f 	bl	a3b2 <ep2bit>
}
    6d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6d78:	4601      	mov	r1, r0
    6d7a:	4610      	mov	r0, r2
    6d7c:	f7ff bfae 	b.w	6cdc <usbd_ep_data_handler>
    6d80:	20001d10 	.word	0x20001d10

00006d84 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6d84:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6d86:	f7ff ff81 	bl	6c8c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6d8a:	4b0c      	ldr	r3, [pc, #48]	; (6dbc <ev_dma_epout8_handler+0x38>)
    6d8c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6d90:	2a03      	cmp	r2, #3
    6d92:	d010      	beq.n	6db6 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    6d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6d98:	b96b      	cbnz	r3, 6db6 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6d9a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    6d9e:	f7ff ff65 	bl	6c6c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6da2:	2306      	movs	r3, #6
    6da4:	f88d 3004 	strb.w	r3, [sp, #4]
    6da8:	2308      	movs	r3, #8
    6daa:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6dae:	4b04      	ldr	r3, [pc, #16]	; (6dc0 <ev_dma_epout8_handler+0x3c>)
    6db0:	a801      	add	r0, sp, #4
    6db2:	681b      	ldr	r3, [r3, #0]
    6db4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6db6:	b003      	add	sp, #12
    6db8:	f85d fb04 	ldr.w	pc, [sp], #4
    6dbc:	200019a8 	.word	0x200019a8
    6dc0:	20001ad0 	.word	0x20001ad0

00006dc4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6dc4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6dc6:	f7ff ff61 	bl	6c8c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6dca:	4b10      	ldr	r3, [pc, #64]	; (6e0c <ev_dma_epin8_handler+0x48>)
    6dcc:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    6dd0:	2a03      	cmp	r2, #3
    6dd2:	d106      	bne.n	6de2 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6dd4:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6dd8:	b003      	add	sp, #12
    6dda:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6dde:	f7ff bf45 	b.w	6c6c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6de2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6de6:	b96b      	cbnz	r3, 6e04 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6de8:	f46f 7080 	mvn.w	r0, #256	; 0x100
    6dec:	f7ff ff3e 	bl	6c6c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6df0:	2306      	movs	r3, #6
    6df2:	f88d 3004 	strb.w	r3, [sp, #4]
    6df6:	2388      	movs	r3, #136	; 0x88
    6df8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6dfc:	4b04      	ldr	r3, [pc, #16]	; (6e10 <ev_dma_epin8_handler+0x4c>)
    6dfe:	a801      	add	r0, sp, #4
    6e00:	681b      	ldr	r3, [r3, #0]
    6e02:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6e04:	b003      	add	sp, #12
    6e06:	f85d fb04 	ldr.w	pc, [sp], #4
    6e0a:	bf00      	nop
    6e0c:	200019a8 	.word	0x200019a8
    6e10:	20001ad0 	.word	0x20001ad0

00006e14 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    6e14:	4a02      	ldr	r2, [pc, #8]	; (6e20 <nrfx_usbd_uninit+0xc>)
    6e16:	2300      	movs	r3, #0
    6e18:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    6e1a:	4a02      	ldr	r2, [pc, #8]	; (6e24 <nrfx_usbd_uninit+0x10>)
    6e1c:	7013      	strb	r3, [r2, #0]
    return;
}
    6e1e:	4770      	bx	lr
    6e20:	20001ad0 	.word	0x20001ad0
    6e24:	20001d12 	.word	0x20001d12

00006e28 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    6e28:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    6e2a:	4b4c      	ldr	r3, [pc, #304]	; (6f5c <nrfx_usbd_enable+0x134>)
    6e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6e30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6e34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6e38:	f7ff fe0a 	bl	6a50 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6e3c:	b108      	cbz	r0, 6e42 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    6e3e:	f7ff fe79 	bl	6b34 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6e42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6e46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6e4a:	2b08      	cmp	r3, #8
    6e4c:	d119      	bne.n	6e82 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    6e4e:	f04f 0320 	mov.w	r3, #32
    6e52:	f3ef 8011 	mrs	r0, BASEPRI
    6e56:	f383 8812 	msr	BASEPRI_MAX, r3
    6e5a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6e5e:	4b40      	ldr	r3, [pc, #256]	; (6f60 <nrfx_usbd_enable+0x138>)
    6e60:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6e64:	22c0      	movs	r2, #192	; 0xc0
    6e66:	2900      	cmp	r1, #0
    6e68:	d170      	bne.n	6f4c <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6e6a:	f249 3175 	movw	r1, #37749	; 0x9375
    6e6e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6e72:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6e76:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6e7a:	f380 8811 	msr	BASEPRI, r0
    6e7e:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    6e82:	4b36      	ldr	r3, [pc, #216]	; (6f5c <nrfx_usbd_enable+0x134>)
    6e84:	2201      	movs	r2, #1
    6e86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6e8a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    6e8e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    6e92:	0512      	lsls	r2, r2, #20
    6e94:	d5fb      	bpl.n	6e8e <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    6e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6e9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6e9e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6ea2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6ea6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6eaa:	2b08      	cmp	r3, #8
    6eac:	d118      	bne.n	6ee0 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    6eae:	f04f 0320 	mov.w	r3, #32
    6eb2:	f3ef 8011 	mrs	r0, BASEPRI
    6eb6:	f383 8812 	msr	BASEPRI_MAX, r3
    6eba:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6ebe:	4b28      	ldr	r3, [pc, #160]	; (6f60 <nrfx_usbd_enable+0x138>)
    6ec0:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6ec4:	2900      	cmp	r1, #0
    6ec6:	d144      	bne.n	6f52 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6ec8:	f249 3275 	movw	r2, #37749	; 0x9375
    6ecc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6ed0:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6ed4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6ed8:	f380 8811 	msr	BASEPRI, r0
    6edc:	f3bf 8f6f 	isb	sy
    6ee0:	f7ff fdb6 	bl	6a50 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6ee4:	b130      	cbz	r0, 6ef4 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    6ee6:	f7ff fe45 	bl	6b74 <usbd_errata_187_211_end>
    6eea:	f7ff fdb1 	bl	6a50 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6eee:	b108      	cbz	r0, 6ef4 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    6ef0:	f7ff fe20 	bl	6b34 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6ef8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6efc:	2b08      	cmp	r3, #8
    6efe:	4b17      	ldr	r3, [pc, #92]	; (6f5c <nrfx_usbd_enable+0x134>)
    6f00:	d10a      	bne.n	6f18 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    6f02:	f240 72e3 	movw	r2, #2019	; 0x7e3
    6f06:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    6f0a:	2240      	movs	r2, #64	; 0x40
    6f0c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    6f10:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6f14:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6f18:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    6f1a:	2280      	movs	r2, #128	; 0x80
    6f1c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6f20:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6f24:	4b0f      	ldr	r3, [pc, #60]	; (6f64 <nrfx_usbd_enable+0x13c>)
    6f26:	f240 12ff 	movw	r2, #511	; 0x1ff
    6f2a:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6f2c:	4b0e      	ldr	r3, [pc, #56]	; (6f68 <nrfx_usbd_enable+0x140>)
    6f2e:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    6f30:	f7ff feac 	bl	6c8c <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6f34:	4b0d      	ldr	r3, [pc, #52]	; (6f6c <nrfx_usbd_enable+0x144>)
    6f36:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    6f38:	4b0d      	ldr	r3, [pc, #52]	; (6f70 <nrfx_usbd_enable+0x148>)
    6f3a:	2202      	movs	r2, #2
    6f3c:	701a      	strb	r2, [r3, #0]
    6f3e:	f7ff fd87 	bl	6a50 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6f42:	b150      	cbz	r0, 6f5a <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    6f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    6f48:	f7ff be14 	b.w	6b74 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6f4c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6f50:	e793      	b.n	6e7a <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6f52:	2200      	movs	r2, #0
    6f54:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6f58:	e7be      	b.n	6ed8 <nrfx_usbd_enable+0xb0>
}
    6f5a:	bd08      	pop	{r3, pc}
    6f5c:	40027000 	.word	0x40027000
    6f60:	4006e000 	.word	0x4006e000
    6f64:	20001acc 	.word	0x20001acc
    6f68:	20001ac8 	.word	0x20001ac8
    6f6c:	20001d10 	.word	0x20001d10
    6f70:	20001d12 	.word	0x20001d12

00006f74 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    6f74:	4b0a      	ldr	r3, [pc, #40]	; (6fa0 <nrfx_usbd_start+0x2c>)
    6f76:	2200      	movs	r2, #0
{
    6f78:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    6f7a:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    6f7c:	4a09      	ldr	r2, [pc, #36]	; (6fa4 <nrfx_usbd_start+0x30>)
    6f7e:	4b0a      	ldr	r3, [pc, #40]	; (6fa8 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    6f80:	4c0a      	ldr	r4, [pc, #40]	; (6fac <nrfx_usbd_start+0x38>)
    6f82:	2800      	cmp	r0, #0
    6f84:	bf08      	it	eq
    6f86:	4613      	moveq	r3, r2
    6f88:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    6f8c:	2027      	movs	r0, #39	; 0x27
    6f8e:	f7fc fb35 	bl	35fc <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6f92:	2301      	movs	r3, #1
    6f94:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6f98:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    6f9c:	bd10      	pop	{r4, pc}
    6f9e:	bf00      	nop
    6fa0:	20001d11 	.word	0x20001d11
    6fa4:	01c01407 	.word	0x01c01407
    6fa8:	01e01407 	.word	0x01e01407
    6fac:	40027000 	.word	0x40027000

00006fb0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6fb0:	4b03      	ldr	r3, [pc, #12]	; (6fc0 <nrfx_usbd_is_enabled+0x10>)
    6fb2:	7818      	ldrb	r0, [r3, #0]
}
    6fb4:	2801      	cmp	r0, #1
    6fb6:	bf94      	ite	ls
    6fb8:	2000      	movls	r0, #0
    6fba:	2001      	movhi	r0, #1
    6fbc:	4770      	bx	lr
    6fbe:	bf00      	nop
    6fc0:	20001d12 	.word	0x20001d12

00006fc4 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    6fc4:	b510      	push	{r4, lr}
	__asm__ volatile(
    6fc6:	f04f 0320 	mov.w	r3, #32
    6fca:	f3ef 8111 	mrs	r1, BASEPRI
    6fce:	f383 8812 	msr	BASEPRI_MAX, r3
    6fd2:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    6fd6:	4b0f      	ldr	r3, [pc, #60]	; (7014 <nrfx_usbd_suspend+0x50>)
    6fd8:	781b      	ldrb	r3, [r3, #0]
    6fda:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6fde:	b193      	cbz	r3, 7006 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    6fe0:	4b0d      	ldr	r3, [pc, #52]	; (7018 <nrfx_usbd_suspend+0x54>)
    6fe2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6fe6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    6fea:	d10c      	bne.n	7006 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    6fec:	2401      	movs	r4, #1
    6fee:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6ff2:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    6ff6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6ffa:	05a4      	lsls	r4, r4, #22
    6ffc:	d504      	bpl.n	7008 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    6ffe:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7002:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    7006:	2000      	movs	r0, #0
	__asm__ volatile(
    7008:	f381 8811 	msr	BASEPRI, r1
    700c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    7010:	bd10      	pop	{r4, pc}
    7012:	bf00      	nop
    7014:	20001d11 	.word	0x20001d11
    7018:	40027000 	.word	0x40027000

0000701c <nrfx_usbd_init>:
{
    701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    701e:	4b1c      	ldr	r3, [pc, #112]	; (7090 <nrfx_usbd_init+0x74>)
    7020:	781c      	ldrb	r4, [r3, #0]
    7022:	bb94      	cbnz	r4, 708a <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    7024:	4a1b      	ldr	r2, [pc, #108]	; (7094 <nrfx_usbd_init+0x78>)
    7026:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7028:	2201      	movs	r2, #1
    702a:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    702c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7030:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7032:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7036:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    703a:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    703c:	bf14      	ite	ne
    703e:	4639      	movne	r1, r7
    7040:	2140      	moveq	r1, #64	; 0x40
    7042:	4628      	mov	r0, r5
    7044:	f003 f9ed 	bl	a422 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7048:	4628      	mov	r0, r5
    704a:	f7ff fd15 	bl	6a78 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    704e:	3401      	adds	r4, #1
    7050:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7052:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    7054:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    7056:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7058:	d1eb      	bne.n	7032 <nrfx_usbd_init+0x16>
    705a:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    705c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7060:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7062:	f014 0f08 	tst.w	r4, #8
    7066:	b2e6      	uxtb	r6, r4
    7068:	bf14      	ite	ne
    706a:	4639      	movne	r1, r7
    706c:	2140      	moveq	r1, #64	; 0x40
    706e:	4630      	mov	r0, r6
    7070:	f003 f9d7 	bl	a422 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7074:	4630      	mov	r0, r6
    7076:	f7ff fcff 	bl	6a78 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    707a:	3401      	adds	r4, #1
    707c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    707e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7080:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7082:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7084:	d1ed      	bne.n	7062 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    7086:	4804      	ldr	r0, [pc, #16]	; (7098 <nrfx_usbd_init+0x7c>)
}
    7088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    708a:	4804      	ldr	r0, [pc, #16]	; (709c <nrfx_usbd_init+0x80>)
    708c:	e7fc      	b.n	7088 <nrfx_usbd_init+0x6c>
    708e:	bf00      	nop
    7090:	20001d12 	.word	0x20001d12
    7094:	20001ad0 	.word	0x20001ad0
    7098:	0bad0000 	.word	0x0bad0000
    709c:	0bad0005 	.word	0x0bad0005

000070a0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    70a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    70a4:	4604      	mov	r4, r0
	__asm__ volatile(
    70a6:	f04f 0320 	mov.w	r3, #32
    70aa:	f3ef 8611 	mrs	r6, BASEPRI
    70ae:	f383 8812 	msr	BASEPRI_MAX, r3
    70b2:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    70b6:	f010 090f 	ands.w	r9, r0, #15
    70ba:	d103      	bne.n	70c4 <nrfx_usbd_ep_transfer+0x24>
    70bc:	4b27      	ldr	r3, [pc, #156]	; (715c <nrfx_usbd_ep_transfer+0xbc>)
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	4283      	cmp	r3, r0
    70c2:	d147      	bne.n	7154 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    70c4:	4b26      	ldr	r3, [pc, #152]	; (7160 <nrfx_usbd_ep_transfer+0xc0>)
    70c6:	4f27      	ldr	r7, [pc, #156]	; (7164 <nrfx_usbd_ep_transfer+0xc4>)
    70c8:	681a      	ldr	r2, [r3, #0]
    70ca:	683b      	ldr	r3, [r7, #0]
    70cc:	43d2      	mvns	r2, r2
    70ce:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    70d0:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    70d2:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    70d4:	f003 f96d 	bl	a3b2 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    70d8:	f04f 0801 	mov.w	r8, #1
    70dc:	fa08 f800 	lsl.w	r8, r8, r0
    70e0:	ea12 0f08 	tst.w	r2, r8
    70e4:	d138      	bne.n	7158 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    70e6:	4620      	mov	r0, r4
    70e8:	f7ff fcc6 	bl	6a78 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    70ec:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    70ee:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    70f0:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    70f2:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    70f6:	d529      	bpl.n	714c <nrfx_usbd_ep_transfer+0xac>
    70f8:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    70fa:	6888      	ldr	r0, [r1, #8]
    70fc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7100:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7104:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7108:	d11d      	bne.n	7146 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    710a:	4a17      	ldr	r2, [pc, #92]	; (7168 <nrfx_usbd_ep_transfer+0xc8>)
    710c:	4c17      	ldr	r4, [pc, #92]	; (716c <nrfx_usbd_ep_transfer+0xcc>)
    710e:	2800      	cmp	r0, #0
    7110:	bf08      	it	eq
    7112:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7114:	4816      	ldr	r0, [pc, #88]	; (7170 <nrfx_usbd_ep_transfer+0xd0>)
    7116:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    7118:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    711a:	c907      	ldmia	r1, {r0, r1, r2}
    711c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    7120:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    7122:	2300      	movs	r3, #0
    7124:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    7126:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7128:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    712a:	4812      	ldr	r0, [pc, #72]	; (7174 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    712c:	ea43 0308 	orr.w	r3, r3, r8
    7130:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7132:	4b11      	ldr	r3, [pc, #68]	; (7178 <nrfx_usbd_ep_transfer+0xd8>)
    7134:	2280      	movs	r2, #128	; 0x80
    7136:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    713a:	f386 8811 	msr	BASEPRI, r6
    713e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    7142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7146:	4a0d      	ldr	r2, [pc, #52]	; (717c <nrfx_usbd_ep_transfer+0xdc>)
    7148:	4c0d      	ldr	r4, [pc, #52]	; (7180 <nrfx_usbd_ep_transfer+0xe0>)
    714a:	e7e0      	b.n	710e <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    714c:	4a0d      	ldr	r2, [pc, #52]	; (7184 <nrfx_usbd_ep_transfer+0xe4>)
    714e:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7150:	4a0d      	ldr	r2, [pc, #52]	; (7188 <nrfx_usbd_ep_transfer+0xe8>)
    7152:	e7e1      	b.n	7118 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    7154:	480d      	ldr	r0, [pc, #52]	; (718c <nrfx_usbd_ep_transfer+0xec>)
    7156:	e7f0      	b.n	713a <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    7158:	480d      	ldr	r0, [pc, #52]	; (7190 <nrfx_usbd_ep_transfer+0xf0>)
    715a:	e7ee      	b.n	713a <nrfx_usbd_ep_transfer+0x9a>
    715c:	20001d10 	.word	0x20001d10
    7160:	20001acc 	.word	0x20001acc
    7164:	20001ac8 	.word	0x20001ac8
    7168:	0000a38b 	.word	0x0000a38b
    716c:	0000a369 	.word	0x0000a369
    7170:	2000193c 	.word	0x2000193c
    7174:	0bad0000 	.word	0x0bad0000
    7178:	e000e100 	.word	0xe000e100
    717c:	00006bed 	.word	0x00006bed
    7180:	00006bb5 	.word	0x00006bb5
    7184:	200018d0 	.word	0x200018d0
    7188:	0000a337 	.word	0x0000a337
    718c:	0bad000a 	.word	0x0bad000a
    7190:	0bad000b 	.word	0x0bad000b

00007194 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7194:	f010 0f08 	tst.w	r0, #8
    7198:	4b07      	ldr	r3, [pc, #28]	; (71b8 <nrfx_usbd_epout_size_get+0x24>)
    719a:	d006      	beq.n	71aa <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    719c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    71a0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    71a4:	bf18      	it	ne
    71a6:	2000      	movne	r0, #0
    71a8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    71aa:	f000 000f 	and.w	r0, r0, #15
    71ae:	f500 7094 	add.w	r0, r0, #296	; 0x128
    71b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    71b6:	4770      	bx	lr
    71b8:	40027000 	.word	0x40027000

000071bc <usbd_dmareq_process>:
{
    71bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    71c0:	4e59      	ldr	r6, [pc, #356]	; (7328 <usbd_dmareq_process+0x16c>)
    71c2:	7833      	ldrb	r3, [r6, #0]
{
    71c4:	b085      	sub	sp, #20
    if (!m_dma_pending)
    71c6:	2b00      	cmp	r3, #0
    71c8:	d173      	bne.n	72b2 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    71ca:	f8df 8160 	ldr.w	r8, [pc, #352]	; 732c <usbd_dmareq_process+0x170>
    71ce:	4d58      	ldr	r5, [pc, #352]	; (7330 <usbd_dmareq_process+0x174>)
    71d0:	f8d8 4000 	ldr.w	r4, [r8]
    71d4:	682b      	ldr	r3, [r5, #0]
    71d6:	401c      	ands	r4, r3
    71d8:	d06b      	beq.n	72b2 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    71da:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    71de:	bf14      	ite	ne
    71e0:	fa93 f4a3 	rbitne	r4, r3
    71e4:	fa94 f4a4 	rbiteq	r4, r4
    71e8:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    71ec:	f04f 0901 	mov.w	r9, #1
    71f0:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    71f4:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    71f6:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    71fa:	d95d      	bls.n	72b8 <usbd_dmareq_process+0xfc>
    71fc:	3c10      	subs	r4, #16
    71fe:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    7200:	4620      	mov	r0, r4
    7202:	f7ff fc39 	bl	6a78 <ep_state_access>
    7206:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7208:	4620      	mov	r0, r4
    720a:	f7ff ffc3 	bl	7194 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    720e:	f8da 7000 	ldr.w	r7, [sl]
    7212:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    7216:	f8da 1004 	ldr.w	r1, [sl, #4]
    721a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    721c:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    721e:	a802      	add	r0, sp, #8
    7220:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    7222:	9b02      	ldr	r3, [sp, #8]
    7224:	2b00      	cmp	r3, #0
    7226:	d153      	bne.n	72d0 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    7228:	b908      	cbnz	r0, 722e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    722a:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    722e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    7232:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    7234:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7238:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    723a:	bf02      	ittt	eq
    723c:	4b3d      	ldreq	r3, [pc, #244]	; (7334 <usbd_dmareq_process+0x178>)
    723e:	2282      	moveq	r2, #130	; 0x82
    7240:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    7244:	2301      	movs	r3, #1
    7246:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    7248:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    724a:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    724c:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    724e:	ea03 0309 	and.w	r3, r3, r9
    7252:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    7254:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    7258:	2900      	cmp	r1, #0
    725a:	4413      	add	r3, r2
    725c:	f8ca 3008 	str.w	r3, [sl, #8]
    7260:	f004 0508 	and.w	r5, r4, #8
    7264:	4b33      	ldr	r3, [pc, #204]	; (7334 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7266:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    726a:	da4e      	bge.n	730a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    726c:	2d00      	cmp	r5, #0
    726e:	d044      	beq.n	72fa <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    7270:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    7274:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    7278:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    727a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    727e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7282:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7286:	2201      	movs	r2, #1
    7288:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    728a:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    728c:	4a2a      	ldr	r2, [pc, #168]	; (7338 <usbd_dmareq_process+0x17c>)
    728e:	4b2b      	ldr	r3, [pc, #172]	; (733c <usbd_dmareq_process+0x180>)
    7290:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    7294:	bf38      	it	cc
    7296:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7298:	4926      	ldr	r1, [pc, #152]	; (7334 <usbd_dmareq_process+0x178>)
    729a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    729e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    72a2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    72a6:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    72a8:	b91a      	cbnz	r2, 72b2 <usbd_dmareq_process+0xf6>
    72aa:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    72ae:	2a00      	cmp	r2, #0
    72b0:	d0f9      	beq.n	72a6 <usbd_dmareq_process+0xea>
}
    72b2:	b005      	add	sp, #20
    72b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    72b8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    72bc:	4620      	mov	r0, r4
    72be:	f7ff fbdb 	bl	6a78 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    72c2:	6803      	ldr	r3, [r0, #0]
    72c4:	8982      	ldrh	r2, [r0, #12]
    72c6:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    72c8:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    72ca:	a802      	add	r0, sp, #8
    72cc:	4798      	blx	r3
    72ce:	e7ab      	b.n	7228 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    72d0:	9b03      	ldr	r3, [sp, #12]
    72d2:	459b      	cmp	fp, r3
    72d4:	d9a8      	bls.n	7228 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    72d6:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    72d8:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    72da:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    72de:	f7ff fcc5 	bl	6c6c <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    72e2:	2306      	movs	r3, #6
    72e4:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    72e8:	4b15      	ldr	r3, [pc, #84]	; (7340 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    72ea:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    72ee:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    72f0:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    72f4:	a801      	add	r0, sp, #4
    72f6:	4798      	blx	r3
                    continue;
    72f8:	e76a      	b.n	71d0 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    72fa:	2514      	movs	r5, #20
    72fc:	fb05 3304 	mla	r3, r5, r4, r3
    7300:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    7304:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    7308:	e7b6      	b.n	7278 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    730a:	b12d      	cbz	r5, 7318 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    730c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    7310:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    7314:	2328      	movs	r3, #40	; 0x28
    7316:	e7b0      	b.n	727a <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    7318:	2514      	movs	r5, #20
    731a:	fb05 3304 	mla	r3, r5, r4, r3
    731e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    7322:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    7326:	e7f5      	b.n	7314 <usbd_dmareq_process+0x158>
    7328:	20001d0f 	.word	0x20001d0f
    732c:	20001ac8 	.word	0x20001ac8
    7330:	20001acc 	.word	0x20001acc
    7334:	40027000 	.word	0x40027000
    7338:	0000b1dc 	.word	0x0000b1dc
    733c:	0000b1ee 	.word	0x0000b1ee
    7340:	20001ad0 	.word	0x20001ad0

00007344 <ev_epdata_handler>:
{
    7344:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    7346:	4b0f      	ldr	r3, [pc, #60]	; (7384 <ev_epdata_handler+0x40>)
    7348:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    734c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7350:	2501      	movs	r5, #1
    while (dataepstatus)
    7352:	b91c      	cbnz	r4, 735c <ev_epdata_handler+0x18>
}
    7354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7358:	f7ff bf30 	b.w	71bc <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    735c:	fa94 f3a4 	rbit	r3, r4
    7360:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7364:	2b0f      	cmp	r3, #15
    7366:	bfc8      	it	gt
    7368:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    736c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    736e:	bfd4      	ite	le
    7370:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    7374:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    7376:	fa05 f303 	lsl.w	r3, r5, r3
    737a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    737e:	f7ff fcad 	bl	6cdc <usbd_ep_data_handler>
    7382:	e7e6      	b.n	7352 <ev_epdata_handler+0xe>
    7384:	40027000 	.word	0x40027000

00007388 <nrf_usbd_epout_dma_handler>:
{
    7388:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    738a:	f7ff fc7f 	bl	6c8c <usbd_dma_pending_clear>
{
    738e:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7390:	f7ff fb72 	bl	6a78 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7394:	7b83      	ldrb	r3, [r0, #14]
    7396:	2b03      	cmp	r3, #3
    7398:	d10d      	bne.n	73b6 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    739a:	4620      	mov	r0, r4
    739c:	f003 f809 	bl	a3b2 <ep2bit>
    73a0:	2301      	movs	r3, #1
    73a2:	fa03 f000 	lsl.w	r0, r3, r0
    73a6:	43c0      	mvns	r0, r0
    73a8:	f7ff fc60 	bl	6c6c <atomic_and.constprop.0.isra.0>
}
    73ac:	b003      	add	sp, #12
    73ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    73b2:	f7ff bf03 	b.w	71bc <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    73b6:	6805      	ldr	r5, [r0, #0]
    73b8:	2d00      	cmp	r5, #0
    73ba:	d1f7      	bne.n	73ac <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    73bc:	4620      	mov	r0, r4
    73be:	f002 fff8 	bl	a3b2 <ep2bit>
    73c2:	2301      	movs	r3, #1
    73c4:	fa03 f000 	lsl.w	r0, r3, r0
    73c8:	43c0      	mvns	r0, r0
    73ca:	f7ff fc4f 	bl	6c6c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    73ce:	2306      	movs	r3, #6
    73d0:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    73d4:	4b04      	ldr	r3, [pc, #16]	; (73e8 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    73d6:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    73da:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    73dc:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    73e0:	a801      	add	r0, sp, #4
    73e2:	4798      	blx	r3
    73e4:	e7e2      	b.n	73ac <nrf_usbd_epout_dma_handler+0x24>
    73e6:	bf00      	nop
    73e8:	20001ad0 	.word	0x20001ad0

000073ec <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    73ec:	4b02      	ldr	r3, [pc, #8]	; (73f8 <nrfx_usbd_ep_stall+0xc>)
    73ee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    73f2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    73f6:	4770      	bx	lr
    73f8:	40027000 	.word	0x40027000

000073fc <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    73fc:	0702      	lsls	r2, r0, #28
    73fe:	d413      	bmi.n	7428 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    7400:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7404:	f010 0f80 	tst.w	r0, #128	; 0x80
    7408:	4a08      	ldr	r2, [pc, #32]	; (742c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    740a:	bf0b      	itete	eq
    740c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    7410:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    7414:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    7418:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    741c:	bf08      	it	eq
    741e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    7420:	1e43      	subs	r3, r0, #1
    7422:	4258      	negs	r0, r3
    7424:	4158      	adcs	r0, r3
    7426:	4770      	bx	lr
        return false;
    7428:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    742a:	4770      	bx	lr
    742c:	40027000 	.word	0x40027000

00007430 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    7430:	4b04      	ldr	r3, [pc, #16]	; (7444 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    7432:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    7436:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    743a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    743e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    7442:	4770      	bx	lr
    7444:	40027000 	.word	0x40027000

00007448 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    7448:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    744a:	2208      	movs	r2, #8
    744c:	2100      	movs	r1, #0
{
    744e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7450:	f002 fc62 	bl	9d18 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7454:	4b0e      	ldr	r3, [pc, #56]	; (7490 <nrfx_usbd_setup_get+0x48>)
    7456:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    745a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    745c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    7460:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    7462:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7466:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    746a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    746e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    7470:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    7474:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    747c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    747e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    7482:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7486:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    748a:	80e3      	strh	r3, [r4, #6]
}
    748c:	bd10      	pop	{r4, pc}
    748e:	bf00      	nop
    7490:	40027000 	.word	0x40027000

00007494 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7494:	4b02      	ldr	r3, [pc, #8]	; (74a0 <nrfx_usbd_setup_data_clear+0xc>)
    7496:	2201      	movs	r2, #1
    7498:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    749a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    749c:	4770      	bx	lr
    749e:	bf00      	nop
    74a0:	40027000 	.word	0x40027000

000074a4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    74a4:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    74a6:	f7ff fbf1 	bl	6c8c <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    74aa:	4b10      	ldr	r3, [pc, #64]	; (74ec <ev_dma_epout0_handler+0x48>)
    74ac:	7b9a      	ldrb	r2, [r3, #14]
    74ae:	2a03      	cmp	r2, #3
    74b0:	d106      	bne.n	74c0 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    74b2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    74b6:	b002      	add	sp, #8
    74b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    74bc:	f7ff bbd6 	b.w	6c6c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    74c0:	681c      	ldr	r4, [r3, #0]
    74c2:	b974      	cbnz	r4, 74e2 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    74c4:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    74c8:	f7ff fbd0 	bl	6c6c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    74cc:	2306      	movs	r3, #6
    74ce:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    74d2:	4b07      	ldr	r3, [pc, #28]	; (74f0 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    74d4:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    74d8:	681b      	ldr	r3, [r3, #0]
    74da:	a801      	add	r0, sp, #4
    74dc:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    74de:	b002      	add	sp, #8
    74e0:	bd10      	pop	{r4, pc}
    74e2:	b002      	add	sp, #8
    74e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    74e8:	f7ff bfd4 	b.w	7494 <nrfx_usbd_setup_data_clear>
    74ec:	200019a8 	.word	0x200019a8
    74f0:	20001ad0 	.word	0x20001ad0

000074f4 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    74f4:	4b02      	ldr	r3, [pc, #8]	; (7500 <nrfx_usbd_setup_clear+0xc>)
    74f6:	2201      	movs	r2, #1
    74f8:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    74fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    74fc:	4770      	bx	lr
    74fe:	bf00      	nop
    7500:	40027000 	.word	0x40027000

00007504 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7504:	4b02      	ldr	r3, [pc, #8]	; (7510 <nrfx_usbd_setup_stall+0xc>)
    7506:	2201      	movs	r2, #1
    7508:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    750a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    750c:	4770      	bx	lr
    750e:	bf00      	nop
    7510:	40027000 	.word	0x40027000

00007514 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    7514:	4b01      	ldr	r3, [pc, #4]	; (751c <nrfx_usbd_last_setup_dir_get+0x8>)
    7516:	7818      	ldrb	r0, [r3, #0]
    7518:	4770      	bx	lr
    751a:	bf00      	nop
    751c:	20001d10 	.word	0x20001d10

00007520 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    7520:	b510      	push	{r4, lr}
    7522:	4602      	mov	r2, r0
	__asm__ volatile(
    7524:	f04f 0320 	mov.w	r3, #32
    7528:	f3ef 8411 	mrs	r4, BASEPRI
    752c:	f383 8812 	msr	BASEPRI_MAX, r3
    7530:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7534:	f002 ff3d 	bl	a3b2 <ep2bit>
    7538:	490d      	ldr	r1, [pc, #52]	; (7570 <nrfx_usbd_transfer_out_drop+0x50>)
    753a:	2301      	movs	r3, #1
    753c:	fa03 f000 	lsl.w	r0, r3, r0
    7540:	680b      	ldr	r3, [r1, #0]
    7542:	ea23 0300 	bic.w	r3, r3, r0
    7546:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7548:	f012 0108 	ands.w	r1, r2, #8
    754c:	d10a      	bne.n	7564 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    754e:	f002 030f 	and.w	r3, r2, #15
    7552:	009b      	lsls	r3, r3, #2
    7554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7558:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    755c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7560:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    7564:	f384 8811 	msr	BASEPRI, r4
    7568:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    756c:	bd10      	pop	{r4, pc}
    756e:	bf00      	nop
    7570:	20001acc 	.word	0x20001acc

00007574 <usbd_ep_abort>:
{
    7574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7576:	4601      	mov	r1, r0
	__asm__ volatile(
    7578:	f04f 0320 	mov.w	r3, #32
    757c:	f3ef 8511 	mrs	r5, BASEPRI
    7580:	f383 8812 	msr	BASEPRI_MAX, r3
    7584:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7588:	f7ff fa76 	bl	6a78 <ep_state_access>
    758c:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    758e:	4608      	mov	r0, r1
    7590:	f002 ff0f 	bl	a3b2 <ep2bit>
    7594:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    7596:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    759a:	fa02 f200 	lsl.w	r2, r2, r0
    759e:	482e      	ldr	r0, [pc, #184]	; (7658 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    75a0:	d119      	bne.n	75d6 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    75a2:	6803      	ldr	r3, [r0, #0]
    75a4:	ea32 0303 	bics.w	r3, r2, r3
    75a8:	d00a      	beq.n	75c0 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    75aa:	4608      	mov	r0, r1
    75ac:	f7ff ffb8 	bl	7520 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    75b0:	2303      	movs	r3, #3
    75b2:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    75b4:	f385 8811 	msr	BASEPRI, r5
    75b8:	f3bf 8f6f 	isb	sy
}
    75bc:	b003      	add	sp, #12
    75be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    75c0:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    75c2:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    75c4:	4925      	ldr	r1, [pc, #148]	; (765c <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    75c6:	ea23 0302 	bic.w	r3, r3, r2
    75ca:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    75cc:	680b      	ldr	r3, [r1, #0]
    75ce:	ea23 0302 	bic.w	r3, r3, r2
    75d2:	600b      	str	r3, [r1, #0]
    75d4:	e7ec      	b.n	75b0 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    75d6:	070b      	lsls	r3, r1, #28
    75d8:	d415      	bmi.n	7606 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    75da:	2980      	cmp	r1, #128	; 0x80
    75dc:	4b20      	ldr	r3, [pc, #128]	; (7660 <usbd_ep_abort+0xec>)
    75de:	d02f      	beq.n	7640 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    75e0:	f001 040f 	and.w	r4, r1, #15
    75e4:	f204 34da 	addw	r4, r4, #986	; 0x3da
    75e8:	0064      	lsls	r4, r4, #1
    75ea:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    75ee:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    75f2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    75f6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    75f8:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    75fc:	433c      	orrs	r4, r7
    75fe:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7602:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7606:	4f15      	ldr	r7, [pc, #84]	; (765c <usbd_ep_abort+0xe8>)
    7608:	6804      	ldr	r4, [r0, #0]
    760a:	683b      	ldr	r3, [r7, #0]
    760c:	ea64 0c03 	orn	ip, r4, r3
    7610:	ea1c 0f02 	tst.w	ip, r2
    7614:	d0ce      	beq.n	75b4 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7616:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7618:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    761c:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    761e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7620:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    7622:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7624:	2303      	movs	r3, #3
    7626:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7628:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    762c:	4b0d      	ldr	r3, [pc, #52]	; (7664 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    762e:	f88d 1006 	strb.w	r1, [sp, #6]
    7632:	2206      	movs	r2, #6
            m_event_handler(&evt);
    7634:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7636:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    763a:	a801      	add	r0, sp, #4
    763c:	4798      	blx	r3
    763e:	e7b9      	b.n	75b4 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7640:	f240 74b4 	movw	r4, #1972	; 0x7b4
    7644:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7648:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    764c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7650:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7652:	f044 0404 	orr.w	r4, r4, #4
    7656:	e7d1      	b.n	75fc <usbd_ep_abort+0x88>
    7658:	20001ac8 	.word	0x20001ac8
    765c:	20001acc 	.word	0x20001acc
    7660:	40027000 	.word	0x40027000
    7664:	20001ad0 	.word	0x20001ad0

00007668 <ev_setup_handler>:
{
    7668:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    766a:	4b14      	ldr	r3, [pc, #80]	; (76bc <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    766c:	4c14      	ldr	r4, [pc, #80]	; (76c0 <ev_setup_handler+0x58>)
    766e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    7672:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    7674:	4e13      	ldr	r6, [pc, #76]	; (76c4 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7676:	43da      	mvns	r2, r3
    7678:	4b13      	ldr	r3, [pc, #76]	; (76c8 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    767a:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    767c:	681b      	ldr	r3, [r3, #0]
    767e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    7680:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7682:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    7684:	f002 fe95 	bl	a3b2 <ep2bit>
    7688:	2301      	movs	r3, #1
    768a:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    768c:	4213      	tst	r3, r2
    768e:	d002      	beq.n	7696 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    7690:	4608      	mov	r0, r1
    7692:	f7ff ff6f 	bl	7574 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    7696:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    769a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    769e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    76a0:	f7ff fae4 	bl	6c6c <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    76a4:	6823      	ldr	r3, [r4, #0]
    76a6:	f043 0301 	orr.w	r3, r3, #1
    76aa:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    76ac:	2305      	movs	r3, #5
    76ae:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    76b0:	4b06      	ldr	r3, [pc, #24]	; (76cc <ev_setup_handler+0x64>)
    76b2:	a801      	add	r0, sp, #4
    76b4:	681b      	ldr	r3, [r3, #0]
    76b6:	4798      	blx	r3
}
    76b8:	b002      	add	sp, #8
    76ba:	bd70      	pop	{r4, r5, r6, pc}
    76bc:	40027000 	.word	0x40027000
    76c0:	20001acc 	.word	0x20001acc
    76c4:	20001d10 	.word	0x20001d10
    76c8:	20001ac8 	.word	0x20001ac8
    76cc:	20001ad0 	.word	0x20001ad0

000076d0 <nrfx_usbd_irq_handler>:
{
    76d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    76d4:	4b1a      	ldr	r3, [pc, #104]	; (7740 <nrfx_usbd_irq_handler+0x70>)
    76d6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    76da:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    76dc:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    76de:	461d      	mov	r5, r3
    while (to_process)
    76e0:	b970      	cbnz	r0, 7700 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    76e2:	4f18      	ldr	r7, [pc, #96]	; (7744 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    76e4:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    76e8:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    76ec:	f04f 0801 	mov.w	r8, #1
    while (active)
    76f0:	b9bc      	cbnz	r4, 7722 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    76f2:	f7ff fd63 	bl	71bc <usbd_dmareq_process>
    if (setup_active)
    76f6:	b306      	cbz	r6, 773a <nrfx_usbd_irq_handler+0x6a>
}
    76f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    76fc:	f7ff bfb4 	b.w	7668 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    7700:	fa90 f2a0 	rbit	r2, r0
    7704:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7708:	490f      	ldr	r1, [pc, #60]	; (7748 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    770a:	0096      	lsls	r6, r2, #2
    770c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    770e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7712:	680e      	ldr	r6, [r1, #0]
    if (ret)
    7714:	b116      	cbz	r6, 771c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7716:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7718:	6809      	ldr	r1, [r1, #0]
    771a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    771c:	ea20 0002 	bic.w	r0, r0, r2
    7720:	e7de      	b.n	76e0 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    7722:	fa94 f5a4 	rbit	r5, r4
    7726:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    772a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    772e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    7732:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    7734:	ea24 0405 	bic.w	r4, r4, r5
    7738:	e7da      	b.n	76f0 <nrfx_usbd_irq_handler+0x20>
}
    773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    773e:	bf00      	nop
    7740:	40027000 	.word	0x40027000
    7744:	0000b0d4 	.word	0x0000b0d4
    7748:	40027100 	.word	0x40027100

0000774c <nrfx_usbd_stop>:
{
    774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    774e:	4b1b      	ldr	r3, [pc, #108]	; (77bc <nrfx_usbd_stop+0x70>)
    7750:	2280      	movs	r2, #128	; 0x80
    7752:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    7756:	2027      	movs	r0, #39	; 0x27
    7758:	f7fb ff72 	bl	3640 <arch_irq_is_enabled>
    775c:	b1b8      	cbz	r0, 778e <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    775e:	4e18      	ldr	r6, [pc, #96]	; (77c0 <nrfx_usbd_stop+0x74>)
    7760:	4b18      	ldr	r3, [pc, #96]	; (77c4 <nrfx_usbd_stop+0x78>)
    7762:	6834      	ldr	r4, [r6, #0]
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	0c24      	lsrs	r4, r4, #16
    7768:	0424      	lsls	r4, r4, #16
    776a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    776c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    776e:	b97c      	cbnz	r4, 7790 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    7770:	4d15      	ldr	r5, [pc, #84]	; (77c8 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7772:	f240 13ff 	movw	r3, #511	; 0x1ff
    7776:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    7778:	2027      	movs	r0, #39	; 0x27
    777a:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    777e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    7782:	f7fb ff49 	bl	3618 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    778a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    778e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7790:	fa94 f5a4 	rbit	r5, r4
    7794:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7798:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    779a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    779c:	bfc6      	itte	gt
    779e:	f1a5 0010 	subgt.w	r0, r5, #16
    77a2:	b2c0      	uxtbgt	r0, r0
    77a4:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    77a8:	0703      	lsls	r3, r0, #28
    77aa:	d401      	bmi.n	77b0 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    77ac:	f7ff fee2 	bl	7574 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    77b0:	fa07 f505 	lsl.w	r5, r7, r5
    77b4:	ea24 0405 	bic.w	r4, r4, r5
    77b8:	e7d9      	b.n	776e <nrfx_usbd_stop+0x22>
    77ba:	bf00      	nop
    77bc:	e000e100 	.word	0xe000e100
    77c0:	20001acc 	.word	0x20001acc
    77c4:	20001ac8 	.word	0x20001ac8
    77c8:	40027000 	.word	0x40027000

000077cc <nrfx_usbd_disable>:
{
    77cc:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    77ce:	f7ff ffbd 	bl	774c <nrfx_usbd_stop>
    return p_reg->INTENSET;
    77d2:	4b08      	ldr	r3, [pc, #32]	; (77f4 <nrfx_usbd_disable+0x28>)
    77d4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    77d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    77dc:	2200      	movs	r2, #0
    77de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    77e2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    77e6:	f7ff fa51 	bl	6c8c <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    77ea:	4b03      	ldr	r3, [pc, #12]	; (77f8 <nrfx_usbd_disable+0x2c>)
    77ec:	2201      	movs	r2, #1
    77ee:	701a      	strb	r2, [r3, #0]
}
    77f0:	bd08      	pop	{r3, pc}
    77f2:	bf00      	nop
    77f4:	40027000 	.word	0x40027000
    77f8:	20001d12 	.word	0x20001d12

000077fc <nrfx_usbd_ep_disable>:
{
    77fc:	b510      	push	{r4, lr}
    77fe:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    7800:	f7ff feb8 	bl	7574 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7804:	4a10      	ldr	r2, [pc, #64]	; (7848 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    7806:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    780a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    780e:	f04f 0301 	mov.w	r3, #1
    7812:	bf14      	ite	ne
    7814:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7818:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    781c:	fa03 f300 	lsl.w	r3, r3, r0
    7820:	ea6f 0303 	mvn.w	r3, r3
    7824:	bf15      	itete	ne
    7826:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7828:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    782a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    782e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7832:	bf14      	ite	ne
    7834:	4b05      	ldrne	r3, [pc, #20]	; (784c <nrfx_usbd_ep_disable+0x50>)
    7836:	4b06      	ldreq	r3, [pc, #24]	; (7850 <nrfx_usbd_ep_disable+0x54>)
    7838:	5c1a      	ldrb	r2, [r3, r0]
    783a:	2301      	movs	r3, #1
    783c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    783e:	4a02      	ldr	r2, [pc, #8]	; (7848 <nrfx_usbd_ep_disable+0x4c>)
    7840:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    7844:	bd10      	pop	{r4, pc}
    7846:	bf00      	nop
    7848:	40027000 	.word	0x40027000
    784c:	0000b49e 	.word	0x0000b49e
    7850:	0000b495 	.word	0x0000b495

00007854 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7854:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    7858:	b570      	push	{r4, r5, r6, lr}
    785a:	4924      	ldr	r1, [pc, #144]	; (78ec <nrfx_usbd_ep_enable+0x98>)
    785c:	4604      	mov	r4, r0
    785e:	f000 030f 	and.w	r3, r0, #15
    7862:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7866:	d012      	beq.n	788e <nrfx_usbd_ep_enable+0x3a>
    7868:	4a21      	ldr	r2, [pc, #132]	; (78f0 <nrfx_usbd_ep_enable+0x9c>)
    786a:	5cd2      	ldrb	r2, [r2, r3]
    786c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7870:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    7874:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7878:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    787a:	07d0      	lsls	r0, r2, #31
    787c:	d406      	bmi.n	788c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    787e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7882:	fa05 f303 	lsl.w	r3, r5, r3
    7886:	4313      	orrs	r3, r2
    7888:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    788c:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    788e:	4a19      	ldr	r2, [pc, #100]	; (78f4 <nrfx_usbd_ep_enable+0xa0>)
    7890:	5cd2      	ldrb	r2, [r2, r3]
    7892:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7896:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    789a:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    789e:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    78a0:	07d2      	lsls	r2, r2, #31
    78a2:	d4f3      	bmi.n	788c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    78a4:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    78a8:	fa05 f203 	lsl.w	r2, r5, r3
    78ac:	4332      	orrs	r2, r6
    78ae:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    78b2:	2b00      	cmp	r3, #0
    78b4:	d0ea      	beq.n	788c <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    78b6:	0703      	lsls	r3, r0, #28
    78b8:	d4e8      	bmi.n	788c <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    78ba:	f04f 0320 	mov.w	r3, #32
    78be:	f3ef 8611 	mrs	r6, BASEPRI
    78c2:	f383 8812 	msr	BASEPRI_MAX, r3
    78c6:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    78ca:	f7ff fe29 	bl	7520 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    78ce:	4620      	mov	r0, r4
    78d0:	f002 fd6f 	bl	a3b2 <ep2bit>
    78d4:	4a08      	ldr	r2, [pc, #32]	; (78f8 <nrfx_usbd_ep_enable+0xa4>)
    78d6:	6813      	ldr	r3, [r2, #0]
    78d8:	fa05 f000 	lsl.w	r0, r5, r0
    78dc:	ea23 0300 	bic.w	r3, r3, r0
    78e0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    78e2:	f386 8811 	msr	BASEPRI, r6
    78e6:	f3bf 8f6f 	isb	sy
}
    78ea:	e7cf      	b.n	788c <nrfx_usbd_ep_enable+0x38>
    78ec:	40027000 	.word	0x40027000
    78f0:	0000b49e 	.word	0x0000b49e
    78f4:	0000b495 	.word	0x0000b495
    78f8:	20001ac8 	.word	0x20001ac8

000078fc <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    78fc:	0603      	lsls	r3, r0, #24
{
    78fe:	b510      	push	{r4, lr}
    7900:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    7902:	d405      	bmi.n	7910 <nrfx_usbd_ep_stall_clear+0x14>
    7904:	f7ff fd7a 	bl	73fc <nrfx_usbd_ep_stall_check>
    7908:	b110      	cbz	r0, 7910 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    790a:	4620      	mov	r0, r4
    790c:	f7ff fe08 	bl	7520 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    7910:	4b01      	ldr	r3, [pc, #4]	; (7918 <nrfx_usbd_ep_stall_clear+0x1c>)
    7912:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    7916:	bd10      	pop	{r4, pc}
    7918:	40027000 	.word	0x40027000

0000791c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    791c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    791e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7922:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    7924:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7926:	6002      	str	r2, [r0, #0]
}
    7928:	4802      	ldr	r0, [pc, #8]	; (7934 <nrf_gpio_pin_port_decode+0x18>)
    792a:	bf18      	it	ne
    792c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7930:	4770      	bx	lr
    7932:	bf00      	nop
    7934:	50000300 	.word	0x50000300

00007938 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    7938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    793a:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    793c:	f002 fda4 	bl	a488 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    7940:	4608      	mov	r0, r1
    7942:	f002 fda1 	bl	a488 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7946:	a801      	add	r0, sp, #4
    7948:	9601      	str	r6, [sp, #4]
    794a:	f7ff ffe7 	bl	791c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    794e:	9b01      	ldr	r3, [sp, #4]
    7950:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    7954:	460c      	mov	r4, r1
    7956:	f240 610d 	movw	r1, #1549	; 0x60d
    795a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    795e:	a801      	add	r0, sp, #4
    7960:	9401      	str	r4, [sp, #4]
    7962:	f7ff ffdb 	bl	791c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7966:	9b01      	ldr	r3, [sp, #4]
    7968:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    796c:	2509      	movs	r5, #9
    796e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    7972:	2004      	movs	r0, #4
    7974:	f002 fbf6 	bl	a164 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7978:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    797a:	a801      	add	r0, sp, #4
    797c:	9401      	str	r4, [sp, #4]
    797e:	f7ff ffcd 	bl	791c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7982:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7984:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7988:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    798a:	07db      	lsls	r3, r3, #31
    798c:	d415      	bmi.n	79ba <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    798e:	a801      	add	r0, sp, #4
    7990:	9601      	str	r6, [sp, #4]
    7992:	f7ff ffc3 	bl	791c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7996:	9b01      	ldr	r3, [sp, #4]
    7998:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    799c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    79a0:	2004      	movs	r0, #4
    79a2:	f002 fbdf 	bl	a164 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    79a6:	4630      	mov	r0, r6
    79a8:	f002 fd6e 	bl	a488 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    79ac:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    79ae:	2004      	movs	r0, #4
    79b0:	f002 fbd8 	bl	a164 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    79b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    79b8:	d1df      	bne.n	797a <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    79ba:	a801      	add	r0, sp, #4
    79bc:	9401      	str	r4, [sp, #4]
    79be:	f7ff ffad 	bl	791c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    79c2:	9a01      	ldr	r2, [sp, #4]
    79c4:	2301      	movs	r3, #1
    79c6:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    79c8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    79cc:	2004      	movs	r0, #4
    79ce:	f002 fbc9 	bl	a164 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    79d2:	4620      	mov	r0, r4
    79d4:	f002 fd58 	bl	a488 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    79d8:	2004      	movs	r0, #4
    79da:	f002 fbc3 	bl	a164 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    79de:	a801      	add	r0, sp, #4
    79e0:	9401      	str	r4, [sp, #4]
    79e2:	f7ff ff9b 	bl	791c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    79e6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    79e8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    79ec:	4803      	ldr	r0, [pc, #12]	; (79fc <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    79ee:	40d3      	lsrs	r3, r2
    79f0:	f003 0301 	and.w	r3, r3, #1
    79f4:	1ac0      	subs	r0, r0, r3
    79f6:	b003      	add	sp, #12
    79f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79fa:	bf00      	nop
    79fc:	0bad0001 	.word	0x0bad0001

00007a00 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    7a00:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7a02:	4605      	mov	r5, r0
    7a04:	b910      	cbnz	r0, 7a0c <z_impl_device_get_binding+0xc>
		return NULL;
    7a06:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    7a08:	4620      	mov	r0, r4
    7a0a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7a0c:	7803      	ldrb	r3, [r0, #0]
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d0f9      	beq.n	7a06 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7a12:	4c0e      	ldr	r4, [pc, #56]	; (7a4c <z_impl_device_get_binding+0x4c>)
    7a14:	4e0e      	ldr	r6, [pc, #56]	; (7a50 <z_impl_device_get_binding+0x50>)
    7a16:	42b4      	cmp	r4, r6
    7a18:	d108      	bne.n	7a2c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    7a1a:	4c0c      	ldr	r4, [pc, #48]	; (7a4c <z_impl_device_get_binding+0x4c>)
    7a1c:	42b4      	cmp	r4, r6
    7a1e:	d0f2      	beq.n	7a06 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7a20:	4620      	mov	r0, r4
    7a22:	f002 fd3f 	bl	a4a4 <z_device_is_ready>
    7a26:	b950      	cbnz	r0, 7a3e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    7a28:	3418      	adds	r4, #24
    7a2a:	e7f7      	b.n	7a1c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    7a2c:	4620      	mov	r0, r4
    7a2e:	f002 fd39 	bl	a4a4 <z_device_is_ready>
    7a32:	b110      	cbz	r0, 7a3a <z_impl_device_get_binding+0x3a>
    7a34:	6823      	ldr	r3, [r4, #0]
    7a36:	42ab      	cmp	r3, r5
    7a38:	d0e6      	beq.n	7a08 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7a3a:	3418      	adds	r4, #24
    7a3c:	e7eb      	b.n	7a16 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7a3e:	6821      	ldr	r1, [r4, #0]
    7a40:	4628      	mov	r0, r5
    7a42:	f002 f952 	bl	9cea <strcmp>
    7a46:	2800      	cmp	r0, #0
    7a48:	d1ee      	bne.n	7a28 <z_impl_device_get_binding+0x28>
    7a4a:	e7dd      	b.n	7a08 <z_impl_device_get_binding+0x8>
    7a4c:	0000abcc 	.word	0x0000abcc
    7a50:	0000ac8c 	.word	0x0000ac8c

00007a54 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a54:	4b10      	ldr	r3, [pc, #64]	; (7a98 <z_sys_init_run_level+0x44>)
{
    7a56:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7a5c:	3001      	adds	r0, #1
    7a5e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    7a62:	42a6      	cmp	r6, r4
    7a64:	d800      	bhi.n	7a68 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    7a66:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    7a68:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    7a6c:	b18d      	cbz	r5, 7a92 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    7a6e:	4628      	mov	r0, r5
    7a70:	4798      	blx	r3
			if (rc != 0) {
    7a72:	b138      	cbz	r0, 7a84 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7a74:	2800      	cmp	r0, #0
    7a76:	bfb8      	it	lt
    7a78:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7a7a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    7a7c:	28ff      	cmp	r0, #255	; 0xff
    7a7e:	bfa8      	it	ge
    7a80:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    7a82:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7a84:	68ea      	ldr	r2, [r5, #12]
    7a86:	7853      	ldrb	r3, [r2, #1]
    7a88:	f043 0301 	orr.w	r3, r3, #1
    7a8c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a8e:	3408      	adds	r4, #8
    7a90:	e7e7      	b.n	7a62 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    7a92:	4798      	blx	r3
    7a94:	e7fb      	b.n	7a8e <z_sys_init_run_level+0x3a>
    7a96:	bf00      	nop
    7a98:	0000b13c 	.word	0x0000b13c

00007a9c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7a9c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7a9e:	4b0a      	ldr	r3, [pc, #40]	; (7ac8 <bg_thread_main+0x2c>)
    7aa0:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7aa2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    7aa4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7aa6:	f7ff ffd5 	bl	7a54 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7aaa:	f001 f94b 	bl	8d44 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    7aae:	2004      	movs	r0, #4
    7ab0:	f7ff ffd0 	bl	7a54 <z_sys_init_run_level>

	z_init_static_threads();
    7ab4:	f000 f95c 	bl	7d70 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    7ab8:	f7f9 fd3a 	bl	1530 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7abc:	4a03      	ldr	r2, [pc, #12]	; (7acc <bg_thread_main+0x30>)
    7abe:	7b13      	ldrb	r3, [r2, #12]
    7ac0:	f023 0301 	bic.w	r3, r3, #1
    7ac4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7ac6:	bd08      	pop	{r3, pc}
    7ac8:	20001d13 	.word	0x20001d13
    7acc:	20000680 	.word	0x20000680

00007ad0 <z_bss_zero>:
{
    7ad0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7ad2:	4803      	ldr	r0, [pc, #12]	; (7ae0 <z_bss_zero+0x10>)
    7ad4:	4a03      	ldr	r2, [pc, #12]	; (7ae4 <z_bss_zero+0x14>)
    7ad6:	2100      	movs	r1, #0
    7ad8:	1a12      	subs	r2, r2, r0
    7ada:	f002 fd09 	bl	a4f0 <z_early_memset>
}
    7ade:	bd08      	pop	{r3, pc}
    7ae0:	20000420 	.word	0x20000420
    7ae4:	20001d18 	.word	0x20001d18

00007ae8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7ae8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    7aea:	2300      	movs	r3, #0
{
    7aec:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    7aee:	2201      	movs	r2, #1
    7af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    7af4:	4e13      	ldr	r6, [pc, #76]	; (7b44 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7af6:	4d14      	ldr	r5, [pc, #80]	; (7b48 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7af8:	9301      	str	r3, [sp, #4]
    7afa:	220f      	movs	r2, #15
    7afc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7b00:	4912      	ldr	r1, [pc, #72]	; (7b4c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7b02:	2314      	movs	r3, #20
    7b04:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    7b08:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    7b0c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    7b0e:	f44f 70c0 	mov.w	r0, #384	; 0x180
    7b12:	fb00 1104 	mla	r1, r0, r4, r1
    7b16:	4b0e      	ldr	r3, [pc, #56]	; (7b50 <z_init_cpu+0x68>)
    7b18:	9500      	str	r5, [sp, #0]
    7b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7b1e:	4630      	mov	r0, r6
    7b20:	f000 f8c8 	bl	7cb4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7b24:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7b26:	4a0b      	ldr	r2, [pc, #44]	; (7b54 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7b28:	60ee      	str	r6, [r5, #12]
    7b2a:	f023 0304 	bic.w	r3, r3, #4
    7b2e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7b30:	f44f 6304 	mov.w	r3, #2112	; 0x840
    7b34:	fb04 3303 	mla	r3, r4, r3, r3
    7b38:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    7b3a:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    7b3c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    7b3e:	b006      	add	sp, #24
    7b40:	bd70      	pop	{r4, r5, r6, pc}
    7b42:	bf00      	nop
    7b44:	20000600 	.word	0x20000600
    7b48:	20001ad4 	.word	0x20001ad4
    7b4c:	20003240 	.word	0x20003240
    7b50:	00007e29 	.word	0x00007e29
    7b54:	20002a00 	.word	0x20002a00

00007b58 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    7b58:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7b5a:	2000      	movs	r0, #0
{
    7b5c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7b5e:	f7ff ff79 	bl	7a54 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7b62:	4b2d      	ldr	r3, [pc, #180]	; (7c18 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7b64:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7b68:	4d2c      	ldr	r5, [pc, #176]	; (7c1c <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    7b6a:	4e2d      	ldr	r6, [pc, #180]	; (7c20 <z_cstart+0xc8>)
    7b6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b6e:	4f2d      	ldr	r7, [pc, #180]	; (7c24 <z_cstart+0xcc>)
    7b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7b74:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b76:	2400      	movs	r4, #0
    7b78:	23e0      	movs	r3, #224	; 0xe0
    7b7a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7b7e:	77ec      	strb	r4, [r5, #31]
    7b80:	762c      	strb	r4, [r5, #24]
    7b82:	766c      	strb	r4, [r5, #25]
    7b84:	76ac      	strb	r4, [r5, #26]
    7b86:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7b8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7b8c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7b90:	626b      	str	r3, [r5, #36]	; 0x24
    7b92:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7b96:	f7fb ffa1 	bl	3adc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7b9a:	f7fb fd0f 	bl	35bc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ba2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7ba4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7ba6:	f7fc f8d3 	bl	3d50 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7baa:	f7fc f839 	bl	3c20 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7bae:	f240 1301 	movw	r3, #257	; 0x101
    7bb2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7bb6:	ab06      	add	r3, sp, #24
    7bb8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7bba:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    7bbe:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7bc0:	f002 fc6f 	bl	a4a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    7bc4:	2001      	movs	r0, #1
    7bc6:	f7ff ff45 	bl	7a54 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7bca:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    7bcc:	4d16      	ldr	r5, [pc, #88]	; (7c28 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7bce:	f7ff ff41 	bl	7a54 <z_sys_init_run_level>
	z_sched_init();
    7bd2:	f000 fe07 	bl	87e4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7bd6:	4b15      	ldr	r3, [pc, #84]	; (7c2c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    7bd8:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7bda:	9305      	str	r3, [sp, #20]
    7bdc:	2301      	movs	r3, #1
    7bde:	4914      	ldr	r1, [pc, #80]	; (7c30 <z_cstart+0xd8>)
    7be0:	9400      	str	r4, [sp, #0]
    7be2:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7bea:	463b      	mov	r3, r7
    7bec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7bf0:	4628      	mov	r0, r5
    7bf2:	f000 f85f 	bl	7cb4 <z_setup_new_thread>
    7bf6:	7b6a      	ldrb	r2, [r5, #13]
    7bf8:	4606      	mov	r6, r0
    7bfa:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7bfe:	4628      	mov	r0, r5
    7c00:	736a      	strb	r2, [r5, #13]
    7c02:	f002 fe11 	bl	a828 <z_ready_thread>
	z_init_cpu(0);
    7c06:	4620      	mov	r0, r4
    7c08:	f7ff ff6e 	bl	7ae8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7c0c:	463a      	mov	r2, r7
    7c0e:	4631      	mov	r1, r6
    7c10:	4628      	mov	r0, r5
    7c12:	f7fb fde1 	bl	37d8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7c16:	bf00      	nop
    7c18:	20003240 	.word	0x20003240
    7c1c:	e000ed00 	.word	0xe000ed00
    7c20:	20001ad4 	.word	0x20001ad4
    7c24:	00007a9d 	.word	0x00007a9d
    7c28:	20000680 	.word	0x20000680
    7c2c:	0000b4b1 	.word	0x0000b4b1
    7c30:	200033c0 	.word	0x200033c0

00007c34 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    7c34:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7c36:	4c06      	ldr	r4, [pc, #24]	; (7c50 <init_mem_slab_module+0x1c>)
    7c38:	4d06      	ldr	r5, [pc, #24]	; (7c54 <init_mem_slab_module+0x20>)
	int rc = 0;
    7c3a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7c3c:	42ac      	cmp	r4, r5
    7c3e:	d300      	bcc.n	7c42 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    7c40:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    7c42:	4620      	mov	r0, r4
    7c44:	f002 fc58 	bl	a4f8 <create_free_list>
		if (rc < 0) {
    7c48:	2800      	cmp	r0, #0
    7c4a:	dbf9      	blt.n	7c40 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7c4c:	341c      	adds	r4, #28
    7c4e:	e7f5      	b.n	7c3c <init_mem_slab_module+0x8>
    7c50:	20000258 	.word	0x20000258
    7c54:	20000274 	.word	0x20000274

00007c58 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7c58:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7c5a:	460c      	mov	r4, r1
	__asm__ volatile(
    7c5c:	f04f 0520 	mov.w	r5, #32
    7c60:	f3ef 8111 	mrs	r1, BASEPRI
    7c64:	f385 8812 	msr	BASEPRI_MAX, r5
    7c68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7c6c:	6945      	ldr	r5, [r0, #20]
    7c6e:	b15d      	cbz	r5, 7c88 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    7c70:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    7c72:	682b      	ldr	r3, [r5, #0]
    7c74:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    7c76:	6983      	ldr	r3, [r0, #24]
    7c78:	3301      	adds	r3, #1
    7c7a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7c7c:	2000      	movs	r0, #0
	__asm__ volatile(
    7c7e:	f381 8811 	msr	BASEPRI, r1
    7c82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    7c86:	e011      	b.n	7cac <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7c88:	ea52 0603 	orrs.w	r6, r2, r3
    7c8c:	d103      	bne.n	7c96 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7c8e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7c90:	f06f 000b 	mvn.w	r0, #11
    7c94:	e7f3      	b.n	7c7e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7c96:	e9cd 2300 	strd	r2, r3, [sp]
    7c9a:	4602      	mov	r2, r0
    7c9c:	3008      	adds	r0, #8
    7c9e:	f000 fcab 	bl	85f8 <z_pend_curr>
		if (result == 0) {
    7ca2:	b918      	cbnz	r0, 7cac <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7ca4:	4b02      	ldr	r3, [pc, #8]	; (7cb0 <k_mem_slab_alloc+0x58>)
    7ca6:	689b      	ldr	r3, [r3, #8]
    7ca8:	695b      	ldr	r3, [r3, #20]
    7caa:	6023      	str	r3, [r4, #0]
}
    7cac:	b002      	add	sp, #8
    7cae:	bd70      	pop	{r4, r5, r6, pc}
    7cb0:	20001ad4 	.word	0x20001ad4

00007cb4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7cb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7cb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7cba:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7cbc:	2604      	movs	r6, #4
    7cbe:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7cc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7cc2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7cc4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7cc8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7cca:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7ccc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    7cd2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7cd4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7cd8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7cda:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7cde:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    7ce2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7ce4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    7ce6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7ce8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7cec:	9202      	str	r2, [sp, #8]
    7cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7cf0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7cf2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7cf6:	9200      	str	r2, [sp, #0]
    7cf8:	4642      	mov	r2, r8
{
    7cfa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7cfc:	f7fb fd3a 	bl	3774 <arch_new_thread>
	if (!_current) {
    7d00:	4b04      	ldr	r3, [pc, #16]	; (7d14 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    7d02:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    7d04:	689b      	ldr	r3, [r3, #8]
    7d06:	b103      	cbz	r3, 7d0a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    7d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7d0a:	6723      	str	r3, [r4, #112]	; 0x70
}
    7d0c:	4640      	mov	r0, r8
    7d0e:	b004      	add	sp, #16
    7d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d14:	20001ad4 	.word	0x20001ad4

00007d18 <z_impl_k_thread_create>:
{
    7d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d1a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7d1c:	2500      	movs	r5, #0
    7d1e:	9505      	str	r5, [sp, #20]
    7d20:	9d10      	ldr	r5, [sp, #64]	; 0x40
    7d22:	9504      	str	r5, [sp, #16]
    7d24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7d26:	9503      	str	r5, [sp, #12]
    7d28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7d2a:	9502      	str	r5, [sp, #8]
{
    7d2c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7d30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    7d32:	9501      	str	r5, [sp, #4]
    7d34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7d36:	9500      	str	r5, [sp, #0]
{
    7d38:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7d3a:	f7ff ffbb 	bl	7cb4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7d3e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    7d42:	bf08      	it	eq
    7d44:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    7d48:	d005      	beq.n	7d56 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7d4a:	ea56 0307 	orrs.w	r3, r6, r7
    7d4e:	d105      	bne.n	7d5c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    7d50:	4620      	mov	r0, r4
    7d52:	f000 fcc7 	bl	86e4 <z_sched_start>
}
    7d56:	4620      	mov	r0, r4
    7d58:	b007      	add	sp, #28
    7d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7d5c:	4903      	ldr	r1, [pc, #12]	; (7d6c <z_impl_k_thread_create+0x54>)
    7d5e:	463a      	mov	r2, r7
    7d60:	4633      	mov	r3, r6
    7d62:	f104 0018 	add.w	r0, r4, #24
    7d66:	f000 fed3 	bl	8b10 <z_add_timeout>
    7d6a:	e7f4      	b.n	7d56 <z_impl_k_thread_create+0x3e>
    7d6c:	0000a88d 	.word	0x0000a88d

00007d70 <z_init_static_threads>:
{
    7d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7d74:	4c29      	ldr	r4, [pc, #164]	; (7e1c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7d76:	4d2a      	ldr	r5, [pc, #168]	; (7e20 <z_init_static_threads+0xb0>)
{
    7d78:	b087      	sub	sp, #28
    7d7a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7d7c:	42ae      	cmp	r6, r5
    7d7e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    7d82:	d30f      	bcc.n	7da4 <z_init_static_threads+0x34>
	k_sched_lock();
    7d84:	f000 fcfe 	bl	8784 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7d88:	4c24      	ldr	r4, [pc, #144]	; (7e1c <z_init_static_threads+0xac>)
    7d8a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7e24 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7d8e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7d92:	f240 37e7 	movw	r7, #999	; 0x3e7
    7d96:	42ac      	cmp	r4, r5
    7d98:	d320      	bcc.n	7ddc <z_init_static_threads+0x6c>
}
    7d9a:	b007      	add	sp, #28
    7d9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7da0:	f000 bd04 	b.w	87ac <k_sched_unlock>
		z_setup_new_thread(
    7da4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7da8:	9305      	str	r3, [sp, #20]
    7daa:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    7dae:	9304      	str	r3, [sp, #16]
    7db0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7db4:	9303      	str	r3, [sp, #12]
    7db6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7dba:	9302      	str	r3, [sp, #8]
    7dbc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7dc0:	9301      	str	r3, [sp, #4]
    7dc2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7dc6:	9300      	str	r3, [sp, #0]
    7dc8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    7dcc:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    7dd0:	f7ff ff70 	bl	7cb4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7dd4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    7dd8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7dda:	e7ce      	b.n	7d7a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7dde:	1c5a      	adds	r2, r3, #1
    7de0:	d00d      	beq.n	7dfe <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7de2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7de6:	2100      	movs	r1, #0
    7de8:	4638      	mov	r0, r7
    7dea:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7dee:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7df2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7df6:	d104      	bne.n	7e02 <z_init_static_threads+0x92>
	z_sched_start(thread);
    7df8:	4640      	mov	r0, r8
    7dfa:	f000 fc73 	bl	86e4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7dfe:	342c      	adds	r4, #44	; 0x2c
    7e00:	e7c9      	b.n	7d96 <z_init_static_threads+0x26>
    7e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e06:	2300      	movs	r3, #0
    7e08:	f7f9 f97a 	bl	1100 <__aeabi_uldivmod>
    7e0c:	4602      	mov	r2, r0
    7e0e:	460b      	mov	r3, r1
    7e10:	f108 0018 	add.w	r0, r8, #24
    7e14:	4649      	mov	r1, r9
    7e16:	f000 fe7b 	bl	8b10 <z_add_timeout>
    7e1a:	e7f0      	b.n	7dfe <z_init_static_threads+0x8e>
    7e1c:	0000ae0c 	.word	0x0000ae0c
    7e20:	0000ae0c 	.word	0x0000ae0c
    7e24:	0000a88d 	.word	0x0000a88d

00007e28 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7e28:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7e2a:	4c0b      	ldr	r4, [pc, #44]	; (7e58 <idle+0x30>)
	return !z_sys_post_kernel;
    7e2c:	4d0b      	ldr	r5, [pc, #44]	; (7e5c <idle+0x34>)
	__asm__ volatile(
    7e2e:	f04f 0220 	mov.w	r2, #32
    7e32:	f3ef 8311 	mrs	r3, BASEPRI
    7e36:	f382 8812 	msr	BASEPRI_MAX, r2
    7e3a:	f3bf 8f6f 	isb	sy
    7e3e:	f002 fdbc 	bl	a9ba <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7e42:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7e44:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7e46:	b913      	cbnz	r3, 7e4e <idle+0x26>
	arch_cpu_idle();
    7e48:	f7fb fbbe 	bl	35c8 <arch_cpu_idle>
}
    7e4c:	e7ef      	b.n	7e2e <idle+0x6>
    7e4e:	f7fa f921 	bl	2094 <pm_system_suspend>
    7e52:	2800      	cmp	r0, #0
    7e54:	d1eb      	bne.n	7e2e <idle+0x6>
    7e56:	e7f7      	b.n	7e48 <idle+0x20>
    7e58:	20001ad4 	.word	0x20001ad4
    7e5c:	20001d13 	.word	0x20001d13

00007e60 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7e60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7e64:	4604      	mov	r4, r0
    7e66:	4617      	mov	r7, r2
    7e68:	461e      	mov	r6, r3
    7e6a:	f04f 0320 	mov.w	r3, #32
    7e6e:	f3ef 8811 	mrs	r8, BASEPRI
    7e72:	f383 8812 	msr	BASEPRI_MAX, r3
    7e76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7e7a:	68c3      	ldr	r3, [r0, #12]
    7e7c:	4a33      	ldr	r2, [pc, #204]	; (7f4c <z_impl_k_mutex_lock+0xec>)
    7e7e:	b17b      	cbz	r3, 7ea0 <z_impl_k_mutex_lock+0x40>
    7e80:	6880      	ldr	r0, [r0, #8]
    7e82:	6891      	ldr	r1, [r2, #8]
    7e84:	4288      	cmp	r0, r1
    7e86:	d019      	beq.n	7ebc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7e88:	ea57 0306 	orrs.w	r3, r7, r6
    7e8c:	d118      	bne.n	7ec0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7e8e:	f388 8811 	msr	BASEPRI, r8
    7e92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7e96:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7e9a:	b002      	add	sp, #8
    7e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7ea0:	6891      	ldr	r1, [r2, #8]
    7ea2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7ea6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7ea8:	3301      	adds	r3, #1
    7eaa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7eac:	6893      	ldr	r3, [r2, #8]
    7eae:	60a3      	str	r3, [r4, #8]
    7eb0:	f388 8811 	msr	BASEPRI, r8
    7eb4:	f3bf 8f6f 	isb	sy
		return 0;
    7eb8:	2000      	movs	r0, #0
    7eba:	e7ee      	b.n	7e9a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    7ebc:	6921      	ldr	r1, [r4, #16]
    7ebe:	e7f2      	b.n	7ea6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7ec0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7ec4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7ec8:	4299      	cmp	r1, r3
    7eca:	bfa8      	it	ge
    7ecc:	4619      	movge	r1, r3
    7ece:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7ed2:	4291      	cmp	r1, r2
    7ed4:	bfb8      	it	lt
    7ed6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7ed8:	428b      	cmp	r3, r1
    7eda:	dd2e      	ble.n	7f3a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7edc:	f002 fb6b 	bl	a5b6 <adjust_owner_prio.isra.0>
    7ee0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7ee2:	e9cd 7600 	strd	r7, r6, [sp]
    7ee6:	481a      	ldr	r0, [pc, #104]	; (7f50 <z_impl_k_mutex_lock+0xf0>)
    7ee8:	4622      	mov	r2, r4
    7eea:	4641      	mov	r1, r8
    7eec:	f000 fb84 	bl	85f8 <z_pend_curr>
	if (got_mutex == 0) {
    7ef0:	2800      	cmp	r0, #0
    7ef2:	d0e1      	beq.n	7eb8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    7ef4:	f04f 0320 	mov.w	r3, #32
    7ef8:	f3ef 8611 	mrs	r6, BASEPRI
    7efc:	f383 8812 	msr	BASEPRI_MAX, r3
    7f00:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    7f04:	68a0      	ldr	r0, [r4, #8]
    7f06:	b1d0      	cbz	r0, 7f3e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7f08:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7f0a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f0c:	429c      	cmp	r4, r3
    7f0e:	d00a      	beq.n	7f26 <z_impl_k_mutex_lock+0xc6>
    7f10:	b14b      	cbz	r3, 7f26 <z_impl_k_mutex_lock+0xc6>
    7f12:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7f16:	4299      	cmp	r1, r3
    7f18:	bfa8      	it	ge
    7f1a:	4619      	movge	r1, r3
    7f1c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7f20:	4299      	cmp	r1, r3
    7f22:	bfb8      	it	lt
    7f24:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7f26:	f002 fb46 	bl	a5b6 <adjust_owner_prio.isra.0>
    7f2a:	b140      	cbz	r0, 7f3e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7f2c:	4808      	ldr	r0, [pc, #32]	; (7f50 <z_impl_k_mutex_lock+0xf0>)
    7f2e:	4631      	mov	r1, r6
    7f30:	f000 fbc6 	bl	86c0 <z_reschedule>
	return -EAGAIN;
    7f34:	f06f 000a 	mvn.w	r0, #10
    7f38:	e7af      	b.n	7e9a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    7f3a:	2500      	movs	r5, #0
    7f3c:	e7d1      	b.n	7ee2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    7f3e:	2d00      	cmp	r5, #0
    7f40:	d1f4      	bne.n	7f2c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    7f42:	f386 8811 	msr	BASEPRI, r6
    7f46:	f3bf 8f6f 	isb	sy
    7f4a:	e7f3      	b.n	7f34 <z_impl_k_mutex_lock+0xd4>
    7f4c:	20001ad4 	.word	0x20001ad4
    7f50:	20001d14 	.word	0x20001d14

00007f54 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7f54:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7f56:	6883      	ldr	r3, [r0, #8]
{
    7f58:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7f5a:	b36b      	cbz	r3, 7fb8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7f5c:	4a19      	ldr	r2, [pc, #100]	; (7fc4 <z_impl_k_mutex_unlock+0x70>)
    7f5e:	6892      	ldr	r2, [r2, #8]
    7f60:	4293      	cmp	r3, r2
    7f62:	d12c      	bne.n	7fbe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7f64:	68c3      	ldr	r3, [r0, #12]
    7f66:	2b01      	cmp	r3, #1
    7f68:	d903      	bls.n	7f72 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7f6a:	3b01      	subs	r3, #1
    7f6c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7f6e:	2000      	movs	r0, #0
}
    7f70:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7f72:	f04f 0320 	mov.w	r3, #32
    7f76:	f3ef 8511 	mrs	r5, BASEPRI
    7f7a:	f383 8812 	msr	BASEPRI_MAX, r3
    7f7e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7f82:	6901      	ldr	r1, [r0, #16]
    7f84:	6880      	ldr	r0, [r0, #8]
    7f86:	f002 fb16 	bl	a5b6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7f8a:	4620      	mov	r0, r4
    7f8c:	f002 fc82 	bl	a894 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7f90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7f92:	b158      	cbz	r0, 7fac <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    7f94:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7f98:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7f9a:	2200      	movs	r2, #0
    7f9c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7f9e:	f002 fc43 	bl	a828 <z_ready_thread>
		z_reschedule(&lock, key);
    7fa2:	4809      	ldr	r0, [pc, #36]	; (7fc8 <z_impl_k_mutex_unlock+0x74>)
    7fa4:	4629      	mov	r1, r5
    7fa6:	f000 fb8b 	bl	86c0 <z_reschedule>
    7faa:	e7e0      	b.n	7f6e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    7fac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7fae:	f385 8811 	msr	BASEPRI, r5
    7fb2:	f3bf 8f6f 	isb	sy
    7fb6:	e7da      	b.n	7f6e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    7fb8:	f06f 0015 	mvn.w	r0, #21
    7fbc:	e7d8      	b.n	7f70 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    7fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7fc2:	e7d5      	b.n	7f70 <z_impl_k_mutex_unlock+0x1c>
    7fc4:	20001ad4 	.word	0x20001ad4
    7fc8:	20001d14 	.word	0x20001d14

00007fcc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    7fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7fce:	4611      	mov	r1, r2
	__asm__ volatile(
    7fd0:	f04f 0220 	mov.w	r2, #32
    7fd4:	f3ef 8511 	mrs	r5, BASEPRI
    7fd8:	f382 8812 	msr	BASEPRI_MAX, r2
    7fdc:	f3bf 8f6f 	isb	sy
    7fe0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7fe2:	b19c      	cbz	r4, 800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7fe4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7fe6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7fe8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7fec:	4294      	cmp	r4, r2
	list->head = node;
    7fee:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7ff0:	bf08      	it	eq
    7ff2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7ff4:	2101      	movs	r1, #1
    7ff6:	4620      	mov	r0, r4
    7ff8:	f002 fb4e 	bl	a698 <z_queue_node_peek>
    7ffc:	4604      	mov	r4, r0
	__asm__ volatile(
    7ffe:	f385 8811 	msr	BASEPRI, r5
    8002:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    8006:	4620      	mov	r0, r4
    8008:	b003      	add	sp, #12
    800a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    800c:	ea51 0203 	orrs.w	r2, r1, r3
    8010:	d0f5      	beq.n	7ffe <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8012:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    8016:	e9cd 1300 	strd	r1, r3, [sp]
    801a:	4610      	mov	r0, r2
    801c:	4629      	mov	r1, r5
    801e:	f000 faeb 	bl	85f8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8022:	2800      	cmp	r0, #0
    8024:	d1ef      	bne.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    8026:	4b02      	ldr	r3, [pc, #8]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8028:	689b      	ldr	r3, [r3, #8]
    802a:	695c      	ldr	r4, [r3, #20]
    802c:	e7eb      	b.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
    802e:	bf00      	nop
    8030:	20001ad4 	.word	0x20001ad4

00008034 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8034:	b538      	push	{r3, r4, r5, lr}
    8036:	4604      	mov	r4, r0
	__asm__ volatile(
    8038:	f04f 0320 	mov.w	r3, #32
    803c:	f3ef 8511 	mrs	r5, BASEPRI
    8040:	f383 8812 	msr	BASEPRI_MAX, r3
    8044:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8048:	f002 fc24 	bl	a894 <z_unpend_first_thread>

	if (thread != NULL) {
    804c:	b148      	cbz	r0, 8062 <z_impl_k_sem_give+0x2e>
    804e:	2200      	movs	r2, #0
    8050:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8052:	f002 fbe9 	bl	a828 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8056:	4629      	mov	r1, r5
    8058:	4805      	ldr	r0, [pc, #20]	; (8070 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    805a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    805e:	f000 bb2f 	b.w	86c0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8062:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8066:	429a      	cmp	r2, r3
    8068:	bf18      	it	ne
    806a:	3301      	addne	r3, #1
    806c:	60a3      	str	r3, [r4, #8]
}
    806e:	e7f2      	b.n	8056 <z_impl_k_sem_give+0x22>
    8070:	20001d14 	.word	0x20001d14

00008074 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8074:	b513      	push	{r0, r1, r4, lr}
    8076:	f04f 0420 	mov.w	r4, #32
    807a:	f3ef 8111 	mrs	r1, BASEPRI
    807e:	f384 8812 	msr	BASEPRI_MAX, r4
    8082:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8086:	6884      	ldr	r4, [r0, #8]
    8088:	b144      	cbz	r4, 809c <z_impl_k_sem_take+0x28>
		sem->count--;
    808a:	3c01      	subs	r4, #1
    808c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    808e:	f381 8811 	msr	BASEPRI, r1
    8092:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8096:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8098:	b002      	add	sp, #8
    809a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    809c:	ea52 0403 	orrs.w	r4, r2, r3
    80a0:	d106      	bne.n	80b0 <z_impl_k_sem_take+0x3c>
    80a2:	f381 8811 	msr	BASEPRI, r1
    80a6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    80aa:	f06f 000f 	mvn.w	r0, #15
    80ae:	e7f3      	b.n	8098 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    80b0:	e9cd 2300 	strd	r2, r3, [sp]
    80b4:	4602      	mov	r2, r0
    80b6:	4802      	ldr	r0, [pc, #8]	; (80c0 <z_impl_k_sem_take+0x4c>)
    80b8:	f000 fa9e 	bl	85f8 <z_pend_curr>
	return ret;
    80bc:	e7ec      	b.n	8098 <z_impl_k_sem_take+0x24>
    80be:	bf00      	nop
    80c0:	20001d14 	.word	0x20001d14

000080c4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    80c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    80c8:	4e4a      	ldr	r6, [pc, #296]	; (81f4 <work_queue_main+0x130>)
    80ca:	b085      	sub	sp, #20
    80cc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    80ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    80d2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    80d6:	f04f 0320 	mov.w	r3, #32
    80da:	f3ef 8711 	mrs	r7, BASEPRI
    80de:	f383 8812 	msr	BASEPRI_MAX, r3
    80e2:	f3bf 8f6f 	isb	sy
    80e6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    80ea:	b98d      	cbnz	r5, 8110 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    80ec:	2102      	movs	r1, #2
    80ee:	f104 0098 	add.w	r0, r4, #152	; 0x98
    80f2:	f002 faf4 	bl	a6de <flag_test_and_clear>
    80f6:	2800      	cmp	r0, #0
    80f8:	d143      	bne.n	8182 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    80fa:	2300      	movs	r3, #0
    80fc:	e9cd 8900 	strd	r8, r9, [sp]
    8100:	9302      	str	r3, [sp, #8]
    8102:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8106:	4639      	mov	r1, r7
    8108:	483b      	ldr	r0, [pc, #236]	; (81f8 <work_queue_main+0x134>)
    810a:	f000 fc8f 	bl	8a2c <z_sched_wait>
			continue;
    810e:	e7e2      	b.n	80d6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8110:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    8114:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    8116:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    811a:	4295      	cmp	r5, r2
	list->tail = node;
    811c:	bf08      	it	eq
    811e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    8122:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8126:	f043 0302 	orr.w	r3, r3, #2
    812a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    812e:	68eb      	ldr	r3, [r5, #12]
    8130:	f023 0304 	bic.w	r3, r3, #4
    8134:	f043 0301 	orr.w	r3, r3, #1
    8138:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    813a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    813c:	f387 8811 	msr	BASEPRI, r7
    8140:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8144:	4628      	mov	r0, r5
    8146:	4798      	blx	r3
	__asm__ volatile(
    8148:	f04f 0320 	mov.w	r3, #32
    814c:	f3ef 8b11 	mrs	fp, BASEPRI
    8150:	f383 8812 	msr	BASEPRI_MAX, r3
    8154:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8158:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    815a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    815c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8160:	d419      	bmi.n	8196 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    8162:	60ea      	str	r2, [r5, #12]
    8164:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8168:	f023 0302 	bic.w	r3, r3, #2
    816c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    8170:	f38b 8811 	msr	BASEPRI, fp
    8174:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8178:	05db      	lsls	r3, r3, #23
    817a:	d4ac      	bmi.n	80d6 <work_queue_main+0x12>
	z_impl_k_yield();
    817c:	f000 fb3a 	bl	87f4 <z_impl_k_yield>
}
    8180:	e7a9      	b.n	80d6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8182:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8186:	2200      	movs	r2, #0
    8188:	2101      	movs	r1, #1
    818a:	4628      	mov	r0, r5
    818c:	f002 fbdc 	bl	a948 <z_sched_wake>
    8190:	2800      	cmp	r0, #0
    8192:	d1f8      	bne.n	8186 <work_queue_main+0xc2>
    8194:	e7b1      	b.n	80fa <work_queue_main+0x36>
	return list->head;
    8196:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    8198:	f023 0303 	bic.w	r3, r3, #3
    819c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    819e:	2800      	cmp	r0, #0
    81a0:	d0e0      	beq.n	8164 <work_queue_main+0xa0>
	return node->next;
    81a2:	2700      	movs	r7, #0
    81a4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    81a8:	463b      	mov	r3, r7
    81aa:	2800      	cmp	r0, #0
    81ac:	d0da      	beq.n	8164 <work_queue_main+0xa0>
		if (wc->work == work) {
    81ae:	6842      	ldr	r2, [r0, #4]
    81b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    81b2:	4601      	mov	r1, r0
		if (wc->work == work) {
    81b4:	d10c      	bne.n	81d0 <work_queue_main+0x10c>
	return node->next;
    81b6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    81b8:	b99f      	cbnz	r7, 81e2 <work_queue_main+0x11e>
    81ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    81bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    81be:	4282      	cmp	r2, r0
    81c0:	d100      	bne.n	81c4 <work_queue_main+0x100>
	list->tail = node;
    81c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    81c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    81c8:	f7ff ff34 	bl	8034 <z_impl_k_sem_give>
}
    81cc:	4639      	mov	r1, r7
    81ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    81d0:	f1ba 0f00 	cmp.w	sl, #0
    81d4:	d00b      	beq.n	81ee <work_queue_main+0x12a>
	return node->next;
    81d6:	f8da 2000 	ldr.w	r2, [sl]
    81da:	4650      	mov	r0, sl
    81dc:	460f      	mov	r7, r1
    81de:	4692      	mov	sl, r2
    81e0:	e7e3      	b.n	81aa <work_queue_main+0xe6>
	parent->next = child;
    81e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    81e4:	6872      	ldr	r2, [r6, #4]
    81e6:	4282      	cmp	r2, r0
	list->tail = node;
    81e8:	bf08      	it	eq
    81ea:	6077      	streq	r7, [r6, #4]
}
    81ec:	e7ea      	b.n	81c4 <work_queue_main+0x100>
    81ee:	4652      	mov	r2, sl
    81f0:	e7f3      	b.n	81da <work_queue_main+0x116>
    81f2:	bf00      	nop
    81f4:	20001af8 	.word	0x20001af8
    81f8:	20001d14 	.word	0x20001d14

000081fc <submit_to_queue_locked>:
{
    81fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    81fe:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8200:	079a      	lsls	r2, r3, #30
{
    8202:	4604      	mov	r4, r0
    8204:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8206:	f3c3 0640 	ubfx	r6, r3, #1, #1
    820a:	d42c      	bmi.n	8266 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    820c:	075b      	lsls	r3, r3, #29
    820e:	d41a      	bmi.n	8246 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    8210:	680b      	ldr	r3, [r1, #0]
    8212:	b90b      	cbnz	r3, 8218 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8214:	6883      	ldr	r3, [r0, #8]
    8216:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    8218:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    821a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    821c:	bf44      	itt	mi
    821e:	68a3      	ldrmi	r3, [r4, #8]
    8220:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    8222:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    8224:	bf4c      	ite	mi
    8226:	2602      	movmi	r6, #2
		ret = 1;
    8228:	2601      	movpl	r6, #1
	if (queue == NULL) {
    822a:	2d00      	cmp	r5, #0
    822c:	d03a      	beq.n	82a4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    822e:	4b1f      	ldr	r3, [pc, #124]	; (82ac <submit_to_queue_locked+0xb0>)
    8230:	689b      	ldr	r3, [r3, #8]
    8232:	42ab      	cmp	r3, r5
    8234:	d00a      	beq.n	824c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    8236:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    823a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    823c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8240:	d414      	bmi.n	826c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    8242:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    8246:	2300      	movs	r3, #0
    8248:	603b      	str	r3, [r7, #0]
	return ret;
    824a:	e025      	b.n	8298 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    824c:	f002 f9a1 	bl	a592 <k_is_in_isr>
    8250:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    8254:	2800      	cmp	r0, #0
    8256:	d1f0      	bne.n	823a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8258:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    825a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    825e:	d5f0      	bpl.n	8242 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    8260:	b152      	cbz	r2, 8278 <submit_to_queue_locked+0x7c>
    8262:	075b      	lsls	r3, r3, #29
    8264:	d408      	bmi.n	8278 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    8266:	f06f 060f 	mvn.w	r6, #15
    826a:	e7ec      	b.n	8246 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    826c:	2a00      	cmp	r2, #0
    826e:	d1fa      	bne.n	8266 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    8270:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    8274:	2b00      	cmp	r3, #0
    8276:	d1f6      	bne.n	8266 <submit_to_queue_locked+0x6a>
	parent->next = child;
    8278:	2300      	movs	r3, #0
    827a:	6023      	str	r3, [r4, #0]
	return list->tail;
    827c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    8280:	b963      	cbnz	r3, 829c <submit_to_queue_locked+0xa0>
	list->head = node;
    8282:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8286:	4628      	mov	r0, r5
    8288:	f002 fa34 	bl	a6f4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    828c:	68e3      	ldr	r3, [r4, #12]
    828e:	f043 0304 	orr.w	r3, r3, #4
    8292:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8294:	683b      	ldr	r3, [r7, #0]
    8296:	60a3      	str	r3, [r4, #8]
}
    8298:	4630      	mov	r0, r6
    829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    829c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    829e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    82a2:	e7f0      	b.n	8286 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    82a4:	f06f 0615 	mvn.w	r6, #21
    82a8:	e7cd      	b.n	8246 <submit_to_queue_locked+0x4a>
    82aa:	bf00      	nop
    82ac:	20001ad4 	.word	0x20001ad4

000082b0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    82b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82b2:	b089      	sub	sp, #36	; 0x24
    82b4:	4604      	mov	r4, r0
	list->head = NULL;
    82b6:	2000      	movs	r0, #0
	list->tail = NULL;
    82b8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    82bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    82be:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    82c2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    82c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    82ca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    82ce:	b31d      	cbz	r5, 8318 <k_work_queue_start+0x68>
    82d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    82d2:	2800      	cmp	r0, #0
    82d4:	f240 1001 	movw	r0, #257	; 0x101
    82d8:	bf08      	it	eq
    82da:	2001      	moveq	r0, #1
	*flagp = flags;
    82dc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    82e0:	2000      	movs	r0, #0
    82e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    82e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    82ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
    82ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
    82f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    82f6:	4b09      	ldr	r3, [pc, #36]	; (831c <k_work_queue_start+0x6c>)
    82f8:	9400      	str	r4, [sp, #0]
    82fa:	4620      	mov	r0, r4
    82fc:	f7ff fd0c 	bl	7d18 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8300:	b125      	cbz	r5, 830c <k_work_queue_start+0x5c>
    8302:	6829      	ldr	r1, [r5, #0]
    8304:	b111      	cbz	r1, 830c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    8306:	4620      	mov	r0, r4
    8308:	f002 f949 	bl	a59e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    830c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    830e:	b009      	add	sp, #36	; 0x24
    8310:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8314:	f002 b946 	b.w	a5a4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8318:	2001      	movs	r0, #1
    831a:	e7df      	b.n	82dc <k_work_queue_start+0x2c>
    831c:	000080c5 	.word	0x000080c5

00008320 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    8320:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8322:	9001      	str	r0, [sp, #4]
    8324:	4608      	mov	r0, r1
	__asm__ volatile(
    8326:	f04f 0120 	mov.w	r1, #32
    832a:	f3ef 8411 	mrs	r4, BASEPRI
    832e:	f381 8812 	msr	BASEPRI_MAX, r1
    8332:	f3bf 8f6f 	isb	sy
	return *flagp;
    8336:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    8338:	f011 0f0e 	tst.w	r1, #14
    833c:	d116      	bne.n	836c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    833e:	ea53 0502 	orrs.w	r5, r3, r2
    8342:	d108      	bne.n	8356 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    8344:	a901      	add	r1, sp, #4
    8346:	f7ff ff59 	bl	81fc <submit_to_queue_locked>
	__asm__ volatile(
    834a:	f384 8811 	msr	BASEPRI, r4
    834e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    8352:	b003      	add	sp, #12
    8354:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    8356:	f041 0108 	orr.w	r1, r1, #8
    835a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    835c:	9901      	ldr	r1, [sp, #4]
    835e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    8360:	3010      	adds	r0, #16
    8362:	4903      	ldr	r1, [pc, #12]	; (8370 <k_work_schedule_for_queue+0x50>)
    8364:	f000 fbd4 	bl	8b10 <z_add_timeout>
	return ret;
    8368:	2001      	movs	r0, #1
    836a:	e7ee      	b.n	834a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    836c:	2000      	movs	r0, #0
    836e:	e7ec      	b.n	834a <k_work_schedule_for_queue+0x2a>
    8370:	0000a703 	.word	0x0000a703

00008374 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    8374:	89c3      	ldrh	r3, [r0, #14]
    8376:	2b7f      	cmp	r3, #127	; 0x7f
    8378:	d812      	bhi.n	83a0 <sliceable+0x2c>
	int ret = slice_ticks;
    837a:	4b0a      	ldr	r3, [pc, #40]	; (83a4 <sliceable+0x30>)
    837c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    837e:	b163      	cbz	r3, 839a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8380:	4b09      	ldr	r3, [pc, #36]	; (83a8 <sliceable+0x34>)
    8382:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8386:	681b      	ldr	r3, [r3, #0]
    8388:	429a      	cmp	r2, r3
    838a:	db09      	blt.n	83a0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    838c:	7b43      	ldrb	r3, [r0, #13]
    838e:	06db      	lsls	r3, r3, #27
    8390:	d106      	bne.n	83a0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    8392:	4b06      	ldr	r3, [pc, #24]	; (83ac <sliceable+0x38>)
    8394:	1ac3      	subs	r3, r0, r3
    8396:	bf18      	it	ne
    8398:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    839a:	f003 0001 	and.w	r0, r3, #1
    839e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    83a0:	2300      	movs	r3, #0
    83a2:	e7fa      	b.n	839a <sliceable+0x26>
    83a4:	20001b08 	.word	0x20001b08
    83a8:	20001b04 	.word	0x20001b04
    83ac:	20000600 	.word	0x20000600

000083b0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    83b0:	4b04      	ldr	r3, [pc, #16]	; (83c4 <slice_timeout+0x14>)
    83b2:	1ac0      	subs	r0, r0, r3
    83b4:	4b04      	ldr	r3, [pc, #16]	; (83c8 <slice_timeout+0x18>)
    83b6:	10c0      	asrs	r0, r0, #3
    83b8:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    83ba:	4b04      	ldr	r3, [pc, #16]	; (83cc <slice_timeout+0x1c>)
    83bc:	2201      	movs	r2, #1
    83be:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	20000700 	.word	0x20000700
    83c8:	aaaaaaab 	.word	0xaaaaaaab
    83cc:	20001d14 	.word	0x20001d14

000083d0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    83d0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    83d2:	4b0e      	ldr	r3, [pc, #56]	; (840c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    83d4:	4c0e      	ldr	r4, [pc, #56]	; (8410 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    83d6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    83d8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    83dc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    83e0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    83e2:	4620      	mov	r0, r4
    83e4:	f002 fad3 	bl	a98e <z_abort_timeout>
	slice_expired[cpu] = false;
    83e8:	4b0a      	ldr	r3, [pc, #40]	; (8414 <z_reset_time_slice+0x44>)
    83ea:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    83ec:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    83ee:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    83f0:	f7ff ffc0 	bl	8374 <sliceable>
    83f4:	b148      	cbz	r0, 840a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    83f6:	4b08      	ldr	r3, [pc, #32]	; (8418 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    83f8:	4908      	ldr	r1, [pc, #32]	; (841c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    83fa:	681a      	ldr	r2, [r3, #0]
    83fc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    83fe:	4620      	mov	r0, r4
    8400:	17d3      	asrs	r3, r2, #31
	}
}
    8402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    8406:	f000 bb83 	b.w	8b10 <z_add_timeout>
}
    840a:	bd70      	pop	{r4, r5, r6, pc}
    840c:	20001ad4 	.word	0x20001ad4
    8410:	20000700 	.word	0x20000700
    8414:	20001d14 	.word	0x20001d14
    8418:	20001b08 	.word	0x20001b08
    841c:	000083b1 	.word	0x000083b1

00008420 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    8420:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    8422:	4d0d      	ldr	r5, [pc, #52]	; (8458 <update_cache+0x38>)
    8424:	462b      	mov	r3, r5
    8426:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    842a:	429c      	cmp	r4, r3
    842c:	d000      	beq.n	8430 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    842e:	b904      	cbnz	r4, 8432 <update_cache+0x12>
    8430:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8432:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8434:	b938      	cbnz	r0, 8446 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    8436:	7b5a      	ldrb	r2, [r3, #13]
    8438:	06d2      	lsls	r2, r2, #27
    843a:	d104      	bne.n	8446 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    843c:	69a2      	ldr	r2, [r4, #24]
    843e:	b912      	cbnz	r2, 8446 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    8440:	89da      	ldrh	r2, [r3, #14]
    8442:	2a7f      	cmp	r2, #127	; 0x7f
    8444:	d805      	bhi.n	8452 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    8446:	429c      	cmp	r4, r3
    8448:	d002      	beq.n	8450 <update_cache+0x30>
			z_reset_time_slice(thread);
    844a:	4620      	mov	r0, r4
    844c:	f7ff ffc0 	bl	83d0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    8450:	4623      	mov	r3, r4
    8452:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    8454:	bd38      	pop	{r3, r4, r5, pc}
    8456:	bf00      	nop
    8458:	20001ad4 	.word	0x20001ad4

0000845c <move_thread_to_end_of_prio_q>:
{
    845c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    845e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8462:	7b43      	ldrb	r3, [r0, #13]
    8464:	2a00      	cmp	r2, #0
{
    8466:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8468:	da04      	bge.n	8474 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    846a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    846e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8470:	f002 f9a0 	bl	a7b4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8474:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8476:	4a15      	ldr	r2, [pc, #84]	; (84cc <move_thread_to_end_of_prio_q+0x70>)
    8478:	f063 037f 	orn	r3, r3, #127	; 0x7f
    847c:	4610      	mov	r0, r2
    847e:	734b      	strb	r3, [r1, #13]
    8480:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8484:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8486:	4283      	cmp	r3, r0
    8488:	bf08      	it	eq
    848a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    848c:	b923      	cbnz	r3, 8498 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    848e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    8492:	6021      	str	r1, [r4, #0]
	list->tail = node;
    8494:	6211      	str	r1, [r2, #32]
}
    8496:	e00c      	b.n	84b2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    8498:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    849c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    84a0:	42b5      	cmp	r5, r6
    84a2:	d00e      	beq.n	84c2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    84a4:	42ae      	cmp	r6, r5
    84a6:	dd0c      	ble.n	84c2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    84a8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    84aa:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    84ae:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    84b0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    84b2:	6890      	ldr	r0, [r2, #8]
    84b4:	1a43      	subs	r3, r0, r1
    84b6:	4258      	negs	r0, r3
}
    84b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    84bc:	4158      	adcs	r0, r3
    84be:	f7ff bfaf 	b.w	8420 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    84c2:	429c      	cmp	r4, r3
    84c4:	d0e3      	beq.n	848e <move_thread_to_end_of_prio_q+0x32>
    84c6:	681b      	ldr	r3, [r3, #0]
    84c8:	e7e0      	b.n	848c <move_thread_to_end_of_prio_q+0x30>
    84ca:	bf00      	nop
    84cc:	20001ad4 	.word	0x20001ad4

000084d0 <ready_thread>:
{
    84d0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    84d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    84d6:	7b42      	ldrb	r2, [r0, #13]
    84d8:	2b00      	cmp	r3, #0
    84da:	db29      	blt.n	8530 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    84dc:	06d3      	lsls	r3, r2, #27
    84de:	d127      	bne.n	8530 <ready_thread+0x60>
	return node->next != NULL;
    84e0:	6983      	ldr	r3, [r0, #24]
    84e2:	bb2b      	cbnz	r3, 8530 <ready_thread+0x60>
	return list->head == list;
    84e4:	4913      	ldr	r1, [pc, #76]	; (8534 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    84e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    84ea:	7342      	strb	r2, [r0, #13]
    84ec:	460a      	mov	r2, r1
    84ee:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84f2:	4294      	cmp	r4, r2
    84f4:	bf18      	it	ne
    84f6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    84f8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84fa:	b923      	cbnz	r3, 8506 <ready_thread+0x36>
	node->prev = tail;
    84fc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    8500:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8502:	6208      	str	r0, [r1, #32]
}
    8504:	e00c      	b.n	8520 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    8506:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    850a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    850e:	42b5      	cmp	r5, r6
    8510:	d00a      	beq.n	8528 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8512:	42ae      	cmp	r6, r5
    8514:	dd08      	ble.n	8528 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    8516:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8518:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    851c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    851e:	6058      	str	r0, [r3, #4]
}
    8520:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8522:	2000      	movs	r0, #0
    8524:	f7ff bf7c 	b.w	8420 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8528:	42a3      	cmp	r3, r4
    852a:	d0e7      	beq.n	84fc <ready_thread+0x2c>
    852c:	681b      	ldr	r3, [r3, #0]
    852e:	e7e4      	b.n	84fa <ready_thread+0x2a>
}
    8530:	bc70      	pop	{r4, r5, r6}
    8532:	4770      	bx	lr
    8534:	20001ad4 	.word	0x20001ad4

00008538 <unready_thread>:
{
    8538:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    853a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    853e:	7b43      	ldrb	r3, [r0, #13]
    8540:	2a00      	cmp	r2, #0
{
    8542:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8544:	da04      	bge.n	8550 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    854a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    854c:	f002 f932 	bl	a7b4 <sys_dlist_remove>
	update_cache(thread == _current);
    8550:	4b04      	ldr	r3, [pc, #16]	; (8564 <unready_thread+0x2c>)
    8552:	6898      	ldr	r0, [r3, #8]
    8554:	1a43      	subs	r3, r0, r1
    8556:	4258      	negs	r0, r3
    8558:	4158      	adcs	r0, r3
}
    855a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    855e:	f7ff bf5f 	b.w	8420 <update_cache>
    8562:	bf00      	nop
    8564:	20001ad4 	.word	0x20001ad4

00008568 <pend_locked>:
{
    8568:	b570      	push	{r4, r5, r6, lr}
    856a:	4615      	mov	r5, r2
    856c:	461c      	mov	r4, r3
    856e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    8570:	f002 f932 	bl	a7d8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8574:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8578:	bf08      	it	eq
    857a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    857e:	d008      	beq.n	8592 <pend_locked+0x2a>
    8580:	462a      	mov	r2, r5
    8582:	4623      	mov	r3, r4
    8584:	f106 0018 	add.w	r0, r6, #24
    8588:	4902      	ldr	r1, [pc, #8]	; (8594 <pend_locked+0x2c>)
}
    858a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    858e:	f000 babf 	b.w	8b10 <z_add_timeout>
    8592:	bd70      	pop	{r4, r5, r6, pc}
    8594:	0000a88d 	.word	0x0000a88d

00008598 <z_time_slice>:
{
    8598:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    859a:	f04f 0320 	mov.w	r3, #32
    859e:	f3ef 8511 	mrs	r5, BASEPRI
    85a2:	f383 8812 	msr	BASEPRI_MAX, r3
    85a6:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    85aa:	4b10      	ldr	r3, [pc, #64]	; (85ec <z_time_slice+0x54>)
	if (pending_current == curr) {
    85ac:	4a10      	ldr	r2, [pc, #64]	; (85f0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    85ae:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    85b0:	6810      	ldr	r0, [r2, #0]
    85b2:	42a0      	cmp	r0, r4
    85b4:	d106      	bne.n	85c4 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    85b6:	f7ff ff0b 	bl	83d0 <z_reset_time_slice>
	__asm__ volatile(
    85ba:	f385 8811 	msr	BASEPRI, r5
    85be:	f3bf 8f6f 	isb	sy
}
    85c2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    85c4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    85c6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    85c8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    85ca:	4a0a      	ldr	r2, [pc, #40]	; (85f4 <z_time_slice+0x5c>)
    85cc:	5cd3      	ldrb	r3, [r2, r3]
    85ce:	2b00      	cmp	r3, #0
    85d0:	d0f3      	beq.n	85ba <z_time_slice+0x22>
    85d2:	4620      	mov	r0, r4
    85d4:	f7ff fece 	bl	8374 <sliceable>
    85d8:	2800      	cmp	r0, #0
    85da:	d0ee      	beq.n	85ba <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    85dc:	7b63      	ldrb	r3, [r4, #13]
    85de:	06db      	lsls	r3, r3, #27
    85e0:	d102      	bne.n	85e8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    85e2:	4620      	mov	r0, r4
    85e4:	f7ff ff3a 	bl	845c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    85e8:	4620      	mov	r0, r4
    85ea:	e7e4      	b.n	85b6 <z_time_slice+0x1e>
    85ec:	20001ad4 	.word	0x20001ad4
    85f0:	20001b00 	.word	0x20001b00
    85f4:	20001d14 	.word	0x20001d14

000085f8 <z_pend_curr>:
{
    85f8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    85fa:	480c      	ldr	r0, [pc, #48]	; (862c <z_pend_curr+0x34>)
    85fc:	4d0c      	ldr	r5, [pc, #48]	; (8630 <z_pend_curr+0x38>)
    85fe:	6886      	ldr	r6, [r0, #8]
    8600:	602e      	str	r6, [r5, #0]
{
    8602:	460c      	mov	r4, r1
    8604:	4611      	mov	r1, r2
    8606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    860a:	f04f 0620 	mov.w	r6, #32
    860e:	f3ef 8511 	mrs	r5, BASEPRI
    8612:	f386 8812 	msr	BASEPRI_MAX, r6
    8616:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    861a:	6880      	ldr	r0, [r0, #8]
    861c:	f7ff ffa4 	bl	8568 <pend_locked>
	ret = arch_swap(key);
    8620:	4620      	mov	r0, r4
}
    8622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8626:	f7fb b851 	b.w	36cc <arch_swap>
    862a:	bf00      	nop
    862c:	20001ad4 	.word	0x20001ad4
    8630:	20001b00 	.word	0x20001b00

00008634 <z_set_prio>:
{
    8634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8636:	4604      	mov	r4, r0
    8638:	f04f 0320 	mov.w	r3, #32
    863c:	f3ef 8611 	mrs	r6, BASEPRI
    8640:	f383 8812 	msr	BASEPRI_MAX, r3
    8644:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    8648:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    864a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    864c:	b249      	sxtb	r1, r1
    864e:	d119      	bne.n	8684 <z_set_prio+0x50>
	return node->next != NULL;
    8650:	6985      	ldr	r5, [r0, #24]
    8652:	b9bd      	cbnz	r5, 8684 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8658:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    865a:	f002 f8ab 	bl	a7b4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    865e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8660:	4a16      	ldr	r2, [pc, #88]	; (86bc <z_set_prio+0x88>)
				thread->base.prio = prio;
    8662:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8664:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8668:	7343      	strb	r3, [r0, #13]
    866a:	4613      	mov	r3, r2
    866c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8670:	4298      	cmp	r0, r3
    8672:	bf18      	it	ne
    8674:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    8676:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8678:	b95d      	cbnz	r5, 8692 <z_set_prio+0x5e>
	node->prev = tail;
    867a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    867e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    8680:	6214      	str	r4, [r2, #32]
}
    8682:	e011      	b.n	86a8 <z_set_prio+0x74>
			thread->base.prio = prio;
    8684:	73a1      	strb	r1, [r4, #14]
    8686:	2000      	movs	r0, #0
	__asm__ volatile(
    8688:	f386 8811 	msr	BASEPRI, r6
    868c:	f3bf 8f6f 	isb	sy
}
    8690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    8692:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    8696:	42b9      	cmp	r1, r7
    8698:	d00b      	beq.n	86b2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    869a:	428f      	cmp	r7, r1
    869c:	dd09      	ble.n	86b2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    869e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    86a0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    86a4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    86a6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    86a8:	2001      	movs	r0, #1
    86aa:	f7ff feb9 	bl	8420 <update_cache>
    86ae:	2001      	movs	r0, #1
    86b0:	e7ea      	b.n	8688 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    86b2:	42a8      	cmp	r0, r5
    86b4:	d0e1      	beq.n	867a <z_set_prio+0x46>
    86b6:	682d      	ldr	r5, [r5, #0]
    86b8:	e7de      	b.n	8678 <z_set_prio+0x44>
    86ba:	bf00      	nop
    86bc:	20001ad4 	.word	0x20001ad4

000086c0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    86c0:	b949      	cbnz	r1, 86d6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    86c2:	f3ef 8005 	mrs	r0, IPSR
    86c6:	b930      	cbnz	r0, 86d6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    86c8:	4b05      	ldr	r3, [pc, #20]	; (86e0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    86ca:	699a      	ldr	r2, [r3, #24]
    86cc:	689b      	ldr	r3, [r3, #8]
    86ce:	429a      	cmp	r2, r3
    86d0:	d001      	beq.n	86d6 <z_reschedule+0x16>
    86d2:	f7fa bffb 	b.w	36cc <arch_swap>
    86d6:	f381 8811 	msr	BASEPRI, r1
    86da:	f3bf 8f6f 	isb	sy
}
    86de:	4770      	bx	lr
    86e0:	20001ad4 	.word	0x20001ad4

000086e4 <z_sched_start>:
{
    86e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    86e6:	f04f 0220 	mov.w	r2, #32
    86ea:	f3ef 8411 	mrs	r4, BASEPRI
    86ee:	f382 8812 	msr	BASEPRI_MAX, r2
    86f2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    86f6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    86f8:	0751      	lsls	r1, r2, #29
    86fa:	d404      	bmi.n	8706 <z_sched_start+0x22>
	__asm__ volatile(
    86fc:	f384 8811 	msr	BASEPRI, r4
    8700:	f3bf 8f6f 	isb	sy
}
    8704:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8706:	f022 0204 	bic.w	r2, r2, #4
    870a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    870c:	f7ff fee0 	bl	84d0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8710:	4621      	mov	r1, r4
    8712:	4802      	ldr	r0, [pc, #8]	; (871c <z_sched_start+0x38>)
}
    8714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    8718:	f7ff bfd2 	b.w	86c0 <z_reschedule>
    871c:	20001d15 	.word	0x20001d15

00008720 <z_impl_k_thread_suspend>:
{
    8720:	b570      	push	{r4, r5, r6, lr}
    8722:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8724:	3018      	adds	r0, #24
    8726:	f002 f932 	bl	a98e <z_abort_timeout>
	__asm__ volatile(
    872a:	f04f 0320 	mov.w	r3, #32
    872e:	f3ef 8611 	mrs	r6, BASEPRI
    8732:	f383 8812 	msr	BASEPRI_MAX, r3
    8736:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    873a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    873e:	7b63      	ldrb	r3, [r4, #13]
    8740:	2a00      	cmp	r2, #0
    8742:	da05      	bge.n	8750 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8748:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    874a:	4620      	mov	r0, r4
    874c:	f002 f832 	bl	a7b4 <sys_dlist_remove>
		update_cache(thread == _current);
    8750:	4d0b      	ldr	r5, [pc, #44]	; (8780 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8752:	7b63      	ldrb	r3, [r4, #13]
    8754:	68a8      	ldr	r0, [r5, #8]
    8756:	f043 0310 	orr.w	r3, r3, #16
    875a:	7363      	strb	r3, [r4, #13]
    875c:	1b03      	subs	r3, r0, r4
    875e:	4258      	negs	r0, r3
    8760:	4158      	adcs	r0, r3
    8762:	f7ff fe5d 	bl	8420 <update_cache>
	__asm__ volatile(
    8766:	f386 8811 	msr	BASEPRI, r6
    876a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    876e:	68ab      	ldr	r3, [r5, #8]
    8770:	42a3      	cmp	r3, r4
    8772:	d103      	bne.n	877c <z_impl_k_thread_suspend+0x5c>
}
    8774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8778:	f002 b8cc 	b.w	a914 <z_reschedule_unlocked>
}
    877c:	bd70      	pop	{r4, r5, r6, pc}
    877e:	bf00      	nop
    8780:	20001ad4 	.word	0x20001ad4

00008784 <k_sched_lock>:
	__asm__ volatile(
    8784:	f04f 0320 	mov.w	r3, #32
    8788:	f3ef 8111 	mrs	r1, BASEPRI
    878c:	f383 8812 	msr	BASEPRI_MAX, r3
    8790:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    8794:	4b04      	ldr	r3, [pc, #16]	; (87a8 <k_sched_lock+0x24>)
    8796:	689a      	ldr	r2, [r3, #8]
    8798:	7bd3      	ldrb	r3, [r2, #15]
    879a:	3b01      	subs	r3, #1
    879c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    879e:	f381 8811 	msr	BASEPRI, r1
    87a2:	f3bf 8f6f 	isb	sy
}
    87a6:	4770      	bx	lr
    87a8:	20001ad4 	.word	0x20001ad4

000087ac <k_sched_unlock>:
{
    87ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    87ae:	f04f 0320 	mov.w	r3, #32
    87b2:	f3ef 8411 	mrs	r4, BASEPRI
    87b6:	f383 8812 	msr	BASEPRI_MAX, r3
    87ba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    87be:	4b08      	ldr	r3, [pc, #32]	; (87e0 <k_sched_unlock+0x34>)
    87c0:	689a      	ldr	r2, [r3, #8]
    87c2:	7bd3      	ldrb	r3, [r2, #15]
    87c4:	3301      	adds	r3, #1
    87c6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    87c8:	2000      	movs	r0, #0
    87ca:	f7ff fe29 	bl	8420 <update_cache>
	__asm__ volatile(
    87ce:	f384 8811 	msr	BASEPRI, r4
    87d2:	f3bf 8f6f 	isb	sy
}
    87d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    87da:	f002 b89b 	b.w	a914 <z_reschedule_unlocked>
    87de:	bf00      	nop
    87e0:	20001ad4 	.word	0x20001ad4

000087e4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    87e4:	4b02      	ldr	r3, [pc, #8]	; (87f0 <z_sched_init+0xc>)
    87e6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    87ea:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    87ee:	4770      	bx	lr
    87f0:	20001ad4 	.word	0x20001ad4

000087f4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    87f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    87f6:	f04f 0320 	mov.w	r3, #32
    87fa:	f3ef 8511 	mrs	r5, BASEPRI
    87fe:	f383 8812 	msr	BASEPRI_MAX, r3
    8802:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8806:	4919      	ldr	r1, [pc, #100]	; (886c <z_impl_k_yield+0x78>)
    8808:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    880a:	7b43      	ldrb	r3, [r0, #13]
    880c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8810:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8812:	f001 ffcf 	bl	a7b4 <sys_dlist_remove>
	}
	queue_thread(_current);
    8816:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8818:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    881a:	4608      	mov	r0, r1
    881c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8820:	735a      	strb	r2, [r3, #13]
    8822:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    8826:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8828:	4282      	cmp	r2, r0
    882a:	bf08      	it	eq
    882c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    882e:	b922      	cbnz	r2, 883a <z_impl_k_yield+0x46>
	node->prev = tail;
    8830:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    8834:	6023      	str	r3, [r4, #0]
	list->tail = node;
    8836:	620b      	str	r3, [r1, #32]
}
    8838:	e00c      	b.n	8854 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    883a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    883e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    8842:	42be      	cmp	r6, r7
    8844:	d00e      	beq.n	8864 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8846:	42b7      	cmp	r7, r6
    8848:	dd0c      	ble.n	8864 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    884a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    884c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8850:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8852:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8854:	2001      	movs	r0, #1
    8856:	f7ff fde3 	bl	8420 <update_cache>
    885a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    885c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8860:	f7fa bf34 	b.w	36cc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8864:	42a2      	cmp	r2, r4
    8866:	d0e3      	beq.n	8830 <z_impl_k_yield+0x3c>
    8868:	6812      	ldr	r2, [r2, #0]
    886a:	e7e0      	b.n	882e <z_impl_k_yield+0x3a>
    886c:	20001ad4 	.word	0x20001ad4

00008870 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8870:	ea50 0301 	orrs.w	r3, r0, r1
{
    8874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8878:	4605      	mov	r5, r0
    887a:	460e      	mov	r6, r1
	if (ticks == 0) {
    887c:	d103      	bne.n	8886 <z_tick_sleep+0x16>
	z_impl_k_yield();
    887e:	f7ff ffb9 	bl	87f4 <z_impl_k_yield>
		k_yield();
		return 0;
    8882:	2000      	movs	r0, #0
    8884:	e02c      	b.n	88e0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8886:	1c83      	adds	r3, r0, #2
    8888:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    888c:	db2a      	blt.n	88e4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    888e:	f002 f8a4 	bl	a9da <sys_clock_tick_get_32>
    8892:	182c      	adds	r4, r5, r0
    8894:	f04f 0320 	mov.w	r3, #32
    8898:	f3ef 8811 	mrs	r8, BASEPRI
    889c:	f383 8812 	msr	BASEPRI_MAX, r3
    88a0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    88a4:	4f11      	ldr	r7, [pc, #68]	; (88ec <z_tick_sleep+0x7c>)
    88a6:	4b12      	ldr	r3, [pc, #72]	; (88f0 <z_tick_sleep+0x80>)
    88a8:	68b8      	ldr	r0, [r7, #8]
    88aa:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    88ac:	f7ff fe44 	bl	8538 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    88b0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    88b2:	4910      	ldr	r1, [pc, #64]	; (88f4 <z_tick_sleep+0x84>)
    88b4:	462a      	mov	r2, r5
    88b6:	4633      	mov	r3, r6
    88b8:	3018      	adds	r0, #24
    88ba:	f000 f929 	bl	8b10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    88be:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    88c0:	7b53      	ldrb	r3, [r2, #13]
    88c2:	f043 0310 	orr.w	r3, r3, #16
    88c6:	7353      	strb	r3, [r2, #13]
    88c8:	4640      	mov	r0, r8
    88ca:	f7fa feff 	bl	36cc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    88ce:	f002 f884 	bl	a9da <sys_clock_tick_get_32>
    88d2:	1a20      	subs	r0, r4, r0
    88d4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    88d8:	2801      	cmp	r0, #1
    88da:	f173 0300 	sbcs.w	r3, r3, #0
    88de:	dbd0      	blt.n	8882 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    88e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    88e4:	f06f 0401 	mvn.w	r4, #1
    88e8:	1a24      	subs	r4, r4, r0
    88ea:	e7d3      	b.n	8894 <z_tick_sleep+0x24>
    88ec:	20001ad4 	.word	0x20001ad4
    88f0:	20001b00 	.word	0x20001b00
    88f4:	0000a88d 	.word	0x0000a88d

000088f8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    88f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    88fc:	bf08      	it	eq
    88fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    8902:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8904:	d106      	bne.n	8914 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8906:	4b08      	ldr	r3, [pc, #32]	; (8928 <z_impl_k_sleep+0x30>)
    8908:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    890a:	f7ff ff09 	bl	8720 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    890e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8912:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8914:	f7ff ffac 	bl	8870 <z_tick_sleep>
    8918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    891c:	fb80 0303 	smull	r0, r3, r0, r3
    8920:	0bc0      	lsrs	r0, r0, #15
    8922:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8926:	e7f4      	b.n	8912 <z_impl_k_sleep+0x1a>
    8928:	20001ad4 	.word	0x20001ad4

0000892c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    892c:	b538      	push	{r3, r4, r5, lr}
    892e:	4c0a      	ldr	r4, [pc, #40]	; (8958 <z_impl_k_usleep+0x2c>)
    8930:	4a0a      	ldr	r2, [pc, #40]	; (895c <z_impl_k_usleep+0x30>)
    8932:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    8936:	2100      	movs	r1, #0
    8938:	fbc0 4105 	smlal	r4, r1, r0, r5
    893c:	2300      	movs	r3, #0
    893e:	4620      	mov	r0, r4
    8940:	f7f8 fbde 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    8944:	17c1      	asrs	r1, r0, #31
    8946:	f7ff ff93 	bl	8870 <z_tick_sleep>
    894a:	4b04      	ldr	r3, [pc, #16]	; (895c <z_impl_k_usleep+0x30>)
    894c:	fb80 0303 	smull	r0, r3, r0, r3
    8950:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    8952:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    8956:	bd38      	pop	{r3, r4, r5, pc}
    8958:	000f423f 	.word	0x000f423f
    895c:	000f4240 	.word	0x000f4240

00008960 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8960:	4b01      	ldr	r3, [pc, #4]	; (8968 <z_impl_z_current_get+0x8>)
    8962:	6898      	ldr	r0, [r3, #8]
    8964:	4770      	bx	lr
    8966:	bf00      	nop
    8968:	20001ad4 	.word	0x20001ad4

0000896c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8970:	4604      	mov	r4, r0
    8972:	f04f 0320 	mov.w	r3, #32
    8976:	f3ef 8611 	mrs	r6, BASEPRI
    897a:	f383 8812 	msr	BASEPRI_MAX, r3
    897e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    8982:	7b03      	ldrb	r3, [r0, #12]
    8984:	07d9      	lsls	r1, r3, #31
    8986:	d50b      	bpl.n	89a0 <z_thread_abort+0x34>
	__asm__ volatile(
    8988:	f386 8811 	msr	BASEPRI, r6
    898c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    8990:	4040      	eors	r0, r0
    8992:	f380 8811 	msr	BASEPRI, r0
    8996:	f04f 0004 	mov.w	r0, #4
    899a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    89a0:	7b43      	ldrb	r3, [r0, #13]
    89a2:	071a      	lsls	r2, r3, #28
    89a4:	d504      	bpl.n	89b0 <z_thread_abort+0x44>
    89a6:	f386 8811 	msr	BASEPRI, r6
    89aa:	f3bf 8f6f 	isb	sy
    89ae:	e7f5      	b.n	899c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    89b0:	f023 0220 	bic.w	r2, r3, #32
    89b4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    89b8:	09d2      	lsrs	r2, r2, #7
    89ba:	d120      	bne.n	89fe <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    89bc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    89be:	68a3      	ldr	r3, [r4, #8]
    89c0:	b113      	cbz	r3, 89c8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    89c2:	4620      	mov	r0, r4
    89c4:	f001 fefe 	bl	a7c4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    89c8:	f104 0018 	add.w	r0, r4, #24
    89cc:	f001 ffdf 	bl	a98e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    89d0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    89d4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    89d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89da:	42bd      	cmp	r5, r7
    89dc:	d000      	beq.n	89e0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    89de:	b9b5      	cbnz	r5, 8a0e <z_thread_abort+0xa2>
		update_cache(1);
    89e0:	2001      	movs	r0, #1
    89e2:	f7ff fd1d 	bl	8420 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    89e6:	4b10      	ldr	r3, [pc, #64]	; (8a28 <z_thread_abort+0xbc>)
    89e8:	689b      	ldr	r3, [r3, #8]
    89ea:	42a3      	cmp	r3, r4
    89ec:	d1db      	bne.n	89a6 <z_thread_abort+0x3a>
    89ee:	f3ef 8305 	mrs	r3, IPSR
    89f2:	2b00      	cmp	r3, #0
    89f4:	d1d7      	bne.n	89a6 <z_thread_abort+0x3a>
    89f6:	4630      	mov	r0, r6
    89f8:	f7fa fe68 	bl	36cc <arch_swap>
	return ret;
    89fc:	e7d3      	b.n	89a6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89fe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8a02:	f043 0308 	orr.w	r3, r3, #8
    8a06:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8a08:	f001 fed4 	bl	a7b4 <sys_dlist_remove>
}
    8a0c:	e7d7      	b.n	89be <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    8a0e:	4628      	mov	r0, r5
    8a10:	f001 fed8 	bl	a7c4 <unpend_thread_no_timeout>
    8a14:	f105 0018 	add.w	r0, r5, #24
    8a18:	f001 ffb9 	bl	a98e <z_abort_timeout>
    8a1c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8a20:	4628      	mov	r0, r5
    8a22:	f7ff fd55 	bl	84d0 <ready_thread>
    8a26:	e7d7      	b.n	89d8 <z_thread_abort+0x6c>
    8a28:	20001ad4 	.word	0x20001ad4

00008a2c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    8a2c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8a2e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8a32:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8a34:	e9cd 6700 	strd	r6, r7, [sp]
    8a38:	f7ff fdde 	bl	85f8 <z_pend_curr>

	if (data != NULL) {
    8a3c:	b11c      	cbz	r4, 8a46 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    8a3e:	4b03      	ldr	r3, [pc, #12]	; (8a4c <z_sched_wait+0x20>)
    8a40:	689b      	ldr	r3, [r3, #8]
    8a42:	695b      	ldr	r3, [r3, #20]
    8a44:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8a46:	b002      	add	sp, #8
    8a48:	bdd0      	pop	{r4, r6, r7, pc}
    8a4a:	bf00      	nop
    8a4c:	20001ad4 	.word	0x20001ad4

00008a50 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8a50:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8a52:	4806      	ldr	r0, [pc, #24]	; (8a6c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8a54:	4a06      	ldr	r2, [pc, #24]	; (8a70 <z_data_copy+0x20>)
    8a56:	4907      	ldr	r1, [pc, #28]	; (8a74 <z_data_copy+0x24>)
    8a58:	1a12      	subs	r2, r2, r0
    8a5a:	f001 fd4b 	bl	a4f4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8a62:	4a05      	ldr	r2, [pc, #20]	; (8a78 <z_data_copy+0x28>)
    8a64:	4905      	ldr	r1, [pc, #20]	; (8a7c <z_data_copy+0x2c>)
    8a66:	4806      	ldr	r0, [pc, #24]	; (8a80 <z_data_copy+0x30>)
    8a68:	f001 bd44 	b.w	a4f4 <z_early_memcpy>
    8a6c:	20000000 	.word	0x20000000
    8a70:	2000041c 	.word	0x2000041c
    8a74:	0000b4f0 	.word	0x0000b4f0
    8a78:	00000000 	.word	0x00000000
    8a7c:	0000b4f0 	.word	0x0000b4f0
    8a80:	20000000 	.word	0x20000000

00008a84 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8a84:	4b03      	ldr	r3, [pc, #12]	; (8a94 <elapsed+0x10>)
    8a86:	681b      	ldr	r3, [r3, #0]
    8a88:	b90b      	cbnz	r3, 8a8e <elapsed+0xa>
    8a8a:	f7fc beeb 	b.w	5864 <sys_clock_elapsed>
}
    8a8e:	2000      	movs	r0, #0
    8a90:	4770      	bx	lr
    8a92:	bf00      	nop
    8a94:	20001b0c 	.word	0x20001b0c

00008a98 <next_timeout>:

static int32_t next_timeout(void)
{
    8a98:	b510      	push	{r4, lr}
	return list->head == list;
    8a9a:	4b0e      	ldr	r3, [pc, #56]	; (8ad4 <next_timeout+0x3c>)
    8a9c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a9e:	429c      	cmp	r4, r3
    8aa0:	d104      	bne.n	8aac <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8aa2:	f7ff ffef 	bl	8a84 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8aa6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    8aaa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8aac:	f7ff ffea 	bl	8a84 <elapsed>
	if ((to == NULL) ||
    8ab0:	2c00      	cmp	r4, #0
    8ab2:	d0f8      	beq.n	8aa6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8ab4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8ab8:	1a1b      	subs	r3, r3, r0
    8aba:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    8abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8ac2:	f172 0100 	sbcs.w	r1, r2, #0
    8ac6:	daee      	bge.n	8aa6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8ac8:	2a00      	cmp	r2, #0
    8aca:	bfac      	ite	ge
    8acc:	4618      	movge	r0, r3
    8ace:	2000      	movlt	r0, #0
	return ret;
    8ad0:	e7eb      	b.n	8aaa <next_timeout+0x12>
    8ad2:	bf00      	nop
    8ad4:	200001e0 	.word	0x200001e0

00008ad8 <remove_timeout>:
{
    8ad8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8ada:	b170      	cbz	r0, 8afa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    8adc:	4b0b      	ldr	r3, [pc, #44]	; (8b0c <remove_timeout+0x34>)
    8ade:	685b      	ldr	r3, [r3, #4]
    8ae0:	4298      	cmp	r0, r3
    8ae2:	d00a      	beq.n	8afa <remove_timeout+0x22>
    8ae4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    8ae6:	b143      	cbz	r3, 8afa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8ae8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8aec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8af0:	1912      	adds	r2, r2, r4
    8af2:	eb41 0105 	adc.w	r1, r1, r5
    8af6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8afa:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    8afe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8b00:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8b02:	2300      	movs	r3, #0
	node->prev = NULL;
    8b04:	e9c0 3300 	strd	r3, r3, [r0]
}
    8b08:	bd30      	pop	{r4, r5, pc}
    8b0a:	bf00      	nop
    8b0c:	200001e0 	.word	0x200001e0

00008b10 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8b14:	bf08      	it	eq
    8b16:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b1c:	4604      	mov	r4, r0
    8b1e:	461d      	mov	r5, r3
    8b20:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8b22:	d05c      	beq.n	8bde <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8b24:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    8b26:	f04f 0320 	mov.w	r3, #32
    8b2a:	f3ef 8711 	mrs	r7, BASEPRI
    8b2e:	f383 8812 	msr	BASEPRI_MAX, r3
    8b32:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8b36:	3201      	adds	r2, #1
    8b38:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    8b3c:	da24      	bge.n	8b88 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8b3e:	492d      	ldr	r1, [pc, #180]	; (8bf4 <z_add_timeout+0xe4>)
    8b40:	e9d1 2000 	ldrd	r2, r0, [r1]
    8b44:	f06f 0301 	mvn.w	r3, #1
    8b48:	1a9b      	subs	r3, r3, r2
    8b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8b4e:	eb62 0000 	sbc.w	r0, r2, r0
    8b52:	1b9e      	subs	r6, r3, r6
    8b54:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    8b58:	2e01      	cmp	r6, #1
    8b5a:	f170 0300 	sbcs.w	r3, r0, #0
    8b5e:	da01      	bge.n	8b64 <z_add_timeout+0x54>
    8b60:	2601      	movs	r6, #1
    8b62:	2000      	movs	r0, #0
    8b64:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    8b68:	4e23      	ldr	r6, [pc, #140]	; (8bf8 <z_add_timeout+0xe8>)
    8b6a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    8b6e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b70:	45b4      	cmp	ip, r6
    8b72:	bf08      	it	eq
    8b74:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8b78:	f1bc 0f00 	cmp.w	ip, #0
    8b7c:	d10d      	bne.n	8b9a <z_add_timeout+0x8a>
	node->prev = tail;
    8b7e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    8b82:	602c      	str	r4, [r5, #0]
	list->tail = node;
    8b84:	6074      	str	r4, [r6, #4]
}
    8b86:	e01c      	b.n	8bc2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    8b88:	f7ff ff7c 	bl	8a84 <elapsed>
    8b8c:	3601      	adds	r6, #1
    8b8e:	f145 0500 	adc.w	r5, r5, #0
    8b92:	1836      	adds	r6, r6, r0
    8b94:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8b98:	e7e4      	b.n	8b64 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    8b9a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    8b9e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    8ba2:	4293      	cmp	r3, r2
    8ba4:	eb71 0e00 	sbcs.w	lr, r1, r0
    8ba8:	da1a      	bge.n	8be0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    8baa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    8bac:	f8dc 3004 	ldr.w	r3, [ip, #4]
    8bb0:	eb60 0001 	sbc.w	r0, r0, r1
    8bb4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    8bb8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    8bbc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8bbe:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    8bc2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8bc4:	42b3      	cmp	r3, r6
    8bc6:	d006      	beq.n	8bd6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8bc8:	429c      	cmp	r4, r3
    8bca:	d104      	bne.n	8bd6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    8bcc:	f7ff ff64 	bl	8a98 <next_timeout>
    8bd0:	2100      	movs	r1, #0
    8bd2:	f7fc fe15 	bl	5800 <sys_clock_set_timeout>
	__asm__ volatile(
    8bd6:	f387 8811 	msr	BASEPRI, r7
    8bda:	f3bf 8f6f 	isb	sy
		}
	}
}
    8bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    8be0:	1a9b      	subs	r3, r3, r2
    8be2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    8be6:	45ac      	cmp	ip, r5
    8be8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    8bec:	d0c7      	beq.n	8b7e <z_add_timeout+0x6e>
    8bee:	f8dc c000 	ldr.w	ip, [ip]
    8bf2:	e7c1      	b.n	8b78 <z_add_timeout+0x68>
    8bf4:	20000718 	.word	0x20000718
    8bf8:	200001e0 	.word	0x200001e0

00008bfc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    8bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    8c00:	f04f 0320 	mov.w	r3, #32
    8c04:	f3ef 8c11 	mrs	ip, BASEPRI
    8c08:	f383 8812 	msr	BASEPRI_MAX, r3
    8c0c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8c10:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8cc4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    8c14:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8cc8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    8c18:	4f2c      	ldr	r7, [pc, #176]	; (8ccc <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    8c1a:	f8c9 0000 	str.w	r0, [r9]
    8c1e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    8c22:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c24:	4550      	cmp	r0, sl
    8c26:	bf08      	it	eq
    8c28:	2000      	moveq	r0, #0
    8c2a:	2500      	movs	r5, #0
		curr_tick += dt;
    8c2c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    8c30:	f8d9 3000 	ldr.w	r3, [r9]
    8c34:	46e0      	mov	r8, ip
    8c36:	b380      	cbz	r0, 8c9a <sys_clock_announce+0x9e>
    8c38:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    8c3c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    8c40:	42b3      	cmp	r3, r6
    8c42:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    8c46:	da05      	bge.n	8c54 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    8c48:	1af6      	subs	r6, r6, r3
    8c4a:	eb6c 040e 	sbc.w	r4, ip, lr
    8c4e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    8c52:	e022      	b.n	8c9a <sys_clock_announce+0x9e>
		curr_tick += dt;
    8c54:	18b2      	adds	r2, r6, r2
    8c56:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    8c5a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    8c5e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    8c62:	f7ff ff39 	bl	8ad8 <remove_timeout>
	__asm__ volatile(
    8c66:	f388 8811 	msr	BASEPRI, r8
    8c6a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8c6e:	6883      	ldr	r3, [r0, #8]
    8c70:	4798      	blx	r3
	__asm__ volatile(
    8c72:	f04f 0320 	mov.w	r3, #32
    8c76:	f3ef 8811 	mrs	r8, BASEPRI
    8c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c7e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    8c82:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    8c86:	f8da 0000 	ldr.w	r0, [sl]
    8c8a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c8c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    8c8e:	46c4      	mov	ip, r8
    8c90:	f8c9 3000 	str.w	r3, [r9]
    8c94:	d1ca      	bne.n	8c2c <sys_clock_announce+0x30>
		curr_tick += dt;
    8c96:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    8c9a:	189a      	adds	r2, r3, r2
    8c9c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    8ca0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8ca2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    8ca6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    8caa:	f7ff fef5 	bl	8a98 <next_timeout>
    8cae:	4621      	mov	r1, r4
    8cb0:	f7fc fda6 	bl	5800 <sys_clock_set_timeout>
	__asm__ volatile(
    8cb4:	f388 8811 	msr	BASEPRI, r8
    8cb8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    8cbc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    8cc0:	f7ff bc6a 	b.w	8598 <z_time_slice>
    8cc4:	200001e0 	.word	0x200001e0
    8cc8:	20001b0c 	.word	0x20001b0c
    8ccc:	20000718 	.word	0x20000718

00008cd0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8cd0:	b510      	push	{r4, lr}
	__asm__ volatile(
    8cd2:	f04f 0320 	mov.w	r3, #32
    8cd6:	f3ef 8411 	mrs	r4, BASEPRI
    8cda:	f383 8812 	msr	BASEPRI_MAX, r3
    8cde:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    8ce2:	f7ff fecf 	bl	8a84 <elapsed>
    8ce6:	4a06      	ldr	r2, [pc, #24]	; (8d00 <sys_clock_tick_get+0x30>)
    8ce8:	4603      	mov	r3, r0
    8cea:	e9d2 0100 	ldrd	r0, r1, [r2]
    8cee:	1818      	adds	r0, r3, r0
    8cf0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    8cf4:	f384 8811 	msr	BASEPRI, r4
    8cf8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8cfc:	bd10      	pop	{r4, pc}
    8cfe:	bf00      	nop
    8d00:	20000718 	.word	0x20000718

00008d04 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    8d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8d06:	4606      	mov	r6, r0
    8d08:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    8d0a:	f001 fc42 	bl	a592 <k_is_in_isr>
    8d0e:	b978      	cbnz	r0, 8d30 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8d10:	4b0b      	ldr	r3, [pc, #44]	; (8d40 <z_thread_aligned_alloc+0x3c>)
    8d12:	689b      	ldr	r3, [r3, #8]
    8d14:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    8d16:	b17c      	cbz	r4, 8d38 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    8d18:	1d2a      	adds	r2, r5, #4
    8d1a:	d209      	bcs.n	8d30 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    8d1c:	2000      	movs	r0, #0
    8d1e:	2100      	movs	r1, #0
    8d20:	e9cd 0100 	strd	r0, r1, [sp]
    8d24:	f046 0104 	orr.w	r1, r6, #4
    8d28:	4620      	mov	r0, r4
    8d2a:	f001 fe8f 	bl	aa4c <k_heap_aligned_alloc>
	if (mem == NULL) {
    8d2e:	b908      	cbnz	r0, 8d34 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    8d30:	2400      	movs	r4, #0
	}

	return ret;
    8d32:	e001      	b.n	8d38 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    8d34:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    8d36:	1d04      	adds	r4, r0, #4
}
    8d38:	4620      	mov	r0, r4
    8d3a:	b002      	add	sp, #8
    8d3c:	bd70      	pop	{r4, r5, r6, pc}
    8d3e:	bf00      	nop
    8d40:	20001ad4 	.word	0x20001ad4

00008d44 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    8d44:	4801      	ldr	r0, [pc, #4]	; (8d4c <boot_banner+0x8>)
    8d46:	f000 ba21 	b.w	918c <printk>
    8d4a:	bf00      	nop
    8d4c:	0000b4b9 	.word	0x0000b4b9

00008d50 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    8d50:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8d52:	4c06      	ldr	r4, [pc, #24]	; (8d6c <statics_init+0x1c>)
    8d54:	4d06      	ldr	r5, [pc, #24]	; (8d70 <statics_init+0x20>)
    8d56:	42ac      	cmp	r4, r5
    8d58:	d301      	bcc.n	8d5e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8d5a:	2000      	movs	r0, #0
    8d5c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8d5e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8d62:	4620      	mov	r0, r4
    8d64:	f001 fe6a 	bl	aa3c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8d68:	3414      	adds	r4, #20
    8d6a:	e7f4      	b.n	8d56 <statics_init+0x6>
    8d6c:	20000274 	.word	0x20000274
    8d70:	20000274 	.word	0x20000274

00008d74 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    8d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    8d76:	4b09      	ldr	r3, [pc, #36]	; (8d9c <k_sys_work_q_init+0x28>)
    8d78:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8d7a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8d7c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8d7e:	9300      	str	r3, [sp, #0]
    8d80:	4907      	ldr	r1, [pc, #28]	; (8da0 <k_sys_work_q_init+0x2c>)
    8d82:	4808      	ldr	r0, [pc, #32]	; (8da4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8d84:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8d90:	f7ff fa8e 	bl	82b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8d94:	4620      	mov	r0, r4
    8d96:	b004      	add	sp, #16
    8d98:	bd10      	pop	{r4, pc}
    8d9a:	bf00      	nop
    8d9c:	0000b4e7 	.word	0x0000b4e7
    8da0:	20003800 	.word	0x20003800
    8da4:	20000720 	.word	0x20000720

00008da8 <nrf_cc3xx_platform_init_no_rng>:
    8da8:	b510      	push	{r4, lr}
    8daa:	4c0a      	ldr	r4, [pc, #40]	; (8dd4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8dac:	6823      	ldr	r3, [r4, #0]
    8dae:	b11b      	cbz	r3, 8db8 <nrf_cc3xx_platform_init_no_rng+0x10>
    8db0:	2301      	movs	r3, #1
    8db2:	6023      	str	r3, [r4, #0]
    8db4:	2000      	movs	r0, #0
    8db6:	bd10      	pop	{r4, pc}
    8db8:	f000 f8ea 	bl	8f90 <CC_LibInitNoRng>
    8dbc:	2800      	cmp	r0, #0
    8dbe:	d0f7      	beq.n	8db0 <nrf_cc3xx_platform_init_no_rng+0x8>
    8dc0:	3801      	subs	r0, #1
    8dc2:	2806      	cmp	r0, #6
    8dc4:	d803      	bhi.n	8dce <nrf_cc3xx_platform_init_no_rng+0x26>
    8dc6:	4b04      	ldr	r3, [pc, #16]	; (8dd8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8dc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8dcc:	bd10      	pop	{r4, pc}
    8dce:	4803      	ldr	r0, [pc, #12]	; (8ddc <nrf_cc3xx_platform_init_no_rng+0x34>)
    8dd0:	bd10      	pop	{r4, pc}
    8dd2:	bf00      	nop
    8dd4:	20001b10 	.word	0x20001b10
    8dd8:	0000b154 	.word	0x0000b154
    8ddc:	ffff8ffe 	.word	0xffff8ffe

00008de0 <nrf_cc3xx_platform_abort>:
    8de0:	f3bf 8f4f 	dsb	sy
    8de4:	4905      	ldr	r1, [pc, #20]	; (8dfc <nrf_cc3xx_platform_abort+0x1c>)
    8de6:	4b06      	ldr	r3, [pc, #24]	; (8e00 <nrf_cc3xx_platform_abort+0x20>)
    8de8:	68ca      	ldr	r2, [r1, #12]
    8dea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8dee:	4313      	orrs	r3, r2
    8df0:	60cb      	str	r3, [r1, #12]
    8df2:	f3bf 8f4f 	dsb	sy
    8df6:	bf00      	nop
    8df8:	e7fd      	b.n	8df6 <nrf_cc3xx_platform_abort+0x16>
    8dfa:	bf00      	nop
    8dfc:	e000ed00 	.word	0xe000ed00
    8e00:	05fa0004 	.word	0x05fa0004

00008e04 <CC_PalAbort>:
    8e04:	b410      	push	{r4}
    8e06:	4b09      	ldr	r3, [pc, #36]	; (8e2c <CC_PalAbort+0x28>)
    8e08:	4909      	ldr	r1, [pc, #36]	; (8e30 <CC_PalAbort+0x2c>)
    8e0a:	4c0a      	ldr	r4, [pc, #40]	; (8e34 <CC_PalAbort+0x30>)
    8e0c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8e10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8e14:	6849      	ldr	r1, [r1, #4]
    8e16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8e1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8e1e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8e22:	2300      	movs	r3, #0
    8e24:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8e28:	bc10      	pop	{r4}
    8e2a:	4708      	bx	r1
    8e2c:	5002b000 	.word	0x5002b000
    8e30:	200001e8 	.word	0x200001e8
    8e34:	5002a000 	.word	0x5002a000

00008e38 <nrf_cc3xx_platform_set_abort>:
    8e38:	e9d0 1200 	ldrd	r1, r2, [r0]
    8e3c:	4b01      	ldr	r3, [pc, #4]	; (8e44 <nrf_cc3xx_platform_set_abort+0xc>)
    8e3e:	e9c3 1200 	strd	r1, r2, [r3]
    8e42:	4770      	bx	lr
    8e44:	200001e8 	.word	0x200001e8

00008e48 <mutex_free>:
    8e48:	b510      	push	{r4, lr}
    8e4a:	4604      	mov	r4, r0
    8e4c:	b150      	cbz	r0, 8e64 <mutex_free+0x1c>
    8e4e:	6863      	ldr	r3, [r4, #4]
    8e50:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8e54:	d005      	beq.n	8e62 <mutex_free+0x1a>
    8e56:	4a06      	ldr	r2, [pc, #24]	; (8e70 <mutex_free+0x28>)
    8e58:	4293      	cmp	r3, r2
    8e5a:	d002      	beq.n	8e62 <mutex_free+0x1a>
    8e5c:	2300      	movs	r3, #0
    8e5e:	6023      	str	r3, [r4, #0]
    8e60:	6062      	str	r2, [r4, #4]
    8e62:	bd10      	pop	{r4, pc}
    8e64:	4b03      	ldr	r3, [pc, #12]	; (8e74 <mutex_free+0x2c>)
    8e66:	4804      	ldr	r0, [pc, #16]	; (8e78 <mutex_free+0x30>)
    8e68:	685b      	ldr	r3, [r3, #4]
    8e6a:	4798      	blx	r3
    8e6c:	e7ef      	b.n	8e4e <mutex_free+0x6>
    8e6e:	bf00      	nop
    8e70:	a95c5f2c 	.word	0xa95c5f2c
    8e74:	200001e8 	.word	0x200001e8
    8e78:	0000b170 	.word	0x0000b170

00008e7c <mutex_lock>:
    8e7c:	b1c8      	cbz	r0, 8eb2 <mutex_lock+0x36>
    8e7e:	6843      	ldr	r3, [r0, #4]
    8e80:	4a0d      	ldr	r2, [pc, #52]	; (8eb8 <mutex_lock+0x3c>)
    8e82:	4293      	cmp	r3, r2
    8e84:	d013      	beq.n	8eae <mutex_lock+0x32>
    8e86:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8e8a:	d00e      	beq.n	8eaa <mutex_lock+0x2e>
    8e8c:	2301      	movs	r3, #1
    8e8e:	e850 2f00 	ldrex	r2, [r0]
    8e92:	4619      	mov	r1, r3
    8e94:	e840 1c00 	strex	ip, r1, [r0]
    8e98:	f09c 0f00 	teq	ip, #0
    8e9c:	d1f7      	bne.n	8e8e <mutex_lock+0x12>
    8e9e:	2a01      	cmp	r2, #1
    8ea0:	d0f5      	beq.n	8e8e <mutex_lock+0x12>
    8ea2:	f3bf 8f5f 	dmb	sy
    8ea6:	2000      	movs	r0, #0
    8ea8:	4770      	bx	lr
    8eaa:	4804      	ldr	r0, [pc, #16]	; (8ebc <mutex_lock+0x40>)
    8eac:	4770      	bx	lr
    8eae:	4804      	ldr	r0, [pc, #16]	; (8ec0 <mutex_lock+0x44>)
    8eb0:	4770      	bx	lr
    8eb2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8eb6:	4770      	bx	lr
    8eb8:	a95c5f2c 	.word	0xa95c5f2c
    8ebc:	ffff8fe9 	.word	0xffff8fe9
    8ec0:	ffff8fea 	.word	0xffff8fea

00008ec4 <mutex_unlock>:
    8ec4:	b180      	cbz	r0, 8ee8 <mutex_unlock+0x24>
    8ec6:	6843      	ldr	r3, [r0, #4]
    8ec8:	4a09      	ldr	r2, [pc, #36]	; (8ef0 <mutex_unlock+0x2c>)
    8eca:	4293      	cmp	r3, r2
    8ecc:	d00a      	beq.n	8ee4 <mutex_unlock+0x20>
    8ece:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8ed2:	d005      	beq.n	8ee0 <mutex_unlock+0x1c>
    8ed4:	f3bf 8f5f 	dmb	sy
    8ed8:	2300      	movs	r3, #0
    8eda:	6003      	str	r3, [r0, #0]
    8edc:	4618      	mov	r0, r3
    8ede:	4770      	bx	lr
    8ee0:	4804      	ldr	r0, [pc, #16]	; (8ef4 <mutex_unlock+0x30>)
    8ee2:	4770      	bx	lr
    8ee4:	4804      	ldr	r0, [pc, #16]	; (8ef8 <mutex_unlock+0x34>)
    8ee6:	4770      	bx	lr
    8ee8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8eec:	4770      	bx	lr
    8eee:	bf00      	nop
    8ef0:	a95c5f2c 	.word	0xa95c5f2c
    8ef4:	ffff8fe9 	.word	0xffff8fe9
    8ef8:	ffff8fea 	.word	0xffff8fea

00008efc <mutex_init>:
    8efc:	b510      	push	{r4, lr}
    8efe:	4604      	mov	r4, r0
    8f00:	b120      	cbz	r0, 8f0c <mutex_init+0x10>
    8f02:	4b04      	ldr	r3, [pc, #16]	; (8f14 <mutex_init+0x18>)
    8f04:	6063      	str	r3, [r4, #4]
    8f06:	2200      	movs	r2, #0
    8f08:	6022      	str	r2, [r4, #0]
    8f0a:	bd10      	pop	{r4, pc}
    8f0c:	4802      	ldr	r0, [pc, #8]	; (8f18 <mutex_init+0x1c>)
    8f0e:	f7ff ff79 	bl	8e04 <CC_PalAbort>
    8f12:	e7f6      	b.n	8f02 <mutex_init+0x6>
    8f14:	3a00003a 	.word	0x3a00003a
    8f18:	0000b198 	.word	0x0000b198

00008f1c <nrf_cc3xx_platform_set_mutexes>:
    8f1c:	b570      	push	{r4, r5, r6, lr}
    8f1e:	e9d0 2300 	ldrd	r2, r3, [r0]
    8f22:	4c17      	ldr	r4, [pc, #92]	; (8f80 <nrf_cc3xx_platform_set_mutexes+0x64>)
    8f24:	4d17      	ldr	r5, [pc, #92]	; (8f84 <nrf_cc3xx_platform_set_mutexes+0x68>)
    8f26:	6063      	str	r3, [r4, #4]
    8f28:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8f2c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8f30:	6022      	str	r2, [r4, #0]
    8f32:	6848      	ldr	r0, [r1, #4]
    8f34:	f8d1 c000 	ldr.w	ip, [r1]
    8f38:	4b13      	ldr	r3, [pc, #76]	; (8f88 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    8f3a:	e9c3 c000 	strd	ip, r0, [r3]
    8f3e:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    8f42:	f8d1 c008 	ldr.w	ip, [r1, #8]
    8f46:	f8c3 c008 	str.w	ip, [r3, #8]
    8f4a:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    8f4e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    8f52:	6909      	ldr	r1, [r1, #16]
    8f54:	f8c3 c00c 	str.w	ip, [r3, #12]
    8f58:	6119      	str	r1, [r3, #16]
    8f5a:	d010      	beq.n	8f7e <nrf_cc3xx_platform_set_mutexes+0x62>
    8f5c:	490b      	ldr	r1, [pc, #44]	; (8f8c <nrf_cc3xx_platform_set_mutexes+0x70>)
    8f5e:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    8f62:	2300      	movs	r3, #0
    8f64:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    8f68:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8f6c:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    8f70:	4790      	blx	r2
    8f72:	6823      	ldr	r3, [r4, #0]
    8f74:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f7c:	4718      	bx	r3
    8f7e:	bd70      	pop	{r4, r5, r6, pc}
    8f80:	20000204 	.word	0x20000204
    8f84:	20001b28 	.word	0x20001b28
    8f88:	200001f0 	.word	0x200001f0
    8f8c:	a95c5f2c 	.word	0xa95c5f2c

00008f90 <CC_LibInitNoRng>:
    8f90:	b538      	push	{r3, r4, r5, lr}
    8f92:	f000 f82f 	bl	8ff4 <CC_HalInit>
    8f96:	b120      	cbz	r0, 8fa2 <CC_LibInitNoRng+0x12>
    8f98:	2403      	movs	r4, #3
    8f9a:	f000 f863 	bl	9064 <CC_PalTerminate>
    8f9e:	4620      	mov	r0, r4
    8fa0:	bd38      	pop	{r3, r4, r5, pc}
    8fa2:	f000 f831 	bl	9008 <CC_PalInit>
    8fa6:	b998      	cbnz	r0, 8fd0 <CC_LibInitNoRng+0x40>
    8fa8:	f000 f8ac 	bl	9104 <CC_PalPowerSaveModeSelect>
    8fac:	b998      	cbnz	r0, 8fd6 <CC_LibInitNoRng+0x46>
    8fae:	4d0f      	ldr	r5, [pc, #60]	; (8fec <CC_LibInitNoRng+0x5c>)
    8fb0:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8fb4:	0e1b      	lsrs	r3, r3, #24
    8fb6:	2bf0      	cmp	r3, #240	; 0xf0
    8fb8:	d108      	bne.n	8fcc <CC_LibInitNoRng+0x3c>
    8fba:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8fbe:	4b0c      	ldr	r3, [pc, #48]	; (8ff0 <CC_LibInitNoRng+0x60>)
    8fc0:	429a      	cmp	r2, r3
    8fc2:	d00a      	beq.n	8fda <CC_LibInitNoRng+0x4a>
    8fc4:	2407      	movs	r4, #7
    8fc6:	f000 f817 	bl	8ff8 <CC_HalTerminate>
    8fca:	e7e6      	b.n	8f9a <CC_LibInitNoRng+0xa>
    8fcc:	2406      	movs	r4, #6
    8fce:	e7fa      	b.n	8fc6 <CC_LibInitNoRng+0x36>
    8fd0:	2404      	movs	r4, #4
    8fd2:	4620      	mov	r0, r4
    8fd4:	bd38      	pop	{r3, r4, r5, pc}
    8fd6:	2400      	movs	r4, #0
    8fd8:	e7f5      	b.n	8fc6 <CC_LibInitNoRng+0x36>
    8fda:	2001      	movs	r0, #1
    8fdc:	f000 f892 	bl	9104 <CC_PalPowerSaveModeSelect>
    8fe0:	4604      	mov	r4, r0
    8fe2:	2800      	cmp	r0, #0
    8fe4:	d1f7      	bne.n	8fd6 <CC_LibInitNoRng+0x46>
    8fe6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8fea:	e7d8      	b.n	8f9e <CC_LibInitNoRng+0xe>
    8fec:	5002b000 	.word	0x5002b000
    8ff0:	20e00000 	.word	0x20e00000

00008ff4 <CC_HalInit>:
    8ff4:	2000      	movs	r0, #0
    8ff6:	4770      	bx	lr

00008ff8 <CC_HalTerminate>:
    8ff8:	2000      	movs	r0, #0
    8ffa:	4770      	bx	lr

00008ffc <CC_HalMaskInterrupt>:
    8ffc:	4b01      	ldr	r3, [pc, #4]	; (9004 <CC_HalMaskInterrupt+0x8>)
    8ffe:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    9002:	4770      	bx	lr
    9004:	5002b000 	.word	0x5002b000

00009008 <CC_PalInit>:
    9008:	b510      	push	{r4, lr}
    900a:	4811      	ldr	r0, [pc, #68]	; (9050 <CC_PalInit+0x48>)
    900c:	f000 f848 	bl	90a0 <CC_PalMutexCreate>
    9010:	b100      	cbz	r0, 9014 <CC_PalInit+0xc>
    9012:	bd10      	pop	{r4, pc}
    9014:	480f      	ldr	r0, [pc, #60]	; (9054 <CC_PalInit+0x4c>)
    9016:	f000 f843 	bl	90a0 <CC_PalMutexCreate>
    901a:	2800      	cmp	r0, #0
    901c:	d1f9      	bne.n	9012 <CC_PalInit+0xa>
    901e:	4c0e      	ldr	r4, [pc, #56]	; (9058 <CC_PalInit+0x50>)
    9020:	4620      	mov	r0, r4
    9022:	f000 f83d 	bl	90a0 <CC_PalMutexCreate>
    9026:	2800      	cmp	r0, #0
    9028:	d1f3      	bne.n	9012 <CC_PalInit+0xa>
    902a:	4b0c      	ldr	r3, [pc, #48]	; (905c <CC_PalInit+0x54>)
    902c:	480c      	ldr	r0, [pc, #48]	; (9060 <CC_PalInit+0x58>)
    902e:	601c      	str	r4, [r3, #0]
    9030:	f000 f836 	bl	90a0 <CC_PalMutexCreate>
    9034:	4601      	mov	r1, r0
    9036:	2800      	cmp	r0, #0
    9038:	d1eb      	bne.n	9012 <CC_PalInit+0xa>
    903a:	f000 f82d 	bl	9098 <CC_PalDmaInit>
    903e:	4604      	mov	r4, r0
    9040:	b108      	cbz	r0, 9046 <CC_PalInit+0x3e>
    9042:	4620      	mov	r0, r4
    9044:	bd10      	pop	{r4, pc}
    9046:	f000 f83f 	bl	90c8 <CC_PalPowerSaveModeInit>
    904a:	4620      	mov	r0, r4
    904c:	e7fa      	b.n	9044 <CC_PalInit+0x3c>
    904e:	bf00      	nop
    9050:	20000244 	.word	0x20000244
    9054:	20000240 	.word	0x20000240
    9058:	2000023c 	.word	0x2000023c
    905c:	20000234 	.word	0x20000234
    9060:	20000238 	.word	0x20000238

00009064 <CC_PalTerminate>:
    9064:	b508      	push	{r3, lr}
    9066:	4808      	ldr	r0, [pc, #32]	; (9088 <CC_PalTerminate+0x24>)
    9068:	f000 f824 	bl	90b4 <CC_PalMutexDestroy>
    906c:	4807      	ldr	r0, [pc, #28]	; (908c <CC_PalTerminate+0x28>)
    906e:	f000 f821 	bl	90b4 <CC_PalMutexDestroy>
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <CC_PalTerminate+0x2c>)
    9074:	f000 f81e 	bl	90b4 <CC_PalMutexDestroy>
    9078:	4806      	ldr	r0, [pc, #24]	; (9094 <CC_PalTerminate+0x30>)
    907a:	f000 f81b 	bl	90b4 <CC_PalMutexDestroy>
    907e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9082:	f000 b80b 	b.w	909c <CC_PalDmaTerminate>
    9086:	bf00      	nop
    9088:	20000244 	.word	0x20000244
    908c:	20000240 	.word	0x20000240
    9090:	2000023c 	.word	0x2000023c
    9094:	20000238 	.word	0x20000238

00009098 <CC_PalDmaInit>:
    9098:	2000      	movs	r0, #0
    909a:	4770      	bx	lr

0000909c <CC_PalDmaTerminate>:
    909c:	4770      	bx	lr
    909e:	bf00      	nop

000090a0 <CC_PalMutexCreate>:
    90a0:	b508      	push	{r3, lr}
    90a2:	4b03      	ldr	r3, [pc, #12]	; (90b0 <CC_PalMutexCreate+0x10>)
    90a4:	6802      	ldr	r2, [r0, #0]
    90a6:	681b      	ldr	r3, [r3, #0]
    90a8:	6810      	ldr	r0, [r2, #0]
    90aa:	4798      	blx	r3
    90ac:	2000      	movs	r0, #0
    90ae:	bd08      	pop	{r3, pc}
    90b0:	20000204 	.word	0x20000204

000090b4 <CC_PalMutexDestroy>:
    90b4:	b508      	push	{r3, lr}
    90b6:	4b03      	ldr	r3, [pc, #12]	; (90c4 <CC_PalMutexDestroy+0x10>)
    90b8:	6802      	ldr	r2, [r0, #0]
    90ba:	685b      	ldr	r3, [r3, #4]
    90bc:	6810      	ldr	r0, [r2, #0]
    90be:	4798      	blx	r3
    90c0:	2000      	movs	r0, #0
    90c2:	bd08      	pop	{r3, pc}
    90c4:	20000204 	.word	0x20000204

000090c8 <CC_PalPowerSaveModeInit>:
    90c8:	b570      	push	{r4, r5, r6, lr}
    90ca:	4c09      	ldr	r4, [pc, #36]	; (90f0 <CC_PalPowerSaveModeInit+0x28>)
    90cc:	4d09      	ldr	r5, [pc, #36]	; (90f4 <CC_PalPowerSaveModeInit+0x2c>)
    90ce:	6920      	ldr	r0, [r4, #16]
    90d0:	68ab      	ldr	r3, [r5, #8]
    90d2:	4798      	blx	r3
    90d4:	b118      	cbz	r0, 90de <CC_PalPowerSaveModeInit+0x16>
    90d6:	4b08      	ldr	r3, [pc, #32]	; (90f8 <CC_PalPowerSaveModeInit+0x30>)
    90d8:	4808      	ldr	r0, [pc, #32]	; (90fc <CC_PalPowerSaveModeInit+0x34>)
    90da:	685b      	ldr	r3, [r3, #4]
    90dc:	4798      	blx	r3
    90de:	4a08      	ldr	r2, [pc, #32]	; (9100 <CC_PalPowerSaveModeInit+0x38>)
    90e0:	68eb      	ldr	r3, [r5, #12]
    90e2:	6920      	ldr	r0, [r4, #16]
    90e4:	2100      	movs	r1, #0
    90e6:	6011      	str	r1, [r2, #0]
    90e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90ec:	4718      	bx	r3
    90ee:	bf00      	nop
    90f0:	200001f0 	.word	0x200001f0
    90f4:	20000204 	.word	0x20000204
    90f8:	200001e8 	.word	0x200001e8
    90fc:	0000b1bc 	.word	0x0000b1bc
    9100:	20001b24 	.word	0x20001b24

00009104 <CC_PalPowerSaveModeSelect>:
    9104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9106:	4d1a      	ldr	r5, [pc, #104]	; (9170 <CC_PalPowerSaveModeSelect+0x6c>)
    9108:	4e1a      	ldr	r6, [pc, #104]	; (9174 <CC_PalPowerSaveModeSelect+0x70>)
    910a:	4604      	mov	r4, r0
    910c:	68b2      	ldr	r2, [r6, #8]
    910e:	6928      	ldr	r0, [r5, #16]
    9110:	4790      	blx	r2
    9112:	b9e8      	cbnz	r0, 9150 <CC_PalPowerSaveModeSelect+0x4c>
    9114:	4f18      	ldr	r7, [pc, #96]	; (9178 <CC_PalPowerSaveModeSelect+0x74>)
    9116:	683b      	ldr	r3, [r7, #0]
    9118:	b14c      	cbz	r4, 912e <CC_PalPowerSaveModeSelect+0x2a>
    911a:	b1a3      	cbz	r3, 9146 <CC_PalPowerSaveModeSelect+0x42>
    911c:	2b01      	cmp	r3, #1
    911e:	d019      	beq.n	9154 <CC_PalPowerSaveModeSelect+0x50>
    9120:	3b01      	subs	r3, #1
    9122:	603b      	str	r3, [r7, #0]
    9124:	6928      	ldr	r0, [r5, #16]
    9126:	68f3      	ldr	r3, [r6, #12]
    9128:	4798      	blx	r3
    912a:	2000      	movs	r0, #0
    912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    912e:	b943      	cbnz	r3, 9142 <CC_PalPowerSaveModeSelect+0x3e>
    9130:	4a12      	ldr	r2, [pc, #72]	; (917c <CC_PalPowerSaveModeSelect+0x78>)
    9132:	2101      	movs	r1, #1
    9134:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    9138:	4911      	ldr	r1, [pc, #68]	; (9180 <CC_PalPowerSaveModeSelect+0x7c>)
    913a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    913e:	2a00      	cmp	r2, #0
    9140:	d1fb      	bne.n	913a <CC_PalPowerSaveModeSelect+0x36>
    9142:	3301      	adds	r3, #1
    9144:	603b      	str	r3, [r7, #0]
    9146:	68f3      	ldr	r3, [r6, #12]
    9148:	6928      	ldr	r0, [r5, #16]
    914a:	4798      	blx	r3
    914c:	2000      	movs	r0, #0
    914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9150:	480c      	ldr	r0, [pc, #48]	; (9184 <CC_PalPowerSaveModeSelect+0x80>)
    9152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9154:	4a0a      	ldr	r2, [pc, #40]	; (9180 <CC_PalPowerSaveModeSelect+0x7c>)
    9156:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    915a:	2b00      	cmp	r3, #0
    915c:	d1fb      	bne.n	9156 <CC_PalPowerSaveModeSelect+0x52>
    915e:	4a07      	ldr	r2, [pc, #28]	; (917c <CC_PalPowerSaveModeSelect+0x78>)
    9160:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9164:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9168:	f7ff ff48 	bl	8ffc <CC_HalMaskInterrupt>
    916c:	683b      	ldr	r3, [r7, #0]
    916e:	e7d7      	b.n	9120 <CC_PalPowerSaveModeSelect+0x1c>
    9170:	200001f0 	.word	0x200001f0
    9174:	20000204 	.word	0x20000204
    9178:	20001b24 	.word	0x20001b24
    917c:	5002a000 	.word	0x5002a000
    9180:	5002b000 	.word	0x5002b000
    9184:	ffff8fe9 	.word	0xffff8fe9

00009188 <arch_printk_char_out>:
}
    9188:	2000      	movs	r0, #0
    918a:	4770      	bx	lr

0000918c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    918c:	b40f      	push	{r0, r1, r2, r3}
    918e:	b507      	push	{r0, r1, r2, lr}
    9190:	a904      	add	r1, sp, #16
    9192:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9196:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9198:	f7f8 fa2a 	bl	15f0 <vprintk>

	va_end(ap);
}
    919c:	b003      	add	sp, #12
    919e:	f85d eb04 	ldr.w	lr, [sp], #4
    91a2:	b004      	add	sp, #16
    91a4:	4770      	bx	lr

000091a6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    91a6:	4604      	mov	r4, r0
    91a8:	b508      	push	{r3, lr}
    91aa:	4608      	mov	r0, r1
    91ac:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    91ae:	461a      	mov	r2, r3
    91b0:	47a0      	blx	r4
	return z_impl_z_current_get();
    91b2:	f7ff fbd5 	bl	8960 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    91b6:	f7fa fd1d 	bl	3bf4 <z_impl_k_thread_abort>

000091ba <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    91ba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    91be:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    91c0:	0840      	lsrs	r0, r0, #1
    91c2:	4770      	bx	lr

000091c4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    91c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91c6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    91c8:	f7ff fff7 	bl	91ba <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    91cc:	fab0 f080 	clz	r0, r0
    91d0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    91d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    91d8:	00ca      	lsls	r2, r1, #3
    91da:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    91de:	1d17      	adds	r7, r2, #4
{
    91e0:	460c      	mov	r4, r1
    91e2:	3206      	adds	r2, #6
    91e4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    91e6:	b956      	cbnz	r6, 91fe <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    91e8:	2101      	movs	r1, #1
    91ea:	fa01 f000 	lsl.w	r0, r1, r0
    91ee:	68d9      	ldr	r1, [r3, #12]
    91f0:	4301      	orrs	r1, r0
    91f2:	60d9      	str	r1, [r3, #12]
		b->next = c;
    91f4:	f8cc 4010 	str.w	r4, [ip, #16]
    91f8:	53dd      	strh	r5, [r3, r7]
    91fa:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    91fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    91fe:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    9200:	3104      	adds	r1, #4
    9202:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9204:	53d8      	strh	r0, [r3, r7]
    9206:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    920a:	529e      	strh	r6, [r3, r2]
    920c:	80c5      	strh	r5, [r0, #6]
    920e:	525d      	strh	r5, [r3, r1]
    9210:	e7f4      	b.n	91fc <free_list_add+0x38>

00009212 <free_list_remove_bidx>:
{
    9212:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    9214:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    9218:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    921a:	4299      	cmp	r1, r3
    921c:	f102 0104 	add.w	r1, r2, #4
    9220:	d10a      	bne.n	9238 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    9222:	2301      	movs	r3, #1
    9224:	fa03 f202 	lsl.w	r2, r3, r2
    9228:	68c3      	ldr	r3, [r0, #12]
    922a:	ea23 0302 	bic.w	r3, r3, r2
    922e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    9230:	2300      	movs	r3, #0
    9232:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    9236:	bd10      	pop	{r4, pc}
    9238:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    923a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    923e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9242:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    9246:	80cb      	strh	r3, [r1, #6]
    9248:	8082      	strh	r2, [r0, #4]
}
    924a:	e7f4      	b.n	9236 <free_list_remove_bidx+0x24>

0000924c <free_list_remove>:
{
    924c:	b508      	push	{r3, lr}
    924e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9250:	f7ff ffb3 	bl	91ba <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9254:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    9258:	f1c2 021f 	rsb	r2, r2, #31
    925c:	4618      	mov	r0, r3
}
    925e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    9262:	f7ff bfd6 	b.w	9212 <free_list_remove_bidx>

00009266 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    9266:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    926a:	fab1 f581 	clz	r5, r1
    926e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    9272:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    9276:	4603      	mov	r3, r0
	if (b->next) {
    9278:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    927c:	460e      	mov	r6, r1
	if (b->next) {
    927e:	b1c2      	cbz	r2, 92b2 <alloc_chunk+0x4c>
    9280:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    9282:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    9286:	4618      	mov	r0, r3
    9288:	4621      	mov	r1, r4
    928a:	f7ff ff96 	bl	91ba <chunk_size>
    928e:	42b0      	cmp	r0, r6
    9290:	d306      	bcc.n	92a0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    9292:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    9294:	4618      	mov	r0, r3
    9296:	f7ff ffbc 	bl	9212 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    929a:	4620      	mov	r0, r4
    929c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    92a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    92a4:	3f01      	subs	r7, #1
    92a6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    92a8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    92ac:	d001      	beq.n	92b2 <alloc_chunk+0x4c>
    92ae:	4282      	cmp	r2, r0
    92b0:	d1e7      	bne.n	9282 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    92b2:	f1c5 0220 	rsb	r2, r5, #32
    92b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    92ba:	4094      	lsls	r4, r2
    92bc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    92be:	4014      	ands	r4, r2
    92c0:	d0eb      	beq.n	929a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    92c2:	fa94 f2a4 	rbit	r2, r4
    92c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    92ca:	1d11      	adds	r1, r2, #4
    92cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    92d0:	4621      	mov	r1, r4
    92d2:	e7df      	b.n	9294 <alloc_chunk+0x2e>

000092d4 <merge_chunks>:
{
    92d4:	b538      	push	{r3, r4, r5, lr}
    92d6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    92d8:	f7ff ff6f 	bl	91ba <chunk_size>
{
    92dc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    92de:	4604      	mov	r4, r0
    92e0:	4611      	mov	r1, r2
    92e2:	4618      	mov	r0, r3
    92e4:	f7ff ff69 	bl	91ba <chunk_size>
		((uint16_t *)cmem)[f] = val;
    92e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    92ec:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    92ee:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    92f0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    92f2:	4618      	mov	r0, r3
    92f4:	f7ff ff61 	bl	91ba <chunk_size>
	void *cmem = &buf[c];
    92f8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    92fa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    92fe:	bd38      	pop	{r3, r4, r5, pc}

00009300 <split_chunks>:
{
    9300:	b538      	push	{r3, r4, r5, lr}
    9302:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    9304:	f7ff ff59 	bl	91ba <chunk_size>
{
    9308:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    930a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    930c:	1a51      	subs	r1, r2, r1
    930e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    9312:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9314:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    9316:	8060      	strh	r0, [r4, #2]
    9318:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    931c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    931e:	8044      	strh	r4, [r0, #2]
    9320:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    9324:	4618      	mov	r0, r3
    9326:	4611      	mov	r1, r2
    9328:	f7ff ff47 	bl	91ba <chunk_size>
	void *cmem = &buf[c];
    932c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    932e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    9332:	bd38      	pop	{r3, r4, r5, pc}

00009334 <free_chunk>:
{
    9334:	b538      	push	{r3, r4, r5, lr}
    9336:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    9338:	f7ff ff3f 	bl	91ba <chunk_size>
    933c:	460c      	mov	r4, r1
    933e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    9340:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9344:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    9346:	07da      	lsls	r2, r3, #31
    9348:	d40a      	bmi.n	9360 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    934a:	4628      	mov	r0, r5
    934c:	f7ff ff7e 	bl	924c <free_list_remove>
	return c + chunk_size(h, c);
    9350:	4621      	mov	r1, r4
    9352:	4628      	mov	r0, r5
    9354:	f7ff ff31 	bl	91ba <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    9358:	1822      	adds	r2, r4, r0
    935a:	4628      	mov	r0, r5
    935c:	f7ff ffba 	bl	92d4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    9360:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9364:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    9366:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    936a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    936c:	07db      	lsls	r3, r3, #31
    936e:	d40c      	bmi.n	938a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    9370:	4628      	mov	r0, r5
    9372:	f7ff ff6b 	bl	924c <free_list_remove>
		return ((uint16_t *)cmem)[f];
    9376:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    937a:	4622      	mov	r2, r4
    937c:	1a61      	subs	r1, r4, r1
    937e:	4628      	mov	r0, r5
    9380:	f7ff ffa8 	bl	92d4 <merge_chunks>
    9384:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9388:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    938a:	4621      	mov	r1, r4
    938c:	4628      	mov	r0, r5
}
    938e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    9392:	f7ff bf17 	b.w	91c4 <free_list_add>

00009396 <sys_heap_free>:
	if (mem == NULL) {
    9396:	b161      	cbz	r1, 93b2 <sys_heap_free+0x1c>
    9398:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    939a:	3904      	subs	r1, #4
    939c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    939e:	f021 0307 	bic.w	r3, r1, #7
    93a2:	4403      	add	r3, r0
	free_chunk(h, c);
    93a4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    93a6:	885a      	ldrh	r2, [r3, #2]
    93a8:	f022 0201 	bic.w	r2, r2, #1
    93ac:	805a      	strh	r2, [r3, #2]
    93ae:	f7ff bfc1 	b.w	9334 <free_chunk>
}
    93b2:	4770      	bx	lr

000093b4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    93b4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    93b6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    93b8:	b909      	cbnz	r1, 93be <sys_heap_alloc+0xa>
		return NULL;
    93ba:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    93bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    93be:	68ab      	ldr	r3, [r5, #8]
    93c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    93c4:	d9f9      	bls.n	93ba <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    93c6:	310b      	adds	r1, #11
    93c8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    93ca:	4621      	mov	r1, r4
    93cc:	4628      	mov	r0, r5
    93ce:	f7ff ff4a 	bl	9266 <alloc_chunk>
	if (c == 0U) {
    93d2:	4606      	mov	r6, r0
    93d4:	2800      	cmp	r0, #0
    93d6:	d0f0      	beq.n	93ba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    93d8:	4601      	mov	r1, r0
    93da:	4628      	mov	r0, r5
    93dc:	f7ff feed 	bl	91ba <chunk_size>
    93e0:	42a0      	cmp	r0, r4
    93e2:	d907      	bls.n	93f4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    93e4:	1932      	adds	r2, r6, r4
    93e6:	4628      	mov	r0, r5
    93e8:	f7ff ff8a 	bl	9300 <split_chunks>
		free_list_add(h, c + chunk_sz);
    93ec:	4611      	mov	r1, r2
    93ee:	4628      	mov	r0, r5
    93f0:	f7ff fee8 	bl	91c4 <free_list_add>
	void *cmem = &buf[c];
    93f4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    93f8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    93fa:	8853      	ldrh	r3, [r2, #2]
    93fc:	f043 0301 	orr.w	r3, r3, #1
    9400:	8053      	strh	r3, [r2, #2]
    9402:	3004      	adds	r0, #4
	return mem;
    9404:	e7da      	b.n	93bc <sys_heap_alloc+0x8>

00009406 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9406:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    940a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    940e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    9412:	6806      	ldr	r6, [r0, #0]
{
    9414:	460f      	mov	r7, r1
    9416:	4614      	mov	r4, r2
	if (align != rew) {
    9418:	d00c      	beq.n	9434 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    941a:	424b      	negs	r3, r1
    941c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    941e:	2b04      	cmp	r3, #4
    9420:	461a      	mov	r2, r3
    9422:	464f      	mov	r7, r9
    9424:	bf28      	it	cs
    9426:	2204      	movcs	r2, #4
	rew = align & -align;
    9428:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    942a:	b964      	cbnz	r4, 9446 <sys_heap_aligned_alloc+0x40>
		return NULL;
    942c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    942e:	4628      	mov	r0, r5
    9430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    9434:	2904      	cmp	r1, #4
    9436:	d804      	bhi.n	9442 <sys_heap_aligned_alloc+0x3c>
}
    9438:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    943c:	4611      	mov	r1, r2
    943e:	f7ff bfb9 	b.w	93b4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    9442:	2204      	movs	r2, #4
    9444:	e7f1      	b.n	942a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    9446:	68b3      	ldr	r3, [r6, #8]
    9448:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    944c:	d9ee      	bls.n	942c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    944e:	f104 010b 	add.w	r1, r4, #11
    9452:	4439      	add	r1, r7
    9454:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9456:	08c9      	lsrs	r1, r1, #3
    9458:	4630      	mov	r0, r6
    945a:	f7ff ff04 	bl	9266 <alloc_chunk>
	if (c0 == 0) {
    945e:	4680      	mov	r8, r0
    9460:	2800      	cmp	r0, #0
    9462:	d0e3      	beq.n	942c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9464:	f109 0504 	add.w	r5, r9, #4
    9468:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    946c:	1e7b      	subs	r3, r7, #1
    946e:	4435      	add	r5, r6
    9470:	441d      	add	r5, r3
    9472:	427f      	negs	r7, r7
    9474:	403d      	ands	r5, r7
    9476:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    947a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    947c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    947e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9480:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9482:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9486:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9488:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    948c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9490:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9494:	d208      	bcs.n	94a8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    9496:	4601      	mov	r1, r0
    9498:	463a      	mov	r2, r7
    949a:	4630      	mov	r0, r6
    949c:	f7ff ff30 	bl	9300 <split_chunks>
		free_list_add(h, c0);
    94a0:	4641      	mov	r1, r8
    94a2:	4630      	mov	r0, r6
    94a4:	f7ff fe8e 	bl	91c4 <free_list_add>
	return c + chunk_size(h, c);
    94a8:	4639      	mov	r1, r7
    94aa:	4630      	mov	r0, r6
    94ac:	f7ff fe85 	bl	91ba <chunk_size>
    94b0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    94b2:	4284      	cmp	r4, r0
    94b4:	d207      	bcs.n	94c6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    94b6:	4630      	mov	r0, r6
    94b8:	4622      	mov	r2, r4
    94ba:	f7ff ff21 	bl	9300 <split_chunks>
		free_list_add(h, c_end);
    94be:	4621      	mov	r1, r4
    94c0:	4630      	mov	r0, r6
    94c2:	f7ff fe7f 	bl	91c4 <free_list_add>
	void *cmem = &buf[c];
    94c6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    94ca:	8873      	ldrh	r3, [r6, #2]
    94cc:	f043 0301 	orr.w	r3, r3, #1
    94d0:	8073      	strh	r3, [r6, #2]
    94d2:	e7ac      	b.n	942e <sys_heap_aligned_alloc+0x28>

000094d4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    94d4:	3a04      	subs	r2, #4
{
    94d6:	b4f0      	push	{r4, r5, r6, r7}
    94d8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    94da:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    94dc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    94de:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    94e2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    94e6:	1a0e      	subs	r6, r1, r0
    94e8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    94ea:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    94ec:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    94f0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    94f2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    94f6:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    94f8:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    94fa:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    94fc:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9500:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    9502:	f1c2 0220 	rsb	r2, r2, #32
    9506:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    9508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    950c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    9510:	4294      	cmp	r4, r2
    9512:	d1fb      	bne.n	950c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9514:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9516:	f042 0201 	orr.w	r2, r2, #1
    951a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    951c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    9520:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9522:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    9524:	8007      	strh	r7, [r0, #0]
    9526:	8065      	strh	r5, [r4, #2]
    9528:	1984      	adds	r4, r0, r6
    952a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    952e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    9532:	8067      	strh	r7, [r4, #2]
    9534:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9536:	885a      	ldrh	r2, [r3, #2]
    9538:	f042 0201 	orr.w	r2, r2, #1
    953c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    953e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    9540:	f7ff be40 	b.w	91c4 <free_list_add>

00009544 <sys_slist_find_and_remove>:
	return list->head;
    9544:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9546:	2200      	movs	r2, #0
    9548:	b90b      	cbnz	r3, 954e <sys_slist_find_and_remove+0xa>
    954a:	4618      	mov	r0, r3
    954c:	4770      	bx	lr
    954e:	428b      	cmp	r3, r1
    9550:	d110      	bne.n	9574 <sys_slist_find_and_remove+0x30>
	return node->next;
    9552:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    9554:	b942      	cbnz	r2, 9568 <sys_slist_find_and_remove+0x24>
    9556:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    9558:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    955a:	4291      	cmp	r1, r2
    955c:	d100      	bne.n	9560 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    955e:	6043      	str	r3, [r0, #4]
	parent->next = child;
    9560:	2300      	movs	r3, #0
    9562:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9564:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    9566:	4770      	bx	lr
	parent->next = child;
    9568:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    956a:	6843      	ldr	r3, [r0, #4]
    956c:	4299      	cmp	r1, r3
	list->tail = node;
    956e:	bf08      	it	eq
    9570:	6042      	streq	r2, [r0, #4]
}
    9572:	e7f5      	b.n	9560 <sys_slist_find_and_remove+0x1c>
	return node->next;
    9574:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9576:	681b      	ldr	r3, [r3, #0]
    9578:	e7e6      	b.n	9548 <sys_slist_find_and_remove+0x4>

0000957a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    957a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    957c:	f013 0307 	ands.w	r3, r3, #7
    9580:	d105      	bne.n	958e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9582:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9584:	2b00      	cmp	r3, #0
    9586:	bf0c      	ite	eq
    9588:	2000      	moveq	r0, #0
    958a:	2003      	movne	r0, #3
    958c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    958e:	2b02      	cmp	r3, #2
    9590:	d105      	bne.n	959e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9592:	8b40      	ldrh	r0, [r0, #26]
    9594:	fab0 f080 	clz	r0, r0
    9598:	0940      	lsrs	r0, r0, #5
    959a:	0080      	lsls	r0, r0, #2
    959c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    959e:	2b01      	cmp	r3, #1
    95a0:	d105      	bne.n	95ae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    95a2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    95a4:	2b00      	cmp	r3, #0
    95a6:	bf0c      	ite	eq
    95a8:	2000      	moveq	r0, #0
    95aa:	2005      	movne	r0, #5
    95ac:	4770      	bx	lr
	int evt = EVT_NOP;
    95ae:	2000      	movs	r0, #0
}
    95b0:	4770      	bx	lr

000095b2 <validate_args>:
{
    95b2:	b510      	push	{r4, lr}
    95b4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    95b6:	b100      	cbz	r0, 95ba <validate_args+0x8>
    95b8:	b911      	cbnz	r1, 95c0 <validate_args+0xe>
		return -EINVAL;
    95ba:	f06f 0015 	mvn.w	r0, #21
}
    95be:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    95c0:	1d08      	adds	r0, r1, #4
    95c2:	f000 f8d6 	bl	9772 <sys_notify_validate>
	if ((rv == 0)
    95c6:	2800      	cmp	r0, #0
    95c8:	d1f9      	bne.n	95be <validate_args+0xc>
	    && ((cli->notify.flags
    95ca:	68a3      	ldr	r3, [r4, #8]
    95cc:	2b03      	cmp	r3, #3
    95ce:	d9f6      	bls.n	95be <validate_args+0xc>
    95d0:	e7f3      	b.n	95ba <validate_args+0x8>

000095d2 <notify_one>:
{
    95d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95d6:	460d      	mov	r5, r1
    95d8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    95da:	4619      	mov	r1, r3
    95dc:	1d28      	adds	r0, r5, #4
{
    95de:	4690      	mov	r8, r2
    95e0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    95e2:	f000 f8d7 	bl	9794 <sys_notify_finalize>
	if (cb) {
    95e6:	4604      	mov	r4, r0
    95e8:	b138      	cbz	r0, 95fa <notify_one+0x28>
		cb(mgr, cli, state, res);
    95ea:	4633      	mov	r3, r6
    95ec:	4642      	mov	r2, r8
    95ee:	4629      	mov	r1, r5
    95f0:	4638      	mov	r0, r7
    95f2:	46a4      	mov	ip, r4
}
    95f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    95f8:	4760      	bx	ip
}
    95fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000095fe <transition_complete>:
{
    95fe:	b410      	push	{r4}
	__asm__ volatile(
    9600:	f04f 0420 	mov.w	r4, #32
    9604:	f3ef 8211 	mrs	r2, BASEPRI
    9608:	f384 8812 	msr	BASEPRI_MAX, r4
    960c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9610:	6141      	str	r1, [r0, #20]
}
    9612:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9614:	2101      	movs	r1, #1
    9616:	f7f7 bff9 	b.w	160c <process_event>

0000961a <onoff_manager_init>:
{
    961a:	b538      	push	{r3, r4, r5, lr}
    961c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    961e:	4605      	mov	r5, r0
    9620:	b158      	cbz	r0, 963a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9622:	b151      	cbz	r1, 963a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9624:	680b      	ldr	r3, [r1, #0]
    9626:	b143      	cbz	r3, 963a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9628:	684b      	ldr	r3, [r1, #4]
    962a:	b133      	cbz	r3, 963a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    962c:	221c      	movs	r2, #28
    962e:	2100      	movs	r1, #0
    9630:	f000 fb72 	bl	9d18 <memset>
    9634:	612c      	str	r4, [r5, #16]
	return 0;
    9636:	2000      	movs	r0, #0
}
    9638:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    963a:	f06f 0015 	mvn.w	r0, #21
    963e:	e7fb      	b.n	9638 <onoff_manager_init+0x1e>

00009640 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9640:	b570      	push	{r4, r5, r6, lr}
    9642:	4605      	mov	r5, r0
    9644:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9646:	f7ff ffb4 	bl	95b2 <validate_args>

	if (rv < 0) {
    964a:	1e04      	subs	r4, r0, #0
    964c:	db15      	blt.n	967a <onoff_request+0x3a>
    964e:	f04f 0320 	mov.w	r3, #32
    9652:	f3ef 8211 	mrs	r2, BASEPRI
    9656:	f383 8812 	msr	BASEPRI_MAX, r3
    965a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    965e:	8b6b      	ldrh	r3, [r5, #26]
    9660:	8b2c      	ldrh	r4, [r5, #24]
    9662:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9666:	428b      	cmp	r3, r1
    9668:	f004 0407 	and.w	r4, r4, #7
    966c:	d107      	bne.n	967e <onoff_request+0x3e>
	__asm__ volatile(
    966e:	f382 8811 	msr	BASEPRI, r2
    9672:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    9676:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    967a:	4620      	mov	r0, r4
    967c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    967e:	2c02      	cmp	r4, #2
    9680:	d10c      	bne.n	969c <onoff_request+0x5c>
		mgr->refs += 1U;
    9682:	3301      	adds	r3, #1
    9684:	836b      	strh	r3, [r5, #26]
    9686:	f382 8811 	msr	BASEPRI, r2
    968a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    968e:	2300      	movs	r3, #0
    9690:	4622      	mov	r2, r4
    9692:	4631      	mov	r1, r6
    9694:	4628      	mov	r0, r5
    9696:	f7ff ff9c 	bl	95d2 <notify_one>
    969a:	e7ee      	b.n	967a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    969c:	2c06      	cmp	r4, #6
    969e:	d814      	bhi.n	96ca <onoff_request+0x8a>
    96a0:	e8df f004 	tbb	[pc, r4]
    96a4:	13131304 	.word	0x13131304
    96a8:	1a04      	.short	0x1a04
    96aa:	04          	.byte	0x04
    96ab:	00          	.byte	0x00
	parent->next = child;
    96ac:	2300      	movs	r3, #0
    96ae:	6033      	str	r3, [r6, #0]
	return list->tail;
    96b0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    96b2:	b93b      	cbnz	r3, 96c4 <onoff_request+0x84>
	list->head = node;
    96b4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    96b8:	b9ac      	cbnz	r4, 96e6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    96ba:	2102      	movs	r1, #2
    96bc:	4628      	mov	r0, r5
    96be:	f7f7 ffa5 	bl	160c <process_event>
    96c2:	e7da      	b.n	967a <onoff_request+0x3a>
	parent->next = child;
    96c4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    96c6:	606e      	str	r6, [r5, #4]
}
    96c8:	e7f6      	b.n	96b8 <onoff_request+0x78>
    96ca:	f382 8811 	msr	BASEPRI, r2
    96ce:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    96d2:	f06f 0404 	mvn.w	r4, #4
    96d6:	e7d0      	b.n	967a <onoff_request+0x3a>
    96d8:	f382 8811 	msr	BASEPRI, r2
    96dc:	f3bf 8f6f 	isb	sy
    96e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    96e4:	e7c9      	b.n	967a <onoff_request+0x3a>
    96e6:	f382 8811 	msr	BASEPRI, r2
    96ea:	f3bf 8f6f 	isb	sy
		if (notify) {
    96ee:	e7c4      	b.n	967a <onoff_request+0x3a>

000096f0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    96f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    96f2:	f04f 0320 	mov.w	r3, #32
    96f6:	f3ef 8211 	mrs	r2, BASEPRI
    96fa:	f383 8812 	msr	BASEPRI_MAX, r3
    96fe:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9702:	8b04      	ldrh	r4, [r0, #24]
    9704:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9708:	2c02      	cmp	r4, #2
    970a:	d00a      	beq.n	9722 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    970c:	2c01      	cmp	r4, #1
    970e:	bf0c      	ite	eq
    9710:	f06f 0004 	mvneq.w	r0, #4
    9714:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    9718:	f382 8811 	msr	BASEPRI, r2
    971c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    9720:	e008      	b.n	9734 <onoff_release+0x44>
	mgr->refs -= 1U;
    9722:	8b43      	ldrh	r3, [r0, #26]
    9724:	3b01      	subs	r3, #1
    9726:	b29b      	uxth	r3, r3
    9728:	8343      	strh	r3, [r0, #26]
	if (stop) {
    972a:	b923      	cbnz	r3, 9736 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    972c:	4621      	mov	r1, r4
    972e:	f7f7 ff6d 	bl	160c <process_event>
	int rv = state;
    9732:	4620      	mov	r0, r4
}
    9734:	bd10      	pop	{r4, pc}
	int rv = state;
    9736:	4620      	mov	r0, r4
    9738:	e7ee      	b.n	9718 <onoff_release+0x28>

0000973a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    973a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    973c:	b1b0      	cbz	r0, 976c <onoff_cancel+0x32>
    973e:	b1a9      	cbz	r1, 976c <onoff_cancel+0x32>
	__asm__ volatile(
    9740:	f04f 0220 	mov.w	r2, #32
    9744:	f3ef 8511 	mrs	r5, BASEPRI
    9748:	f382 8812 	msr	BASEPRI_MAX, r2
    974c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9750:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    9752:	f7ff fef7 	bl	9544 <sys_slist_find_and_remove>
    9756:	b130      	cbz	r0, 9766 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    9758:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    975c:	f385 8811 	msr	BASEPRI, r5
    9760:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9764:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    9766:	f06f 0077 	mvn.w	r0, #119	; 0x77
    976a:	e7f7      	b.n	975c <onoff_cancel+0x22>
		return -EINVAL;
    976c:	f06f 0015 	mvn.w	r0, #21
    9770:	e7f8      	b.n	9764 <onoff_cancel+0x2a>

00009772 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9772:	4603      	mov	r3, r0
    9774:	b158      	cbz	r0, 978e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9776:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9778:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    977c:	2a01      	cmp	r2, #1
    977e:	d003      	beq.n	9788 <sys_notify_validate+0x16>
    9780:	2a03      	cmp	r2, #3
    9782:	d104      	bne.n	978e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9784:	6802      	ldr	r2, [r0, #0]
    9786:	b112      	cbz	r2, 978e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9788:	2000      	movs	r0, #0
    978a:	6098      	str	r0, [r3, #8]
    978c:	4770      	bx	lr
    978e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9792:	4770      	bx	lr

00009794 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9794:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9796:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9798:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    979c:	2a03      	cmp	r2, #3
    979e:	f04f 0200 	mov.w	r2, #0
{
    97a2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    97a4:	bf0c      	ite	eq
    97a6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    97a8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    97aa:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    97ac:	4770      	bx	lr

000097ae <encode_uint>:
{
    97ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97b2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    97b4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    97b6:	2b6f      	cmp	r3, #111	; 0x6f
{
    97b8:	4680      	mov	r8, r0
    97ba:	460f      	mov	r7, r1
    97bc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    97be:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    97c2:	d029      	beq.n	9818 <encode_uint+0x6a>
    97c4:	d824      	bhi.n	9810 <encode_uint+0x62>
		return 10;
    97c6:	2b58      	cmp	r3, #88	; 0x58
    97c8:	bf0c      	ite	eq
    97ca:	2610      	moveq	r6, #16
    97cc:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    97ce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    97d2:	4632      	mov	r2, r6
    97d4:	2300      	movs	r3, #0
    97d6:	4640      	mov	r0, r8
    97d8:	4639      	mov	r1, r7
    97da:	f7f7 fc91 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    97de:	2a09      	cmp	r2, #9
    97e0:	b2d4      	uxtb	r4, r2
    97e2:	d81e      	bhi.n	9822 <encode_uint+0x74>
    97e4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    97e6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    97e8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    97ea:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    97ee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    97f2:	d301      	bcc.n	97f8 <encode_uint+0x4a>
    97f4:	45d1      	cmp	r9, sl
    97f6:	d811      	bhi.n	981c <encode_uint+0x6e>
	if (conv->flag_hash) {
    97f8:	782b      	ldrb	r3, [r5, #0]
    97fa:	069b      	lsls	r3, r3, #26
    97fc:	d505      	bpl.n	980a <encode_uint+0x5c>
		if (radix == 8) {
    97fe:	2e08      	cmp	r6, #8
    9800:	d115      	bne.n	982e <encode_uint+0x80>
			conv->altform_0 = true;
    9802:	78ab      	ldrb	r3, [r5, #2]
    9804:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9808:	70ab      	strb	r3, [r5, #2]
}
    980a:	4648      	mov	r0, r9
    980c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9810:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    9814:	2b70      	cmp	r3, #112	; 0x70
    9816:	e7d7      	b.n	97c8 <encode_uint+0x1a>
	switch (specifier) {
    9818:	2608      	movs	r6, #8
    981a:	e7d8      	b.n	97ce <encode_uint+0x20>
		value /= radix;
    981c:	4680      	mov	r8, r0
    981e:	460f      	mov	r7, r1
    9820:	e7d7      	b.n	97d2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9822:	f1bb 0f19 	cmp.w	fp, #25
    9826:	bf94      	ite	ls
    9828:	3437      	addls	r4, #55	; 0x37
    982a:	3457      	addhi	r4, #87	; 0x57
    982c:	e7db      	b.n	97e6 <encode_uint+0x38>
		} else if (radix == 16) {
    982e:	2e10      	cmp	r6, #16
    9830:	d1eb      	bne.n	980a <encode_uint+0x5c>
			conv->altform_0c = true;
    9832:	78ab      	ldrb	r3, [r5, #2]
    9834:	f043 0310 	orr.w	r3, r3, #16
    9838:	e7e6      	b.n	9808 <encode_uint+0x5a>

0000983a <outs>:
{
    983a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    983e:	4607      	mov	r7, r0
    9840:	4688      	mov	r8, r1
    9842:	4615      	mov	r5, r2
    9844:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9846:	4614      	mov	r4, r2
    9848:	42b4      	cmp	r4, r6
    984a:	d305      	bcc.n	9858 <outs+0x1e>
    984c:	b10e      	cbz	r6, 9852 <outs+0x18>
	return (int)count;
    984e:	1b60      	subs	r0, r4, r5
    9850:	e008      	b.n	9864 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9852:	7823      	ldrb	r3, [r4, #0]
    9854:	2b00      	cmp	r3, #0
    9856:	d0fa      	beq.n	984e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    9858:	f814 0b01 	ldrb.w	r0, [r4], #1
    985c:	4641      	mov	r1, r8
    985e:	47b8      	blx	r7
		if (rc < 0) {
    9860:	2800      	cmp	r0, #0
    9862:	daf1      	bge.n	9848 <outs+0xe>
}
    9864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009868 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9868:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    986a:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    986c:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    986e:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    9870:	1baf      	subs	r7, r5, r6
{
    9872:	4604      	mov	r4, r0
    9874:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    9876:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    9878:	bf98      	it	ls
    987a:	1aff      	subls	r7, r7, r3
    987c:	eba5 0000 	sub.w	r0, r5, r0
{
    9880:	4694      	mov	ip, r2
		base += buf->size;
    9882:	bf98      	it	ls
    9884:	18f6      	addls	r6, r6, r3
    9886:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    9888:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    988a:	6823      	ldr	r3, [r4, #0]
    988c:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    988e:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    9890:	442b      	add	r3, r5
	size = MIN(size, free_space);
    9892:	bf28      	it	cs
    9894:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    9896:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    9898:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    989a:	4290      	cmp	r0, r2
    989c:	bf28      	it	cs
    989e:	4610      	movcs	r0, r2
	buf->put_head += size;
    98a0:	4403      	add	r3, r0
    98a2:	6063      	str	r3, [r4, #4]

	return size;
}
    98a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000098a6 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    98a6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    98aa:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    98ac:	428a      	cmp	r2, r1
    98ae:	d30c      	bcc.n	98ca <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    98b0:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    98b2:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    98b4:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    98b6:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    98ba:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    98bc:	428a      	cmp	r2, r1
    98be:	d901      	bls.n	98c4 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    98c0:	2000      	movs	r0, #0
    98c2:	4770      	bx	lr
		buf->put_base += buf->size;
    98c4:	4413      	add	r3, r2
    98c6:	60c3      	str	r3, [r0, #12]
    98c8:	e7fa      	b.n	98c0 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    98ca:	f06f 0015 	mvn.w	r0, #21
}
    98ce:	4770      	bx	lr

000098d0 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    98d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    98d4:	4680      	mov	r8, r0
    98d6:	460e      	mov	r6, r1
    98d8:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    98da:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    98dc:	462a      	mov	r2, r5
    98de:	a901      	add	r1, sp, #4
    98e0:	4640      	mov	r0, r8
    98e2:	f7ff ffc1 	bl	9868 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    98e6:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    98e8:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    98ea:	4602      	mov	r2, r0
    98ec:	9801      	ldr	r0, [sp, #4]
    98ee:	f000 fa08 	bl	9d02 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    98f2:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    98f4:	4427      	add	r7, r4
		data += partial_size;
    98f6:	4426      	add	r6, r4
	} while (size && partial_size);
    98f8:	d001      	beq.n	98fe <ring_buf_put+0x2e>
    98fa:	2c00      	cmp	r4, #0
    98fc:	d1ee      	bne.n	98dc <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    98fe:	4639      	mov	r1, r7
    9900:	4640      	mov	r0, r8
    9902:	f7ff ffd0 	bl	98a6 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    9906:	4638      	mov	r0, r7
    9908:	b002      	add	sp, #8
    990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000990e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    990e:	b5f0      	push	{r4, r5, r6, r7, lr}
    9910:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    9912:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    9914:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    9916:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    9918:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    991a:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    991c:	42b8      	cmp	r0, r7
{
    991e:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    9920:	bf98      	it	ls
    9922:	1836      	addls	r6, r6, r0
    9924:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    9928:	6823      	ldr	r3, [r4, #0]
    992a:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    992e:	bf98      	it	ls
    9930:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    9932:	442b      	add	r3, r5
	size = MIN(size, available_size);
    9934:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    9936:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    993a:	bf28      	it	cs
    993c:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    993e:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    9940:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    9942:	4290      	cmp	r0, r2
    9944:	bf28      	it	cs
    9946:	4610      	movcs	r0, r2
	buf->get_head += size;
    9948:	4403      	add	r3, r0
    994a:	6123      	str	r3, [r4, #16]

	return size;
}
    994c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000994e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    994e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    9952:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    9954:	428a      	cmp	r2, r1
    9956:	d30c      	bcc.n	9972 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    9958:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    995a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    995e:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    9962:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    9964:	428a      	cmp	r2, r1
    9966:	d901      	bls.n	996c <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    9968:	2000      	movs	r0, #0
    996a:	4770      	bx	lr
		buf->get_base += buf->size;
    996c:	4413      	add	r3, r2
    996e:	6183      	str	r3, [r0, #24]
    9970:	e7fa      	b.n	9968 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    9972:	f06f 0015 	mvn.w	r0, #21
}
    9976:	4770      	bx	lr

00009978 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    9978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    997c:	4680      	mov	r8, r0
    997e:	460d      	mov	r5, r1
    9980:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    9982:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    9984:	4632      	mov	r2, r6
    9986:	a901      	add	r1, sp, #4
    9988:	4640      	mov	r0, r8
    998a:	f7ff ffc0 	bl	990e <ring_buf_get_claim>
    998e:	4604      	mov	r4, r0
		if (data) {
    9990:	b12d      	cbz	r5, 999e <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    9992:	4602      	mov	r2, r0
    9994:	9901      	ldr	r1, [sp, #4]
    9996:	4628      	mov	r0, r5
    9998:	f000 f9b3 	bl	9d02 <memcpy>
			data += partial_size;
    999c:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    999e:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    99a0:	4427      	add	r7, r4
	} while (size && partial_size);
    99a2:	d001      	beq.n	99a8 <ring_buf_get+0x30>
    99a4:	2c00      	cmp	r4, #0
    99a6:	d1ed      	bne.n	9984 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    99a8:	4639      	mov	r1, r7
    99aa:	4640      	mov	r0, r8
    99ac:	f7ff ffcf 	bl	994e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    99b0:	4638      	mov	r0, r7
    99b2:	b002      	add	sp, #8
    99b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000099b8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    99b8:	4770      	bx	lr

000099ba <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    99ba:	f010 0f70 	tst.w	r0, #112	; 0x70
    99be:	d108      	bne.n	99d2 <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
    99c0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    99c4:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    99c8:	bf18      	it	ne
    99ca:	3310      	addne	r3, #16
    99cc:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    99ce:	4098      	lsls	r0, r3
    99d0:	4770      	bx	lr
	uint32_t ep_bm = 0;
    99d2:	2000      	movs	r0, #0
}
    99d4:	4770      	bx	lr

000099d6 <usb_write>:
{
    99d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    99da:	4606      	mov	r6, r0
    99dc:	460f      	mov	r7, r1
    99de:	4690      	mov	r8, r2
    99e0:	4699      	mov	r9, r3
    99e2:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    99e4:	464b      	mov	r3, r9
    99e6:	4642      	mov	r2, r8
    99e8:	4639      	mov	r1, r7
    99ea:	4630      	mov	r0, r6
    99ec:	f7fa ff40 	bl	4870 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    99f0:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    99f4:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    99f6:	d103      	bne.n	9a00 <usb_write+0x2a>
	z_impl_k_yield();
    99f8:	f7fe fefc 	bl	87f4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    99fc:	3d01      	subs	r5, #1
    99fe:	d1f1      	bne.n	99e4 <usb_write+0xe>
}
    9a00:	4620      	mov	r0, r4
    9a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009a06 <usb_get_dev_data_by_cfg>:
	return list->head;
    9a06:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a08:	b140      	cbz	r0, 9a1c <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    9a0a:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    9a0e:	685b      	ldr	r3, [r3, #4]
    9a10:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a12:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    9a16:	d001      	beq.n	9a1c <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    9a18:	6840      	ldr	r0, [r0, #4]
    9a1a:	e7f5      	b.n	9a08 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    9a1c:	4770      	bx	lr

00009a1e <usb_get_dev_data_by_iface>:
	return list->head;
    9a1e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a20:	b150      	cbz	r0, 9a38 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9a22:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    9a26:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    9a28:	685b      	ldr	r3, [r3, #4]
    9a2a:	789b      	ldrb	r3, [r3, #2]
    9a2c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a2e:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    9a32:	d001      	beq.n	9a38 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    9a34:	6840      	ldr	r0, [r0, #4]
    9a36:	e7f3      	b.n	9a20 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    9a38:	4770      	bx	lr

00009a3a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    9a3a:	b530      	push	{r4, r5, lr}
	return list->head;
    9a3c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a3e:	b188      	cbz	r0, 9a64 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9a40:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9a44:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    9a46:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9a48:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9a4a:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9a4c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    9a4e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9a50:	b2dc      	uxtb	r4, r3
    9a52:	42a5      	cmp	r5, r4
    9a54:	d801      	bhi.n	9a5a <usb_get_dev_data_by_ep+0x20>
	return node->next;
    9a56:	6840      	ldr	r0, [r0, #4]
    9a58:	e7f1      	b.n	9a3e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    9a5a:	3301      	adds	r3, #1
    9a5c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    9a60:	428c      	cmp	r4, r1
    9a62:	d1f5      	bne.n	9a50 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    9a64:	bd30      	pop	{r4, r5, pc}

00009a66 <usb_transfer_is_busy>:
{
    9a66:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    9a68:	f7f9 f938 	bl	2cdc <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    9a6c:	b128      	cbz	r0, 9a7a <usb_transfer_is_busy+0x14>
    9a6e:	6840      	ldr	r0, [r0, #4]
    9a70:	f110 0f10 	cmn.w	r0, #16
    9a74:	bf14      	ite	ne
    9a76:	2000      	movne	r0, #0
    9a78:	2001      	moveq	r0, #1
}
    9a7a:	bd08      	pop	{r3, pc}

00009a7c <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    9a7c:	1c4b      	adds	r3, r1, #1
    9a7e:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    9a80:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    9a82:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    9a84:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    9a88:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    9a8a:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    9a8e:	4770      	bx	lr

00009a90 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    9a90:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    9a94:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    9a98:	4718      	bx	r3

00009a9a <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9a9a:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    9a9c:	2200      	movs	r2, #0
    9a9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    9aa2:	4770      	bx	lr

00009aa4 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9aa4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    9aa6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    9aaa:	b108      	cbz	r0, 9ab0 <cdc_acm_irq_tx_ready+0xc>
    9aac:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    9ab0:	4770      	bx	lr

00009ab2 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9ab2:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    9ab4:	2200      	movs	r2, #0
    9ab6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    9aba:	4770      	bx	lr

00009abc <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    9abc:	6903      	ldr	r3, [r0, #16]
}
    9abe:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    9ac2:	4770      	bx	lr

00009ac4 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9ac4:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    9ac6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    9aca:	b112      	cbz	r2, 9ad2 <cdc_acm_irq_is_pending+0xe>
    9acc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    9ad0:	b92a      	cbnz	r2, 9ade <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    9ad2:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    9ad6:	b118      	cbz	r0, 9ae0 <cdc_acm_irq_is_pending+0x1c>
    9ad8:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    9adc:	4770      	bx	lr
		return 1;
    9ade:	2001      	movs	r0, #1
}
    9ae0:	4770      	bx	lr

00009ae2 <cdc_acm_irq_update>:
}
    9ae2:	2001      	movs	r0, #1
    9ae4:	4770      	bx	lr

00009ae6 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9ae6:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    9ae8:	e9c3 1200 	strd	r1, r2, [r3]
}
    9aec:	4770      	bx	lr

00009aee <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    9aee:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9af0:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    9af2:	d008      	beq.n	9b06 <cdc_acm_line_ctrl_get+0x18>
    9af4:	2904      	cmp	r1, #4
    9af6:	d00b      	beq.n	9b10 <cdc_acm_line_ctrl_get+0x22>
    9af8:	2901      	cmp	r1, #1
    9afa:	d10e      	bne.n	9b1a <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    9afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    9b00:	6013      	str	r3, [r2, #0]
		return 0;
    9b02:	2000      	movs	r0, #0
    9b04:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    9b06:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    9b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    9b0e:	e7f7      	b.n	9b00 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    9b10:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    9b14:	f003 0301 	and.w	r3, r3, #1
		return 0;
    9b18:	e7f2      	b.n	9b00 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    9b1a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    9b1e:	4770      	bx	lr

00009b20 <cdc_acm_configure>:
}
    9b20:	2000      	movs	r0, #0
    9b22:	4770      	bx	lr

00009b24 <cdc_acm_config_get>:
{
    9b24:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9b26:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    9b28:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    9b2c:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    9b2e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    9b32:	b16a      	cbz	r2, 9b50 <cdc_acm_config_get+0x2c>
    9b34:	2a01      	cmp	r2, #1
    9b36:	bf0c      	ite	eq
    9b38:	2202      	moveq	r2, #2
    9b3a:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    9b3c:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    9b3e:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    9b42:	1e50      	subs	r0, r2, #1
    9b44:	2803      	cmp	r0, #3
    9b46:	d805      	bhi.n	9b54 <cdc_acm_config_get+0x30>
    9b48:	e8df f000 	tbb	[pc, r0]
    9b4c:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    9b50:	2201      	movs	r2, #1
    9b52:	e7f3      	b.n	9b3c <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    9b54:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    9b56:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    9b58:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    9b5c:	2b06      	cmp	r3, #6
    9b5e:	d009      	beq.n	9b74 <cdc_acm_config_get+0x50>
    9b60:	2b07      	cmp	r3, #7
    9b62:	d009      	beq.n	9b78 <cdc_acm_config_get+0x54>
    9b64:	2b05      	cmp	r3, #5
    9b66:	bf0c      	ite	eq
    9b68:	2300      	moveq	r3, #0
    9b6a:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    9b6c:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    9b6e:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    9b70:	71c8      	strb	r0, [r1, #7]
}
    9b72:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    9b74:	2301      	movs	r3, #1
    9b76:	e7f9      	b.n	9b6c <cdc_acm_config_get+0x48>
    9b78:	2302      	movs	r3, #2
    9b7a:	e7f7      	b.n	9b6c <cdc_acm_config_get+0x48>

00009b7c <cdc_acm_line_ctrl_set>:
{
    9b7c:	b508      	push	{r3, lr}
	switch (ctrl) {
    9b7e:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9b80:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    9b82:	d03f      	beq.n	9c04 <cdc_acm_line_ctrl_set+0x88>
    9b84:	d813      	bhi.n	9bae <cdc_acm_line_ctrl_set+0x32>
    9b86:	2910      	cmp	r1, #16
    9b88:	d032      	beq.n	9bf0 <cdc_acm_line_ctrl_set+0x74>
    9b8a:	d806      	bhi.n	9b9a <cdc_acm_line_ctrl_set+0x1e>
    9b8c:	2901      	cmp	r1, #1
    9b8e:	d01e      	beq.n	9bce <cdc_acm_line_ctrl_set+0x52>
    9b90:	2908      	cmp	r1, #8
    9b92:	d020      	beq.n	9bd6 <cdc_acm_line_ctrl_set+0x5a>
    9b94:	f06f 0012 	mvn.w	r0, #18
}
    9b98:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    9b9a:	2920      	cmp	r1, #32
    9b9c:	d1fa      	bne.n	9b94 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    9b9e:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9ba2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    9ba6:	b352      	cbz	r2, 9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    9ba8:	f041 0104 	orr.w	r1, r1, #4
    9bac:	e027      	b.n	9bfe <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    9bae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9bb2:	d030      	beq.n	9c16 <cdc_acm_line_ctrl_set+0x9a>
    9bb4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    9bb8:	d036      	beq.n	9c28 <cdc_acm_line_ctrl_set+0xac>
    9bba:	2980      	cmp	r1, #128	; 0x80
    9bbc:	d1ea      	bne.n	9b94 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    9bbe:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9bc2:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    9bc6:	b1d2      	cbz	r2, 9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    9bc8:	f041 0110 	orr.w	r1, r1, #16
    9bcc:	e017      	b.n	9bfe <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    9bce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    9bd2:	2000      	movs	r0, #0
    9bd4:	e7e0      	b.n	9b98 <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    9bd6:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9bda:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    9bde:	b10a      	cbz	r2, 9be4 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    9be0:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    9be4:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    9be8:	2101      	movs	r1, #1
    9bea:	f7f9 fb45 	bl	3278 <cdc_acm_send_notification.isra.0>
		return 0;
    9bee:	e7f0      	b.n	9bd2 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    9bf0:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9bf4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    9bf8:	b10a      	cbz	r2, 9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    9bfa:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    9bfe:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    9c02:	e7f2      	b.n	9bea <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    9c04:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9c08:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    9c0c:	2a00      	cmp	r2, #0
    9c0e:	d0f6      	beq.n	9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    9c10:	f041 0108 	orr.w	r1, r1, #8
    9c14:	e7f3      	b.n	9bfe <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    9c16:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9c1a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    9c1e:	2a00      	cmp	r2, #0
    9c20:	d0ed      	beq.n	9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    9c22:	f041 0120 	orr.w	r1, r1, #32
    9c26:	e7ea      	b.n	9bfe <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    9c28:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9c2c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    9c30:	2a00      	cmp	r2, #0
    9c32:	d0e4      	beq.n	9bfe <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    9c34:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9c38:	e7e1      	b.n	9bfe <cdc_acm_line_ctrl_set+0x82>

00009c3a <cdc_acm_fifo_read>:
{
    9c3a:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9c3c:	6904      	ldr	r4, [r0, #16]
{
    9c3e:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    9c40:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    9c44:	f7ff fe98 	bl	9978 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    9c48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    9c4c:	691a      	ldr	r2, [r3, #16]
    9c4e:	6899      	ldr	r1, [r3, #8]
    9c50:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    9c52:	bf04      	itt	eq
    9c54:	2200      	moveq	r2, #0
    9c56:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    9c5a:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    9c5e:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    9c60:	b19a      	cbz	r2, 9c8a <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    9c62:	685a      	ldr	r2, [r3, #4]
    9c64:	6959      	ldr	r1, [r3, #20]
    9c66:	69db      	ldr	r3, [r3, #28]
    9c68:	1a52      	subs	r2, r2, r1
    9c6a:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    9c6c:	2b3f      	cmp	r3, #63	; 0x3f
    9c6e:	d90c      	bls.n	9c8a <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    9c70:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    9c74:	b133      	cbz	r3, 9c84 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    9c76:	686b      	ldr	r3, [r5, #4]
    9c78:	6a1b      	ldr	r3, [r3, #32]
    9c7a:	4622      	mov	r2, r4
    9c7c:	7b18      	ldrb	r0, [r3, #12]
    9c7e:	2100      	movs	r1, #0
    9c80:	f7f9 fb1c 	bl	32bc <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    9c84:	2300      	movs	r3, #0
    9c86:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    9c8a:	4630      	mov	r0, r6
    9c8c:	bd70      	pop	{r4, r5, r6, pc}

00009c8e <cdc_acm_poll_in>:
{
    9c8e:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    9c90:	2201      	movs	r2, #1
    9c92:	f7ff ffd2 	bl	9c3a <cdc_acm_fifo_read>
}
    9c96:	3801      	subs	r0, #1
    9c98:	bf18      	it	ne
    9c9a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9c9e:	bd08      	pop	{r3, pc}

00009ca0 <abort_function>:
{
    9ca0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9ca2:	2000      	movs	r0, #0
    9ca4:	f7f8 f972 	bl	1f8c <sys_reboot>

00009ca8 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9ca8:	f000 bc07 	b.w	a4ba <z_fatal_error>

00009cac <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9cac:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9cae:	6800      	ldr	r0, [r0, #0]
    9cb0:	f000 bc03 	b.w	a4ba <z_fatal_error>

00009cb4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9cb4:	2100      	movs	r1, #0
    9cb6:	2001      	movs	r0, #1
    9cb8:	f7ff bff6 	b.w	9ca8 <z_arm_fatal_error>

00009cbc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9cbc:	b508      	push	{r3, lr}
	handler();
    9cbe:	f7f9 fce5 	bl	368c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9cc6:	f7f9 bdbd 	b.w	3844 <z_arm_exc_exit>

00009cca <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9cca:	4603      	mov	r3, r0
	size_t n = 0;
    9ccc:	2000      	movs	r0, #0

	while (*s != '\0') {
    9cce:	5c1a      	ldrb	r2, [r3, r0]
    9cd0:	b902      	cbnz	r2, 9cd4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9cd2:	4770      	bx	lr
		n++;
    9cd4:	3001      	adds	r0, #1
    9cd6:	e7fa      	b.n	9cce <strlen+0x4>

00009cd8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9cd8:	4603      	mov	r3, r0
	size_t n = 0;
    9cda:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9cdc:	5c1a      	ldrb	r2, [r3, r0]
    9cde:	b10a      	cbz	r2, 9ce4 <strnlen+0xc>
    9ce0:	4288      	cmp	r0, r1
    9ce2:	d100      	bne.n	9ce6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    9ce4:	4770      	bx	lr
		n++;
    9ce6:	3001      	adds	r0, #1
    9ce8:	e7f8      	b.n	9cdc <strnlen+0x4>

00009cea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9cea:	1e43      	subs	r3, r0, #1
    9cec:	3901      	subs	r1, #1
    9cee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9cf2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9cf6:	4282      	cmp	r2, r0
    9cf8:	d101      	bne.n	9cfe <strcmp+0x14>
    9cfa:	2a00      	cmp	r2, #0
    9cfc:	d1f7      	bne.n	9cee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9cfe:	1a10      	subs	r0, r2, r0
    9d00:	4770      	bx	lr

00009d02 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9d02:	b510      	push	{r4, lr}
    9d04:	1e43      	subs	r3, r0, #1
    9d06:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9d08:	4291      	cmp	r1, r2
    9d0a:	d100      	bne.n	9d0e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9d0c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
    9d12:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9d16:	e7f7      	b.n	9d08 <memcpy+0x6>

00009d18 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9d18:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9d1a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9d1c:	4603      	mov	r3, r0
	while (n > 0) {
    9d1e:	4293      	cmp	r3, r2
    9d20:	d100      	bne.n	9d24 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9d22:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9d24:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9d28:	e7f9      	b.n	9d1e <memset+0x6>

00009d2a <_stdout_hook_default>:
}
    9d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d2e:	4770      	bx	lr

00009d30 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9d30:	2806      	cmp	r0, #6
    9d32:	d108      	bne.n	9d46 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d38:	2201      	movs	r2, #1
    9d3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9d3e:	f3bf 8f4f 	dsb	sy
        __WFE();
    9d42:	bf20      	wfe
    while (true)
    9d44:	e7fd      	b.n	9d42 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9d46:	4770      	bx	lr

00009d48 <pm_state_exit_post_ops>:
    9d48:	2300      	movs	r3, #0
    9d4a:	f383 8811 	msr	BASEPRI, r3
    9d4e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9d52:	4770      	bx	lr

00009d54 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    9d54:	7081      	strb	r1, [r0, #2]
}
    9d56:	4770      	bx	lr

00009d58 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    9d58:	2000      	movs	r0, #0
    9d5a:	4770      	bx	lr

00009d5c <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    9d5c:	6903      	ldr	r3, [r0, #16]
    9d5e:	6842      	ldr	r2, [r0, #4]
    9d60:	685b      	ldr	r3, [r3, #4]
    9d62:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    9d64:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    9d66:	f3c3 2307 	ubfx	r3, r3, #8, #8
    9d6a:	7453      	strb	r3, [r2, #17]
}
    9d6c:	2000      	movs	r0, #0
    9d6e:	4770      	bx	lr

00009d70 <hid_int_ep_write>:
{
    9d70:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
    9d72:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    9d74:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    9d76:	7b05      	ldrb	r5, [r0, #12]
    9d78:	b135      	cbz	r5, 9d88 <hid_int_ep_write+0x18>
    9d7a:	7b40      	ldrb	r0, [r0, #13]
    9d7c:	b920      	cbnz	r0, 9d88 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    9d7e:	6a20      	ldr	r0, [r4, #32]
}
    9d80:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    9d82:	7900      	ldrb	r0, [r0, #4]
    9d84:	f7ff be27 	b.w	99d6 <usb_write>
}
    9d88:	f06f 000a 	mvn.w	r0, #10
    9d8c:	bc30      	pop	{r4, r5}
    9d8e:	4770      	bx	lr

00009d90 <ep_ctx_reset>:
{
    9d90:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9d92:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    9d94:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    9d98:	2300      	movs	r3, #0
    9d9a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    9d9c:	7f83      	ldrb	r3, [r0, #30]
{
    9d9e:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    9da0:	b113      	cbz	r3, 9da8 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    9da2:	7a40      	ldrb	r0, [r0, #9]
    9da4:	f000 fb6e 	bl	a484 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    9da8:	2301      	movs	r3, #1
    9daa:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    9dac:	2300      	movs	r3, #0
    9dae:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    9db0:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    9db2:	77a3      	strb	r3, [r4, #30]
}
    9db4:	bd10      	pop	{r4, pc}

00009db6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    9db6:	f7fe b853 	b.w	7e60 <z_impl_k_mutex_lock>

00009dba <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9dba:	f7fe b8cb 	b.w	7f54 <z_impl_k_mutex_unlock>

00009dbe <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    9dbe:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    9dc0:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    9dc2:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    9dc6:	b921      	cbnz	r1, 9dd2 <usb_dc_ep_check_cap+0x14>
    9dc8:	3a00      	subs	r2, #0
    9dca:	bf18      	it	ne
    9dcc:	2201      	movne	r2, #1
    9dce:	4250      	negs	r0, r2
    9dd0:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    9dd2:	2a08      	cmp	r2, #8
    9dd4:	d806      	bhi.n	9de4 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    9dd6:	2901      	cmp	r1, #1
    9dd8:	d107      	bne.n	9dea <usb_dc_ep_check_cap+0x2c>
    9dda:	f083 0008 	eor.w	r0, r3, #8
    9dde:	f340 00c0 	sbfx	r0, r0, #3, #1
    9de2:	4770      	bx	lr
		return -1;
    9de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9de8:	4770      	bx	lr
	return 0;
    9dea:	2000      	movs	r0, #0
}
    9dec:	4770      	bx	lr

00009dee <usb_dc_ep_disable>:
{
    9dee:	b538      	push	{r3, r4, r5, lr}
    9df0:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    9df2:	f7fa f8d7 	bl	3fa4 <endpoint_ctx>
	if (!ep_ctx) {
    9df6:	4605      	mov	r5, r0
    9df8:	b160      	cbz	r0, 9e14 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    9dfa:	7a03      	ldrb	r3, [r0, #8]
    9dfc:	b16b      	cbz	r3, 9e1a <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9dfe:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    9e00:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9e02:	f7fd fcfb 	bl	77fc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    9e06:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    9e08:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    9e0a:	f7ff ffc1 	bl	9d90 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    9e0e:	722c      	strb	r4, [r5, #8]
	return 0;
    9e10:	4620      	mov	r0, r4
}
    9e12:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9e14:	f06f 0015 	mvn.w	r0, #21
    9e18:	e7fb      	b.n	9e12 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    9e1a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9e1e:	e7f8      	b.n	9e12 <usb_dc_ep_disable+0x24>

00009e20 <usb_dc_ep_read>:
{
    9e20:	b570      	push	{r4, r5, r6, lr}
    9e22:	4604      	mov	r4, r0
    9e24:	460e      	mov	r6, r1
    9e26:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    9e28:	f7fa fd9e 	bl	4968 <usb_dc_ep_read_wait>
	if (ret) {
    9e2c:	b930      	cbnz	r0, 9e3c <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    9e2e:	b906      	cbnz	r6, 9e32 <usb_dc_ep_read+0x12>
    9e30:	b125      	cbz	r5, 9e3c <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    9e32:	4620      	mov	r0, r4
}
    9e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    9e38:	f7fa bdde 	b.w	49f8 <usb_dc_ep_read_continue>
}
    9e3c:	bd70      	pop	{r4, r5, r6, pc}

00009e3e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9e3e:	6903      	ldr	r3, [r0, #16]
    9e40:	b2c9      	uxtb	r1, r1
    9e42:	220c      	movs	r2, #12
    9e44:	fb01 3302 	mla	r3, r1, r2, r3
    9e48:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9e4a:	f000 0007 	and.w	r0, r0, #7
    9e4e:	4770      	bx	lr

00009e50 <set_on_state>:
	__asm__ volatile(
    9e50:	f04f 0320 	mov.w	r3, #32
    9e54:	f3ef 8211 	mrs	r2, BASEPRI
    9e58:	f383 8812 	msr	BASEPRI_MAX, r3
    9e5c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9e60:	6803      	ldr	r3, [r0, #0]
    9e62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9e66:	f043 0302 	orr.w	r3, r3, #2
    9e6a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9e6c:	f382 8811 	msr	BASEPRI, r2
    9e70:	f3bf 8f6f 	isb	sy
}
    9e74:	4770      	bx	lr

00009e76 <stop>:
{
    9e76:	b570      	push	{r4, r5, r6, lr}
    9e78:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    9e7a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    9e7c:	f04f 0420 	mov.w	r4, #32
    9e80:	f3ef 8511 	mrs	r5, BASEPRI
    9e84:	f384 8812 	msr	BASEPRI_MAX, r4
    9e88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9e8c:	260c      	movs	r6, #12
    9e8e:	fb06 3401 	mla	r4, r6, r1, r3
    9e92:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9e94:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    9e98:	d008      	beq.n	9eac <stop+0x36>
    9e9a:	42a2      	cmp	r2, r4
    9e9c:	d006      	beq.n	9eac <stop+0x36>
	__asm__ volatile(
    9e9e:	f385 8811 	msr	BASEPRI, r5
    9ea2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    9ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9eaa:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    9eac:	fb06 3301 	mla	r3, r6, r1, r3
    9eb0:	2201      	movs	r2, #1
    9eb2:	641a      	str	r2, [r3, #64]	; 0x40
    9eb4:	f385 8811 	msr	BASEPRI, r5
    9eb8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    9ebc:	6843      	ldr	r3, [r0, #4]
    9ebe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9ec2:	685b      	ldr	r3, [r3, #4]
    9ec4:	4798      	blx	r3
	return 0;
    9ec6:	2000      	movs	r0, #0
    9ec8:	e7ef      	b.n	9eaa <stop+0x34>

00009eca <api_stop>:
	return stop(dev, subsys, CTX_API);
    9eca:	2280      	movs	r2, #128	; 0x80
    9ecc:	f7ff bfd3 	b.w	9e76 <stop>

00009ed0 <async_start>:
{
    9ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ed2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9ed4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    9ed6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    9ed8:	f04f 0520 	mov.w	r5, #32
    9edc:	f3ef 8611 	mrs	r6, BASEPRI
    9ee0:	f385 8812 	msr	BASEPRI_MAX, r5
    9ee4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9ee8:	250c      	movs	r5, #12
    9eea:	fb05 4401 	mla	r4, r5, r1, r4
    9eee:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9ef0:	f005 0c07 	and.w	ip, r5, #7
    9ef4:	f1bc 0f01 	cmp.w	ip, #1
    9ef8:	d10c      	bne.n	9f14 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9efa:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    9efc:	f386 8811 	msr	BASEPRI, r6
    9f00:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    9f04:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    9f08:	6843      	ldr	r3, [r0, #4]
    9f0a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    9f0e:	4798      	blx	r3
	return 0;
    9f10:	2000      	movs	r0, #0
}
    9f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9f14:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9f18:	42af      	cmp	r7, r5
    9f1a:	f386 8811 	msr	BASEPRI, r6
    9f1e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    9f22:	bf0c      	ite	eq
    9f24:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9f28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9f2c:	e7f1      	b.n	9f12 <async_start+0x42>

00009f2e <api_start>:
{
    9f2e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9f30:	2480      	movs	r4, #128	; 0x80
    9f32:	9400      	str	r4, [sp, #0]
    9f34:	f7ff ffcc 	bl	9ed0 <async_start>
}
    9f38:	b002      	add	sp, #8
    9f3a:	bd10      	pop	{r4, pc}

00009f3c <onoff_started_callback>:
{
    9f3c:	b410      	push	{r4}
	return &data->mgr[type];
    9f3e:	6900      	ldr	r0, [r0, #16]
    9f40:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9f42:	241c      	movs	r4, #28
    9f44:	fb03 0004 	mla	r0, r3, r4, r0
    9f48:	2100      	movs	r1, #0
}
    9f4a:	bc10      	pop	{r4}
	notify(mgr, 0);
    9f4c:	4710      	bx	r2

00009f4e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9f4e:	2000      	movs	r0, #0
    9f50:	f000 b90a 	b.w	a168 <nrfx_clock_start>

00009f54 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9f54:	2000      	movs	r0, #0
    9f56:	f000 b943 	b.w	a1e0 <nrfx_clock_stop>

00009f5a <blocking_start_callback>:
{
    9f5a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9f5c:	f7fe b86a 	b.w	8034 <z_impl_k_sem_give>

00009f60 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9f60:	6843      	ldr	r3, [r0, #4]
    9f62:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9f64:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9f68:	600b      	str	r3, [r1, #0]
}
    9f6a:	2000      	movs	r0, #0
    9f6c:	4770      	bx	lr

00009f6e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9f6e:	6843      	ldr	r3, [r0, #4]
    9f70:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    9f72:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    9f76:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    9f7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9f7e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    9f82:	2000      	movs	r0, #0
    9f84:	4770      	bx	lr

00009f86 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9f86:	6843      	ldr	r3, [r0, #4]
    9f88:	685b      	ldr	r3, [r3, #4]
}
    9f8a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9f8c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9f90:	4770      	bx	lr

00009f92 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9f92:	6843      	ldr	r3, [r0, #4]
    9f94:	685b      	ldr	r3, [r3, #4]
}
    9f96:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9f98:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9f9c:	4770      	bx	lr

00009f9e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9f9e:	6843      	ldr	r3, [r0, #4]
    9fa0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9fa2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    9fa6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    9faa:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    9fac:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9fb0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    9fb4:	2000      	movs	r0, #0
    9fb6:	4770      	bx	lr

00009fb8 <gpio_nrfx_manage_callback>:
{
    9fb8:	b510      	push	{r4, lr}
	return port->data;
    9fba:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9fbc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    9fbe:	b1f8      	cbz	r0, a000 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9fc0:	4288      	cmp	r0, r1
    9fc2:	d119      	bne.n	9ff8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    9fc4:	689c      	ldr	r4, [r3, #8]
	return node->next;
    9fc6:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    9fc8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9fca:	42a1      	cmp	r1, r4
    9fcc:	d100      	bne.n	9fd0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9fce:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9fd0:	2000      	movs	r0, #0
    9fd2:	6008      	str	r0, [r1, #0]
	if (set) {
    9fd4:	b12a      	cbz	r2, 9fe2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    9fd6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    9fd8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    9fda:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    9fdc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9fde:	b902      	cbnz	r2, 9fe2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    9fe0:	6099      	str	r1, [r3, #8]
	return 0;
    9fe2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9fe4:	e010      	b.n	a008 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9fe6:	4281      	cmp	r1, r0
    9fe8:	d106      	bne.n	9ff8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    9fea:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    9fec:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9fee:	6898      	ldr	r0, [r3, #8]
    9ff0:	4281      	cmp	r1, r0
    9ff2:	d1ed      	bne.n	9fd0 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9ff4:	609c      	str	r4, [r3, #8]
}
    9ff6:	e7eb      	b.n	9fd0 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    9ff8:	4604      	mov	r4, r0
    9ffa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d1f2      	bne.n	9fe6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    a000:	2a00      	cmp	r2, #0
    a002:	d1e8      	bne.n	9fd6 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    a004:	f06f 0015 	mvn.w	r0, #21
}
    a008:	bd10      	pop	{r4, pc}

0000a00a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    a00a:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    a00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    a010:	2908      	cmp	r1, #8
    a012:	6e13      	ldr	r3, [r2, #96]	; 0x60
    a014:	6e52      	ldr	r2, [r2, #100]	; 0x64
    a016:	bf28      	it	cs
    a018:	2108      	movcs	r1, #8
    a01a:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    a01c:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    a01e:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    a020:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    a022:	460a      	mov	r2, r1
    a024:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    a026:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    a028:	f7ff fe6b 	bl	9d02 <memcpy>

	return length;
}
    a02c:	4620      	mov	r0, r4
    a02e:	b002      	add	sp, #8
    a030:	bd10      	pop	{r4, pc}

0000a032 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
    a032:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    a034:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    a036:	d405      	bmi.n	a044 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
    a038:	f3c1 0142 	ubfx	r1, r1, #1, #3
    a03c:	2901      	cmp	r1, #1
    a03e:	d004      	beq.n	a04a <i2c_nrfx_twim_configure+0x18>
    a040:	2902      	cmp	r1, #2
    a042:	d009      	beq.n	a058 <i2c_nrfx_twim_configure+0x26>
    a044:	f06f 0015 	mvn.w	r0, #21
}
    a048:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    a04a:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    a04c:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    a050:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    a054:	2000      	movs	r0, #0
    a056:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    a058:	681b      	ldr	r3, [r3, #0]
    a05a:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    a05e:	e7f7      	b.n	a050 <i2c_nrfx_twim_configure+0x1e>

0000a060 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    a060:	2200      	movs	r2, #0
    a062:	2101      	movs	r1, #1
    a064:	2003      	movs	r0, #3
    a066:	f7f9 baf9 	b.w	365c <z_arm_irq_priority_set>

0000a06a <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    a06a:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a06c:	2100      	movs	r1, #0
    a06e:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    a070:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    a072:	f000 f80a 	bl	a08a <pinctrl_lookup_state>
	if (ret < 0) {
    a076:	2800      	cmp	r0, #0
    a078:	db05      	blt.n	a086 <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a07a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a07c:	6822      	ldr	r2, [r4, #0]
    a07e:	7919      	ldrb	r1, [r3, #4]
    a080:	6818      	ldr	r0, [r3, #0]
    a082:	f7fb f927 	bl	52d4 <pinctrl_configure_pins>
}
    a086:	b002      	add	sp, #8
    a088:	bd10      	pop	{r4, pc}

0000a08a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a08a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    a08c:	6843      	ldr	r3, [r0, #4]
    a08e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    a090:	7a05      	ldrb	r5, [r0, #8]
    a092:	6844      	ldr	r4, [r0, #4]
    a094:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a098:	42a3      	cmp	r3, r4
    a09a:	d302      	bcc.n	a0a2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    a09c:	f06f 0001 	mvn.w	r0, #1
}
    a0a0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    a0a2:	795c      	ldrb	r4, [r3, #5]
    a0a4:	428c      	cmp	r4, r1
    a0a6:	d001      	beq.n	a0ac <pinctrl_lookup_state+0x22>
		(*state)++;
    a0a8:	3308      	adds	r3, #8
    a0aa:	e7f0      	b.n	a08e <pinctrl_lookup_state+0x4>
			return 0;
    a0ac:	2000      	movs	r0, #0
    a0ae:	e7f7      	b.n	a0a0 <pinctrl_lookup_state+0x16>

0000a0b0 <as5600_get>:
	return err;
}

static int as5600_get(const struct device *dev, enum sensor_channel chan,
			struct sensor_value *val)
{
    a0b0:	b510      	push	{r4, lr}
	struct as5600_dev_data *dev_data = dev->data;

	if (chan == SENSOR_CHAN_ROTATION) {
    a0b2:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    a0b4:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    a0b6:	d10c      	bne.n	a0d2 <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    a0b8:	8823      	ldrh	r3, [r4, #0]
    a0ba:	f44f 70b4 	mov.w	r0, #360	; 0x168
    a0be:	4343      	muls	r3, r0
    a0c0:	131b      	asrs	r3, r3, #12
    a0c2:	6013      	str	r3, [r2, #0]
							AS5600_PULSES_PER_REV;

		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    a0c4:	8821      	ldrh	r1, [r4, #0]
    a0c6:	4341      	muls	r1, r0
    a0c8:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    a0cc:	6053      	str	r3, [r2, #4]
					(val->val1 * AS5600_PULSES_PER_REV);
	} else {
		return -ENOTSUP;
	}

	return 0;
    a0ce:	2000      	movs	r0, #0
}
    a0d0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    a0d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a0d6:	e7fb      	b.n	a0d0 <as5600_get+0x20>

0000a0d8 <as5600_initialize>:

static int as5600_initialize(const struct device *dev)
{
	struct as5600_dev_data *const dev_data = dev->data;
    a0d8:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    a0da:	2000      	movs	r0, #0
    a0dc:	8018      	strh	r0, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);

	return 0;
}
    a0de:	4770      	bx	lr

0000a0e0 <as5600_fetch>:
{
    a0e0:	b530      	push	{r4, r5, lr}
    a0e2:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    a0e4:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    a0e6:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    a0e8:	6818      	ldr	r0, [r3, #0]
    a0ea:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    a0ec:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    a0ee:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    a0f0:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    a0f4:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    a0f8:	f8ad 2004 	strh.w	r2, [sp, #4]
    a0fc:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    a0fe:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    a102:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    a104:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    a106:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    a108:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    a10a:	2107      	movs	r1, #7
	msg[1].len = num_read;
    a10c:	2202      	movs	r2, #2
    a10e:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    a110:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    a114:	6881      	ldr	r1, [r0, #8]
    a116:	688d      	ldr	r5, [r1, #8]
    a118:	a902      	add	r1, sp, #8
    a11a:	47a8      	blx	r5
	if (!err) {
    a11c:	b918      	cbnz	r0, a126 <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    a11e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a122:	ba5b      	rev16	r3, r3
    a124:	8023      	strh	r3, [r4, #0]
}
    a126:	b009      	add	sp, #36	; 0x24
    a128:	bd30      	pop	{r4, r5, pc}

0000a12a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a12a:	4770      	bx	lr

0000a12c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a12c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    a130:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a132:	b29b      	uxth	r3, r3
    a134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a138:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a13c:	2200      	movs	r2, #0
    a13e:	601a      	str	r2, [r3, #0]
    a140:	681b      	ldr	r3, [r3, #0]
}
    a142:	4770      	bx	lr

0000a144 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a144:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    a146:	2000      	movs	r0, #0
    a148:	f7f9 fe50 	bl	3dec <sys_arch_reboot>

0000a14c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a14c:	f7fe be2c 	b.w	8da8 <nrf_cc3xx_platform_init_no_rng>

0000a150 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    a150:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a152:	f7f9 f947 	bl	33e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a156:	f7f9 fa1b 	bl	3590 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    a15a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    a15e:	f7fe be23 	b.w	8da8 <nrf_cc3xx_platform_init_no_rng>

0000a162 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    a162:	4700      	bx	r0

0000a164 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    a164:	f000 bc3d 	b.w	a9e2 <z_impl_k_busy_wait>

0000a168 <nrfx_clock_start>:
{
    a168:	b508      	push	{r3, lr}
    switch (domain)
    a16a:	b110      	cbz	r0, a172 <nrfx_clock_start+0xa>
    a16c:	2801      	cmp	r0, #1
    a16e:	d02c      	beq.n	a1ca <nrfx_clock_start+0x62>
}
    a170:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a176:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a17a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    a17e:	03c8      	lsls	r0, r1, #15
    a180:	d40b      	bmi.n	a19a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    a182:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    a186:	07d9      	lsls	r1, r3, #31
    a188:	d50f      	bpl.n	a1aa <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    a18a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    a18e:	079b      	lsls	r3, r3, #30
    a190:	d408      	bmi.n	a1a4 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    a192:	2302      	movs	r3, #2
    a194:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    a198:	e7ea      	b.n	a170 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a19a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    a19e:	2b01      	cmp	r3, #1
    a1a0:	d004      	beq.n	a1ac <nrfx_clock_start+0x44>
    a1a2:	b113      	cbz	r3, a1aa <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a1a4:	2000      	movs	r0, #0
    a1a6:	f7fb fcb7 	bl	5b18 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    a1aa:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    a1ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a1b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a1b4:	2300      	movs	r3, #0
    a1b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    a1ba:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    a1be:	2302      	movs	r3, #2
    a1c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a1c4:	2301      	movs	r3, #1
    a1c6:	6093      	str	r3, [r2, #8]
}
    a1c8:	e7d2      	b.n	a170 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a1ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a1ce:	2200      	movs	r2, #0
    a1d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    a1d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    a1d8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a1dc:	6018      	str	r0, [r3, #0]
}
    a1de:	e7c7      	b.n	a170 <nrfx_clock_start+0x8>

0000a1e0 <nrfx_clock_stop>:
    clock_stop(domain);
    a1e0:	f7fb bc9a 	b.w	5b18 <clock_stop>

0000a1e4 <nrf_gpio_reconfigure>:
{
    a1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a1e8:	a801      	add	r0, sp, #4
{
    a1ea:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    a1ee:	4616      	mov	r6, r2
    a1f0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a1f2:	f7fb fd4b 	bl	5c8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a1f6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a1f8:	f1b6 0c00 	subs.w	ip, r6, #0
    a1fc:	bf18      	it	ne
    a1fe:	f04f 0c01 	movne.w	ip, #1
    a202:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a206:	1e0b      	subs	r3, r1, #0
    a208:	bf18      	it	ne
    a20a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a20c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a20e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a212:	bf14      	ite	ne
    a214:	f04f 0c0c 	movne.w	ip, #12
    a218:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a21c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    a21e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    a222:	bf14      	ite	ne
    a224:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    a228:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a22c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    a22e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    a232:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    a236:	bf14      	ite	ne
    a238:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    a23c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    a240:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    a244:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a248:	b101      	cbz	r1, a24c <nrf_gpio_reconfigure+0x68>
    a24a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    a24c:	b10e      	cbz	r6, a252 <nrf_gpio_reconfigure+0x6e>
    a24e:	7836      	ldrb	r6, [r6, #0]
    a250:	0076      	lsls	r6, r6, #1
    a252:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    a254:	b10d      	cbz	r5, a25a <nrf_gpio_reconfigure+0x76>
    a256:	782d      	ldrb	r5, [r5, #0]
    a258:	00ad      	lsls	r5, r5, #2
    a25a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    a25c:	b10c      	cbz	r4, a262 <nrf_gpio_reconfigure+0x7e>
    a25e:	7824      	ldrb	r4, [r4, #0]
    a260:	0224      	lsls	r4, r4, #8
    a262:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    a264:	b10f      	cbz	r7, a26a <nrf_gpio_reconfigure+0x86>
    a266:	783f      	ldrb	r7, [r7, #0]
    a268:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    a26a:	430c      	orrs	r4, r1
    a26c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    a26e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    a272:	b003      	add	sp, #12
    a274:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a276 <nrf_gpio_cfg_sense_set>:
{
    a276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a278:	f10d 030f 	add.w	r3, sp, #15
    a27c:	9301      	str	r3, [sp, #4]
    a27e:	2300      	movs	r3, #0
{
    a280:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    a284:	9300      	str	r3, [sp, #0]
    a286:	461a      	mov	r2, r3
    a288:	4619      	mov	r1, r3
    a28a:	f7ff ffab 	bl	a1e4 <nrf_gpio_reconfigure>
}
    a28e:	b005      	add	sp, #20
    a290:	f85d fb04 	ldr.w	pc, [sp], #4

0000a294 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a294:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    a298:	681a      	ldr	r2, [r3, #0]
    a29a:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a29c:	bf1f      	itttt	ne
    a29e:	2200      	movne	r2, #0
    a2a0:	601a      	strne	r2, [r3, #0]
    a2a2:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a2a4:	2001      	movne	r0, #1
    a2a6:	bf08      	it	eq
    a2a8:	2000      	moveq	r0, #0
}
    a2aa:	4770      	bx	lr

0000a2ac <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    a2ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2b0:	f44f 7260 	mov.w	r2, #896	; 0x380
    a2b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a2b8:	4770      	bx	lr

0000a2ba <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    a2ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2be:	f44f 7260 	mov.w	r2, #896	; 0x380
    a2c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    a2c6:	4770      	bx	lr

0000a2c8 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    a2c8:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    a2ca:	f7fc f897 	bl	63fc <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    a2ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    a2d2:	f7fb bca7 	b.w	5c24 <nrfx_clock_irq_handler>

0000a2d6 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    a2d6:	7b0a      	ldrb	r2, [r1, #12]
{
    a2d8:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    a2da:	2a03      	cmp	r2, #3
    a2dc:	d829      	bhi.n	a332 <xfer_completeness_check+0x5c>
    a2de:	e8df f002 	tbb	[pc, r2]
    a2e2:	2521      	.short	0x2521
    a2e4:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    a2e6:	688a      	ldr	r2, [r1, #8]
    a2e8:	0350      	lsls	r0, r2, #13
    a2ea:	d504      	bpl.n	a2f6 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    a2ec:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    a2f0:	6908      	ldr	r0, [r1, #16]
    a2f2:	4290      	cmp	r0, r2
    a2f4:	d107      	bne.n	a306 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    a2f6:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    a2f8:	0352      	lsls	r2, r2, #13
    a2fa:	d41a      	bmi.n	a332 <xfer_completeness_check+0x5c>
    a2fc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    a300:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    a302:	4291      	cmp	r1, r2
    a304:	d015      	beq.n	a332 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    a306:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    a308:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    a30a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    a30e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    a312:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    a314:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    a318:	6908      	ldr	r0, [r1, #16]
    a31a:	4290      	cmp	r0, r2
    a31c:	d1f3      	bne.n	a306 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    a31e:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    a322:	e7ed      	b.n	a300 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    a324:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    a328:	6909      	ldr	r1, [r1, #16]
    a32a:	e7ea      	b.n	a302 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    a32c:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    a330:	e7fa      	b.n	a328 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    a332:	2001      	movs	r0, #1
}
    a334:	4770      	bx	lr

0000a336 <nrfx_usbd_consumer>:
{
    a336:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    a338:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    a33a:	429c      	cmp	r4, r3
    a33c:	d209      	bcs.n	a352 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    a33e:	2500      	movs	r5, #0
    a340:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    a342:	6809      	ldr	r1, [r1, #0]
    a344:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    a346:	429a      	cmp	r2, r3
    a348:	d10c      	bne.n	a364 <nrfx_usbd_consumer+0x2e>
    a34a:	1e20      	subs	r0, r4, #0
    a34c:	bf18      	it	ne
    a34e:	2001      	movne	r0, #1
}
    a350:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    a352:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    a354:	680d      	ldr	r5, [r1, #0]
    a356:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    a358:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    a35a:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    a35c:	4418      	add	r0, r3
        p_transfer->size = size;
    a35e:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    a360:	6008      	str	r0, [r1, #0]
    a362:	e7f0      	b.n	a346 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    a364:	2000      	movs	r0, #0
    a366:	e7f3      	b.n	a350 <nrfx_usbd_consumer+0x1a>

0000a368 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    a368:	684b      	ldr	r3, [r1, #4]
    a36a:	429a      	cmp	r2, r3
    a36c:	bf28      	it	cs
    a36e:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    a370:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    a372:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    a376:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    a378:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    a37a:	1a80      	subs	r0, r0, r2
    a37c:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    a37e:	4413      	add	r3, r2
}
    a380:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    a382:	600b      	str	r3, [r1, #0]
}
    a384:	bf18      	it	ne
    a386:	2001      	movne	r0, #1
    a388:	4770      	bx	lr

0000a38a <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    a38a:	684b      	ldr	r3, [r1, #4]
    a38c:	429a      	cmp	r2, r3
    a38e:	bf28      	it	cs
    a390:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    a392:	b162      	cbz	r2, a3ae <nrfx_usbd_feeder_ram_zlp+0x24>
    a394:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    a396:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    a39a:	684b      	ldr	r3, [r1, #4]
    a39c:	1a9b      	subs	r3, r3, r2
    a39e:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    a3a0:	680b      	ldr	r3, [r1, #0]
}
    a3a2:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    a3a4:	4413      	add	r3, r2
    a3a6:	600b      	str	r3, [r1, #0]
}
    a3a8:	bf18      	it	ne
    a3aa:	2001      	movne	r0, #1
    a3ac:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    a3ae:	4613      	mov	r3, r2
    a3b0:	e7f1      	b.n	a396 <nrfx_usbd_feeder_ram_zlp+0xc>

0000a3b2 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    a3b2:	43c3      	mvns	r3, r0
    a3b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a3b8:	f000 000f 	and.w	r0, r0, #15
}
    a3bc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    a3c0:	4770      	bx	lr

0000a3c2 <ev_started_handler>:
}
    a3c2:	4770      	bx	lr

0000a3c4 <nrf_usbd_epin_dma_handler>:
{
    a3c4:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    a3c6:	f7fc fc61 	bl	6c8c <usbd_dma_pending_clear>
{
    a3ca:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a3cc:	f7fc fb54 	bl	6a78 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a3d0:	7b83      	ldrb	r3, [r0, #14]
    a3d2:	2b03      	cmp	r3, #3
    a3d4:	d10a      	bne.n	a3ec <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3d6:	4608      	mov	r0, r1
    a3d8:	f7ff ffeb 	bl	a3b2 <ep2bit>
    a3dc:	2301      	movs	r3, #1
    a3de:	fa03 f000 	lsl.w	r0, r3, r0
    a3e2:	43c0      	mvns	r0, r0
}
    a3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3e8:	f7fc bc40 	b.w	6c6c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a3ec:	6803      	ldr	r3, [r0, #0]
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d0f1      	beq.n	a3d6 <nrf_usbd_epin_dma_handler+0x12>
}
    a3f2:	bd08      	pop	{r3, pc}

0000a3f4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    a3f4:	2087      	movs	r0, #135	; 0x87
    a3f6:	f7ff bfe5 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a3fa <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    a3fa:	2086      	movs	r0, #134	; 0x86
    a3fc:	f7ff bfe2 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a400 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    a400:	2085      	movs	r0, #133	; 0x85
    a402:	f7ff bfdf 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a406 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    a406:	2084      	movs	r0, #132	; 0x84
    a408:	f7ff bfdc 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a40c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    a40c:	2083      	movs	r0, #131	; 0x83
    a40e:	f7ff bfd9 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a412 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    a412:	2082      	movs	r0, #130	; 0x82
    a414:	f7ff bfd6 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a418 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    a418:	2081      	movs	r0, #129	; 0x81
    a41a:	f7ff bfd3 	b.w	a3c4 <nrf_usbd_epin_dma_handler>

0000a41e <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    a41e:	f7fc bc47 	b.w	6cb0 <nrf_usbd_ep0in_dma_handler>

0000a422 <nrfx_usbd_ep_max_packet_size_set>:
{
    a422:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a424:	f7fc fb28 	bl	6a78 <ep_state_access>
    p_state->max_packet_size = size;
    a428:	8181      	strh	r1, [r0, #12]
}
    a42a:	bd08      	pop	{r3, pc}

0000a42c <nrfx_usbd_ep_status_get>:
{
    a42c:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    a42e:	f7fc fb23 	bl	6a78 <ep_state_access>
	__asm__ volatile(
    a432:	f04f 0220 	mov.w	r2, #32
    a436:	f3ef 8311 	mrs	r3, BASEPRI
    a43a:	f382 8812 	msr	BASEPRI_MAX, r2
    a43e:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    a442:	6882      	ldr	r2, [r0, #8]
    a444:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a446:	6802      	ldr	r2, [r0, #0]
    a448:	b92a      	cbnz	r2, a456 <nrfx_usbd_ep_status_get+0x2a>
    a44a:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    a44c:	f383 8811 	msr	BASEPRI, r3
    a450:	f3bf 8f6f 	isb	sy
}
    a454:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    a456:	2004      	movs	r0, #4
    a458:	e7f8      	b.n	a44c <nrfx_usbd_ep_status_get+0x20>

0000a45a <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    a45a:	2007      	movs	r0, #7
    a45c:	f7fc bf94 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a460 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a460:	2006      	movs	r0, #6
    a462:	f7fc bf91 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a466 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a466:	2005      	movs	r0, #5
    a468:	f7fc bf8e 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a46c <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a46c:	2004      	movs	r0, #4
    a46e:	f7fc bf8b 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a472 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a472:	2003      	movs	r0, #3
    a474:	f7fc bf88 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a478 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    a478:	2002      	movs	r0, #2
    a47a:	f7fc bf85 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a47e <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    a47e:	2001      	movs	r0, #1
    a480:	f7fc bf82 	b.w	7388 <nrf_usbd_epout_dma_handler>

0000a484 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    a484:	f7fd b876 	b.w	7574 <usbd_ep_abort>

0000a488 <nrf_gpio_pin_set>:
{
    a488:	b507      	push	{r0, r1, r2, lr}
    a48a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a48c:	a801      	add	r0, sp, #4
    a48e:	f7fd fa45 	bl	791c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a492:	9a01      	ldr	r2, [sp, #4]
    a494:	2301      	movs	r3, #1
    a496:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    a498:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    a49c:	b003      	add	sp, #12
    a49e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4a2 <z_device_state_init>:
}
    a4a2:	4770      	bx	lr

0000a4a4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a4a4:	b140      	cbz	r0, a4b8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a4a6:	68c3      	ldr	r3, [r0, #12]
    a4a8:	7858      	ldrb	r0, [r3, #1]
    a4aa:	f010 0001 	ands.w	r0, r0, #1
    a4ae:	bf1e      	ittt	ne
    a4b0:	7818      	ldrbne	r0, [r3, #0]
    a4b2:	fab0 f080 	clzne	r0, r0
    a4b6:	0940      	lsrne	r0, r0, #5
}
    a4b8:	4770      	bx	lr

0000a4ba <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4bc:	4605      	mov	r5, r0
    a4be:	460e      	mov	r6, r1
	__asm__ volatile(
    a4c0:	f04f 0320 	mov.w	r3, #32
    a4c4:	f3ef 8711 	mrs	r7, BASEPRI
    a4c8:	f383 8812 	msr	BASEPRI_MAX, r3
    a4cc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a4d0:	f7fe fa46 	bl	8960 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a4d4:	4631      	mov	r1, r6
    a4d6:	4604      	mov	r4, r0
    a4d8:	4628      	mov	r0, r5
    a4da:	f7ff fe33 	bl	a144 <k_sys_fatal_error_handler>
	__asm__ volatile(
    a4de:	f387 8811 	msr	BASEPRI, r7
    a4e2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a4e6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a4e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a4ec:	f7f9 bb82 	b.w	3bf4 <z_impl_k_thread_abort>

0000a4f0 <z_early_memset>:
	(void) memset(dst, c, n);
    a4f0:	f7ff bc12 	b.w	9d18 <memset>

0000a4f4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    a4f4:	f7ff bc05 	b.w	9d02 <memcpy>

0000a4f8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a4f8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    a4fc:	4313      	orrs	r3, r2
    a4fe:	f013 0303 	ands.w	r3, r3, #3
    a502:	d10c      	bne.n	a51e <create_free_list+0x26>
	slab->free_list = NULL;
    a504:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a506:	6881      	ldr	r1, [r0, #8]
    a508:	4299      	cmp	r1, r3
    a50a:	d801      	bhi.n	a510 <create_free_list+0x18>
	return 0;
    a50c:	2000      	movs	r0, #0
    a50e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    a510:	6941      	ldr	r1, [r0, #20]
    a512:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    a514:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    a516:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    a518:	3301      	adds	r3, #1
		p += slab->block_size;
    a51a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    a51c:	e7f3      	b.n	a506 <create_free_list+0xe>
		return -EINVAL;
    a51e:	f06f 0015 	mvn.w	r0, #21
}
    a522:	4770      	bx	lr

0000a524 <k_mem_slab_init>:
{
    a524:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    a526:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    a52a:	2300      	movs	r3, #0
	slab->buffer = buffer;
    a52c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    a52e:	6183      	str	r3, [r0, #24]
{
    a530:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    a532:	f7ff ffe1 	bl	a4f8 <create_free_list>
	if (rc < 0) {
    a536:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    a538:	bfa8      	it	ge
    a53a:	e9c4 4400 	strdge	r4, r4, [r4]
}
    a53e:	bd10      	pop	{r4, pc}

0000a540 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a542:	4604      	mov	r4, r0
    a544:	460d      	mov	r5, r1
	__asm__ volatile(
    a546:	f04f 0320 	mov.w	r3, #32
    a54a:	f3ef 8611 	mrs	r6, BASEPRI
    a54e:	f383 8812 	msr	BASEPRI_MAX, r3
    a552:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a556:	6947      	ldr	r7, [r0, #20]
    a558:	b977      	cbnz	r7, a578 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a55a:	f000 f99b 	bl	a894 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    a55e:	b158      	cbz	r0, a578 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a560:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a562:	6142      	str	r2, [r0, #20]
    a564:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    a566:	f000 f95f 	bl	a828 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a56a:	4631      	mov	r1, r6
    a56c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    a574:	f7fe b8a4 	b.w	86c0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    a578:	682b      	ldr	r3, [r5, #0]
    a57a:	6962      	ldr	r2, [r4, #20]
    a57c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a57e:	682b      	ldr	r3, [r5, #0]
    a580:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    a582:	69a3      	ldr	r3, [r4, #24]
    a584:	3b01      	subs	r3, #1
    a586:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    a588:	f386 8811 	msr	BASEPRI, r6
    a58c:	f3bf 8f6f 	isb	sy
}
    a590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a592 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a592:	f3ef 8005 	mrs	r0, IPSR
}
    a596:	3800      	subs	r0, #0
    a598:	bf18      	it	ne
    a59a:	2001      	movne	r0, #1
    a59c:	4770      	bx	lr

0000a59e <z_impl_k_thread_name_set>:
}
    a59e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    a5a2:	4770      	bx	lr

0000a5a4 <z_impl_k_thread_start>:
	z_sched_start(thread);
    a5a4:	f7fe b89e 	b.w	86e4 <z_sched_start>

0000a5a8 <z_pm_save_idle_exit>:
{
    a5a8:	b508      	push	{r3, lr}
	pm_system_resume();
    a5aa:	f7f7 fd37 	bl	201c <pm_system_resume>
}
    a5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    a5b2:	f7ff bdba 	b.w	a12a <sys_clock_idle_exit>

0000a5b6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    a5b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a5ba:	428b      	cmp	r3, r1
    a5bc:	d001      	beq.n	a5c2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    a5be:	f7fe b839 	b.w	8634 <z_set_prio>
}
    a5c2:	2000      	movs	r0, #0
    a5c4:	4770      	bx	lr

0000a5c6 <z_impl_k_mutex_init>:
{
    a5c6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    a5c8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    a5ca:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a5ce:	e9c3 3300 	strd	r3, r3, [r3]
}
    a5d2:	4770      	bx	lr

0000a5d4 <queue_insert>:
{
    a5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5d8:	4699      	mov	r9, r3
    a5da:	4604      	mov	r4, r0
    a5dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a5e0:	460d      	mov	r5, r1
    a5e2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a5e4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a5e8:	f04f 0220 	mov.w	r2, #32
    a5ec:	f3ef 8711 	mrs	r7, BASEPRI
    a5f0:	f382 8812 	msr	BASEPRI_MAX, r2
    a5f4:	f3bf 8f6f 	isb	sy
	if (is_append) {
    a5f8:	b103      	cbz	r3, a5fc <queue_insert+0x28>
	return list->tail;
    a5fa:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    a5fc:	4630      	mov	r0, r6
    a5fe:	f000 f949 	bl	a894 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    a602:	b158      	cbz	r0, a61c <queue_insert+0x48>
    a604:	2300      	movs	r3, #0
    a606:	6783      	str	r3, [r0, #120]	; 0x78
    a608:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    a60c:	f000 f90c 	bl	a828 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    a610:	4630      	mov	r0, r6
    a612:	4639      	mov	r1, r7
    a614:	f7fe f854 	bl	86c0 <z_reschedule>
		return 0;
    a618:	2000      	movs	r0, #0
    a61a:	e00c      	b.n	a636 <queue_insert+0x62>
	if (alloc) {
    a61c:	f1b9 0f00 	cmp.w	r9, #0
    a620:	d01c      	beq.n	a65c <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    a622:	2108      	movs	r1, #8
    a624:	f7fe fb6e 	bl	8d04 <z_thread_aligned_alloc>
		if (anode == NULL) {
    a628:	b938      	cbnz	r0, a63a <queue_insert+0x66>
	__asm__ volatile(
    a62a:	f387 8811 	msr	BASEPRI, r7
    a62e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    a632:	f06f 000b 	mvn.w	r0, #11
}
    a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    a63a:	2201      	movs	r2, #1
		anode->data = data;
    a63c:	f8c0 8004 	str.w	r8, [r0, #4]
    a640:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a642:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a644:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    a648:	b965      	cbnz	r5, a664 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a64a:	6822      	ldr	r2, [r4, #0]
    a64c:	430a      	orrs	r2, r1
    a64e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a650:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    a652:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    a654:	2a00      	cmp	r2, #0
    a656:	d1db      	bne.n	a610 <queue_insert+0x3c>
	list->tail = node;
    a658:	6060      	str	r0, [r4, #4]
}
    a65a:	e7d9      	b.n	a610 <queue_insert+0x3c>
	node->next_and_flags = flags;
    a65c:	f8c8 9000 	str.w	r9, [r8]
}
    a660:	4640      	mov	r0, r8
    a662:	e7ee      	b.n	a642 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a664:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    a666:	2a03      	cmp	r2, #3
    a668:	d80b      	bhi.n	a682 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    a66a:	6001      	str	r1, [r0, #0]
	return list->tail;
    a66c:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    a66e:	b911      	cbnz	r1, a676 <queue_insert+0xa2>
	list->head = node;
    a670:	e9c4 0000 	strd	r0, r0, [r4]
}
    a674:	e7cc      	b.n	a610 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a676:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a678:	f002 0203 	and.w	r2, r2, #3
    a67c:	4302      	orrs	r2, r0
    a67e:	600a      	str	r2, [r1, #0]
    a680:	e7ea      	b.n	a658 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a682:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    a686:	430a      	orrs	r2, r1
    a688:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a68a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    a68c:	f002 0203 	and.w	r2, r2, #3
    a690:	ea40 0302 	orr.w	r3, r0, r2
    a694:	602b      	str	r3, [r5, #0]
}
    a696:	e7bb      	b.n	a610 <queue_insert+0x3c>

0000a698 <z_queue_node_peek>:
{
    a698:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    a69a:	4604      	mov	r4, r0
    a69c:	b130      	cbz	r0, a6ac <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    a69e:	6802      	ldr	r2, [r0, #0]
    a6a0:	0793      	lsls	r3, r2, #30
    a6a2:	d003      	beq.n	a6ac <z_queue_node_peek+0x14>
		ret = anode->data;
    a6a4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    a6a6:	b109      	cbz	r1, a6ac <z_queue_node_peek+0x14>
			k_free(anode);
    a6a8:	f000 f9c1 	bl	aa2e <k_free>
}
    a6ac:	4620      	mov	r0, r4
    a6ae:	bd10      	pop	{r4, pc}

0000a6b0 <k_queue_append>:
{
    a6b0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    a6b2:	2301      	movs	r3, #1
    a6b4:	9300      	str	r3, [sp, #0]
    a6b6:	2300      	movs	r3, #0
{
    a6b8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    a6ba:	4619      	mov	r1, r3
    a6bc:	f7ff ff8a 	bl	a5d4 <queue_insert>
}
    a6c0:	b003      	add	sp, #12
    a6c2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6c6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a6c6:	b13a      	cbz	r2, a6d8 <z_impl_k_sem_init+0x12>
    a6c8:	428a      	cmp	r2, r1
    a6ca:	d305      	bcc.n	a6d8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    a6cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
    a6d0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    a6d4:	2000      	movs	r0, #0
    a6d6:	4770      	bx	lr
		return -EINVAL;
    a6d8:	f06f 0015 	mvn.w	r0, #21
}
    a6dc:	4770      	bx	lr

0000a6de <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    a6de:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    a6e0:	2301      	movs	r3, #1
    a6e2:	408b      	lsls	r3, r1
    a6e4:	ea22 0303 	bic.w	r3, r2, r3
    a6e8:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    a6ea:	fa22 f001 	lsr.w	r0, r2, r1
}
    a6ee:	f000 0001 	and.w	r0, r0, #1
    a6f2:	4770      	bx	lr

0000a6f4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    a6f4:	b120      	cbz	r0, a700 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a6f6:	2200      	movs	r2, #0
    a6f8:	4611      	mov	r1, r2
    a6fa:	3088      	adds	r0, #136	; 0x88
    a6fc:	f000 b924 	b.w	a948 <z_sched_wake>
}
    a700:	4770      	bx	lr

0000a702 <work_timeout>:
{
    a702:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a704:	4604      	mov	r4, r0
	__asm__ volatile(
    a706:	f04f 0320 	mov.w	r3, #32
    a70a:	f3ef 8511 	mrs	r5, BASEPRI
    a70e:	f383 8812 	msr	BASEPRI_MAX, r3
    a712:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    a716:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a718:	f1a0 0610 	sub.w	r6, r0, #16
    a71c:	2103      	movs	r1, #3
    a71e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    a720:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a722:	f7ff ffdc 	bl	a6de <flag_test_and_clear>
    a726:	b128      	cbz	r0, a734 <work_timeout+0x32>
		queue = dw->queue;
    a728:	69a3      	ldr	r3, [r4, #24]
    a72a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    a72c:	a901      	add	r1, sp, #4
    a72e:	4630      	mov	r0, r6
    a730:	f7fd fd64 	bl	81fc <submit_to_queue_locked>
	__asm__ volatile(
    a734:	f385 8811 	msr	BASEPRI, r5
    a738:	f3bf 8f6f 	isb	sy
}
    a73c:	b002      	add	sp, #8
    a73e:	bd70      	pop	{r4, r5, r6, pc}

0000a740 <k_work_init>:
{
    a740:	b538      	push	{r3, r4, r5, lr}
    a742:	4604      	mov	r4, r0
    a744:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a746:	2210      	movs	r2, #16
    a748:	2100      	movs	r1, #0
    a74a:	f7ff fae5 	bl	9d18 <memset>
    a74e:	6065      	str	r5, [r4, #4]
}
    a750:	bd38      	pop	{r3, r4, r5, pc}

0000a752 <z_work_submit_to_queue>:
{
    a752:	b513      	push	{r0, r1, r4, lr}
    a754:	9001      	str	r0, [sp, #4]
    a756:	4608      	mov	r0, r1
	__asm__ volatile(
    a758:	f04f 0320 	mov.w	r3, #32
    a75c:	f3ef 8411 	mrs	r4, BASEPRI
    a760:	f383 8812 	msr	BASEPRI_MAX, r3
    a764:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    a768:	a901      	add	r1, sp, #4
    a76a:	f7fd fd47 	bl	81fc <submit_to_queue_locked>
	__asm__ volatile(
    a76e:	f384 8811 	msr	BASEPRI, r4
    a772:	f3bf 8f6f 	isb	sy
}
    a776:	b002      	add	sp, #8
    a778:	bd10      	pop	{r4, pc}

0000a77a <k_work_submit_to_queue>:
{
    a77a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    a77c:	f7ff ffe9 	bl	a752 <z_work_submit_to_queue>
	if (ret > 0) {
    a780:	1e04      	subs	r4, r0, #0
    a782:	dd09      	ble.n	a798 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    a784:	f04f 0320 	mov.w	r3, #32
    a788:	f3ef 8011 	mrs	r0, BASEPRI
    a78c:	f383 8812 	msr	BASEPRI_MAX, r3
    a790:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a794:	f000 f8b2 	bl	a8fc <z_reschedule_irqlock>
}
    a798:	4620      	mov	r0, r4
    a79a:	bd10      	pop	{r4, pc}

0000a79c <k_work_init_delayable>:
{
    a79c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    a79e:	2230      	movs	r2, #48	; 0x30
{
    a7a0:	4604      	mov	r4, r0
    a7a2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    a7a4:	2100      	movs	r1, #0
    a7a6:	f7ff fab7 	bl	9d18 <memset>
    a7aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    a7ae:	6065      	str	r5, [r4, #4]
    a7b0:	60e3      	str	r3, [r4, #12]
}
    a7b2:	bd38      	pop	{r3, r4, r5, pc}

0000a7b4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    a7b4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a7b8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a7ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a7bc:	2300      	movs	r3, #0
	node->prev = NULL;
    a7be:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    a7c2:	4770      	bx	lr

0000a7c4 <unpend_thread_no_timeout>:
{
    a7c4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    a7c6:	f7ff fff5 	bl	a7b4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a7ca:	7b43      	ldrb	r3, [r0, #13]
    a7cc:	f023 0302 	bic.w	r3, r3, #2
    a7d0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    a7d2:	2300      	movs	r3, #0
    a7d4:	6083      	str	r3, [r0, #8]
}
    a7d6:	bd08      	pop	{r3, pc}

0000a7d8 <add_to_waitq_locked>:
{
    a7d8:	b538      	push	{r3, r4, r5, lr}
    a7da:	4604      	mov	r4, r0
    a7dc:	460d      	mov	r5, r1
	unready_thread(thread);
    a7de:	f7fd feab 	bl	8538 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a7e2:	7b63      	ldrb	r3, [r4, #13]
    a7e4:	f043 0302 	orr.w	r3, r3, #2
    a7e8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a7ea:	b1e5      	cbz	r5, a826 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    a7ec:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    a7ee:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7f0:	429d      	cmp	r5, r3
    a7f2:	d109      	bne.n	a808 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    a7f4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    a7f6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    a7fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a7fc:	606c      	str	r4, [r5, #4]
}
    a7fe:	e012      	b.n	a826 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    a800:	686a      	ldr	r2, [r5, #4]
    a802:	4293      	cmp	r3, r2
    a804:	d0f6      	beq.n	a7f4 <add_to_waitq_locked+0x1c>
    a806:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a808:	2b00      	cmp	r3, #0
    a80a:	d0f3      	beq.n	a7f4 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    a80c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    a810:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    a814:	428a      	cmp	r2, r1
    a816:	d0f3      	beq.n	a800 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a818:	4291      	cmp	r1, r2
    a81a:	ddf1      	ble.n	a800 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    a81c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a81e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a822:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a824:	605c      	str	r4, [r3, #4]
}
    a826:	bd38      	pop	{r3, r4, r5, pc}

0000a828 <z_ready_thread>:
{
    a828:	b510      	push	{r4, lr}
    a82a:	f04f 0320 	mov.w	r3, #32
    a82e:	f3ef 8411 	mrs	r4, BASEPRI
    a832:	f383 8812 	msr	BASEPRI_MAX, r3
    a836:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    a83a:	f7fd fe49 	bl	84d0 <ready_thread>
	__asm__ volatile(
    a83e:	f384 8811 	msr	BASEPRI, r4
    a842:	f3bf 8f6f 	isb	sy
}
    a846:	bd10      	pop	{r4, pc}

0000a848 <z_sched_wake_thread>:
{
    a848:	b538      	push	{r3, r4, r5, lr}
    a84a:	4604      	mov	r4, r0
	__asm__ volatile(
    a84c:	f04f 0320 	mov.w	r3, #32
    a850:	f3ef 8511 	mrs	r5, BASEPRI
    a854:	f383 8812 	msr	BASEPRI_MAX, r3
    a858:	f3bf 8f6f 	isb	sy
		if (!killed) {
    a85c:	7b43      	ldrb	r3, [r0, #13]
    a85e:	f013 0f28 	tst.w	r3, #40	; 0x28
    a862:	d10b      	bne.n	a87c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    a864:	6883      	ldr	r3, [r0, #8]
    a866:	b10b      	cbz	r3, a86c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    a868:	f7ff ffac 	bl	a7c4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a86c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    a86e:	b951      	cbnz	r1, a886 <z_sched_wake_thread+0x3e>
    a870:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a874:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    a876:	4620      	mov	r0, r4
    a878:	f7fd fe2a 	bl	84d0 <ready_thread>
	__asm__ volatile(
    a87c:	f385 8811 	msr	BASEPRI, r5
    a880:	f3bf 8f6f 	isb	sy
}
    a884:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a886:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    a88a:	e7f3      	b.n	a874 <z_sched_wake_thread+0x2c>

0000a88c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    a88c:	2101      	movs	r1, #1
    a88e:	3818      	subs	r0, #24
    a890:	f7ff bfda 	b.w	a848 <z_sched_wake_thread>

0000a894 <z_unpend_first_thread>:
{
    a894:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a896:	f04f 0320 	mov.w	r3, #32
    a89a:	f3ef 8511 	mrs	r5, BASEPRI
    a89e:	f383 8812 	msr	BASEPRI_MAX, r3
    a8a2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a8a6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8a8:	42a0      	cmp	r0, r4
    a8aa:	d00d      	beq.n	a8c8 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    a8ac:	b134      	cbz	r4, a8bc <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    a8ae:	4620      	mov	r0, r4
    a8b0:	f7ff ff88 	bl	a7c4 <unpend_thread_no_timeout>
    a8b4:	f104 0018 	add.w	r0, r4, #24
    a8b8:	f000 f869 	bl	a98e <z_abort_timeout>
	__asm__ volatile(
    a8bc:	f385 8811 	msr	BASEPRI, r5
    a8c0:	f3bf 8f6f 	isb	sy
}
    a8c4:	4620      	mov	r0, r4
    a8c6:	bd38      	pop	{r3, r4, r5, pc}
    a8c8:	2400      	movs	r4, #0
    a8ca:	e7f7      	b.n	a8bc <z_unpend_first_thread+0x28>

0000a8cc <z_unpend_thread>:
{
    a8cc:	b510      	push	{r4, lr}
    a8ce:	4601      	mov	r1, r0
	__asm__ volatile(
    a8d0:	f04f 0320 	mov.w	r3, #32
    a8d4:	f3ef 8411 	mrs	r4, BASEPRI
    a8d8:	f383 8812 	msr	BASEPRI_MAX, r3
    a8dc:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    a8e0:	6883      	ldr	r3, [r0, #8]
    a8e2:	b10b      	cbz	r3, a8e8 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    a8e4:	f7ff ff6e 	bl	a7c4 <unpend_thread_no_timeout>
	__asm__ volatile(
    a8e8:	f384 8811 	msr	BASEPRI, r4
    a8ec:	f3bf 8f6f 	isb	sy
}
    a8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a8f4:	f101 0018 	add.w	r0, r1, #24
    a8f8:	f000 b849 	b.w	a98e <z_abort_timeout>

0000a8fc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a8fc:	4603      	mov	r3, r0
    a8fe:	b920      	cbnz	r0, a90a <z_reschedule_irqlock+0xe>
    a900:	f3ef 8205 	mrs	r2, IPSR
    a904:	b90a      	cbnz	r2, a90a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    a906:	f7f8 bee1 	b.w	36cc <arch_swap>
    a90a:	f383 8811 	msr	BASEPRI, r3
    a90e:	f3bf 8f6f 	isb	sy
}
    a912:	4770      	bx	lr

0000a914 <z_reschedule_unlocked>:
	__asm__ volatile(
    a914:	f04f 0320 	mov.w	r3, #32
    a918:	f3ef 8011 	mrs	r0, BASEPRI
    a91c:	f383 8812 	msr	BASEPRI_MAX, r3
    a920:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a924:	f7ff bfea 	b.w	a8fc <z_reschedule_irqlock>

0000a928 <z_unpend_all>:
{
    a928:	b538      	push	{r3, r4, r5, lr}
    a92a:	4605      	mov	r5, r0
	int need_sched = 0;
    a92c:	2000      	movs	r0, #0
	return list->head == list;
    a92e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a930:	42a5      	cmp	r5, r4
    a932:	d000      	beq.n	a936 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a934:	b904      	cbnz	r4, a938 <z_unpend_all+0x10>
}
    a936:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    a938:	4620      	mov	r0, r4
    a93a:	f7ff ffc7 	bl	a8cc <z_unpend_thread>
		z_ready_thread(thread);
    a93e:	4620      	mov	r0, r4
    a940:	f7ff ff72 	bl	a828 <z_ready_thread>
		need_sched = 1;
    a944:	2001      	movs	r0, #1
    a946:	e7f2      	b.n	a92e <z_unpend_all+0x6>

0000a948 <z_sched_wake>:
{
    a948:	b538      	push	{r3, r4, r5, lr}
    a94a:	f04f 0320 	mov.w	r3, #32
    a94e:	f3ef 8511 	mrs	r5, BASEPRI
    a952:	f383 8812 	msr	BASEPRI_MAX, r3
    a956:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a95a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a95c:	42a0      	cmp	r0, r4
    a95e:	d012      	beq.n	a986 <z_sched_wake+0x3e>
		if (thread != NULL) {
    a960:	b19c      	cbz	r4, a98a <z_sched_wake+0x42>
    a962:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    a964:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    a966:	4620      	mov	r0, r4
    a968:	f7ff ff2c 	bl	a7c4 <unpend_thread_no_timeout>
    a96c:	f104 0018 	add.w	r0, r4, #24
    a970:	f000 f80d 	bl	a98e <z_abort_timeout>
			ready_thread(thread);
    a974:	4620      	mov	r0, r4
    a976:	f7fd fdab 	bl	84d0 <ready_thread>
			ret = true;
    a97a:	2001      	movs	r0, #1
	__asm__ volatile(
    a97c:	f385 8811 	msr	BASEPRI, r5
    a980:	f3bf 8f6f 	isb	sy
}
    a984:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    a986:	2000      	movs	r0, #0
    a988:	e7f8      	b.n	a97c <z_sched_wake+0x34>
    a98a:	4620      	mov	r0, r4
    a98c:	e7f6      	b.n	a97c <z_sched_wake+0x34>

0000a98e <z_abort_timeout>:
{
    a98e:	b510      	push	{r4, lr}
	__asm__ volatile(
    a990:	f04f 0220 	mov.w	r2, #32
    a994:	f3ef 8411 	mrs	r4, BASEPRI
    a998:	f382 8812 	msr	BASEPRI_MAX, r2
    a99c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a9a0:	6803      	ldr	r3, [r0, #0]
    a9a2:	b13b      	cbz	r3, a9b4 <z_abort_timeout+0x26>
			remove_timeout(to);
    a9a4:	f7fe f898 	bl	8ad8 <remove_timeout>
			ret = 0;
    a9a8:	2000      	movs	r0, #0
	__asm__ volatile(
    a9aa:	f384 8811 	msr	BASEPRI, r4
    a9ae:	f3bf 8f6f 	isb	sy
}
    a9b2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a9b4:	f06f 0015 	mvn.w	r0, #21
    a9b8:	e7f7      	b.n	a9aa <z_abort_timeout+0x1c>

0000a9ba <z_get_next_timeout_expiry>:
{
    a9ba:	b510      	push	{r4, lr}
	__asm__ volatile(
    a9bc:	f04f 0320 	mov.w	r3, #32
    a9c0:	f3ef 8411 	mrs	r4, BASEPRI
    a9c4:	f383 8812 	msr	BASEPRI_MAX, r3
    a9c8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a9cc:	f7fe f864 	bl	8a98 <next_timeout>
	__asm__ volatile(
    a9d0:	f384 8811 	msr	BASEPRI, r4
    a9d4:	f3bf 8f6f 	isb	sy
}
    a9d8:	bd10      	pop	{r4, pc}

0000a9da <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a9da:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a9dc:	f7fe f978 	bl	8cd0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a9e0:	bd08      	pop	{r3, pc}

0000a9e2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a9e2:	b108      	cbz	r0, a9e8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a9e4:	f7f9 ba18 	b.w	3e18 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a9e8:	4770      	bx	lr

0000a9ea <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a9ea:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a9ee:	bf08      	it	eq
    a9f0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a9f4:	b538      	push	{r3, r4, r5, lr}
    a9f6:	460c      	mov	r4, r1
    a9f8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a9fa:	d014      	beq.n	aa26 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a9fc:	4308      	orrs	r0, r1
    a9fe:	d103      	bne.n	aa08 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    aa00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    aa04:	f7fe b964 	b.w	8cd0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    aa08:	f06f 0001 	mvn.w	r0, #1
    aa0c:	1b40      	subs	r0, r0, r5
    aa0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa12:	eb63 0101 	sbc.w	r1, r3, r1
    aa16:	2900      	cmp	r1, #0
    aa18:	da04      	bge.n	aa24 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    aa1a:	f7fe f959 	bl	8cd0 <sys_clock_tick_get>
    aa1e:	1940      	adds	r0, r0, r5
    aa20:	eb41 0104 	adc.w	r1, r1, r4
}
    aa24:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    aa26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa2a:	4601      	mov	r1, r0
    aa2c:	e7fa      	b.n	aa24 <sys_clock_timeout_end_calc+0x3a>

0000aa2e <k_free>:
	if (ptr != NULL) {
    aa2e:	b120      	cbz	r0, aa3a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    aa30:	1f01      	subs	r1, r0, #4
    aa32:	f850 0c04 	ldr.w	r0, [r0, #-4]
    aa36:	f000 b856 	b.w	aae6 <k_heap_free>
}
    aa3a:	4770      	bx	lr

0000aa3c <k_heap_init>:
{
    aa3c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    aa3e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    aa42:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    aa46:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    aa48:	f7fe bd44 	b.w	94d4 <sys_heap_init>

0000aa4c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa50:	b085      	sub	sp, #20
    aa52:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    aa56:	4607      	mov	r7, r0
    aa58:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    aa5a:	4650      	mov	r0, sl
    aa5c:	4621      	mov	r1, r4
{
    aa5e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    aa60:	f7ff ffc3 	bl	a9ea <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    aa64:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    aa68:	bf08      	it	eq
    aa6a:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    aa6e:	4605      	mov	r5, r0
    aa70:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    aa72:	bf04      	itt	eq
    aa74:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    aa78:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    aa7c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    aa80:	f04f 0320 	mov.w	r3, #32
    aa84:	f3ef 8411 	mrs	r4, BASEPRI
    aa88:	f383 8812 	msr	BASEPRI_MAX, r3
    aa8c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    aa90:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    aa94:	464a      	mov	r2, r9
    aa96:	4641      	mov	r1, r8
    aa98:	4638      	mov	r0, r7
    aa9a:	f7fe fcb4 	bl	9406 <sys_heap_aligned_alloc>
    aa9e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    aaa0:	f7fe f916 	bl	8cd0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    aaa4:	9b03      	ldr	r3, [sp, #12]
    aaa6:	b13b      	cbz	r3, aab8 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    aaa8:	f384 8811 	msr	BASEPRI, r4
    aaac:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    aab0:	4618      	mov	r0, r3
    aab2:	b005      	add	sp, #20
    aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    aab8:	1a28      	subs	r0, r5, r0
    aaba:	eb66 0101 	sbc.w	r1, r6, r1
    aabe:	2801      	cmp	r0, #1
    aac0:	f171 0200 	sbcs.w	r2, r1, #0
    aac4:	dbf0      	blt.n	aaa8 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    aac6:	e9cd 0100 	strd	r0, r1, [sp]
    aaca:	465a      	mov	r2, fp
    aacc:	4621      	mov	r1, r4
    aace:	4650      	mov	r0, sl
    aad0:	f7fd fd92 	bl	85f8 <z_pend_curr>
	__asm__ volatile(
    aad4:	f04f 0320 	mov.w	r3, #32
    aad8:	f3ef 8411 	mrs	r4, BASEPRI
    aadc:	f383 8812 	msr	BASEPRI_MAX, r3
    aae0:	f3bf 8f6f 	isb	sy
	return k;
    aae4:	e7d6      	b.n	aa94 <k_heap_aligned_alloc+0x48>

0000aae6 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    aae6:	b538      	push	{r3, r4, r5, lr}
    aae8:	4604      	mov	r4, r0
    aaea:	f04f 0320 	mov.w	r3, #32
    aaee:	f3ef 8511 	mrs	r5, BASEPRI
    aaf2:	f383 8812 	msr	BASEPRI_MAX, r3
    aaf6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    aafa:	f7fe fc4c 	bl	9396 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    aafe:	f104 000c 	add.w	r0, r4, #12
    ab02:	f7ff ff11 	bl	a928 <z_unpend_all>
    ab06:	b130      	cbz	r0, ab16 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    ab08:	4629      	mov	r1, r5
    ab0a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    ab0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    ab12:	f7fd bdd5 	b.w	86c0 <z_reschedule>
	__asm__ volatile(
    ab16:	f385 8811 	msr	BASEPRI, r5
    ab1a:	f3bf 8f6f 	isb	sy
}
    ab1e:	bd38      	pop	{r3, r4, r5, pc}

0000ab20 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ab20:	4770      	bx	lr
	...
