
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	80 34 00 20 a1 39 00 00 a7 95 00 00 75 39 00 00     .4. .9......u9..
    1010:	75 39 00 00 75 39 00 00 75 39 00 00 00 00 00 00     u9..u9..u9......
	...
    102c:	dd 35 00 00 75 39 00 00 00 00 00 00 89 35 00 00     .5..u9.......5..
    103c:	75 39 00 00                                         u9..

00001040 <_irq_vector_table>:
    1040:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    1050:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    1060:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    1070:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    1080:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    1090:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10a0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10b0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10c0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10d0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10e0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..
    10f0:	8d 36 00 00 8d 36 00 00 8d 36 00 00 8d 36 00 00     .6...6...6...6..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <threadB>:
	}

}

void threadB(void *dummy1, void *dummy2, void *dummy3)
{
    13d4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dummy1);
	ARG_UNUSED(dummy2);
	ARG_UNUSED(dummy3);

	printk("thread_B: thread started \n");
    13d6:	4808      	ldr	r0, [pc, #32]	; (13f8 <threadB+0x24>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    13d8:	4d08      	ldr	r5, [pc, #32]	; (13fc <threadB+0x28>)
	{	

		if (k_sem_take(&my_sem, K_MSEC(50)) != 0) {
       // printk("Input data not available!\n");
    } else {
	printk("took a sem \n");
    13da:	4c09      	ldr	r4, [pc, #36]	; (1400 <threadB+0x2c>)
	printk("thread_B: thread started \n");
    13dc:	f007 fb4f 	bl	8a7e <printk>
    13e0:	f240 6267 	movw	r2, #1639	; 0x667
    13e4:	2300      	movs	r3, #0
    13e6:	4628      	mov	r0, r5
    13e8:	f006 fcac 	bl	7d44 <z_impl_k_sem_take>
		if (k_sem_take(&my_sem, K_MSEC(50)) != 0) {
    13ec:	2800      	cmp	r0, #0
    13ee:	d1f7      	bne.n	13e0 <threadB+0xc>
	printk("took a sem \n");
    13f0:	4620      	mov	r0, r4
    13f2:	f007 fb44 	bl	8a7e <printk>
		if (k_sem_take(&my_sem, K_MSEC(50)) != 0) {
    13f6:	e7f3      	b.n	13e0 <threadB+0xc>
    13f8:	0000a994 	.word	0x0000a994
    13fc:	20000208 	.word	0x20000208
    1400:	0000a9af 	.word	0x0000a9af

00001404 <as5600_refresh>:
{
    1404:	b513      	push	{r0, r1, r4, lr}
    1406:	4604      	mov	r4, r0
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
    1408:	6883      	ldr	r3, [r0, #8]
    140a:	2122      	movs	r1, #34	; 0x22
    140c:	68db      	ldr	r3, [r3, #12]
    140e:	4798      	blx	r3
	if (ret != 0){
    1410:	4601      	mov	r1, r0
    1412:	b110      	cbz	r0, 141a <as5600_refresh+0x16>
			printk("ono dis not good, ur err code is :,%d\n", ret);
    1414:	4805      	ldr	r0, [pc, #20]	; (142c <as5600_refresh+0x28>)
    1416:	f007 fb32 	bl	8a7e <printk>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    141a:	68a3      	ldr	r3, [r4, #8]
    141c:	466a      	mov	r2, sp
    141e:	691b      	ldr	r3, [r3, #16]
    1420:	2122      	movs	r1, #34	; 0x22
    1422:	4620      	mov	r0, r4
    1424:	4798      	blx	r3
}
    1426:	9800      	ldr	r0, [sp, #0]
    1428:	b002      	add	sp, #8
    142a:	bd10      	pop	{r4, pc}
    142c:	0000a9bc 	.word	0x0000a9bc

00001430 <threadA>:
{	
    1430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1434:	4c1b      	ldr	r4, [pc, #108]	; (14a4 <threadA+0x74>)
    1436:	4620      	mov	r0, r4
    1438:	f008 fcb0 	bl	9d9c <z_device_is_ready>
	if (as == NULL || !device_is_ready(as)) {
    143c:	b920      	cbnz	r0, 1448 <threadA+0x18>
}
    143e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("ono bad stuff sad no device tree\n");
    1442:	4819      	ldr	r0, [pc, #100]	; (14a8 <threadA+0x78>)
    1444:	f007 bb1b 	b.w	8a7e <printk>
	printk("device is %p, name is %s\n", as, as->name);
    1448:	6822      	ldr	r2, [r4, #0]
    144a:	4818      	ldr	r0, [pc, #96]	; (14ac <threadA+0x7c>)
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    144c:	4f18      	ldr	r7, [pc, #96]	; (14b0 <threadA+0x80>)
		printk("gave a sem \n");
    144e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 14b4 <threadA+0x84>
	printk("device is %p, name is %s\n", as, as->name);
    1452:	4621      	mov	r1, r4
    1454:	f007 fb13 	bl	8a7e <printk>
	int lastDegree = as5600_refresh(as);
    1458:	4620      	mov	r0, r4
    145a:	f7ff ffd3 	bl	1404 <as5600_refresh>
    145e:	4605      	mov	r5, r0
	printk("thread_a: thread started \n");
    1460:	4815      	ldr	r0, [pc, #84]	; (14b8 <threadA+0x88>)
    1462:	f007 fb0c 	bl	8a7e <printk>
		int degrees = as5600_refresh(as);
    1466:	4620      	mov	r0, r4
    1468:	f7ff ffcc 	bl	1404 <as5600_refresh>
        int deltaDegrees = degrees-lastDegree;
    146c:	1b43      	subs	r3, r0, r5
        if (deltaDegrees >= 12 ) {
    146e:	2b0b      	cmp	r3, #11
		int degrees = as5600_refresh(as);
    1470:	4606      	mov	r6, r0
        if (deltaDegrees >= 12 ) {
    1472:	dd0e      	ble.n	1492 <threadA+0x62>
    1474:	4638      	mov	r0, r7
    1476:	f006 fc41 	bl	7cfc <z_impl_k_sem_give>
		printk("gave a sem \n");
    147a:	4640      	mov	r0, r8
    147c:	f007 faff 	bl	8a7e <printk>
		printk("%d\n", as5600_refresh(as)); 
    1480:	4620      	mov	r0, r4
    1482:	f7ff ffbf 	bl	1404 <as5600_refresh>
    1486:	4601      	mov	r1, r0
    1488:	480c      	ldr	r0, [pc, #48]	; (14bc <threadA+0x8c>)
    148a:	f007 faf8 	bl	8a7e <printk>
            lastDegree=degrees;
    148e:	4635      	mov	r5, r6
    1490:	e7e9      	b.n	1466 <threadA+0x36>
        }else if(deltaDegrees <= -12 ){
    1492:	330b      	adds	r3, #11
    1494:	dae7      	bge.n	1466 <threadA+0x36>
    1496:	4638      	mov	r0, r7
    1498:	f006 fc30 	bl	7cfc <z_impl_k_sem_give>
		printk("gave a sem \n");
    149c:	4640      	mov	r0, r8
    149e:	f007 faee 	bl	8a7e <printk>
            lastDegree=degrees;
    14a2:	e7f4      	b.n	148e <threadA+0x5e>
    14a4:	0000a500 	.word	0x0000a500
    14a8:	0000a9e3 	.word	0x0000a9e3
    14ac:	0000aa05 	.word	0x0000aa05
    14b0:	20000208 	.word	0x20000208
    14b4:	0000aa3a 	.word	0x0000aa3a
    14b8:	0000aa1f 	.word	0x0000aa1f
    14bc:	0000a9df 	.word	0x0000a9df

000014c0 <main>:
}

#endif /* IS_ENABLED(CONFIG_USB_DEVICE_STACK_NEXT) */

int main(void)
{
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *const dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
    14c2:	2400      	movs	r4, #0
{
    14c4:	b08b      	sub	sp, #44	; 0x2c
#if defined(CONFIG_USB_DEVICE_STACK_NEXT)
	if (enable_usb_device_next()) {
		return 0;
	}
#else
	if (usb_enable(NULL)) {
    14c6:	4620      	mov	r0, r4
	uint32_t dtr = 0;
    14c8:	9409      	str	r4, [sp, #36]	; 0x24
	if (usb_enable(NULL)) {
    14ca:	f001 fa6b 	bl	29a4 <usb_enable>
    14ce:	2800      	cmp	r0, #0
    14d0:	d14c      	bne.n	156c <main+0xac>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    14d2:	4c28      	ldr	r4, [pc, #160]	; (1574 <main+0xb4>)
		return 0;
	}
#endif

	/* Poll if the DTR flag was set */
	while (!dtr) {
    14d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14d6:	2b00      	cmp	r3, #0
    14d8:	d03b      	beq.n	1552 <main+0x92>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		/* Give CPU resources to low priority threads. */
		k_sleep(K_MSEC(100));
	}
	
	k_thread_create(&threadA_data, threadA_stack_area,
    14da:	f04f 36ff 	mov.w	r6, #4294967295
    14de:	f04f 37ff 	mov.w	r7, #4294967295
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    14e2:	2400      	movs	r4, #0
    14e4:	2507      	movs	r5, #7
    14e6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    14ea:	e9cd 5403 	strd	r5, r4, [sp, #12]
    14ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
    14f2:	4b21      	ldr	r3, [pc, #132]	; (1578 <main+0xb8>)
    14f4:	4921      	ldr	r1, [pc, #132]	; (157c <main+0xbc>)
    14f6:	9400      	str	r4, [sp, #0]
    14f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    14fc:	4820      	ldr	r0, [pc, #128]	; (1580 <main+0xc0>)
    14fe:	f006 fa6f 	bl	79e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1502:	4920      	ldr	r1, [pc, #128]	; (1584 <main+0xc4>)
    1504:	481e      	ldr	r0, [pc, #120]	; (1580 <main+0xc0>)
    1506:	f008 fcc4 	bl	9e92 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    150a:	481d      	ldr	r0, [pc, #116]	; (1580 <main+0xc0>)
    150c:	f008 fcc4 	bl	9e98 <z_impl_k_thread_start>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1510:	4b1d      	ldr	r3, [pc, #116]	; (1588 <main+0xc8>)
    1512:	491e      	ldr	r1, [pc, #120]	; (158c <main+0xcc>)
    1514:	9400      	str	r4, [sp, #0]
    1516:	e9cd 6706 	strd	r6, r7, [sp, #24]
    151a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    151e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1522:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1526:	481a      	ldr	r0, [pc, #104]	; (1590 <main+0xd0>)
    1528:	f006 fa5a 	bl	79e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    152c:	4919      	ldr	r1, [pc, #100]	; (1594 <main+0xd4>)
    152e:	4818      	ldr	r0, [pc, #96]	; (1590 <main+0xd0>)
    1530:	f008 fcaf 	bl	9e92 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    1534:	4816      	ldr	r0, [pc, #88]	; (1590 <main+0xd0>)

	k_thread_start(&threadB_data);


	while (1) {
		printk("Hello World! %s\n", CONFIG_ARCH);
    1536:	4d18      	ldr	r5, [pc, #96]	; (1598 <main+0xd8>)
    1538:	4c18      	ldr	r4, [pc, #96]	; (159c <main+0xdc>)
    153a:	f008 fcad 	bl	9e98 <z_impl_k_thread_start>
    153e:	4629      	mov	r1, r5
    1540:	4620      	mov	r0, r4
    1542:	f007 fa9c 	bl	8a7e <printk>
	return z_impl_k_sleep(timeout);
    1546:	2100      	movs	r1, #0
    1548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    154c:	f007 f83c 	bl	85c8 <z_impl_k_sleep>
	while (1) {
    1550:	e7f5      	b.n	153e <main+0x7e>
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1552:	68a3      	ldr	r3, [r4, #8]
    1554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1556:	b11b      	cbz	r3, 1560 <main+0xa0>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    1558:	aa09      	add	r2, sp, #36	; 0x24
    155a:	2104      	movs	r1, #4
    155c:	4620      	mov	r0, r4
    155e:	4798      	blx	r3
    1560:	2100      	movs	r1, #0
    1562:	f640 40cd 	movw	r0, #3277	; 0xccd
    1566:	f007 f82f 	bl	85c8 <z_impl_k_sleep>
    156a:	e7b3      	b.n	14d4 <main+0x14>
		k_sleep(K_SECONDS(1));
	}
    156c:	4620      	mov	r0, r4
    156e:	b00b      	add	sp, #44	; 0x2c
    1570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1572:	bf00      	nop
    1574:	0000a4d8 	.word	0x0000a4d8
    1578:	00001431 	.word	0x00001431
    157c:	20001a00 	.word	0x20001a00
    1580:	200003b0 	.word	0x200003b0
    1584:	0000aa47 	.word	0x0000aa47
    1588:	000013d5 	.word	0x000013d5
    158c:	200015c0 	.word	0x200015c0
    1590:	20000330 	.word	0x20000330
    1594:	0000aa50 	.word	0x0000aa50
    1598:	0000aa59 	.word	0x0000aa59
    159c:	0000aa5d 	.word	0x0000aa5d

000015a0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    15a0:	4b01      	ldr	r3, [pc, #4]	; (15a8 <char_out+0x8>)
    15a2:	681b      	ldr	r3, [r3, #0]
    15a4:	4718      	bx	r3
    15a6:	bf00      	nop
    15a8:	200000b8 	.word	0x200000b8

000015ac <__printk_hook_install>:
	_char_out = fn;
    15ac:	4b01      	ldr	r3, [pc, #4]	; (15b4 <__printk_hook_install+0x8>)
    15ae:	6018      	str	r0, [r3, #0]
}
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	200000b8 	.word	0x200000b8

000015b8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    15b8:	b507      	push	{r0, r1, r2, lr}
    15ba:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    15bc:	2100      	movs	r1, #0
    15be:	4602      	mov	r2, r0
    15c0:	9100      	str	r1, [sp, #0]
    15c2:	4803      	ldr	r0, [pc, #12]	; (15d0 <vprintk+0x18>)
    15c4:	f000 f914 	bl	17f0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    15c8:	b003      	add	sp, #12
    15ca:	f85d fb04 	ldr.w	pc, [sp], #4
    15ce:	bf00      	nop
    15d0:	000015a1 	.word	0x000015a1

000015d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    15d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15d8:	8b05      	ldrh	r5, [r0, #24]
{
    15da:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    15dc:	0728      	lsls	r0, r5, #28
{
    15de:	4690      	mov	r8, r2
	if (processing) {
    15e0:	d411      	bmi.n	1606 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    15e2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15e4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    15e8:	f040 80cd 	bne.w	1786 <process_event+0x1b2>
			evt = process_recheck(mgr);
    15ec:	4620      	mov	r0, r4
    15ee:	f007 fc3d 	bl	8e6c <process_recheck>
		}

		if (evt == EVT_NOP) {
    15f2:	b178      	cbz	r0, 1614 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    15f4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15f6:	8b21      	ldrh	r1, [r4, #24]
    15f8:	2804      	cmp	r0, #4
    15fa:	d811      	bhi.n	1620 <process_event+0x4c>
    15fc:	e8df f000 	tbb	[pc, r0]
    1600:	856d10c3 	.word	0x856d10c3
    1604:	95          	.byte	0x95
    1605:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1606:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1608:	bf0c      	ite	eq
    160a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    160e:	f045 0520 	orrne.w	r5, r5, #32
    1612:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1614:	f388 8811 	msr	BASEPRI, r8
    1618:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1620:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1624:	45aa      	cmp	sl, r5
    1626:	f000 80a6 	beq.w	1776 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    162a:	2700      	movs	r7, #0
    162c:	46b9      	mov	r9, r7
    162e:	463e      	mov	r6, r7
    1630:	68a3      	ldr	r3, [r4, #8]
    1632:	2b00      	cmp	r3, #0
    1634:	f000 80bd 	beq.w	17b2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1638:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    163c:	8321      	strh	r1, [r4, #24]
    163e:	f388 8811 	msr	BASEPRI, r8
    1642:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1646:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1648:	2900      	cmp	r1, #0
    164a:	f000 80bb 	beq.w	17c4 <process_event+0x1f0>
	return node->next;
    164e:	680d      	ldr	r5, [r1, #0]
    1650:	2900      	cmp	r1, #0
    1652:	f000 80b7 	beq.w	17c4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1656:	f8d1 8004 	ldr.w	r8, [r1, #4]
    165a:	4633      	mov	r3, r6
    165c:	4652      	mov	r2, sl
    165e:	4620      	mov	r0, r4
    1660:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1662:	2d00      	cmp	r5, #0
    1664:	d076      	beq.n	1754 <process_event+0x180>
    1666:	682b      	ldr	r3, [r5, #0]
    1668:	4629      	mov	r1, r5
    166a:	461d      	mov	r5, r3
    166c:	e7f0      	b.n	1650 <process_event+0x7c>
    166e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1672:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1674:	2a01      	cmp	r2, #1
    1676:	d81b      	bhi.n	16b0 <process_event+0xdc>
	list->head = NULL;
    1678:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    167a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    167e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1680:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1682:	b289      	uxth	r1, r1
	list->tail = NULL;
    1684:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1688:	d109      	bne.n	169e <process_event+0xca>
    168a:	463b      	mov	r3, r7
    168c:	e003      	b.n	1696 <process_event+0xc2>
				mgr->refs += 1U;
    168e:	8b62      	ldrh	r2, [r4, #26]
    1690:	3201      	adds	r2, #1
    1692:	8362      	strh	r2, [r4, #26]
	return node->next;
    1694:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1696:	2b00      	cmp	r3, #0
    1698:	d1f9      	bne.n	168e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    169a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    169e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    16a0:	4620      	mov	r0, r4
    16a2:	f007 fbe3 	bl	8e6c <process_recheck>
    16a6:	2800      	cmp	r0, #0
    16a8:	d07b      	beq.n	17a2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16aa:	f041 0120 	orr.w	r1, r1, #32
    16ae:	e077      	b.n	17a0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    16b0:	2b04      	cmp	r3, #4
    16b2:	d10a      	bne.n	16ca <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16b4:	f021 0107 	bic.w	r1, r1, #7
    16b8:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    16ba:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    16bc:	4620      	mov	r0, r4
    16be:	f007 fbd5 	bl	8e6c <process_recheck>
    16c2:	b110      	cbz	r0, 16ca <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    16c4:	f041 0120 	orr.w	r1, r1, #32
    16c8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16ca:	8b21      	ldrh	r1, [r4, #24]
    16cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    16d0:	45aa      	cmp	sl, r5
    16d2:	d050      	beq.n	1776 <process_event+0x1a2>
    16d4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    16d6:	46b9      	mov	r9, r7
    16d8:	e7aa      	b.n	1630 <process_event+0x5c>
			transit = mgr->transitions->start;
    16da:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16dc:	f021 0107 	bic.w	r1, r1, #7
    16e0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    16e4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    16e6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16ea:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16ec:	d12d      	bne.n	174a <process_event+0x176>
		    || (transit != NULL)) {
    16ee:	f1b9 0f00 	cmp.w	r9, #0
    16f2:	d040      	beq.n	1776 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    16f4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    16f8:	8321      	strh	r1, [r4, #24]
    16fa:	f388 8811 	msr	BASEPRI, r8
    16fe:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1702:	493a      	ldr	r1, [pc, #232]	; (17ec <process_event+0x218>)
    1704:	4620      	mov	r0, r4
    1706:	47c8      	blx	r9
    1708:	e029      	b.n	175e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    170a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    170e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1710:	f041 0104 	orr.w	r1, r1, #4
    1714:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1716:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1718:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    171c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    171e:	d0e6      	beq.n	16ee <process_event+0x11a>
    1720:	2700      	movs	r7, #0
		res = 0;
    1722:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1724:	f04f 0a04 	mov.w	sl, #4
    1728:	e782      	b.n	1630 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    172e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1730:	f041 0105 	orr.w	r1, r1, #5
    1734:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1736:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1738:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    173c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    173e:	d0d6      	beq.n	16ee <process_event+0x11a>
    1740:	2700      	movs	r7, #0
		res = 0;
    1742:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1744:	f04f 0a05 	mov.w	sl, #5
    1748:	e772      	b.n	1630 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    174a:	2700      	movs	r7, #0
		res = 0;
    174c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    174e:	f04f 0a06 	mov.w	sl, #6
    1752:	e76d      	b.n	1630 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1754:	462b      	mov	r3, r5
    1756:	e787      	b.n	1668 <process_event+0x94>
			if (transit != NULL) {
    1758:	f1b9 0f00 	cmp.w	r9, #0
    175c:	d1d1      	bne.n	1702 <process_event+0x12e>
	__asm__ volatile(
    175e:	f04f 0320 	mov.w	r3, #32
    1762:	f3ef 8811 	mrs	r8, BASEPRI
    1766:	f383 8812 	msr	BASEPRI_MAX, r3
    176a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    176e:	8b23      	ldrh	r3, [r4, #24]
    1770:	f023 0308 	bic.w	r3, r3, #8
    1774:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1776:	8b25      	ldrh	r5, [r4, #24]
    1778:	06ea      	lsls	r2, r5, #27
    177a:	d52e      	bpl.n	17da <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    177c:	f025 0310 	bic.w	r3, r5, #16
    1780:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1782:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1786:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1788:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    178a:	2e00      	cmp	r6, #0
    178c:	f6bf af6f 	bge.w	166e <process_event+0x9a>
	list->head = NULL;
    1790:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1792:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1794:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1798:	f021 0107 	bic.w	r1, r1, #7
    179c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17a0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17a2:	8b21      	ldrh	r1, [r4, #24]
    17a4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17a8:	45aa      	cmp	sl, r5
    17aa:	f04f 0900 	mov.w	r9, #0
    17ae:	f47f af3f 	bne.w	1630 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    17b2:	2f00      	cmp	r7, #0
    17b4:	d09b      	beq.n	16ee <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17b6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17ba:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    17bc:	f388 8811 	msr	BASEPRI, r8
    17c0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    17c4:	2f00      	cmp	r7, #0
    17c6:	d0c7      	beq.n	1758 <process_event+0x184>
	return node->next;
    17c8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    17ca:	4639      	mov	r1, r7
    17cc:	4633      	mov	r3, r6
    17ce:	4652      	mov	r2, sl
    17d0:	4620      	mov	r0, r4
    17d2:	f007 fb77 	bl	8ec4 <notify_one>
	list->head = node;
    17d6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    17d8:	e7f4      	b.n	17c4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    17da:	06ab      	lsls	r3, r5, #26
    17dc:	f57f af1a 	bpl.w	1614 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    17e0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17e4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    17e6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    17ea:	e6ff      	b.n	15ec <process_event+0x18>
    17ec:	00008ef1 	.word	0x00008ef1

000017f0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    17f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f4:	4681      	mov	r9, r0
    17f6:	b095      	sub	sp, #84	; 0x54
    17f8:	468b      	mov	fp, r1
    17fa:	4617      	mov	r7, r2
    17fc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    17fe:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1800:	7838      	ldrb	r0, [r7, #0]
    1802:	b908      	cbnz	r0, 1808 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1804:	4628      	mov	r0, r5
    1806:	e358      	b.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
			OUTC(*fp++);
    1808:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    180a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    180c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    180e:	d006      	beq.n	181e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1810:	4659      	mov	r1, fp
    1812:	47c8      	blx	r9
    1814:	2800      	cmp	r0, #0
    1816:	f2c0 8350 	blt.w	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    181a:	3501      	adds	r5, #1
		if (bps == NULL) {
    181c:	e1fb      	b.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		} state = {
    181e:	2218      	movs	r2, #24
    1820:	2100      	movs	r1, #0
    1822:	a80e      	add	r0, sp, #56	; 0x38
    1824:	f007 fed8 	bl	95d8 <memset>
	if (*sp == '%') {
    1828:	787b      	ldrb	r3, [r7, #1]
    182a:	2b25      	cmp	r3, #37	; 0x25
    182c:	d07d      	beq.n	192a <CONFIG_USB_DEVICE_VID+0x15>
    182e:	2300      	movs	r3, #0
    1830:	1c78      	adds	r0, r7, #1
    1832:	4698      	mov	r8, r3
    1834:	469e      	mov	lr, r3
    1836:	469c      	mov	ip, r3
    1838:	461e      	mov	r6, r3
    183a:	4601      	mov	r1, r0
		switch (*sp) {
    183c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1840:	2a2b      	cmp	r2, #43	; 0x2b
    1842:	f000 80a1 	beq.w	1988 <CONFIG_USB_DEVICE_VID+0x73>
    1846:	f200 8098 	bhi.w	197a <CONFIG_USB_DEVICE_VID+0x65>
    184a:	2a20      	cmp	r2, #32
    184c:	f000 809f 	beq.w	198e <CONFIG_USB_DEVICE_VID+0x79>
    1850:	2a23      	cmp	r2, #35	; 0x23
    1852:	f000 809f 	beq.w	1994 <CONFIG_USB_DEVICE_VID+0x7f>
    1856:	b12b      	cbz	r3, 1864 <z_cbvprintf_impl+0x74>
    1858:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1860:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1864:	f1b8 0f00 	cmp.w	r8, #0
    1868:	d005      	beq.n	1876 <z_cbvprintf_impl+0x86>
    186a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    186e:	f043 0320 	orr.w	r3, r3, #32
    1872:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1876:	f1be 0f00 	cmp.w	lr, #0
    187a:	d005      	beq.n	1888 <z_cbvprintf_impl+0x98>
    187c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1880:	f043 0310 	orr.w	r3, r3, #16
    1884:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1888:	f1bc 0f00 	cmp.w	ip, #0
    188c:	d005      	beq.n	189a <z_cbvprintf_impl+0xaa>
    188e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1892:	f043 0308 	orr.w	r3, r3, #8
    1896:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    189a:	b12e      	cbz	r6, 18a8 <z_cbvprintf_impl+0xb8>
    189c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18a0:	f043 0304 	orr.w	r3, r3, #4
    18a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    18a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18ac:	f003 0044 	and.w	r0, r3, #68	; 0x44
    18b0:	2844      	cmp	r0, #68	; 0x44
    18b2:	d103      	bne.n	18bc <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    18b4:	f36f 1386 	bfc	r3, #6, #1
    18b8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    18bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    18c0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    18c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    18c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    18ca:	d17f      	bne.n	19cc <CONFIG_USB_DEVICE_VID+0xb7>
		conv->width_star = true;
    18cc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    18d0:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    18d4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    18d6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    18da:	781a      	ldrb	r2, [r3, #0]
    18dc:	2a2e      	cmp	r2, #46	; 0x2e
    18de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    18e2:	bf0c      	ite	eq
    18e4:	2101      	moveq	r1, #1
    18e6:	2100      	movne	r1, #0
    18e8:	f361 0241 	bfi	r2, r1, #1, #1
    18ec:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    18f0:	d178      	bne.n	19e4 <CONFIG_USB_DEVICE_VID+0xcf>
	if (*sp == '*') {
    18f2:	785a      	ldrb	r2, [r3, #1]
    18f4:	2a2a      	cmp	r2, #42	; 0x2a
    18f6:	d06e      	beq.n	19d6 <CONFIG_USB_DEVICE_VID+0xc1>
	++sp;
    18f8:	3301      	adds	r3, #1
	size_t val = 0;
    18fa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    18fc:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1900:	4619      	mov	r1, r3
    1902:	f811 0b01 	ldrb.w	r0, [r1], #1
    1906:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    190a:	2e09      	cmp	r6, #9
    190c:	f240 8095 	bls.w	1a3a <CONFIG_USB_DEVICE_VID+0x125>
	conv->unsupported |= ((conv->prec_value < 0)
    1910:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1914:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1916:	f3c1 0040 	ubfx	r0, r1, #1, #1
    191a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    191e:	460a      	mov	r2, r1
    1920:	f360 0241 	bfi	r2, r0, #1, #1
    1924:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1928:	e05c      	b.n	19e4 <CONFIG_USB_DEVICE_VID+0xcf>
		conv->specifier = *sp++;
    192a:	1cba      	adds	r2, r7, #2
    192c:	9203      	str	r2, [sp, #12]
    192e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1932:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1936:	07da      	lsls	r2, r3, #31
    1938:	f140 812e 	bpl.w	1b98 <CONFIG_USB_DEVICE_VID+0x283>
			width = va_arg(ap, int);
    193c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1940:	f1b8 0f00 	cmp.w	r8, #0
    1944:	da07      	bge.n	1956 <CONFIG_USB_DEVICE_VID+0x41>
				conv->flag_dash = true;
    1946:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    194a:	f042 0204 	orr.w	r2, r2, #4
    194e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1952:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1956:	075e      	lsls	r6, r3, #29
    1958:	f140 8127 	bpl.w	1baa <CONFIG_USB_DEVICE_VID+0x295>
			int arg = va_arg(ap, int);
    195c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1960:	f1ba 0f00 	cmp.w	sl, #0
    1964:	f280 8126 	bge.w	1bb4 <CONFIG_USB_DEVICE_VID+0x29f>
				conv->prec_present = false;
    1968:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    196c:	f36f 0341 	bfc	r3, #1, #1
    1970:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1974:	f04f 3aff 	mov.w	sl, #4294967295
    1978:	e11c      	b.n	1bb4 <CONFIG_USB_DEVICE_VID+0x29f>
		switch (*sp) {
    197a:	2a2d      	cmp	r2, #45	; 0x2d
    197c:	d00d      	beq.n	199a <CONFIG_USB_DEVICE_VID+0x85>
    197e:	2a30      	cmp	r2, #48	; 0x30
    1980:	f47f af69 	bne.w	1856 <z_cbvprintf_impl+0x66>
    1984:	2301      	movs	r3, #1
	} while (loop);
    1986:	e758      	b.n	183a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1988:	f04f 0c01 	mov.w	ip, #1
    198c:	e755      	b.n	183a <z_cbvprintf_impl+0x4a>
    198e:	f04f 0e01 	mov.w	lr, #1
    1992:	e752      	b.n	183a <z_cbvprintf_impl+0x4a>
    1994:	f04f 0801 	mov.w	r8, #1
    1998:	e74f      	b.n	183a <z_cbvprintf_impl+0x4a>
    199a:	2601      	movs	r6, #1
    199c:	e74d      	b.n	183a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    199e:	fb0e 6202 	mla	r2, lr, r2, r6
    19a2:	3a30      	subs	r2, #48	; 0x30
    19a4:	4603      	mov	r3, r0
    19a6:	4618      	mov	r0, r3
    19a8:	f810 6b01 	ldrb.w	r6, [r0], #1
    19ac:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    19b0:	f1bc 0f09 	cmp.w	ip, #9
    19b4:	d9f3      	bls.n	199e <CONFIG_USB_DEVICE_VID+0x89>
	if (sp != wp) {
    19b6:	4299      	cmp	r1, r3
    19b8:	d08f      	beq.n	18da <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    19ba:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    19be:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    19c0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    19c2:	f362 0141 	bfi	r1, r2, #1, #1
    19c6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    19ca:	e786      	b.n	18da <z_cbvprintf_impl+0xea>
    19cc:	460b      	mov	r3, r1
	size_t val = 0;
    19ce:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    19d0:	f04f 0e0a 	mov.w	lr, #10
    19d4:	e7e7      	b.n	19a6 <CONFIG_USB_DEVICE_VID+0x91>
		conv->prec_star = true;
    19d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    19da:	f042 0204 	orr.w	r2, r2, #4
    19de:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    19e2:	3302      	adds	r3, #2
	switch (*sp) {
    19e4:	781a      	ldrb	r2, [r3, #0]
    19e6:	2a6c      	cmp	r2, #108	; 0x6c
    19e8:	d047      	beq.n	1a7a <CONFIG_USB_DEVICE_VID+0x165>
    19ea:	d82b      	bhi.n	1a44 <CONFIG_USB_DEVICE_VID+0x12f>
    19ec:	2a68      	cmp	r2, #104	; 0x68
    19ee:	d031      	beq.n	1a54 <CONFIG_USB_DEVICE_VID+0x13f>
    19f0:	2a6a      	cmp	r2, #106	; 0x6a
    19f2:	d04b      	beq.n	1a8c <CONFIG_USB_DEVICE_VID+0x177>
    19f4:	2a4c      	cmp	r2, #76	; 0x4c
    19f6:	d051      	beq.n	1a9c <CONFIG_USB_DEVICE_VID+0x187>
	conv->specifier = *sp++;
    19f8:	461a      	mov	r2, r3
    19fa:	f812 3b01 	ldrb.w	r3, [r2], #1
    19fe:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1a00:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a02:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1a06:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1a0a:	f200 80be 	bhi.w	1b8a <CONFIG_USB_DEVICE_VID+0x275>
    1a0e:	2b6d      	cmp	r3, #109	; 0x6d
    1a10:	d851      	bhi.n	1ab6 <CONFIG_USB_DEVICE_VID+0x1a1>
    1a12:	2b69      	cmp	r3, #105	; 0x69
    1a14:	f200 80b9 	bhi.w	1b8a <CONFIG_USB_DEVICE_VID+0x275>
    1a18:	2b57      	cmp	r3, #87	; 0x57
    1a1a:	d867      	bhi.n	1aec <CONFIG_USB_DEVICE_VID+0x1d7>
    1a1c:	2b41      	cmp	r3, #65	; 0x41
    1a1e:	d003      	beq.n	1a28 <CONFIG_USB_DEVICE_VID+0x113>
    1a20:	3b45      	subs	r3, #69	; 0x45
    1a22:	2b02      	cmp	r3, #2
    1a24:	f200 80b1 	bhi.w	1b8a <CONFIG_USB_DEVICE_VID+0x275>
		conv->specifier_cat = SPECIFIER_FP;
    1a28:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a2c:	2204      	movs	r2, #4
    1a2e:	f362 0302 	bfi	r3, r2, #0, #3
    1a32:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1a36:	2301      	movs	r3, #1
			break;
    1a38:	e073      	b.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
		val = 10U * val + *sp++ - '0';
    1a3a:	fb0c 0202 	mla	r2, ip, r2, r0
    1a3e:	3a30      	subs	r2, #48	; 0x30
    1a40:	460b      	mov	r3, r1
    1a42:	e75d      	b.n	1900 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    1a44:	2a74      	cmp	r2, #116	; 0x74
    1a46:	d025      	beq.n	1a94 <CONFIG_USB_DEVICE_VID+0x17f>
    1a48:	2a7a      	cmp	r2, #122	; 0x7a
    1a4a:	d1d5      	bne.n	19f8 <CONFIG_USB_DEVICE_VID+0xe3>
		conv->length_mod = LENGTH_Z;
    1a4c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a50:	2106      	movs	r1, #6
    1a52:	e00c      	b.n	1a6e <CONFIG_USB_DEVICE_VID+0x159>
		if (*++sp == 'h') {
    1a54:	785a      	ldrb	r2, [r3, #1]
    1a56:	2a68      	cmp	r2, #104	; 0x68
    1a58:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a5c:	d106      	bne.n	1a6c <CONFIG_USB_DEVICE_VID+0x157>
			conv->length_mod = LENGTH_HH;
    1a5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1a60:	f361 02c6 	bfi	r2, r1, #3, #4
    1a64:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1a68:	3302      	adds	r3, #2
    1a6a:	e7c5      	b.n	19f8 <CONFIG_USB_DEVICE_VID+0xe3>
			conv->length_mod = LENGTH_H;
    1a6c:	2102      	movs	r1, #2
    1a6e:	f361 02c6 	bfi	r2, r1, #3, #4
    1a72:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1a76:	3301      	adds	r3, #1
    1a78:	e7be      	b.n	19f8 <CONFIG_USB_DEVICE_VID+0xe3>
		if (*++sp == 'l') {
    1a7a:	785a      	ldrb	r2, [r3, #1]
    1a7c:	2a6c      	cmp	r2, #108	; 0x6c
    1a7e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a82:	d101      	bne.n	1a88 <CONFIG_USB_DEVICE_VID+0x173>
			conv->length_mod = LENGTH_LL;
    1a84:	2104      	movs	r1, #4
    1a86:	e7eb      	b.n	1a60 <CONFIG_USB_DEVICE_VID+0x14b>
			conv->length_mod = LENGTH_L;
    1a88:	2103      	movs	r1, #3
    1a8a:	e7f0      	b.n	1a6e <CONFIG_USB_DEVICE_VID+0x159>
		conv->length_mod = LENGTH_J;
    1a8c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a90:	2105      	movs	r1, #5
    1a92:	e7ec      	b.n	1a6e <CONFIG_USB_DEVICE_VID+0x159>
		conv->length_mod = LENGTH_T;
    1a94:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1a98:	2107      	movs	r1, #7
    1a9a:	e7e8      	b.n	1a6e <CONFIG_USB_DEVICE_VID+0x159>
		conv->unsupported = true;
    1a9c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1aa0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1aa4:	f022 0202 	bic.w	r2, r2, #2
    1aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1aac:	f042 0202 	orr.w	r2, r2, #2
    1ab0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1ab4:	e7df      	b.n	1a76 <CONFIG_USB_DEVICE_VID+0x161>
	switch (conv->specifier) {
    1ab6:	3b6e      	subs	r3, #110	; 0x6e
    1ab8:	b2d9      	uxtb	r1, r3
    1aba:	2301      	movs	r3, #1
    1abc:	408b      	lsls	r3, r1
    1abe:	f240 4182 	movw	r1, #1154	; 0x482
    1ac2:	420b      	tst	r3, r1
    1ac4:	d137      	bne.n	1b36 <CONFIG_USB_DEVICE_VID+0x221>
    1ac6:	f013 0f24 	tst.w	r3, #36	; 0x24
    1aca:	d151      	bne.n	1b70 <CONFIG_USB_DEVICE_VID+0x25b>
    1acc:	07d8      	lsls	r0, r3, #31
    1ace:	d55c      	bpl.n	1b8a <CONFIG_USB_DEVICE_VID+0x275>
		conv->specifier_cat = SPECIFIER_PTR;
    1ad0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1ad4:	2103      	movs	r1, #3
    1ad6:	f361 0302 	bfi	r3, r1, #0, #3
    1ada:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ade:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1ae2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1ae6:	424b      	negs	r3, r1
    1ae8:	414b      	adcs	r3, r1
    1aea:	e01a      	b.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
	switch (conv->specifier) {
    1aec:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1af0:	b2c9      	uxtb	r1, r1
    1af2:	2001      	movs	r0, #1
    1af4:	fa00 f101 	lsl.w	r1, r0, r1
    1af8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1afc:	d194      	bne.n	1a28 <CONFIG_USB_DEVICE_VID+0x113>
    1afe:	f640 0601 	movw	r6, #2049	; 0x801
    1b02:	4231      	tst	r1, r6
    1b04:	d11d      	bne.n	1b42 <CONFIG_USB_DEVICE_VID+0x22d>
    1b06:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1b0a:	d03e      	beq.n	1b8a <CONFIG_USB_DEVICE_VID+0x275>
		conv->specifier_cat = SPECIFIER_SINT;
    1b0c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b10:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b14:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1b18:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1b1a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b1e:	d034      	beq.n	1b8a <CONFIG_USB_DEVICE_VID+0x275>
	bool unsupported = false;
    1b20:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1b22:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1b26:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1b2a:	430b      	orrs	r3, r1
    1b2c:	f363 0241 	bfi	r2, r3, #1, #1
    1b30:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1b34:	e6fd      	b.n	1932 <CONFIG_USB_DEVICE_VID+0x1d>
		conv->specifier_cat = SPECIFIER_UINT;
    1b36:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b3a:	2102      	movs	r1, #2
    1b3c:	f361 0302 	bfi	r3, r1, #0, #3
    1b40:	e7e8      	b.n	1b14 <CONFIG_USB_DEVICE_VID+0x1ff>
    1b42:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1b46:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b48:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1b4c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b50:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1b52:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1b56:	bf02      	ittt	eq
    1b58:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1b5c:	f041 0101 	orreq.w	r1, r1, #1
    1b60:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1b64:	2b63      	cmp	r3, #99	; 0x63
    1b66:	d1db      	bne.n	1b20 <CONFIG_USB_DEVICE_VID+0x20b>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1b68:	1e13      	subs	r3, r2, #0
    1b6a:	bf18      	it	ne
    1b6c:	2301      	movne	r3, #1
    1b6e:	e7d8      	b.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
		conv->specifier_cat = SPECIFIER_PTR;
    1b70:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1b74:	2103      	movs	r1, #3
    1b76:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1b7a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1b7e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1b82:	bf14      	ite	ne
    1b84:	2301      	movne	r3, #1
    1b86:	2300      	moveq	r3, #0
    1b88:	e7cb      	b.n	1b22 <CONFIG_USB_DEVICE_VID+0x20d>
		conv->invalid = true;
    1b8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1b8e:	f043 0301 	orr.w	r3, r3, #1
    1b92:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1b96:	e7c3      	b.n	1b20 <CONFIG_USB_DEVICE_VID+0x20b>
		} else if (conv->width_present) {
    1b98:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1b9c:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1b9e:	bfb4      	ite	lt
    1ba0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1ba4:	f04f 38ff 	movge.w	r8, #4294967295
    1ba8:	e6d5      	b.n	1956 <CONFIG_USB_DEVICE_VID+0x41>
		} else if (conv->prec_present) {
    1baa:	0798      	lsls	r0, r3, #30
    1bac:	f57f aee2 	bpl.w	1974 <CONFIG_USB_DEVICE_VID+0x5f>
			precision = conv->prec_value;
    1bb0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1bb4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1bb8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1bba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1bbe:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1bc2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1bc6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1bc8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1bcc:	d133      	bne.n	1c36 <CONFIG_USB_DEVICE_VID+0x321>
			switch (length_mod) {
    1bce:	1ecb      	subs	r3, r1, #3
    1bd0:	2b04      	cmp	r3, #4
    1bd2:	d804      	bhi.n	1bde <CONFIG_USB_DEVICE_VID+0x2c9>
    1bd4:	e8df f003 	tbb	[pc, r3]
    1bd8:	21464621 	.word	0x21464621
    1bdc:	21          	.byte	0x21
    1bdd:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1bde:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1be0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1be2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1be6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1bea:	d11c      	bne.n	1c26 <CONFIG_USB_DEVICE_VID+0x311>
				value->sint = (signed char)value->sint;
    1bec:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1bf0:	17da      	asrs	r2, r3, #31
    1bf2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1bf6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1bf8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1bfc:	f013 0603 	ands.w	r6, r3, #3
    1c00:	d050      	beq.n	1ca4 <CONFIG_USB_DEVICE_VID+0x38f>
			OUTS(sp, fp);
    1c02:	9b03      	ldr	r3, [sp, #12]
    1c04:	463a      	mov	r2, r7
    1c06:	4659      	mov	r1, fp
    1c08:	4648      	mov	r0, r9
    1c0a:	f007 fa8f 	bl	912c <outs>
    1c0e:	2800      	cmp	r0, #0
    1c10:	f2c0 8153 	blt.w	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1c14:	4405      	add	r5, r0
			continue;
    1c16:	9f03      	ldr	r7, [sp, #12]
    1c18:	e5f2      	b.n	1800 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1c1a:	f854 3b04 	ldr.w	r3, [r4], #4
    1c1e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1c20:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1c24:	e7e8      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
			} else if (length_mod == LENGTH_H) {
    1c26:	2902      	cmp	r1, #2
    1c28:	d1e5      	bne.n	1bf6 <CONFIG_USB_DEVICE_VID+0x2e1>
				value->sint = (short)value->sint;
    1c2a:	b21a      	sxth	r2, r3
    1c2c:	f343 33c0 	sbfx	r3, r3, #15, #1
    1c30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1c34:	e7df      	b.n	1bf6 <CONFIG_USB_DEVICE_VID+0x2e1>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1c36:	2b02      	cmp	r3, #2
    1c38:	d124      	bne.n	1c84 <CONFIG_USB_DEVICE_VID+0x36f>
			switch (length_mod) {
    1c3a:	1ecb      	subs	r3, r1, #3
    1c3c:	2b04      	cmp	r3, #4
    1c3e:	d804      	bhi.n	1c4a <CONFIG_USB_DEVICE_VID+0x335>
    1c40:	e8df f003 	tbb	[pc, r3]
    1c44:	18101018 	.word	0x18101018
    1c48:	18          	.byte	0x18
    1c49:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1c4a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1c4c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1c50:	f04f 0200 	mov.w	r2, #0
    1c54:	d014      	beq.n	1c80 <CONFIG_USB_DEVICE_VID+0x36b>
			} else if (length_mod == LENGTH_H) {
    1c56:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1c58:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1c5c:	d1cc      	bne.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
				value->uint = (unsigned short)value->uint;
    1c5e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1c60:	930e      	str	r3, [sp, #56]	; 0x38
    1c62:	e7c9      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
					(uint_value_type)va_arg(ap,
    1c64:	3407      	adds	r4, #7
    1c66:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1c6a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1c6e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1c72:	e7c1      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
					(uint_value_type)va_arg(ap, size_t);
    1c74:	f854 3b04 	ldr.w	r3, [r4], #4
    1c78:	930e      	str	r3, [sp, #56]	; 0x38
    1c7a:	2300      	movs	r3, #0
    1c7c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1c7e:	e7bb      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
				value->uint = (unsigned char)value->uint;
    1c80:	b2db      	uxtb	r3, r3
    1c82:	e7cd      	b.n	1c20 <CONFIG_USB_DEVICE_VID+0x30b>
		} else if (specifier_cat == SPECIFIER_FP) {
    1c84:	2b04      	cmp	r3, #4
    1c86:	d108      	bne.n	1c9a <CONFIG_USB_DEVICE_VID+0x385>
					(sint_value_type)va_arg(ap, long long);
    1c88:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1c8a:	f024 0407 	bic.w	r4, r4, #7
    1c8e:	e9d4 2300 	ldrd	r2, r3, [r4]
    1c92:	3408      	adds	r4, #8
    1c94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1c98:	e7ae      	b.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1c9a:	2b03      	cmp	r3, #3
    1c9c:	d1ac      	bne.n	1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>
			value->ptr = va_arg(ap, void *);
    1c9e:	f854 3b04 	ldr.w	r3, [r4], #4
    1ca2:	e7dd      	b.n	1c60 <CONFIG_USB_DEVICE_VID+0x34b>
		switch (conv->specifier) {
    1ca4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1ca8:	2878      	cmp	r0, #120	; 0x78
    1caa:	d8b4      	bhi.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
    1cac:	2862      	cmp	r0, #98	; 0x62
    1cae:	d81c      	bhi.n	1cea <CONFIG_USB_DEVICE_VID+0x3d5>
    1cb0:	2825      	cmp	r0, #37	; 0x25
    1cb2:	f43f adad 	beq.w	1810 <z_cbvprintf_impl+0x20>
    1cb6:	2858      	cmp	r0, #88	; 0x58
    1cb8:	d1ad      	bne.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1cba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cbe:	9300      	str	r3, [sp, #0]
    1cc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1cc4:	ab08      	add	r3, sp, #32
    1cc6:	aa10      	add	r2, sp, #64	; 0x40
    1cc8:	f007 f9ea 	bl	90a0 <encode_uint>
			if (precision >= 0) {
    1ccc:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1cd0:	4607      	mov	r7, r0
			if (precision >= 0) {
    1cd2:	f280 809a 	bge.w	1e0a <CONFIG_USB_DEVICE_VID+0x4f5>
		if (bps == NULL) {
    1cd6:	2f00      	cmp	r7, #0
    1cd8:	d09d      	beq.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		size_t nj_len = (bpe - bps);
    1cda:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cde:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1ce0:	2e00      	cmp	r6, #0
    1ce2:	f000 80c1 	beq.w	1e68 <CONFIG_USB_DEVICE_VID+0x553>
			nj_len += 1U;
    1ce6:	3001      	adds	r0, #1
    1ce8:	e0be      	b.n	1e68 <CONFIG_USB_DEVICE_VID+0x553>
		switch (conv->specifier) {
    1cea:	3863      	subs	r0, #99	; 0x63
    1cec:	2815      	cmp	r0, #21
    1cee:	d892      	bhi.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
    1cf0:	a201      	add	r2, pc, #4	; (adr r2, 1cf8 <CONFIG_USB_DEVICE_VID+0x3e3>)
    1cf2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1cf6:	bf00      	nop
    1cf8:	00001dcd 	.word	0x00001dcd
    1cfc:	00001ddf 	.word	0x00001ddf
    1d00:	00001c17 	.word	0x00001c17
    1d04:	00001c17 	.word	0x00001c17
    1d08:	00001c17 	.word	0x00001c17
    1d0c:	00001c17 	.word	0x00001c17
    1d10:	00001ddf 	.word	0x00001ddf
    1d14:	00001c17 	.word	0x00001c17
    1d18:	00001c17 	.word	0x00001c17
    1d1c:	00001c17 	.word	0x00001c17
    1d20:	00001c17 	.word	0x00001c17
    1d24:	00001e6d 	.word	0x00001e6d
    1d28:	00001e05 	.word	0x00001e05
    1d2c:	00001e2b 	.word	0x00001e2b
    1d30:	00001c17 	.word	0x00001c17
    1d34:	00001c17 	.word	0x00001c17
    1d38:	00001d51 	.word	0x00001d51
    1d3c:	00001c17 	.word	0x00001c17
    1d40:	00001e05 	.word	0x00001e05
    1d44:	00001c17 	.word	0x00001c17
    1d48:	00001c17 	.word	0x00001c17
    1d4c:	00001e05 	.word	0x00001e05
			if (precision >= 0) {
    1d50:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1d54:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1d56:	db35      	blt.n	1dc4 <CONFIG_USB_DEVICE_VID+0x4af>
				len = strnlen(bps, precision);
    1d58:	4651      	mov	r1, sl
    1d5a:	4638      	mov	r0, r7
    1d5c:	f007 fc48 	bl	95f0 <strnlen>
			bpe = bps + len;
    1d60:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1d64:	2f00      	cmp	r7, #0
    1d66:	f43f af56 	beq.w	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		char sign = 0;
    1d6a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1d6c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1d70:	f013 0210 	ands.w	r2, r3, #16
    1d74:	9205      	str	r2, [sp, #20]
    1d76:	f000 8093 	beq.w	1ea0 <CONFIG_USB_DEVICE_VID+0x58b>
			nj_len += 2U;
    1d7a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1d7c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1d80:	bf48      	it	mi
    1d82:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1d84:	9204      	str	r2, [sp, #16]
    1d86:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1d88:	bf48      	it	mi
    1d8a:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1d8c:	f1b8 0f00 	cmp.w	r8, #0
    1d90:	f340 80a0 	ble.w	1ed4 <CONFIG_USB_DEVICE_VID+0x5bf>
			if (!conv->flag_dash) {
    1d94:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1d98:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1d9c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1da0:	0750      	lsls	r0, r2, #29
    1da2:	9306      	str	r3, [sp, #24]
    1da4:	f100 8096 	bmi.w	1ed4 <CONFIG_USB_DEVICE_VID+0x5bf>
				if (conv->flag_zero) {
    1da8:	0651      	lsls	r1, r2, #25
    1daa:	f140 8089 	bpl.w	1ec0 <CONFIG_USB_DEVICE_VID+0x5ab>
					if (sign != 0) {
    1dae:	b13e      	cbz	r6, 1dc0 <CONFIG_USB_DEVICE_VID+0x4ab>
						OUTC(sign);
    1db0:	4659      	mov	r1, fp
    1db2:	4630      	mov	r0, r6
    1db4:	47c8      	blx	r9
    1db6:	2800      	cmp	r0, #0
    1db8:	db7f      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1dba:	9b06      	ldr	r3, [sp, #24]
    1dbc:	3501      	adds	r5, #1
    1dbe:	461e      	mov	r6, r3
					pad = '0';
    1dc0:	2230      	movs	r2, #48	; 0x30
    1dc2:	e07e      	b.n	1ec2 <CONFIG_USB_DEVICE_VID+0x5ad>
				len = strlen(bps);
    1dc4:	4638      	mov	r0, r7
    1dc6:	f007 fbf5 	bl	95b4 <strlen>
    1dca:	e7c9      	b.n	1d60 <CONFIG_USB_DEVICE_VID+0x44b>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1dce:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1dd2:	2600      	movs	r6, #0
			bps = buf;
    1dd4:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1dd6:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1dda:	2001      	movs	r0, #1
    1ddc:	e7c6      	b.n	1d6c <CONFIG_USB_DEVICE_VID+0x457>
			if (conv->flag_plus) {
    1dde:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1de0:	bf5c      	itt	pl
    1de2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1de6:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1dec:	bf48      	it	mi
    1dee:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1df0:	2b00      	cmp	r3, #0
    1df2:	f6bf af62 	bge.w	1cba <CONFIG_USB_DEVICE_VID+0x3a5>
				value->uint = (uint_value_type)-sint;
    1df6:	4252      	negs	r2, r2
    1df8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1dfc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1e00:	262d      	movs	r6, #45	; 0x2d
    1e02:	e75a      	b.n	1cba <CONFIG_USB_DEVICE_VID+0x3a5>
		switch (conv->specifier) {
    1e04:	2600      	movs	r6, #0
    1e06:	e758      	b.n	1cba <CONFIG_USB_DEVICE_VID+0x3a5>
		char sign = 0;
    1e08:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1e0a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1e0e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e12:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1e14:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1e18:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1e1a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1e1e:	f67f af5a 	bls.w	1cd6 <CONFIG_USB_DEVICE_VID+0x3c1>
					conv->pad0_value = precision - (int)len;
    1e22:	ebaa 0303 	sub.w	r3, sl, r3
    1e26:	9311      	str	r3, [sp, #68]	; 0x44
    1e28:	e755      	b.n	1cd6 <CONFIG_USB_DEVICE_VID+0x3c1>
			if (value->ptr != NULL) {
    1e2a:	980e      	ldr	r0, [sp, #56]	; 0x38
    1e2c:	b390      	cbz	r0, 1e94 <CONFIG_USB_DEVICE_VID+0x57f>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e2e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e32:	9300      	str	r3, [sp, #0]
    1e34:	aa10      	add	r2, sp, #64	; 0x40
    1e36:	ab08      	add	r3, sp, #32
    1e38:	2100      	movs	r1, #0
    1e3a:	f007 f931 	bl	90a0 <encode_uint>
				conv->altform_0c = true;
    1e3e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1e42:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1e46:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1e4a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1e4e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e52:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1e54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1e58:	dad6      	bge.n	1e08 <CONFIG_USB_DEVICE_VID+0x4f3>
		if (bps == NULL) {
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f43f aedb 	beq.w	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		size_t nj_len = (bpe - bps);
    1e60:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1e64:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1e66:	2600      	movs	r6, #0
    1e68:	469a      	mov	sl, r3
    1e6a:	e77f      	b.n	1d6c <CONFIG_USB_DEVICE_VID+0x457>
				store_count(conv, value->ptr, count);
    1e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1e6e:	2907      	cmp	r1, #7
    1e70:	f63f aed1 	bhi.w	1c16 <CONFIG_USB_DEVICE_VID+0x301>
    1e74:	e8df f001 	tbb	[pc, r1]
    1e78:	0c06040c 	.word	0x0c06040c
    1e7c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1e80:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1e82:	e6c8      	b.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		*(short *)dp = (short)count;
    1e84:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1e86:	e6c6      	b.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		*(intmax_t *)dp = (intmax_t)count;
    1e88:	17ea      	asrs	r2, r5, #31
    1e8a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1e8e:	e6c2      	b.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1e90:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1e92:	e6c0      	b.n	1c16 <CONFIG_USB_DEVICE_VID+0x301>
    1e94:	4f2e      	ldr	r7, [pc, #184]	; (1f50 <CONFIG_USB_DEVICE_VID+0x63b>)
		char sign = 0;
    1e96:	4606      	mov	r6, r0
			bpe = bps + 5;
    1e98:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1e9c:	2005      	movs	r0, #5
    1e9e:	e765      	b.n	1d6c <CONFIG_USB_DEVICE_VID+0x457>
		} else if (conv->altform_0) {
    1ea0:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1ea2:	bf48      	it	mi
    1ea4:	3001      	addmi	r0, #1
    1ea6:	e769      	b.n	1d7c <CONFIG_USB_DEVICE_VID+0x467>
    1ea8:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1eaa:	4610      	mov	r0, r2
    1eac:	9206      	str	r2, [sp, #24]
    1eae:	4659      	mov	r1, fp
    1eb0:	47c8      	blx	r9
    1eb2:	2800      	cmp	r0, #0
    1eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1eb8:	da04      	bge.n	1ec4 <CONFIG_USB_DEVICE_VID+0x5af>
#undef OUTS
#undef OUTC
}
    1eba:	b015      	add	sp, #84	; 0x54
    1ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1ec0:	2220      	movs	r2, #32
					pad = '0';
    1ec2:	4643      	mov	r3, r8
				while (width-- > 0) {
    1ec4:	4619      	mov	r1, r3
    1ec6:	2900      	cmp	r1, #0
    1ec8:	f103 33ff 	add.w	r3, r3, #4294967295
    1ecc:	dcec      	bgt.n	1ea8 <CONFIG_USB_DEVICE_VID+0x593>
    1ece:	4445      	add	r5, r8
    1ed0:	1a6d      	subs	r5, r5, r1
    1ed2:	4698      	mov	r8, r3
		if (sign != 0) {
    1ed4:	b12e      	cbz	r6, 1ee2 <CONFIG_USB_DEVICE_VID+0x5cd>
			OUTC(sign);
    1ed6:	4659      	mov	r1, fp
    1ed8:	4630      	mov	r0, r6
    1eda:	47c8      	blx	r9
    1edc:	2800      	cmp	r0, #0
    1ede:	dbec      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1ee0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1ee2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1ee6:	06da      	lsls	r2, r3, #27
    1ee8:	d401      	bmi.n	1eee <CONFIG_USB_DEVICE_VID+0x5d9>
    1eea:	071b      	lsls	r3, r3, #28
    1eec:	d505      	bpl.n	1efa <CONFIG_USB_DEVICE_VID+0x5e5>
				OUTC('0');
    1eee:	4659      	mov	r1, fp
    1ef0:	2030      	movs	r0, #48	; 0x30
    1ef2:	47c8      	blx	r9
    1ef4:	2800      	cmp	r0, #0
    1ef6:	dbe0      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1ef8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1efa:	9b05      	ldr	r3, [sp, #20]
    1efc:	b133      	cbz	r3, 1f0c <CONFIG_USB_DEVICE_VID+0x5f7>
				OUTC(conv->specifier);
    1efe:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1f02:	4659      	mov	r1, fp
    1f04:	47c8      	blx	r9
    1f06:	2800      	cmp	r0, #0
    1f08:	dbd7      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1f0a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f0c:	9e04      	ldr	r6, [sp, #16]
    1f0e:	442e      	add	r6, r5
    1f10:	e005      	b.n	1f1e <CONFIG_USB_DEVICE_VID+0x609>
				OUTC('0');
    1f12:	4659      	mov	r1, fp
    1f14:	2030      	movs	r0, #48	; 0x30
    1f16:	47c8      	blx	r9
    1f18:	2800      	cmp	r0, #0
    1f1a:	dbce      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1f1c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1f1e:	1b73      	subs	r3, r6, r5
    1f20:	2b00      	cmp	r3, #0
    1f22:	dcf6      	bgt.n	1f12 <CONFIG_USB_DEVICE_VID+0x5fd>
			OUTS(bps, bpe);
    1f24:	4653      	mov	r3, sl
    1f26:	463a      	mov	r2, r7
    1f28:	4659      	mov	r1, fp
    1f2a:	4648      	mov	r0, r9
    1f2c:	f007 f8fe 	bl	912c <outs>
    1f30:	2800      	cmp	r0, #0
    1f32:	dbc2      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1f34:	4405      	add	r5, r0
		while (width > 0) {
    1f36:	44a8      	add	r8, r5
    1f38:	eba8 0305 	sub.w	r3, r8, r5
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	f77f ae6a 	ble.w	1c16 <CONFIG_USB_DEVICE_VID+0x301>
			OUTC(' ');
    1f42:	4659      	mov	r1, fp
    1f44:	2020      	movs	r0, #32
    1f46:	47c8      	blx	r9
    1f48:	2800      	cmp	r0, #0
    1f4a:	dbb6      	blt.n	1eba <CONFIG_USB_DEVICE_VID+0x5a5>
    1f4c:	3501      	adds	r5, #1
			--width;
    1f4e:	e7f3      	b.n	1f38 <CONFIG_USB_DEVICE_VID+0x623>
    1f50:	0000aa7f 	.word	0x0000aa7f

00001f54 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1f54:	f003 baf4 	b.w	5540 <SystemInit>

00001f58 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f5c:	4605      	mov	r5, r0
	__asm__ volatile(
    1f5e:	f04f 0320 	mov.w	r3, #32
    1f62:	f3ef 8611 	mrs	r6, BASEPRI
    1f66:	f383 8812 	msr	BASEPRI_MAX, r3
    1f6a:	f3bf 8f6f 	isb	sy
	return list->head;
    1f6e:	4b0e      	ldr	r3, [pc, #56]	; (1fa8 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1f70:	4f0e      	ldr	r7, [pc, #56]	; (1fac <pm_state_notify+0x54>)
    1f72:	681c      	ldr	r4, [r3, #0]
    1f74:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1fb0 <pm_state_notify+0x58>
    1f78:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f7c:	b92c      	cbnz	r4, 1f8a <pm_state_notify+0x32>
	__asm__ volatile(
    1f7e:	f386 8811 	msr	BASEPRI, r6
    1f82:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1f8a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1f8e:	2d00      	cmp	r5, #0
    1f90:	bf18      	it	ne
    1f92:	4613      	movne	r3, r2
		if (callback) {
    1f94:	b12b      	cbz	r3, 1fa2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1f96:	f898 2010 	ldrb.w	r2, [r8, #16]
    1f9a:	fb09 f202 	mul.w	r2, r9, r2
    1f9e:	5cb8      	ldrb	r0, [r7, r2]
    1fa0:	4798      	blx	r3
	return node->next;
    1fa2:	6824      	ldr	r4, [r4, #0]
    1fa4:	e7ea      	b.n	1f7c <pm_state_notify+0x24>
    1fa6:	bf00      	nop
    1fa8:	20000768 	.word	0x20000768
    1fac:	2000075c 	.word	0x2000075c
    1fb0:	20001520 	.word	0x20001520

00001fb4 <pm_system_resume>:

void pm_system_resume(void)
{
    1fb4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1fb6:	4b19      	ldr	r3, [pc, #100]	; (201c <pm_system_resume+0x68>)
    1fb8:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1fba:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1fbe:	f004 031f 	and.w	r3, r4, #31
    1fc2:	2201      	movs	r2, #1
    1fc4:	409a      	lsls	r2, r3
    1fc6:	4b16      	ldr	r3, [pc, #88]	; (2020 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1fc8:	0961      	lsrs	r1, r4, #5
    1fca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1fce:	43d0      	mvns	r0, r2
    1fd0:	e853 1f00 	ldrex	r1, [r3]
    1fd4:	ea01 0500 	and.w	r5, r1, r0
    1fd8:	e843 5600 	strex	r6, r5, [r3]
    1fdc:	2e00      	cmp	r6, #0
    1fde:	d1f7      	bne.n	1fd0 <pm_system_resume+0x1c>
    1fe0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1fe4:	420a      	tst	r2, r1
    1fe6:	d013      	beq.n	2010 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1fe8:	4b0e      	ldr	r3, [pc, #56]	; (2024 <pm_system_resume+0x70>)
    1fea:	4d0f      	ldr	r5, [pc, #60]	; (2028 <pm_system_resume+0x74>)
    1fec:	b18b      	cbz	r3, 2012 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1fee:	230c      	movs	r3, #12
    1ff0:	4363      	muls	r3, r4
    1ff2:	18ea      	adds	r2, r5, r3
    1ff4:	5ce8      	ldrb	r0, [r5, r3]
    1ff6:	7851      	ldrb	r1, [r2, #1]
    1ff8:	f007 fb0f 	bl	961a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1ffc:	2000      	movs	r0, #0
    1ffe:	f7ff ffab 	bl	1f58 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2002:	230c      	movs	r3, #12
    2004:	435c      	muls	r4, r3
    2006:	192a      	adds	r2, r5, r4
    2008:	2300      	movs	r3, #0
    200a:	512b      	str	r3, [r5, r4]
    200c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2010:	bd70      	pop	{r4, r5, r6, pc}
    2012:	f383 8811 	msr	BASEPRI, r3
    2016:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    201a:	e7ef      	b.n	1ffc <pm_system_resume+0x48>
    201c:	20001520 	.word	0x20001520
    2020:	20000770 	.word	0x20000770
    2024:	0000961b 	.word	0x0000961b
    2028:	2000075c 	.word	0x2000075c

0000202c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2030:	4b35      	ldr	r3, [pc, #212]	; (2108 <pm_system_suspend+0xdc>)
{
    2032:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2034:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    2036:	f04f 0320 	mov.w	r3, #32
    203a:	f3ef 8811 	mrs	r8, BASEPRI
    203e:	f383 8812 	msr	BASEPRI_MAX, r3
    2042:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2046:	240c      	movs	r4, #12
    2048:	4b30      	ldr	r3, [pc, #192]	; (210c <pm_system_suspend+0xe0>)
    204a:	4e31      	ldr	r6, [pc, #196]	; (2110 <pm_system_suspend+0xe4>)
    204c:	436c      	muls	r4, r5
    204e:	191a      	adds	r2, r3, r4
    2050:	5d19      	ldrb	r1, [r3, r4]
    2052:	2900      	cmp	r1, #0
    2054:	d04c      	beq.n	20f0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2056:	ca07      	ldmia	r2, {r0, r1, r2}
    2058:	eb06 0c04 	add.w	ip, r6, r4
    205c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2060:	2200      	movs	r2, #0
    2062:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2064:	f388 8811 	msr	BASEPRI, r8
    2068:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    206c:	230c      	movs	r3, #12
    206e:	436b      	muls	r3, r5
    2070:	18f2      	adds	r2, r6, r3
    2072:	5cf0      	ldrb	r0, [r6, r3]
    2074:	2800      	cmp	r0, #0
    2076:	d039      	beq.n	20ec <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2078:	1c7b      	adds	r3, r7, #1
    207a:	d010      	beq.n	209e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    207c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2080:	4c24      	ldr	r4, [pc, #144]	; (2114 <pm_system_suspend+0xe8>)
    2082:	4a25      	ldr	r2, [pc, #148]	; (2118 <pm_system_suspend+0xec>)
    2084:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2088:	2100      	movs	r1, #0
    208a:	fbec 4100 	umlal	r4, r1, ip, r0
    208e:	2300      	movs	r3, #0
    2090:	4620      	mov	r0, r4
    2092:	f7ff f835 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    2096:	2101      	movs	r1, #1
    2098:	1a38      	subs	r0, r7, r0
    209a:	f003 f9f9 	bl	5490 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    209e:	f006 f9d9 	bl	8454 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    20a2:	2001      	movs	r0, #1
    20a4:	f7ff ff58 	bl	1f58 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    20a8:	f3bf 8f5b 	dmb	ish
    20ac:	4b1b      	ldr	r3, [pc, #108]	; (211c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    20ae:	096a      	lsrs	r2, r5, #5
    20b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    20b4:	f005 011f 	and.w	r1, r5, #31
    20b8:	2201      	movs	r2, #1
    20ba:	408a      	lsls	r2, r1
    20bc:	e853 0f00 	ldrex	r0, [r3]
    20c0:	4310      	orrs	r0, r2
    20c2:	e843 0100 	strex	r1, r0, [r3]
    20c6:	2900      	cmp	r1, #0
    20c8:	d1f8      	bne.n	20bc <pm_system_suspend+0x90>
    20ca:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    20ce:	4b14      	ldr	r3, [pc, #80]	; (2120 <pm_system_suspend+0xf4>)
    20d0:	b13b      	cbz	r3, 20e2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    20d2:	230c      	movs	r3, #12
    20d4:	fb03 f005 	mul.w	r0, r3, r5
    20d8:	1833      	adds	r3, r6, r0
    20da:	5c30      	ldrb	r0, [r6, r0]
    20dc:	7859      	ldrb	r1, [r3, #1]
    20de:	f007 fa90 	bl	9602 <pm_state_set>
	if (atomic_add(&_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    20e2:	f7ff ff67 	bl	1fb4 <pm_system_resume>
	k_sched_unlock();
    20e6:	f006 f9c9 	bl	847c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    20ea:	2001      	movs	r0, #1
}
    20ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    20f0:	4601      	mov	r1, r0
    20f2:	4628      	mov	r0, r5
    20f4:	f000 f816 	bl	2124 <pm_policy_next_state>
		if (info != NULL) {
    20f8:	2800      	cmp	r0, #0
    20fa:	d0b3      	beq.n	2064 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    20fc:	c807      	ldmia	r0, {r0, r1, r2}
    20fe:	4434      	add	r4, r6
    2100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2104:	e7ae      	b.n	2064 <pm_system_suspend+0x38>
    2106:	bf00      	nop
    2108:	20001520 	.word	0x20001520
    210c:	20000750 	.word	0x20000750
    2110:	2000075c 	.word	0x2000075c
    2114:	000f423f 	.word	0x000f423f
    2118:	000f4240 	.word	0x000f4240
    211c:	20000770 	.word	0x20000770
    2120:	00009603 	.word	0x00009603

00002124 <pm_policy_next_state>:
	next_event_cyc = new_next_event_cyc;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cyc = k_ticks_to_cyc_ceil32(ticks);
	}

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);

	if (next_event_cyc >= 0) {
    2128:	4c38      	ldr	r4, [pc, #224]	; (220c <pm_policy_next_state+0xe8>)
{
    212a:	b085      	sub	sp, #20
		cyc = k_ticks_to_cyc_ceil32(ticks);
    212c:	1c4b      	adds	r3, r1, #1
{
    212e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2130:	a903      	add	r1, sp, #12
		cyc = k_ticks_to_cyc_ceil32(ticks);
    2132:	bf0c      	ite	eq
    2134:	f04f 38ff 	moveq.w	r8, #4294967295
    2138:	f04f 0800 	movne.w	r8, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    213c:	f000 f86e 	bl	221c <pm_state_cpu_get_all>
	if (next_event_cyc >= 0) {
    2140:	6863      	ldr	r3, [r4, #4]
    2142:	2b00      	cmp	r3, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2144:	4605      	mov	r5, r0
	if (next_event_cyc >= 0) {
    2146:	db12      	blt.n	216e <pm_policy_next_state+0x4a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    2148:	f007 fc47 	bl	99da <sys_clock_cycle_get_32>
		uint32_t cyc_curr = k_cycle_get_32();
		int64_t cyc_evt = next_event_cyc - cyc_curr;
    214c:	e9d4 3200 	ldrd	r3, r2, [r4]
    2150:	1a1c      	subs	r4, r3, r0
    2152:	f162 0600 	sbc.w	r6, r2, #0

		/* event happening after cycle counter max value, pad */
		if (next_event_cyc <= cyc_curr) {
    2156:	4298      	cmp	r0, r3
    2158:	f04f 0300 	mov.w	r3, #0
    215c:	4193      	sbcs	r3, r2
    215e:	db02      	blt.n	2166 <pm_policy_next_state+0x42>
			cyc_evt += UINT32_MAX;
    2160:	3c01      	subs	r4, #1
    2162:	f146 0600 	adc.w	r6, r6, #0
		}

		if (cyc_evt > 0) {
    2166:	2c01      	cmp	r4, #1
    2168:	f176 0300 	sbcs.w	r3, r6, #0
    216c:	da02      	bge.n	2174 <pm_policy_next_state+0x50>
			 * otherwise, who comes earlier wins
			 */
			if (cyc < 0) {
				cyc = cyc_evt;
			} else {
				cyc = MIN(cyc, cyc_evt);
    216e:	463c      	mov	r4, r7
    2170:	4646      	mov	r6, r8
    2172:	e009      	b.n	2188 <pm_policy_next_state+0x64>
			if (cyc < 0) {
    2174:	f1b8 3fff 	cmp.w	r8, #4294967295
    2178:	bf08      	it	eq
    217a:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    217e:	d003      	beq.n	2188 <pm_policy_next_state+0x64>
				cyc = MIN(cyc, cyc_evt);
    2180:	42a7      	cmp	r7, r4
    2182:	eb78 0306 	sbcs.w	r3, r8, r6
    2186:	dbf2      	blt.n	216e <pm_policy_next_state+0x4a>

		min_residency_cyc = k_us_to_cyc_ceil32(state->min_residency_us);
		exit_latency_cyc = k_us_to_cyc_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_cyc >= 0) &&
    2188:	4b21      	ldr	r3, [pc, #132]	; (2210 <pm_policy_next_state+0xec>)
    218a:	9f03      	ldr	r7, [sp, #12]
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	9300      	str	r3, [sp, #0]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2190:	1e6b      	subs	r3, r5, #1
    2192:	b21b      	sxth	r3, r3
    2194:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2198:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2214 <pm_policy_next_state+0xf0>
    219c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    21a0:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    21a4:	f04f 0b00 	mov.w	fp, #0
    21a8:	b925      	cbnz	r5, 21b4 <pm_policy_next_state+0x90>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
			return state;
		}
	}

	return NULL;
    21aa:	46aa      	mov	sl, r5
}
    21ac:	4650      	mov	r0, sl
    21ae:	b005      	add	sp, #20
    21b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21b4:	6878      	ldr	r0, [r7, #4]
    21b6:	4a18      	ldr	r2, [pc, #96]	; (2218 <pm_policy_next_state+0xf4>)
    21b8:	46cc      	mov	ip, r9
    21ba:	4659      	mov	r1, fp
    21bc:	fbe0 c108 	umlal	ip, r1, r0, r8
    21c0:	2300      	movs	r3, #0
    21c2:	4660      	mov	r0, ip
    21c4:	f7fe ff9c 	bl	1100 <__aeabi_uldivmod>
    21c8:	9001      	str	r0, [sp, #4]
    21ca:	68b8      	ldr	r0, [r7, #8]
    21cc:	4a12      	ldr	r2, [pc, #72]	; (2218 <pm_policy_next_state+0xf4>)
    21ce:	46cc      	mov	ip, r9
    21d0:	4659      	mov	r1, fp
    21d2:	fbe0 c108 	umlal	ip, r1, r0, r8
    21d6:	2300      	movs	r3, #0
    21d8:	4660      	mov	r0, ip
    21da:	f7fe ff91 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_cyc >= 0) &&
    21de:	9b00      	ldr	r3, [sp, #0]
    21e0:	2b00      	cmp	r3, #0
		const struct pm_state_info *state = &cpu_states[i];
    21e2:	46ba      	mov	sl, r7
		if ((max_latency_cyc >= 0) &&
    21e4:	db01      	blt.n	21ea <pm_policy_next_state+0xc6>
    21e6:	4283      	cmp	r3, r0
    21e8:	d90b      	bls.n	2202 <pm_policy_next_state+0xde>
		if ((cyc < 0) ||
    21ea:	f1b6 3fff 	cmp.w	r6, #4294967295
    21ee:	bf08      	it	eq
    21f0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    21f4:	d0da      	beq.n	21ac <pm_policy_next_state+0x88>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
    21f6:	9b01      	ldr	r3, [sp, #4]
    21f8:	4418      	add	r0, r3
		if ((cyc < 0) ||
    21fa:	4284      	cmp	r4, r0
    21fc:	f176 0300 	sbcs.w	r3, r6, #0
    2200:	dad4      	bge.n	21ac <pm_policy_next_state+0x88>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2202:	3d01      	subs	r5, #1
    2204:	b2ad      	uxth	r5, r5
    2206:	3f0c      	subs	r7, #12
    2208:	e7ce      	b.n	21a8 <pm_policy_next_state+0x84>
    220a:	bf00      	nop
    220c:	20000000 	.word	0x20000000
    2210:	200000bc 	.word	0x200000bc
    2214:	000f423f 	.word	0x000f423f
    2218:	000f4240 	.word	0x000f4240

0000221c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    221c:	b908      	cbnz	r0, 2222 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    221e:	4b02      	ldr	r3, [pc, #8]	; (2228 <pm_state_cpu_get_all+0xc>)
    2220:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2222:	2000      	movs	r0, #0
    2224:	4770      	bx	lr
    2226:	bf00      	nop
    2228:	0000a758 	.word	0x0000a758

0000222c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    222c:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    222e:	4b0c      	ldr	r3, [pc, #48]	; (2260 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2230:	4e0c      	ldr	r6, [pc, #48]	; (2264 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2232:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2234:	4b0c      	ldr	r3, [pc, #48]	; (2268 <class_handler+0x3c>)
    2236:	42b3      	cmp	r3, r6
    2238:	d303      	bcc.n	2242 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    223a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    223e:	bcf0      	pop	{r4, r5, r6, r7}
    2240:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2242:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2244:	42bd      	cmp	r5, r7
    2246:	d309      	bcc.n	225c <class_handler+0x30>
		if (iface->class_handler &&
    2248:	691c      	ldr	r4, [r3, #16]
    224a:	b13c      	cbz	r4, 225c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    224c:	f895 c002 	ldrb.w	ip, [r5, #2]
    2250:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2252:	45ac      	cmp	ip, r5
    2254:	d102      	bne.n	225c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    2256:	4623      	mov	r3, r4
}
    2258:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    225a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    225c:	3324      	adds	r3, #36	; 0x24
    225e:	e7ea      	b.n	2236 <class_handler+0xa>
    2260:	20000774 	.word	0x20000774
    2264:	20000330 	.word	0x20000330
    2268:	2000030c 	.word	0x2000030c

0000226c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2270:	4c13      	ldr	r4, [pc, #76]	; (22c0 <custom_handler+0x54>)
    2272:	f8df 8050 	ldr.w	r8, [pc, #80]	; 22c4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2276:	f8df 9050 	ldr.w	r9, [pc, #80]	; 22c8 <custom_handler+0x5c>
{
    227a:	4605      	mov	r5, r0
    227c:	460e      	mov	r6, r1
    227e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2280:	4544      	cmp	r4, r8
    2282:	d303      	bcc.n	228c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2284:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    228c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    228e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2292:	429a      	cmp	r2, r3
    2294:	d312      	bcc.n	22bc <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    2296:	69a3      	ldr	r3, [r4, #24]
    2298:	b183      	cbz	r3, 22bc <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    229a:	7890      	ldrb	r0, [r2, #2]
    229c:	7929      	ldrb	r1, [r5, #4]
    229e:	4288      	cmp	r0, r1
    22a0:	d105      	bne.n	22ae <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    22a2:	463a      	mov	r2, r7
    22a4:	4631      	mov	r1, r6
    22a6:	4628      	mov	r0, r5
}
    22a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    22ac:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    22ae:	7952      	ldrb	r2, [r2, #5]
    22b0:	2a01      	cmp	r2, #1
    22b2:	d103      	bne.n	22bc <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    22b4:	463a      	mov	r2, r7
    22b6:	4631      	mov	r1, r6
    22b8:	4628      	mov	r0, r5
    22ba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22bc:	3424      	adds	r4, #36	; 0x24
    22be:	e7df      	b.n	2280 <custom_handler+0x14>
    22c0:	2000030c 	.word	0x2000030c
    22c4:	20000330 	.word	0x20000330
    22c8:	20000774 	.word	0x20000774

000022cc <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    22cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22d0:	4c0b      	ldr	r4, [pc, #44]	; (2300 <vendor_handler+0x34>)
    22d2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2304 <vendor_handler+0x38>
{
    22d6:	4605      	mov	r5, r0
    22d8:	460e      	mov	r6, r1
    22da:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22dc:	4544      	cmp	r4, r8
    22de:	d302      	bcc.n	22e6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    22e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    22e4:	e009      	b.n	22fa <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    22e6:	6963      	ldr	r3, [r4, #20]
    22e8:	b90b      	cbnz	r3, 22ee <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    22ea:	3424      	adds	r4, #36	; 0x24
    22ec:	e7f6      	b.n	22dc <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    22ee:	463a      	mov	r2, r7
    22f0:	4631      	mov	r1, r6
    22f2:	4628      	mov	r0, r5
    22f4:	4798      	blx	r3
    22f6:	2800      	cmp	r0, #0
    22f8:	d1f7      	bne.n	22ea <vendor_handler+0x1e>
}
    22fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22fe:	bf00      	nop
    2300:	2000030c 	.word	0x2000030c
    2304:	20000330 	.word	0x20000330

00002308 <disable_endpoint>:
{
    2308:	b510      	push	{r4, lr}
    230a:	4604      	mov	r4, r0
	ret = usb_dc_ep_disable(ep_addr);
    230c:	f007 f9ba 	bl	9684 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2310:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2314:	d000      	beq.n	2318 <disable_endpoint+0x10>
	} else if (ret) {
    2316:	b950      	cbnz	r0, 232e <disable_endpoint+0x26>
	usb_dev.ep_bm &= ~ep_bm;
    2318:	4a05      	ldr	r2, [pc, #20]	; (2330 <disable_endpoint+0x28>)
	ep_bm = get_ep_bm_from_addr(ep_addr);
    231a:	4620      	mov	r0, r4
    231c:	f006 ffc6 	bl	92ac <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2320:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2324:	ea23 0300 	bic.w	r3, r3, r0
    2328:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    232c:	2000      	movs	r0, #0
}
    232e:	bd10      	pop	{r4, pc}
    2330:	20000774 	.word	0x20000774

00002334 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2334:	4802      	ldr	r0, [pc, #8]	; (2340 <usb_reset_alt_setting+0xc>)
    2336:	2208      	movs	r2, #8
    2338:	2100      	movs	r1, #0
    233a:	f007 b94d 	b.w	95d8 <memset>
    233e:	bf00      	nop
    2340:	2000082f 	.word	0x2000082f

00002344 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    2344:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2346:	4b0b      	ldr	r3, [pc, #44]	; (2374 <is_ep_valid.part.0+0x30>)
    2348:	4c0b      	ldr	r4, [pc, #44]	; (2378 <is_ep_valid.part.0+0x34>)
    234a:	42a3      	cmp	r3, r4
    234c:	d301      	bcc.n	2352 <is_ep_valid.part.0+0xe>
	return false;
    234e:	2000      	movs	r0, #0
}
    2350:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    2352:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2354:	7f1e      	ldrb	r6, [r3, #28]
    2356:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    2358:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    235a:	b2d5      	uxtb	r5, r2
    235c:	42ae      	cmp	r6, r5
    235e:	d801      	bhi.n	2364 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2360:	3324      	adds	r3, #36	; 0x24
    2362:	e7f2      	b.n	234a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    2364:	3201      	adds	r2, #1
    2366:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    236a:	4285      	cmp	r5, r0
    236c:	d1f5      	bne.n	235a <is_ep_valid.part.0+0x16>
		return true;
    236e:	2001      	movs	r0, #1
    2370:	e7ee      	b.n	2350 <is_ep_valid.part.0+0xc>
    2372:	bf00      	nop
    2374:	2000030c 	.word	0x2000030c
    2378:	20000330 	.word	0x20000330

0000237c <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    237c:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    237e:	4809      	ldr	r0, [pc, #36]	; (23a4 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    2380:	7803      	ldrb	r3, [r0, #0]
    2382:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    2386:	330a      	adds	r3, #10
    2388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    238c:	b13b      	cbz	r3, 239e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    238e:	f100 0208 	add.w	r2, r0, #8
    2392:	f100 0110 	add.w	r1, r0, #16
    2396:	4798      	blx	r3
    2398:	43c0      	mvns	r0, r0
    239a:	0fc0      	lsrs	r0, r0, #31
}
    239c:	bd08      	pop	{r3, pc}
		return false;
    239e:	4618      	mov	r0, r3
    23a0:	e7fc      	b.n	239c <usb_handle_request.constprop.0+0x20>
    23a2:	bf00      	nop
    23a4:	20000774 	.word	0x20000774

000023a8 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    23a8:	2804      	cmp	r0, #4
{
    23aa:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23ae:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2448 <forward_status_cb+0xa0>
    23b2:	4604      	mov	r4, r0
    23b4:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    23b6:	d016      	beq.n	23e6 <forward_status_cb+0x3e>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    23b8:	2801      	cmp	r0, #1
    23ba:	d12d      	bne.n	2418 <forward_status_cb+0x70>
		if (usb_dev.configured) {
    23bc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 244c <forward_status_cb+0xa4>
    23c0:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    23c4:	b343      	cbz	r3, 2418 <forward_status_cb+0x70>
			usb_cancel_transfers();
    23c6:	f000 fe09 	bl	2fdc <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23ca:	4d21      	ldr	r5, [pc, #132]	; (2450 <forward_status_cb+0xa8>)
    23cc:	454d      	cmp	r5, r9
    23ce:	d220      	bcs.n	2412 <forward_status_cb+0x6a>
		ep_data = cfg_data->endpoint;
    23d0:	f8d5 b020 	ldr.w	fp, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    23d4:	f04f 0a00 	mov.w	sl, #0
    23d8:	7f2b      	ldrb	r3, [r5, #28]
    23da:	fa5f f68a 	uxtb.w	r6, sl
    23de:	42b3      	cmp	r3, r6
    23e0:	d804      	bhi.n	23ec <forward_status_cb+0x44>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    23e2:	3524      	adds	r5, #36	; 0x24
    23e4:	e7f2      	b.n	23cc <forward_status_cb+0x24>
		usb_reset_alt_setting();
    23e6:	f7ff ffa5 	bl	2334 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    23ea:	e7e7      	b.n	23bc <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    23ec:	eb0b 06c6 	add.w	r6, fp, r6, lsl #3
			if (ret < 0) {
    23f0:	f10a 0a01 	add.w	sl, sl, #1
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    23f4:	7930      	ldrb	r0, [r6, #4]
    23f6:	f007 f945 	bl	9684 <usb_dc_ep_disable>
    23fa:	4602      	mov	r2, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    23fc:	7930      	ldrb	r0, [r6, #4]
    23fe:	f006 ff55 	bl	92ac <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2402:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2406:	2a00      	cmp	r2, #0
	usb_dev.ep_bm &= ~ep_bm;
    2408:	ea23 0300 	bic.w	r3, r3, r0
    240c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2410:	dae2      	bge.n	23d8 <forward_status_cb+0x30>
			usb_dev.configured = false;
    2412:	2300      	movs	r3, #0
    2414:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2418:	4d0d      	ldr	r5, [pc, #52]	; (2450 <forward_status_cb+0xa8>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    241a:	454d      	cmp	r5, r9
    241c:	d308      	bcc.n	2430 <forward_status_cb+0x88>
	if (usb_dev.user_status_callback) {
    241e:	4b0b      	ldr	r3, [pc, #44]	; (244c <forward_status_cb+0xa4>)
    2420:	6a1b      	ldr	r3, [r3, #32]
    2422:	b16b      	cbz	r3, 2440 <forward_status_cb+0x98>
		usb_dev.user_status_callback(status, param);
    2424:	4639      	mov	r1, r7
    2426:	4620      	mov	r0, r4
}
    2428:	b001      	add	sp, #4
    242a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    242e:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    2430:	68eb      	ldr	r3, [r5, #12]
    2432:	b11b      	cbz	r3, 243c <forward_status_cb+0x94>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2434:	463a      	mov	r2, r7
    2436:	4621      	mov	r1, r4
    2438:	4628      	mov	r0, r5
    243a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    243c:	3524      	adds	r5, #36	; 0x24
    243e:	e7ec      	b.n	241a <forward_status_cb+0x72>
}
    2440:	b001      	add	sp, #4
    2442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2446:	bf00      	nop
    2448:	20000330 	.word	0x20000330
    244c:	20000774 	.word	0x20000774
    2450:	2000030c 	.word	0x2000030c

00002454 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2454:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    2456:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    2458:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    245a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    245c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2460:	d007      	beq.n	2472 <usb_halt_endpoint_req.isra.0+0x1e>
    2462:	4620      	mov	r0, r4
    2464:	f7ff ff6e 	bl	2344 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2468:	b178      	cbz	r0, 248a <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    246a:	4b0d      	ldr	r3, [pc, #52]	; (24a0 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    246c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2470:	b158      	cbz	r0, 248a <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    2472:	4e0b      	ldr	r6, [pc, #44]	; (24a0 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    2474:	4620      	mov	r0, r4
		if (halt) {
    2476:	b155      	cbz	r5, 248e <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    2478:	f001 ff7c 	bl	4374 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    247c:	69f3      	ldr	r3, [r6, #28]
    247e:	b11b      	cbz	r3, 2488 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2480:	f10d 0107 	add.w	r1, sp, #7
    2484:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2486:	4798      	blx	r3
		return true;
    2488:	2001      	movs	r0, #1
}
    248a:	b002      	add	sp, #8
    248c:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    248e:	f001 ff99 	bl	43c4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2492:	69f3      	ldr	r3, [r6, #28]
    2494:	2b00      	cmp	r3, #0
    2496:	d0f7      	beq.n	2488 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2498:	f10d 0107 	add.w	r1, sp, #7
    249c:	2009      	movs	r0, #9
    249e:	e7f2      	b.n	2486 <usb_halt_endpoint_req.isra.0+0x32>
    24a0:	20000774 	.word	0x20000774

000024a4 <set_endpoint>:
{
    24a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    24a6:	7886      	ldrb	r6, [r0, #2]
    24a8:	f88d 6000 	strb.w	r6, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    24ac:	7903      	ldrb	r3, [r0, #4]
    24ae:	7942      	ldrb	r2, [r0, #5]
	if (ep_bm & usb_dev.ep_bm) {
    24b0:	4c1c      	ldr	r4, [pc, #112]	; (2524 <set_endpoint+0x80>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    24b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    24b6:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24ba:	78c3      	ldrb	r3, [r0, #3]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24bc:	4630      	mov	r0, r6
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    24be:	f003 0303 	and.w	r3, r3, #3
    24c2:	f88d 3004 	strb.w	r3, [sp, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24c6:	f006 fef1 	bl	92ac <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    24ca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    24ce:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    24d0:	4605      	mov	r5, r0
	if (ep_bm & usb_dev.ep_bm) {
    24d2:	d00b      	beq.n	24ec <set_endpoint+0x48>
	usb_cancel_transfer(ep_cfg.ep_addr);
    24d4:	4630      	mov	r0, r6
    24d6:	f000 fd63 	bl	2fa0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    24da:	4630      	mov	r0, r6
    24dc:	f7ff ff14 	bl	2308 <disable_endpoint>
		if (!k_is_in_isr()) {
    24e0:	f007 fcd1 	bl	9e86 <k_is_in_isr>
    24e4:	b910      	cbnz	r0, 24ec <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    24e6:	2096      	movs	r0, #150	; 0x96
    24e8:	f006 f888 	bl	85fc <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    24ec:	4668      	mov	r0, sp
    24ee:	f001 ff1d 	bl	432c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    24f2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    24f6:	d003      	beq.n	2500 <set_endpoint+0x5c>
	} else if (ret) {
    24f8:	b110      	cbz	r0, 2500 <set_endpoint+0x5c>
		return false;
    24fa:	2000      	movs	r0, #0
}
    24fc:	b002      	add	sp, #8
    24fe:	bd70      	pop	{r4, r5, r6, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2500:	f89d 0000 	ldrb.w	r0, [sp]
    2504:	f001 ff9a 	bl	443c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2508:	f110 0f78 	cmn.w	r0, #120	; 0x78
    250c:	d001      	beq.n	2512 <set_endpoint+0x6e>
	} else if (ret) {
    250e:	2800      	cmp	r0, #0
    2510:	d1f3      	bne.n	24fa <set_endpoint+0x56>
	usb_dev.ep_bm |= ep_bm;
    2512:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	usb_dev.configured = true;
    2516:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2518:	432b      	orrs	r3, r5
	usb_dev.configured = true;
    251a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    251e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	return true;
    2522:	e7eb      	b.n	24fc <set_endpoint+0x58>
    2524:	20000774 	.word	0x20000774

00002528 <usb_handle_standard_request>:
{
    2528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    252c:	4ea3      	ldr	r6, [pc, #652]	; (27bc <usb_handle_standard_request+0x294>)
    252e:	69b3      	ldr	r3, [r6, #24]
{
    2530:	4604      	mov	r4, r0
    2532:	460f      	mov	r7, r1
    2534:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    2536:	b9fb      	cbnz	r3, 2578 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    2538:	7823      	ldrb	r3, [r4, #0]
    253a:	f003 031f 	and.w	r3, r3, #31
    253e:	2b01      	cmp	r3, #1
    2540:	f000 809d 	beq.w	267e <usb_handle_standard_request+0x156>
    2544:	2b02      	cmp	r3, #2
    2546:	f000 8104 	beq.w	2752 <usb_handle_standard_request+0x22a>
    254a:	bb33      	cbnz	r3, 259a <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    254c:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    2550:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    2552:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2554:	2800      	cmp	r0, #0
    2556:	da34      	bge.n	25c2 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    2558:	2906      	cmp	r1, #6
    255a:	d012      	beq.n	2582 <usb_handle_standard_request+0x5a>
    255c:	2908      	cmp	r1, #8
    255e:	d02b      	beq.n	25b8 <usb_handle_standard_request+0x90>
    2560:	b9d9      	cbnz	r1, 259a <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2562:	2301      	movs	r3, #1
    2564:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    2566:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    2568:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    256c:	005b      	lsls	r3, r3, #1
    256e:	f043 0301 	orr.w	r3, r3, #1
    2572:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2574:	2302      	movs	r3, #2
    2576:	e12a      	b.n	27ce <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2578:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    257a:	2800      	cmp	r0, #0
    257c:	d1dc      	bne.n	2538 <usb_handle_standard_request+0x10>
		return 0;
    257e:	2000      	movs	r0, #0
    2580:	e00d      	b.n	259e <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    2582:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2584:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2586:	1f01      	subs	r1, r0, #4
    2588:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    258a:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    258c:	d905      	bls.n	259a <usb_handle_standard_request+0x72>
    258e:	2807      	cmp	r0, #7
    2590:	d803      	bhi.n	259a <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    2592:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2594:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    2596:	780c      	ldrb	r4, [r1, #0]
    2598:	b91c      	cbnz	r4, 25a2 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    259a:	f06f 0015 	mvn.w	r0, #21
}
    259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    25a2:	784e      	ldrb	r6, [r1, #1]
    25a4:	4566      	cmp	r6, ip
    25a6:	d103      	bne.n	25b0 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    25a8:	429a      	cmp	r2, r3
    25aa:	f000 810b 	beq.w	27c4 <usb_handle_standard_request+0x29c>
			cur_index++;
    25ae:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    25b0:	4421      	add	r1, r4
    25b2:	e7f0      	b.n	2596 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    25b4:	780b      	ldrb	r3, [r1, #0]
    25b6:	e10a      	b.n	27ce <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    25b8:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    25bc:	7013      	strb	r3, [r2, #0]
				*len = 1;
    25be:	2301      	movs	r3, #1
    25c0:	e105      	b.n	27ce <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    25c2:	3901      	subs	r1, #1
    25c4:	2908      	cmp	r1, #8
    25c6:	d8e8      	bhi.n	259a <usb_handle_standard_request+0x72>
    25c8:	a301      	add	r3, pc, #4	; (adr r3, 25d0 <usb_handle_standard_request+0xa8>)
    25ca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    25ce:	bf00      	nop
    25d0:	00002669 	.word	0x00002669
    25d4:	0000259b 	.word	0x0000259b
    25d8:	00002677 	.word	0x00002677
    25dc:	0000259b 	.word	0x0000259b
    25e0:	000025f5 	.word	0x000025f5
    25e4:	0000259b 	.word	0x0000259b
    25e8:	0000259b 	.word	0x0000259b
    25ec:	0000259b 	.word	0x0000259b
    25f0:	00002601 	.word	0x00002601
			return !usb_dc_set_address(setup->wValue);
    25f4:	78a0      	ldrb	r0, [r4, #2]
    25f6:	f001 fe87 	bl	4308 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25fa:	2800      	cmp	r0, #0
    25fc:	d0bf      	beq.n	257e <usb_handle_standard_request+0x56>
    25fe:	e7cc      	b.n	259a <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    2600:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2602:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    2604:	bb63      	cbnz	r3, 2660 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    2606:	f7ff fe95 	bl	2334 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    260a:	8863      	ldrh	r3, [r4, #2]
    260c:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2610:	69f3      	ldr	r3, [r6, #28]
    2612:	2b00      	cmp	r3, #0
    2614:	d0b3      	beq.n	257e <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2616:	496a      	ldr	r1, [pc, #424]	; (27c0 <usb_handle_standard_request+0x298>)
    2618:	2003      	movs	r0, #3
    261a:	4798      	blx	r3
    261c:	e7af      	b.n	257e <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    261e:	786b      	ldrb	r3, [r5, #1]
    2620:	2b04      	cmp	r3, #4
    2622:	d010      	beq.n	2646 <usb_handle_standard_request+0x11e>
    2624:	2b05      	cmp	r3, #5
    2626:	d011      	beq.n	264c <usb_handle_standard_request+0x124>
    2628:	2b02      	cmp	r3, #2
    262a:	d104      	bne.n	2636 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    262c:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    262e:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2630:	42bb      	cmp	r3, r7
    2632:	bf08      	it	eq
    2634:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2636:	782b      	ldrb	r3, [r5, #0]
    2638:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    263a:	782b      	ldrb	r3, [r5, #0]
    263c:	2b00      	cmp	r3, #0
    263e:	d1ee      	bne.n	261e <usb_handle_standard_request+0xf6>
	if (found) {
    2640:	2800      	cmp	r0, #0
    2642:	d0aa      	beq.n	259a <usb_handle_standard_request+0x72>
    2644:	e7df      	b.n	2606 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    2646:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    264a:	e7f4      	b.n	2636 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    264c:	8863      	ldrh	r3, [r4, #2]
    264e:	42bb      	cmp	r3, r7
    2650:	d1f1      	bne.n	2636 <usb_handle_standard_request+0x10e>
    2652:	f1b8 0f00 	cmp.w	r8, #0
    2656:	d1ee      	bne.n	2636 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2658:	4628      	mov	r0, r5
    265a:	f7ff ff23 	bl	24a4 <set_endpoint>
			break;
    265e:	e7ea      	b.n	2636 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    2660:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    2662:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    2664:	46b8      	mov	r8, r7
    2666:	e7e8      	b.n	263a <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2668:	8863      	ldrh	r3, [r4, #2]
    266a:	2b01      	cmp	r3, #1
    266c:	d195      	bne.n	259a <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    266e:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    2670:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2674:	e783      	b.n	257e <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2676:	8863      	ldrh	r3, [r4, #2]
    2678:	2b01      	cmp	r3, #1
    267a:	d18e      	bne.n	259a <usb_handle_standard_request+0x72>
    267c:	e7f8      	b.n	2670 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    267e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2682:	f8d5 c000 	ldr.w	ip, [r5]
    2686:	2b00      	cmp	r3, #0
    2688:	d087      	beq.n	259a <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    268a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    268c:	88a3      	ldrh	r3, [r4, #4]
    268e:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2692:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    2694:	7810      	ldrb	r0, [r2, #0]
    2696:	2800      	cmp	r0, #0
    2698:	f43f af7f 	beq.w	259a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    269c:	7851      	ldrb	r1, [r2, #1]
    269e:	2902      	cmp	r1, #2
    26a0:	d104      	bne.n	26ac <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    26a2:	f892 8004 	ldrb.w	r8, [r2, #4]
    26a6:	45f0      	cmp	r8, lr
    26a8:	f200 8093 	bhi.w	27d2 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    26ac:	4402      	add	r2, r0
    26ae:	e7f1      	b.n	2694 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    26b0:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    26b4:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    26b8:	6039      	str	r1, [r7, #0]
			return true;
    26ba:	e760      	b.n	257e <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    26bc:	4415      	add	r5, r2
    26be:	e094      	b.n	27ea <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    26c0:	2a0b      	cmp	r2, #11
    26c2:	f47f af6a 	bne.w	259a <usb_handle_standard_request+0x72>
	bool ret = false;
    26c6:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    26c8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    26cc:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    26ce:	46ba      	mov	sl, r7
    26d0:	e006      	b.n	26e0 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    26d2:	786b      	ldrb	r3, [r5, #1]
    26d4:	2b04      	cmp	r3, #4
    26d6:	d00f      	beq.n	26f8 <usb_handle_standard_request+0x1d0>
    26d8:	2b05      	cmp	r3, #5
    26da:	d021      	beq.n	2720 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    26dc:	782b      	ldrb	r3, [r5, #0]
    26de:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    26e0:	782b      	ldrb	r3, [r5, #0]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d1f5      	bne.n	26d2 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    26e6:	69f3      	ldr	r3, [r6, #28]
    26e8:	b113      	cbz	r3, 26f0 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    26ea:	4651      	mov	r1, sl
    26ec:	2007      	movs	r0, #7
    26ee:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    26f0:	2f00      	cmp	r7, #0
    26f2:	f47f af44 	bne.w	257e <usb_handle_standard_request+0x56>
    26f6:	e750      	b.n	259a <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    26f8:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    26fc:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    26fe:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2702:	4598      	cmp	r8, r3
    2704:	d1ea      	bne.n	26dc <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    2706:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2708:	4599      	cmp	r9, r3
    270a:	d1e7      	bne.n	26dc <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    270c:	f1b8 0f07 	cmp.w	r8, #7
    2710:	d81c      	bhi.n	274c <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    2712:	eb06 0308 	add.w	r3, r6, r8
		return true;
    2716:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2718:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    271c:	2701      	movs	r7, #1
    271e:	e7dd      	b.n	26dc <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2720:	88a3      	ldrh	r3, [r4, #4]
    2722:	4543      	cmp	r3, r8
    2724:	d1da      	bne.n	26dc <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    2726:	78a3      	ldrb	r3, [r4, #2]
    2728:	454b      	cmp	r3, r9
    272a:	d00a      	beq.n	2742 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    272c:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    272e:	4638      	mov	r0, r7
    2730:	f000 fc36 	bl	2fa0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2734:	4638      	mov	r0, r7
    2736:	f7ff fde7 	bl	2308 <disable_endpoint>
    273a:	fab0 f780 	clz	r7, r0
    273e:	097f      	lsrs	r7, r7, #5
    2740:	e7cc      	b.n	26dc <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    2742:	4628      	mov	r0, r5
    2744:	f7ff feae 	bl	24a4 <set_endpoint>
    2748:	4607      	mov	r7, r0
    274a:	e7c7      	b.n	26dc <usb_handle_standard_request+0x1b4>
    274c:	46aa      	mov	sl, r5
	return false;
    274e:	2700      	movs	r7, #0
    2750:	e7c4      	b.n	26dc <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    2752:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2756:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2758:	2a00      	cmp	r2, #0
    275a:	da18      	bge.n	278e <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    275c:	2b00      	cmp	r3, #0
    275e:	f47f af1c 	bne.w	259a <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    2762:	7924      	ldrb	r4, [r4, #4]
    2764:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    2766:	0663      	lsls	r3, r4, #25
    2768:	d00a      	beq.n	2780 <usb_handle_standard_request+0x258>
    276a:	4620      	mov	r0, r4
    276c:	f7ff fdea 	bl	2344 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2770:	2800      	cmp	r0, #0
    2772:	f43f af12 	beq.w	259a <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2776:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    277a:	2b00      	cmp	r3, #0
    277c:	f43f af0d 	beq.w	259a <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2780:	4629      	mov	r1, r5
    2782:	4620      	mov	r0, r4
    2784:	f001 fe3e 	bl	4404 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    2788:	2300      	movs	r3, #0
    278a:	706b      	strb	r3, [r5, #1]
    278c:	e6f2      	b.n	2574 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    278e:	2b01      	cmp	r3, #1
    2790:	d008      	beq.n	27a4 <usb_handle_standard_request+0x27c>
    2792:	2b03      	cmp	r3, #3
    2794:	f47f af01 	bne.w	259a <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2798:	8863      	ldrh	r3, [r4, #2]
    279a:	2b00      	cmp	r3, #0
    279c:	f47f aefd 	bne.w	259a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    27a0:	2101      	movs	r1, #1
    27a2:	e003      	b.n	27ac <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    27a4:	8861      	ldrh	r1, [r4, #2]
    27a6:	2900      	cmp	r1, #0
    27a8:	f47f aef7 	bne.w	259a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    27ac:	88a0      	ldrh	r0, [r4, #4]
    27ae:	f7ff fe51 	bl	2454 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    27b2:	2800      	cmp	r0, #0
    27b4:	f47f aee3 	bne.w	257e <usb_handle_standard_request+0x56>
    27b8:	e6ef      	b.n	259a <usb_handle_standard_request+0x72>
    27ba:	bf00      	nop
    27bc:	20000774 	.word	0x20000774
    27c0:	2000082e 	.word	0x2000082e
		if (type == USB_DESC_CONFIGURATION) {
    27c4:	2802      	cmp	r0, #2
		*data = p;
    27c6:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    27c8:	f47f aef4 	bne.w	25b4 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    27cc:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    27ce:	603b      	str	r3, [r7, #0]
		return true;
    27d0:	e6d5      	b.n	257e <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    27d2:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    27d6:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    27d8:	2800      	cmp	r0, #0
    27da:	f6bf af71 	bge.w	26c0 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    27de:	2a00      	cmp	r2, #0
    27e0:	f43f af66 	beq.w	26b0 <usb_handle_standard_request+0x188>
    27e4:	2a0a      	cmp	r2, #10
    27e6:	f47f aed8 	bne.w	259a <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    27ea:	782a      	ldrb	r2, [r5, #0]
    27ec:	2a00      	cmp	r2, #0
    27ee:	f43f aed4 	beq.w	259a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    27f2:	7869      	ldrb	r1, [r5, #1]
    27f4:	2904      	cmp	r1, #4
    27f6:	f47f af61 	bne.w	26bc <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    27fa:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    27fc:	428b      	cmp	r3, r1
    27fe:	f47f af5d 	bne.w	26bc <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2802:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2804:	bf96      	itet	ls
    2806:	199b      	addls	r3, r3, r6
	return 0;
    2808:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    280a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    280e:	f88c 3000 	strb.w	r3, [ip]
    2812:	e6d4      	b.n	25be <usb_handle_standard_request+0x96>

00002814 <usb_data_to_host>:
{
    2814:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    2816:	4c16      	ldr	r4, [pc, #88]	; (2870 <usb_data_to_host+0x5c>)
    2818:	7d23      	ldrb	r3, [r4, #20]
    281a:	b9f3      	cbnz	r3, 285a <usb_data_to_host+0x46>
		uint32_t chunk = usb_dev.data_buf_residue;
    281c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    281e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2820:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2822:	ab01      	add	r3, sp, #4
    2824:	2080      	movs	r0, #128	; 0x80
    2826:	f006 fd4f 	bl	92c8 <usb_write>
		usb_dev.data_buf += chunk;
    282a:	9a01      	ldr	r2, [sp, #4]
    282c:	68a3      	ldr	r3, [r4, #8]
    282e:	4413      	add	r3, r2
    2830:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2832:	68e3      	ldr	r3, [r4, #12]
    2834:	1a9b      	subs	r3, r3, r2
    2836:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2838:	b96b      	cbnz	r3, 2856 <usb_data_to_host+0x42>
    283a:	b162      	cbz	r2, 2856 <usb_data_to_host+0x42>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    283c:	6923      	ldr	r3, [r4, #16]
    283e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2840:	429a      	cmp	r2, r3
    2842:	dd08      	ble.n	2856 <usb_data_to_host+0x42>
			if (!(usb_dev.data_buf_len % usb_dev.mps0)) {
    2844:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    2848:	fb93 f1f2 	sdiv	r1, r3, r2
    284c:	fb02 3311 	mls	r3, r2, r1, r3
    2850:	b90b      	cbnz	r3, 2856 <usb_data_to_host+0x42>
				usb_dev.zlp_flag = true;
    2852:	2301      	movs	r3, #1
    2854:	7523      	strb	r3, [r4, #20]
}
    2856:	b002      	add	sp, #8
    2858:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    285a:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    285c:	461a      	mov	r2, r3
    285e:	4619      	mov	r1, r3
    2860:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    2862:	7523      	strb	r3, [r4, #20]
}
    2864:	b002      	add	sp, #8
    2866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    286a:	f001 be11 	b.w	4490 <usb_dc_ep_write>
    286e:	bf00      	nop
    2870:	20000774 	.word	0x20000774

00002874 <usb_handle_control_transfer>:
{
    2874:	b530      	push	{r4, r5, lr}
    2876:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
    2878:	2300      	movs	r3, #0
{
    287a:	4602      	mov	r2, r0
    287c:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    287e:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2880:	2800      	cmp	r0, #0
    2882:	d158      	bne.n	2936 <usb_handle_control_transfer+0xc2>
    2884:	2900      	cmp	r1, #0
    2886:	d135      	bne.n	28f4 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2888:	2208      	movs	r2, #8
    288a:	460b      	mov	r3, r1
    288c:	eb0d 0102 	add.w	r1, sp, r2
    2890:	f006 ff11 	bl	96b6 <usb_dc_ep_read>
    2894:	2800      	cmp	r0, #0
    2896:	da04      	bge.n	28a2 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2898:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    289a:	f001 fd6b 	bl	4374 <usb_dc_ep_set_stall>
}
    289e:	b005      	add	sp, #20
    28a0:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    28a2:	4c2a      	ldr	r4, [pc, #168]	; (294c <usb_handle_control_transfer+0xd8>)
    28a4:	9a02      	ldr	r2, [sp, #8]
    28a6:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    28a8:	9a03      	ldr	r2, [sp, #12]
    28aa:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    28ac:	f104 0238 	add.w	r2, r4, #56	; 0x38
    28b0:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    28b2:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    28b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    28ba:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    28bc:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    28be:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    28c2:	db0a      	blt.n	28da <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    28c4:	2b80      	cmp	r3, #128	; 0x80
    28c6:	d904      	bls.n	28d2 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    28c8:	2080      	movs	r0, #128	; 0x80
    28ca:	f001 fd53 	bl	4374 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    28ce:	2000      	movs	r0, #0
    28d0:	e7e3      	b.n	289a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    28d2:	b113      	cbz	r3, 28da <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
    28d4:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    28d8:	e7e1      	b.n	289e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    28da:	f7ff fd4f 	bl	237c <usb_handle_request.constprop.0>
    28de:	2800      	cmp	r0, #0
    28e0:	d0da      	beq.n	2898 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    28e2:	88e2      	ldrh	r2, [r4, #6]
    28e4:	6923      	ldr	r3, [r4, #16]
    28e6:	429a      	cmp	r2, r3
    28e8:	bfd4      	ite	le
    28ea:	60e2      	strle	r2, [r4, #12]
    28ec:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    28ee:	f7ff ff91 	bl	2814 <usb_data_to_host>
    28f2:	e7d4      	b.n	289e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    28f4:	4c15      	ldr	r4, [pc, #84]	; (294c <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28f6:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    28fa:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    28fc:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    28fe:	dc04      	bgt.n	290a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2900:	f006 fed9 	bl	96b6 <usb_dc_ep_read>
    2904:	2800      	cmp	r0, #0
    2906:	daca      	bge.n	289e <usb_handle_control_transfer+0x2a>
    2908:	e7c6      	b.n	2898 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    290a:	462a      	mov	r2, r5
    290c:	f006 fed3 	bl	96b6 <usb_dc_ep_read>
    2910:	2800      	cmp	r0, #0
    2912:	dbd9      	blt.n	28c8 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
    2914:	9a01      	ldr	r2, [sp, #4]
    2916:	68a3      	ldr	r3, [r4, #8]
    2918:	4413      	add	r3, r2
    291a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    291c:	68e3      	ldr	r3, [r4, #12]
    291e:	1a9b      	subs	r3, r3, r2
    2920:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    2922:	2b00      	cmp	r3, #0
    2924:	d1bb      	bne.n	289e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    2926:	f104 0338 	add.w	r3, r4, #56	; 0x38
    292a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    292c:	f7ff fd26 	bl	237c <usb_handle_request.constprop.0>
    2930:	2800      	cmp	r0, #0
    2932:	d1dc      	bne.n	28ee <usb_handle_control_transfer+0x7a>
    2934:	e7b0      	b.n	2898 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    2936:	2880      	cmp	r0, #128	; 0x80
    2938:	d1b1      	bne.n	289e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    293a:	4b04      	ldr	r3, [pc, #16]	; (294c <usb_handle_control_transfer+0xd8>)
    293c:	68da      	ldr	r2, [r3, #12]
    293e:	2a00      	cmp	r2, #0
    2940:	d1d5      	bne.n	28ee <usb_handle_control_transfer+0x7a>
    2942:	7d1b      	ldrb	r3, [r3, #20]
    2944:	2b00      	cmp	r3, #0
    2946:	d1d2      	bne.n	28ee <usb_handle_control_transfer+0x7a>
    2948:	e7a9      	b.n	289e <usb_handle_control_transfer+0x2a>
    294a:	bf00      	nop
    294c:	20000774 	.word	0x20000774

00002950 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2950:	4b05      	ldr	r3, [pc, #20]	; (2968 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    2952:	4a06      	ldr	r2, [pc, #24]	; (296c <usb_set_config+0x1c>)
    2954:	629a      	str	r2, [r3, #40]	; 0x28
    2956:	4a06      	ldr	r2, [pc, #24]	; (2970 <usb_set_config+0x20>)
    2958:	62da      	str	r2, [r3, #44]	; 0x2c
    295a:	4a06      	ldr	r2, [pc, #24]	; (2974 <usb_set_config+0x24>)
    295c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    295e:	4a06      	ldr	r2, [pc, #24]	; (2978 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2960:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    2962:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
    2964:	2000      	movs	r0, #0
    2966:	4770      	bx	lr
    2968:	20000774 	.word	0x20000774
    296c:	00002529 	.word	0x00002529
    2970:	0000222d 	.word	0x0000222d
    2974:	000022cd 	.word	0x000022cd
    2978:	0000226d 	.word	0x0000226d

0000297c <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
{
    297c:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    297e:	4b08      	ldr	r3, [pc, #32]	; (29a0 <usb_device_init+0x24>)
    2980:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2984:	b934      	cbnz	r4, 2994 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
    2986:	f000 f8e3 	bl	2b50 <usb_get_device_descriptor>
	if (!device_descriptor) {
    298a:	b130      	cbz	r0, 299a <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
    298c:	f7ff ffe0 	bl	2950 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
    2990:	4620      	mov	r0, r4
}
    2992:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2994:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2998:	e7fb      	b.n	2992 <usb_device_init+0x16>
		return -1;
    299a:	f04f 30ff 	mov.w	r0, #4294967295
    299e:	e7f8      	b.n	2992 <usb_device_init+0x16>
    29a0:	20000774 	.word	0x20000774

000029a4 <usb_enable>:
{
    29a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    29a8:	4d41      	ldr	r5, [pc, #260]	; (2ab0 <usb_enable+0x10c>)
{
    29aa:	4604      	mov	r4, r0
	struct usb_device_descriptor *dev_desc = (void *)usb_dev.descriptors;
    29ac:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	return z_impl_k_mutex_lock(mutex, timeout);
    29ae:	4841      	ldr	r0, [pc, #260]	; (2ab4 <usb_enable+0x110>)
    29b0:	f04f 32ff 	mov.w	r2, #4294967295
    29b4:	f04f 33ff 	mov.w	r3, #4294967295
    29b8:	f005 f8b6 	bl	7b28 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    29bc:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    29c0:	2e00      	cmp	r6, #0
    29c2:	d16e      	bne.n	2aa2 <usb_enable+0xfe>
	usb_dev.status_callback = cb;
    29c4:	483c      	ldr	r0, [pc, #240]	; (2ab8 <usb_enable+0x114>)
	usb_dev.user_status_callback = status_cb;
    29c6:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    29c8:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    29ca:	f001 fe7b 	bl	46c4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    29ce:	f001 fc69 	bl	42a4 <usb_dc_attach>
	if (ret < 0) {
    29d2:	1e04      	subs	r4, r0, #0
    29d4:	db49      	blt.n	2a6a <usb_enable+0xc6>
	ret = usb_transfer_init();
    29d6:	f000 fb25 	bl	3024 <usb_transfer_init>
	if (ret < 0) {
    29da:	1e04      	subs	r4, r0, #0
    29dc:	db45      	blt.n	2a6a <usb_enable+0xc6>
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    29de:	787b      	ldrb	r3, [r7, #1]
    29e0:	2b01      	cmp	r3, #1
    29e2:	d161      	bne.n	2aa8 <usb_enable+0x104>
	    dev_desc->bMaxPacketSize0 == 0) {
    29e4:	79fb      	ldrb	r3, [r7, #7]
	if (dev_desc->bDescriptorType != USB_DESC_DEVICE ||
    29e6:	2b00      	cmp	r3, #0
    29e8:	d05e      	beq.n	2aa8 <usb_enable+0x104>
	ret = usb_dc_ep_configure(&ep0_cfg);
    29ea:	4668      	mov	r0, sp
	usb_dev.mps0 = dev_desc->bMaxPacketSize0;
    29ec:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
	ep0_cfg.ep_mps = usb_dev.mps0;
    29f0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    29f4:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    29f8:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29fc:	f001 fc96 	bl	432c <usb_dc_ep_configure>
	if (ret < 0) {
    2a00:	1e04      	subs	r4, r0, #0
    2a02:	db32      	blt.n	2a6a <usb_enable+0xc6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2a04:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a06:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2a08:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2a0c:	f001 fc8e 	bl	432c <usb_dc_ep_configure>
	if (ret < 0) {
    2a10:	1e04      	subs	r4, r0, #0
    2a12:	db2a      	blt.n	2a6a <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2a14:	4929      	ldr	r1, [pc, #164]	; (2abc <usb_enable+0x118>)
    2a16:	4630      	mov	r0, r6
    2a18:	f001 fe40 	bl	469c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a1c:	1e04      	subs	r4, r0, #0
    2a1e:	db24      	blt.n	2a6a <usb_enable+0xc6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2a20:	4926      	ldr	r1, [pc, #152]	; (2abc <usb_enable+0x118>)
    2a22:	4638      	mov	r0, r7
    2a24:	f001 fe3a 	bl	469c <usb_dc_ep_set_callback>
	if (ret < 0) {
    2a28:	1e04      	subs	r4, r0, #0
    2a2a:	db1e      	blt.n	2a6a <usb_enable+0xc6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a2c:	4c24      	ldr	r4, [pc, #144]	; (2ac0 <usb_enable+0x11c>)
    2a2e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2ac4 <usb_enable+0x120>
    2a32:	4544      	cmp	r4, r8
    2a34:	d320      	bcc.n	2a78 <usb_enable+0xd4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2a36:	2000      	movs	r0, #0
    2a38:	f001 fd00 	bl	443c <usb_dc_ep_enable>
	if (ret < 0) {
    2a3c:	1e04      	subs	r4, r0, #0
    2a3e:	db14      	blt.n	2a6a <usb_enable+0xc6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2a40:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2a44:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    2a46:	f043 0301 	orr.w	r3, r3, #1
    2a4a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2a4e:	f001 fcf5 	bl	443c <usb_dc_ep_enable>
	if (ret < 0) {
    2a52:	1e04      	subs	r4, r0, #0
    2a54:	db09      	blt.n	2a6a <usb_enable+0xc6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    2a56:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a5e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    2a62:	2301      	movs	r3, #1
    2a64:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    2a68:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    2a6a:	4812      	ldr	r0, [pc, #72]	; (2ab4 <usb_enable+0x110>)
    2a6c:	f005 f8d6 	bl	7c1c <z_impl_k_mutex_unlock>
}
    2a70:	4620      	mov	r0, r4
    2a72:	b002      	add	sp, #8
    2a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    2a78:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2a7a:	2600      	movs	r6, #0
    2a7c:	7f22      	ldrb	r2, [r4, #28]
    2a7e:	b2f3      	uxtb	r3, r6
    2a80:	429a      	cmp	r2, r3
    2a82:	d801      	bhi.n	2a88 <usb_enable+0xe4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2a84:	3424      	adds	r4, #36	; 0x24
    2a86:	e7d4      	b.n	2a32 <usb_enable+0x8e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2a88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2a8c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2a90:	7910      	ldrb	r0, [r2, #4]
    2a92:	f001 fe03 	bl	469c <usb_dc_ep_set_callback>
    2a96:	3601      	adds	r6, #1
    2a98:	2800      	cmp	r0, #0
    2a9a:	d0ef      	beq.n	2a7c <usb_enable+0xd8>
    2a9c:	f04f 34ff 	mov.w	r4, #4294967295
    2aa0:	e7e3      	b.n	2a6a <usb_enable+0xc6>
		ret = -EALREADY;
    2aa2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    2aa6:	e7e0      	b.n	2a6a <usb_enable+0xc6>
		ret = -EINVAL;
    2aa8:	f06f 0415 	mvn.w	r4, #21
    2aac:	e7dd      	b.n	2a6a <usb_enable+0xc6>
    2aae:	bf00      	nop
    2ab0:	20000774 	.word	0x20000774
    2ab4:	200001f4 	.word	0x200001f4
    2ab8:	000023a9 	.word	0x000023a9
    2abc:	00002875 	.word	0x00002875
    2ac0:	2000030c 	.word	0x2000030c
    2ac4:	20000330 	.word	0x20000330

00002ac8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2ac8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2aca:	4b1f      	ldr	r3, [pc, #124]	; (2b48 <usb_update_sn_string_descriptor+0x80>)
{
    2acc:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2ace:	aa05      	add	r2, sp, #20
    2ad0:	f103 0510 	add.w	r5, r3, #16
    2ad4:	6818      	ldr	r0, [r3, #0]
    2ad6:	6859      	ldr	r1, [r3, #4]
    2ad8:	4614      	mov	r4, r2
    2ada:	c403      	stmia	r4!, {r0, r1}
    2adc:	3308      	adds	r3, #8
    2ade:	42ab      	cmp	r3, r5
    2ae0:	4622      	mov	r2, r4
    2ae2:	d1f7      	bne.n	2ad4 <usb_update_sn_string_descriptor+0xc>
    2ae4:	781b      	ldrb	r3, [r3, #0]
    2ae6:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2ae8:	2210      	movs	r2, #16
    2aea:	2100      	movs	r1, #0
    2aec:	a801      	add	r0, sp, #4
    2aee:	f006 fd73 	bl	95d8 <memset>
	memset(sn, 0, sizeof(sn));
    2af2:	2212      	movs	r2, #18
    2af4:	2100      	movs	r1, #0
    2af6:	4815      	ldr	r0, [pc, #84]	; (2b4c <usb_update_sn_string_descriptor+0x84>)
    2af8:	f006 fd6e 	bl	95d8 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2afc:	2110      	movs	r1, #16
    2afe:	a801      	add	r0, sp, #4
    2b00:	f006 fece 	bl	98a0 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2b04:	2800      	cmp	r0, #0
    2b06:	dd1b      	ble.n	2b40 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    2b08:	2808      	cmp	r0, #8
    2b0a:	bfb8      	it	lt
    2b0c:	2008      	movlt	r0, #8
    2b0e:	3809      	subs	r0, #9
    2b10:	ab01      	add	r3, sp, #4
    2b12:	490e      	ldr	r1, [pc, #56]	; (2b4c <usb_update_sn_string_descriptor+0x84>)
    2b14:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2b16:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b18:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2b1c:	ac0a      	add	r4, sp, #40	; 0x28
    2b1e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b22:	f003 030f 	and.w	r3, r3, #15
    2b26:	3328      	adds	r3, #40	; 0x28
    2b28:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    2b2a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b2c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b30:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2b34:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    2b36:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2b38:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    2b3a:	f101 0102 	add.w	r1, r1, #2
    2b3e:	d1eb      	bne.n	2b18 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2b40:	4802      	ldr	r0, [pc, #8]	; (2b4c <usb_update_sn_string_descriptor+0x84>)
    2b42:	b00b      	add	sp, #44	; 0x2c
    2b44:	bd30      	pop	{r4, r5, pc}
    2b46:	bf00      	nop
    2b48:	0000aa93 	.word	0x0000aa93
    2b4c:	2000155e 	.word	0x2000155e

00002b50 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    2b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b54:	4c70      	ldr	r4, [pc, #448]	; (2d18 <usb_get_device_descriptor+0x1c8>)
    2b56:	b087      	sub	sp, #28
	uint8_t str_descr_idx = 0U;
    2b58:	f04f 0b00 	mov.w	fp, #0
    2b5c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2b5e:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2b62:	46b0      	mov	r8, r6
	struct usb_cfg_data *cfg_data = NULL;
    2b64:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2b66:	46b1      	mov	r9, r6
	while (head->bLength != 0U) {
    2b68:	7823      	ldrb	r3, [r4, #0]
    2b6a:	b92b      	cbnz	r3, 2b78 <usb_get_device_descriptor+0x28>
	if ((head + 1) != __usb_descriptor_end) {
    2b6c:	4b6b      	ldr	r3, [pc, #428]	; (2d1c <usb_get_device_descriptor+0x1cc>)
    2b6e:	3402      	adds	r4, #2
    2b70:	429c      	cmp	r4, r3
    2b72:	d1f3      	bne.n	2b5c <usb_get_device_descriptor+0xc>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2b74:	4868      	ldr	r0, [pc, #416]	; (2d18 <usb_get_device_descriptor+0x1c8>)
    2b76:	e032      	b.n	2bde <usb_get_device_descriptor+0x8e>
		switch (head->bDescriptorType) {
    2b78:	7863      	ldrb	r3, [r4, #1]
    2b7a:	2b05      	cmp	r3, #5
    2b7c:	d81b      	bhi.n	2bb6 <usb_get_device_descriptor+0x66>
    2b7e:	e8df f003 	tbb	[pc, r3]
    2b82:	0390      	.short	0x0390
    2b84:	3b1d90c8 	.word	0x3b1d90c8
	struct usb_dc_ep_cfg_data ep_cfg = {
    2b88:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_check_cap(&ep_cfg);
    2b8a:	a804      	add	r0, sp, #16
	struct usb_dc_ep_cfg_data ep_cfg = {
    2b8c:	f88d b010 	strb.w	fp, [sp, #16]
    2b90:	f8ad 3012 	strh.w	r3, [sp, #18]
    2b94:	f88d b014 	strb.w	fp, [sp, #20]
	ret = usb_dc_ep_check_cap(&ep_cfg);
    2b98:	f006 fd5c 	bl	9654 <usb_dc_ep_check_cap>
	if (ret) {
    2b9c:	b140      	cbz	r0, 2bb0 <usb_get_device_descriptor+0x60>
		ep_cfg.ep_mps = 8;
    2b9e:	2308      	movs	r3, #8
		ret = usb_dc_ep_check_cap(&ep_cfg);
    2ba0:	a804      	add	r0, sp, #16
		ep_cfg.ep_mps = 8;
    2ba2:	f8ad 3012 	strh.w	r3, [sp, #18]
		ret = usb_dc_ep_check_cap(&ep_cfg);
    2ba6:	f006 fd55 	bl	9654 <usb_dc_ep_check_cap>
		if (ret) {
    2baa:	b108      	cbz	r0, 2bb0 <usb_get_device_descriptor+0x60>
			ep_cfg.ep_mps = 0;
    2bac:	f8ad b012 	strh.w	fp, [sp, #18]
	desc->bMaxPacketSize0 = ep_cfg.ep_mps;
    2bb0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    2bb4:	71e3      	strb	r3, [r4, #7]
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2bb6:	7823      	ldrb	r3, [r4, #0]
    2bb8:	441c      	add	r4, r3
    2bba:	e7d5      	b.n	2b68 <usb_get_device_descriptor+0x18>
			if (if_descr->bAlternateSetting) {
    2bbc:	78e3      	ldrb	r3, [r4, #3]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d1f9      	bne.n	2bb6 <usb_get_device_descriptor+0x66>
			if (if_descr->bInterfaceNumber == 0U) {
    2bc2:	78a3      	ldrb	r3, [r4, #2]
    2bc4:	b173      	cbz	r3, 2be4 <usb_get_device_descriptor+0x94>
			numof_ifaces++;
    2bc6:	f108 0801 	add.w	r8, r8, #1
    2bca:	fa5f f888 	uxtb.w	r8, r8
			break;
    2bce:	e7f2      	b.n	2bb6 <usb_get_device_descriptor+0x66>
		if (cfg_data->interface_descriptor == iface) {
    2bd0:	686a      	ldr	r2, [r5, #4]
    2bd2:	4294      	cmp	r4, r2
    2bd4:	d009      	beq.n	2bea <usb_get_device_descriptor+0x9a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2bd6:	3524      	adds	r5, #36	; 0x24
    2bd8:	429d      	cmp	r5, r3
    2bda:	d3f9      	bcc.n	2bd0 <usb_get_device_descriptor+0x80>
		return NULL;
    2bdc:	2000      	movs	r0, #0
}
    2bde:	b007      	add	sp, #28
    2be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2be4:	4d4e      	ldr	r5, [pc, #312]	; (2d20 <usb_get_device_descriptor+0x1d0>)
    2be6:	4b4f      	ldr	r3, [pc, #316]	; (2d24 <usb_get_device_descriptor+0x1d4>)
    2be8:	e7f6      	b.n	2bd8 <usb_get_device_descriptor+0x88>
				if (cfg_data->interface_config) {
    2bea:	68ab      	ldr	r3, [r5, #8]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d0ea      	beq.n	2bc6 <usb_get_device_descriptor+0x76>
					cfg_data->interface_config(head,
    2bf0:	4641      	mov	r1, r8
    2bf2:	4620      	mov	r0, r4
    2bf4:	4798      	blx	r3
    2bf6:	e7e6      	b.n	2bc6 <usb_get_device_descriptor+0x76>
			if (!cfg_data) {
    2bf8:	2d00      	cmp	r5, #0
    2bfa:	d0ef      	beq.n	2bdc <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2bfc:	2200      	movs	r2, #0
    2bfe:	7f2b      	ldrb	r3, [r5, #28]
    2c00:	429a      	cmp	r2, r3
    2c02:	d2eb      	bcs.n	2bdc <usb_get_device_descriptor+0x8c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    2c04:	6a29      	ldr	r1, [r5, #32]
    2c06:	78a0      	ldrb	r0, [r4, #2]
    2c08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    2c0c:	790b      	ldrb	r3, [r1, #4]
    2c0e:	4298      	cmp	r0, r3
    2c10:	d001      	beq.n	2c16 <usb_get_device_descriptor+0xc6>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2c12:	3201      	adds	r2, #1
    2c14:	e7f3      	b.n	2bfe <usb_get_device_descriptor+0xae>
    2c16:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2c18:	78e0      	ldrb	r0, [r4, #3]
    2c1a:	f000 0003 	and.w	r0, r0, #3
    2c1e:	f88d 0014 	strb.w	r0, [sp, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2c22:	7920      	ldrb	r0, [r4, #4]
    2c24:	f894 c005 	ldrb.w	ip, [r4, #5]
    2c28:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    2c2c:	f8ad 0012 	strh.w	r0, [sp, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2c30:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2c34:	2800      	cmp	r0, #0
    2c36:	b2fb      	uxtb	r3, r7
    2c38:	da28      	bge.n	2c8c <usb_get_device_descriptor+0x13c>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2c3a:	f107 0010 	add.w	r0, r7, #16
    2c3e:	f04f 0c01 	mov.w	ip, #1
    2c42:	fa0c f000 	lsl.w	r0, ip, r0
    2c46:	ea10 0f0a 	tst.w	r0, sl
    2c4a:	d126      	bne.n	2c9a <usb_get_device_descriptor+0x14a>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2c4c:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    2c50:	f88d 0010 	strb.w	r0, [sp, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2c54:	a804      	add	r0, sp, #16
    2c56:	e9cd 1302 	strd	r1, r3, [sp, #8]
    2c5a:	9201      	str	r2, [sp, #4]
    2c5c:	f006 fcfa 	bl	9654 <usb_dc_ep_check_cap>
    2c60:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	b9c0      	cbnz	r0, 2c9a <usb_get_device_descriptor+0x14a>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2c68:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2c6c:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2c6e:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2c72:	bf18      	it	ne
    2c74:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2c76:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    2c78:	bf18      	it	ne
    2c7a:	b2db      	uxtbne	r3, r3
    2c7c:	f04f 0201 	mov.w	r2, #1
    2c80:	bf14      	ite	ne
    2c82:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    2c84:	40ba      	lsleq	r2, r7
    2c86:	ea4a 0a02 	orr.w	sl, sl, r2
				return 0;
    2c8a:	e794      	b.n	2bb6 <usb_get_device_descriptor+0x66>
				if ((*requested_ep & (1U << (idx)))) {
    2c8c:	2001      	movs	r0, #1
    2c8e:	40b8      	lsls	r0, r7
    2c90:	ea10 0f0a 	tst.w	r0, sl
    2c94:	d101      	bne.n	2c9a <usb_get_device_descriptor+0x14a>
    2c96:	4618      	mov	r0, r3
    2c98:	e7da      	b.n	2c50 <usb_get_device_descriptor+0x100>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2c9a:	3701      	adds	r7, #1
    2c9c:	2f10      	cmp	r7, #16
    2c9e:	d1bb      	bne.n	2c18 <usb_get_device_descriptor+0xc8>
    2ca0:	e7b7      	b.n	2c12 <usb_get_device_descriptor+0xc2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2ca2:	2e03      	cmp	r6, #3
    2ca4:	d11d      	bne.n	2ce2 <usb_get_device_descriptor+0x192>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2ca6:	f7ff ff0f 	bl	2ac8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2caa:	4607      	mov	r7, r0
    2cac:	b168      	cbz	r0, 2cca <usb_get_device_descriptor+0x17a>
	runtime_sn_len = strlen(runtime_sn);
    2cae:	f006 fc81 	bl	95b4 <strlen>
	if (!runtime_sn_len) {
    2cb2:	9001      	str	r0, [sp, #4]
    2cb4:	b148      	cbz	r0, 2cca <usb_get_device_descriptor+0x17a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2cb6:	481c      	ldr	r0, [pc, #112]	; (2d28 <usb_get_device_descriptor+0x1d8>)
    2cb8:	f006 fc7c 	bl	95b4 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2cbc:	9a01      	ldr	r2, [sp, #4]
    2cbe:	4282      	cmp	r2, r0
    2cc0:	d103      	bne.n	2cca <usb_get_device_descriptor+0x17a>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2cc2:	4639      	mov	r1, r7
    2cc4:	1ca0      	adds	r0, r4, #2
    2cc6:	f006 fc7c 	bl	95c2 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    2cca:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    2ccc:	f06f 0102 	mvn.w	r1, #2
    2cd0:	18e2      	adds	r2, r4, r3
    2cd2:	1b09      	subs	r1, r1, r4
    2cd4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    2cd8:	42d1      	cmn	r1, r2
    2cda:	d513      	bpl.n	2d04 <usb_get_device_descriptor+0x1b4>
			str_descr_idx += 1U;
    2cdc:	3601      	adds	r6, #1
    2cde:	b2f6      	uxtb	r6, r6
			break;
    2ce0:	e769      	b.n	2bb6 <usb_get_device_descriptor+0x66>
			if (str_descr_idx) {
    2ce2:	2e00      	cmp	r6, #0
    2ce4:	d1f1      	bne.n	2cca <usb_get_device_descriptor+0x17a>
				if (!cfg_descr) {
    2ce6:	f1b9 0f00 	cmp.w	r9, #0
    2cea:	f43f af77 	beq.w	2bdc <usb_get_device_descriptor+0x8c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2cee:	eba4 0309 	sub.w	r3, r4, r9
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2cf2:	f889 3002 	strb.w	r3, [r9, #2]
	dst[1] = val >> 8;
    2cf6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2cfa:	f889 3003 	strb.w	r3, [r9, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2cfe:	f889 8004 	strb.w	r8, [r9, #4]
    2d02:	e7eb      	b.n	2cdc <usb_get_device_descriptor+0x18c>
		buf[i] = 0U;
    2d04:	f802 bc01 	strb.w	fp, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    2d08:	f813 0901 	ldrb.w	r0, [r3], #-1
    2d0c:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2d10:	e7e2      	b.n	2cd8 <usb_get_device_descriptor+0x188>
		switch (head->bDescriptorType) {
    2d12:	46a1      	mov	r9, r4
    2d14:	e74f      	b.n	2bb6 <usb_get_device_descriptor+0x66>
    2d16:	bf00      	nop
    2d18:	20000228 	.word	0x20000228
    2d1c:	2000030b 	.word	0x2000030b
    2d20:	2000030c 	.word	0x2000030c
    2d24:	20000330 	.word	0x20000330
    2d28:	0000aa93 	.word	0x0000aa93

00002d2c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	4b09      	ldr	r3, [pc, #36]	; (2d54 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2d30:	2100      	movs	r1, #0
    2d32:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2d34:	781c      	ldrb	r4, [r3, #0]
    2d36:	4284      	cmp	r4, r0
    2d38:	d104      	bne.n	2d44 <usb_ep_get_transfer+0x18>
    2d3a:	685c      	ldr	r4, [r3, #4]
    2d3c:	b114      	cbz	r4, 2d44 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2d3e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    2d42:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2d44:	3101      	adds	r1, #1
    2d46:	2904      	cmp	r1, #4
    2d48:	f103 0340 	add.w	r3, r3, #64	; 0x40
    2d4c:	d1f2      	bne.n	2d34 <usb_ep_get_transfer+0x8>
	return NULL;
    2d4e:	2000      	movs	r0, #0
    2d50:	e7f7      	b.n	2d42 <usb_ep_get_transfer+0x16>
    2d52:	bf00      	nop
    2d54:	20000840 	.word	0x20000840

00002d58 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    2d5c:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    2d60:	f810 6c2c 	ldrb.w	r6, [r0, #-44]
	if (trans->status != -EBUSY) {
    2d64:	3310      	adds	r3, #16
{
    2d66:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    2d68:	d110      	bne.n	2d8c <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2d6a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    2d6c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    2d70:	0799      	lsls	r1, r3, #30
    2d72:	d53c      	bpl.n	2dee <usb_transfer_work+0x96>
		if (!trans->bsize) {
    2d74:	bb02      	cbnz	r2, 2db8 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2d76:	f013 0304 	ands.w	r3, r3, #4
    2d7a:	d104      	bne.n	2d86 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    2d7c:	461a      	mov	r2, r3
    2d7e:	4619      	mov	r1, r3
    2d80:	4630      	mov	r0, r6
    2d82:	f006 faa1 	bl	92c8 <usb_write>
			}
			trans->status = 0;
    2d86:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    2d88:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2d8c:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d90:	3310      	adds	r3, #16
    2d92:	d00e      	beq.n	2db2 <usb_transfer_work+0x5a>
    2d94:	f854 5c18 	ldr.w	r5, [r4, #-24]
    2d98:	b15d      	cbz	r5, 2db2 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2d9a:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2d9e:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2da2:	f007 f870 	bl	9e86 <k_is_in_isr>
    2da6:	2800      	cmp	r0, #0
    2da8:	d04c      	beq.n	2e44 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2daa:	482c      	ldr	r0, [pc, #176]	; (2e5c <usb_transfer_work+0x104>)
    2dac:	4621      	mov	r1, r4
    2dae:	f007 f95e 	bl	a06e <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    2db2:	b002      	add	sp, #8
    2db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2db8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2dbc:	ab01      	add	r3, sp, #4
    2dbe:	4630      	mov	r0, r6
    2dc0:	f006 fa82 	bl	92c8 <usb_write>
		if (ret) {
    2dc4:	b110      	cbz	r0, 2dcc <usb_transfer_work+0x74>
			trans->status = -EINVAL;
    2dc6:	f06f 0315 	mvn.w	r3, #21
    2dca:	e7dd      	b.n	2d88 <usb_transfer_work+0x30>
		trans->buffer += bytes;
    2dcc:	9a01      	ldr	r2, [sp, #4]
    2dce:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2dd2:	4413      	add	r3, r2
    2dd4:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2dd8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2ddc:	1a9b      	subs	r3, r3, r2
    2dde:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2de2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2de6:	4413      	add	r3, r2
    2de8:	f844 3c1c 	str.w	r3, [r4, #-28]
    2dec:	e7ce      	b.n	2d8c <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2dee:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2df2:	ab01      	add	r3, sp, #4
    2df4:	4630      	mov	r0, r6
    2df6:	f001 fbc7 	bl	4588 <usb_dc_ep_read_wait>
		if (ret) {
    2dfa:	2800      	cmp	r0, #0
    2dfc:	d1e3      	bne.n	2dc6 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
    2dfe:	9d01      	ldr	r5, [sp, #4]
    2e00:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2e04:	442b      	add	r3, r5
    2e06:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2e0a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e0e:	1b5b      	subs	r3, r3, r5
    2e10:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2e14:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2e18:	442b      	add	r3, r5
    2e1a:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2e1e:	2d00      	cmp	r5, #0
    2e20:	d0b1      	beq.n	2d86 <usb_transfer_work+0x2e>
    2e22:	4630      	mov	r0, r6
    2e24:	f001 fc54 	bl	46d0 <usb_dc_ep_mps>
    2e28:	fbb5 f3f0 	udiv	r3, r5, r0
    2e2c:	fb03 5510 	mls	r5, r3, r0, r5
    2e30:	2d00      	cmp	r5, #0
    2e32:	d1a8      	bne.n	2d86 <usb_transfer_work+0x2e>
    2e34:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d0a4      	beq.n	2d86 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
    2e3c:	4630      	mov	r0, r6
    2e3e:	f001 fbeb 	bl	4618 <usb_dc_ep_read_continue>
    2e42:	e7a3      	b.n	2d8c <usb_transfer_work+0x34>
		trans->cb = NULL;
    2e44:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    2e48:	f1a4 0010 	sub.w	r0, r4, #16
    2e4c:	f004 ff56 	bl	7cfc <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    2e50:	4642      	mov	r2, r8
    2e52:	4639      	mov	r1, r7
    2e54:	4630      	mov	r0, r6
    2e56:	47a8      	blx	r5
    2e58:	e7ab      	b.n	2db2 <usb_transfer_work+0x5a>
    2e5a:	bf00      	nop
    2e5c:	20000430 	.word	0x20000430

00002e60 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e60:	1e4b      	subs	r3, r1, #1
    2e62:	2b01      	cmp	r3, #1
{
    2e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e66:	4606      	mov	r6, r0
    2e68:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e6a:	d80f      	bhi.n	2e8c <usb_transfer_ep_callback+0x2c>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2e6c:	f7ff ff5e 	bl	2d2c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    2e70:	4604      	mov	r4, r0
    2e72:	b968      	cbnz	r0, 2e90 <usb_transfer_ep_callback+0x30>
		if (status == USB_DC_EP_DATA_OUT) {
    2e74:	2d01      	cmp	r5, #1
    2e76:	d109      	bne.n	2e8c <usb_transfer_ep_callback+0x2c>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2e78:	ab01      	add	r3, sp, #4
    2e7a:	2201      	movs	r2, #1
    2e7c:	f10d 0103 	add.w	r1, sp, #3
    2e80:	4630      	mov	r0, r6
    2e82:	f001 fb81 	bl	4588 <usb_dc_ep_read_wait>
			} while (bytes);
    2e86:	9b01      	ldr	r3, [sp, #4]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d1f5      	bne.n	2e78 <usb_transfer_ep_callback+0x18>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2e8c:	b002      	add	sp, #8
    2e8e:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e90:	f006 fff9 	bl	9e86 <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e94:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e98:	b108      	cbz	r0, 2e9e <usb_transfer_ep_callback+0x3e>
    2e9a:	2d01      	cmp	r5, #1
    2e9c:	d105      	bne.n	2eaa <usb_transfer_ep_callback+0x4a>
		usb_transfer_work(&trans->work);
    2e9e:	4608      	mov	r0, r1
}
    2ea0:	b002      	add	sp, #8
    2ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    2ea6:	f7ff bf57 	b.w	2d58 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2eaa:	4803      	ldr	r0, [pc, #12]	; (2eb8 <usb_transfer_ep_callback+0x58>)
}
    2eac:	b002      	add	sp, #8
    2eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2eb2:	f007 b8dc 	b.w	a06e <k_work_submit_to_queue>
    2eb6:	bf00      	nop
    2eb8:	20000430 	.word	0x20000430

00002ebc <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec0:	4606      	mov	r6, r0
    2ec2:	9101      	str	r1, [sp, #4]
    2ec4:	4615      	mov	r5, r2
    2ec6:	4698      	mov	r8, r3
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2ec8:	f006 fa46 	bl	9358 <usb_transfer_is_busy>
    2ecc:	4604      	mov	r4, r0
    2ece:	2800      	cmp	r0, #0
    2ed0:	d15c      	bne.n	2f8c <usb_transfer+0xd0>
	__asm__ volatile(
    2ed2:	f04f 0320 	mov.w	r3, #32
    2ed6:	f3ef 8a11 	mrs	sl, BASEPRI
    2eda:	f383 8812 	msr	BASEPRI_MAX, r3
    2ede:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2ee2:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2f94 <usb_transfer+0xd8>
	return z_impl_k_sem_take(sem, timeout);
    2ee6:	2200      	movs	r2, #0
    2ee8:	2300      	movs	r3, #0
    2eea:	4658      	mov	r0, fp
    2eec:	f004 ff2a 	bl	7d44 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2ef0:	b970      	cbnz	r0, 2f10 <usb_transfer+0x54>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2ef2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2f98 <usb_transfer+0xdc>
    2ef6:	01a7      	lsls	r7, r4, #6
    2ef8:	eb09 1484 	add.w	r4, r9, r4, lsl #6
    2efc:	6863      	ldr	r3, [r4, #4]
    2efe:	f113 0f10 	cmn.w	r3, #16
    2f02:	d114      	bne.n	2f2e <usb_transfer+0x72>
    2f04:	9301      	str	r3, [sp, #4]
	z_impl_k_sem_give(sem);
    2f06:	4658      	mov	r0, fp
    2f08:	f004 fef8 	bl	7cfc <z_impl_k_sem_give>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    2f0c:	9b01      	ldr	r3, [sp, #4]
    2f0e:	e006      	b.n	2f1e <usb_transfer+0x62>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2f10:	3401      	adds	r4, #1
    2f12:	2c04      	cmp	r4, #4
    2f14:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    2f18:	d1e5      	bne.n	2ee6 <usb_transfer+0x2a>
		ret = -ENOMEM;
    2f1a:	f06f 030b 	mvn.w	r3, #11
	__asm__ volatile(
    2f1e:	f38a 8811 	msr	BASEPRI, sl
    2f22:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2f26:	4618      	mov	r0, r3
    2f28:	b003      	add	sp, #12
    2f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->buffer = data;
    2f2e:	9b01      	ldr	r3, [sp, #4]
	trans->tsize = 0;
    2f30:	6120      	str	r0, [r4, #16]
	trans->bsize = dlen;
    2f32:	e9c4 3502 	strd	r3, r5, [r4, #8]
	trans->cb = cb;
    2f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f38:	6163      	str	r3, [r4, #20]
	trans->priv = cb_data;
    2f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2f3c:	61a3      	str	r3, [r4, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2f3e:	4630      	mov	r0, r6
	trans->status = -EBUSY;
    2f40:	f06f 030f 	mvn.w	r3, #15
	trans->ep = ep;
    2f44:	f809 6007 	strb.w	r6, [r9, r7]
	trans->flags = flags;
    2f48:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	trans->status = -EBUSY;
    2f4c:	6063      	str	r3, [r4, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2f4e:	f001 fbbf 	bl	46d0 <usb_dc_ep_mps>
    2f52:	b158      	cbz	r0, 2f6c <usb_transfer+0xb0>
    2f54:	4630      	mov	r0, r6
    2f56:	f001 fbbb 	bl	46d0 <usb_dc_ep_mps>
    2f5a:	fbb5 f3f0 	udiv	r3, r5, r0
    2f5e:	fb03 5510 	mls	r5, r3, r0, r5
    2f62:	b11d      	cbz	r5, 2f6c <usb_transfer+0xb0>
		trans->flags |= USB_TRANS_NO_ZLP;
    2f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2f66:	f043 0304 	orr.w	r3, r3, #4
    2f6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    2f6c:	f018 0f02 	tst.w	r8, #2
    2f70:	d007      	beq.n	2f82 <usb_transfer+0xc6>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f72:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    2f76:	4809      	ldr	r0, [pc, #36]	; (2f9c <usb_transfer+0xe0>)
    2f78:	4449      	add	r1, r9
    2f7a:	f007 f878 	bl	a06e <k_work_submit_to_queue>
	int key, ret = 0;
    2f7e:	2300      	movs	r3, #0
    2f80:	e7cd      	b.n	2f1e <usb_transfer+0x62>
		ret = usb_dc_ep_read_continue(ep);
    2f82:	4630      	mov	r0, r6
    2f84:	f001 fb48 	bl	4618 <usb_dc_ep_read_continue>
    2f88:	4603      	mov	r3, r0
    2f8a:	e7c8      	b.n	2f1e <usb_transfer+0x62>
		return -EBUSY;
    2f8c:	f06f 030f 	mvn.w	r3, #15
    2f90:	e7c9      	b.n	2f26 <usb_transfer+0x6a>
    2f92:	bf00      	nop
    2f94:	2000085c 	.word	0x2000085c
    2f98:	20000840 	.word	0x20000840
    2f9c:	20000430 	.word	0x20000430

00002fa0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    2fa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    2fa2:	f04f 0320 	mov.w	r3, #32
    2fa6:	f3ef 8411 	mrs	r4, BASEPRI
    2faa:	f383 8812 	msr	BASEPRI_MAX, r3
    2fae:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    2fb2:	f7ff febb 	bl	2d2c <usb_ep_get_transfer>
	if (!trans) {
    2fb6:	b150      	cbz	r0, 2fce <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    2fb8:	6843      	ldr	r3, [r0, #4]
    2fba:	3310      	adds	r3, #16
    2fbc:	d107      	bne.n	2fce <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    2fbe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    2fc2:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fc4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    2fc8:	4803      	ldr	r0, [pc, #12]	; (2fd8 <usb_cancel_transfer+0x38>)
    2fca:	f007 f850 	bl	a06e <k_work_submit_to_queue>
	__asm__ volatile(
    2fce:	f384 8811 	msr	BASEPRI, r4
    2fd2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	20000430 	.word	0x20000430

00002fdc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    2fdc:	b570      	push	{r4, r5, r6, lr}
    2fde:	4c0f      	ldr	r4, [pc, #60]	; (301c <usb_cancel_transfers+0x40>)
    2fe0:	2504      	movs	r5, #4
	__asm__ volatile(
    2fe2:	f04f 0320 	mov.w	r3, #32
    2fe6:	f3ef 8611 	mrs	r6, BASEPRI
    2fea:	f383 8812 	msr	BASEPRI_MAX, r3
    2fee:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    2ff2:	6863      	ldr	r3, [r4, #4]
    2ff4:	3310      	adds	r3, #16
    2ff6:	d107      	bne.n	3008 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    2ff8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ffc:	4808      	ldr	r0, [pc, #32]	; (3020 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    2ffe:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3000:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3004:	f007 f833 	bl	a06e <k_work_submit_to_queue>
	__asm__ volatile(
    3008:	f386 8811 	msr	BASEPRI, r6
    300c:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3010:	3d01      	subs	r5, #1
    3012:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3016:	d1e4      	bne.n	2fe2 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3018:	bd70      	pop	{r4, r5, r6, pc}
    301a:	bf00      	nop
    301c:	20000840 	.word	0x20000840
    3020:	20000430 	.word	0x20000430

00003024 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3024:	b570      	push	{r4, r5, r6, lr}
    3026:	4c0a      	ldr	r4, [pc, #40]	; (3050 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3028:	4e0a      	ldr	r6, [pc, #40]	; (3054 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    302a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    302c:	4631      	mov	r1, r6
    302e:	4620      	mov	r0, r4
    3030:	f007 f800 	bl	a034 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3034:	2201      	movs	r2, #1
    3036:	f1a4 0010 	sub.w	r0, r4, #16
    303a:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    303c:	3501      	adds	r5, #1
    303e:	f006 ffbc 	bl	9fba <z_impl_k_sem_init>
    3042:	2d04      	cmp	r5, #4
    3044:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3048:	d1f0      	bne.n	302c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    304a:	2000      	movs	r0, #0
    304c:	bd70      	pop	{r4, r5, r6, pc}
    304e:	bf00      	nop
    3050:	2000086c 	.word	0x2000086c
    3054:	00002d59 	.word	0x00002d59

00003058 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	4604      	mov	r4, r0
    305c:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    305e:	7901      	ldrb	r1, [r0, #4]
    3060:	4812      	ldr	r0, [pc, #72]	; (30ac <cdc_acm_class_handle_req+0x54>)
{
    3062:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    3064:	f006 f954 	bl	9310 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3068:	b1e8      	cbz	r0, 30a6 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    306a:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    306e:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    3070:	2a00      	cmp	r2, #0
    3072:	db11      	blt.n	3098 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    3074:	2b20      	cmp	r3, #32
    3076:	d004      	beq.n	3082 <cdc_acm_class_handle_req+0x2a>
    3078:	2b22      	cmp	r3, #34	; 0x22
    307a:	d009      	beq.n	3090 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    307c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3080:	e005      	b.n	308e <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    3082:	6829      	ldr	r1, [r5, #0]
    3084:	2207      	movs	r2, #7
    3086:	3810      	subs	r0, #16
    3088:	f006 fa9b 	bl	95c2 <memcpy>
			return 0;
    308c:	2000      	movs	r0, #0
}
    308e:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    3090:	8863      	ldrh	r3, [r4, #2]
    3092:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    3096:	e7f9      	b.n	308c <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    3098:	2b21      	cmp	r3, #33	; 0x21
    309a:	d1ef      	bne.n	307c <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    309c:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    309e:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    30a0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    30a2:	6033      	str	r3, [r6, #0]
			return 0;
    30a4:	e7f2      	b.n	308c <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    30a6:	f06f 0012 	mvn.w	r0, #18
    30aa:	e7f0      	b.n	308e <cdc_acm_class_handle_req+0x36>
    30ac:	20000940 	.word	0x20000940

000030b0 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    30b0:	b508      	push	{r3, lr}
    30b2:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    30b4:	4803      	ldr	r0, [pc, #12]	; (30c4 <cdc_acm_int_in+0x14>)
    30b6:	f006 f939 	bl	932c <usb_get_dev_data_by_ep>
	if (common == NULL) {
    30ba:	b110      	cbz	r0, 30c2 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    30bc:	2301      	movs	r3, #1
    30be:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    30c2:	bd08      	pop	{r3, pc}
    30c4:	20000940 	.word	0x20000940

000030c8 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    30c8:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    30ca:	2301      	movs	r3, #1
    30cc:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    30d0:	680b      	ldr	r3, [r1, #0]
    30d2:	b133      	cbz	r3, 30e2 <cdc_acm_irq_rx_enable+0x1a>
    30d4:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    30d8:	b11b      	cbz	r3, 30e2 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    30da:	4802      	ldr	r0, [pc, #8]	; (30e4 <cdc_acm_irq_rx_enable+0x1c>)
    30dc:	3108      	adds	r1, #8
    30de:	f006 bfc6 	b.w	a06e <k_work_submit_to_queue>
	}
}
    30e2:	4770      	bx	lr
    30e4:	20000430 	.word	0x20000430

000030e8 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    30e8:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    30ea:	2301      	movs	r3, #1
    30ec:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    30f0:	680b      	ldr	r3, [r1, #0]
    30f2:	b133      	cbz	r3, 3102 <cdc_acm_irq_tx_enable+0x1a>
    30f4:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    30f8:	b11b      	cbz	r3, 3102 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    30fa:	4802      	ldr	r0, [pc, #8]	; (3104 <cdc_acm_irq_tx_enable+0x1c>)
    30fc:	3108      	adds	r1, #8
    30fe:	f006 bfb6 	b.w	a06e <k_work_submit_to_queue>
}
    3102:	4770      	bx	lr
    3104:	20000430 	.word	0x20000430

00003108 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3108:	4a0d      	ldr	r2, [pc, #52]	; (3140 <cdc_acm_reset_port+0x38>)
{
    310a:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    310c:	2100      	movs	r1, #0
    310e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3112:	6810      	ldr	r0, [r2, #0]
    3114:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    3118:	8890      	ldrh	r0, [r2, #4]
    311a:	7992      	ldrb	r2, [r2, #6]
    311c:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    3120:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    3124:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    3128:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    312c:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    3130:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    3134:	2240      	movs	r2, #64	; 0x40
    3136:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    313a:	f006 ba4d 	b.w	95d8 <memset>
    313e:	bf00      	nop
    3140:	0000a740 	.word	0x0000a740

00003144 <cdc_acm_fifo_fill>:
{
    3144:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3146:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    3148:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    314c:	b188      	cbz	r0, 3172 <cdc_acm_fifo_fill+0x2e>
    314e:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    3152:	b97b      	cbnz	r3, 3174 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    3154:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3158:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    315c:	f006 f831 	bl	91c2 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3160:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3162:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3164:	2300      	movs	r3, #0
    3166:	4804      	ldr	r0, [pc, #16]	; (3178 <cdc_acm_fifo_fill+0x34>)
    3168:	f105 0118 	add.w	r1, r5, #24
    316c:	f004 ff40 	bl	7ff0 <k_work_schedule_for_queue>
	return wrote;
    3170:	4620      	mov	r0, r4
}
    3172:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    3174:	2000      	movs	r0, #0
    3176:	e7fc      	b.n	3172 <cdc_acm_fifo_fill+0x2e>
    3178:	20000430 	.word	0x20000430

0000317c <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    317c:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    317e:	6904      	ldr	r4, [r0, #16]
{
    3180:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    3184:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    3188:	b1a3      	cbz	r3, 31b4 <cdc_acm_poll_out+0x38>
    318a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    318e:	b98b      	cbnz	r3, 31b4 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3190:	f10d 0107 	add.w	r1, sp, #7
    3194:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    3198:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    319c:	2201      	movs	r2, #1
    319e:	f006 f810 	bl	91c2 <ring_buf_put>
    31a2:	4601      	mov	r1, r0
    31a4:	b140      	cbz	r0, 31b8 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    31a6:	480d      	ldr	r0, [pc, #52]	; (31dc <cdc_acm_poll_out+0x60>)
    31a8:	2221      	movs	r2, #33	; 0x21
    31aa:	2300      	movs	r3, #0
    31ac:	f104 0118 	add.w	r1, r4, #24
    31b0:	f004 ff1e 	bl	7ff0 <k_work_schedule_for_queue>
}
    31b4:	b002      	add	sp, #8
    31b6:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    31b8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    31bc:	2201      	movs	r2, #1
    31be:	f006 f854 	bl	926a <ring_buf_get>
    31c2:	2800      	cmp	r0, #0
    31c4:	d0f6      	beq.n	31b4 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    31c6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    31ca:	2201      	movs	r2, #1
    31cc:	f10d 0107 	add.w	r1, sp, #7
    31d0:	f005 fff7 	bl	91c2 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    31d4:	2800      	cmp	r0, #0
    31d6:	d1e6      	bne.n	31a6 <cdc_acm_poll_out+0x2a>
    31d8:	e7ec      	b.n	31b4 <cdc_acm_poll_out+0x38>
    31da:	bf00      	nop
    31dc:	20000430 	.word	0x20000430

000031e0 <tx_work_handler>:
{
    31e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    31e2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    31e6:	685b      	ldr	r3, [r3, #4]
    31e8:	6a1b      	ldr	r3, [r3, #32]
    31ea:	7d1f      	ldrb	r7, [r3, #20]
{
    31ec:	b085      	sub	sp, #20
    31ee:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    31f0:	4638      	mov	r0, r7
    31f2:	f006 f8b1 	bl	9358 <usb_transfer_is_busy>
    31f6:	4606      	mov	r6, r0
    31f8:	b9e0      	cbnz	r0, 3234 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    31fa:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    31fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3200:	a903      	add	r1, sp, #12
    3202:	f005 fffd 	bl	9200 <ring_buf_get_claim>
	if (!len) {
    3206:	4604      	mov	r4, r0
    3208:	b1a0      	cbz	r0, 3234 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    320a:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    320c:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    3210:	bf08      	it	eq
    3212:	f100 34ff 	addeq.w	r4, r0, #4294967295
	dev_data->tx_ready = false;
    3216:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    321a:	9301      	str	r3, [sp, #4]
    321c:	4b06      	ldr	r3, [pc, #24]	; (3238 <tx_work_handler+0x58>)
    321e:	9903      	ldr	r1, [sp, #12]
    3220:	9300      	str	r3, [sp, #0]
    3222:	4622      	mov	r2, r4
    3224:	2302      	movs	r3, #2
    3226:	4638      	mov	r0, r7
    3228:	f7ff fe48 	bl	2ebc <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    322c:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    322e:	4621      	mov	r1, r4
    3230:	f006 f806 	bl	9240 <ring_buf_get_finish>
}
    3234:	b005      	add	sp, #20
    3236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3238:	0000323d 	.word	0x0000323d

0000323c <cdc_acm_write_cb>:
{
    323c:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    323e:	2301      	movs	r3, #1
    3240:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3244:	6813      	ldr	r3, [r2, #0]
{
    3246:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3248:	b13b      	cbz	r3, 325a <cdc_acm_write_cb+0x1e>
    324a:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    324e:	b123      	cbz	r3, 325a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3250:	480a      	ldr	r0, [pc, #40]	; (327c <cdc_acm_write_cb+0x40>)
    3252:	f102 0108 	add.w	r1, r2, #8
    3256:	f006 ff0a 	bl	a06e <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    325a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    325e:	689a      	ldr	r2, [r3, #8]
    3260:	691b      	ldr	r3, [r3, #16]
    3262:	429a      	cmp	r2, r3
    3264:	d008      	beq.n	3278 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3266:	f104 0118 	add.w	r1, r4, #24
    326a:	4804      	ldr	r0, [pc, #16]	; (327c <cdc_acm_write_cb+0x40>)
}
    326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    3270:	2200      	movs	r2, #0
    3272:	2300      	movs	r3, #0
    3274:	f004 bebc 	b.w	7ff0 <k_work_schedule_for_queue>
}
    3278:	bd10      	pop	{r4, pc}
    327a:	bf00      	nop
    327c:	20000430 	.word	0x20000430

00003280 <cdc_acm_init>:
{
    3280:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3282:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    3284:	2300      	movs	r3, #0
    3286:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    328a:	4b0c      	ldr	r3, [pc, #48]	; (32bc <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    328c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    3290:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3292:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3296:	b969      	cbnz	r1, 32b4 <cdc_acm_init+0x34>
	list->head = node;
    3298:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    329c:	f104 0008 	add.w	r0, r4, #8
    32a0:	4907      	ldr	r1, [pc, #28]	; (32c0 <cdc_acm_init+0x40>)
    32a2:	f006 fec7 	bl	a034 <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    32a6:	f104 0018 	add.w	r0, r4, #24
    32aa:	4906      	ldr	r1, [pc, #24]	; (32c4 <cdc_acm_init+0x44>)
    32ac:	f006 fef0 	bl	a090 <k_work_init_delayable>
}
    32b0:	2000      	movs	r0, #0
    32b2:	bd10      	pop	{r4, pc}
	parent->next = child;
    32b4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    32b6:	605a      	str	r2, [r3, #4]
}
    32b8:	e7f0      	b.n	329c <cdc_acm_init+0x1c>
    32ba:	bf00      	nop
    32bc:	20000940 	.word	0x20000940
    32c0:	00009383 	.word	0x00009383
    32c4:	000031e1 	.word	0x000031e1

000032c8 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    32c8:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    32ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    32ce:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    32d0:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    32d2:	4c0d      	ldr	r4, [pc, #52]	; (3308 <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    32d4:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    32d6:	f242 00a1 	movw	r0, #8353	; 0x20a1
    32da:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    32de:	2300      	movs	r3, #0
    32e0:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    32e4:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    32e6:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    32ea:	7900      	ldrb	r0, [r0, #4]
    32ec:	220a      	movs	r2, #10
    32ee:	a901      	add	r1, sp, #4
    32f0:	f005 ffea 	bl	92c8 <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    32f4:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    32f8:	b923      	cbnz	r3, 3304 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    32fa:	2001      	movs	r0, #1
    32fc:	f006 ffeb 	bl	a2d6 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3300:	3c01      	subs	r4, #1
    3302:	d1f7      	bne.n	32f4 <cdc_acm_send_notification.isra.0+0x2c>
}
    3304:	b005      	add	sp, #20
    3306:	bd30      	pop	{r4, r5, pc}
    3308:	000186a1 	.word	0x000186a1

0000330c <cdc_acm_read_cb>:
{
    330c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    330e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    3310:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    3314:	1e0a      	subs	r2, r1, #0
{
    3316:	4605      	mov	r5, r0
	if (size <= 0) {
    3318:	dd1f      	ble.n	335a <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    331a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    331e:	4631      	mov	r1, r6
    3320:	f005 ff4f 	bl	91c2 <ring_buf_put>
	dev_data->rx_ready = true;
    3324:	2301      	movs	r3, #1
    3326:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    332a:	6823      	ldr	r3, [r4, #0]
    332c:	b13b      	cbz	r3, 333e <cdc_acm_read_cb+0x32>
    332e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    3332:	b123      	cbz	r3, 333e <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3334:	480e      	ldr	r0, [pc, #56]	; (3370 <cdc_acm_read_cb+0x64>)
    3336:	f104 0108 	add.w	r1, r4, #8
    333a:	f006 fe98 	bl	a06e <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    333e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    3342:	684b      	ldr	r3, [r1, #4]
    3344:	694a      	ldr	r2, [r1, #20]
    3346:	1a9a      	subs	r2, r3, r2
    3348:	69cb      	ldr	r3, [r1, #28]
    334a:	1a9b      	subs	r3, r3, r2
    334c:	2b3f      	cmp	r3, #63	; 0x3f
    334e:	d804      	bhi.n	335a <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    3350:	2301      	movs	r3, #1
    3352:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    3356:	b002      	add	sp, #8
    3358:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    335a:	4b06      	ldr	r3, [pc, #24]	; (3374 <cdc_acm_read_cb+0x68>)
    335c:	9300      	str	r3, [sp, #0]
    335e:	9401      	str	r4, [sp, #4]
    3360:	2301      	movs	r3, #1
    3362:	2240      	movs	r2, #64	; 0x40
    3364:	4631      	mov	r1, r6
    3366:	4628      	mov	r0, r5
    3368:	f7ff fda8 	bl	2ebc <usb_transfer>
    336c:	e7f3      	b.n	3356 <cdc_acm_read_cb+0x4a>
    336e:	bf00      	nop
    3370:	20000430 	.word	0x20000430
    3374:	0000330d 	.word	0x0000330d

00003378 <cdc_acm_dev_status_cb>:
{
    3378:	b538      	push	{r3, r4, r5, lr}
    337a:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    337c:	4601      	mov	r1, r0
    337e:	481e      	ldr	r0, [pc, #120]	; (33f8 <cdc_acm_dev_status_cb+0x80>)
    3380:	f005 ffba 	bl	92f8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3384:	4604      	mov	r4, r0
    3386:	b380      	cbz	r0, 33ea <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    3388:	4602      	mov	r2, r0
	switch (status) {
    338a:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    338c:	f852 39a4 	ldr.w	r3, [r2], #-164
    3390:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    3392:	2905      	cmp	r1, #5
    3394:	d829      	bhi.n	33ea <cdc_acm_dev_status_cb+0x72>
    3396:	e8df f001 	tbb	[pc, r1]
    339a:	2820      	.short	0x2820
    339c:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    33a0:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    33a4:	b931      	cbnz	r1, 33b4 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    33a6:	6a1b      	ldr	r3, [r3, #32]
    33a8:	7b18      	ldrb	r0, [r3, #12]
    33aa:	f7ff ffaf 	bl	330c <cdc_acm_read_cb>
			dev_data->configured = true;
    33ae:	2301      	movs	r3, #1
    33b0:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    33b4:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    33b8:	b9bb      	cbnz	r3, 33ea <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    33ba:	2301      	movs	r3, #1
    33bc:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    33c0:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    33c4:	b18b      	cbz	r3, 33ea <cdc_acm_dev_status_cb+0x72>
    33c6:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    33ca:	b173      	cbz	r3, 33ea <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    33cc:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    33d0:	480a      	ldr	r0, [pc, #40]	; (33fc <cdc_acm_dev_status_cb+0x84>)
}
    33d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    33d6:	f006 be4a 	b.w	a06e <k_work_submit_to_queue>
}
    33da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    33de:	4610      	mov	r0, r2
    33e0:	f7ff be92 	b.w	3108 <cdc_acm_reset_port>
		dev_data->suspended = true;
    33e4:	2301      	movs	r3, #1
			dev_data->suspended = false;
    33e6:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    33ea:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    33ec:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d0fa      	beq.n	33ea <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    33f4:	2300      	movs	r3, #0
    33f6:	e7f6      	b.n	33e6 <cdc_acm_dev_status_cb+0x6e>
    33f8:	20000940 	.word	0x20000940
    33fc:	20000430 	.word	0x20000430

00003400 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    3400:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    3402:	4d09      	ldr	r5, [pc, #36]	; (3428 <z_usb_work_q_init+0x28>)
    3404:	4909      	ldr	r1, [pc, #36]	; (342c <z_usb_work_q_init+0x2c>)
    3406:	2400      	movs	r4, #0
    3408:	9400      	str	r4, [sp, #0]
    340a:	f04f 33ff 	mov.w	r3, #4294967295
    340e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3412:	4628      	mov	r0, r5
    3414:	f004 fdb4 	bl	7f80 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3418:	4905      	ldr	r1, [pc, #20]	; (3430 <z_usb_work_q_init+0x30>)
    341a:	4628      	mov	r0, r5
    341c:	f006 fd39 	bl	9e92 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3420:	4620      	mov	r0, r4
    3422:	b003      	add	sp, #12
    3424:	bd30      	pop	{r4, r5, pc}
    3426:	bf00      	nop
    3428:	20000430 	.word	0x20000430
    342c:	20001e40 	.word	0x20001e40
    3430:	0000aada 	.word	0x0000aada

00003434 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3434:	4901      	ldr	r1, [pc, #4]	; (343c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3436:	2210      	movs	r2, #16
	str	r2, [r1]
    3438:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    343a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    343c:	e000ed10 	.word	0xe000ed10

00003440 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3440:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3442:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3444:	f380 8811 	msr	BASEPRI, r0
	isb
    3448:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    344c:	f3bf 8f4f 	dsb	sy
    3450:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3452:	b662      	cpsie	i
	isb
    3454:	f3bf 8f6f 	isb	sy

	bx	lr
    3458:	4770      	bx	lr
    345a:	bf00      	nop

0000345c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    345c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    345e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3460:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3464:	f3bf 8f4f 	dsb	sy
    3468:	bf20      	wfe

	msr	BASEPRI, r0
    346a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    346e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3470:	4770      	bx	lr
    3472:	bf00      	nop

00003474 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3474:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3476:	2800      	cmp	r0, #0
    3478:	db07      	blt.n	348a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    347a:	4a04      	ldr	r2, [pc, #16]	; (348c <arch_irq_enable+0x18>)
    347c:	0941      	lsrs	r1, r0, #5
    347e:	2301      	movs	r3, #1
    3480:	f000 001f 	and.w	r0, r0, #31
    3484:	4083      	lsls	r3, r0
    3486:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    348a:	4770      	bx	lr
    348c:	e000e100 	.word	0xe000e100

00003490 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3490:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3492:	2800      	cmp	r0, #0
    3494:	db0c      	blt.n	34b0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3496:	0943      	lsrs	r3, r0, #5
    3498:	4906      	ldr	r1, [pc, #24]	; (34b4 <arch_irq_disable+0x24>)
    349a:	f000 001f 	and.w	r0, r0, #31
    349e:	3320      	adds	r3, #32
    34a0:	2201      	movs	r2, #1
    34a2:	4082      	lsls	r2, r0
    34a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    34a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34ac:	f3bf 8f6f 	isb	sy
}
    34b0:	4770      	bx	lr
    34b2:	bf00      	nop
    34b4:	e000e100 	.word	0xe000e100

000034b8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    34b8:	4b05      	ldr	r3, [pc, #20]	; (34d0 <arch_irq_is_enabled+0x18>)
    34ba:	0942      	lsrs	r2, r0, #5
    34bc:	f000 001f 	and.w	r0, r0, #31
    34c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    34c4:	2301      	movs	r3, #1
    34c6:	fa03 f000 	lsl.w	r0, r3, r0
}
    34ca:	4010      	ands	r0, r2
    34cc:	4770      	bx	lr
    34ce:	bf00      	nop
    34d0:	e000e100 	.word	0xe000e100

000034d4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    34d4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    34d6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34d8:	bfa8      	it	ge
    34da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    34de:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34e2:	bfb8      	it	lt
    34e4:	4b06      	ldrlt	r3, [pc, #24]	; (3500 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34e6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    34ea:	bfac      	ite	ge
    34ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34f0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34f4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34f6:	bfb4      	ite	lt
    34f8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34fa:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    34fe:	4770      	bx	lr
    3500:	e000ed14 	.word	0xe000ed14

00003504 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3504:	bf30      	wfi
    b z_SysNmiOnReset
    3506:	f7ff bffd 	b.w	3504 <z_SysNmiOnReset>
    350a:	bf00      	nop

0000350c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    350c:	4a0f      	ldr	r2, [pc, #60]	; (354c <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    350e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3510:	4b0f      	ldr	r3, [pc, #60]	; (3550 <z_arm_prep_c+0x44>)
    3512:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3516:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    351c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3520:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3524:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    352c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3530:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3534:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3538:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    353c:	f004 f91e 	bl	777c <z_bss_zero>
	z_data_copy();
    3540:	f005 f8ee 	bl	8720 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3544:	f000 fa20 	bl	3988 <z_arm_interrupt_init>
	z_cstart();
    3548:	f004 f96a 	bl	7820 <z_cstart>
    354c:	00001000 	.word	0x00001000
    3550:	e000ed00 	.word	0xe000ed00

00003554 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3554:	4a09      	ldr	r2, [pc, #36]	; (357c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3556:	490a      	ldr	r1, [pc, #40]	; (3580 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3558:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    355a:	6809      	ldr	r1, [r1, #0]
    355c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    355e:	4909      	ldr	r1, [pc, #36]	; (3584 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3560:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3562:	684b      	ldr	r3, [r1, #4]
    3564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3568:	604b      	str	r3, [r1, #4]
    356a:	2300      	movs	r3, #0
    356c:	f383 8811 	msr	BASEPRI, r3
    3570:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3574:	6893      	ldr	r3, [r2, #8]
}
    3576:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3578:	4770      	bx	lr
    357a:	bf00      	nop
    357c:	20001520 	.word	0x20001520
    3580:	0000a954 	.word	0x0000a954
    3584:	e000ed00 	.word	0xe000ed00

00003588 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3588:	4912      	ldr	r1, [pc, #72]	; (35d4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    358a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    358c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3590:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3592:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3596:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    359a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    359c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    35a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    35a4:	4f0c      	ldr	r7, [pc, #48]	; (35d8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    35a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    35aa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    35ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    35ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    35b0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    35b2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    35b4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    35b6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    35ba:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    35bc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    35be:	f000 fa29 	bl	3a14 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    35c2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    35c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    35ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    35ce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    35d2:	4770      	bx	lr
    ldr r1, =_kernel
    35d4:	20001520 	.word	0x20001520
    ldr v4, =_SCS_ICSR
    35d8:	e000ed04 	.word	0xe000ed04

000035dc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    35dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    35e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    35e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    35e6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    35ea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    35ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    35f0:	2902      	cmp	r1, #2
    beq _oops
    35f2:	d0ff      	beq.n	35f4 <_oops>

000035f4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    35f4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    35f6:	f005 ffce 	bl	9596 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    35fa:	bd01      	pop	{r0, pc}

000035fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    35fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3600:	9b00      	ldr	r3, [sp, #0]
    3602:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3606:	490a      	ldr	r1, [pc, #40]	; (3630 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3608:	9b01      	ldr	r3, [sp, #4]
    360a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    360e:	9b02      	ldr	r3, [sp, #8]
    3610:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3614:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    361c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3620:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3624:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3626:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3628:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    362a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    362c:	4770      	bx	lr
    362e:	bf00      	nop
    3630:	00008a99 	.word	0x00008a99

00003634 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3634:	4a09      	ldr	r2, [pc, #36]	; (365c <z_check_thread_stack_fail+0x28>)
{
    3636:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3638:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    363a:	b170      	cbz	r0, 365a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    363c:	f113 0f16 	cmn.w	r3, #22
    3640:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3642:	d005      	beq.n	3650 <z_check_thread_stack_fail+0x1c>
    3644:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3648:	429a      	cmp	r2, r3
    364a:	d805      	bhi.n	3658 <z_check_thread_stack_fail+0x24>
    364c:	4283      	cmp	r3, r0
    364e:	d203      	bcs.n	3658 <z_check_thread_stack_fail+0x24>
		return 0;
    3650:	4281      	cmp	r1, r0
    3652:	bf28      	it	cs
    3654:	2000      	movcs	r0, #0
    3656:	4770      	bx	lr
    3658:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    365a:	4770      	bx	lr
    365c:	20001520 	.word	0x20001520

00003660 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3660:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3662:	4b09      	ldr	r3, [pc, #36]	; (3688 <arch_switch_to_main_thread+0x28>)
{
    3664:	460d      	mov	r5, r1
    3666:	4614      	mov	r4, r2
	_current = main_thread;
    3668:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    366a:	f000 f9d3 	bl	3a14 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    366e:	4620      	mov	r0, r4
    3670:	f385 8809 	msr	PSP, r5
    3674:	2100      	movs	r1, #0
    3676:	b663      	cpsie	if
    3678:	f381 8811 	msr	BASEPRI, r1
    367c:	f3bf 8f6f 	isb	sy
    3680:	2200      	movs	r2, #0
    3682:	2300      	movs	r3, #0
    3684:	f005 fa08 	bl	8a98 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3688:	20001520 	.word	0x20001520

0000368c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    368c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    368e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3690:	4a0b      	ldr	r2, [pc, #44]	; (36c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3692:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3694:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3696:	bf1e      	ittt	ne
	movne	r1, #0
    3698:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    369a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    369c:	f006 fbfe 	blne	9e9c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    36a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    36a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    36a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    36aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    36ae:	4905      	ldr	r1, [pc, #20]	; (36c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    36b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    36b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    36b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    36b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    36ba:	4903      	ldr	r1, [pc, #12]	; (36c8 <_isr_wrapper+0x3c>)
	bx r1
    36bc:	4708      	bx	r1
    36be:	0000      	.short	0x0000
	ldr r2, =_kernel
    36c0:	20001520 	.word	0x20001520
	ldr r1, =_sw_isr_table
    36c4:	0000a528 	.word	0x0000a528
	ldr r1, =z_arm_int_exit
    36c8:	000036cd 	.word	0x000036cd

000036cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    36cc:	4b04      	ldr	r3, [pc, #16]	; (36e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    36ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    36d0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    36d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    36d4:	d003      	beq.n	36de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    36d6:	4903      	ldr	r1, [pc, #12]	; (36e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    36d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    36dc:	600a      	str	r2, [r1, #0]

000036de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    36de:	4770      	bx	lr
	ldr r3, =_kernel
    36e0:	20001520 	.word	0x20001520
	ldr r1, =_SCS_ICSR
    36e4:	e000ed04 	.word	0xe000ed04

000036e8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    36e8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    36ea:	4b26      	ldr	r3, [pc, #152]	; (3784 <mem_manage_fault+0x9c>)
{
    36ec:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    36ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    36f0:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    36f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    36f6:	bf14      	ite	ne
    36f8:	2411      	movne	r4, #17
    36fa:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    36fc:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3702:	bf18      	it	ne
    3704:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3706:	0792      	lsls	r2, r2, #30
{
    3708:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    370a:	d50a      	bpl.n	3722 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    370c:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    370e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3710:	0614      	lsls	r4, r2, #24
    3712:	d534      	bpl.n	377e <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3714:	b119      	cbz	r1, 371e <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    371c:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    371e:	2413      	movs	r4, #19
    3720:	e001      	b.n	3726 <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    3722:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3726:	4b17      	ldr	r3, [pc, #92]	; (3784 <mem_manage_fault+0x9c>)
    3728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    372a:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    372e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3730:	bf18      	it	ne
    3732:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3734:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    373a:	bf18      	it	ne
    373c:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    373e:	06d2      	lsls	r2, r2, #27
    3740:	d402      	bmi.n	3748 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3744:	079b      	lsls	r3, r3, #30
    3746:	d50a      	bpl.n	375e <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3748:	4b0e      	ldr	r3, [pc, #56]	; (3784 <mem_manage_fault+0x9c>)
    374a:	685b      	ldr	r3, [r3, #4]
    374c:	0519      	lsls	r1, r3, #20
    374e:	d506      	bpl.n	375e <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3750:	4631      	mov	r1, r6
    3752:	f7ff ff6f 	bl	3634 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    3756:	b110      	cbz	r0, 375e <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3758:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    375c:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    375e:	4b09      	ldr	r3, [pc, #36]	; (3784 <mem_manage_fault+0x9c>)
    3760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3762:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3764:	bf42      	ittt	mi
    3766:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3768:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    376c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    376e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3770:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3774:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3776:	2300      	movs	r3, #0
    3778:	702b      	strb	r3, [r5, #0]

	return reason;
}
    377a:	4620      	mov	r0, r4
    377c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    377e:	f06f 0015 	mvn.w	r0, #21
    3782:	e7cc      	b.n	371e <mem_manage_fault+0x36>
    3784:	e000ed00 	.word	0xe000ed00

00003788 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3788:	4b13      	ldr	r3, [pc, #76]	; (37d8 <usage_fault.constprop.0+0x50>)
    378a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    378c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3792:	bf14      	ite	ne
    3794:	201e      	movne	r0, #30
    3796:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3798:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    379e:	bf18      	it	ne
    37a0:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    37a2:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    37a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    37a8:	bf18      	it	ne
    37aa:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    37ac:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    37b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    37b2:	bf18      	it	ne
    37b4:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    37b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    37ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    37bc:	bf18      	it	ne
    37be:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    37c0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    37c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    37c6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    37ca:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    37ce:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    37d0:	bf18      	it	ne
    37d2:	2024      	movne	r0, #36	; 0x24
    37d4:	4770      	bx	lr
    37d6:	bf00      	nop
    37d8:	e000ed00 	.word	0xe000ed00

000037dc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37dc:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37de:	4b19      	ldr	r3, [pc, #100]	; (3844 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    37e0:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    37e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    37e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    37e6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    37ea:	bf14      	ite	ne
    37ec:	2017      	movne	r0, #23
    37ee:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    37f0:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37f4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    37f6:	bf18      	it	ne
    37f8:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    37fa:	05a4      	lsls	r4, r4, #22
    37fc:	d509      	bpl.n	3812 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    37fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3800:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3802:	0400      	lsls	r0, r0, #16
    3804:	d504      	bpl.n	3810 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    3806:	b11a      	cbz	r2, 3810 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    380a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    380e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3810:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3812:	4b0c      	ldr	r3, [pc, #48]	; (3844 <bus_fault.constprop.0+0x68>)
    3814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3816:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    381a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    381c:	bf18      	it	ne
    381e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3820:	05d2      	lsls	r2, r2, #23
    3822:	d40c      	bmi.n	383e <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3826:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    382a:	bf18      	it	ne
    382c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    382e:	4a05      	ldr	r2, [pc, #20]	; (3844 <bus_fault.constprop.0+0x68>)
    3830:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3832:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3836:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3838:	2300      	movs	r3, #0
    383a:	700b      	strb	r3, [r1, #0]
}
    383c:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    383e:	201b      	movs	r0, #27
    3840:	e7f5      	b.n	382e <bus_fault.constprop.0+0x52>
    3842:	bf00      	nop
    3844:	e000ed00 	.word	0xe000ed00

00003848 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3848:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    384a:	4b45      	ldr	r3, [pc, #276]	; (3960 <z_arm_fault+0x118>)
    384c:	685b      	ldr	r3, [r3, #4]
{
    384e:	b08a      	sub	sp, #40	; 0x28
    3850:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3852:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3856:	2600      	movs	r6, #0
    3858:	f386 8811 	msr	BASEPRI, r6
    385c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3860:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3864:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3868:	d111      	bne.n	388e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    386a:	f002 000c 	and.w	r0, r2, #12
    386e:	2808      	cmp	r0, #8
    3870:	d00d      	beq.n	388e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3872:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3874:	bf4c      	ite	mi
    3876:	460d      	movmi	r5, r1
			*nested_exc = true;
    3878:	2601      	movpl	r6, #1
	*recoverable = false;
    387a:	2200      	movs	r2, #0
	switch (fault) {
    387c:	3b03      	subs	r3, #3
	*recoverable = false;
    387e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3882:	2b03      	cmp	r3, #3
    3884:	d805      	bhi.n	3892 <z_arm_fault+0x4a>
    3886:	e8df f003 	tbb	[pc, r3]
    388a:	5d1e      	.short	0x5d1e
    388c:	5a61      	.short	0x5a61
		return NULL;
    388e:	4635      	mov	r5, r6
    3890:	e7f3      	b.n	387a <z_arm_fault+0x32>
    3892:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3898:	b99b      	cbnz	r3, 38c2 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    389a:	2220      	movs	r2, #32
    389c:	4629      	mov	r1, r5
    389e:	a802      	add	r0, sp, #8
    38a0:	f005 fe8f 	bl	95c2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    38a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38a6:	2e00      	cmp	r6, #0
    38a8:	d054      	beq.n	3954 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    38aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
    38ae:	b922      	cbnz	r2, 38ba <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    38b0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    38b4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    38b8:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    38ba:	a902      	add	r1, sp, #8
    38bc:	4620      	mov	r0, r4
    38be:	f005 fe68 	bl	9592 <z_arm_fatal_error>
}
    38c2:	b00a      	add	sp, #40	; 0x28
    38c4:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    38c6:	4b26      	ldr	r3, [pc, #152]	; (3960 <z_arm_fault+0x118>)
    38c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38ca:	0791      	lsls	r1, r2, #30
    38cc:	d4e1      	bmi.n	3892 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    38ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38d0:	2a00      	cmp	r2, #0
    38d2:	dbde      	blt.n	3892 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    38d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38d6:	0052      	lsls	r2, r2, #1
    38d8:	d5db      	bpl.n	3892 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    38da:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    38dc:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    38de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    38e2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38e8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    38ec:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    38ee:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    38f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    38f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    38f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38fc:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3900:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3904:	4291      	cmp	r1, r2
    3906:	d00a      	beq.n	391e <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    390a:	b2d2      	uxtb	r2, r2
    390c:	b14a      	cbz	r2, 3922 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    390e:	f10d 0207 	add.w	r2, sp, #7
    3912:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3914:	4628      	mov	r0, r5
    3916:	f7ff fee7 	bl	36e8 <mem_manage_fault>
		reason = usage_fault(esf);
    391a:	4604      	mov	r4, r0
		break;
    391c:	e7ba      	b.n	3894 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    391e:	682c      	ldr	r4, [r5, #0]
    3920:	e7b8      	b.n	3894 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3924:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3928:	d005      	beq.n	3936 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    392a:	f10d 0107 	add.w	r1, sp, #7
    392e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3930:	f7ff ff54 	bl	37dc <bus_fault.constprop.0>
    3934:	e7f1      	b.n	391a <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    393c:	d3a9      	bcc.n	3892 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    393e:	f7ff ff23 	bl	3788 <usage_fault.constprop.0>
    3942:	e7ea      	b.n	391a <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3944:	f10d 0207 	add.w	r2, sp, #7
    3948:	2100      	movs	r1, #0
    394a:	e7e3      	b.n	3914 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    394c:	f10d 0107 	add.w	r1, sp, #7
    3950:	2000      	movs	r0, #0
    3952:	e7ed      	b.n	3930 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3954:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3958:	f023 0301 	bic.w	r3, r3, #1
    395c:	e7ac      	b.n	38b8 <z_arm_fault+0x70>
    395e:	bf00      	nop
    3960:	e000ed00 	.word	0xe000ed00

00003964 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3964:	4a02      	ldr	r2, [pc, #8]	; (3970 <z_arm_fault_init+0xc>)
    3966:	6953      	ldr	r3, [r2, #20]
    3968:	f043 0310 	orr.w	r3, r3, #16
    396c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    396e:	4770      	bx	lr
    3970:	e000ed00 	.word	0xe000ed00

00003974 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3974:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3978:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    397c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    397e:	4672      	mov	r2, lr
	bl z_arm_fault
    3980:	f7ff ff62 	bl	3848 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3984:	bd01      	pop	{r0, pc}
    3986:	bf00      	nop

00003988 <z_arm_interrupt_init>:
    3988:	4804      	ldr	r0, [pc, #16]	; (399c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    398a:	2300      	movs	r3, #0
    398c:	2120      	movs	r1, #32
    398e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3990:	3301      	adds	r3, #1
    3992:	2b30      	cmp	r3, #48	; 0x30
    3994:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3998:	d1f9      	bne.n	398e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    399a:	4770      	bx	lr
    399c:	e000e100 	.word	0xe000e100

000039a0 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    39a0:	f7fe fad8 	bl	1f54 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    39a4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    39a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    39aa:	4808      	ldr	r0, [pc, #32]	; (39cc <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    39ac:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    39b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    39b2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    39b6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    39ba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    39bc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    39be:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    39c2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    39c6:	f7ff fda1 	bl	350c <z_arm_prep_c>
    39ca:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    39cc:	200026c0 	.word	0x200026c0

000039d0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    39d0:	4b08      	ldr	r3, [pc, #32]	; (39f4 <z_impl_k_thread_abort+0x24>)
    39d2:	689b      	ldr	r3, [r3, #8]
    39d4:	4283      	cmp	r3, r0
    39d6:	d10b      	bne.n	39f0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    39d8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    39dc:	b143      	cbz	r3, 39f0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    39de:	4b06      	ldr	r3, [pc, #24]	; (39f8 <z_impl_k_thread_abort+0x28>)
    39e0:	685a      	ldr	r2, [r3, #4]
    39e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    39e6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    39e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    39ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    39ee:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    39f0:	f004 be24 	b.w	863c <z_thread_abort>
    39f4:	20001520 	.word	0x20001520
    39f8:	e000ed00 	.word	0xe000ed00

000039fc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    39fc:	4b02      	ldr	r3, [pc, #8]	; (3a08 <z_arm_configure_static_mpu_regions+0xc>)
    39fe:	4a03      	ldr	r2, [pc, #12]	; (3a0c <z_arm_configure_static_mpu_regions+0x10>)
    3a00:	4803      	ldr	r0, [pc, #12]	; (3a10 <z_arm_configure_static_mpu_regions+0x14>)
    3a02:	2101      	movs	r1, #1
    3a04:	f000 b870 	b.w	3ae8 <arm_core_mpu_configure_static_mpu_regions>
    3a08:	20040000 	.word	0x20040000
    3a0c:	20000000 	.word	0x20000000
    3a10:	0000a7ac 	.word	0x0000a7ac

00003a14 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3a14:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3a16:	4b05      	ldr	r3, [pc, #20]	; (3a2c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3a18:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    3a1a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3a1c:	4a04      	ldr	r2, [pc, #16]	; (3a30 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3a1e:	2140      	movs	r1, #64	; 0x40
    3a20:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3a24:	4618      	mov	r0, r3
    3a26:	2101      	movs	r1, #1
    3a28:	f000 b868 	b.w	3afc <arm_core_mpu_configure_dynamic_mpu_regions>
    3a2c:	20000948 	.word	0x20000948
    3a30:	150b0000 	.word	0x150b0000

00003a34 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3a34:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3a36:	4e20      	ldr	r6, [pc, #128]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3a38:	2500      	movs	r5, #0
    3a3a:	428d      	cmp	r5, r1
    3a3c:	da39      	bge.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		if (regions[i].size == 0U) {
    3a3e:	6844      	ldr	r4, [r0, #4]
    3a40:	b374      	cbz	r4, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3a42:	b153      	cbz	r3, 3a5a <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3a44:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3a48:	ea14 0f0c 	tst.w	r4, ip
    3a4c:	d12f      	bne.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
		&&
    3a4e:	2c1f      	cmp	r4, #31
    3a50:	d92d      	bls.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
		((part->start & (part->size - 1U)) == 0U);
    3a52:	6807      	ldr	r7, [r0, #0]
		&&
    3a54:	ea1c 0f07 	tst.w	ip, r7
    3a58:	d129      	bne.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3a5a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3a5c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3a5e:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3a62:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3a66:	d91e      	bls.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
	if (size > (1UL << 31)) {
    3a68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3a6c:	d81d      	bhi.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3a6e:	3c01      	subs	r4, #1
    3a70:	fab4 f484 	clz	r4, r4
    3a74:	f1c4 041f 	rsb	r4, r4, #31
    3a78:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3a7a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3a7e:	ea4c 0c04 	orr.w	ip, ip, r4
    3a82:	d814      	bhi.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3a84:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3a88:	4314      	orrs	r4, r2
    3a8a:	f044 0410 	orr.w	r4, r4, #16
    3a8e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3a92:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3a96:	f04c 0401 	orr.w	r4, ip, #1
    3a9a:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3a9e:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3aa0:	3501      	adds	r5, #1
    3aa2:	300c      	adds	r0, #12
    3aa4:	e7c9      	b.n	3a3a <mpu_configure_regions+0x6>
		return REGION_32B;
    3aa6:	2408      	movs	r4, #8
    3aa8:	e7e7      	b.n	3a7a <mpu_configure_regions+0x46>
		return REGION_4G;
    3aaa:	243e      	movs	r4, #62	; 0x3e
    3aac:	e7e5      	b.n	3a7a <mpu_configure_regions+0x46>
			return -EINVAL;
    3aae:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    3ab2:	4610      	mov	r0, r2
    3ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab6:	bf00      	nop
    3ab8:	e000ed00 	.word	0xe000ed00

00003abc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3abc:	4b04      	ldr	r3, [pc, #16]	; (3ad0 <arm_core_mpu_enable+0x14>)
    3abe:	2205      	movs	r2, #5
    3ac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ac8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop
    3ad0:	e000ed00 	.word	0xe000ed00

00003ad4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3ad4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
    3ad8:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <arm_core_mpu_disable+0x10>)
    3ada:	2200      	movs	r2, #0
    3adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3ae0:	4770      	bx	lr
    3ae2:	bf00      	nop
    3ae4:	e000ed00 	.word	0xe000ed00

00003ae8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3ae8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3aea:	4c03      	ldr	r4, [pc, #12]	; (3af8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3aec:	2301      	movs	r3, #1
    3aee:	7822      	ldrb	r2, [r4, #0]
    3af0:	f7ff ffa0 	bl	3a34 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3af4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3af6:	bd10      	pop	{r4, pc}
    3af8:	20001570 	.word	0x20001570

00003afc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3afc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3afe:	4a09      	ldr	r2, [pc, #36]	; (3b24 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3b00:	2300      	movs	r3, #0
    3b02:	7812      	ldrb	r2, [r2, #0]
    3b04:	f7ff ff96 	bl	3a34 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3b08:	f110 0f16 	cmn.w	r0, #22
    3b0c:	d002      	beq.n	3b14 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3b0e:	4a06      	ldr	r2, [pc, #24]	; (3b28 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3b10:	2807      	cmp	r0, #7
    3b12:	dd00      	ble.n	3b16 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3b14:	bd08      	pop	{r3, pc}
    3b16:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3b1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3b1e:	3001      	adds	r0, #1
    3b20:	e7f6      	b.n	3b10 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3b22:	bf00      	nop
    3b24:	20001570 	.word	0x20001570
    3b28:	e000ed00 	.word	0xe000ed00

00003b2c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3b2c:	4914      	ldr	r1, [pc, #80]	; (3b80 <z_arm_mpu_init+0x54>)
    3b2e:	6808      	ldr	r0, [r1, #0]
    3b30:	2808      	cmp	r0, #8
{
    3b32:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3b34:	d821      	bhi.n	3b7a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3b36:	f7ff ffcd 	bl	3ad4 <arm_core_mpu_disable>
    3b3a:	4c12      	ldr	r4, [pc, #72]	; (3b84 <z_arm_mpu_init+0x58>)
    3b3c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b3e:	2200      	movs	r2, #0
    3b40:	4290      	cmp	r0, r2
    3b42:	f101 010c 	add.w	r1, r1, #12
    3b46:	d105      	bne.n	3b54 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3b48:	4b0f      	ldr	r3, [pc, #60]	; (3b88 <z_arm_mpu_init+0x5c>)
    3b4a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3b4c:	f7ff ffb6 	bl	3abc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3b50:	2000      	movs	r0, #0
}
    3b52:	bd10      	pop	{r4, pc}
    3b54:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b58:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3b5c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3b60:	4313      	orrs	r3, r2
    3b62:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b66:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3b6e:	f043 0301 	orr.w	r3, r3, #1
    3b72:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b76:	3201      	adds	r2, #1
    3b78:	e7e2      	b.n	3b40 <z_arm_mpu_init+0x14>
		return -1;
    3b7a:	f04f 30ff 	mov.w	r0, #4294967295
    3b7e:	e7e8      	b.n	3b52 <z_arm_mpu_init+0x26>
    3b80:	0000a7b8 	.word	0x0000a7b8
    3b84:	e000ed00 	.word	0xe000ed00
    3b88:	20001570 	.word	0x20001570

00003b8c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3b8c:	4b01      	ldr	r3, [pc, #4]	; (3b94 <__stdout_hook_install+0x8>)
    3b8e:	6018      	str	r0, [r3, #0]
}
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	20000118 	.word	0x20000118

00003b98 <nordicsemi_nrf52_init>:

static int nordicsemi_nrf52_init(void)
{
#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3b98:	4a04      	ldr	r2, [pc, #16]	; (3bac <nordicsemi_nrf52_init+0x14>)
    3b9a:	2301      	movs	r3, #1
    3b9c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
#if NRF_POWER_HAS_DCDCEN_VDDH && defined(CONFIG_SOC_DCDC_NRF52X_HV)
	nrf_power_dcdcen_vddh_set(NRF_POWER, true);
#endif

	return 0;
}
    3ba4:	2000      	movs	r0, #0
    3ba6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    3baa:	4770      	bx	lr
    3bac:	4001e000 	.word	0x4001e000

00003bb0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3bb0:	b120      	cbz	r0, 3bbc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3bb2:	4b03      	ldr	r3, [pc, #12]	; (3bc0 <arch_busy_wait+0x10>)
    3bb4:	0180      	lsls	r0, r0, #6
    3bb6:	f043 0301 	orr.w	r3, r3, #1
    3bba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3bbc:	4770      	bx	lr
    3bbe:	bf00      	nop
    3bc0:	0000a750 	.word	0x0000a750

00003bc4 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3bc4:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3bc6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3bca:	d512      	bpl.n	3bf2 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3bcc:	2b08      	cmp	r3, #8
    3bce:	d105      	bne.n	3bdc <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3bd0:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3bd2:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3bd6:	d506      	bpl.n	3be6 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3bd8:	480e      	ldr	r0, [pc, #56]	; (3c14 <endpoint_ctx+0x50>)
    3bda:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    3bdc:	f010 0f78 	tst.w	r0, #120	; 0x78
    3be0:	d112      	bne.n	3c08 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3be2:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    3be6:	204c      	movs	r0, #76	; 0x4c
    3be8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3bec:	4b0a      	ldr	r3, [pc, #40]	; (3c18 <endpoint_ctx+0x54>)
    3bee:	4418      	add	r0, r3
    3bf0:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3bf2:	2b08      	cmp	r3, #8
    3bf4:	d105      	bne.n	3c02 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3bf6:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3bf8:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3bfc:	d506      	bpl.n	3c0c <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3bfe:	4807      	ldr	r0, [pc, #28]	; (3c1c <endpoint_ctx+0x58>)
    3c00:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    3c02:	f010 0f78 	tst.w	r0, #120	; 0x78
    3c06:	d0f6      	beq.n	3bf6 <endpoint_ctx+0x32>
		return NULL;
    3c08:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    3c0a:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3c0c:	4804      	ldr	r0, [pc, #16]	; (3c20 <endpoint_ctx+0x5c>)
    3c0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3c12:	4770      	bx	lr
    3c14:	20000aa0 	.word	0x20000aa0
    3c18:	20000954 	.word	0x20000954
    3c1c:	20000bc0 	.word	0x20000bc0
    3c20:	20000ac0 	.word	0x20000ac0

00003c24 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3c24:	4901      	ldr	r1, [pc, #4]	; (3c2c <usbd_work_schedule+0x8>)
    3c26:	4802      	ldr	r0, [pc, #8]	; (3c30 <usbd_work_schedule+0xc>)
    3c28:	f006 ba21 	b.w	a06e <k_work_submit_to_queue>
    3c2c:	2000097c 	.word	0x2000097c
    3c30:	200004d0 	.word	0x200004d0

00003c34 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3c34:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    3c36:	4801      	ldr	r0, [pc, #4]	; (3c3c <usbd_evt_put+0x8>)
    3c38:	f006 b9b4 	b.w	9fa4 <k_queue_append>
    3c3c:	20000218 	.word	0x20000218

00003c40 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    3c40:	4802      	ldr	r0, [pc, #8]	; (3c4c <usbd_evt_get+0xc>)
    3c42:	2200      	movs	r2, #0
    3c44:	2300      	movs	r3, #0
    3c46:	f004 b825 	b.w	7c94 <z_impl_k_queue_get>
    3c4a:	bf00      	nop
    3c4c:	20000218 	.word	0x20000218

00003c50 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    3c50:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3c52:	4c05      	ldr	r4, [pc, #20]	; (3c68 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    3c54:	f7ff fff4 	bl	3c40 <usbd_evt_get>
		if (ev) {
    3c58:	b120      	cbz	r0, 3c64 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3c5a:	1d01      	adds	r1, r0, #4
    3c5c:	4620      	mov	r0, r4
    3c5e:	f006 f8e9 	bl	9e34 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    3c62:	e7f7      	b.n	3c54 <usbd_evt_flush+0x4>
}
    3c64:	bd10      	pop	{r4, pc}
    3c66:	bf00      	nop
    3c68:	200001d8 	.word	0x200001d8

00003c6c <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    3c6c:	b507      	push	{r0, r1, r2, lr}
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    3c6e:	2300      	movs	r3, #0
    3c70:	480e      	ldr	r0, [pc, #56]	; (3cac <usbd_evt_alloc+0x40>)
    3c72:	2200      	movs	r2, #0
    3c74:	a901      	add	r1, sp, #4
    3c76:	f003 fe53 	bl	7920 <k_mem_slab_alloc>
    3c7a:	b190      	cbz	r0, 3ca2 <usbd_evt_alloc+0x36>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    3c7c:	f7ff ffe8 	bl	3c50 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3c80:	480a      	ldr	r0, [pc, #40]	; (3cac <usbd_evt_alloc+0x40>)
    3c82:	2200      	movs	r2, #0
    3c84:	2300      	movs	r3, #0
    3c86:	a901      	add	r1, sp, #4
    3c88:	f003 fe4a 	bl	7920 <k_mem_slab_alloc>
    3c8c:	b938      	cbnz	r0, 3c9e <usbd_evt_alloc+0x32>
			LOG_ERR("USBD event memory corrupted");
			__ASSERT_NO_MSG(0);
			return NULL;
		}

		ev = (struct usbd_event *)block.data;
    3c8e:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    3c90:	2304      	movs	r3, #4
		ev->block = block;
    3c92:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3c94:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3c96:	f7ff ffcd 	bl	3c34 <usbd_evt_put>
		usbd_work_schedule();
    3c9a:	f7ff ffc3 	bl	3c24 <usbd_work_schedule>

		return NULL;
    3c9e:	2000      	movs	r0, #0
    3ca0:	e001      	b.n	3ca6 <usbd_evt_alloc+0x3a>
	}

	ev = (struct usbd_event *)block.data;
    3ca2:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3ca4:	6040      	str	r0, [r0, #4]

	return ev;
}
    3ca6:	b003      	add	sp, #12
    3ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    3cac:	200001d8 	.word	0x200001d8

00003cb0 <usb_dc_power_event_handler>:

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
	enum usbd_periph_state new_state;

	switch (event) {
    3cb0:	2802      	cmp	r0, #2
{
    3cb2:	b510      	push	{r4, lr}
    3cb4:	d811      	bhi.n	3cda <usb_dc_power_event_handler+0x2a>
    3cb6:	4b09      	ldr	r3, [pc, #36]	; (3cdc <usb_dc_power_event_handler+0x2c>)
    3cb8:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3cba:	f7ff ffd7 	bl	3c6c <usbd_evt_alloc>
	if (!ev) {
    3cbe:	b160      	cbz	r0, 3cda <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
    3cc0:	2200      	movs	r2, #0
    3cc2:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    3cc4:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    3cc6:	f7ff ffb5 	bl	3c34 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3cca:	4b05      	ldr	r3, [pc, #20]	; (3ce0 <usb_dc_power_event_handler+0x30>)
    3ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3cd0:	b11b      	cbz	r3, 3cda <usb_dc_power_event_handler+0x2a>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    3cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
    3cd6:	f7ff bfa5 	b.w	3c24 <usbd_work_schedule>
}
    3cda:	bd10      	pop	{r4, pc}
    3cdc:	0000ab05 	.word	0x0000ab05
    3ce0:	20000954 	.word	0x20000954

00003ce4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    3ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    3ce6:	7887      	ldrb	r7, [r0, #2]
{
    3ce8:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3cea:	4638      	mov	r0, r7
    3cec:	f7ff ff6a 	bl	3bc4 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3cf0:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    3cf2:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3cf4:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3cf6:	d512      	bpl.n	3d1e <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
    3cf8:	2d00      	cmp	r5, #0
    3cfa:	d143      	bne.n	3d84 <usbd_event_transfer_data+0xa0>
		case NRFX_USBD_EP_OK: {
			struct usbd_event *ev = usbd_evt_alloc();
    3cfc:	f7ff ffb6 	bl	3c6c <usbd_evt_alloc>

			if (!ev) {
    3d00:	4603      	mov	r3, r0
    3d02:	2800      	cmp	r0, #0
    3d04:	d03e      	beq.n	3d84 <usbd_event_transfer_data+0xa0>

			LOG_DBG("write complete, ep 0x%02x",
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->write_in_progress = false;
			ev->evt_type = USBD_EVT_EP;
    3d06:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3d08:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3d0a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3d0c:	2203      	movs	r2, #3
    3d0e:	7302      	strb	r2, [r0, #12]
				(uint32_t)p_event->data.eptransfer.ep);

			ep_ctx->read_pending = true;
			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
			ev->evt.ep_evt.ep = ep_ctx;
    3d10:	609c      	str	r4, [r3, #8]

			ev->evt_type = USBD_EVT_EP;
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
			ev->evt.ep_evt.ep = ep_ctx;

			usbd_evt_put(ev);
    3d12:	f7ff ff8f 	bl	3c34 <usbd_evt_put>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    3d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
    3d1a:	f7ff bf83 	b.w	3c24 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3d1e:	b14d      	cbz	r5, 3d34 <usbd_event_transfer_data+0x50>
    3d20:	2d01      	cmp	r5, #1
    3d22:	d12f      	bne.n	3d84 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
    3d24:	f7ff ffa2 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    3d28:	4603      	mov	r3, r0
    3d2a:	b358      	cbz	r0, 3d84 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
    3d2c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3d2e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3d30:	7305      	strb	r5, [r0, #12]
    3d32:	e7ed      	b.n	3d10 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
    3d34:	f7ff ff9a 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    3d38:	b320      	cbz	r0, 3d84 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
    3d3a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3d3c:	4b12      	ldr	r3, [pc, #72]	; (3d88 <usbd_event_transfer_data+0xa4>)
    3d3e:	f012 0f80 	tst.w	r2, #128	; 0x80
    3d42:	f002 0108 	and.w	r1, r2, #8
    3d46:	d011      	beq.n	3d6c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3d48:	b141      	cbz	r1, 3d5c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3d4a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3d4e:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
    3d50:	2301      	movs	r3, #1
    3d52:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3d54:	2302      	movs	r3, #2
    3d56:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3d58:	6084      	str	r4, [r0, #8]
    3d5a:	e7da      	b.n	3d12 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3d5c:	f002 020f 	and.w	r2, r2, #15
    3d60:	2114      	movs	r1, #20
    3d62:	fb01 3302 	mla	r3, r1, r2, r3
    3d66:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d6a:	e7f0      	b.n	3d4e <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3d6c:	b111      	cbz	r1, 3d74 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3d6e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3d72:	e7ec      	b.n	3d4e <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3d74:	f002 020f 	and.w	r2, r2, #15
    3d78:	2114      	movs	r1, #20
    3d7a:	fb01 3302 	mla	r3, r1, r2, r3
    3d7e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    3d82:	e7e4      	b.n	3d4e <usbd_event_transfer_data+0x6a>
}
    3d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d86:	bf00      	nop
    3d88:	40027000 	.word	0x40027000

00003d8c <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    3d8c:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    3d8e:	4812      	ldr	r0, [pc, #72]	; (3dd8 <usb_init+0x4c>)
    3d90:	f002 ffb8 	bl	6d04 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    3d94:	4b11      	ldr	r3, [pc, #68]	; (3ddc <usb_init+0x50>)
    3d96:	4298      	cmp	r0, r3
    3d98:	d11a      	bne.n	3dd0 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3d9a:	4811      	ldr	r0, [pc, #68]	; (3de0 <usb_init+0x54>)
    3d9c:	f002 f90e 	bl	5fbc <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    3da0:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    3da2:	4810      	ldr	r0, [pc, #64]	; (3de4 <usb_init+0x58>)
    3da4:	f002 f950 	bl	6048 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3da8:	490f      	ldr	r1, [pc, #60]	; (3de8 <usb_init+0x5c>)
    3daa:	4810      	ldr	r0, [pc, #64]	; (3dec <usb_init+0x60>)
    3dac:	9400      	str	r4, [sp, #0]
    3dae:	f04f 33ff 	mov.w	r3, #4294967295
    3db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3db6:	f004 f8e3 	bl	7f80 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3dba:	490d      	ldr	r1, [pc, #52]	; (3df0 <usb_init+0x64>)
    3dbc:	480b      	ldr	r0, [pc, #44]	; (3dec <usb_init+0x60>)
    3dbe:	f006 f868 	bl	9e92 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    3dc2:	480c      	ldr	r0, [pc, #48]	; (3df4 <usb_init+0x68>)
    3dc4:	490c      	ldr	r1, [pc, #48]	; (3df8 <usb_init+0x6c>)
    3dc6:	f006 f935 	bl	a034 <k_work_init>

	return 0;
    3dca:	4620      	mov	r0, r4
}
    3dcc:	b002      	add	sp, #8
    3dce:	bd10      	pop	{r4, pc}
		return -EIO;
    3dd0:	f06f 0004 	mvn.w	r0, #4
    3dd4:	e7fa      	b.n	3dcc <usb_init+0x40>
    3dd6:	bf00      	nop
    3dd8:	00003e3d 	.word	0x00003e3d
    3ddc:	0bad0000 	.word	0x0bad0000
    3de0:	0000ab08 	.word	0x0000ab08
    3de4:	0000a7d8 	.word	0x0000a7d8
    3de8:	20002280 	.word	0x20002280
    3dec:	200004d0 	.word	0x200004d0
    3df0:	0000aafa 	.word	0x0000aafa
    3df4:	2000097c 	.word	0x2000097c
    3df8:	00003fc1 	.word	0x00003fc1

00003dfc <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    3dfc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3dfe:	490e      	ldr	r1, [pc, #56]	; (3e38 <hfxo_stop.constprop.0.isra.0+0x3c>)
    3e00:	f3bf 8f5b 	dmb	ish
    3e04:	2300      	movs	r3, #0
    3e06:	e851 2f00 	ldrex	r2, [r1]
    3e0a:	2a01      	cmp	r2, #1
    3e0c:	d103      	bne.n	3e16 <hfxo_stop.constprop.0.isra.0+0x1a>
    3e0e:	e841 3000 	strex	r0, r3, [r1]
    3e12:	2800      	cmp	r0, #0
    3e14:	d1f7      	bne.n	3e06 <hfxo_stop.constprop.0.isra.0+0xa>
    3e16:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    3e1a:	d10c      	bne.n	3e36 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3e1c:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    3e20:	3914      	subs	r1, #20
    3e22:	4620      	mov	r0, r4
    3e24:	f005 f902 	bl	902c <onoff_cancel>

	if (rv == -EALREADY) {
    3e28:	3078      	adds	r0, #120	; 0x78
    3e2a:	d104      	bne.n	3e36 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    3e2c:	4620      	mov	r0, r4
}
    3e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e32:	f005 b8d6 	b.w	8fe2 <onoff_release>
    3e36:	bd10      	pop	{r4, pc}
    3e38:	20000974 	.word	0x20000974

00003e3c <usbd_event_handler>:
{
    3e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e3e:	4606      	mov	r6, r0
    3e40:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
    3e42:	2214      	movs	r2, #20
    3e44:	2100      	movs	r1, #0
    3e46:	a803      	add	r0, sp, #12
    3e48:	f005 fbc6 	bl	95d8 <memset>
	switch (p_event->type) {
    3e4c:	7833      	ldrb	r3, [r6, #0]
    3e4e:	3b01      	subs	r3, #1
    3e50:	2b05      	cmp	r3, #5
    3e52:	d821      	bhi.n	3e98 <usbd_event_handler+0x5c>
    3e54:	e8df f003 	tbb	[pc, r3]
    3e58:	1414037a 	.word	0x1414037a
    3e5c:	166a      	.short	0x166a
    3e5e:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    3e60:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
    3e64:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3e66:	f7ff ff01 	bl	3c6c <usbd_evt_alloc>
		if (!ev) {
    3e6a:	4603      	mov	r3, r0
    3e6c:	b1a0      	cbz	r0, 3e98 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
    3e6e:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3e70:	f100 0208 	add.w	r2, r0, #8
    3e74:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    3e78:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3e7c:	4618      	mov	r0, r3
    3e7e:	e01d      	b.n	3ebc <usbd_event_handler+0x80>
	switch (p_event->type) {
    3e80:	2304      	movs	r3, #4
    3e82:	e7ed      	b.n	3e60 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3e84:	78b7      	ldrb	r7, [r6, #2]
    3e86:	4638      	mov	r0, r7
    3e88:	f7ff fe9c 	bl	3bc4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3e8c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3e8e:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
    3e90:	b123      	cbz	r3, 3e9c <usbd_event_handler+0x60>
    3e92:	3b01      	subs	r3, #1
    3e94:	2b02      	cmp	r3, #2
    3e96:	d943      	bls.n	3f20 <usbd_event_handler+0xe4>
}
    3e98:	b009      	add	sp, #36	; 0x24
    3e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3e9c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
    3e9e:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3ea0:	d513      	bpl.n	3eca <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
    3ea2:	2d00      	cmp	r5, #0
    3ea4:	d1f8      	bne.n	3e98 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    3ea6:	f7ff fee1 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    3eaa:	4603      	mov	r3, r0
    3eac:	2800      	cmp	r0, #0
    3eae:	d0f3      	beq.n	3e98 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    3eb0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3eb2:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
    3eb4:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3eb6:	2203      	movs	r2, #3
    3eb8:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3eba:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
    3ebc:	f7ff feba 	bl	3c34 <usbd_evt_put>
}
    3ec0:	b009      	add	sp, #36	; 0x24
    3ec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
    3ec6:	f7ff bead 	b.w	3c24 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
    3eca:	b155      	cbz	r5, 3ee2 <usbd_event_handler+0xa6>
    3ecc:	2d01      	cmp	r5, #1
    3ece:	d1e3      	bne.n	3e98 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
    3ed0:	f7ff fecc 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    3ed4:	4603      	mov	r3, r0
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d0de      	beq.n	3e98 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
    3eda:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
    3edc:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3ede:	7305      	strb	r5, [r0, #12]
    3ee0:	e7eb      	b.n	3eba <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
    3ee2:	f7ff fec3 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    3ee6:	4607      	mov	r7, r0
    3ee8:	2800      	cmp	r0, #0
    3eea:	d0d5      	beq.n	3e98 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
    3eec:	2301      	movs	r3, #1
    3eee:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3ef0:	2302      	movs	r3, #2
    3ef2:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3ef4:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    3ef6:	f104 010c 	add.w	r1, r4, #12
    3efa:	78b0      	ldrb	r0, [r6, #2]
    3efc:	f005 ff12 	bl	9d24 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    3f00:	4a13      	ldr	r2, [pc, #76]	; (3f50 <usbd_event_handler+0x114>)
    3f02:	68e1      	ldr	r1, [r4, #12]
    3f04:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    3f08:	428b      	cmp	r3, r1
    3f0a:	d906      	bls.n	3f1a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    3f0c:	1a5b      	subs	r3, r3, r1
    3f0e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    3f12:	f003 f933 	bl	717c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    3f16:	4638      	mov	r0, r7
    3f18:	e7d0      	b.n	3ebc <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
    3f1a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
    3f1e:	e7fa      	b.n	3f16 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
    3f20:	4630      	mov	r0, r6
}
    3f22:	b009      	add	sp, #36	; 0x24
    3f24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
    3f28:	f7ff bedc 	b.w	3ce4 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
    3f2c:	a801      	add	r0, sp, #4
    3f2e:	f003 f8ff 	bl	7130 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    3f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3f36:	2b05      	cmp	r3, #5
    3f38:	d104      	bne.n	3f44 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    3f3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3f3e:	f013 0f60 	tst.w	r3, #96	; 0x60
    3f42:	d0a9      	beq.n	3e98 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
    3f44:	4b03      	ldr	r3, [pc, #12]	; (3f54 <usbd_event_handler+0x118>)
    3f46:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
    3f48:	2401      	movs	r4, #1
    3f4a:	e78c      	b.n	3e66 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    3f4c:	2402      	movs	r4, #2
    3f4e:	e78a      	b.n	3e66 <usbd_event_handler+0x2a>
    3f50:	20000954 	.word	0x20000954
    3f54:	20000ac0 	.word	0x20000ac0

00003f58 <eps_ctx_init>:
{
    3f58:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f5a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3f5c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    3f60:	b2c0      	uxtb	r0, r0
    3f62:	f7ff fe2f 	bl	3bc4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f66:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3f68:	f005 fb5d 	bl	9626 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f6c:	2c08      	cmp	r4, #8
    3f6e:	d1f5      	bne.n	3f5c <eps_ctx_init+0x4>
    3f70:	4d0e      	ldr	r5, [pc, #56]	; (3fac <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f72:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3f74:	b2e0      	uxtb	r0, r4
    3f76:	f7ff fe25 	bl	3bc4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    3f7a:	6903      	ldr	r3, [r0, #16]
    3f7c:	b903      	cbnz	r3, 3f80 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    3f7e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f80:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3f82:	f005 fb50 	bl	9626 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f86:	2c08      	cmp	r4, #8
    3f88:	f105 0540 	add.w	r5, r5, #64	; 0x40
    3f8c:	d1f2      	bne.n	3f74 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    3f8e:	4808      	ldr	r0, [pc, #32]	; (3fb0 <eps_ctx_init+0x58>)
    3f90:	f005 fb49 	bl	9626 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    3f94:	4b07      	ldr	r3, [pc, #28]	; (3fb4 <eps_ctx_init+0x5c>)
    3f96:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    3f9a:	b912      	cbnz	r2, 3fa2 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    3f9c:	4a06      	ldr	r2, [pc, #24]	; (3fb8 <eps_ctx_init+0x60>)
    3f9e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    3fa2:	4806      	ldr	r0, [pc, #24]	; (3fbc <eps_ctx_init+0x64>)
    3fa4:	f005 fb3f 	bl	9626 <ep_ctx_reset>
}
    3fa8:	2000      	movs	r0, #0
    3faa:	bd38      	pop	{r3, r4, r5, pc}
    3fac:	20000fe4 	.word	0x20000fe4
    3fb0:	20000aa0 	.word	0x20000aa0
    3fb4:	20000954 	.word	0x20000954
    3fb8:	20000be4 	.word	0x20000be4
    3fbc:	20000bc0 	.word	0x20000bc0

00003fc0 <usbd_work_handler>:
{
    3fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
    3fc4:	4ca7      	ldr	r4, [pc, #668]	; (4264 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x264>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3fc6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
{
    3fca:	b085      	sub	sp, #20
    3fcc:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
    3fce:	f7ff fe37 	bl	3c40 <usbd_evt_get>
    3fd2:	b910      	cbnz	r0, 3fda <usbd_work_handler+0x1a>
}
    3fd4:	b005      	add	sp, #20
    3fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
    3fda:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3fde:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3fe0:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3fe4:	b93b      	cbnz	r3, 3ff6 <usbd_work_handler+0x36>
    3fe6:	2a00      	cmp	r2, #0
    3fe8:	f000 8088 	beq.w	40fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfc>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3fec:	489e      	ldr	r0, [pc, #632]	; (4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>)
    3fee:	4649      	mov	r1, r9
    3ff0:	f005 ff20 	bl	9e34 <k_mem_slab_free>
}
    3ff4:	e7eb      	b.n	3fce <usbd_work_handler+0xe>
		switch (ev->evt_type) {
    3ff6:	2a04      	cmp	r2, #4
    3ff8:	d844      	bhi.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    3ffa:	e8df f012 	tbh	[pc, r2, lsl #1]
    3ffe:	007f      	.short	0x007f
    4000:	01020005 	.word	0x01020005
    4004:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
    4008:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    400a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
    400c:	2b03      	cmp	r3, #3
    400e:	d839      	bhi.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    4010:	e8df f003 	tbb	[pc, r3]
    4014:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4018:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    401a:	2208      	movs	r2, #8
    401c:	2100      	movs	r1, #0
    401e:	4630      	mov	r0, r6
    4020:	f005 fada 	bl	95d8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4024:	4b91      	ldr	r3, [pc, #580]	; (426c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26c>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4026:	4892      	ldr	r0, [pc, #584]	; (4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>)
    4028:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    402c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    402e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4032:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4034:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4038:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    403c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4040:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4042:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4046:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    404a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    404e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4050:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4054:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4058:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    405c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    405e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4060:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4062:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4064:	f005 faad 	bl	95c2 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4068:	682b      	ldr	r3, [r5, #0]
    406a:	7a68      	ldrb	r0, [r5, #9]
    406c:	2100      	movs	r1, #0
    406e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4070:	f996 3000 	ldrsb.w	r3, [r6]
    4074:	2b00      	cmp	r3, #0
    4076:	db08      	blt.n	408a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a>
    4078:	88f3      	ldrh	r3, [r6, #6]
    407a:	b133      	cbz	r3, 408a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a>
		ctx->ctrl_read_len = usbd_setup->wLength;
    407c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4080:	f003 f87c 	bl	717c <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4084:	4649      	mov	r1, r9
    4086:	4640      	mov	r0, r8
    4088:	e7b2      	b.n	3ff0 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
    408a:	2300      	movs	r3, #0
    408c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    4090:	e7f8      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
	if (!ep_ctx->read_pending) {
    4092:	7f6b      	ldrb	r3, [r5, #29]
    4094:	2b00      	cmp	r3, #0
    4096:	d0f5      	beq.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
	if (!ep_ctx->read_complete) {
    4098:	7f2b      	ldrb	r3, [r5, #28]
    409a:	2b00      	cmp	r3, #0
    409c:	d0f2      	beq.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
	ep_ctx->read_pending = false;
    409e:	2600      	movs	r6, #0
    40a0:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40a2:	f04f 32ff 	mov.w	r2, #4294967295
    40a6:	4873      	ldr	r0, [pc, #460]	; (4274 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x274>)
	ep_ctx->read_complete = false;
    40a8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40aa:	f04f 33ff 	mov.w	r3, #4294967295
    40ae:	f005 facd 	bl	964c <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    40b2:	696b      	ldr	r3, [r5, #20]
    40b4:	9301      	str	r3, [sp, #4]
    40b6:	686b      	ldr	r3, [r5, #4]
    40b8:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    40bc:	a901      	add	r1, sp, #4
    40be:	7a68      	ldrb	r0, [r5, #9]
    40c0:	f002 fe62 	bl	6d88 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
    40c4:	486b      	ldr	r0, [pc, #428]	; (4274 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x274>)
    40c6:	f005 fac3 	bl	9650 <k_mutex_unlock.isra.0>
    40ca:	e7db      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    40cc:	682b      	ldr	r3, [r5, #0]
    40ce:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    40d0:	7a68      	ldrb	r0, [r5, #9]
    40d2:	4798      	blx	r3
		break;
    40d4:	e7d6      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    40d6:	7aab      	ldrb	r3, [r5, #10]
    40d8:	b96b      	cbnz	r3, 40f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf6>
    40da:	7feb      	ldrb	r3, [r5, #31]
    40dc:	b95b      	cbnz	r3, 40f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf6>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40de:	4865      	ldr	r0, [pc, #404]	; (4274 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x274>)
    40e0:	f04f 32ff 	mov.w	r2, #4294967295
    40e4:	f04f 33ff 	mov.w	r3, #4294967295
    40e8:	f005 fab0 	bl	964c <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    40ec:	f003 f876 	bl	71dc <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    40f0:	4860      	ldr	r0, [pc, #384]	; (4274 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x274>)
    40f2:	f005 faad 	bl	9650 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    40f6:	682b      	ldr	r3, [r5, #0]
    40f8:	2102      	movs	r1, #2
    40fa:	e7e9      	b.n	40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>
	switch (pwr_evt->state) {
    40fc:	7a02      	ldrb	r2, [r0, #8]
    40fe:	2a04      	cmp	r2, #4
    4100:	d8c0      	bhi.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    4102:	e8df f002 	tbb	[pc, r2]
    4106:	0359      	.short	0x0359
    4108:	6723      	.short	0x6723
    410a:	73          	.byte	0x73
    410b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    410c:	f002 fdc4 	bl	6c98 <nrfx_usbd_is_enabled>
    4110:	4605      	mov	r5, r0
    4112:	2800      	cmp	r0, #0
    4114:	d1b6      	bne.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			nrfx_usbd_enable();
    4116:	f002 fcfb 	bl	6b10 <nrfx_usbd_enable>
    411a:	f3bf 8f5b 	dmb	ish
    411e:	4956      	ldr	r1, [pc, #344]	; (4278 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x278>)
    4120:	2301      	movs	r3, #1
    4122:	e851 2f00 	ldrex	r2, [r1]
    4126:	2a00      	cmp	r2, #0
    4128:	d103      	bne.n	4132 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x132>
    412a:	e841 3000 	strex	r0, r3, [r1]
    412e:	2800      	cmp	r0, #0
    4130:	d1f7      	bne.n	4122 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x122>
    4132:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    4136:	d1a5      	bne.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4138:	f841 5c08 	str.w	r5, [r1, #-8]
    413c:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4140:	69e0      	ldr	r0, [r4, #28]
    4142:	6163      	str	r3, [r4, #20]
    4144:	3914      	subs	r1, #20
    4146:	f004 fef4 	bl	8f32 <onoff_request>
    414a:	e79b      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
	switch (pwr_evt->state) {
    414c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    414e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    4152:	b2c0      	uxtb	r0, r0
    4154:	f7ff fd36 	bl	3bc4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    4158:	7a03      	ldrb	r3, [r0, #8]
    415a:	b113      	cbz	r3, 4162 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x162>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    415c:	7a40      	ldrb	r0, [r0, #9]
    415e:	f003 f9ed 	bl	753c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    4162:	3501      	adds	r5, #1
    4164:	2d08      	cmp	r5, #8
    4166:	d1f2      	bne.n	414e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14e>
		if (ep_ctx->cfg.en) {
    4168:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    416c:	b11b      	cbz	r3, 4176 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x176>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    416e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    4172:	f003 f9e3 	bl	753c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    4176:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4178:	b2e8      	uxtb	r0, r5
    417a:	f7ff fd23 	bl	3bc4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    417e:	7a03      	ldrb	r3, [r0, #8]
    4180:	b113      	cbz	r3, 4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4182:	7a40      	ldrb	r0, [r0, #9]
    4184:	f003 f9da 	bl	753c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    4188:	3501      	adds	r5, #1
    418a:	2d08      	cmp	r5, #8
    418c:	d1f4      	bne.n	4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>
		if (ep_ctx->cfg.en) {
    418e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4192:	b11b      	cbz	r3, 419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    4194:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    4198:	f003 f9d0 	bl	753c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(IS_ENABLED(CONFIG_USB_DEVICE_SOF));
    419c:	2000      	movs	r0, #0
    419e:	f002 fd5d 	bl	6c5c <nrfx_usbd_start>
		ctx->ready = true;
    41a2:	2301      	movs	r3, #1
    41a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    41a8:	6823      	ldr	r3, [r4, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	f43f af6a 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    41b0:	2100      	movs	r1, #0
    41b2:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
    41b4:	4798      	blx	r3
    41b6:	e765      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
		ctx->ready = false;
    41b8:	2500      	movs	r5, #0
    41ba:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    41be:	f003 f979 	bl	74b4 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    41c2:	f7ff fe1b 	bl	3dfc <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    41c6:	6823      	ldr	r3, [r4, #0]
    41c8:	2b00      	cmp	r3, #0
    41ca:	f43f af5b 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    41ce:	4629      	mov	r1, r5
    41d0:	2004      	movs	r0, #4
    41d2:	e7ef      	b.n	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
		if (dev_ready()) {
    41d4:	2b00      	cmp	r3, #0
    41d6:	f43f af55 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			nrfx_usbd_suspend();
    41da:	f002 fd67 	bl	6cac <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    41de:	6823      	ldr	r3, [r4, #0]
    41e0:	2b00      	cmp	r3, #0
    41e2:	f43f af4f 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    41e6:	2100      	movs	r1, #0
    41e8:	2005      	movs	r0, #5
    41ea:	e7e3      	b.n	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
		if (ctx->status_cb && dev_ready()) {
    41ec:	6822      	ldr	r2, [r4, #0]
    41ee:	2a00      	cmp	r2, #0
    41f0:	f43f af48 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    41f4:	2b00      	cmp	r3, #0
    41f6:	f43f af45 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			ctx->status_cb(USB_DC_RESUME, NULL);
    41fa:	2100      	movs	r1, #0
    41fc:	2006      	movs	r0, #6
    41fe:	4790      	blx	r2
    4200:	e740      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4202:	f107 0510 	add.w	r5, r7, #16
    4206:	f04f 33ff 	mov.w	r3, #4294967295
    420a:	f04f 32ff 	mov.w	r2, #4294967295
    420e:	4628      	mov	r0, r5
    4210:	f005 fa1c 	bl	964c <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4214:	f7ff fea0 	bl	3f58 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4218:	4628      	mov	r0, r5
    421a:	f005 fa19 	bl	9650 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    421e:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4222:	2b00      	cmp	r3, #0
    4224:	f43f af2e 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
				ctx->status_cb(USB_DC_RESET, NULL);
    4228:	2100      	movs	r1, #0
    422a:	2001      	movs	r0, #1
    422c:	e7c2      	b.n	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
	if (ep_ctx->cfg.en) {
    422e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4232:	b17b      	cbz	r3, 4254 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x254>
		ep_ctx->read_pending = true;
    4234:	2501      	movs	r5, #1
    4236:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    423a:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    423e:	f7ff fd15 	bl	3c6c <usbd_evt_alloc>
		if (!ev) {
    4242:	b138      	cbz	r0, 4254 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x254>
		ev->evt.ep_evt.ep = ep_ctx;
    4244:	4a0d      	ldr	r2, [pc, #52]	; (427c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x27c>)
		ev->evt_type = USBD_EVT_EP;
    4246:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4248:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    424a:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    424c:	f7ff fcf2 	bl	3c34 <usbd_evt_put>
		usbd_work_schedule();
    4250:	f7ff fce8 	bl	3c24 <usbd_work_schedule>
			if (ctx->status_cb) {
    4254:	f857 3c28 	ldr.w	r3, [r7, #-40]
    4258:	2b00      	cmp	r3, #0
    425a:	f43f af13 	beq.w	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
				ctx->status_cb(USB_DC_SOF, NULL);
    425e:	2100      	movs	r1, #0
    4260:	200a      	movs	r0, #10
    4262:	e7a7      	b.n	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
    4264:	20000954 	.word	0x20000954
    4268:	200001d8 	.word	0x200001d8
    426c:	40027000 	.word	0x40027000
    4270:	20000958 	.word	0x20000958
    4274:	2000098c 	.word	0x2000098c
    4278:	20000974 	.word	0x20000974
    427c:	20000bc0 	.word	0x20000bc0
	nrfx_power_usbevt_disable();
    4280:	f005 fc5b 	bl	9b3a <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4284:	f003 f916 	bl	74b4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4288:	f002 fc38 	bl	6afc <nrfx_usbd_uninit>
	usbd_evt_flush();
    428c:	f7ff fce0 	bl	3c50 <usbd_evt_flush>
	ret = eps_ctx_init();
    4290:	f7ff fe62 	bl	3f58 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4294:	f005 fc4a 	bl	9b2c <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4298:	4801      	ldr	r0, [pc, #4]	; (42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>)
    429a:	f002 fd33 	bl	6d04 <nrfx_usbd_init>
}
    429e:	e6f1      	b.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    42a0:	00003e3d 	.word	0x00003e3d

000042a4 <usb_dc_attach>:
{
    42a4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    42a6:	4d16      	ldr	r5, [pc, #88]	; (4300 <usb_dc_attach+0x5c>)
    42a8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    42ac:	bb2c      	cbnz	r4, 42fa <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    42ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
    42b2:	f005 fe02 	bl	9eba <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    42b6:	4620      	mov	r0, r4
    42b8:	f000 fb10 	bl	48dc <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    42bc:	4622      	mov	r2, r4
    42be:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    42c0:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    42c2:	2027      	movs	r0, #39	; 0x27
    42c4:	f7ff f906 	bl	34d4 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    42c8:	f005 fc30 	bl	9b2c <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    42cc:	f7ff fe44 	bl	3f58 <eps_ctx_init>
	if (ret == 0) {
    42d0:	4604      	mov	r4, r0
    42d2:	b910      	cbnz	r0, 42da <usb_dc_attach+0x36>
		ctx->attached = true;
    42d4:	2301      	movs	r3, #1
    42d6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    42da:	4b0a      	ldr	r3, [pc, #40]	; (4304 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    42dc:	681b      	ldr	r3, [r3, #0]
    42de:	b10b      	cbz	r3, 42e4 <usb_dc_attach+0x40>
		usbd_work_schedule();
    42e0:	f7ff fca0 	bl	3c24 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    42e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42e8:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    42ec:	07db      	lsls	r3, r3, #31
    42ee:	d502      	bpl.n	42f6 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    42f0:	2000      	movs	r0, #0
    42f2:	f7ff fcdd 	bl	3cb0 <usb_dc_power_event_handler>
}
    42f6:	4620      	mov	r0, r4
    42f8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    42fa:	2400      	movs	r4, #0
    42fc:	e7fb      	b.n	42f6 <usb_dc_attach+0x52>
    42fe:	bf00      	nop
    4300:	20000954 	.word	0x20000954
    4304:	20000218 	.word	0x20000218

00004308 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    430a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    430e:	b13a      	cbz	r2, 4320 <usb_dc_set_address+0x18>
    4310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    4314:	2b00      	cmp	r3, #0
    4316:	bf14      	ite	ne
    4318:	2000      	movne	r0, #0
    431a:	f06f 0012 	mvneq.w	r0, #18
    431e:	4770      	bx	lr
    4320:	f06f 0012 	mvn.w	r0, #18
}
    4324:	4770      	bx	lr
    4326:	bf00      	nop
    4328:	20000954 	.word	0x20000954

0000432c <usb_dc_ep_configure>:
{
    432c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    432e:	4b10      	ldr	r3, [pc, #64]	; (4370 <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
    4330:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    4334:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4336:	b1c3      	cbz	r3, 436a <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    4338:	7805      	ldrb	r5, [r0, #0]
    433a:	4628      	mov	r0, r5
    433c:	f7ff fc42 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    4340:	b910      	cbnz	r0, 4348 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
    4342:	f06f 0015 	mvn.w	r0, #21
}
    4346:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4348:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    434a:	7923      	ldrb	r3, [r4, #4]
    434c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    434e:	8863      	ldrh	r3, [r4, #2]
    4350:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4352:	7820      	ldrb	r0, [r4, #0]
    4354:	8861      	ldrh	r1, [r4, #2]
    4356:	f010 0f08 	tst.w	r0, #8
    435a:	d102      	bne.n	4362 <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    435c:	1e4b      	subs	r3, r1, #1
    435e:	420b      	tst	r3, r1
    4360:	d1ef      	bne.n	4342 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4362:	f005 fcda 	bl	9d1a <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4366:	2000      	movs	r0, #0
    4368:	e7ed      	b.n	4346 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
    436a:	f06f 0012 	mvn.w	r0, #18
    436e:	e7ea      	b.n	4346 <usb_dc_ep_configure+0x1a>
    4370:	20000954 	.word	0x20000954

00004374 <usb_dc_ep_set_stall>:
{
    4374:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4376:	4b12      	ldr	r3, [pc, #72]	; (43c0 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
    4378:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    437c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    437e:	b1ca      	cbz	r2, 43b4 <usb_dc_ep_set_stall+0x40>
    4380:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4384:	b1b3      	cbz	r3, 43b4 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
    4386:	f7ff fc1d 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    438a:	4604      	mov	r4, r0
    438c:	b1a8      	cbz	r0, 43ba <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
    438e:	7a83      	ldrb	r3, [r0, #10]
    4390:	2b01      	cmp	r3, #1
    4392:	d012      	beq.n	43ba <usb_dc_ep_set_stall+0x46>
    4394:	d907      	bls.n	43a6 <usb_dc_ep_set_stall+0x32>
    4396:	3b02      	subs	r3, #2
    4398:	2b01      	cmp	r3, #1
    439a:	d907      	bls.n	43ac <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    439c:	6963      	ldr	r3, [r4, #20]
    439e:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    43a0:	2000      	movs	r0, #0
    43a2:	60e0      	str	r0, [r4, #12]
}
    43a4:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
    43a6:	f002 ff21 	bl	71ec <nrfx_usbd_setup_stall>
		break;
    43aa:	e7f7      	b.n	439c <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    43ac:	4628      	mov	r0, r5
    43ae:	f002 fe91 	bl	70d4 <nrfx_usbd_ep_stall>
		break;
    43b2:	e7f3      	b.n	439c <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
    43b4:	f06f 0012 	mvn.w	r0, #18
    43b8:	e7f4      	b.n	43a4 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
    43ba:	f06f 0015 	mvn.w	r0, #21
    43be:	e7f1      	b.n	43a4 <usb_dc_ep_set_stall+0x30>
    43c0:	20000954 	.word	0x20000954

000043c4 <usb_dc_ep_clear_stall>:
{
    43c4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    43c6:	4b0e      	ldr	r3, [pc, #56]	; (4400 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    43c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    43cc:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    43ce:	b182      	cbz	r2, 43f2 <usb_dc_ep_clear_stall+0x2e>
    43d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    43d4:	b16b      	cbz	r3, 43f2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    43d6:	f7ff fbf5 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    43da:	b168      	cbz	r0, 43f8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    43dc:	f015 0408 	ands.w	r4, r5, #8
    43e0:	d10a      	bne.n	43f8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    43e2:	4628      	mov	r0, r5
    43e4:	f002 fe98 	bl	7118 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    43e8:	4628      	mov	r0, r5
    43ea:	f003 f8fb 	bl	75e4 <nrfx_usbd_ep_stall_clear>
	return 0;
    43ee:	4620      	mov	r0, r4
}
    43f0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    43f2:	f06f 0012 	mvn.w	r0, #18
    43f6:	e7fb      	b.n	43f0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    43f8:	f06f 0015 	mvn.w	r0, #21
    43fc:	e7f8      	b.n	43f0 <usb_dc_ep_clear_stall+0x2c>
    43fe:	bf00      	nop
    4400:	20000954 	.word	0x20000954

00004404 <usb_dc_ep_is_stalled>:
{
    4404:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4406:	4b0c      	ldr	r3, [pc, #48]	; (4438 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4408:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    440c:	4605      	mov	r5, r0
    440e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4410:	b162      	cbz	r2, 442c <usb_dc_ep_is_stalled+0x28>
    4412:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4416:	b14b      	cbz	r3, 442c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4418:	f7ff fbd4 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    441c:	b148      	cbz	r0, 4432 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    441e:	b144      	cbz	r4, 4432 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4420:	4628      	mov	r0, r5
    4422:	f002 fe5f 	bl	70e4 <nrfx_usbd_ep_stall_check>
    4426:	7020      	strb	r0, [r4, #0]
	return 0;
    4428:	2000      	movs	r0, #0
}
    442a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    442c:	f06f 0012 	mvn.w	r0, #18
    4430:	e7fb      	b.n	442a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4432:	f06f 0015 	mvn.w	r0, #21
    4436:	e7f8      	b.n	442a <usb_dc_ep_is_stalled+0x26>
    4438:	20000954 	.word	0x20000954

0000443c <usb_dc_ep_enable>:
{
    443c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    443e:	4e13      	ldr	r6, [pc, #76]	; (448c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4440:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    4444:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4446:	b1c3      	cbz	r3, 447a <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    4448:	f7ff fbbc 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    444c:	4605      	mov	r5, r0
    444e:	b1b8      	cbz	r0, 4480 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4450:	0723      	lsls	r3, r4, #28
    4452:	d405      	bmi.n	4460 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4454:	4620      	mov	r0, r4
    4456:	f002 fe5f 	bl	7118 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    445a:	4620      	mov	r0, r4
    445c:	f003 f8c2 	bl	75e4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4460:	7a2b      	ldrb	r3, [r5, #8]
    4462:	b983      	cbnz	r3, 4486 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    4464:	2301      	movs	r3, #1
    4466:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4468:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    446c:	b90b      	cbnz	r3, 4472 <usb_dc_ep_enable+0x36>
	return 0;
    446e:	2000      	movs	r0, #0
}
    4470:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4472:	4620      	mov	r0, r4
    4474:	f003 f862 	bl	753c <nrfx_usbd_ep_enable>
    4478:	e7f9      	b.n	446e <usb_dc_ep_enable+0x32>
		return -ENODEV;
    447a:	f06f 0012 	mvn.w	r0, #18
    447e:	e7f7      	b.n	4470 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    4480:	f06f 0015 	mvn.w	r0, #21
    4484:	e7f4      	b.n	4470 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    4486:	f06f 0077 	mvn.w	r0, #119	; 0x77
    448a:	e7f1      	b.n	4470 <usb_dc_ep_enable+0x34>
    448c:	20000954 	.word	0x20000954

00004490 <usb_dc_ep_write>:
{
    4490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
    4494:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 457c <usb_dc_ep_write+0xec>
{
    4498:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    449a:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
    449e:	b085      	sub	sp, #20
    44a0:	4607      	mov	r7, r0
    44a2:	4689      	mov	r9, r1
    44a4:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    44a6:	2b00      	cmp	r3, #0
    44a8:	d061      	beq.n	456e <usb_dc_ep_write+0xde>
    44aa:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
    44ae:	2b00      	cmp	r3, #0
    44b0:	d05d      	beq.n	456e <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    44b2:	0603      	lsls	r3, r0, #24
    44b4:	d55e      	bpl.n	4574 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
    44b6:	f7ff fb85 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    44ba:	4604      	mov	r4, r0
    44bc:	2800      	cmp	r0, #0
    44be:	d059      	beq.n	4574 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
    44c0:	7a03      	ldrb	r3, [r0, #8]
    44c2:	2b00      	cmp	r3, #0
    44c4:	d056      	beq.n	4574 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    44c6:	f04f 33ff 	mov.w	r3, #4294967295
    44ca:	f04f 32ff 	mov.w	r2, #4294967295
    44ce:	f108 0038 	add.w	r0, r8, #56	; 0x38
    44d2:	f005 f8bb 	bl	964c <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    44d6:	7fa3      	ldrb	r3, [r4, #30]
    44d8:	b14b      	cbz	r3, 44ee <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
    44da:	f108 0038 	add.w	r0, r8, #56	; 0x38
    44de:	f005 f8b7 	bl	9650 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    44e2:	f06f 040a 	mvn.w	r4, #10
}
    44e6:	4620      	mov	r0, r4
    44e8:	b005      	add	sp, #20
    44ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    44ee:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    44f0:	b1c5      	cbz	r5, 4524 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    44f2:	b33b      	cbz	r3, 4544 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
    44f4:	2301      	movs	r3, #1
    44f6:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    44f8:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    44fc:	a901      	add	r1, sp, #4
    44fe:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    4500:	e9cd 9501 	strd	r9, r5, [sp, #4]
    4504:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    4508:	f002 fc3e 	bl	6d88 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    450c:	4b1c      	ldr	r3, [pc, #112]	; (4580 <usb_dc_ep_write+0xf0>)
    450e:	4298      	cmp	r0, r3
    4510:	d029      	beq.n	4566 <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
    4512:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
    4516:	bb1e      	cbnz	r6, 4560 <usb_dc_ep_write+0xd0>
		result = -EIO;
    4518:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    451c:	4819      	ldr	r0, [pc, #100]	; (4584 <usb_dc_ep_write+0xf4>)
    451e:	f005 f897 	bl	9650 <k_mutex_unlock.isra.0>
	return result;
    4522:	e7e0      	b.n	44e6 <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
    4524:	7fe2      	ldrb	r2, [r4, #31]
    4526:	b102      	cbz	r2, 452a <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
    4528:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    452a:	2b00      	cmp	r3, #0
    452c:	d1e2      	bne.n	44f4 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    452e:	f002 fe65 	bl	71fc <nrfx_usbd_last_setup_dir_get>
    4532:	42b8      	cmp	r0, r7
    4534:	d0de      	beq.n	44f4 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
    4536:	f002 fe51 	bl	71dc <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    453a:	4812      	ldr	r0, [pc, #72]	; (4584 <usb_dc_ep_write+0xf4>)
    453c:	f005 f888 	bl	9650 <k_mutex_unlock.isra.0>
		return 0;
    4540:	2400      	movs	r4, #0
    4542:	e7d0      	b.n	44e6 <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4544:	f8b8 300a 	ldrh.w	r3, [r8, #10]
    4548:	42ab      	cmp	r3, r5
    454a:	d9f0      	bls.n	452e <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    454c:	6862      	ldr	r2, [r4, #4]
    454e:	fbb5 f3f2 	udiv	r3, r5, r2
    4552:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4556:	2b00      	cmp	r3, #0
    4558:	d1e9      	bne.n	452e <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
    455a:	2301      	movs	r3, #1
    455c:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    455e:	e7e6      	b.n	452e <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
    4560:	f8c6 8000 	str.w	r8, [r6]
    4564:	e7d8      	b.n	4518 <usb_dc_ep_write+0x88>
		if (ret_bytes) {
    4566:	b106      	cbz	r6, 456a <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
    4568:	6035      	str	r5, [r6, #0]
	int result = 0;
    456a:	2400      	movs	r4, #0
    456c:	e7d6      	b.n	451c <usb_dc_ep_write+0x8c>
		return -ENODEV;
    456e:	f06f 0412 	mvn.w	r4, #18
    4572:	e7b8      	b.n	44e6 <usb_dc_ep_write+0x56>
		return -EINVAL;
    4574:	f06f 0415 	mvn.w	r4, #21
    4578:	e7b5      	b.n	44e6 <usb_dc_ep_write+0x56>
    457a:	bf00      	nop
    457c:	20000954 	.word	0x20000954
    4580:	0bad0000 	.word	0x0bad0000
    4584:	2000098c 	.word	0x2000098c

00004588 <usb_dc_ep_read_wait>:
{
    4588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    458c:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    458e:	4b20      	ldr	r3, [pc, #128]	; (4610 <usb_dc_ep_read_wait+0x88>)
{
    4590:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
    4592:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4596:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    4598:	2a00      	cmp	r2, #0
    459a:	d033      	beq.n	4604 <usb_dc_ep_read_wait+0x7c>
    459c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    45a0:	b383      	cbz	r3, 4604 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    45a2:	0603      	lsls	r3, r0, #24
    45a4:	d431      	bmi.n	460a <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
    45a6:	b901      	cbnz	r1, 45aa <usb_dc_ep_read_wait+0x22>
    45a8:	bb7f      	cbnz	r7, 460a <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
    45aa:	f7ff fb0b 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    45ae:	4604      	mov	r4, r0
    45b0:	b358      	cbz	r0, 460a <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
    45b2:	7a03      	ldrb	r3, [r0, #8]
    45b4:	b34b      	cbz	r3, 460a <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    45b6:	f04f 33ff 	mov.w	r3, #4294967295
    45ba:	4816      	ldr	r0, [pc, #88]	; (4614 <usb_dc_ep_read_wait+0x8c>)
    45bc:	f04f 32ff 	mov.w	r2, #4294967295
    45c0:	f005 f844 	bl	964c <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    45c4:	68e3      	ldr	r3, [r4, #12]
    45c6:	429f      	cmp	r7, r3
    45c8:	46b8      	mov	r8, r7
    45ca:	bf28      	it	cs
    45cc:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
    45ce:	b946      	cbnz	r6, 45e2 <usb_dc_ep_read_wait+0x5a>
    45d0:	b93f      	cbnz	r7, 45e2 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
    45d2:	b105      	cbz	r5, 45d6 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
    45d4:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    45d6:	480f      	ldr	r0, [pc, #60]	; (4614 <usb_dc_ep_read_wait+0x8c>)
    45d8:	f005 f83a 	bl	9650 <k_mutex_unlock.isra.0>
		return 0;
    45dc:	2000      	movs	r0, #0
}
    45de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    45e2:	69a1      	ldr	r1, [r4, #24]
    45e4:	4642      	mov	r2, r8
    45e6:	4630      	mov	r0, r6
    45e8:	f004 ffeb 	bl	95c2 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    45ec:	69a3      	ldr	r3, [r4, #24]
    45ee:	4443      	add	r3, r8
    45f0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    45f2:	68e3      	ldr	r3, [r4, #12]
    45f4:	eba3 0308 	sub.w	r3, r3, r8
    45f8:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    45fa:	2d00      	cmp	r5, #0
    45fc:	d0eb      	beq.n	45d6 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
    45fe:	f8c5 8000 	str.w	r8, [r5]
    4602:	e7e8      	b.n	45d6 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
    4604:	f06f 0012 	mvn.w	r0, #18
    4608:	e7e9      	b.n	45de <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
    460a:	f06f 0015 	mvn.w	r0, #21
    460e:	e7e6      	b.n	45de <usb_dc_ep_read_wait+0x56>
    4610:	20000954 	.word	0x20000954
    4614:	2000098c 	.word	0x2000098c

00004618 <usb_dc_ep_read_continue>:
{
    4618:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    461a:	4d1e      	ldr	r5, [pc, #120]	; (4694 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
    461c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
    4620:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
    4622:	b382      	cbz	r2, 4686 <usb_dc_ep_read_continue+0x6e>
    4624:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
    4628:	b36a      	cbz	r2, 4686 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    462a:	061b      	lsls	r3, r3, #24
    462c:	d42e      	bmi.n	468c <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
    462e:	f7ff fac9 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    4632:	4604      	mov	r4, r0
    4634:	b350      	cbz	r0, 468c <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
    4636:	7a03      	ldrb	r3, [r0, #8]
    4638:	b343      	cbz	r3, 468c <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    463a:	f04f 33ff 	mov.w	r3, #4294967295
    463e:	f04f 32ff 	mov.w	r2, #4294967295
    4642:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4646:	f005 f801 	bl	964c <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    464a:	68e3      	ldr	r3, [r4, #12]
    464c:	b9b3      	cbnz	r3, 467c <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
    464e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4650:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    4652:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    4654:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    4656:	7f63      	ldrb	r3, [r4, #29]
    4658:	b183      	cbz	r3, 467c <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
    465a:	f7ff fb07 	bl	3c6c <usbd_evt_alloc>
			if (!ev) {
    465e:	b930      	cbnz	r0, 466e <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
    4660:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4664:	f004 fff4 	bl	9650 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    4668:	f06f 000b 	mvn.w	r0, #11
}
    466c:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
    466e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    4670:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4672:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    4674:	f7ff fade 	bl	3c34 <usbd_evt_put>
			usbd_work_schedule();
    4678:	f7ff fad4 	bl	3c24 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    467c:	4806      	ldr	r0, [pc, #24]	; (4698 <usb_dc_ep_read_continue+0x80>)
    467e:	f004 ffe7 	bl	9650 <k_mutex_unlock.isra.0>
	return 0;
    4682:	2000      	movs	r0, #0
    4684:	e7f2      	b.n	466c <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
    4686:	f06f 0012 	mvn.w	r0, #18
    468a:	e7ef      	b.n	466c <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
    468c:	f06f 0015 	mvn.w	r0, #21
    4690:	e7ec      	b.n	466c <usb_dc_ep_read_continue+0x54>
    4692:	bf00      	nop
    4694:	20000954 	.word	0x20000954
    4698:	2000098c 	.word	0x2000098c

0000469c <usb_dc_ep_set_callback>:
{
    469c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    469e:	4b08      	ldr	r3, [pc, #32]	; (46c0 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    46a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    46a4:	460c      	mov	r4, r1
	if (!dev_attached()) {
    46a6:	b12b      	cbz	r3, 46b4 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    46a8:	f7ff fa8c 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    46ac:	b128      	cbz	r0, 46ba <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    46ae:	6004      	str	r4, [r0, #0]
	return 0;
    46b0:	2000      	movs	r0, #0
}
    46b2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    46b4:	f06f 0012 	mvn.w	r0, #18
    46b8:	e7fb      	b.n	46b2 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    46ba:	f06f 0015 	mvn.w	r0, #21
    46be:	e7f8      	b.n	46b2 <usb_dc_ep_set_callback+0x16>
    46c0:	20000954 	.word	0x20000954

000046c4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    46c4:	4b01      	ldr	r3, [pc, #4]	; (46cc <usb_dc_set_status_callback+0x8>)
    46c6:	6018      	str	r0, [r3, #0]
}
    46c8:	4770      	bx	lr
    46ca:	bf00      	nop
    46cc:	20000954 	.word	0x20000954

000046d0 <usb_dc_ep_mps>:
{
    46d0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    46d2:	4b07      	ldr	r3, [pc, #28]	; (46f0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    46d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    46d8:	b123      	cbz	r3, 46e4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    46da:	f7ff fa73 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    46de:	b120      	cbz	r0, 46ea <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    46e0:	6840      	ldr	r0, [r0, #4]
}
    46e2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    46e4:	f06f 0012 	mvn.w	r0, #18
    46e8:	e7fb      	b.n	46e2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    46ea:	f06f 0015 	mvn.w	r0, #21
    46ee:	e7f8      	b.n	46e2 <usb_dc_ep_mps+0x12>
    46f0:	20000954 	.word	0x20000954

000046f4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    46f4:	4b08      	ldr	r3, [pc, #32]	; (4718 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    46f6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    46f8:	1ac3      	subs	r3, r0, r3
{
    46fa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    46fc:	4907      	ldr	r1, [pc, #28]	; (471c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    46fe:	109b      	asrs	r3, r3, #2
{
    4700:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4702:	4359      	muls	r1, r3
    4704:	4806      	ldr	r0, [pc, #24]	; (4720 <onoff_stop+0x2c>)
    4706:	2240      	movs	r2, #64	; 0x40
    4708:	f005 f800 	bl	970c <stop>
	notify(mgr, res);
    470c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    470e:	4601      	mov	r1, r0
	notify(mgr, res);
    4710:	4620      	mov	r0, r4
}
    4712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4716:	4718      	bx	r3
    4718:	200011f8 	.word	0x200011f8
    471c:	b6db6db7 	.word	0xb6db6db7
    4720:	0000a49c 	.word	0x0000a49c

00004724 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4724:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4726:	4c0c      	ldr	r4, [pc, #48]	; (4758 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4728:	4a0c      	ldr	r2, [pc, #48]	; (475c <onoff_start+0x38>)
    472a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    472c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    472e:	9300      	str	r3, [sp, #0]
{
    4730:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4732:	460b      	mov	r3, r1
    4734:	490a      	ldr	r1, [pc, #40]	; (4760 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4736:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4738:	4361      	muls	r1, r4
{
    473a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    473c:	4809      	ldr	r0, [pc, #36]	; (4764 <onoff_start+0x40>)
    473e:	f005 f812 	bl	9766 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4742:	1e01      	subs	r1, r0, #0
    4744:	da05      	bge.n	4752 <onoff_start+0x2e>
		notify(mgr, err);
    4746:	4630      	mov	r0, r6
    4748:	462b      	mov	r3, r5
	}
}
    474a:	b002      	add	sp, #8
    474c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4750:	4718      	bx	r3
}
    4752:	b002      	add	sp, #8
    4754:	bd70      	pop	{r4, r5, r6, pc}
    4756:	bf00      	nop
    4758:	200011f8 	.word	0x200011f8
    475c:	000097d3 	.word	0x000097d3
    4760:	b6db6db7 	.word	0xb6db6db7
    4764:	0000a49c 	.word	0x0000a49c

00004768 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4768:	2200      	movs	r2, #0
{
    476a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    476c:	2101      	movs	r1, #1
{
    476e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4770:	4610      	mov	r0, r2
    4772:	f7fe feaf 	bl	34d4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4776:	480f      	ldr	r0, [pc, #60]	; (47b4 <clk_init+0x4c>)
    4778:	f001 f866 	bl	5848 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    477c:	4b0e      	ldr	r3, [pc, #56]	; (47b8 <clk_init+0x50>)
    477e:	4298      	cmp	r0, r3
    4780:	d115      	bne.n	47ae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4782:	f001 f871 	bl	5868 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4786:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4788:	490c      	ldr	r1, [pc, #48]	; (47bc <clk_init+0x54>)
    478a:	4630      	mov	r0, r6
    478c:	f004 fbbe 	bl	8f0c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4790:	2800      	cmp	r0, #0
    4792:	db0b      	blt.n	47ac <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4794:	2501      	movs	r5, #1
    4796:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    4798:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    479a:	4908      	ldr	r1, [pc, #32]	; (47bc <clk_init+0x54>)
    479c:	f104 001c 	add.w	r0, r4, #28
    47a0:	f004 fbb4 	bl	8f0c <onoff_manager_init>
		if (err < 0) {
    47a4:	2800      	cmp	r0, #0
    47a6:	db01      	blt.n	47ac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    47a8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    47aa:	2000      	movs	r0, #0
}
    47ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    47ae:	f06f 0004 	mvn.w	r0, #4
    47b2:	e7fb      	b.n	47ac <clk_init+0x44>
    47b4:	000047f5 	.word	0x000047f5
    47b8:	0bad0000 	.word	0x0bad0000
    47bc:	0000a7dc 	.word	0x0000a7dc

000047c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    47c0:	b570      	push	{r4, r5, r6, lr}
    47c2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    47c4:	230c      	movs	r3, #12
    47c6:	4809      	ldr	r0, [pc, #36]	; (47ec <clkstarted_handle.constprop.0+0x2c>)
    47c8:	434b      	muls	r3, r1
    47ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    47cc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    47d0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    47d2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    47d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    47d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    47d8:	f004 ff85 	bl	96e6 <set_on_state>
	if (callback) {
    47dc:	b12d      	cbz	r5, 47ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    47de:	4632      	mov	r2, r6
    47e0:	462b      	mov	r3, r5
    47e2:	4803      	ldr	r0, [pc, #12]	; (47f0 <clkstarted_handle.constprop.0+0x30>)
}
    47e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    47e8:	4718      	bx	r3
}
    47ea:	bd70      	pop	{r4, r5, r6, pc}
    47ec:	200011f8 	.word	0x200011f8
    47f0:	0000a49c 	.word	0x0000a49c

000047f4 <clock_event_handler>:
	switch (event) {
    47f4:	b110      	cbz	r0, 47fc <clock_event_handler+0x8>
    47f6:	2801      	cmp	r0, #1
    47f8:	d004      	beq.n	4804 <clock_event_handler+0x10>
    47fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    47fc:	4b03      	ldr	r3, [pc, #12]	; (480c <clock_event_handler+0x18>)
    47fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4800:	075b      	lsls	r3, r3, #29
    4802:	d101      	bne.n	4808 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4804:	f7ff bfdc 	b.w	47c0 <clkstarted_handle.constprop.0>
}
    4808:	4770      	bx	lr
    480a:	bf00      	nop
    480c:	200011f8 	.word	0x200011f8

00004810 <generic_hfclk_start>:
{
    4810:	b508      	push	{r3, lr}
	__asm__ volatile(
    4812:	f04f 0320 	mov.w	r3, #32
    4816:	f3ef 8111 	mrs	r1, BASEPRI
    481a:	f383 8812 	msr	BASEPRI_MAX, r3
    481e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4822:	4a12      	ldr	r2, [pc, #72]	; (486c <generic_hfclk_start+0x5c>)
    4824:	6813      	ldr	r3, [r2, #0]
    4826:	f043 0002 	orr.w	r0, r3, #2
    482a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    482c:	07da      	lsls	r2, r3, #31
    482e:	d408      	bmi.n	4842 <generic_hfclk_start+0x32>
	__asm__ volatile(
    4830:	f381 8811 	msr	BASEPRI, r1
    4834:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4838:	2001      	movs	r0, #1
}
    483a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    483e:	f005 b8d3 	b.w	99e8 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    4842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4846:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    484a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    484e:	07db      	lsls	r3, r3, #31
    4850:	d5ee      	bpl.n	4830 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4852:	4807      	ldr	r0, [pc, #28]	; (4870 <generic_hfclk_start+0x60>)
    4854:	f004 ff47 	bl	96e6 <set_on_state>
    4858:	f381 8811 	msr	BASEPRI, r1
    485c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4860:	2000      	movs	r0, #0
}
    4862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4866:	f7ff bfab 	b.w	47c0 <clkstarted_handle.constprop.0>
    486a:	bf00      	nop
    486c:	20001248 	.word	0x20001248
    4870:	20001238 	.word	0x20001238

00004874 <api_blocking_start>:
{
    4874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4876:	2200      	movs	r2, #0
    4878:	2301      	movs	r3, #1
    487a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    487e:	4a09      	ldr	r2, [pc, #36]	; (48a4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4880:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4884:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4886:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    488a:	f004 ff9b 	bl	97c4 <api_start>
	if (err < 0) {
    488e:	2800      	cmp	r0, #0
    4890:	db05      	blt.n	489e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4896:	2300      	movs	r3, #0
    4898:	4668      	mov	r0, sp
    489a:	f003 fa53 	bl	7d44 <z_impl_k_sem_take>
}
    489e:	b005      	add	sp, #20
    48a0:	f85d fb04 	ldr.w	pc, [sp], #4
    48a4:	000097f1 	.word	0x000097f1

000048a8 <generic_hfclk_stop>:
{
    48a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    48aa:	f04f 0320 	mov.w	r3, #32
    48ae:	f3ef 8411 	mrs	r4, BASEPRI
    48b2:	f383 8812 	msr	BASEPRI_MAX, r3
    48b6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    48ba:	4a07      	ldr	r2, [pc, #28]	; (48d8 <generic_hfclk_stop+0x30>)
    48bc:	6813      	ldr	r3, [r2, #0]
    48be:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    48c2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    48c4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    48c6:	d402      	bmi.n	48ce <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    48c8:	2001      	movs	r0, #1
    48ca:	f005 f8c9 	bl	9a60 <nrfx_clock_stop>
	__asm__ volatile(
    48ce:	f384 8811 	msr	BASEPRI, r4
    48d2:	f3bf 8f6f 	isb	sy
}
    48d6:	bd10      	pop	{r4, pc}
    48d8:	20001248 	.word	0x20001248

000048dc <z_nrf_clock_control_get_onoff>:
}
    48dc:	4a02      	ldr	r2, [pc, #8]	; (48e8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    48de:	b2c3      	uxtb	r3, r0
}
    48e0:	201c      	movs	r0, #28
    48e2:	fb03 2000 	mla	r0, r3, r0, r2
    48e6:	4770      	bx	lr
    48e8:	200011f8 	.word	0x200011f8

000048ec <z_nrf_clock_control_lf_on>:
{
    48ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    48f0:	4938      	ldr	r1, [pc, #224]	; (49d4 <z_nrf_clock_control_lf_on+0xe8>)
    48f2:	f3bf 8f5b 	dmb	ish
    48f6:	4607      	mov	r7, r0
    48f8:	2201      	movs	r2, #1
    48fa:	e851 3f00 	ldrex	r3, [r1]
    48fe:	e841 2000 	strex	r0, r2, [r1]
    4902:	2800      	cmp	r0, #0
    4904:	d1f9      	bne.n	48fa <z_nrf_clock_control_lf_on+0xe>
    4906:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    490a:	b933      	cbnz	r3, 491a <z_nrf_clock_control_lf_on+0x2e>
    490c:	4932      	ldr	r1, [pc, #200]	; (49d8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    490e:	4833      	ldr	r0, [pc, #204]	; (49dc <z_nrf_clock_control_lf_on+0xf0>)
    4910:	604b      	str	r3, [r1, #4]
    4912:	60cb      	str	r3, [r1, #12]
    4914:	608a      	str	r2, [r1, #8]
    4916:	f004 fb0c 	bl	8f32 <onoff_request>
	switch (start_mode) {
    491a:	1e7b      	subs	r3, r7, #1
    491c:	2b01      	cmp	r3, #1
    491e:	d82b      	bhi.n	4978 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4920:	2f01      	cmp	r7, #1
    4922:	d107      	bne.n	4934 <z_nrf_clock_control_lf_on+0x48>
}

#if NRF_CLOCK_HAS_LFCLKSRCCOPY
NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4928:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    492c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
    4930:	2b01      	cmp	r3, #1
    4932:	d021      	beq.n	4978 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4934:	f005 faa7 	bl	9e86 <k_is_in_isr>
    4938:	4605      	mov	r5, r0
    493a:	b9f8      	cbnz	r0, 497c <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    493c:	4b28      	ldr	r3, [pc, #160]	; (49e0 <z_nrf_clock_control_lf_on+0xf4>)
    493e:	781b      	ldrb	r3, [r3, #0]
    4940:	b1e3      	cbz	r3, 497c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    4942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4946:	2202      	movs	r2, #2
    4948:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    494c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    494e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 49e4 <z_nrf_clock_control_lf_on+0xf8>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    4952:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4956:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    495a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
    495e:	03d2      	lsls	r2, r2, #15
    4960:	d516      	bpl.n	4990 <z_nrf_clock_control_lf_on+0xa4>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    4962:	f003 0303 	and.w	r3, r3, #3
    4966:	2b01      	cmp	r3, #1
    4968:	d001      	beq.n	496e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    496a:	2f01      	cmp	r7, #1
    496c:	d110      	bne.n	4990 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    496e:	b35d      	cbz	r5, 49c8 <z_nrf_clock_control_lf_on+0xdc>
    4970:	f386 8811 	msr	BASEPRI, r6
    4974:	f3bf 8f6f 	isb	sy
}
    4978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    497c:	f04f 0320 	mov.w	r3, #32
    4980:	f3ef 8611 	mrs	r6, BASEPRI
    4984:	f383 8812 	msr	BASEPRI_MAX, r3
    4988:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    498c:	2501      	movs	r5, #1
    498e:	e7de      	b.n	494e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4990:	b1ad      	cbz	r5, 49be <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4992:	4630      	mov	r0, r6
    4994:	f7fe fd62 	bl	345c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
    4998:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
    499c:	2b00      	cmp	r3, #0
    499e:	d1da      	bne.n	4956 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49a0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    49a4:	2a00      	cmp	r2, #0
    49a6:	d0d6      	beq.n	4956 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    49ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    49b0:	2301      	movs	r3, #1
    49b2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    49b6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49ba:	60a3      	str	r3, [r4, #8]
}
    49bc:	e7cb      	b.n	4956 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    49be:	2100      	movs	r1, #0
    49c0:	2021      	movs	r0, #33	; 0x21
    49c2:	f003 fe01 	bl	85c8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    49c6:	e7e7      	b.n	4998 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    49c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49cc:	2202      	movs	r2, #2
    49ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    49d2:	e7d1      	b.n	4978 <z_nrf_clock_control_lf_on+0x8c>
    49d4:	200011f4 	.word	0x200011f4
    49d8:	200011e4 	.word	0x200011e4
    49dc:	20001214 	.word	0x20001214
    49e0:	20001587 	.word	0x20001587
    49e4:	e000e100 	.word	0xe000e100

000049e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    49e8:	b508      	push	{r3, lr}
    49ea:	4807      	ldr	r0, [pc, #28]	; (4a08 <uart_console_init+0x20>)
    49ec:	f005 f9d6 	bl	9d9c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    49f0:	b138      	cbz	r0, 4a02 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    49f2:	4806      	ldr	r0, [pc, #24]	; (4a0c <uart_console_init+0x24>)
    49f4:	f7ff f8ca 	bl	3b8c <__stdout_hook_install>
	__printk_hook_install(console_out);
    49f8:	4804      	ldr	r0, [pc, #16]	; (4a0c <uart_console_init+0x24>)
    49fa:	f7fc fdd7 	bl	15ac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    49fe:	2000      	movs	r0, #0
}
    4a00:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4a02:	f06f 0012 	mvn.w	r0, #18
    4a06:	e7fb      	b.n	4a00 <uart_console_init+0x18>
    4a08:	0000a4d8 	.word	0x0000a4d8
    4a0c:	00004a11 	.word	0x00004a11

00004a10 <console_out>:
	if ('\n' == c) {
    4a10:	280a      	cmp	r0, #10
{
    4a12:	b538      	push	{r3, r4, r5, lr}
    4a14:	4d07      	ldr	r5, [pc, #28]	; (4a34 <console_out+0x24>)
    4a16:	4604      	mov	r4, r0
	if ('\n' == c) {
    4a18:	d104      	bne.n	4a24 <console_out+0x14>
	api->poll_out(dev, out_char);
    4a1a:	68ab      	ldr	r3, [r5, #8]
    4a1c:	210d      	movs	r1, #13
    4a1e:	685b      	ldr	r3, [r3, #4]
    4a20:	4628      	mov	r0, r5
    4a22:	4798      	blx	r3
    4a24:	68ab      	ldr	r3, [r5, #8]
    4a26:	4803      	ldr	r0, [pc, #12]	; (4a34 <console_out+0x24>)
    4a28:	685b      	ldr	r3, [r3, #4]
    4a2a:	b2e1      	uxtb	r1, r4
    4a2c:	4798      	blx	r3
}
    4a2e:	4620      	mov	r0, r4
    4a30:	bd38      	pop	{r3, r4, r5, pc}
    4a32:	bf00      	nop
    4a34:	0000a4d8 	.word	0x0000a4d8

00004a38 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4a38:	b530      	push	{r4, r5, lr}
	return port->config;
    4a3a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4a3c:	7b05      	ldrb	r5, [r0, #12]
    4a3e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4a42:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    4a46:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4a48:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4a4c:	d105      	bne.n	4a5a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4a4e:	4620      	mov	r0, r4
    4a50:	f001 f98a 	bl	5d68 <nrfx_gpiote_trigger_disable>

		return 0;
    4a54:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    4a56:	b005      	add	sp, #20
    4a58:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a5a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4a5c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a60:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4a64:	d114      	bne.n	4a90 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a6a:	bf0c      	ite	eq
    4a6c:	2304      	moveq	r3, #4
    4a6e:	2305      	movne	r3, #5
    4a70:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4a74:	2300      	movs	r3, #0
    4a76:	4619      	mov	r1, r3
    4a78:	aa02      	add	r2, sp, #8
    4a7a:	4620      	mov	r0, r4
    4a7c:	f000 ffbc 	bl	59f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4a80:	4b23      	ldr	r3, [pc, #140]	; (4b10 <gpio_nrfx_pin_interrupt_configure+0xd8>)
    4a82:	4298      	cmp	r0, r3
    4a84:	d13d      	bne.n	4b02 <gpio_nrfx_pin_interrupt_configure+0xca>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4a86:	2101      	movs	r1, #1
    4a88:	4620      	mov	r0, r4
    4a8a:	f001 f927 	bl	5cdc <nrfx_gpiote_trigger_enable>
	return 0;
    4a8e:	e7e1      	b.n	4a54 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4a90:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4a94:	d027      	beq.n	4ae6 <gpio_nrfx_pin_interrupt_configure+0xae>
    4a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4a9a:	bf14      	ite	ne
    4a9c:	2301      	movne	r3, #1
    4a9e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4aa0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4aa4:	6883      	ldr	r3, [r0, #8]
    4aa6:	fa23 f101 	lsr.w	r1, r3, r1
    4aaa:	f011 0101 	ands.w	r1, r1, #1
    4aae:	d1e1      	bne.n	4a74 <gpio_nrfx_pin_interrupt_configure+0x3c>
    4ab0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4ab4:	d1de      	bne.n	4a74 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    4ab6:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4aba:	0962      	lsrs	r2, r4, #5
    4abc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ac0:	d013      	beq.n	4aea <gpio_nrfx_pin_interrupt_configure+0xb2>
    4ac2:	2a01      	cmp	r2, #1
    4ac4:	d120      	bne.n	4b08 <gpio_nrfx_pin_interrupt_configure+0xd0>
    4ac6:	4a13      	ldr	r2, [pc, #76]	; (4b14 <gpio_nrfx_pin_interrupt_configure+0xdc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4acc:	07db      	lsls	r3, r3, #31
    4ace:	d4d1      	bmi.n	4a74 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4ad0:	f10d 0507 	add.w	r5, sp, #7
    4ad4:	4629      	mov	r1, r5
    4ad6:	4620      	mov	r0, r4
    4ad8:	f001 f8b0 	bl	5c3c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4adc:	4b0e      	ldr	r3, [pc, #56]	; (4b18 <gpio_nrfx_pin_interrupt_configure+0xe0>)
    4ade:	4298      	cmp	r0, r3
    4ae0:	d006      	beq.n	4af0 <gpio_nrfx_pin_interrupt_configure+0xb8>
		trigger_config.p_in_channel = &ch;
    4ae2:	9503      	str	r5, [sp, #12]
    4ae4:	e7c6      	b.n	4a74 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4ae6:	2303      	movs	r3, #3
    4ae8:	e7da      	b.n	4aa0 <gpio_nrfx_pin_interrupt_configure+0x68>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    4aea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4aee:	e7eb      	b.n	4ac8 <gpio_nrfx_pin_interrupt_configure+0x90>
			err = nrfx_gpiote_channel_alloc(&ch);
    4af0:	4628      	mov	r0, r5
    4af2:	f001 f8ed 	bl	5cd0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4af6:	4b06      	ldr	r3, [pc, #24]	; (4b10 <gpio_nrfx_pin_interrupt_configure+0xd8>)
    4af8:	4298      	cmp	r0, r3
    4afa:	d0f2      	beq.n	4ae2 <gpio_nrfx_pin_interrupt_configure+0xaa>
				return -ENOMEM;
    4afc:	f06f 000b 	mvn.w	r0, #11
    4b00:	e7a9      	b.n	4a56 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4b02:	f06f 0015 	mvn.w	r0, #21
    4b06:	e7a6      	b.n	4a56 <gpio_nrfx_pin_interrupt_configure+0x1e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4b0c:	deff      	udf	#255	; 0xff
    4b0e:	bf00      	nop
    4b10:	0bad0000 	.word	0x0bad0000
    4b14:	50000300 	.word	0x50000300
    4b18:	0bad0004 	.word	0x0bad0004

00004b1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4b1c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4b1e:	f001 f8c7 	bl	5cb0 <nrfx_gpiote_is_init>
    4b22:	4604      	mov	r4, r0
    4b24:	b968      	cbnz	r0, 4b42 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4b26:	f001 f89b 	bl	5c60 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4b2a:	4b08      	ldr	r3, [pc, #32]	; (4b4c <gpio_nrfx_init+0x30>)
    4b2c:	4298      	cmp	r0, r3
    4b2e:	d10a      	bne.n	4b46 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4b30:	4807      	ldr	r0, [pc, #28]	; (4b50 <gpio_nrfx_init+0x34>)
    4b32:	4621      	mov	r1, r4
    4b34:	f001 f87c 	bl	5c30 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4b38:	4622      	mov	r2, r4
    4b3a:	2105      	movs	r1, #5
    4b3c:	2006      	movs	r0, #6
    4b3e:	f7fe fcc9 	bl	34d4 <z_arm_irq_priority_set>
		return 0;
    4b42:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4b44:	bd10      	pop	{r4, pc}
		return -EIO;
    4b46:	f06f 0004 	mvn.w	r0, #4
    4b4a:	e7fb      	b.n	4b44 <gpio_nrfx_init+0x28>
    4b4c:	0bad0000 	.word	0x0bad0000
    4b50:	00004b55 	.word	0x00004b55

00004b54 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b54:	0942      	lsrs	r2, r0, #5
{
    4b56:	b570      	push	{r4, r5, r6, lr}
    4b58:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b5a:	d002      	beq.n	4b62 <nrfx_gpio_handler+0xe>
    4b5c:	2a01      	cmp	r2, #1
    4b5e:	d017      	beq.n	4b90 <nrfx_gpio_handler+0x3c>
}
    4b60:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b62:	4e0d      	ldr	r6, [pc, #52]	; (4b98 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4b64:	6932      	ldr	r2, [r6, #16]
    4b66:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4b68:	2900      	cmp	r1, #0
    4b6a:	d0f9      	beq.n	4b60 <nrfx_gpio_handler+0xc>
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    4b6c:	f003 031f 	and.w	r3, r3, #31
    4b70:	2501      	movs	r5, #1
	return node->next;
    4b72:	680c      	ldr	r4, [r1, #0]
    4b74:	409d      	lsls	r5, r3
    4b76:	2900      	cmp	r1, #0
    4b78:	d0f2      	beq.n	4b60 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4b7a:	688a      	ldr	r2, [r1, #8]
    4b7c:	402a      	ands	r2, r5
    4b7e:	d002      	beq.n	4b86 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4b80:	684b      	ldr	r3, [r1, #4]
    4b82:	4630      	mov	r0, r6
    4b84:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4b86:	b12c      	cbz	r4, 4b94 <nrfx_gpio_handler+0x40>
    4b88:	6823      	ldr	r3, [r4, #0]
    4b8a:	4621      	mov	r1, r4
    4b8c:	461c      	mov	r4, r3
    4b8e:	e7f2      	b.n	4b76 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b90:	4e02      	ldr	r6, [pc, #8]	; (4b9c <nrfx_gpio_handler+0x48>)
    4b92:	e7e7      	b.n	4b64 <nrfx_gpio_handler+0x10>
    4b94:	4623      	mov	r3, r4
    4b96:	e7f8      	b.n	4b8a <nrfx_gpio_handler+0x36>
    4b98:	0000a4c4 	.word	0x0000a4c4
    4b9c:	0000a4b0 	.word	0x0000a4b0

00004ba0 <gpio_nrfx_pin_configure>:
{
    4ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4ba4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4ba6:	7b3b      	ldrb	r3, [r7, #12]
    4ba8:	f001 051f 	and.w	r5, r1, #31
    4bac:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4bb0:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bb2:	4628      	mov	r0, r5
    4bb4:	f10d 0103 	add.w	r1, sp, #3
{
    4bb8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bba:	f001 f83f 	bl	5c3c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4bbe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bc2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4bc4:	d10b      	bne.n	4bde <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4bc6:	4628      	mov	r0, r5
    4bc8:	f001 f8f0 	bl	5dac <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4bcc:	4b3d      	ldr	r3, [pc, #244]	; (4cc4 <gpio_nrfx_pin_configure+0x124>)
    4bce:	4598      	cmp	r8, r3
    4bd0:	d103      	bne.n	4bda <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    4bd2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4bd6:	f001 f875 	bl	5cc4 <nrfx_gpiote_channel_free>
		return 0;
    4bda:	2000      	movs	r0, #0
    4bdc:	e00c      	b.n	4bf8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4bde:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4be0:	4619      	mov	r1, r3
    4be2:	aa02      	add	r2, sp, #8
    4be4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4be6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4bea:	f000 ff05 	bl	59f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4bee:	4b35      	ldr	r3, [pc, #212]	; (4cc4 <gpio_nrfx_pin_configure+0x124>)
    4bf0:	4298      	cmp	r0, r3
    4bf2:	d004      	beq.n	4bfe <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    4bf4:	f06f 0015 	mvn.w	r0, #21
}
    4bf8:	b004      	add	sp, #16
    4bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4bfe:	4580      	cmp	r8, r0
    4c00:	d103      	bne.n	4c0a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    4c02:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4c06:	f001 f85d 	bl	5cc4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4c0a:	03a3      	lsls	r3, r4, #14
    4c0c:	d54b      	bpl.n	4ca6 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c0e:	f240 3306 	movw	r3, #774	; 0x306
    4c12:	4023      	ands	r3, r4
    4c14:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4c18:	d019      	beq.n	4c4e <gpio_nrfx_pin_configure+0xae>
    4c1a:	d80c      	bhi.n	4c36 <gpio_nrfx_pin_configure+0x96>
    4c1c:	2b06      	cmp	r3, #6
    4c1e:	d017      	beq.n	4c50 <gpio_nrfx_pin_configure+0xb0>
    4c20:	d804      	bhi.n	4c2c <gpio_nrfx_pin_configure+0x8c>
    4c22:	b1ab      	cbz	r3, 4c50 <gpio_nrfx_pin_configure+0xb0>
    4c24:	2b02      	cmp	r3, #2
    4c26:	d1e5      	bne.n	4bf4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    4c28:	2304      	movs	r3, #4
    4c2a:	e011      	b.n	4c50 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4c30:	d1e0      	bne.n	4bf4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    4c32:	2301      	movs	r3, #1
    4c34:	e00c      	b.n	4c50 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c36:	f240 2202 	movw	r2, #514	; 0x202
    4c3a:	4293      	cmp	r3, r2
    4c3c:	d027      	beq.n	4c8e <gpio_nrfx_pin_configure+0xee>
    4c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4c42:	d026      	beq.n	4c92 <gpio_nrfx_pin_configure+0xf2>
    4c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4c48:	d1d4      	bne.n	4bf4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    4c4a:	2302      	movs	r3, #2
    4c4c:	e000      	b.n	4c50 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    4c4e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4c50:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4c54:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4c58:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4c5c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4c5e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4c62:	bf54      	ite	pl
    4c64:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4c68:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4c6a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4c6c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4c70:	d511      	bpl.n	4c96 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4c72:	687a      	ldr	r2, [r7, #4]
    4c74:	2301      	movs	r3, #1
    4c76:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4c78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4c7c:	2200      	movs	r2, #0
    4c7e:	a901      	add	r1, sp, #4
    4c80:	4628      	mov	r0, r5
    4c82:	f000 ff65 	bl	5b50 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4c86:	4b0f      	ldr	r3, [pc, #60]	; (4cc4 <gpio_nrfx_pin_configure+0x124>)
    4c88:	4298      	cmp	r0, r3
    4c8a:	d0a6      	beq.n	4bda <gpio_nrfx_pin_configure+0x3a>
    4c8c:	e7b2      	b.n	4bf4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    4c8e:	2305      	movs	r3, #5
    4c90:	e7de      	b.n	4c50 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c92:	2303      	movs	r3, #3
    4c94:	e7dc      	b.n	4c50 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4c96:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4c98:	bf41      	itttt	mi
    4c9a:	2301      	movmi	r3, #1
    4c9c:	687a      	ldrmi	r2, [r7, #4]
    4c9e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4ca0:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4ca4:	e7ea      	b.n	4c7c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    4ca6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4ca8:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4cac:	bf54      	ite	pl
    4cae:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4cb2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4cb4:	461a      	mov	r2, r3
    4cb6:	a901      	add	r1, sp, #4
    4cb8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4cba:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4cbe:	f000 fe9b 	bl	59f8 <nrfx_gpiote_input_configure>
    4cc2:	e7e0      	b.n	4c86 <gpio_nrfx_pin_configure+0xe6>
    4cc4:	0bad0000 	.word	0x0bad0000

00004cc8 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    4cc8:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4cca:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    4ccc:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
    4cce:	69e3      	ldr	r3, [r4, #28]
    4cd0:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    4cd2:	6a20      	ldr	r0, [r4, #32]
    4cd4:	f004 fe14 	bl	9900 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    4cd8:	2800      	cmp	r0, #0
    4cda:	db0d      	blt.n	4cf8 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    4cdc:	462b      	mov	r3, r5
    4cde:	4a08      	ldr	r2, [pc, #32]	; (4d00 <i2c_nrfx_twim_init+0x38>)
    4ce0:	f104 0108 	add.w	r1, r4, #8
    4ce4:	4620      	mov	r0, r4
    4ce6:	f001 fa4b 	bl	6180 <nrfx_twim_init>
    4cea:	4b06      	ldr	r3, [pc, #24]	; (4d04 <i2c_nrfx_twim_init+0x3c>)
    4cec:	4298      	cmp	r0, r3
    4cee:	d104      	bne.n	4cfa <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
    4cf0:	4620      	mov	r0, r4
    4cf2:	f001 fa89 	bl	6208 <nrfx_twim_enable>
#endif

	return 0;
    4cf6:	2000      	movs	r0, #0
}
    4cf8:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    4cfa:	f06f 0004 	mvn.w	r0, #4
    4cfe:	e7fb      	b.n	4cf8 <i2c_nrfx_twim_init+0x30>
    4d00:	00004d45 	.word	0x00004d45
    4d04:	0bad0000 	.word	0x0bad0000

00004d08 <i2c_nrfx_twim_recover_bus>:
{
    4d08:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4d0a:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    4d0c:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    4d0e:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    4d12:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    4d16:	4620      	mov	r0, r4
    4d18:	f001 fa86 	bl	6228 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    4d1c:	4631      	mov	r1, r6
    4d1e:	4628      	mov	r0, r5
    4d20:	f002 fc80 	bl	7624 <nrfx_twi_twim_bus_recover>
    4d24:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    4d26:	6a20      	ldr	r0, [r4, #32]
    4d28:	f004 fdea 	bl	9900 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    4d2c:	4620      	mov	r0, r4
    4d2e:	f001 fa6b 	bl	6208 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4d32:	4b03      	ldr	r3, [pc, #12]	; (4d40 <i2c_nrfx_twim_recover_bus+0x38>)
    4d34:	429d      	cmp	r5, r3
}
    4d36:	bf14      	ite	ne
    4d38:	f06f 000f 	mvnne.w	r0, #15
    4d3c:	2000      	moveq	r0, #0
    4d3e:	bd70      	pop	{r4, r5, r6, pc}
    4d40:	0bad0000 	.word	0x0bad0000

00004d44 <event_handler>:
	switch (p_event->type) {
    4d44:	7803      	ldrb	r3, [r0, #0]
    4d46:	2b01      	cmp	r3, #1
    4d48:	d008      	beq.n	4d5c <event_handler+0x18>
    4d4a:	2b02      	cmp	r3, #2
    4d4c:	d008      	beq.n	4d60 <event_handler+0x1c>
    4d4e:	b94b      	cbnz	r3, 4d64 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    4d50:	4b05      	ldr	r3, [pc, #20]	; (4d68 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    4d52:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    4d54:	f101 0010 	add.w	r0, r1, #16
    4d58:	f002 bfd0 	b.w	7cfc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4d5c:	4b03      	ldr	r3, [pc, #12]	; (4d6c <event_handler+0x28>)
    4d5e:	e7f8      	b.n	4d52 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4d60:	4b03      	ldr	r3, [pc, #12]	; (4d70 <event_handler+0x2c>)
    4d62:	e7f6      	b.n	4d52 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    4d64:	4b03      	ldr	r3, [pc, #12]	; (4d74 <event_handler+0x30>)
    4d66:	e7f4      	b.n	4d52 <event_handler+0xe>
    4d68:	0bad0000 	.word	0x0bad0000
    4d6c:	0bae0001 	.word	0x0bae0001
    4d70:	0bae0002 	.word	0x0bae0002
    4d74:	0bad0001 	.word	0x0bad0001

00004d78 <i2c_nrfx_twim_transfer>:
{
    4d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    4d7c:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    4d80:	6906      	ldr	r6, [r0, #16]
{
    4d82:	b08b      	sub	sp, #44	; 0x2c
    4d84:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    4d86:	2214      	movs	r2, #20
{
    4d88:	461d      	mov	r5, r3
    4d8a:	4681      	mov	r9, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    4d8c:	f8ba 3018 	ldrh.w	r3, [sl, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    4d90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    4d94:	9302      	str	r3, [sp, #8]
{
    4d96:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    4d98:	eb0d 0002 	add.w	r0, sp, r2
    4d9c:	2100      	movs	r1, #0
    4d9e:	f004 fc1b 	bl	95d8 <memset>
    4da2:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
    4da6:	f04f 32ff 	mov.w	r2, #4294967295
    4daa:	f04f 33ff 	mov.w	r3, #4294967295
    4dae:	4630      	mov	r0, r6
    4db0:	f002 ffc8 	bl	7d44 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    4db4:	f106 0310 	add.w	r3, r6, #16
    4db8:	9301      	str	r3, [sp, #4]
    4dba:	2200      	movs	r2, #0
    4dbc:	2300      	movs	r3, #0
    4dbe:	f106 0010 	add.w	r0, r6, #16
    4dc2:	f002 ffbf 	bl	7d44 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    4dc6:	2700      	movs	r7, #0
	uint16_t msg_buf_used = 0;
    4dc8:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
    4dca:	455f      	cmp	r7, fp
    4dcc:	d301      	bcc.n	4dd2 <i2c_nrfx_twim_transfer+0x5a>
    4dce:	2400      	movs	r4, #0
    4dd0:	e068      	b.n	4ea4 <i2c_nrfx_twim_transfer+0x12c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    4dd2:	7a20      	ldrb	r0, [r4, #8]
    4dd4:	0702      	lsls	r2, r0, #28
    4dd6:	f100 808a 	bmi.w	4eee <i2c_nrfx_twim_transfer+0x176>
		bool concat_next = ((i + 1) < num_msgs)
    4dda:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    4ddc:	455f      	cmp	r7, fp
    4dde:	d20a      	bcs.n	4df6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    4de0:	0783      	lsls	r3, r0, #30
    4de2:	d408      	bmi.n	4df6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    4de4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    4de6:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    4dea:	f002 0201 	and.w	r2, r2, #1
    4dee:	f003 0304 	and.w	r3, r3, #4
    4df2:	431a      	orrs	r2, r3
    4df4:	d01a      	beq.n	4e2c <i2c_nrfx_twim_transfer+0xb4>
		if (concat_next || (msg_buf_used != 0)) {
    4df6:	b1dd      	cbz	r5, 4e30 <i2c_nrfx_twim_transfer+0xb8>
		bool concat_next = ((i + 1) < num_msgs)
    4df8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    4dfa:	6862      	ldr	r2, [r4, #4]
    4dfc:	f8dd c008 	ldr.w	ip, [sp, #8]
    4e00:	18a9      	adds	r1, r5, r2
    4e02:	4561      	cmp	r1, ip
    4e04:	d876      	bhi.n	4ef4 <i2c_nrfx_twim_transfer+0x17c>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    4e06:	07c1      	lsls	r1, r0, #31
    4e08:	d406      	bmi.n	4e18 <i2c_nrfx_twim_transfer+0xa0>
				memcpy(msg_buf + msg_buf_used,
    4e0a:	6821      	ldr	r1, [r4, #0]
    4e0c:	9303      	str	r3, [sp, #12]
    4e0e:	eb08 0005 	add.w	r0, r8, r5
    4e12:	f004 fbd6 	bl	95c2 <memcpy>
    4e16:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
    4e18:	6862      	ldr	r2, [r4, #4]
    4e1a:	442a      	add	r2, r5
    4e1c:	b295      	uxth	r5, r2
		if (concat_next) {
    4e1e:	2b00      	cmp	r3, #0
    4e20:	d14f      	bne.n	4ec2 <i2c_nrfx_twim_transfer+0x14a>
		if (msg_buf_used == 0) {
    4e22:	b14d      	cbz	r5, 4e38 <i2c_nrfx_twim_transfer+0xc0>
			cur_xfer.p_primary_buf = msg_buf;
    4e24:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
    4e28:	462b      	mov	r3, r5
    4e2a:	e009      	b.n	4e40 <i2c_nrfx_twim_transfer+0xc8>
		bool concat_next = ((i + 1) < num_msgs)
    4e2c:	2301      	movs	r3, #1
    4e2e:	e7e4      	b.n	4dfa <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4e30:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    4e32:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4e36:	d51b      	bpl.n	4e70 <i2c_nrfx_twim_transfer+0xf8>
			cur_xfer.p_primary_buf = msgs[i].buf;
    4e38:	6823      	ldr	r3, [r4, #0]
    4e3a:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
    4e3c:	6863      	ldr	r3, [r4, #4]
    4e3e:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    4e40:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    4e42:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    4e44:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    4e48:	f082 0202 	eor.w	r2, r2, #2
    4e4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    4e50:	0152      	lsls	r2, r2, #5
    4e52:	a905      	add	r1, sp, #20
    4e54:	4650      	mov	r0, sl
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    4e56:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    4e5a:	f001 fa03 	bl	6264 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    4e5e:	4b28      	ldr	r3, [pc, #160]	; (4f00 <i2c_nrfx_twim_transfer+0x188>)
    4e60:	4298      	cmp	r0, r3
    4e62:	d013      	beq.n	4e8c <i2c_nrfx_twim_transfer+0x114>
			if (res == NRFX_ERROR_BUSY) {
    4e64:	330b      	adds	r3, #11
    4e66:	4298      	cmp	r0, r3
    4e68:	d11a      	bne.n	4ea0 <i2c_nrfx_twim_transfer+0x128>
				ret = -EBUSY;
    4e6a:	f06f 040f 	mvn.w	r4, #15
    4e6e:	e019      	b.n	4ea4 <i2c_nrfx_twim_transfer+0x12c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4e70:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    4e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4e78:	d0de      	beq.n	4e38 <i2c_nrfx_twim_transfer+0xc0>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    4e7a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
    4e7e:	4293      	cmp	r3, r2
    4e80:	d33b      	bcc.n	4efa <i2c_nrfx_twim_transfer+0x182>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    4e82:	4640      	mov	r0, r8
    4e84:	f004 fb9d 	bl	95c2 <memcpy>
			msg_buf_used = msgs[i].len;
    4e88:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    4e8a:	e7ca      	b.n	4e22 <i2c_nrfx_twim_transfer+0xaa>
    4e8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4e90:	9801      	ldr	r0, [sp, #4]
    4e92:	2300      	movs	r3, #0
    4e94:	f002 ff56 	bl	7d44 <z_impl_k_sem_take>
		if (ret != 0) {
    4e98:	b158      	cbz	r0, 4eb2 <i2c_nrfx_twim_transfer+0x13a>
			(void)i2c_nrfx_twim_recover_bus(dev);
    4e9a:	4648      	mov	r0, r9
    4e9c:	f7ff ff34 	bl	4d08 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    4ea0:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
    4ea4:	4630      	mov	r0, r6
    4ea6:	f002 ff29 	bl	7cfc <z_impl_k_sem_give>
}
    4eaa:	4620      	mov	r0, r4
    4eac:	b00b      	add	sp, #44	; 0x2c
    4eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
    4eb2:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    4eb4:	4a12      	ldr	r2, [pc, #72]	; (4f00 <i2c_nrfx_twim_transfer+0x188>)
    4eb6:	4293      	cmp	r3, r2
    4eb8:	d1f2      	bne.n	4ea0 <i2c_nrfx_twim_transfer+0x128>
		if ((msgs[i].flags & I2C_MSG_READ)
    4eba:	7a23      	ldrb	r3, [r4, #8]
    4ebc:	07db      	lsls	r3, r3, #31
    4ebe:	d402      	bmi.n	4ec6 <i2c_nrfx_twim_transfer+0x14e>
		msg_buf_used = 0;
    4ec0:	2500      	movs	r5, #0
    4ec2:	340c      	adds	r4, #12
    4ec4:	e781      	b.n	4dca <i2c_nrfx_twim_transfer+0x52>
		    && cur_xfer.p_primary_buf == msg_buf) {
    4ec6:	9b08      	ldr	r3, [sp, #32]
    4ec8:	4598      	cmp	r8, r3
    4eca:	d1f9      	bne.n	4ec0 <i2c_nrfx_twim_transfer+0x148>
    4ecc:	4623      	mov	r3, r4
    4ece:	e008      	b.n	4ee2 <i2c_nrfx_twim_transfer+0x16a>
				msg_buf_used -= msgs[j].len;
    4ed0:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
    4ed2:	68d8      	ldr	r0, [r3, #12]
    4ed4:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
    4ed6:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    4ed8:	fa18 f181 	uxtah	r1, r8, r1
    4edc:	f004 fb71 	bl	95c2 <memcpy>
				j--;
    4ee0:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
    4ee2:	685a      	ldr	r2, [r3, #4]
    4ee4:	4295      	cmp	r5, r2
    4ee6:	f1a3 030c 	sub.w	r3, r3, #12
    4eea:	d2f1      	bcs.n	4ed0 <i2c_nrfx_twim_transfer+0x158>
    4eec:	e7e8      	b.n	4ec0 <i2c_nrfx_twim_transfer+0x148>
			ret = -ENOTSUP;
    4eee:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4ef2:	e7d7      	b.n	4ea4 <i2c_nrfx_twim_transfer+0x12c>
				ret = -ENOSPC;
    4ef4:	f06f 041b 	mvn.w	r4, #27
    4ef8:	e7d4      	b.n	4ea4 <i2c_nrfx_twim_transfer+0x12c>
				ret = -EINVAL;
    4efa:	f06f 0415 	mvn.w	r4, #21
    4efe:	e7d1      	b.n	4ea4 <i2c_nrfx_twim_transfer+0x12c>
    4f00:	0bad0000 	.word	0x0bad0000

00004f04 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f06:	4e2d      	ldr	r6, [pc, #180]	; (4fbc <pinctrl_configure_pins+0xb8>)
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4f08:	2500      	movs	r5, #0
    4f0a:	b2eb      	uxtb	r3, r5
    4f0c:	4299      	cmp	r1, r3
    4f0e:	d801      	bhi.n	4f14 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4f10:	2000      	movs	r0, #0
}
    4f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4f14:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
		uint32_t psel = NRF_GET_PIN(pins[i]);
    4f18:	f003 0c7f 	and.w	ip, r3, #127	; 0x7f
		if (psel == NRF_PIN_DISCONNECTED) {
    4f1c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    4f20:	ea4f 4413 	mov.w	r4, r3, lsr #16
    4f24:	d029      	beq.n	4f7a <pinctrl_configure_pins+0x76>
		switch (NRF_GET_FUN(pins[i])) {
    4f26:	2c0b      	cmp	r4, #11
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4f28:	f3c3 2743 	ubfx	r7, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    4f2c:	d134      	bne.n	4f98 <pinctrl_configure_pins+0x94>
			NRF_PSEL_TWIM(reg, SCL) = psel;
    4f2e:	f8c2 c508 	str.w	ip, [r2, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    4f32:	2f00      	cmp	r7, #0
    4f34:	bf08      	it	eq
    4f36:	2706      	moveq	r7, #6
    4f38:	ea5f 1c5c 	movs.w	ip, ip, lsr #5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4f3c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    4f40:	f003 031f 	and.w	r3, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f44:	d02d      	beq.n	4fa2 <pinctrl_configure_pins+0x9e>
    4f46:	f1bc 0f01 	cmp.w	ip, #1
    4f4a:	d130      	bne.n	4fae <pinctrl_configure_pins+0xaa>
    4f4c:	46b4      	mov	ip, r6
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f4e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    cnf &= ~to_update;
    4f52:	f8df c06c 	ldr.w	ip, [pc, #108]	; 4fc0 <pinctrl_configure_pins+0xbc>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f56:	f8d3 e700 	ldr.w	lr, [r3, #1792]	; 0x700
    cnf &= ~to_update;
    4f5a:	ea0e 0c0c 	and.w	ip, lr, ip
    4f5e:	f3c4 3e40 	ubfx	lr, r4, #13, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    4f62:	f3c4 14c1 	ubfx	r4, r4, #7, #2
    4f66:	00a4      	lsls	r4, r4, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)  |
    4f68:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    4f6c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    4f70:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    4f74:	f8c3 4700 	str.w	r4, [r3, #1792]	; 0x700
    4f78:	e005      	b.n	4f86 <pinctrl_configure_pins+0x82>
		switch (NRF_GET_FUN(pins[i])) {
    4f7a:	2c0b      	cmp	r4, #11
    4f7c:	d105      	bne.n	4f8a <pinctrl_configure_pins+0x86>
			NRF_PSEL_TWIM(reg, SCL) = psel;
    4f7e:	f04f 33ff 	mov.w	r3, #4294967295
    4f82:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4f86:	3501      	adds	r5, #1
    4f88:	e7bf      	b.n	4f0a <pinctrl_configure_pins+0x6>
		switch (NRF_GET_FUN(pins[i])) {
    4f8a:	2c0c      	cmp	r4, #12
    4f8c:	d10c      	bne.n	4fa8 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_TWIM(reg, SDA) = psel;
    4f8e:	f04f 33ff 	mov.w	r3, #4294967295
    4f92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4f96:	e7f6      	b.n	4f86 <pinctrl_configure_pins+0x82>
		switch (NRF_GET_FUN(pins[i])) {
    4f98:	2c0c      	cmp	r4, #12
    4f9a:	d105      	bne.n	4fa8 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_TWIM(reg, SDA) = psel;
    4f9c:	f8c2 c50c 	str.w	ip, [r2, #1292]	; 0x50c
    4fa0:	e7c7      	b.n	4f32 <pinctrl_configure_pins+0x2e>
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    4fa2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    4fa6:	e7d2      	b.n	4f4e <pinctrl_configure_pins+0x4a>
		switch (NRF_GET_FUN(pins[i])) {
    4fa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4fac:	e7b1      	b.n	4f12 <pinctrl_configure_pins+0xe>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4fae:	2200      	movs	r2, #0
    4fb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fb8:	deff      	udf	#255	; 0xff
    4fba:	bf00      	nop
    4fbc:	50000300 	.word	0x50000300
    4fc0:	fffcf8f0 	.word	0xfffcf8f0

00004fc4 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    4fc4:	4b01      	ldr	r3, [pc, #4]	; (4fcc <hfclk_on_callback+0x8>)
    4fc6:	2201      	movs	r2, #1
    4fc8:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    4fca:	4770      	bx	lr
    4fcc:	4000c000 	.word	0x4000c000

00004fd0 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    4fd0:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    4fd2:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    4fd4:	d10b      	bne.n	4fee <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    4fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fd8:	4906      	ldr	r1, [pc, #24]	; (4ff4 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    4fda:	4807      	ldr	r0, [pc, #28]	; (4ff8 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    4fdc:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    4fde:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    4fe2:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    4fe6:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    4fe8:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    4fea:	2000      	movs	r0, #0
    4fec:	4770      	bx	lr
		return -ENOTSUP;
    4fee:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4ff2:	4770      	bx	lr
    4ff4:	0003d090 	.word	0x0003d090
    4ff8:	000f4240 	.word	0x000f4240

00004ffc <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4ffc:	4b04      	ldr	r3, [pc, #16]	; (5010 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    4ffe:	6900      	ldr	r0, [r0, #16]
    5000:	2200      	movs	r2, #0
    5002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5006:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    500a:	f002 be77 	b.w	7cfc <z_impl_k_sem_give>
    500e:	bf00      	nop
    5010:	4000c000 	.word	0x4000c000

00005014 <temp_nrf5_sample_fetch>:
{
    5014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    5016:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    5018:	6aab      	ldr	r3, [r5, #40]	; 0x28
    501a:	b363      	cbz	r3, 5076 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    501c:	2939      	cmp	r1, #57	; 0x39
    501e:	d001      	beq.n	5024 <temp_nrf5_sample_fetch+0x10>
    5020:	290c      	cmp	r1, #12
    5022:	d12b      	bne.n	507c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    5024:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    5028:	f04f 32ff 	mov.w	r2, #4294967295
    502c:	f04f 33ff 	mov.w	r3, #4294967295
    5030:	4630      	mov	r0, r6
    5032:	f002 fd79 	bl	7b28 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    5036:	4b13      	ldr	r3, [pc, #76]	; (5084 <temp_nrf5_sample_fetch+0x70>)
    5038:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    503a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    503c:	2303      	movs	r3, #3
    503e:	2400      	movs	r4, #0
    5040:	4669      	mov	r1, sp
    5042:	9403      	str	r4, [sp, #12]
    5044:	9302      	str	r3, [sp, #8]
    5046:	f003 ff74 	bl	8f32 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    504a:	f04f 32ff 	mov.w	r2, #4294967295
    504e:	f04f 33ff 	mov.w	r3, #4294967295
    5052:	4628      	mov	r0, r5
    5054:	f002 fe76 	bl	7d44 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    5058:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    505a:	f003 ffc2 	bl	8fe2 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    505e:	4b0a      	ldr	r3, [pc, #40]	; (5088 <temp_nrf5_sample_fetch+0x74>)
    5060:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    5064:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5066:	2201      	movs	r2, #1
    5068:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    506a:	4630      	mov	r0, r6
    506c:	f002 fdd6 	bl	7c1c <z_impl_k_mutex_unlock>
	return 0;
    5070:	4620      	mov	r0, r4
}
    5072:	b004      	add	sp, #16
    5074:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    5076:	f06f 000a 	mvn.w	r0, #10
    507a:	e7fa      	b.n	5072 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    507c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5080:	e7f7      	b.n	5072 <temp_nrf5_sample_fetch+0x5e>
    5082:	bf00      	nop
    5084:	00004fc5 	.word	0x00004fc5
    5088:	4000c000 	.word	0x4000c000

0000508c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    508c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    508e:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    5090:	2000      	movs	r0, #0
    5092:	f7ff fc23 	bl	48dc <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    5096:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    5098:	f04f 32ff 	mov.w	r2, #4294967295
    509c:	2100      	movs	r1, #0
    509e:	4620      	mov	r0, r4
    50a0:	f004 ff8b 	bl	9fba <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    50a4:	f104 0010 	add.w	r0, r4, #16
    50a8:	f004 ff07 	bl	9eba <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    50ac:	2200      	movs	r2, #0
    50ae:	2101      	movs	r1, #1
    50b0:	200c      	movs	r0, #12
    50b2:	f7fe fa0f 	bl	34d4 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    50b6:	200c      	movs	r0, #12
    50b8:	f7fe f9dc 	bl	3474 <arch_irq_enable>
    p_reg->INTENSET = mask;
    50bc:	4b02      	ldr	r3, [pc, #8]	; (50c8 <temp_nrf5_init+0x3c>)
    50be:	2201      	movs	r2, #1
    50c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    50c4:	2000      	movs	r0, #0
    50c6:	bd10      	pop	{r4, pc}
    50c8:	4000c000 	.word	0x4000c000

000050cc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    50cc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    50ce:	2301      	movs	r3, #1
    50d0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    50d2:	4a0e      	ldr	r2, [pc, #56]	; (510c <compare_int_lock+0x40>)
    50d4:	f3bf 8f5b 	dmb	ish
    50d8:	43dc      	mvns	r4, r3
    50da:	e852 1f00 	ldrex	r1, [r2]
    50de:	ea01 0504 	and.w	r5, r1, r4
    50e2:	e842 5600 	strex	r6, r5, [r2]
    50e6:	2e00      	cmp	r6, #0
    50e8:	d1f7      	bne.n	50da <compare_int_lock+0xe>
    50ea:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    50ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    50f2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    50f4:	4806      	ldr	r0, [pc, #24]	; (5110 <compare_int_lock+0x44>)
    50f6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    50fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    50fe:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
    5102:	420b      	tst	r3, r1
}
    5104:	bf14      	ite	ne
    5106:	2001      	movne	r0, #1
    5108:	2000      	moveq	r0, #0
    510a:	bd70      	pop	{r4, r5, r6, pc}
    510c:	20001294 	.word	0x20001294
    5110:	40011000 	.word	0x40011000

00005114 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    5114:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    5116:	490e      	ldr	r1, [pc, #56]	; (5150 <sys_clock_timeout_handler+0x3c>)
    5118:	e9d1 3400 	ldrd	r3, r4, [r1]
    511c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    511e:	18c3      	adds	r3, r0, r3
    5120:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    5124:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    5128:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    512c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5130:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5134:	d209      	bcs.n	514a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5136:	4b07      	ldr	r3, [pc, #28]	; (5154 <sys_clock_timeout_handler+0x40>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	0a1a      	lsrs	r2, r3, #8
    513c:	061b      	lsls	r3, r3, #24
    513e:	199c      	adds	r4, r3, r6
    5140:	4b05      	ldr	r3, [pc, #20]	; (5158 <sys_clock_timeout_handler+0x44>)
    5142:	f142 0500 	adc.w	r5, r2, #0
    5146:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
    514a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    514c:	f003 bbbe 	b.w	88cc <sys_clock_announce>
    5150:	20000580 	.word	0x20000580
    5154:	20001298 	.word	0x20001298
    5158:	20000588 	.word	0x20000588

0000515c <compare_int_unlock>:
	if (key) {
    515c:	b311      	cbz	r1, 51a4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    515e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5162:	2301      	movs	r3, #1
    5164:	4a10      	ldr	r2, [pc, #64]	; (51a8 <compare_int_unlock+0x4c>)
    5166:	4083      	lsls	r3, r0
    5168:	e852 cf00 	ldrex	ip, [r2]
    516c:	ea4c 0c03 	orr.w	ip, ip, r3
    5170:	e842 c100 	strex	r1, ip, [r2]
    5174:	2900      	cmp	r1, #0
    5176:	d1f7      	bne.n	5168 <compare_int_unlock+0xc>
    5178:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    517c:	4a0b      	ldr	r2, [pc, #44]	; (51ac <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    517e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5182:	4083      	lsls	r3, r0
    5184:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5188:	4b09      	ldr	r3, [pc, #36]	; (51b0 <compare_int_unlock+0x54>)
    518a:	f3bf 8f5b 	dmb	ish
    518e:	681b      	ldr	r3, [r3, #0]
    5190:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5194:	40c3      	lsrs	r3, r0
    5196:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5198:	bf42      	ittt	mi
    519a:	4b06      	ldrmi	r3, [pc, #24]	; (51b4 <compare_int_unlock+0x58>)
    519c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    51a0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    51a4:	4770      	bx	lr
    51a6:	bf00      	nop
    51a8:	20001294 	.word	0x20001294
    51ac:	40011000 	.word	0x40011000
    51b0:	20001290 	.word	0x20001290
    51b4:	e000e100 	.word	0xe000e100

000051b8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    51b8:	4b0d      	ldr	r3, [pc, #52]	; (51f0 <z_nrf_rtc_timer_read+0x38>)
    51ba:	6818      	ldr	r0, [r3, #0]
    51bc:	0a01      	lsrs	r1, r0, #8
    51be:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    51c0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    51c4:	4b0b      	ldr	r3, [pc, #44]	; (51f4 <z_nrf_rtc_timer_read+0x3c>)
    51c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    51ca:	1818      	adds	r0, r3, r0
    51cc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    51d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    51d4:	d20a      	bcs.n	51ec <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    51d6:	4b08      	ldr	r3, [pc, #32]	; (51f8 <z_nrf_rtc_timer_read+0x40>)
    51d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    51dc:	4290      	cmp	r0, r2
    51de:	eb71 0303 	sbcs.w	r3, r1, r3
    51e2:	d203      	bcs.n	51ec <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    51e4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    51e8:	f141 0100 	adc.w	r1, r1, #0
}
    51ec:	4770      	bx	lr
    51ee:	bf00      	nop
    51f0:	20001298 	.word	0x20001298
    51f4:	40011000 	.word	0x40011000
    51f8:	20000588 	.word	0x20000588

000051fc <compare_set>:
{
    51fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5200:	b085      	sub	sp, #20
    5202:	4616      	mov	r6, r2
    5204:	461f      	mov	r7, r3
    5206:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    520a:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    520c:	f7ff ff5e 	bl	50cc <compare_int_lock>
    5210:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5212:	f7ff ffd1 	bl	51b8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5216:	42b0      	cmp	r0, r6
    5218:	eb71 0307 	sbcs.w	r3, r1, r7
    521c:	d254      	bcs.n	52c8 <compare_set+0xcc>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    521e:	4b3e      	ldr	r3, [pc, #248]	; (5318 <compare_set+0x11c>)
    5220:	1a30      	subs	r0, r6, r0
    5222:	eb67 0101 	sbc.w	r1, r7, r1
    5226:	4298      	cmp	r0, r3
    5228:	f171 0100 	sbcs.w	r1, r1, #0
    522c:	d24f      	bcs.n	52ce <compare_set+0xd2>
		if (target_time != cc_data[chan].target_time) {
    522e:	4b3b      	ldr	r3, [pc, #236]	; (531c <compare_set+0x120>)
    5230:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5234:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5238:	429f      	cmp	r7, r3
    523a:	bf08      	it	eq
    523c:	4296      	cmpeq	r6, r2
    523e:	d05e      	beq.n	52fe <compare_set+0x102>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5240:	4937      	ldr	r1, [pc, #220]	; (5320 <compare_set+0x124>)
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    5242:	f44f 3880 	mov.w	r8, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    5246:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
    524a:	fa08 f804 	lsl.w	r8, r8, r4
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    524e:	00ad      	lsls	r5, r5, #2
    5250:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
    5254:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5256:	b2ad      	uxth	r5, r5
    5258:	f004 fbb3 	bl	99c2 <event_clear>
	return absolute_time & COUNTER_MAX;
    525c:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    5260:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    5264:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5268:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    526c:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    526e:	f04f 0903 	mov.w	r9, #3
    p_reg->CC[ch] = cc_val;
    5272:	9302      	str	r3, [sp, #8]
    5274:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5276:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
    527a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
    527e:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    5282:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    5286:	4a27      	ldr	r2, [pc, #156]	; (5324 <compare_set+0x128>)
	return (a - b) & COUNTER_MAX;
    5288:	f06f 0002 	mvn.w	r0, #2
    528c:	1ac0      	subs	r0, r0, r3
    528e:	4460      	add	r0, ip
    5290:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    5294:	4290      	cmp	r0, r2
    5296:	d932      	bls.n	52fe <compare_set+0x102>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5298:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    529a:	b168      	cbz	r0, 52b8 <compare_set+0xbc>
     return p_reg->COUNTER;
    529c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    52a0:	9303      	str	r3, [sp, #12]
    52a2:	eba3 000b 	sub.w	r0, r3, fp
    52a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    52aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    52ae:	d926      	bls.n	52fe <compare_set+0x102>
					event_clear(chan);
    52b0:	4620      	mov	r0, r4
    52b2:	f004 fb86 	bl	99c2 <event_clear>
					if (exact) {
    52b6:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
    52b8:	f1ba 0f00 	cmp.w	sl, #0
    52bc:	d107      	bne.n	52ce <compare_set+0xd2>
			cc_val = now + cc_inc;
    52be:	eb09 0c03 	add.w	ip, r9, r3
			cc_inc++;
    52c2:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
    52c6:	e7d5      	b.n	5274 <compare_set+0x78>
	} else if (!exact) {
    52c8:	f1ba 0f00 	cmp.w	sl, #0
    52cc:	d009      	beq.n	52e2 <compare_set+0xe6>
			return -EINVAL;
    52ce:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
    52d2:	4620      	mov	r0, r4
    52d4:	9901      	ldr	r1, [sp, #4]
    52d6:	f7ff ff41 	bl	515c <compare_int_unlock>
}
    52da:	4628      	mov	r0, r5
    52dc:	b005      	add	sp, #20
    52de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
    52e2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    52e4:	4a10      	ldr	r2, [pc, #64]	; (5328 <compare_set+0x12c>)
    52e6:	f3bf 8f5b 	dmb	ish
    52ea:	40a3      	lsls	r3, r4
    52ec:	e852 0f00 	ldrex	r0, [r2]
    52f0:	4318      	orrs	r0, r3
    52f2:	e842 0100 	strex	r1, r0, [r2]
    52f6:	2900      	cmp	r1, #0
    52f8:	d1f8      	bne.n	52ec <compare_set+0xf0>
    52fa:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
    52fe:	4907      	ldr	r1, [pc, #28]	; (531c <compare_set+0x120>)
		cc_data[chan].callback = handler;
    5300:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
    5302:	0123      	lsls	r3, r4, #4
    5304:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].callback = handler;
    5308:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
    530a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    530c:	6053      	str	r3, [r2, #4]
		cc_data[chan].target_time = target_time;
    530e:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
    5312:	2500      	movs	r5, #0
    5314:	e7dd      	b.n	52d2 <compare_set+0xd6>
    5316:	bf00      	nop
    5318:	00800001 	.word	0x00800001
    531c:	20000570 	.word	0x20000570
    5320:	40011000 	.word	0x40011000
    5324:	007ffffd 	.word	0x007ffffd
    5328:	20001290 	.word	0x20001290

0000532c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    532c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    532e:	4c1c      	ldr	r4, [pc, #112]	; (53a0 <sys_clock_driver_init+0x74>)
    5330:	4b1c      	ldr	r3, [pc, #112]	; (53a4 <sys_clock_driver_init+0x78>)
    5332:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    5336:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    533a:	4b1b      	ldr	r3, [pc, #108]	; (53a8 <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
    533c:	2500      	movs	r5, #0
    533e:	f04f 30ff 	mov.w	r0, #4294967295
    5342:	f04f 31ff 	mov.w	r1, #4294967295
    5346:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    534a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    534e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5352:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5356:	4b15      	ldr	r3, [pc, #84]	; (53ac <sys_clock_driver_init+0x80>)
    5358:	2602      	movs	r6, #2
    535a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    535e:	2101      	movs	r1, #1
    5360:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    5364:	2011      	movs	r0, #17
    5366:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    536a:	462a      	mov	r2, r5
    536c:	f7fe f8b2 	bl	34d4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5370:	2011      	movs	r0, #17
    5372:	f7fe f87f 	bl	3474 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5376:	4a0e      	ldr	r2, [pc, #56]	; (53b0 <sys_clock_driver_init+0x84>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5378:	2301      	movs	r3, #1
    537a:	60a3      	str	r3, [r4, #8]
    537c:	6023      	str	r3, [r4, #0]
    537e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
    5380:	4b0c      	ldr	r3, [pc, #48]	; (53b4 <sys_clock_driver_init+0x88>)
    5382:	4a0d      	ldr	r2, [pc, #52]	; (53b8 <sys_clock_driver_init+0x8c>)
    5384:	9300      	str	r3, [sp, #0]
    5386:	e9cd 5501 	strd	r5, r5, [sp, #4]
    538a:	2300      	movs	r3, #0
    538c:	4628      	mov	r0, r5
    538e:	f7ff ff35 	bl	51fc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5392:	4630      	mov	r0, r6
    5394:	f7ff faaa 	bl	48ec <z_nrf_clock_control_lf_on>

	return 0;
}
    5398:	4628      	mov	r0, r5
    539a:	b004      	add	sp, #16
    539c:	bd70      	pop	{r4, r5, r6, pc}
    539e:	bf00      	nop
    53a0:	40011000 	.word	0x40011000
    53a4:	000f0003 	.word	0x000f0003
    53a8:	20000570 	.word	0x20000570
    53ac:	e000e100 	.word	0xe000e100
    53b0:	20001294 	.word	0x20001294
    53b4:	00005115 	.word	0x00005115
    53b8:	007fffff 	.word	0x007fffff

000053bc <rtc_nrf_isr>:
{
    53bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    53c0:	4c2f      	ldr	r4, [pc, #188]	; (5480 <rtc_nrf_isr+0xc4>)
    53c2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    53c6:	0799      	lsls	r1, r3, #30
    53c8:	d50b      	bpl.n	53e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    53ce:	b143      	cbz	r3, 53e2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    53d0:	4a2c      	ldr	r2, [pc, #176]	; (5484 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    53d2:	2300      	movs	r3, #0
    53d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    53d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    53dc:	6813      	ldr	r3, [r2, #0]
    53de:	3301      	adds	r3, #1
    53e0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    53e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
    53e6:	03da      	lsls	r2, r3, #15
    53e8:	d52a      	bpl.n	5440 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53ea:	f3bf 8f5b 	dmb	ish
    53ee:	4b26      	ldr	r3, [pc, #152]	; (5488 <rtc_nrf_isr+0xcc>)
    53f0:	e853 2f00 	ldrex	r2, [r3]
    53f4:	f022 0101 	bic.w	r1, r2, #1
    53f8:	e843 1000 	strex	r0, r1, [r3]
    53fc:	2800      	cmp	r0, #0
    53fe:	d1f7      	bne.n	53f0 <rtc_nrf_isr+0x34>
    5400:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5404:	07d3      	lsls	r3, r2, #31
    5406:	d402      	bmi.n	540e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5408:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    540c:	b1c3      	cbz	r3, 5440 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    540e:	2500      	movs	r5, #0
    5410:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5414:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    5418:	f7ff fece 	bl	51b8 <z_nrf_rtc_timer_read>
    541c:	f04f 0320 	mov.w	r3, #32
    5420:	f3ef 8211 	mrs	r2, BASEPRI
    5424:	f383 8812 	msr	BASEPRI_MAX, r3
    5428:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    542c:	4b17      	ldr	r3, [pc, #92]	; (548c <rtc_nrf_isr+0xd0>)
    542e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5432:	42b0      	cmp	r0, r6
    5434:	41b9      	sbcs	r1, r7
    5436:	d206      	bcs.n	5446 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    5438:	f382 8811 	msr	BASEPRI, r2
    543c:	f3bf 8f6f 	isb	sy
}
    5440:	b003      	add	sp, #12
    5442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5446:	f04f 38ff 	mov.w	r8, #4294967295
    544a:	f04f 39ff 	mov.w	r9, #4294967295
    544e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    5452:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    5456:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    5458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    545c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5460:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5464:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5468:	f382 8811 	msr	BASEPRI, r2
    546c:	f3bf 8f6f 	isb	sy
		if (handler) {
    5470:	2900      	cmp	r1, #0
    5472:	d0e5      	beq.n	5440 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    5474:	9000      	str	r0, [sp, #0]
    5476:	4632      	mov	r2, r6
    5478:	463b      	mov	r3, r7
    547a:	4628      	mov	r0, r5
    547c:	4788      	blx	r1
    547e:	e7df      	b.n	5440 <rtc_nrf_isr+0x84>
    5480:	40011000 	.word	0x40011000
    5484:	20001298 	.word	0x20001298
    5488:	20001290 	.word	0x20001290
    548c:	20000570 	.word	0x20000570

00005490 <sys_clock_set_timeout>:
{
    5490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    5492:	1c43      	adds	r3, r0, #1
    5494:	d023      	beq.n	54de <sys_clock_set_timeout+0x4e>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5496:	2801      	cmp	r0, #1
    5498:	dd23      	ble.n	54e2 <sys_clock_set_timeout+0x52>
    549a:	4a13      	ldr	r2, [pc, #76]	; (54e8 <sys_clock_set_timeout+0x58>)
    549c:	4b13      	ldr	r3, [pc, #76]	; (54ec <sys_clock_set_timeout+0x5c>)
    549e:	4290      	cmp	r0, r2
    54a0:	bfd4      	ite	le
    54a2:	4604      	movle	r4, r0
    54a4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    54a6:	f7ff fe87 	bl	51b8 <z_nrf_rtc_timer_read>
    54aa:	4b11      	ldr	r3, [pc, #68]	; (54f0 <sys_clock_set_timeout+0x60>)
	if (cyc > MAX_CYCLES) {
    54ac:	490f      	ldr	r1, [pc, #60]	; (54ec <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    54ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    54b2:	1a80      	subs	r0, r0, r2
		cyc = 0;
    54b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    54b8:	bf28      	it	cs
    54ba:	2400      	movcs	r4, #0
	cyc += unannounced;
    54bc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    54be:	428c      	cmp	r4, r1
    54c0:	bf28      	it	cs
    54c2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    54c4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    54c6:	490b      	ldr	r1, [pc, #44]	; (54f4 <sys_clock_set_timeout+0x64>)
    54c8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    54ca:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
    54ce:	e9cd 0001 	strd	r0, r0, [sp, #4]
    54d2:	f143 0300 	adc.w	r3, r3, #0
    54d6:	f7ff fe91 	bl	51fc <compare_set>
}
    54da:	b004      	add	sp, #16
    54dc:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    54de:	4c03      	ldr	r4, [pc, #12]	; (54ec <sys_clock_set_timeout+0x5c>)
    54e0:	e7e1      	b.n	54a6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    54e2:	2401      	movs	r4, #1
    54e4:	e7df      	b.n	54a6 <sys_clock_set_timeout+0x16>
    54e6:	bf00      	nop
    54e8:	007ffffe 	.word	0x007ffffe
    54ec:	007fffff 	.word	0x007fffff
    54f0:	20000580 	.word	0x20000580
    54f4:	00005115 	.word	0x00005115

000054f8 <sys_clock_elapsed>:
{
    54f8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    54fa:	f7ff fe5d 	bl	51b8 <z_nrf_rtc_timer_read>
    54fe:	4b02      	ldr	r3, [pc, #8]	; (5508 <sys_clock_elapsed+0x10>)
    5500:	681b      	ldr	r3, [r3, #0]
}
    5502:	1ac0      	subs	r0, r0, r3
    5504:	bd08      	pop	{r3, pc}
    5506:	bf00      	nop
    5508:	20000580 	.word	0x20000580

0000550c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    550c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5510:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5514:	2a08      	cmp	r2, #8
    5516:	d106      	bne.n	5526 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5518:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    551c:	2b05      	cmp	r3, #5
    551e:	d802      	bhi.n	5526 <nrf52_errata_103+0x1a>
    5520:	4a02      	ldr	r2, [pc, #8]	; (552c <nrf52_errata_103+0x20>)
    5522:	5cd0      	ldrb	r0, [r2, r3]
    5524:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    5526:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    5528:	4770      	bx	lr
    552a:	bf00      	nop
    552c:	0000ab9d 	.word	0x0000ab9d

00005530 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5530:	4a02      	ldr	r2, [pc, #8]	; (553c <nvmc_wait+0xc>)
    5532:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5536:	2b00      	cmp	r3, #0
    5538:	d0fb      	beq.n	5532 <nvmc_wait+0x2>
}
    553a:	4770      	bx	lr
    553c:	4001e000 	.word	0x4001e000

00005540 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    5540:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5542:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5546:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    554a:	2a08      	cmp	r2, #8
    554c:	d14e      	bne.n	55ec <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    554e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5552:	2100      	movs	r1, #0
    5554:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5558:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    555c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5560:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5564:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    5568:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    556c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    5570:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5574:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5578:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    557c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    5580:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5584:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5588:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    558c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5590:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5594:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5598:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    559c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    55a0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    55a4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    55a8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    55ac:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    55b0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    55b4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    55b8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    55bc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    55c0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    55c4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    55c8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    55cc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    55d0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    55d4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    55d8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    55dc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    55e0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    55e4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    55e8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    55ec:	f7ff ff8e 	bl	550c <nrf52_errata_103>
    55f0:	b118      	cbz	r0, 55fa <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    55f2:	4b3a      	ldr	r3, [pc, #232]	; (56dc <SystemInit+0x19c>)
    55f4:	4a3a      	ldr	r2, [pc, #232]	; (56e0 <SystemInit+0x1a0>)
    55f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    55fa:	f7ff ff87 	bl	550c <nrf52_errata_103>
    55fe:	b118      	cbz	r0, 5608 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5600:	4b38      	ldr	r3, [pc, #224]	; (56e4 <SystemInit+0x1a4>)
    5602:	22fb      	movs	r2, #251	; 0xfb
    5604:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5608:	f7ff ff80 	bl	550c <nrf52_errata_103>
    560c:	b170      	cbz	r0, 562c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    560e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5612:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5616:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    561a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    561e:	f022 020f 	bic.w	r2, r2, #15
    5622:	f003 030f 	and.w	r3, r3, #15
    5626:	4313      	orrs	r3, r2
    5628:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    562c:	f7ff ff6e 	bl	550c <nrf52_errata_103>
    5630:	b120      	cbz	r0, 563c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5632:	4b2d      	ldr	r3, [pc, #180]	; (56e8 <SystemInit+0x1a8>)
    5634:	f44f 7200 	mov.w	r2, #512	; 0x200
    5638:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    563c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5640:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5644:	2b08      	cmp	r3, #8
    5646:	d11a      	bne.n	567e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    564c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5650:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5652:	bf44      	itt	mi
    5654:	f06f 0201 	mvnmi.w	r2, #1
    5658:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    565c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5660:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5664:	2b05      	cmp	r3, #5
    5666:	d802      	bhi.n	566e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5668:	4a20      	ldr	r2, [pc, #128]	; (56ec <SystemInit+0x1ac>)
    566a:	5cd3      	ldrb	r3, [r2, r3]
    566c:	b13b      	cbz	r3, 567e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    566e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5672:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    567a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    567e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5682:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5686:	2a00      	cmp	r2, #0
    5688:	db03      	blt.n	5692 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    568a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    568e:	2b00      	cmp	r3, #0
    5690:	da22      	bge.n	56d8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5692:	4917      	ldr	r1, [pc, #92]	; (56f0 <SystemInit+0x1b0>)
    5694:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5696:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    569a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    569e:	2412      	movs	r4, #18
    nvmc_wait();
    56a0:	f7ff ff46 	bl	5530 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    56a4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    56a8:	f7ff ff42 	bl	5530 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    56ac:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    56b0:	f7ff ff3e 	bl	5530 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    56b4:	2300      	movs	r3, #0
    56b6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    56ba:	f7ff ff39 	bl	5530 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    56be:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    56c2:	490c      	ldr	r1, [pc, #48]	; (56f4 <SystemInit+0x1b4>)
    56c4:	4b0c      	ldr	r3, [pc, #48]	; (56f8 <SystemInit+0x1b8>)
    56c6:	68ca      	ldr	r2, [r1, #12]
    56c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    56cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    56ce:	60cb      	str	r3, [r1, #12]
    56d0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    56d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    56d6:	e7fd      	b.n	56d4 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    56d8:	bd10      	pop	{r4, pc}
    56da:	bf00      	nop
    56dc:	40005000 	.word	0x40005000
    56e0:	00038148 	.word	0x00038148
    56e4:	4000f000 	.word	0x4000f000
    56e8:	40029000 	.word	0x40029000
    56ec:	0000ab97 	.word	0x0000ab97
    56f0:	4001e000 	.word	0x4001e000
    56f4:	e000ed00 	.word	0xe000ed00
    56f8:	05fa0004 	.word	0x05fa0004

000056fc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    56fc:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    56fe:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
    5700:	b1cc      	cbz	r4, 5736 <nrfx_flag32_alloc+0x3a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5702:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
    5706:	fab4 f384 	clz	r3, r4
    570a:	f1c3 031f 	rsb	r3, r3, #31
    570e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5710:	2201      	movs	r2, #1
    5712:	409a      	lsls	r2, r3
    5714:	ea24 0202 	bic.w	r2, r4, r2
    5718:	e850 5f00 	ldrex	r5, [r0]
    571c:	42a5      	cmp	r5, r4
    571e:	d104      	bne.n	572a <nrfx_flag32_alloc+0x2e>
    5720:	e840 2c00 	strex	ip, r2, [r0]
    5724:	f1bc 0f00 	cmp.w	ip, #0
    5728:	d1f6      	bne.n	5718 <nrfx_flag32_alloc+0x1c>
    572a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    572e:	d1e6      	bne.n	56fe <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
    5730:	4802      	ldr	r0, [pc, #8]	; (573c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    5732:	700b      	strb	r3, [r1, #0]
}
    5734:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
    5736:	4802      	ldr	r0, [pc, #8]	; (5740 <nrfx_flag32_alloc+0x44>)
    5738:	e7fc      	b.n	5734 <nrfx_flag32_alloc+0x38>
    573a:	bf00      	nop
    573c:	0bad0000 	.word	0x0bad0000
    5740:	0bad0002 	.word	0x0bad0002

00005744 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    5744:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5746:	6803      	ldr	r3, [r0, #0]
    5748:	40cb      	lsrs	r3, r1
    574a:	07db      	lsls	r3, r3, #31
    574c:	d414      	bmi.n	5778 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    574e:	2301      	movs	r3, #1
    5750:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    5752:	6802      	ldr	r2, [r0, #0]
    5754:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5758:	ea43 0102 	orr.w	r1, r3, r2
    575c:	e850 4f00 	ldrex	r4, [r0]
    5760:	4294      	cmp	r4, r2
    5762:	d104      	bne.n	576e <nrfx_flag32_free+0x2a>
    5764:	e840 1c00 	strex	ip, r1, [r0]
    5768:	f1bc 0f00 	cmp.w	ip, #0
    576c:	d1f6      	bne.n	575c <nrfx_flag32_free+0x18>
    576e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5772:	d1ee      	bne.n	5752 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    5774:	4801      	ldr	r0, [pc, #4]	; (577c <nrfx_flag32_free+0x38>)
}
    5776:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5778:	4801      	ldr	r0, [pc, #4]	; (5780 <nrfx_flag32_free+0x3c>)
    577a:	e7fc      	b.n	5776 <nrfx_flag32_free+0x32>
    577c:	0bad0000 	.word	0x0bad0000
    5780:	0bad0004 	.word	0x0bad0004

00005784 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    5786:	4604      	mov	r4, r0
    5788:	b118      	cbz	r0, 5792 <clock_stop+0xe>
    578a:	2801      	cmp	r0, #1
    578c:	d023      	beq.n	57d6 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    578e:	b003      	add	sp, #12
    5790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    5792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5796:	2202      	movs	r2, #2
    5798:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    579c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    57a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57a4:	2201      	movs	r2, #1
    57a6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    57a8:	4606      	mov	r6, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    57aa:	2301      	movs	r3, #1
    57ac:	f88d 3007 	strb.w	r3, [sp, #7]
    57b0:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    57b4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    switch (domain)
    57b8:	b1d4      	cbz	r4, 57f0 <clock_stop+0x6c>
    57ba:	2c01      	cmp	r4, #1
    57bc:	d1e7      	bne.n	578e <clock_stop+0xa>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
    57be:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
    57c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    57c6:	bbae      	cbnz	r6, 5834 <clock_stop+0xb0>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    57c8:	b383      	cbz	r3, 582c <clock_stop+0xa8>
    57ca:	2001      	movs	r0, #1
    57cc:	f004 f90a 	bl	99e4 <nrfx_busy_wait>
    57d0:	3d01      	subs	r5, #1
    57d2:	d1f4      	bne.n	57be <clock_stop+0x3a>
    57d4:	e02a      	b.n	582c <clock_stop+0xa8>
    p_reg->INTENCLR = mask;
    57d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57da:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    57dc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    57e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57e8:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    57ea:	f10d 0607 	add.w	r6, sp, #7
    57ee:	e7dc      	b.n	57aa <clock_stop+0x26>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    57f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
    57f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
    57f8:	b93e      	cbnz	r6, 580a <clock_stop+0x86>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    57fa:	2b00      	cmp	r3, #0
    57fc:	d0c7      	beq.n	578e <clock_stop+0xa>
    57fe:	2001      	movs	r0, #1
    5800:	f004 f8f0 	bl	99e4 <nrfx_busy_wait>
    5804:	3d01      	subs	r5, #1
    5806:	d1f3      	bne.n	57f0 <clock_stop+0x6c>
    5808:	e7c1      	b.n	578e <clock_stop+0xa>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    580a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    580e:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5812:	6032      	str	r2, [r6, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d0ba      	beq.n	578e <clock_stop+0xa>
    5818:	f89d 0007 	ldrb.w	r0, [sp, #7]
    581c:	2801      	cmp	r0, #1
    581e:	d103      	bne.n	5828 <clock_stop+0xa4>
    5820:	f004 f8e0 	bl	99e4 <nrfx_busy_wait>
    5824:	3d01      	subs	r5, #1
    5826:	d1c7      	bne.n	57b8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5828:	2c01      	cmp	r4, #1
    582a:	d1b0      	bne.n	578e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    582c:	4b05      	ldr	r3, [pc, #20]	; (5844 <clock_stop+0xc0>)
    582e:	2200      	movs	r2, #0
    5830:	715a      	strb	r2, [r3, #5]
    5832:	e7ac      	b.n	578e <clock_stop+0xa>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_SRC_Msk)
    5834:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
    5838:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    583c:	7032      	strb	r2, [r6, #0]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    583e:	2b00      	cmp	r3, #0
    5840:	d1ea      	bne.n	5818 <clock_stop+0x94>
    5842:	e7f3      	b.n	582c <clock_stop+0xa8>
    5844:	2000129c 	.word	0x2000129c

00005848 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5848:	4b04      	ldr	r3, [pc, #16]	; (585c <nrfx_clock_init+0x14>)
    584a:	791a      	ldrb	r2, [r3, #4]
    584c:	b922      	cbnz	r2, 5858 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    584e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    5850:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5852:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5854:	4802      	ldr	r0, [pc, #8]	; (5860 <nrfx_clock_init+0x18>)
    5856:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5858:	4802      	ldr	r0, [pc, #8]	; (5864 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    585a:	4770      	bx	lr
    585c:	2000129c 	.word	0x2000129c
    5860:	0bad0000 	.word	0x0bad0000
    5864:	0bad000c 	.word	0x0bad000c

00005868 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5868:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    586a:	2000      	movs	r0, #0
    586c:	f7fd fe24 	bl	34b8 <arch_irq_is_enabled>
    5870:	b908      	cbnz	r0, 5876 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5872:	f7fd fdff 	bl	3474 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    5876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    587a:	2200      	movs	r2, #0
    587c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    5880:	4b01      	ldr	r3, [pc, #4]	; (5888 <nrfx_clock_enable+0x20>)
    5882:	2201      	movs	r2, #1
    5884:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5886:	bd08      	pop	{r3, pc}
    5888:	20001581 	.word	0x20001581

0000588c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    588c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    588e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5892:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5896:	b16a      	cbz	r2, 58b4 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5898:	2200      	movs	r2, #0
    589a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    589e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    58a2:	2201      	movs	r2, #1
    58a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    58a8:	4b11      	ldr	r3, [pc, #68]	; (58f0 <nrfx_clock_irq_handler+0x64>)
    58aa:	7958      	ldrb	r0, [r3, #5]
    58ac:	b910      	cbnz	r0, 58b4 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    58ae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    58b0:	681b      	ldr	r3, [r3, #0]
    58b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    58b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    58bc:	b172      	cbz	r2, 58dc <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58be:	2200      	movs	r2, #0
    58c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    58c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    58c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    58cc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    58d0:	0792      	lsls	r2, r2, #30
    58d2:	d104      	bne.n	58de <nrfx_clock_irq_handler+0x52>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    58d4:	2201      	movs	r2, #1
    58d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58da:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    58dc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    58de:	2202      	movs	r2, #2
    58e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    58e4:	4b02      	ldr	r3, [pc, #8]	; (58f0 <nrfx_clock_irq_handler+0x64>)
}
    58e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	2001      	movs	r0, #1
    58ee:	4718      	bx	r3
    58f0:	2000129c 	.word	0x2000129c

000058f4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    58f4:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    58f6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58fa:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    58fc:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58fe:	d004      	beq.n	590a <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    5900:	2b01      	cmp	r3, #1
    5902:	4803      	ldr	r0, [pc, #12]	; (5910 <nrf_gpio_pin_port_decode+0x1c>)
    5904:	bf18      	it	ne
    5906:	2000      	movne	r0, #0
    5908:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    590a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    590e:	4770      	bx	lr
    5910:	50000300 	.word	0x50000300

00005914 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5914:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5916:	f100 0308 	add.w	r3, r0, #8
    591a:	4c0c      	ldr	r4, [pc, #48]	; (594c <call_handler+0x38>)
    591c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5920:	05da      	lsls	r2, r3, #23
{
    5922:	4605      	mov	r5, r0
    5924:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5926:	d507      	bpl.n	5938 <call_handler+0x24>
    5928:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    592c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5930:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5934:	6852      	ldr	r2, [r2, #4]
    5936:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5938:	68a3      	ldr	r3, [r4, #8]
    593a:	b12b      	cbz	r3, 5948 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    593c:	68e2      	ldr	r2, [r4, #12]
    593e:	4631      	mov	r1, r6
    5940:	4628      	mov	r0, r5
    }
}
    5942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5946:	4718      	bx	r3
}
    5948:	bd70      	pop	{r4, r5, r6, pc}
    594a:	bf00      	nop
    594c:	20000144 	.word	0x20000144

00005950 <release_handler>:
{
    5950:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5952:	4a12      	ldr	r2, [pc, #72]	; (599c <release_handler+0x4c>)
    5954:	3008      	adds	r0, #8
    5956:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    595a:	05d9      	lsls	r1, r3, #23
    595c:	d51b      	bpl.n	5996 <release_handler+0x46>
    595e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5962:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5966:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    596a:	f102 040e 	add.w	r4, r2, #14
    596e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5970:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5974:	f413 7f80 	tst.w	r3, #256	; 0x100
    5978:	d003      	beq.n	5982 <release_handler+0x32>
    597a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    597e:	4299      	cmp	r1, r3
    5980:	d009      	beq.n	5996 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5982:	3001      	adds	r0, #1
    5984:	2830      	cmp	r0, #48	; 0x30
    5986:	d1f3      	bne.n	5970 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5988:	2300      	movs	r3, #0
    598a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    598e:	4804      	ldr	r0, [pc, #16]	; (59a0 <release_handler+0x50>)
}
    5990:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5992:	f7ff bed7 	b.w	5744 <nrfx_flag32_free>
}
    5996:	bc10      	pop	{r4}
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	20000144 	.word	0x20000144
    59a0:	200001b8 	.word	0x200001b8

000059a4 <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
    59a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59a6:	4601      	mov	r1, r0
    59a8:	4a10      	ldr	r2, [pc, #64]	; (59ec <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    59aa:	4c11      	ldr	r4, [pc, #68]	; (59f0 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    uint32_t event_mask = 0;
    59ac:	2000      	movs	r0, #0
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    59ae:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    59b0:	4606      	mov	r6, r0
    59b2:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    59b6:	f5a3 43c2 	sub.w	r3, r3, #24832	; 0x6100
    59ba:	089b      	lsrs	r3, r3, #2
    59bc:	fa05 f303 	lsl.w	r3, r5, r3
    59c0:	4219      	tst	r1, r3
    59c2:	d004      	beq.n	59ce <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59c4:	6817      	ldr	r7, [r2, #0]
    59c6:	b117      	cbz	r7, 59ce <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    59c8:	6016      	str	r6, [r2, #0]
    59ca:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    59cc:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    59ce:	3204      	adds	r2, #4
    59d0:	42a2      	cmp	r2, r4
    59d2:	d1ee      	bne.n	59b2 <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59d4:	4b07      	ldr	r3, [pc, #28]	; (59f4 <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
    59d6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
    59da:	b132      	cbz	r2, 59ea <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    59dc:	2200      	movs	r2, #0
    59de:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    59e2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    59e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
    59ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ec:	40006100 	.word	0x40006100
    59f0:	40006120 	.word	0x40006120
    59f4:	40006000 	.word	0x40006000

000059f8 <nrfx_gpiote_input_configure>:
{
    59f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    59fc:	461d      	mov	r5, r3
    59fe:	4604      	mov	r4, r0
    5a00:	4616      	mov	r6, r2
    if (p_input_config)
    5a02:	460b      	mov	r3, r1
    5a04:	b1e9      	cbz	r1, 5a42 <nrfx_gpiote_input_configure+0x4a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a06:	4f4d      	ldr	r7, [pc, #308]	; (5b3c <nrfx_gpiote_input_configure+0x144>)
    5a08:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a0c:	f837 2018 	ldrh.w	r2, [r7, r8, lsl #1]
    5a10:	f002 0222 	and.w	r2, r2, #34	; 0x22
    5a14:	2a22      	cmp	r2, #34	; 0x22
    5a16:	d020      	beq.n	5a5a <nrfx_gpiote_input_configure+0x62>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a18:	2200      	movs	r2, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
    5a1a:	e9cd 2200 	strd	r2, r2, [sp]
    5a1e:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5a22:	f88d 200f 	strb.w	r2, [sp, #15]
    5a26:	f10d 010e 	add.w	r1, sp, #14
    5a2a:	f10d 020f 	add.w	r2, sp, #15
    5a2e:	f004 f819 	bl	9a64 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5a32:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    5a36:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5a3a:	f043 0301 	orr.w	r3, r3, #1
    5a3e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    5a42:	b346      	cbz	r6, 5a96 <nrfx_gpiote_input_configure+0x9e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a44:	4b3d      	ldr	r3, [pc, #244]	; (5b3c <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5a46:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5a4a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a4c:	f104 0708 	add.w	r7, r4, #8
    5a50:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    5a54:	0788      	lsls	r0, r1, #30
    5a56:	d502      	bpl.n	5a5e <nrfx_gpiote_input_configure+0x66>
            if (use_evt)
    5a58:	b1aa      	cbz	r2, 5a86 <nrfx_gpiote_input_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    5a5a:	4839      	ldr	r0, [pc, #228]	; (5b40 <nrfx_gpiote_input_configure+0x148>)
    5a5c:	e01d      	b.n	5a9a <nrfx_gpiote_input_configure+0xa2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5a5e:	f021 0120 	bic.w	r1, r1, #32
    5a62:	04c9      	lsls	r1, r1, #19
    5a64:	0cc9      	lsrs	r1, r1, #19
    5a66:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    5a6a:	b162      	cbz	r2, 5a86 <nrfx_gpiote_input_configure+0x8e>
                if (!edge)
    5a6c:	f1bc 0f03 	cmp.w	ip, #3
    5a70:	d8f3      	bhi.n	5a5a <nrfx_gpiote_input_configure+0x62>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5a72:	6872      	ldr	r2, [r6, #4]
    5a74:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5a76:	f1bc 0f00 	cmp.w	ip, #0
    5a7a:	d111      	bne.n	5aa0 <nrfx_gpiote_input_configure+0xa8>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5a7c:	4a31      	ldr	r2, [pc, #196]	; (5b44 <nrfx_gpiote_input_configure+0x14c>)
    5a7e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    5a82:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5a86:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    5a8a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5a8e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    5a92:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    5a96:	bb45      	cbnz	r5, 5aea <nrfx_gpiote_input_configure+0xf2>
        err = NRFX_SUCCESS;
    5a98:	482b      	ldr	r0, [pc, #172]	; (5b48 <nrfx_gpiote_input_configure+0x150>)
}
    5a9a:	b004      	add	sp, #16
    5a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5aa0:	00b2      	lsls	r2, r6, #2
    5aa2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5aa6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5aaa:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    5aae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5ab2:	f020 0003 	bic.w	r0, r0, #3
    5ab6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5aba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5abe:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5ac2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5ac6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5aca:	0220      	lsls	r0, r4, #8
    5acc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5ad0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5ad4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5ad8:	ea40 000e 	orr.w	r0, r0, lr
    5adc:	f041 0120 	orr.w	r1, r1, #32
    5ae0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5ae4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5ae8:	e7cd      	b.n	5a86 <nrfx_gpiote_input_configure+0x8e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5aea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5aee:	4620      	mov	r0, r4
    5af0:	f7ff ff2e 	bl	5950 <release_handler>
    if (!handler)
    5af4:	2e00      	cmp	r6, #0
    5af6:	d0cf      	beq.n	5a98 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5af8:	4d10      	ldr	r5, [pc, #64]	; (5b3c <nrfx_gpiote_input_configure+0x144>)
    5afa:	e9d5 2300 	ldrd	r2, r3, [r5]
    5afe:	4296      	cmp	r6, r2
    5b00:	d101      	bne.n	5b06 <nrfx_gpiote_input_configure+0x10e>
    5b02:	429f      	cmp	r7, r3
    5b04:	d018      	beq.n	5b38 <nrfx_gpiote_input_configure+0x140>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b06:	4811      	ldr	r0, [pc, #68]	; (5b4c <nrfx_gpiote_input_configure+0x154>)
    5b08:	f10d 010f 	add.w	r1, sp, #15
    5b0c:	f7ff fdf6 	bl	56fc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b10:	4b0d      	ldr	r3, [pc, #52]	; (5b48 <nrfx_gpiote_input_configure+0x150>)
    5b12:	4298      	cmp	r0, r3
    5b14:	d1c1      	bne.n	5a9a <nrfx_gpiote_input_configure+0xa2>
        handler_id = (int32_t)id;
    5b16:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5b1a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5b1e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b22:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5b24:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b26:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5b2a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b32:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5b36:	e7af      	b.n	5a98 <nrfx_gpiote_input_configure+0xa0>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b38:	2200      	movs	r2, #0
    5b3a:	e7ee      	b.n	5b1a <nrfx_gpiote_input_configure+0x122>
    5b3c:	20000144 	.word	0x20000144
    5b40:	0bad0004 	.word	0x0bad0004
    5b44:	40006000 	.word	0x40006000
    5b48:	0bad0000 	.word	0x0bad0000
    5b4c:	200001b8 	.word	0x200001b8

00005b50 <nrfx_gpiote_output_configure>:
{
    5b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b52:	4604      	mov	r4, r0
    5b54:	b085      	sub	sp, #20
    5b56:	4615      	mov	r5, r2
    if (p_config)
    5b58:	b309      	cbz	r1, 5b9e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5b5a:	f100 0708 	add.w	r7, r0, #8
    5b5e:	4e31      	ldr	r6, [pc, #196]	; (5c24 <nrfx_gpiote_output_configure+0xd4>)
    5b60:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5b64:	0798      	lsls	r0, r3, #30
    5b66:	d401      	bmi.n	5b6c <nrfx_gpiote_output_configure+0x1c>
    5b68:	069a      	lsls	r2, r3, #26
    5b6a:	d458      	bmi.n	5c1e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5b6c:	f013 0f1c 	tst.w	r3, #28
    5b70:	d002      	beq.n	5b78 <nrfx_gpiote_output_configure+0x28>
    5b72:	784b      	ldrb	r3, [r1, #1]
    5b74:	2b01      	cmp	r3, #1
    5b76:	d052      	beq.n	5c1e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5b78:	2301      	movs	r3, #1
    5b7a:	f88d 300f 	strb.w	r3, [sp, #15]
    5b7e:	2300      	movs	r3, #0
    5b80:	e9cd 1300 	strd	r1, r3, [sp]
    5b84:	1c4a      	adds	r2, r1, #1
    5b86:	1c8b      	adds	r3, r1, #2
    5b88:	4620      	mov	r0, r4
    5b8a:	f10d 010f 	add.w	r1, sp, #15
    5b8e:	f003 ff69 	bl	9a64 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5b92:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5b96:	f043 0303 	orr.w	r3, r3, #3
    5b9a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    5b9e:	b915      	cbnz	r5, 5ba6 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    5ba0:	4821      	ldr	r0, [pc, #132]	; (5c28 <nrfx_gpiote_output_configure+0xd8>)
}
    5ba2:	b005      	add	sp, #20
    5ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ba6:	4e1f      	ldr	r6, [pc, #124]	; (5c24 <nrfx_gpiote_output_configure+0xd4>)
    5ba8:	f104 0708 	add.w	r7, r4, #8
    5bac:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5bb0:	0783      	lsls	r3, r0, #30
    5bb2:	d534      	bpl.n	5c1e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    5bb4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    5bb8:	4661      	mov	r1, ip
    5bba:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5bbc:	f020 0020 	bic.w	r0, r0, #32
    5bc0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5bc4:	04c0      	lsls	r0, r0, #19
    5bc6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5bca:	0cc0      	lsrs	r0, r0, #19
    5bcc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5bd0:	2300      	movs	r3, #0
    5bd2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5bd6:	786a      	ldrb	r2, [r5, #1]
    5bd8:	2a00      	cmp	r2, #0
    5bda:	d0e1      	beq.n	5ba0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5bdc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
    5be0:	78ad      	ldrb	r5, [r5, #2]
    5be2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5be6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5bea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5bee:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5bf2:	0223      	lsls	r3, r4, #8
    5bf4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5bf8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5bfa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5bfe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c02:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c04:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c06:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c0a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c0e:	432b      	orrs	r3, r5
    5c10:	f040 0020 	orr.w	r0, r0, #32
    5c14:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c18:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5c1c:	e7c0      	b.n	5ba0 <nrfx_gpiote_output_configure+0x50>
{
    5c1e:	4803      	ldr	r0, [pc, #12]	; (5c2c <nrfx_gpiote_output_configure+0xdc>)
    5c20:	e7bf      	b.n	5ba2 <nrfx_gpiote_output_configure+0x52>
    5c22:	bf00      	nop
    5c24:	20000144 	.word	0x20000144
    5c28:	0bad0000 	.word	0x0bad0000
    5c2c:	0bad0004 	.word	0x0bad0004

00005c30 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5c30:	4b01      	ldr	r3, [pc, #4]	; (5c38 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5c32:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5c36:	4770      	bx	lr
    5c38:	20000144 	.word	0x20000144

00005c3c <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5c3c:	3008      	adds	r0, #8
    5c3e:	4b05      	ldr	r3, [pc, #20]	; (5c54 <nrfx_gpiote_channel_get+0x18>)
    5c40:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    5c44:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c46:	bf43      	ittte	mi
    5c48:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    5c4a:	4803      	ldrmi	r0, [pc, #12]	; (5c58 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c4c:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    5c4e:	4803      	ldrpl	r0, [pc, #12]	; (5c5c <nrfx_gpiote_channel_get+0x20>)
}
    5c50:	4770      	bx	lr
    5c52:	bf00      	nop
    5c54:	20000144 	.word	0x20000144
    5c58:	0bad0000 	.word	0x0bad0000
    5c5c:	0bad0004 	.word	0x0bad0004

00005c60 <nrfx_gpiote_init>:
{
    5c60:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5c62:	4c0f      	ldr	r4, [pc, #60]	; (5ca0 <nrfx_gpiote_init+0x40>)
    5c64:	f894 6078 	ldrb.w	r6, [r4, #120]	; 0x78
    5c68:	b9be      	cbnz	r6, 5c9a <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5c6a:	4d0e      	ldr	r5, [pc, #56]	; (5ca4 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5c6c:	2260      	movs	r2, #96	; 0x60
    5c6e:	4631      	mov	r1, r6
    5c70:	f104 0010 	add.w	r0, r4, #16
    5c74:	f003 fcb0 	bl	95d8 <memset>
    5c78:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
    5c7c:	2006      	movs	r0, #6
    5c7e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    5c82:	f7fd fbf7 	bl	3474 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    5c86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    5c8a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return err_code;
    5c8e:	4806      	ldr	r0, [pc, #24]	; (5ca8 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5c90:	2301      	movs	r3, #1
    5c92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5c96:	6763      	str	r3, [r4, #116]	; 0x74
}
    5c98:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    5c9a:	4804      	ldr	r0, [pc, #16]	; (5cac <nrfx_gpiote_init+0x4c>)
    5c9c:	e7fc      	b.n	5c98 <nrfx_gpiote_init+0x38>
    5c9e:	bf00      	nop
    5ca0:	20000144 	.word	0x20000144
    5ca4:	40006000 	.word	0x40006000
    5ca8:	0bad0000 	.word	0x0bad0000
    5cac:	0bad0005 	.word	0x0bad0005

00005cb0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5cb0:	4b03      	ldr	r3, [pc, #12]	; (5cc0 <nrfx_gpiote_is_init+0x10>)
    5cb2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5cb6:	3800      	subs	r0, #0
    5cb8:	bf18      	it	ne
    5cba:	2001      	movne	r0, #1
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop
    5cc0:	20000144 	.word	0x20000144

00005cc4 <nrfx_gpiote_channel_free>:
{
    5cc4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5cc6:	4801      	ldr	r0, [pc, #4]	; (5ccc <nrfx_gpiote_channel_free+0x8>)
    5cc8:	f7ff bd3c 	b.w	5744 <nrfx_flag32_free>
    5ccc:	200001b4 	.word	0x200001b4

00005cd0 <nrfx_gpiote_channel_alloc>:
{
    5cd0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5cd2:	4801      	ldr	r0, [pc, #4]	; (5cd8 <nrfx_gpiote_channel_alloc+0x8>)
    5cd4:	f7ff bd12 	b.w	56fc <nrfx_flag32_alloc>
    5cd8:	200001b4 	.word	0x200001b4

00005cdc <nrfx_gpiote_trigger_enable>:
{
    5cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5cde:	4b20      	ldr	r3, [pc, #128]	; (5d60 <nrfx_gpiote_trigger_enable+0x84>)
    5ce0:	f100 0208 	add.w	r2, r0, #8
{
    5ce4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5ce6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5cea:	069a      	lsls	r2, r3, #26
    5cec:	d51d      	bpl.n	5d2a <nrfx_gpiote_trigger_enable+0x4e>
    5cee:	f013 0502 	ands.w	r5, r3, #2
    5cf2:	d11a      	bne.n	5d2a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cf4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5cf6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5cf8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    5cfc:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    5d00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5d04:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d08:	6005      	str	r5, [r0, #0]
    5d0a:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5d0c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5d10:	f040 0001 	orr.w	r0, r0, #1
    5d14:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5d18:	b129      	cbz	r1, 5d26 <nrfx_gpiote_trigger_enable+0x4a>
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5d1a:	2201      	movs	r2, #1
    5d1c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
    5d20:	4a10      	ldr	r2, [pc, #64]	; (5d64 <nrfx_gpiote_trigger_enable+0x88>)
    5d22:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5d26:	b003      	add	sp, #12
    5d28:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5d2a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5d2e:	2b04      	cmp	r3, #4
    5d30:	d012      	beq.n	5d58 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5d32:	2b05      	cmp	r3, #5
    5d34:	d012      	beq.n	5d5c <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5d36:	a801      	add	r0, sp, #4
    5d38:	9401      	str	r4, [sp, #4]
    5d3a:	f7ff fddb 	bl	58f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d3e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5d40:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5d44:	40d9      	lsrs	r1, r3
    5d46:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
    5d4a:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
    5d4c:	4620      	mov	r0, r4
}
    5d4e:	b003      	add	sp, #12
    5d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5d54:	f003 becf 	b.w	9af6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5d58:	2103      	movs	r1, #3
    5d5a:	e7f7      	b.n	5d4c <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5d5c:	2102      	movs	r1, #2
    5d5e:	e7f5      	b.n	5d4c <nrfx_gpiote_trigger_enable+0x70>
    5d60:	20000144 	.word	0x20000144
    5d64:	40006000 	.word	0x40006000

00005d68 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5d68:	4b0e      	ldr	r3, [pc, #56]	; (5da4 <nrfx_gpiote_trigger_disable+0x3c>)
    5d6a:	f100 0208 	add.w	r2, r0, #8
    5d6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d72:	0699      	lsls	r1, r3, #26
    5d74:	d513      	bpl.n	5d9e <nrfx_gpiote_trigger_disable+0x36>
    5d76:	079a      	lsls	r2, r3, #30
    5d78:	d411      	bmi.n	5d9e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d7a:	0b5b      	lsrs	r3, r3, #13
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5d7c:	2201      	movs	r2, #1
    5d7e:	409a      	lsls	r2, r3
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
    5d80:	009b      	lsls	r3, r3, #2
    5d82:	4909      	ldr	r1, [pc, #36]	; (5da8 <nrfx_gpiote_trigger_disable+0x40>)
    5d84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5d88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5d8c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5d90:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5d94:	f022 0203 	bic.w	r2, r2, #3
    5d98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5d9c:	4770      	bx	lr
    5d9e:	2100      	movs	r1, #0
    5da0:	f003 bea9 	b.w	9af6 <nrf_gpio_cfg_sense_set>
    5da4:	20000144 	.word	0x20000144
    5da8:	40006000 	.word	0x40006000

00005dac <nrfx_gpiote_pin_uninit>:
{
    5dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5dae:	4d17      	ldr	r5, [pc, #92]	; (5e0c <nrfx_gpiote_pin_uninit+0x60>)
    5db0:	f100 0608 	add.w	r6, r0, #8
{
    5db4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5db6:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (!pin_in_use(pin))
    5dba:	07d9      	lsls	r1, r3, #31
    5dbc:	d524      	bpl.n	5e08 <nrfx_gpiote_pin_uninit+0x5c>
    nrfx_gpiote_trigger_disable(pin);
    5dbe:	f7ff ffd3 	bl	5d68 <nrfx_gpiote_trigger_disable>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5dc2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
    if (pin_in_use_by_te(pin))
    5dc6:	069a      	lsls	r2, r3, #26
    5dc8:	d506      	bpl.n	5dd8 <nrfx_gpiote_pin_uninit+0x2c>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5dca:	0b5b      	lsrs	r3, r3, #13
    p_reg->CONFIG[idx] = 0;
    5dcc:	4a10      	ldr	r2, [pc, #64]	; (5e10 <nrfx_gpiote_pin_uninit+0x64>)
    5dce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5dd2:	2100      	movs	r1, #0
    5dd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    5dd8:	4620      	mov	r0, r4
    5dda:	f7ff fdb9 	bl	5950 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5dde:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5de0:	a801      	add	r0, sp, #4
    5de2:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    nrf_gpio_cfg(
    5de6:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5de8:	f7ff fd84 	bl	58f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5dec:	9b01      	ldr	r3, [sp, #4]
    5dee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
    5df2:	4b08      	ldr	r3, [pc, #32]	; (5e14 <nrfx_gpiote_pin_uninit+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5df4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    5df8:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    5dfa:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    5dfe:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
    5e02:	4805      	ldr	r0, [pc, #20]	; (5e18 <nrfx_gpiote_pin_uninit+0x6c>)
}
    5e04:	b002      	add	sp, #8
    5e06:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5e08:	4804      	ldr	r0, [pc, #16]	; (5e1c <nrfx_gpiote_pin_uninit+0x70>)
    5e0a:	e7fb      	b.n	5e04 <nrfx_gpiote_pin_uninit+0x58>
    5e0c:	20000144 	.word	0x20000144
    5e10:	40006000 	.word	0x40006000
    5e14:	fffcf8f0 	.word	0xfffcf8f0
    5e18:	0bad0000 	.word	0x0bad0000
    5e1c:	0bad0004 	.word	0x0bad0004

00005e20 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
    5e24:	4b62      	ldr	r3, [pc, #392]	; (5fb0 <nrfx_gpiote_irq_handler+0x190>)
    5e26:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    5e2a:	b2c0      	uxtb	r0, r0
    5e2c:	b087      	sub	sp, #28
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
    5e2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    5e32:	f7ff fdb7 	bl	59a4 <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
    5e36:	1e05      	subs	r5, r0, #0
    5e38:	f280 809c 	bge.w	5f74 <nrfx_gpiote_irq_handler+0x154>
        *p_masks = gpio_regs[i]->LATCH;
    5e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5e40:	f8df 8170 	ldr.w	r8, [pc, #368]	; 5fb4 <nrfx_gpiote_irq_handler+0x194>
    5e44:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5e48:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5e4a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5e4e:	f8d8 3520 	ldr.w	r3, [r8, #1312]	; 0x520
    5e52:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5e54:	f8c8 3520 	str.w	r3, [r8, #1312]	; 0x520
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5e58:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    5e5c:	f10d 0a10 	add.w	sl, sp, #16
    5e60:	ea4f 1349 	mov.w	r3, r9, lsl #5
    5e64:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5e66:	f04f 0b01 	mov.w	fp, #1
    5e6a:	e049      	b.n	5f00 <nrfx_gpiote_irq_handler+0xe0>
                pin += 32 * i;
    5e6c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e6e:	4a52      	ldr	r2, [pc, #328]	; (5fb8 <nrfx_gpiote_irq_handler+0x198>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5e70:	fa94 f4a4 	rbit	r4, r4
    5e74:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5e78:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5e7a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e7c:	f104 0308 	add.w	r3, r4, #8
    5e80:	9403      	str	r4, [sp, #12]
    5e82:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5e86:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5e8a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5e8e:	fa0b f202 	lsl.w	r2, fp, r2
    5e92:	ea23 0302 	bic.w	r3, r3, r2
    5e96:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e9a:	a803      	add	r0, sp, #12
    5e9c:	f7ff fd2a 	bl	58f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ea0:	9b03      	ldr	r3, [sp, #12]
    5ea2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5ea6:	08b9      	lsrs	r1, r7, #2
    5ea8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5eac:	f3c7 0682 	ubfx	r6, r7, #2, #3
    if (is_level(trigger))
    5eb0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5eb2:	4637      	mov	r7, r6
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5eb4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    5eb8:	d52c      	bpl.n	5f14 <nrfx_gpiote_irq_handler+0xf4>
        call_handler(pin, trigger);
    5eba:	4620      	mov	r0, r4
    5ebc:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ebe:	b2de      	uxtb	r6, r3
    5ec0:	f7ff fd28 	bl	5914 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5ec4:	a803      	add	r0, sp, #12
    5ec6:	9403      	str	r4, [sp, #12]
    5ec8:	f7ff fd14 	bl	58f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5ecc:	9b03      	ldr	r3, [sp, #12]
    5ece:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5ed2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
    5ed6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5eda:	429e      	cmp	r6, r3
    5edc:	d107      	bne.n	5eee <nrfx_gpiote_irq_handler+0xce>
    5ede:	2100      	movs	r1, #0
    5ee0:	4620      	mov	r0, r4
    5ee2:	f003 fe08 	bl	9af6 <nrf_gpio_cfg_sense_set>
    5ee6:	4631      	mov	r1, r6
    5ee8:	4620      	mov	r0, r4
    5eea:	f003 fe04 	bl	9af6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5eee:	a803      	add	r0, sp, #12
    5ef0:	9403      	str	r4, [sp, #12]
    5ef2:	f7ff fcff 	bl	58f4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5ef6:	9b03      	ldr	r3, [sp, #12]
    5ef8:	fa0b f303 	lsl.w	r3, fp, r3
    5efc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5f00:	f85a 4029 	ldr.w	r4, [sl, r9, lsl #2]
    5f04:	2c00      	cmp	r4, #0
    5f06:	d1b1      	bne.n	5e6c <nrfx_gpiote_irq_handler+0x4c>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5f08:	f1b9 0f00 	cmp.w	r9, #0
    5f0c:	d11d      	bne.n	5f4a <nrfx_gpiote_irq_handler+0x12a>
    5f0e:	f04f 0901 	mov.w	r9, #1
    5f12:	e7a5      	b.n	5e60 <nrfx_gpiote_irq_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5f14:	2b02      	cmp	r3, #2
    5f16:	d10c      	bne.n	5f32 <nrfx_gpiote_irq_handler+0x112>
    5f18:	2103      	movs	r1, #3
    5f1a:	4620      	mov	r0, r4
    5f1c:	f003 fdeb 	bl	9af6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f20:	f006 0305 	and.w	r3, r6, #5
    5f24:	2b01      	cmp	r3, #1
    5f26:	d1e2      	bne.n	5eee <nrfx_gpiote_irq_handler+0xce>
            call_handler(pin, trigger);
    5f28:	4639      	mov	r1, r7
    5f2a:	4620      	mov	r0, r4
    5f2c:	f7ff fcf2 	bl	5914 <call_handler>
    5f30:	e7dd      	b.n	5eee <nrfx_gpiote_irq_handler+0xce>
    5f32:	2102      	movs	r1, #2
    5f34:	4620      	mov	r0, r4
    5f36:	9301      	str	r3, [sp, #4]
    5f38:	f003 fddd 	bl	9af6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f3c:	2e03      	cmp	r6, #3
    5f3e:	d0f3      	beq.n	5f28 <nrfx_gpiote_irq_handler+0x108>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f40:	9b01      	ldr	r3, [sp, #4]
    5f42:	2b03      	cmp	r3, #3
    5f44:	d1d3      	bne.n	5eee <nrfx_gpiote_irq_handler+0xce>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f46:	2e02      	cmp	r6, #2
    5f48:	e7ed      	b.n	5f26 <nrfx_gpiote_irq_handler+0x106>
    5f4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    5f4e:	f7ff fd29 	bl	59a4 <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
    5f52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5f56:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5f5a:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5f5c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5f60:	f8d8 2520 	ldr.w	r2, [r8, #1312]	; 0x520
    5f64:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5f66:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5f68:	f8c8 2520 	str.w	r2, [r8, #1312]	; 0x520
    5f6c:	f47f af74 	bne.w	5e58 <nrfx_gpiote_irq_handler+0x38>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
    5f70:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
    5f74:	2401      	movs	r4, #1
    while (mask)
    5f76:	b915      	cbnz	r5, 5f7e <nrfx_gpiote_irq_handler+0x15e>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
    5f78:	b007      	add	sp, #28
    5f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5f7e:	fa95 f3a5 	rbit	r3, r5
    5f82:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5f86:	fa04 f203 	lsl.w	r2, r4, r3
    5f8a:	009b      	lsls	r3, r3, #2
    5f8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5f90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5f94:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5f98:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5f9c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5fa0:	f3c0 2005 	ubfx	r0, r0, #8, #6
    5fa4:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5fa8:	f7ff fcb4 	bl	5914 <call_handler>
    5fac:	e7e3      	b.n	5f76 <nrfx_gpiote_irq_handler+0x156>
    5fae:	bf00      	nop
    5fb0:	40006000 	.word	0x40006000
    5fb4:	50000300 	.word	0x50000300
    5fb8:	20000144 	.word	0x20000144

00005fbc <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    5fbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    5fbe:	4c18      	ldr	r4, [pc, #96]	; (6020 <nrfx_power_init+0x64>)
    5fc0:	7823      	ldrb	r3, [r4, #0]
    5fc2:	bb53      	cbnz	r3, 601a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    5fc4:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    5fc6:	f3c2 0340 	ubfx	r3, r2, #1, #1
    5fca:	0792      	lsls	r2, r2, #30
    5fcc:	d512      	bpl.n	5ff4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5fd2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5fd6:	2a08      	cmp	r2, #8
    5fd8:	d10b      	bne.n	5ff2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5fde:	2b05      	cmp	r3, #5
    5fe0:	d807      	bhi.n	5ff2 <nrfx_power_init+0x36>
    5fe2:	4a10      	ldr	r2, [pc, #64]	; (6024 <nrfx_power_init+0x68>)
    5fe4:	5cd3      	ldrb	r3, [r2, r3]
    5fe6:	b123      	cbz	r3, 5ff2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    5fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fec:	2201      	movs	r2, #1
    5fee:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    5ff2:	2301      	movs	r3, #1
    5ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5ff8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    5ffc:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5ffe:	f003 0301 	and.w	r3, r3, #1
    6002:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6006:	2000      	movs	r0, #0
    6008:	f7fd fa56 	bl	34b8 <arch_irq_is_enabled>
    600c:	b908      	cbnz	r0, 6012 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    600e:	f7fd fa31 	bl	3474 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    6012:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6014:	4804      	ldr	r0, [pc, #16]	; (6028 <nrfx_power_init+0x6c>)
    m_initialized = true;
    6016:	7023      	strb	r3, [r4, #0]
}
    6018:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    601a:	4804      	ldr	r0, [pc, #16]	; (602c <nrfx_power_init+0x70>)
    601c:	e7fc      	b.n	6018 <nrfx_power_init+0x5c>
    601e:	bf00      	nop
    6020:	20001582 	.word	0x20001582
    6024:	0000abba 	.word	0x0000abba
    6028:	0bad0000 	.word	0x0bad0000
    602c:	0bad000c 	.word	0x0bad000c

00006030 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6034:	f44f 7260 	mov.w	r2, #896	; 0x380
    6038:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    603c:	4b01      	ldr	r3, [pc, #4]	; (6044 <nrfx_power_usbevt_uninit+0x14>)
    603e:	2200      	movs	r2, #0
    6040:	601a      	str	r2, [r3, #0]
}
    6042:	4770      	bx	lr
    6044:	200012a4 	.word	0x200012a4

00006048 <nrfx_power_usbevt_init>:
{
    6048:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    604a:	f7ff fff1 	bl	6030 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    604e:	6803      	ldr	r3, [r0, #0]
    6050:	b10b      	cbz	r3, 6056 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    6052:	4a01      	ldr	r2, [pc, #4]	; (6058 <nrfx_power_usbevt_init+0x10>)
    6054:	6013      	str	r3, [r2, #0]
}
    6056:	bd08      	pop	{r3, pc}
    6058:	200012a4 	.word	0x200012a4

0000605c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    605c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    605e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6062:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6066:	0762      	lsls	r2, r4, #29
    6068:	d507      	bpl.n	607a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    606a:	f44f 7084 	mov.w	r0, #264	; 0x108
    606e:	f003 fd51 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6072:	b110      	cbz	r0, 607a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    6074:	4b1e      	ldr	r3, [pc, #120]	; (60f0 <nrfx_power_irq_handler+0x94>)
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    607a:	06a3      	lsls	r3, r4, #26
    607c:	d508      	bpl.n	6090 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    607e:	f44f 708a 	mov.w	r0, #276	; 0x114
    6082:	f003 fd47 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6086:	b118      	cbz	r0, 6090 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6088:	4b1a      	ldr	r3, [pc, #104]	; (60f4 <nrfx_power_irq_handler+0x98>)
    608a:	2000      	movs	r0, #0
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6090:	0660      	lsls	r0, r4, #25
    6092:	d508      	bpl.n	60a6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6094:	f44f 708c 	mov.w	r0, #280	; 0x118
    6098:	f003 fd3c 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    609c:	b118      	cbz	r0, 60a6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    609e:	4b15      	ldr	r3, [pc, #84]	; (60f4 <nrfx_power_irq_handler+0x98>)
    60a0:	2001      	movs	r0, #1
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    60a6:	0621      	lsls	r1, r4, #24
    60a8:	d508      	bpl.n	60bc <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    60aa:	f44f 708e 	mov.w	r0, #284	; 0x11c
    60ae:	f003 fd31 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    60b2:	b118      	cbz	r0, 60bc <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    60b4:	4b10      	ldr	r3, [pc, #64]	; (60f8 <nrfx_power_irq_handler+0x9c>)
    60b6:	2000      	movs	r0, #0
    60b8:	681b      	ldr	r3, [r3, #0]
    60ba:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    60bc:	05e2      	lsls	r2, r4, #23
    60be:	d508      	bpl.n	60d2 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    60c0:	f44f 7090 	mov.w	r0, #288	; 0x120
    60c4:	f003 fd26 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    60c8:	b118      	cbz	r0, 60d2 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    60ca:	4b0b      	ldr	r3, [pc, #44]	; (60f8 <nrfx_power_irq_handler+0x9c>)
    60cc:	2001      	movs	r0, #1
    60ce:	681b      	ldr	r3, [r3, #0]
    60d0:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    60d2:	05a3      	lsls	r3, r4, #22
    60d4:	d50a      	bpl.n	60ec <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    60d6:	f44f 7092 	mov.w	r0, #292	; 0x124
    60da:	f003 fd1b 	bl	9b14 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    60de:	b128      	cbz	r0, 60ec <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    60e0:	4b05      	ldr	r3, [pc, #20]	; (60f8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    60e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    60e6:	681b      	ldr	r3, [r3, #0]
    60e8:	2002      	movs	r0, #2
    60ea:	4718      	bx	r3
}
    60ec:	bd10      	pop	{r4, pc}
    60ee:	bf00      	nop
    60f0:	200012ac 	.word	0x200012ac
    60f4:	200012a8 	.word	0x200012a8
    60f8:	200012a4 	.word	0x200012a4

000060fc <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    60fc:	b530      	push	{r4, r5, lr}
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    60fe:	f000 041f 	and.w	r4, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6102:	0940      	lsrs	r0, r0, #5
    6104:	d011      	beq.n	612a <nrf_gpio_cfg.constprop.0+0x2e>
    6106:	2801      	cmp	r0, #1
    6108:	d112      	bne.n	6130 <nrf_gpio_cfg.constprop.0+0x34>
    610a:	480c      	ldr	r0, [pc, #48]	; (613c <nrf_gpio_cfg.constprop.0+0x40>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    610c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
    6110:	021b      	lsls	r3, r3, #8
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6112:	f8d0 5700 	ldr.w	r5, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    6116:	4c0a      	ldr	r4, [pc, #40]	; (6140 <nrf_gpio_cfg.constprop.0+0x44>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    6118:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    cnf &= ~to_update;
    611c:	402c      	ands	r4, r5
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
    611e:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    6122:	4321      	orrs	r1, r4
    reg->PIN_CNF[pin_number] = cnf;
    6124:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    6128:	bd30      	pop	{r4, r5, pc}
        NRF_INTERNAL_GPIO_PORT_EXTRACT(p_port);
    612a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    612e:	e7ed      	b.n	610c <nrf_gpio_cfg.constprop.0+0x10>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6130:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    6134:	2300      	movs	r3, #0
    6136:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    613a:	deff      	udf	#255	; 0xff
    613c:	50000300 	.word	0x50000300
    6140:	fffcf8f0 	.word	0xfffcf8f0

00006144 <twim_configure>:
    return transfer_complete;
}

static void twim_configure(nrfx_twim_t const *        p_instance,
                           nrfx_twim_config_t const * p_config)
{
    6144:	b410      	push	{r4}
 * @param[in] p_config Pointer to the peripheral configuration structure.
 */
NRFY_STATIC_INLINE void nrfy_twim_periph_configure(NRF_TWIM_Type *            p_reg,
                                                   nrfy_twim_config_t const * p_config)
{
    if (!p_config->skip_psel_cfg)
    6146:	7bcc      	ldrb	r4, [r1, #15]
    {
        .pins = {
            .scl_pin = p_config->scl_pin,
            .sda_pin = p_config->sda_pin
        },
        .frequency     = p_config->frequency,
    6148:	688a      	ldr	r2, [r1, #8]
        .skip_psel_cfg = p_config->skip_psel_cfg
    };

    nrfy_twim_periph_configure(p_instance->p_twim, &nrfy_config);
    614a:	6803      	ldr	r3, [r0, #0]
    614c:	b92c      	cbnz	r4, 615a <twim_configure+0x16>
            .sda_pin = p_config->sda_pin
    614e:	e9d1 4100 	ldrd	r4, r1, [r1]
    p_reg->PSEL.SCL = scl_pin;
    6152:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    6156:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    615a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    if (m_cb[p_instance->drv_inst_idx].handler)
    615e:	7903      	ldrb	r3, [r0, #4]
    6160:	2228      	movs	r2, #40	; 0x28
    6162:	4353      	muls	r3, r2
    6164:	4a05      	ldr	r2, [pc, #20]	; (617c <twim_configure+0x38>)
    6166:	58d3      	ldr	r3, [r2, r3]
    6168:	b12b      	cbz	r3, 6176 <twim_configure+0x32>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    616a:	6800      	ldr	r0, [r0, #0]
    {
        nrfy_twim_int_init(p_instance->p_twim, 0, p_config->interrupt_priority, false);
    }
}
    616c:	bc10      	pop	{r4}
    __nrfy_internal_twim_event_enabled_clear(p_reg, mask, NRF_TWIM_EVENT_SUSPENDED);
    __nrfy_internal_twim_event_enabled_clear(p_reg, mask, NRF_TWIM_EVENT_ERROR);
    nrf_barrier_w();

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_reg), irq_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_reg));
    616e:	f340 3007 	sbfx	r0, r0, #12, #8
    6172:	f7fd b97f 	b.w	3474 <arch_irq_enable>
    6176:	bc10      	pop	{r4}
    6178:	4770      	bx	lr
    617a:	bf00      	nop
    617c:	200012b0 	.word	0x200012b0

00006180 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    6180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6184:	f890 9004 	ldrb.w	r9, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6188:	4d1c      	ldr	r5, [pc, #112]	; (61fc <nrfx_twim_init+0x7c>)
{
    618a:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    618c:	2028      	movs	r0, #40	; 0x28
    618e:	fb00 f009 	mul.w	r0, r0, r9
    6192:	182e      	adds	r6, r5, r0
{
    6194:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6196:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
    619a:	bb69      	cbnz	r1, 61f8 <nrfx_twim_init+0x78>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    619c:	60b1      	str	r1, [r6, #8]
    p_cb->handler         = event_handler;
    619e:	502a      	str	r2, [r5, r0]
    p_cb->p_context       = p_context;
    61a0:	6073      	str	r3, [r6, #4]
    p_cb->repeated        = false;
    61a2:	f886 1025 	strb.w	r1, [r6, #37]	; 0x25
    p_cb->busy            = false;
    61a6:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24

    if (p_config)
    61aa:	b1e4      	cbz	r4, 61e6 <nrfx_twim_init+0x66>
    {
        p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    61ac:	f894 800e 	ldrb.w	r8, [r4, #14]
    61b0:	f886 8027 	strb.w	r8, [r6, #39]	; 0x27
   if (!p_config->skip_gpio_cfg)
    61b4:	f1b8 0f00 	cmp.w	r8, #0
    61b8:	d10b      	bne.n	61d2 <nrfx_twim_init+0x52>
    nrf_gpio_cfg(pin_number, dir, input, pull, drive, sense);
    61ba:	6820      	ldr	r0, [r4, #0]
    61bc:	2306      	movs	r3, #6
    61be:	2203      	movs	r2, #3
    61c0:	4641      	mov	r1, r8
    61c2:	f7ff ff9b 	bl	60fc <nrf_gpio_cfg.constprop.0>
    61c6:	6860      	ldr	r0, [r4, #4]
    61c8:	2306      	movs	r3, #6
    61ca:	2203      	movs	r2, #3
    61cc:	4641      	mov	r1, r8
    61ce:	f7ff ff95 	bl	60fc <nrf_gpio_cfg.constprop.0>
        if (!pins_configure(p_config))
        {
            return NRFX_ERROR_INVALID_PARAM;
        }

        p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    61d2:	2328      	movs	r3, #40	; 0x28
    61d4:	fb03 5309 	mla	r3, r3, r9, r5
    61d8:	7b62      	ldrb	r2, [r4, #13]
    61da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        #if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
        p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
        #endif

        twim_configure(p_instance, p_config);
    61de:	4621      	mov	r1, r4
    61e0:	4638      	mov	r0, r7
    61e2:	f7ff ffaf 	bl	6144 <twim_configure>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61e6:	2328      	movs	r3, #40	; 0x28
    61e8:	fb03 5509 	mla	r5, r3, r9, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    61ec:	4804      	ldr	r0, [pc, #16]	; (6200 <nrfx_twim_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    61ee:	2301      	movs	r3, #1
    61f0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
    61f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
    61f8:	4802      	ldr	r0, [pc, #8]	; (6204 <nrfx_twim_init+0x84>)
    61fa:	e7fb      	b.n	61f4 <nrfx_twim_init+0x74>
    61fc:	200012b0 	.word	0x200012b0
    6200:	0bad0000 	.word	0x0bad0000
    6204:	0bad0005 	.word	0x0bad0005

00006208 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrfy_twim_enable(p_instance->p_twim);
    6208:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    620a:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    620c:	2106      	movs	r1, #6
    620e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    6212:	4b04      	ldr	r3, [pc, #16]	; (6224 <nrfx_twim_enable+0x1c>)
    6214:	2128      	movs	r1, #40	; 0x28
    6216:	fb01 3302 	mla	r3, r1, r2, r3
    621a:	2202      	movs	r2, #2
    621c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    6220:	4770      	bx	lr
    6222:	bf00      	nop
    6224:	200012b0 	.word	0x200012b0

00006228 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6228:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    p_cb->int_mask = 0;
    622a:	4b0c      	ldr	r3, [pc, #48]	; (625c <nrfx_twim_disable+0x34>)
    622c:	2128      	movs	r1, #40	; 0x28
    622e:	fb01 3302 	mla	r3, r1, r2, r3
    6232:	2100      	movs	r1, #0
    6234:	6099      	str	r1, [r3, #8]
    nrfy_twim_stop(p_instance->p_twim);
    6236:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    6238:	4809      	ldr	r0, [pc, #36]	; (6260 <nrfx_twim_disable+0x38>)
    623a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    623e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    6242:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    6246:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    624a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    624e:	2201      	movs	r2, #1
    6250:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    p_cb->busy = false;
    6254:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    6258:	4770      	bx	lr
    625a:	bf00      	nop
    625c:	200012b0 	.word	0x200012b0
    6260:	019c0202 	.word	0x019c0202

00006264 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    6264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_cb->error = false;
    6268:	4db0      	ldr	r5, [pc, #704]	; (652c <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    626a:	f890 9004 	ldrb.w	r9, [r0, #4]
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length *
                           sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    626e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    6270:	2328      	movs	r3, #40	; 0x28
    6272:	fb03 5309 	mla	r3, r3, r9, r5
{
    6276:	4690      	mov	r8, r2
    p_cb->error = false;
    6278:	2200      	movs	r2, #0
    627a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    if (p_xfer_desc->primary_length != 0 &&
    627e:	684b      	ldr	r3, [r1, #4]
{
    6280:	460e      	mov	r6, r1
    if (p_xfer_desc->primary_length != 0 &&
    6282:	b133      	cbz	r3, 6292 <nrfx_twim_xfer+0x2e>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6284:	68cb      	ldr	r3, [r1, #12]
    6286:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    628a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    628e:	f040 8185 	bne.w	659c <nrfx_twim_xfer+0x338>
    if ((p_xfer_desc->type == NRFX_TWIM_XFER_TXTX ||
    6292:	7833      	ldrb	r3, [r6, #0]
    6294:	3b02      	subs	r3, #2
    6296:	2b01      	cmp	r3, #1
    6298:	d806      	bhi.n	62a8 <nrfx_twim_xfer+0x44>
    629a:	6933      	ldr	r3, [r6, #16]
    629c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         p_xfer_desc->type == NRFX_TWIM_XFER_TXRX) &&
    62a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    62a4:	f040 817a 	bne.w	659c <nrfx_twim_xfer+0x338>
    p_reg->INTENCLR = mask;
    62a8:	4ba1      	ldr	r3, [pc, #644]	; (6530 <nrfx_twim_xfer+0x2cc>)
    62aa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    62ae:	2328      	movs	r3, #40	; 0x28
    62b0:	fb03 5309 	mla	r3, r3, r9, r5
    62b4:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
    62b8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    62bc:	b139      	cbz	r1, 62ce <nrfx_twim_xfer+0x6a>
        nrfy_twim_int_enable(p_twim, p_cb->int_mask);
    62be:	689b      	ldr	r3, [r3, #8]
        return err_code;
    62c0:	f8df b270 	ldr.w	fp, [pc, #624]	; 6534 <nrfx_twim_xfer+0x2d0>
    p_reg->INTENSET = mask;
    62c4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    62c8:	4658      	mov	r0, fp
    62ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false : true;
    62ce:	f018 0f14 	tst.w	r8, #20
    62d2:	bf0c      	ite	eq
    62d4:	2101      	moveq	r1, #1
    62d6:	2100      	movne	r1, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    62d8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    p_cb->xfer_type = p_xfer_desc->type;
    62dc:	7831      	ldrb	r1, [r6, #0]
    62de:	f883 1020 	strb.w	r1, [r3, #32]
    p_cb->address   = p_xfer_desc->address;
    62e2:	7871      	ldrb	r1, [r6, #1]
    62e4:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    p_cb->xfer_desc_primary.p_buffer   = p_xfer_desc->p_primary_buf;
    62e8:	68f1      	ldr	r1, [r6, #12]
    62ea:	60d9      	str	r1, [r3, #12]
    p_cb->xfer_desc_primary.length     = p_xfer_desc->primary_length;
    62ec:	6871      	ldr	r1, [r6, #4]
    62ee:	6119      	str	r1, [r3, #16]
    p_cb->xfer_desc_secondary.p_buffer = p_xfer_desc->p_secondary_buf;
    62f0:	6931      	ldr	r1, [r6, #16]
    62f2:	6159      	str	r1, [r3, #20]
    p_cb->xfer_desc_secondary.length   = p_xfer_desc->secondary_length;
    62f4:	68b1      	ldr	r1, [r6, #8]
    62f6:	6199      	str	r1, [r3, #24]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    62f8:	f3c8 1100 	ubfx	r1, r8, #4, #1
    62fc:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    p_cb->flags = flags;
    6300:	f8c3 801c 	str.w	r8, [r3, #28]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    6304:	7873      	ldrb	r3, [r6, #1]
    6306:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    630a:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
    630e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    6312:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
    6316:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    631a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    631e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    6322:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    6326:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 * @param[in] p_reg  Pointer to the structure of registers of the peripheral.
 * @param[in] enable True if TX list feature is to be enabled, false otherwise.
 */
NRFY_STATIC_INLINE void nrfy_twim_tx_list_set(NRF_TWIM_Type * p_reg, bool enable)
{
    if (enable)
    632a:	f018 0301 	ands.w	r3, r8, #1
}

#if NRF_TWIM_HAS_ARRAY_LIST
NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    632e:	bf18      	it	ne
    6330:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    6332:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
 * @param[in] p_reg  Pointer to the structure of registers of the peripheral.
 * @param[in] enable True if RX list feature is to be enabled, false otherwise.
 */
NRFY_STATIC_INLINE void nrfy_twim_rx_list_set(NRF_TWIM_Type * p_reg, bool enable)
{
    if (enable)
    6336:	f018 0302 	ands.w	r3, r8, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    633a:	bf18      	it	ne
    633c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    633e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    6342:	7833      	ldrb	r3, [r6, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6344:	eb09 0789 	add.w	r7, r9, r9, lsl #2
    6348:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
    switch (p_xfer_desc->type)
    634c:	2b03      	cmp	r3, #3
    634e:	f200 80a3 	bhi.w	6498 <nrfx_twim_xfer+0x234>
    6352:	e8df f003 	tbb	[pc, r3]
    6356:	9879      	.short	0x9879
    6358:	0262      	.short	0x0262
    p_reg->SHORTS = mask;
    635a:	f44f 7380 	mov.w	r3, #256	; 0x100
    635e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6362:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
    6366:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    636a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    636e:	2301      	movs	r3, #1
    6370:	60a3      	str	r3, [r4, #8]
    uint32_t evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    6372:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    6376:	4620      	mov	r0, r4
    6378:	f003 fc2f 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
            while (nrfy_twim_events_process(p_twim,
    637c:	2800      	cmp	r0, #0
    637e:	d1f8      	bne.n	6372 <nrfx_twim_xfer+0x10e>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6380:	e9d7 2305 	ldrd	r2, r3, [r7, #20]
    6384:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6388:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    638c:	2328      	movs	r3, #40	; 0x28
    638e:	fb03 5309 	mla	r3, r3, r9, r5
    6392:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    6396:	609a      	str	r2, [r3, #8]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6398:	f8df b19c 	ldr.w	fp, [pc, #412]	; 6538 <nrfx_twim_xfer+0x2d4>
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
    639c:	2228      	movs	r2, #40	; 0x28
    639e:	fb02 f209 	mul.w	r2, r2, r9
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    63a2:	f018 0a08 	ands.w	sl, r8, #8
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
    63a6:	58ab      	ldr	r3, [r5, r2]
    63a8:	eb05 0002 	add.w	r0, r5, r2
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    63ac:	d113      	bne.n	63d6 <nrfx_twim_xfer+0x172>
    63ae:	7831      	ldrb	r1, [r6, #0]
    63b0:	2903      	cmp	r1, #3
    63b2:	d010      	beq.n	63d6 <nrfx_twim_xfer+0x172>
        if (p_xfer_desc->type == NRFX_TWIM_XFER_RX)
    63b4:	2901      	cmp	r1, #1
    63b6:	f040 8085 	bne.w	64c4 <nrfx_twim_xfer+0x260>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63ba:	6021      	str	r1, [r4, #0]
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
    63bc:	2b00      	cmp	r3, #0
    63be:	d06e      	beq.n	649e <nrfx_twim_xfer+0x23a>
        if (p_xfer_desc->primary_length == 0 && p_cb->handler)
    63c0:	2228      	movs	r2, #40	; 0x28
    63c2:	fb02 f209 	mul.w	r2, r2, r9
    63c6:	6871      	ldr	r1, [r6, #4]
    63c8:	58aa      	ldr	r2, [r5, r2]
    63ca:	b921      	cbnz	r1, 63d6 <nrfx_twim_xfer+0x172>
    63cc:	2a00      	cmp	r2, #0
    63ce:	f000 80bb 	beq.w	6548 <nrfx_twim_xfer+0x2e4>
    63d2:	2201      	movs	r2, #1
    63d4:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    63d6:	2228      	movs	r2, #40	; 0x28
    63d8:	fb02 f209 	mul.w	r2, r2, r9
    63dc:	18a9      	adds	r1, r5, r2
    63de:	58aa      	ldr	r2, [r5, r2]
    63e0:	2a00      	cmp	r2, #0
    63e2:	f000 80b1 	beq.w	6548 <nrfx_twim_xfer+0x2e4>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    63e6:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = 0;
    63ea:	bf1c      	itt	ne
    63ec:	2200      	movne	r2, #0
    63ee:	608a      	strne	r2, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    63f0:	f018 0f40 	tst.w	r8, #64	; 0x40
    63f4:	d106      	bne.n	6404 <nrfx_twim_xfer+0x1a0>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    63f6:	2228      	movs	r2, #40	; 0x28
    63f8:	fb02 5209 	mla	r2, r2, r9, r5
    63fc:	6891      	ldr	r1, [r2, #8]
    63fe:	f041 0102 	orr.w	r1, r1, #2
    6402:	6091      	str	r1, [r2, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    6404:	2228      	movs	r2, #40	; 0x28
    6406:	fb02 5209 	mla	r2, r2, r9, r5
    640a:	6891      	ldr	r1, [r2, #8]
    640c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    6410:	6091      	str	r1, [r2, #8]
        nrfy_twim_int_enable(p_twim, p_cb->int_mask);
    6412:	6892      	ldr	r2, [r2, #8]
    p_reg->INTENSET = mask;
    6414:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
NRFY_STATIC_INLINE void nrfy_twim_int_enable(NRF_TWIM_Type * p_reg,
                                             uint32_t        mask)
{
    nrf_twim_int_enable(p_reg, mask);
    nrf_barrier_w();
}
    6418:	e756      	b.n	62c8 <nrfx_twim_xfer+0x64>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    641a:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
    641e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6422:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6426:	e9d7 2305 	ldrd	r2, r3, [r7, #20]
    642a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    642e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    6432:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    6436:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    643a:	2301      	movs	r3, #1
    643c:	6223      	str	r3, [r4, #32]
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    643e:	2328      	movs	r3, #40	; 0x28
    6440:	fb03 5309 	mla	r3, r3, r9, r5
    6444:	2202      	movs	r2, #2
    6446:	e7a6      	b.n	6396 <nrfx_twim_xfer+0x132>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6448:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
            if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    644c:	f018 0f20 	tst.w	r8, #32
    6450:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6454:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    6458:	f04f 0328 	mov.w	r3, #40	; 0x28
    p_reg->SHORTS = mask;
    645c:	bf15      	itete	ne
    645e:	f44f 7280 	movne.w	r2, #256	; 0x100
    6462:	f44f 7200 	moveq.w	r2, #512	; 0x200
                p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    6466:	fb03 5309 	mlane	r3, r3, r9, r5
                p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    646a:	fb03 5309 	mlaeq	r3, r3, r9, r5
    646e:	bf15      	itete	ne
    6470:	f8c4 2200 	strne.w	r2, [r4, #512]	; 0x200
    6474:	f8c4 2200 	streq.w	r2, [r4, #512]	; 0x200
                p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    6478:	f44f 2280 	movne.w	r2, #262144	; 0x40000
                p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    647c:	2202      	moveq	r2, #2
    647e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6480:	2301      	movs	r3, #1
    6482:	6223      	str	r3, [r4, #32]
}
    6484:	e788      	b.n	6398 <nrfx_twim_xfer+0x134>
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6486:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
    648a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    648e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    6492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    6496:	e7ce      	b.n	6436 <nrfx_twim_xfer+0x1d2>
    switch (p_xfer_desc->type)
    6498:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 653c <nrfx_twim_xfer+0x2d8>
    649c:	e77e      	b.n	639c <nrfx_twim_xfer+0x138>
        if (p_xfer->length == 0)
    649e:	6902      	ldr	r2, [r0, #16]
    64a0:	b902      	cbnz	r2, 64a4 <nrfx_twim_xfer+0x240>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64a2:	6161      	str	r1, [r4, #20]
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    64a4:	4926      	ldr	r1, [pc, #152]	; (6540 <nrfx_twim_xfer+0x2dc>)
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
    64a6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 6544 <nrfx_twim_xfer+0x2e0>
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    64aa:	4620      	mov	r0, r4
    64ac:	f003 fb95 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
    64b0:	2201      	movs	r2, #1
    64b2:	f410 7f00 	tst.w	r0, #512	; 0x200
    64b6:	bf18      	it	ne
    64b8:	6162      	strne	r2, [r4, #20]
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
    64ba:	ea10 0f0a 	tst.w	r0, sl
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
    64be:	4920      	ldr	r1, [pc, #128]	; (6540 <nrfx_twim_xfer+0x2dc>)
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
    64c0:	d0f3      	beq.n	64aa <nrfx_twim_xfer+0x246>
    64c2:	e77d      	b.n	63c0 <nrfx_twim_xfer+0x15c>
            nrfy_twim_tx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
    64c4:	2101      	movs	r1, #1
    64c6:	60a1      	str	r1, [r4, #8]
    64c8:	2b00      	cmp	r3, #0
    64ca:	f47f af79 	bne.w	63c0 <nrfx_twim_xfer+0x15c>
        if (p_xfer->length == 0)
    64ce:	6900      	ldr	r0, [r0, #16]
    64d0:	b318      	cbz	r0, 651a <nrfx_twim_xfer+0x2b6>
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
    64d2:	4b1c      	ldr	r3, [pc, #112]	; (6544 <nrfx_twim_xfer+0x2e0>)
    64d4:	ea1a 0f03 	tst.w	sl, r3
    64d8:	f47f af72 	bne.w	63c0 <nrfx_twim_xfer+0x15c>
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    64dc:	4918      	ldr	r1, [pc, #96]	; (6540 <nrfx_twim_xfer+0x2dc>)
    64de:	4620      	mov	r0, r4
    64e0:	f003 fb7b 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
    64e4:	f410 7f00 	tst.w	r0, #512	; 0x200
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    64e8:	4682      	mov	sl, r0
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
    64ea:	d0f2      	beq.n	64d2 <nrfx_twim_xfer+0x26e>
                bool lasttx_triggered = __nrfy_internal_twim_events_process(p_reg,
    64ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    64f0:	4620      	mov	r0, r4
    64f2:	f003 fb72 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
    return p_reg->SHORTS;
    64f6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    64fa:	b180      	cbz	r0, 651e <nrfx_twim_xfer+0x2ba>
    64fc:	f411 7000 	ands.w	r0, r1, #512	; 0x200
    6500:	d103      	bne.n	650a <nrfx_twim_xfer+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6502:	2201      	movs	r2, #1
    6504:	6222      	str	r2, [r4, #32]
                    evt_mask = 0;
    6506:	4682      	mov	sl, r0
    6508:	6162      	str	r2, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    650a:	05cb      	lsls	r3, r1, #23
    650c:	d5e1      	bpl.n	64d2 <nrfx_twim_xfer+0x26e>
                    (void)__nrfy_internal_twim_events_process(p_reg,
    650e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    6512:	4620      	mov	r0, r4
    6514:	f003 fb61 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
                    evt_mask = 0;
    6518:	e004      	b.n	6524 <nrfx_twim_xfer+0x2c0>
    651a:	6161      	str	r1, [r4, #20]
}
    651c:	e7d9      	b.n	64d2 <nrfx_twim_xfer+0x26e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    651e:	2201      	movs	r2, #1
    6520:	6222      	str	r2, [r4, #32]
    6522:	6162      	str	r2, [r4, #20]
                    evt_mask = 0;
    6524:	f04f 0a00 	mov.w	sl, #0
    6528:	e7d3      	b.n	64d2 <nrfx_twim_xfer+0x26e>
    652a:	bf00      	nop
    652c:	200012b0 	.word	0x200012b0
    6530:	019c0202 	.word	0x019c0202
    6534:	0bad000b 	.word	0x0bad000b
    6538:	0bad0000 	.word	0x0bad0000
    653c:	0bad0004 	.word	0x0bad0004
    6540:	00040202 	.word	0x00040202
    6544:	00040002 	.word	0x00040002
        p_cb->busy = false;
    6548:	2128      	movs	r1, #40	; 0x28
    uint32_t error_source = p_reg->ERRORSRC;
    654a:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    654e:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    6552:	fb01 5509 	mla	r5, r1, r9, r5
    6556:	2100      	movs	r1, #0
    6558:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
        if (errorsrc)
    655c:	b18a      	cbz	r2, 6582 <nrfx_twim_xfer+0x31e>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    655e:	4911      	ldr	r1, [pc, #68]	; (65a4 <nrfx_twim_xfer+0x340>)
    6560:	4b11      	ldr	r3, [pc, #68]	; (65a8 <nrfx_twim_xfer+0x344>)
    6562:	f012 0f01 	tst.w	r2, #1
    6566:	bf14      	ite	ne
    6568:	468b      	movne	fp, r1
    656a:	469b      	moveq	fp, r3
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    656c:	3101      	adds	r1, #1
    656e:	f012 0f02 	tst.w	r2, #2
    6572:	bf18      	it	ne
    6574:	468b      	movne	fp, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6576:	f012 0f04 	tst.w	r2, #4
    657a:	4a0c      	ldr	r2, [pc, #48]	; (65ac <nrfx_twim_xfer+0x348>)
    657c:	bf18      	it	ne
    657e:	4693      	movne	fp, r2
    6580:	e6a2      	b.n	62c8 <nrfx_twim_xfer+0x64>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    6582:	f018 0f40 	tst.w	r8, #64	; 0x40
    6586:	f47f ae9f 	bne.w	62c8 <nrfx_twim_xfer+0x64>
                !xfer_completeness_check(p_twim, p_cb))
    658a:	4639      	mov	r1, r7
    658c:	4620      	mov	r0, r4
    658e:	f003 fae2 	bl	9b56 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    6592:	4a05      	ldr	r2, [pc, #20]	; (65a8 <nrfx_twim_xfer+0x344>)
    6594:	2800      	cmp	r0, #0
    6596:	bf08      	it	eq
    6598:	4693      	moveq	fp, r2
    659a:	e695      	b.n	62c8 <nrfx_twim_xfer+0x64>
        return err_code;
    659c:	f8df b010 	ldr.w	fp, [pc, #16]	; 65b0 <nrfx_twim_xfer+0x34c>
    65a0:	e692      	b.n	62c8 <nrfx_twim_xfer+0x64>
    65a2:	bf00      	nop
    65a4:	0bae0000 	.word	0x0bae0000
    65a8:	0bad0001 	.word	0x0bad0001
    65ac:	0bae0002 	.word	0x0bae0002
    65b0:	0bad000a 	.word	0x0bad000a

000065b4 <nrfx_twim_0_irq_handler>:
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}

NRFX_INSTANCE_IRQ_HANDLERS(TWIM, twim)
    65b4:	b570      	push	{r4, r5, r6, lr}
    uint32_t evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
    65b6:	4d5c      	ldr	r5, [pc, #368]	; (6728 <nrfx_twim_0_irq_handler+0x174>)
    65b8:	4c5c      	ldr	r4, [pc, #368]	; (672c <nrfx_twim_0_irq_handler+0x178>)
    65ba:	b086      	sub	sp, #24
    65bc:	2102      	movs	r1, #2
    65be:	4628      	mov	r0, r5
    65c0:	f003 fb0b 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
    65c4:	f44f 7100 	mov.w	r1, #512	; 0x200
    65c8:	4606      	mov	r6, r0
    65ca:	4628      	mov	r0, r5
    65cc:	f003 fb05 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
    if (nrfy_twim_events_process(p_twim,
    65d0:	b1d8      	cbz	r0, 660a <nrfx_twim_0_irq_handler+0x56>
        if (!stopped)
    65d2:	b9e6      	cbnz	r6, 660e <nrfx_twim_0_irq_handler+0x5a>
            nrfy_twim_int_disable(p_twim, p_cb->int_mask);
    65d4:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    65d6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    65da:	2302      	movs	r3, #2
    65dc:	60a3      	str	r3, [r4, #8]
            nrfy_twim_int_enable(p_twim, p_cb->int_mask);
    65de:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    65e0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    65e4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    65e8:	4628      	mov	r0, r5
    65ea:	f003 faf6 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
            if (!(nrfy_twim_events_process(p_twim,
    65ee:	b118      	cbz	r0, 65f8 <nrfx_twim_0_irq_handler+0x44>
    return p_reg->SHORTS;
    65f0:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    65f4:	059b      	lsls	r3, r3, #22
    65f6:	d403      	bmi.n	6600 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65f8:	4b4b      	ldr	r3, [pc, #300]	; (6728 <nrfx_twim_0_irq_handler+0x174>)
    65fa:	2201      	movs	r2, #1
    65fc:	621a      	str	r2, [r3, #32]
    65fe:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    6600:	2301      	movs	r3, #1
    6602:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
NRFX_INSTANCE_IRQ_HANDLERS(TWIM, twim)
    6606:	b006      	add	sp, #24
    6608:	bd70      	pop	{r4, r5, r6, pc}
    if (stopped)
    660a:	2e00      	cmp	r6, #0
    660c:	d057      	beq.n	66be <nrfx_twim_0_irq_handler+0x10a>
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    660e:	69e5      	ldr	r5, [r4, #28]
    6610:	066e      	lsls	r6, r5, #25
    6612:	d40a      	bmi.n	662a <nrfx_twim_0_irq_handler+0x76>
    6614:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    6618:	b93b      	cbnz	r3, 662a <nrfx_twim_0_irq_handler+0x76>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    661a:	4944      	ldr	r1, [pc, #272]	; (672c <nrfx_twim_0_irq_handler+0x178>)
    661c:	4842      	ldr	r0, [pc, #264]	; (6728 <nrfx_twim_0_irq_handler+0x174>)
    661e:	f003 fa9a 	bl	9b56 <xfer_completeness_check>
    6622:	f080 0001 	eor.w	r0, r0, #1
    6626:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    662a:	f015 0504 	ands.w	r5, r5, #4
    662e:	d124      	bne.n	667a <nrfx_twim_0_irq_handler+0xc6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6630:	4b3d      	ldr	r3, [pc, #244]	; (6728 <nrfx_twim_0_irq_handler+0x174>)
    if (!p_cb->repeated)
    6632:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    6636:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
    663a:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
    663e:	f8c3 515c 	str.w	r5, [r3, #348]	; 0x15c
    6642:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    6646:	b112      	cbz	r2, 664e <nrfx_twim_0_irq_handler+0x9a>
    6648:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    664c:	b152      	cbz	r2, 6664 <nrfx_twim_0_irq_handler+0xb0>
    p_reg->SHORTS = mask;
    664e:	2200      	movs	r2, #0
    6650:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    6654:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    6656:	4a36      	ldr	r2, [pc, #216]	; (6730 <nrfx_twim_0_irq_handler+0x17c>)
    6658:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    665c:	4b35      	ldr	r3, [pc, #212]	; (6734 <nrfx_twim_0_irq_handler+0x180>)
    665e:	2208      	movs	r2, #8
    6660:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            event.xfer_desc.type    = p_cb->xfer_type;
    6664:	8c23      	ldrh	r3, [r4, #32]
    6666:	f8ad 3004 	strh.w	r3, [sp, #4]
            event.xfer_desc.p_primary_buf    = p_cb->xfer_desc_primary.p_buffer;
    666a:	68e3      	ldr	r3, [r4, #12]
    666c:	9304      	str	r3, [sp, #16]
            event.xfer_desc.primary_length   = p_cb->xfer_desc_primary.length;
    666e:	6923      	ldr	r3, [r4, #16]
    6670:	9302      	str	r3, [sp, #8]
            event.xfer_desc.p_secondary_buf  = p_cb->xfer_desc_secondary.p_buffer;
    6672:	6963      	ldr	r3, [r4, #20]
    6674:	9305      	str	r3, [sp, #20]
            event.xfer_desc.secondary_length = p_cb->xfer_desc_secondary.length;
    6676:	69a3      	ldr	r3, [r4, #24]
    6678:	9303      	str	r3, [sp, #12]
    uint32_t error_source = p_reg->ERRORSRC;
    667a:	4a2b      	ldr	r2, [pc, #172]	; (6728 <nrfx_twim_0_irq_handler+0x174>)
    667c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    6680:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    6684:	0798      	lsls	r0, r3, #30
    6686:	d449      	bmi.n	671c <nrfx_twim_0_irq_handler+0x168>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    6688:	0759      	lsls	r1, r3, #29
    668a:	d449      	bmi.n	6720 <nrfx_twim_0_irq_handler+0x16c>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    668c:	07da      	lsls	r2, r3, #31
    668e:	d449      	bmi.n	6724 <nrfx_twim_0_irq_handler+0x170>
    else if (p_cb->error)
    6690:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    6694:	009b      	lsls	r3, r3, #2
    6696:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    6698:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    669c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    66a0:	b90b      	cbnz	r3, 66a6 <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    66a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    66a6:	69e3      	ldr	r3, [r4, #28]
    66a8:	075b      	lsls	r3, r3, #29
    66aa:	d503      	bpl.n	66b4 <nrfx_twim_0_irq_handler+0x100>
    66ac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    66b0:	2b00      	cmp	r3, #0
    66b2:	d0a8      	beq.n	6606 <nrfx_twim_0_irq_handler+0x52>
        p_cb->handler(&event, p_cb->p_context);
    66b4:	e9d4 3100 	ldrd	r3, r1, [r4]
    66b8:	4668      	mov	r0, sp
    66ba:	4798      	blx	r3
NRFX_INSTANCE_IRQ_HANDLERS(TWIM, twim)
    66bc:	e7a3      	b.n	6606 <nrfx_twim_0_irq_handler+0x52>
    66be:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    66c2:	4628      	mov	r0, r5
    66c4:	f003 fa89 	bl	9bda <__nrfy_internal_twim_events_process.constprop.0>
        if (p_cb->xfer_type == NRFX_TWIM_XFER_TX)
    66c8:	f894 3020 	ldrb.w	r3, [r4, #32]
    66cc:	b9a3      	cbnz	r3, 66f8 <nrfx_twim_0_irq_handler+0x144>
            if (!p_cb->repeated)
    66ce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    66d2:	b94b      	cbnz	r3, 66e8 <nrfx_twim_0_irq_handler+0x134>
    p_reg->SHORTS = mask;
    66d4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    66d8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    66da:	4b15      	ldr	r3, [pc, #84]	; (6730 <nrfx_twim_0_irq_handler+0x17c>)
    66dc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    66e0:	4b14      	ldr	r3, [pc, #80]	; (6734 <nrfx_twim_0_irq_handler+0x180>)
    66e2:	2208      	movs	r2, #8
    66e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            event.xfer_desc.type    = p_cb->xfer_type;
    66e8:	2300      	movs	r3, #0
    66ea:	f88d 3004 	strb.w	r3, [sp, #4]
            event.xfer_desc.address = p_cb->address;
    66ee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    66f2:	f88d 3005 	strb.w	r3, [sp, #5]
    66f6:	e7b8      	b.n	666a <nrfx_twim_0_irq_handler+0xb6>
    p_reg->SHORTS = mask;
    66f8:	f44f 7300 	mov.w	r3, #512	; 0x200
    66fc:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    6700:	f240 2302 	movw	r3, #514	; 0x202
    6704:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    6706:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    670a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrfy_twim_int_enable(p_twim, p_cb->int_mask);
    670e:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    6710:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6714:	2301      	movs	r3, #1
    6716:	60ab      	str	r3, [r5, #8]
    6718:	622b      	str	r3, [r5, #32]
            return;
    671a:	e774      	b.n	6606 <nrfx_twim_0_irq_handler+0x52>
    671c:	2301      	movs	r3, #1
    671e:	e7bb      	b.n	6698 <nrfx_twim_0_irq_handler+0xe4>
    6720:	2302      	movs	r3, #2
    6722:	e7b9      	b.n	6698 <nrfx_twim_0_irq_handler+0xe4>
    6724:	2303      	movs	r3, #3
    6726:	e7b7      	b.n	6698 <nrfx_twim_0_irq_handler+0xe4>
    6728:	40003000 	.word	0x40003000
    672c:	200012b0 	.word	0x200012b0
    6730:	019c0202 	.word	0x019c0202
    6734:	e000e100 	.word	0xe000e100

00006738 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6738:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    673c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6740:	2a08      	cmp	r2, #8
    6742:	d106      	bne.n	6752 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6744:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6748:	2b05      	cmp	r3, #5
    674a:	d804      	bhi.n	6756 <nrf52_errata_187+0x1e>
    674c:	4a03      	ldr	r2, [pc, #12]	; (675c <nrf52_errata_187+0x24>)
    674e:	5cd0      	ldrb	r0, [r2, r3]
    6750:	4770      	bx	lr
                        return false;
    6752:	2000      	movs	r0, #0
    6754:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6756:	2001      	movs	r0, #1
}
    6758:	4770      	bx	lr
    675a:	bf00      	nop
    675c:	0000abca 	.word	0x0000abca

00006760 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    6760:	4b05      	ldr	r3, [pc, #20]	; (6778 <ep_state_access+0x18>)
    6762:	f010 0f80 	tst.w	r0, #128	; 0x80
    6766:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    676a:	bf08      	it	eq
    676c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    676e:	f000 000f 	and.w	r0, r0, #15
}
    6772:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    6776:	4770      	bx	lr
    6778:	20001480 	.word	0x20001480

0000677c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    677c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    677e:	4a07      	ldr	r2, [pc, #28]	; (679c <ev_usbreset_handler+0x20>)
    6780:	2300      	movs	r3, #0
    6782:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6784:	4a06      	ldr	r2, [pc, #24]	; (67a0 <ev_usbreset_handler+0x24>)
    6786:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    6788:	2301      	movs	r3, #1
    678a:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    678c:	4b05      	ldr	r3, [pc, #20]	; (67a4 <ev_usbreset_handler+0x28>)
    678e:	a801      	add	r0, sp, #4
    6790:	681b      	ldr	r3, [r3, #0]
    6792:	4798      	blx	r3
}
    6794:	b003      	add	sp, #12
    6796:	f85d fb04 	ldr.w	pc, [sp], #4
    679a:	bf00      	nop
    679c:	20001585 	.word	0x20001585
    67a0:	20001584 	.word	0x20001584
    67a4:	20001518 	.word	0x20001518

000067a8 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    67a8:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    67aa:	4b19      	ldr	r3, [pc, #100]	; (6810 <ev_usbevent_handler+0x68>)
    67ac:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    67b0:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    67b4:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    67b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    67ba:	d508      	bpl.n	67ce <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    67bc:	4b15      	ldr	r3, [pc, #84]	; (6814 <ev_usbevent_handler+0x6c>)
    67be:	2201      	movs	r2, #1
    67c0:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    67c2:	2302      	movs	r3, #2
    67c4:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    67c6:	4b14      	ldr	r3, [pc, #80]	; (6818 <ev_usbevent_handler+0x70>)
    67c8:	a801      	add	r0, sp, #4
    67ca:	681b      	ldr	r3, [r3, #0]
    67cc:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    67ce:	05a2      	lsls	r2, r4, #22
    67d0:	d508      	bpl.n	67e4 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    67d2:	4b10      	ldr	r3, [pc, #64]	; (6814 <ev_usbevent_handler+0x6c>)
    67d4:	2200      	movs	r2, #0
    67d6:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    67d8:	2303      	movs	r3, #3
    67da:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    67dc:	4b0e      	ldr	r3, [pc, #56]	; (6818 <ev_usbevent_handler+0x70>)
    67de:	a801      	add	r0, sp, #4
    67e0:	681b      	ldr	r3, [r3, #0]
    67e2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    67e4:	0563      	lsls	r3, r4, #21
    67e6:	d510      	bpl.n	680a <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <ev_usbevent_handler+0x6c>)
    67ea:	781a      	ldrb	r2, [r3, #0]
    67ec:	b16a      	cbz	r2, 680a <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    67ee:	2200      	movs	r2, #0
    67f0:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    67f2:	4b07      	ldr	r3, [pc, #28]	; (6810 <ev_usbevent_handler+0x68>)
    67f4:	2201      	movs	r2, #1
    67f6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    67fa:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    67fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    67fe:	2304      	movs	r3, #4
    6800:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    6802:	4b05      	ldr	r3, [pc, #20]	; (6818 <ev_usbevent_handler+0x70>)
    6804:	a801      	add	r0, sp, #4
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	4798      	blx	r3
        }
    }
}
    680a:	b002      	add	sp, #8
    680c:	bd10      	pop	{r4, pc}
    680e:	bf00      	nop
    6810:	40027000 	.word	0x40027000
    6814:	20001585 	.word	0x20001585
    6818:	20001518 	.word	0x20001518

0000681c <usbd_errata_187_211_begin>:
	__asm__ volatile(
    681c:	f04f 0320 	mov.w	r3, #32
    6820:	f3ef 8011 	mrs	r0, BASEPRI
    6824:	f383 8812 	msr	BASEPRI_MAX, r3
    6828:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    682c:	4b0a      	ldr	r3, [pc, #40]	; (6858 <usbd_errata_187_211_begin+0x3c>)
    682e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6832:	2203      	movs	r2, #3
    6834:	b961      	cbnz	r1, 6850 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6836:	f249 3175 	movw	r1, #37749	; 0x9375
    683a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    683e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6842:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6846:	f380 8811 	msr	BASEPRI, r0
    684a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    684e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    6850:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6854:	e7f7      	b.n	6846 <usbd_errata_187_211_begin+0x2a>
    6856:	bf00      	nop
    6858:	4006e000 	.word	0x4006e000

0000685c <usbd_errata_187_211_end>:
	__asm__ volatile(
    685c:	f04f 0320 	mov.w	r3, #32
    6860:	f3ef 8011 	mrs	r0, BASEPRI
    6864:	f383 8812 	msr	BASEPRI_MAX, r3
    6868:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    686c:	4b0a      	ldr	r3, [pc, #40]	; (6898 <usbd_errata_187_211_end+0x3c>)
    686e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6872:	b961      	cbnz	r1, 688e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6874:	f249 3275 	movw	r2, #37749	; 0x9375
    6878:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    687c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6880:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6884:	f380 8811 	msr	BASEPRI, r0
    6888:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    688c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    688e:	2200      	movs	r2, #0
    6890:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    6894:	e7f6      	b.n	6884 <usbd_errata_187_211_end+0x28>
    6896:	bf00      	nop
    6898:	4006e000 	.word	0x4006e000

0000689c <nrfx_usbd_feeder_flash>:
{
    689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    689e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    68a0:	4f0b      	ldr	r7, [pc, #44]	; (68d0 <nrfx_usbd_feeder_flash+0x34>)
    68a2:	429a      	cmp	r2, r3
    68a4:	bf28      	it	cs
    68a6:	461a      	movcs	r2, r3
{
    68a8:	460c      	mov	r4, r1
    68aa:	4615      	mov	r5, r2
    68ac:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    68ae:	6809      	ldr	r1, [r1, #0]
    68b0:	4638      	mov	r0, r7
    68b2:	f002 fe86 	bl	95c2 <memcpy>
    p_next->size = tx_size;
    68b6:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    68ba:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    68bc:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    68be:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    68c0:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    68c2:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    68c4:	6023      	str	r3, [r4, #0]
}
    68c6:	3800      	subs	r0, #0
    68c8:	bf18      	it	ne
    68ca:	2001      	movne	r0, #1
    68cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68ce:	bf00      	nop
    68d0:	200012d8 	.word	0x200012d8

000068d4 <nrfx_usbd_feeder_flash_zlp>:
{
    68d4:	b570      	push	{r4, r5, r6, lr}
    68d6:	684b      	ldr	r3, [r1, #4]
    68d8:	429a      	cmp	r2, r3
    68da:	bf28      	it	cs
    68dc:	461a      	movcs	r2, r3
    68de:	4606      	mov	r6, r0
    68e0:	460d      	mov	r5, r1
    68e2:	4614      	mov	r4, r2
    if (tx_size != 0)
    68e4:	b182      	cbz	r2, 6908 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    68e6:	6809      	ldr	r1, [r1, #0]
    68e8:	4808      	ldr	r0, [pc, #32]	; (690c <nrfx_usbd_feeder_flash_zlp+0x38>)
    68ea:	f002 fe6a 	bl	95c2 <memcpy>
        p_next->p_data.tx = p_buffer;
    68ee:	4b07      	ldr	r3, [pc, #28]	; (690c <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    68f0:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    68f4:	686b      	ldr	r3, [r5, #4]
    68f6:	1b1b      	subs	r3, r3, r4
    68f8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    68fa:	682b      	ldr	r3, [r5, #0]
    68fc:	4423      	add	r3, r4
}
    68fe:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    6900:	602b      	str	r3, [r5, #0]
}
    6902:	bf18      	it	ne
    6904:	2001      	movne	r0, #1
    6906:	bd70      	pop	{r4, r5, r6, pc}
    6908:	4613      	mov	r3, r2
    690a:	e7f1      	b.n	68f0 <nrfx_usbd_feeder_flash_zlp+0x1c>
    690c:	200012d8 	.word	0x200012d8

00006910 <ev_sof_handler>:
{
    6910:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    6912:	2300      	movs	r3, #0
    6914:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    6918:	4b0b      	ldr	r3, [pc, #44]	; (6948 <ev_sof_handler+0x38>)
    691a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    691e:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    6922:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    6926:	4a09      	ldr	r2, [pc, #36]	; (694c <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    6928:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    692a:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    692c:	bf14      	ite	ne
    692e:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    6932:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    6936:	430b      	orrs	r3, r1
    6938:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    693a:	4b05      	ldr	r3, [pc, #20]	; (6950 <ev_sof_handler+0x40>)
    693c:	a801      	add	r0, sp, #4
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	4798      	blx	r3
}
    6942:	b003      	add	sp, #12
    6944:	f85d fb04 	ldr.w	pc, [sp], #4
    6948:	40027000 	.word	0x40027000
    694c:	20001514 	.word	0x20001514
    6950:	20001518 	.word	0x20001518

00006954 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6954:	4b06      	ldr	r3, [pc, #24]	; (6970 <atomic_and.constprop.0.isra.0+0x1c>)
    6956:	f3bf 8f5b 	dmb	ish
    695a:	e853 1f00 	ldrex	r1, [r3]
    695e:	4001      	ands	r1, r0
    6960:	e843 1200 	strex	r2, r1, [r3]
    6964:	2a00      	cmp	r2, #0
    6966:	d1f8      	bne.n	695a <atomic_and.constprop.0.isra.0+0x6>
    6968:	f3bf 8f5b 	dmb	ish
}
    696c:	4770      	bx	lr
    696e:	bf00      	nop
    6970:	20001510 	.word	0x20001510

00006974 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6978:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    697c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    697e:	bf02      	ittt	eq
    6980:	4b03      	ldreq	r3, [pc, #12]	; (6990 <usbd_dma_pending_clear+0x1c>)
    6982:	2200      	moveq	r2, #0
    6984:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    6988:	4b02      	ldr	r3, [pc, #8]	; (6994 <usbd_dma_pending_clear+0x20>)
    698a:	2200      	movs	r2, #0
    698c:	701a      	strb	r2, [r3, #0]
}
    698e:	4770      	bx	lr
    6990:	40027000 	.word	0x40027000
    6994:	20001583 	.word	0x20001583

00006998 <nrf_usbd_ep0in_dma_handler>:
{
    6998:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    699a:	f7ff ffeb 	bl	6974 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    699e:	4b08      	ldr	r3, [pc, #32]	; (69c0 <nrf_usbd_ep0in_dma_handler+0x28>)
    69a0:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    69a4:	2a03      	cmp	r2, #3
    69a6:	d105      	bne.n	69b4 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    69a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    69ac:	f06f 0001 	mvn.w	r0, #1
    69b0:	f7ff bfd0 	b.w	6954 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    69b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    69b8:	2b00      	cmp	r3, #0
    69ba:	d0f5      	beq.n	69a8 <nrf_usbd_ep0in_dma_handler+0x10>
}
    69bc:	bd08      	pop	{r3, pc}
    69be:	bf00      	nop
    69c0:	200013f0 	.word	0x200013f0

000069c4 <usbd_ep_data_handler>:
{
    69c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    69c6:	2201      	movs	r2, #1
    69c8:	fa02 f501 	lsl.w	r5, r2, r1
    69cc:	491c      	ldr	r1, [pc, #112]	; (6a40 <usbd_ep_data_handler+0x7c>)
    69ce:	4e1d      	ldr	r6, [pc, #116]	; (6a44 <usbd_ep_data_handler+0x80>)
    69d0:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    69d2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    69d6:	ea43 0305 	orr.w	r3, r3, r5
{
    69da:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    69dc:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    69de:	d024      	beq.n	6a2a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    69e0:	f000 020f 	and.w	r2, r0, #15
    69e4:	4b18      	ldr	r3, [pc, #96]	; (6a48 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    69e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    69ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69ee:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    69f2:	681a      	ldr	r2, [r3, #0]
    if (ret)
    69f4:	b132      	cbz	r2, 6a04 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    69f6:	2200      	movs	r2, #0
    69f8:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    69fa:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    69fc:	681b      	ldr	r3, [r3, #0]
    69fe:	d011      	beq.n	6a24 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    6a00:	f003 f95c 	bl	9cbc <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6a04:	6833      	ldr	r3, [r6, #0]
    6a06:	402b      	ands	r3, r5
    6a08:	d10a      	bne.n	6a20 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6a0a:	2206      	movs	r2, #6
    6a0c:	f88d 2004 	strb.w	r2, [sp, #4]
    6a10:	f88d 4006 	strb.w	r4, [sp, #6]
    6a14:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    6a18:	4b0c      	ldr	r3, [pc, #48]	; (6a4c <usbd_ep_data_handler+0x88>)
    6a1a:	a801      	add	r0, sp, #4
    6a1c:	681b      	ldr	r3, [r3, #0]
    6a1e:	4798      	blx	r3
}
    6a20:	b002      	add	sp, #8
    6a22:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    6a24:	f7ff ffb8 	bl	6998 <nrf_usbd_ep0in_dma_handler>
    6a28:	e7ec      	b.n	6a04 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    6a2a:	6833      	ldr	r3, [r6, #0]
    6a2c:	421d      	tst	r5, r3
    6a2e:	d1f7      	bne.n	6a20 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    6a30:	2306      	movs	r3, #6
    6a32:	f88d 3004 	strb.w	r3, [sp, #4]
    6a36:	f88d 0006 	strb.w	r0, [sp, #6]
    6a3a:	f88d 2007 	strb.w	r2, [sp, #7]
    6a3e:	e7eb      	b.n	6a18 <usbd_ep_data_handler+0x54>
    6a40:	20001514 	.word	0x20001514
    6a44:	20001510 	.word	0x20001510
    6a48:	0000a982 	.word	0x0000a982
    6a4c:	20001518 	.word	0x20001518

00006a50 <ev_setup_data_handler>:
{
    6a50:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6a52:	4b05      	ldr	r3, [pc, #20]	; (6a68 <ev_setup_data_handler+0x18>)
    6a54:	781a      	ldrb	r2, [r3, #0]
    6a56:	4610      	mov	r0, r2
    6a58:	f003 f927 	bl	9caa <ep2bit>
}
    6a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    6a60:	4601      	mov	r1, r0
    6a62:	4610      	mov	r0, r2
    6a64:	f7ff bfae 	b.w	69c4 <usbd_ep_data_handler>
    6a68:	20001584 	.word	0x20001584

00006a6c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6a6c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6a6e:	f7ff ff81 	bl	6974 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6a72:	4b0c      	ldr	r3, [pc, #48]	; (6aa4 <ev_dma_epout8_handler+0x38>)
    6a74:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    6a78:	2a03      	cmp	r2, #3
    6a7a:	d010      	beq.n	6a9e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    6a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    6a80:	b96b      	cbnz	r3, 6a9e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6a82:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    6a86:	f7ff ff65 	bl	6954 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6a8a:	2306      	movs	r3, #6
    6a8c:	f88d 3004 	strb.w	r3, [sp, #4]
    6a90:	2308      	movs	r3, #8
    6a92:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6a96:	4b04      	ldr	r3, [pc, #16]	; (6aa8 <ev_dma_epout8_handler+0x3c>)
    6a98:	a801      	add	r0, sp, #4
    6a9a:	681b      	ldr	r3, [r3, #0]
    6a9c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    6a9e:	b003      	add	sp, #12
    6aa0:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa4:	200013f0 	.word	0x200013f0
    6aa8:	20001518 	.word	0x20001518

00006aac <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6aac:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    6aae:	f7ff ff61 	bl	6974 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    6ab2:	4b10      	ldr	r3, [pc, #64]	; (6af4 <ev_dma_epin8_handler+0x48>)
    6ab4:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    6ab8:	2a03      	cmp	r2, #3
    6aba:	d106      	bne.n	6aca <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6abc:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6ac0:	b003      	add	sp, #12
    6ac2:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6ac6:	f7ff bf45 	b.w	6954 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    6aca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    6ace:	b96b      	cbnz	r3, 6aec <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    6ad0:	f46f 7080 	mvn.w	r0, #256	; 0x100
    6ad4:	f7ff ff3e 	bl	6954 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    6ad8:	2306      	movs	r3, #6
    6ada:	f88d 3004 	strb.w	r3, [sp, #4]
    6ade:	2388      	movs	r3, #136	; 0x88
    6ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    6ae4:	4b04      	ldr	r3, [pc, #16]	; (6af8 <ev_dma_epin8_handler+0x4c>)
    6ae6:	a801      	add	r0, sp, #4
    6ae8:	681b      	ldr	r3, [r3, #0]
    6aea:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    6aec:	b003      	add	sp, #12
    6aee:	f85d fb04 	ldr.w	pc, [sp], #4
    6af2:	bf00      	nop
    6af4:	200013f0 	.word	0x200013f0
    6af8:	20001518 	.word	0x20001518

00006afc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    6afc:	4a02      	ldr	r2, [pc, #8]	; (6b08 <nrfx_usbd_uninit+0xc>)
    6afe:	2300      	movs	r3, #0
    6b00:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    6b02:	4a02      	ldr	r2, [pc, #8]	; (6b0c <nrfx_usbd_uninit+0x10>)
    6b04:	7013      	strb	r3, [r2, #0]
    return;
}
    6b06:	4770      	bx	lr
    6b08:	20001518 	.word	0x20001518
    6b0c:	20001586 	.word	0x20001586

00006b10 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    6b10:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    6b12:	4b4c      	ldr	r3, [pc, #304]	; (6c44 <nrfx_usbd_enable+0x134>)
    6b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b18:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6b1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    6b20:	f7ff fe0a 	bl	6738 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6b24:	b108      	cbz	r0, 6b2a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    6b26:	f7ff fe79 	bl	681c <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6b2e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6b32:	2b08      	cmp	r3, #8
    6b34:	d119      	bne.n	6b6a <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    6b36:	f04f 0320 	mov.w	r3, #32
    6b3a:	f3ef 8011 	mrs	r0, BASEPRI
    6b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b42:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6b46:	4b40      	ldr	r3, [pc, #256]	; (6c48 <nrfx_usbd_enable+0x138>)
    6b48:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6b4c:	22c0      	movs	r2, #192	; 0xc0
    6b4e:	2900      	cmp	r1, #0
    6b50:	d170      	bne.n	6c34 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b52:	f249 3175 	movw	r1, #37749	; 0x9375
    6b56:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6b5a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6b5e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6b62:	f380 8811 	msr	BASEPRI, r0
    6b66:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    6b6a:	4b36      	ldr	r3, [pc, #216]	; (6c44 <nrfx_usbd_enable+0x134>)
    6b6c:	2201      	movs	r2, #1
    6b6e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    6b72:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    6b76:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    6b7a:	0512      	lsls	r2, r2, #20
    6b7c:	d5fb      	bpl.n	6b76 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    6b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6b82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    6b86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6b8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6b8e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6b92:	2b08      	cmp	r3, #8
    6b94:	d118      	bne.n	6bc8 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    6b96:	f04f 0320 	mov.w	r3, #32
    6b9a:	f3ef 8011 	mrs	r0, BASEPRI
    6b9e:	f383 8812 	msr	BASEPRI_MAX, r3
    6ba2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    6ba6:	4b28      	ldr	r3, [pc, #160]	; (6c48 <nrfx_usbd_enable+0x138>)
    6ba8:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    6bac:	2900      	cmp	r1, #0
    6bae:	d144      	bne.n	6c3a <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6bb0:	f249 3275 	movw	r2, #37749	; 0x9375
    6bb4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6bb8:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    6bbc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    6bc0:	f380 8811 	msr	BASEPRI, r0
    6bc4:	f3bf 8f6f 	isb	sy
    6bc8:	f7ff fdb6 	bl	6738 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    6bcc:	b130      	cbz	r0, 6bdc <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    6bce:	f7ff fe45 	bl	685c <usbd_errata_187_211_end>
    6bd2:	f7ff fdb1 	bl	6738 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6bd6:	b108      	cbz	r0, 6bdc <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    6bd8:	f7ff fe20 	bl	681c <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6be0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6be4:	2b08      	cmp	r3, #8
    6be6:	4b17      	ldr	r3, [pc, #92]	; (6c44 <nrfx_usbd_enable+0x134>)
    6be8:	d10a      	bne.n	6c00 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    6bea:	f240 72e3 	movw	r2, #2019	; 0x7e3
    6bee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    6bf2:	2240      	movs	r2, #64	; 0x40
    6bf4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    6bf8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6bfc:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6c00:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    6c02:	2280      	movs	r2, #128	; 0x80
    6c04:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    6c08:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    6c0c:	4b0f      	ldr	r3, [pc, #60]	; (6c4c <nrfx_usbd_enable+0x13c>)
    6c0e:	f240 12ff 	movw	r2, #511	; 0x1ff
    6c12:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    6c14:	4b0e      	ldr	r3, [pc, #56]	; (6c50 <nrfx_usbd_enable+0x140>)
    6c16:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    6c18:	f7ff feac 	bl	6974 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    6c1c:	4b0d      	ldr	r3, [pc, #52]	; (6c54 <nrfx_usbd_enable+0x144>)
    6c1e:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    6c20:	4b0d      	ldr	r3, [pc, #52]	; (6c58 <nrfx_usbd_enable+0x148>)
    6c22:	2202      	movs	r2, #2
    6c24:	701a      	strb	r2, [r3, #0]
    6c26:	f7ff fd87 	bl	6738 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    6c2a:	b150      	cbz	r0, 6c42 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    6c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    6c30:	f7ff be14 	b.w	685c <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    6c34:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6c38:	e793      	b.n	6b62 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    6c3a:	2200      	movs	r2, #0
    6c3c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    6c40:	e7be      	b.n	6bc0 <nrfx_usbd_enable+0xb0>
}
    6c42:	bd08      	pop	{r3, pc}
    6c44:	40027000 	.word	0x40027000
    6c48:	4006e000 	.word	0x4006e000
    6c4c:	20001514 	.word	0x20001514
    6c50:	20001510 	.word	0x20001510
    6c54:	20001584 	.word	0x20001584
    6c58:	20001586 	.word	0x20001586

00006c5c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    6c5c:	4b0a      	ldr	r3, [pc, #40]	; (6c88 <nrfx_usbd_start+0x2c>)
    6c5e:	2200      	movs	r2, #0
{
    6c60:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    6c62:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    6c64:	4a09      	ldr	r2, [pc, #36]	; (6c8c <nrfx_usbd_start+0x30>)
    6c66:	4b0a      	ldr	r3, [pc, #40]	; (6c90 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    6c68:	4c0a      	ldr	r4, [pc, #40]	; (6c94 <nrfx_usbd_start+0x38>)
    6c6a:	2800      	cmp	r0, #0
    6c6c:	bf08      	it	eq
    6c6e:	4613      	moveq	r3, r2
    6c70:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    6c74:	2027      	movs	r0, #39	; 0x27
    6c76:	f7fc fbfd 	bl	3474 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    6c7a:	2301      	movs	r3, #1
    6c7c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    6c80:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    6c84:	bd10      	pop	{r4, pc}
    6c86:	bf00      	nop
    6c88:	20001585 	.word	0x20001585
    6c8c:	01c01407 	.word	0x01c01407
    6c90:	01e01407 	.word	0x01e01407
    6c94:	40027000 	.word	0x40027000

00006c98 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    6c98:	4b03      	ldr	r3, [pc, #12]	; (6ca8 <nrfx_usbd_is_enabled+0x10>)
    6c9a:	7818      	ldrb	r0, [r3, #0]
}
    6c9c:	2801      	cmp	r0, #1
    6c9e:	bf94      	ite	ls
    6ca0:	2000      	movls	r0, #0
    6ca2:	2001      	movhi	r0, #1
    6ca4:	4770      	bx	lr
    6ca6:	bf00      	nop
    6ca8:	20001586 	.word	0x20001586

00006cac <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    6cac:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cae:	f04f 0320 	mov.w	r3, #32
    6cb2:	f3ef 8111 	mrs	r1, BASEPRI
    6cb6:	f383 8812 	msr	BASEPRI_MAX, r3
    6cba:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    6cbe:	4b0f      	ldr	r3, [pc, #60]	; (6cfc <nrfx_usbd_suspend+0x50>)
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6cc6:	b193      	cbz	r3, 6cee <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    6cc8:	4b0d      	ldr	r3, [pc, #52]	; (6d00 <nrfx_usbd_suspend+0x54>)
    6cca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    6cce:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    6cd2:	d10c      	bne.n	6cee <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    6cd4:	2401      	movs	r4, #1
    6cd6:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6cda:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    6cde:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    6ce2:	05a4      	lsls	r4, r4, #22
    6ce4:	d504      	bpl.n	6cf0 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    6ce6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    6cea:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    6cee:	2000      	movs	r0, #0
	__asm__ volatile(
    6cf0:	f381 8811 	msr	BASEPRI, r1
    6cf4:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    6cf8:	bd10      	pop	{r4, pc}
    6cfa:	bf00      	nop
    6cfc:	20001585 	.word	0x20001585
    6d00:	40027000 	.word	0x40027000

00006d04 <nrfx_usbd_init>:
{
    6d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    6d06:	4b1c      	ldr	r3, [pc, #112]	; (6d78 <nrfx_usbd_init+0x74>)
    6d08:	781c      	ldrb	r4, [r3, #0]
    6d0a:	bb94      	cbnz	r4, 6d72 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    6d0c:	4a1b      	ldr	r2, [pc, #108]	; (6d7c <nrfx_usbd_init+0x78>)
    6d0e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    6d10:	2201      	movs	r2, #1
    6d12:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d14:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    6d18:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6d1a:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d1e:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    6d22:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d24:	bf14      	ite	ne
    6d26:	4639      	movne	r1, r7
    6d28:	2140      	moveq	r1, #64	; 0x40
    6d2a:	4628      	mov	r0, r5
    6d2c:	f002 fff5 	bl	9d1a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6d30:	4628      	mov	r0, r5
    6d32:	f7ff fd15 	bl	6760 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6d36:	3401      	adds	r4, #1
    6d38:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    6d3a:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    6d3c:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    6d3e:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    6d40:	d1eb      	bne.n	6d1a <nrfx_usbd_init+0x16>
    6d42:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d44:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    6d48:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    6d4a:	f014 0f08 	tst.w	r4, #8
    6d4e:	b2e6      	uxtb	r6, r4
    6d50:	bf14      	ite	ne
    6d52:	4639      	movne	r1, r7
    6d54:	2140      	moveq	r1, #64	; 0x40
    6d56:	4630      	mov	r0, r6
    6d58:	f002 ffdf 	bl	9d1a <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    6d5c:	4630      	mov	r0, r6
    6d5e:	f7ff fcff 	bl	6760 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6d62:	3401      	adds	r4, #1
    6d64:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    6d66:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    6d68:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    6d6a:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    6d6c:	d1ed      	bne.n	6d4a <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    6d6e:	4804      	ldr	r0, [pc, #16]	; (6d80 <nrfx_usbd_init+0x7c>)
}
    6d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    6d72:	4804      	ldr	r0, [pc, #16]	; (6d84 <nrfx_usbd_init+0x80>)
    6d74:	e7fc      	b.n	6d70 <nrfx_usbd_init+0x6c>
    6d76:	bf00      	nop
    6d78:	20001586 	.word	0x20001586
    6d7c:	20001518 	.word	0x20001518
    6d80:	0bad0000 	.word	0x0bad0000
    6d84:	0bad0005 	.word	0x0bad0005

00006d88 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    6d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d8c:	4604      	mov	r4, r0
	__asm__ volatile(
    6d8e:	f04f 0320 	mov.w	r3, #32
    6d92:	f3ef 8611 	mrs	r6, BASEPRI
    6d96:	f383 8812 	msr	BASEPRI_MAX, r3
    6d9a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    6d9e:	f010 090f 	ands.w	r9, r0, #15
    6da2:	d103      	bne.n	6dac <nrfx_usbd_ep_transfer+0x24>
    6da4:	4b27      	ldr	r3, [pc, #156]	; (6e44 <nrfx_usbd_ep_transfer+0xbc>)
    6da6:	781b      	ldrb	r3, [r3, #0]
    6da8:	4283      	cmp	r3, r0
    6daa:	d147      	bne.n	6e3c <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6dac:	4b26      	ldr	r3, [pc, #152]	; (6e48 <nrfx_usbd_ep_transfer+0xc0>)
    6dae:	4f27      	ldr	r7, [pc, #156]	; (6e4c <nrfx_usbd_ep_transfer+0xc4>)
    6db0:	681a      	ldr	r2, [r3, #0]
    6db2:	683b      	ldr	r3, [r7, #0]
    6db4:	43d2      	mvns	r2, r2
    6db6:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    6db8:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6dba:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    6dbc:	f002 ff75 	bl	9caa <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    6dc0:	f04f 0801 	mov.w	r8, #1
    6dc4:	fa08 f800 	lsl.w	r8, r8, r0
    6dc8:	ea12 0f08 	tst.w	r2, r8
    6dcc:	d138      	bne.n	6e40 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6dce:	4620      	mov	r0, r4
    6dd0:	f7ff fcc6 	bl	6760 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6dd4:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    6dd6:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    6dd8:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6dda:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    6dde:	d529      	bpl.n	6e34 <nrfx_usbd_ep_transfer+0xac>
    6de0:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6de2:	6888      	ldr	r0, [r1, #8]
    6de4:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6de8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6dec:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    6df0:	d11d      	bne.n	6e2e <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6df2:	4a17      	ldr	r2, [pc, #92]	; (6e50 <nrfx_usbd_ep_transfer+0xc8>)
    6df4:	4c17      	ldr	r4, [pc, #92]	; (6e54 <nrfx_usbd_ep_transfer+0xcc>)
    6df6:	2800      	cmp	r0, #0
    6df8:	bf08      	it	eq
    6dfa:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    6dfc:	4816      	ldr	r0, [pc, #88]	; (6e58 <nrfx_usbd_ep_transfer+0xd0>)
    6dfe:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    6e00:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    6e02:	c907      	ldmia	r1, {r0, r1, r2}
    6e04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    6e08:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    6e0a:	2300      	movs	r3, #0
    6e0c:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    6e0e:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6e10:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    6e12:	4812      	ldr	r0, [pc, #72]	; (6e5c <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    6e14:	ea43 0308 	orr.w	r3, r3, r8
    6e18:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e1a:	4b11      	ldr	r3, [pc, #68]	; (6e60 <nrfx_usbd_ep_transfer+0xd8>)
    6e1c:	2280      	movs	r2, #128	; 0x80
    6e1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    6e22:	f386 8811 	msr	BASEPRI, r6
    6e26:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    6e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    6e2e:	4a0d      	ldr	r2, [pc, #52]	; (6e64 <nrfx_usbd_ep_transfer+0xdc>)
    6e30:	4c0d      	ldr	r4, [pc, #52]	; (6e68 <nrfx_usbd_ep_transfer+0xe0>)
    6e32:	e7e0      	b.n	6df6 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    6e34:	4a0d      	ldr	r2, [pc, #52]	; (6e6c <nrfx_usbd_ep_transfer+0xe4>)
    6e36:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    6e38:	4a0d      	ldr	r2, [pc, #52]	; (6e70 <nrfx_usbd_ep_transfer+0xe8>)
    6e3a:	e7e1      	b.n	6e00 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    6e3c:	480d      	ldr	r0, [pc, #52]	; (6e74 <nrfx_usbd_ep_transfer+0xec>)
    6e3e:	e7f0      	b.n	6e22 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    6e40:	480d      	ldr	r0, [pc, #52]	; (6e78 <nrfx_usbd_ep_transfer+0xf0>)
    6e42:	e7ee      	b.n	6e22 <nrfx_usbd_ep_transfer+0x9a>
    6e44:	20001584 	.word	0x20001584
    6e48:	20001514 	.word	0x20001514
    6e4c:	20001510 	.word	0x20001510
    6e50:	00009c83 	.word	0x00009c83
    6e54:	00009c61 	.word	0x00009c61
    6e58:	20001384 	.word	0x20001384
    6e5c:	0bad0000 	.word	0x0bad0000
    6e60:	e000e100 	.word	0xe000e100
    6e64:	000068d5 	.word	0x000068d5
    6e68:	0000689d 	.word	0x0000689d
    6e6c:	20001318 	.word	0x20001318
    6e70:	00009c2f 	.word	0x00009c2f
    6e74:	0bad000a 	.word	0x0bad000a
    6e78:	0bad000b 	.word	0x0bad000b

00006e7c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    6e7c:	f010 0f08 	tst.w	r0, #8
    6e80:	4b07      	ldr	r3, [pc, #28]	; (6ea0 <nrfx_usbd_epout_size_get+0x24>)
    6e82:	d006      	beq.n	6e92 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    6e84:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    6e88:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6e8c:	bf18      	it	ne
    6e8e:	2000      	movne	r0, #0
    6e90:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    6e92:	f000 000f 	and.w	r0, r0, #15
    6e96:	f500 7094 	add.w	r0, r0, #296	; 0x128
    6e9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    6e9e:	4770      	bx	lr
    6ea0:	40027000 	.word	0x40027000

00006ea4 <usbd_dmareq_process>:
{
    6ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    6ea8:	4e59      	ldr	r6, [pc, #356]	; (7010 <usbd_dmareq_process+0x16c>)
    6eaa:	7833      	ldrb	r3, [r6, #0]
{
    6eac:	b085      	sub	sp, #20
    if (!m_dma_pending)
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d173      	bne.n	6f9a <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    6eb2:	f8df 8160 	ldr.w	r8, [pc, #352]	; 7014 <usbd_dmareq_process+0x170>
    6eb6:	4d58      	ldr	r5, [pc, #352]	; (7018 <usbd_dmareq_process+0x174>)
    6eb8:	f8d8 4000 	ldr.w	r4, [r8]
    6ebc:	682b      	ldr	r3, [r5, #0]
    6ebe:	401c      	ands	r4, r3
    6ec0:	d06b      	beq.n	6f9a <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    6ec2:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    6ec6:	bf14      	ite	ne
    6ec8:	fa93 f4a3 	rbitne	r4, r3
    6ecc:	fa94 f4a4 	rbiteq	r4, r4
    6ed0:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6ed4:	f04f 0901 	mov.w	r9, #1
    6ed8:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6edc:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6ede:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6ee2:	d95d      	bls.n	6fa0 <usbd_dmareq_process+0xfc>
    6ee4:	3c10      	subs	r4, #16
    6ee6:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6ee8:	4620      	mov	r0, r4
    6eea:	f7ff fc39 	bl	6760 <ep_state_access>
    6eee:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6ef0:	4620      	mov	r0, r4
    6ef2:	f7ff ffc3 	bl	6e7c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    6ef6:	f8da 7000 	ldr.w	r7, [sl]
    6efa:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    6efe:	f8da 1004 	ldr.w	r1, [sl, #4]
    6f02:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    6f04:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    6f06:	a802      	add	r0, sp, #8
    6f08:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    6f0a:	9b02      	ldr	r3, [sp, #8]
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d153      	bne.n	6fb8 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    6f10:	b908      	cbnz	r0, 6f16 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    6f12:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6f16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    6f1a:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    6f1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6f20:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    6f22:	bf02      	ittt	eq
    6f24:	4b3d      	ldreq	r3, [pc, #244]	; (701c <usbd_dmareq_process+0x178>)
    6f26:	2282      	moveq	r2, #130	; 0x82
    6f28:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    6f2c:	2301      	movs	r3, #1
    6f2e:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    6f30:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    6f32:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    6f34:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    6f36:	ea03 0309 	and.w	r3, r3, r9
    6f3a:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    6f3c:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    6f40:	2900      	cmp	r1, #0
    6f42:	4413      	add	r3, r2
    6f44:	f8ca 3008 	str.w	r3, [sl, #8]
    6f48:	f004 0508 	and.w	r5, r4, #8
    6f4c:	4b33      	ldr	r3, [pc, #204]	; (701c <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6f4e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    6f52:	da4e      	bge.n	6ff2 <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    6f54:	2d00      	cmp	r5, #0
    6f56:	d044      	beq.n	6fe2 <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    6f58:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    6f5c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    6f60:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6f62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6f66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f6a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    6f6e:	2201      	movs	r2, #1
    6f70:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    6f72:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    6f74:	4a2a      	ldr	r2, [pc, #168]	; (7020 <usbd_dmareq_process+0x17c>)
    6f76:	4b2b      	ldr	r3, [pc, #172]	; (7024 <usbd_dmareq_process+0x180>)
    6f78:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    6f7c:	bf38      	it	cc
    6f7e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6f80:	4926      	ldr	r1, [pc, #152]	; (701c <usbd_dmareq_process+0x178>)
    6f82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    6f86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6f8a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    6f8e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    6f90:	b91a      	cbnz	r2, 6f9a <usbd_dmareq_process+0xf6>
    6f92:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    6f96:	2a00      	cmp	r2, #0
    6f98:	d0f9      	beq.n	6f8e <usbd_dmareq_process+0xea>
}
    6f9a:	b005      	add	sp, #20
    6f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    6fa0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6fa4:	4620      	mov	r0, r4
    6fa6:	f7ff fbdb 	bl	6760 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    6faa:	6803      	ldr	r3, [r0, #0]
    6fac:	8982      	ldrh	r2, [r0, #12]
    6fae:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    6fb0:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    6fb2:	a802      	add	r0, sp, #8
    6fb4:	4798      	blx	r3
    6fb6:	e7ab      	b.n	6f10 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    6fb8:	9b03      	ldr	r3, [sp, #12]
    6fba:	459b      	cmp	fp, r3
    6fbc:	d9a8      	bls.n	6f10 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6fbe:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6fc0:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    6fc2:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    6fc6:	f7ff fcc5 	bl	6954 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fca:	2306      	movs	r3, #6
    6fcc:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    6fd0:	4b15      	ldr	r3, [pc, #84]	; (7028 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fd2:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    6fd6:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    6fd8:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    6fdc:	a801      	add	r0, sp, #4
    6fde:	4798      	blx	r3
                    continue;
    6fe0:	e76a      	b.n	6eb8 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    6fe2:	2514      	movs	r5, #20
    6fe4:	fb05 3304 	mla	r3, r5, r4, r3
    6fe8:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    6fec:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    6ff0:	e7b6      	b.n	6f60 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    6ff2:	b12d      	cbz	r5, 7000 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    6ff4:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    6ff8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    6ffc:	2328      	movs	r3, #40	; 0x28
    6ffe:	e7b0      	b.n	6f62 <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    7000:	2514      	movs	r5, #20
    7002:	fb05 3304 	mla	r3, r5, r4, r3
    7006:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    700a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    700e:	e7f5      	b.n	6ffc <usbd_dmareq_process+0x158>
    7010:	20001583 	.word	0x20001583
    7014:	20001510 	.word	0x20001510
    7018:	20001514 	.word	0x20001514
    701c:	40027000 	.word	0x40027000
    7020:	0000a970 	.word	0x0000a970
    7024:	0000a982 	.word	0x0000a982
    7028:	20001518 	.word	0x20001518

0000702c <ev_epdata_handler>:
{
    702c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    702e:	4b0f      	ldr	r3, [pc, #60]	; (706c <ev_epdata_handler+0x40>)
    7030:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    7034:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7038:	2501      	movs	r5, #1
    while (dataepstatus)
    703a:	b91c      	cbnz	r4, 7044 <ev_epdata_handler+0x18>
}
    703c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7040:	f7ff bf30 	b.w	6ea4 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7044:	fa94 f3a4 	rbit	r3, r4
    7048:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    704c:	2b0f      	cmp	r3, #15
    704e:	bfc8      	it	gt
    7050:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7054:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7056:	bfd4      	ite	le
    7058:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    705c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    705e:	fa05 f303 	lsl.w	r3, r5, r3
    7062:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    7066:	f7ff fcad 	bl	69c4 <usbd_ep_data_handler>
    706a:	e7e6      	b.n	703a <ev_epdata_handler+0xe>
    706c:	40027000 	.word	0x40027000

00007070 <nrf_usbd_epout_dma_handler>:
{
    7070:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    7072:	f7ff fc7f 	bl	6974 <usbd_dma_pending_clear>
{
    7076:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7078:	f7ff fb72 	bl	6760 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    707c:	7b83      	ldrb	r3, [r0, #14]
    707e:	2b03      	cmp	r3, #3
    7080:	d10d      	bne.n	709e <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7082:	4620      	mov	r0, r4
    7084:	f002 fe11 	bl	9caa <ep2bit>
    7088:	2301      	movs	r3, #1
    708a:	fa03 f000 	lsl.w	r0, r3, r0
    708e:	43c0      	mvns	r0, r0
    7090:	f7ff fc60 	bl	6954 <atomic_and.constprop.0.isra.0>
}
    7094:	b003      	add	sp, #12
    7096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    709a:	f7ff bf03 	b.w	6ea4 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    709e:	6805      	ldr	r5, [r0, #0]
    70a0:	2d00      	cmp	r5, #0
    70a2:	d1f7      	bne.n	7094 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    70a4:	4620      	mov	r0, r4
    70a6:	f002 fe00 	bl	9caa <ep2bit>
    70aa:	2301      	movs	r3, #1
    70ac:	fa03 f000 	lsl.w	r0, r3, r0
    70b0:	43c0      	mvns	r0, r0
    70b2:	f7ff fc4f 	bl	6954 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70b6:	2306      	movs	r3, #6
    70b8:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    70bc:	4b04      	ldr	r3, [pc, #16]	; (70d0 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70be:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    70c2:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    70c4:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    70c8:	a801      	add	r0, sp, #4
    70ca:	4798      	blx	r3
    70cc:	e7e2      	b.n	7094 <nrf_usbd_epout_dma_handler+0x24>
    70ce:	bf00      	nop
    70d0:	20001518 	.word	0x20001518

000070d4 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    70d4:	4b02      	ldr	r3, [pc, #8]	; (70e0 <nrfx_usbd_ep_stall+0xc>)
    70d6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    70da:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    70de:	4770      	bx	lr
    70e0:	40027000 	.word	0x40027000

000070e4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    70e4:	0702      	lsls	r2, r0, #28
    70e6:	d413      	bmi.n	7110 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    70e8:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    70ec:	f010 0f80 	tst.w	r0, #128	; 0x80
    70f0:	4a08      	ldr	r2, [pc, #32]	; (7114 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    70f2:	bf0b      	itete	eq
    70f4:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    70f8:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    70fc:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    7100:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    7104:	bf08      	it	eq
    7106:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    7108:	1e43      	subs	r3, r0, #1
    710a:	4258      	negs	r0, r3
    710c:	4158      	adcs	r0, r3
    710e:	4770      	bx	lr
        return false;
    7110:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    7112:	4770      	bx	lr
    7114:	40027000 	.word	0x40027000

00007118 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    7118:	4b04      	ldr	r3, [pc, #16]	; (712c <nrfx_usbd_ep_dtoggle_clear+0x14>)
    711a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    711e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7122:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    7126:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    712a:	4770      	bx	lr
    712c:	40027000 	.word	0x40027000

00007130 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    7130:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7132:	2208      	movs	r2, #8
    7134:	2100      	movs	r1, #0
{
    7136:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7138:	f002 fa4e 	bl	95d8 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    713c:	4b0e      	ldr	r3, [pc, #56]	; (7178 <nrfx_usbd_setup_get+0x48>)
    713e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    7142:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    7144:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    7148:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    714a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    714e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7152:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    7156:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    7158:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    715c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7160:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    7164:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    7166:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    716a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    716e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    7172:	80e3      	strh	r3, [r4, #6]
}
    7174:	bd10      	pop	{r4, pc}
    7176:	bf00      	nop
    7178:	40027000 	.word	0x40027000

0000717c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    717c:	4b02      	ldr	r3, [pc, #8]	; (7188 <nrfx_usbd_setup_data_clear+0xc>)
    717e:	2201      	movs	r2, #1
    7180:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    7184:	4770      	bx	lr
    7186:	bf00      	nop
    7188:	40027000 	.word	0x40027000

0000718c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    718c:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    718e:	f7ff fbf1 	bl	6974 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7192:	4b10      	ldr	r3, [pc, #64]	; (71d4 <ev_dma_epout0_handler+0x48>)
    7194:	7b9a      	ldrb	r2, [r3, #14]
    7196:	2a03      	cmp	r2, #3
    7198:	d106      	bne.n	71a8 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    719a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    719e:	b002      	add	sp, #8
    71a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    71a4:	f7ff bbd6 	b.w	6954 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    71a8:	681c      	ldr	r4, [r3, #0]
    71aa:	b974      	cbnz	r4, 71ca <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    71ac:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    71b0:	f7ff fbd0 	bl	6954 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    71b4:	2306      	movs	r3, #6
    71b6:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    71ba:	4b07      	ldr	r3, [pc, #28]	; (71d8 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    71bc:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    71c0:	681b      	ldr	r3, [r3, #0]
    71c2:	a801      	add	r0, sp, #4
    71c4:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    71c6:	b002      	add	sp, #8
    71c8:	bd10      	pop	{r4, pc}
    71ca:	b002      	add	sp, #8
    71cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    71d0:	f7ff bfd4 	b.w	717c <nrfx_usbd_setup_data_clear>
    71d4:	200013f0 	.word	0x200013f0
    71d8:	20001518 	.word	0x20001518

000071dc <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    71dc:	4b02      	ldr	r3, [pc, #8]	; (71e8 <nrfx_usbd_setup_clear+0xc>)
    71de:	2201      	movs	r2, #1
    71e0:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    71e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    71e4:	4770      	bx	lr
    71e6:	bf00      	nop
    71e8:	40027000 	.word	0x40027000

000071ec <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    71ec:	4b02      	ldr	r3, [pc, #8]	; (71f8 <nrfx_usbd_setup_stall+0xc>)
    71ee:	2201      	movs	r2, #1
    71f0:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    71f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    71f4:	4770      	bx	lr
    71f6:	bf00      	nop
    71f8:	40027000 	.word	0x40027000

000071fc <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    71fc:	4b01      	ldr	r3, [pc, #4]	; (7204 <nrfx_usbd_last_setup_dir_get+0x8>)
    71fe:	7818      	ldrb	r0, [r3, #0]
    7200:	4770      	bx	lr
    7202:	bf00      	nop
    7204:	20001584 	.word	0x20001584

00007208 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    7208:	b510      	push	{r4, lr}
    720a:	4602      	mov	r2, r0
	__asm__ volatile(
    720c:	f04f 0320 	mov.w	r3, #32
    7210:	f3ef 8411 	mrs	r4, BASEPRI
    7214:	f383 8812 	msr	BASEPRI_MAX, r3
    7218:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    721c:	f002 fd45 	bl	9caa <ep2bit>
    7220:	490d      	ldr	r1, [pc, #52]	; (7258 <nrfx_usbd_transfer_out_drop+0x50>)
    7222:	2301      	movs	r3, #1
    7224:	fa03 f000 	lsl.w	r0, r3, r0
    7228:	680b      	ldr	r3, [r1, #0]
    722a:	ea23 0300 	bic.w	r3, r3, r0
    722e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7230:	f012 0108 	ands.w	r1, r2, #8
    7234:	d10a      	bne.n	724c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    7236:	f002 030f 	and.w	r3, r2, #15
    723a:	009b      	lsls	r3, r3, #2
    723c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7240:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7244:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7248:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    724c:	f384 8811 	msr	BASEPRI, r4
    7250:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7254:	bd10      	pop	{r4, pc}
    7256:	bf00      	nop
    7258:	20001514 	.word	0x20001514

0000725c <usbd_ep_abort>:
{
    725c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    725e:	4601      	mov	r1, r0
	__asm__ volatile(
    7260:	f04f 0320 	mov.w	r3, #32
    7264:	f3ef 8511 	mrs	r5, BASEPRI
    7268:	f383 8812 	msr	BASEPRI_MAX, r3
    726c:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7270:	f7ff fa76 	bl	6760 <ep_state_access>
    7274:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7276:	4608      	mov	r0, r1
    7278:	f002 fd17 	bl	9caa <ep2bit>
    727c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    727e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7282:	fa02 f200 	lsl.w	r2, r2, r0
    7286:	482e      	ldr	r0, [pc, #184]	; (7340 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    7288:	d119      	bne.n	72be <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    728a:	6803      	ldr	r3, [r0, #0]
    728c:	ea32 0303 	bics.w	r3, r2, r3
    7290:	d00a      	beq.n	72a8 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    7292:	4608      	mov	r0, r1
    7294:	f7ff ffb8 	bl	7208 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    7298:	2303      	movs	r3, #3
    729a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    729c:	f385 8811 	msr	BASEPRI, r5
    72a0:	f3bf 8f6f 	isb	sy
}
    72a4:	b003      	add	sp, #12
    72a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    72a8:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    72aa:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    72ac:	4925      	ldr	r1, [pc, #148]	; (7344 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    72ae:	ea23 0302 	bic.w	r3, r3, r2
    72b2:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    72b4:	680b      	ldr	r3, [r1, #0]
    72b6:	ea23 0302 	bic.w	r3, r3, r2
    72ba:	600b      	str	r3, [r1, #0]
    72bc:	e7ec      	b.n	7298 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    72be:	070b      	lsls	r3, r1, #28
    72c0:	d415      	bmi.n	72ee <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    72c2:	2980      	cmp	r1, #128	; 0x80
    72c4:	4b20      	ldr	r3, [pc, #128]	; (7348 <usbd_ep_abort+0xec>)
    72c6:	d02f      	beq.n	7328 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    72c8:	f001 040f 	and.w	r4, r1, #15
    72cc:	f204 34da 	addw	r4, r4, #986	; 0x3da
    72d0:	0064      	lsls	r4, r4, #1
    72d2:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    72d6:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72da:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    72de:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72e0:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    72e4:	433c      	orrs	r4, r7
    72e6:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    72ea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    72ee:	4f15      	ldr	r7, [pc, #84]	; (7344 <usbd_ep_abort+0xe8>)
    72f0:	6804      	ldr	r4, [r0, #0]
    72f2:	683b      	ldr	r3, [r7, #0]
    72f4:	ea64 0c03 	orn	ip, r4, r3
    72f8:	ea1c 0f02 	tst.w	ip, r2
    72fc:	d0ce      	beq.n	729c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    72fe:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7300:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7304:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    7306:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7308:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    730a:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    730c:	2303      	movs	r3, #3
    730e:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7310:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7314:	4b0d      	ldr	r3, [pc, #52]	; (734c <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7316:	f88d 1006 	strb.w	r1, [sp, #6]
    731a:	2206      	movs	r2, #6
            m_event_handler(&evt);
    731c:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    731e:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    7322:	a801      	add	r0, sp, #4
    7324:	4798      	blx	r3
    7326:	e7b9      	b.n	729c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7328:	f240 74b4 	movw	r4, #1972	; 0x7b4
    732c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7330:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7334:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7338:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    733a:	f044 0404 	orr.w	r4, r4, #4
    733e:	e7d1      	b.n	72e4 <usbd_ep_abort+0x88>
    7340:	20001510 	.word	0x20001510
    7344:	20001514 	.word	0x20001514
    7348:	40027000 	.word	0x40027000
    734c:	20001518 	.word	0x20001518

00007350 <ev_setup_handler>:
{
    7350:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7352:	4b14      	ldr	r3, [pc, #80]	; (73a4 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7354:	4c14      	ldr	r4, [pc, #80]	; (73a8 <ev_setup_handler+0x58>)
    7356:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    735a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    735c:	4e13      	ldr	r6, [pc, #76]	; (73ac <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    735e:	43da      	mvns	r2, r3
    7360:	4b13      	ldr	r3, [pc, #76]	; (73b0 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    7362:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7364:	681b      	ldr	r3, [r3, #0]
    7366:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    7368:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    736a:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    736c:	f002 fc9d 	bl	9caa <ep2bit>
    7370:	2301      	movs	r3, #1
    7372:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7374:	4213      	tst	r3, r2
    7376:	d002      	beq.n	737e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    7378:	4608      	mov	r0, r1
    737a:	f7ff ff6f 	bl	725c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    737e:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    7382:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    7386:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    7388:	f7ff fae4 	bl	6954 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    738c:	6823      	ldr	r3, [r4, #0]
    738e:	f043 0301 	orr.w	r3, r3, #1
    7392:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    7394:	2305      	movs	r3, #5
    7396:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    7398:	4b06      	ldr	r3, [pc, #24]	; (73b4 <ev_setup_handler+0x64>)
    739a:	a801      	add	r0, sp, #4
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	4798      	blx	r3
}
    73a0:	b002      	add	sp, #8
    73a2:	bd70      	pop	{r4, r5, r6, pc}
    73a4:	40027000 	.word	0x40027000
    73a8:	20001514 	.word	0x20001514
    73ac:	20001584 	.word	0x20001584
    73b0:	20001510 	.word	0x20001510
    73b4:	20001518 	.word	0x20001518

000073b8 <nrfx_usbd_irq_handler>:
{
    73b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    73bc:	4b1a      	ldr	r3, [pc, #104]	; (7428 <nrfx_usbd_irq_handler+0x70>)
    73be:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    73c2:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    73c4:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    73c6:	461d      	mov	r5, r3
    while (to_process)
    73c8:	b970      	cbnz	r0, 73e8 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    73ca:	4f18      	ldr	r7, [pc, #96]	; (742c <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    73cc:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    73d0:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    73d4:	f04f 0801 	mov.w	r8, #1
    while (active)
    73d8:	b9bc      	cbnz	r4, 740a <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    73da:	f7ff fd63 	bl	6ea4 <usbd_dmareq_process>
    if (setup_active)
    73de:	b306      	cbz	r6, 7422 <nrfx_usbd_irq_handler+0x6a>
}
    73e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    73e4:	f7ff bfb4 	b.w	7350 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    73e8:	fa90 f2a0 	rbit	r2, r0
    73ec:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    73f0:	490f      	ldr	r1, [pc, #60]	; (7430 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    73f2:	0096      	lsls	r6, r2, #2
    73f4:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    73f6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    73fa:	680e      	ldr	r6, [r1, #0]
    if (ret)
    73fc:	b116      	cbz	r6, 7404 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    73fe:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7400:	6809      	ldr	r1, [r1, #0]
    7402:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    7404:	ea20 0002 	bic.w	r0, r0, r2
    7408:	e7de      	b.n	73c8 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    740a:	fa94 f5a4 	rbit	r5, r4
    740e:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    7412:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    7416:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    741a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    741c:	ea24 0405 	bic.w	r4, r4, r5
    7420:	e7da      	b.n	73d8 <nrfx_usbd_irq_handler+0x20>
}
    7422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7426:	bf00      	nop
    7428:	40027000 	.word	0x40027000
    742c:	0000a8f0 	.word	0x0000a8f0
    7430:	40027100 	.word	0x40027100

00007434 <nrfx_usbd_stop>:
{
    7434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7436:	4b1b      	ldr	r3, [pc, #108]	; (74a4 <nrfx_usbd_stop+0x70>)
    7438:	2280      	movs	r2, #128	; 0x80
    743a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    743e:	2027      	movs	r0, #39	; 0x27
    7440:	f7fc f83a 	bl	34b8 <arch_irq_is_enabled>
    7444:	b1b8      	cbz	r0, 7476 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    7446:	4e18      	ldr	r6, [pc, #96]	; (74a8 <nrfx_usbd_stop+0x74>)
    7448:	4b18      	ldr	r3, [pc, #96]	; (74ac <nrfx_usbd_stop+0x78>)
    744a:	6834      	ldr	r4, [r6, #0]
    744c:	681b      	ldr	r3, [r3, #0]
    744e:	0c24      	lsrs	r4, r4, #16
    7450:	0424      	lsls	r4, r4, #16
    7452:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    7454:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    7456:	b97c      	cbnz	r4, 7478 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    7458:	4d15      	ldr	r5, [pc, #84]	; (74b0 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    745a:	f240 13ff 	movw	r3, #511	; 0x1ff
    745e:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    7460:	2027      	movs	r0, #39	; 0x27
    7462:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7466:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    746a:	f7fc f811 	bl	3490 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    746e:	f04f 33ff 	mov.w	r3, #4294967295
    7472:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    7476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7478:	fa94 f5a4 	rbit	r5, r4
    747c:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7480:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    7482:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7484:	bfc6      	itte	gt
    7486:	f1a5 0010 	subgt.w	r0, r5, #16
    748a:	b2c0      	uxtbgt	r0, r0
    748c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    7490:	0703      	lsls	r3, r0, #28
    7492:	d401      	bmi.n	7498 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    7494:	f7ff fee2 	bl	725c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    7498:	fa07 f505 	lsl.w	r5, r7, r5
    749c:	ea24 0405 	bic.w	r4, r4, r5
    74a0:	e7d9      	b.n	7456 <nrfx_usbd_stop+0x22>
    74a2:	bf00      	nop
    74a4:	e000e100 	.word	0xe000e100
    74a8:	20001514 	.word	0x20001514
    74ac:	20001510 	.word	0x20001510
    74b0:	40027000 	.word	0x40027000

000074b4 <nrfx_usbd_disable>:
{
    74b4:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    74b6:	f7ff ffbd 	bl	7434 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    74ba:	4b08      	ldr	r3, [pc, #32]	; (74dc <nrfx_usbd_disable+0x28>)
    74bc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    74c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    74c4:	2200      	movs	r2, #0
    74c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    74ca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    74ce:	f7ff fa51 	bl	6974 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    74d2:	4b03      	ldr	r3, [pc, #12]	; (74e0 <nrfx_usbd_disable+0x2c>)
    74d4:	2201      	movs	r2, #1
    74d6:	701a      	strb	r2, [r3, #0]
}
    74d8:	bd08      	pop	{r3, pc}
    74da:	bf00      	nop
    74dc:	40027000 	.word	0x40027000
    74e0:	20001586 	.word	0x20001586

000074e4 <nrfx_usbd_ep_disable>:
{
    74e4:	b510      	push	{r4, lr}
    74e6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    74e8:	f7ff feb8 	bl	725c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    74ec:	4a10      	ldr	r2, [pc, #64]	; (7530 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    74ee:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    74f2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    74f6:	f04f 0301 	mov.w	r3, #1
    74fa:	bf14      	ite	ne
    74fc:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7500:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    7504:	fa03 f300 	lsl.w	r3, r3, r0
    7508:	ea6f 0303 	mvn.w	r3, r3
    750c:	bf15      	itete	ne
    750e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7510:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    7512:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    7516:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    751a:	bf14      	ite	ne
    751c:	4b05      	ldrne	r3, [pc, #20]	; (7534 <nrfx_usbd_ep_disable+0x50>)
    751e:	4b06      	ldreq	r3, [pc, #24]	; (7538 <nrfx_usbd_ep_disable+0x54>)
    7520:	5c1a      	ldrb	r2, [r3, r0]
    7522:	2301      	movs	r3, #1
    7524:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    7526:	4a02      	ldr	r2, [pc, #8]	; (7530 <nrfx_usbd_ep_disable+0x4c>)
    7528:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    752c:	bd10      	pop	{r4, pc}
    752e:	bf00      	nop
    7530:	40027000 	.word	0x40027000
    7534:	0000abd9 	.word	0x0000abd9
    7538:	0000abd0 	.word	0x0000abd0

0000753c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    753c:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    7540:	b570      	push	{r4, r5, r6, lr}
    7542:	4924      	ldr	r1, [pc, #144]	; (75d4 <nrfx_usbd_ep_enable+0x98>)
    7544:	4604      	mov	r4, r0
    7546:	f000 030f 	and.w	r3, r0, #15
    754a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    754e:	d012      	beq.n	7576 <nrfx_usbd_ep_enable+0x3a>
    7550:	4a21      	ldr	r2, [pc, #132]	; (75d8 <nrfx_usbd_ep_enable+0x9c>)
    7552:	5cd2      	ldrb	r2, [r2, r3]
    7554:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    7558:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    755c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    7560:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7562:	07d0      	lsls	r0, r2, #31
    7564:	d406      	bmi.n	7574 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    7566:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    756a:	fa05 f303 	lsl.w	r3, r5, r3
    756e:	4313      	orrs	r3, r2
    7570:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    7574:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    7576:	4a19      	ldr	r2, [pc, #100]	; (75dc <nrfx_usbd_ep_enable+0xa0>)
    7578:	5cd2      	ldrb	r2, [r2, r3]
    757a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    757e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    7582:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    7586:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    7588:	07d2      	lsls	r2, r2, #31
    758a:	d4f3      	bmi.n	7574 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    758c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    7590:	fa05 f203 	lsl.w	r2, r5, r3
    7594:	4332      	orrs	r2, r6
    7596:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    759a:	2b00      	cmp	r3, #0
    759c:	d0ea      	beq.n	7574 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    759e:	0703      	lsls	r3, r0, #28
    75a0:	d4e8      	bmi.n	7574 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    75a2:	f04f 0320 	mov.w	r3, #32
    75a6:	f3ef 8611 	mrs	r6, BASEPRI
    75aa:	f383 8812 	msr	BASEPRI_MAX, r3
    75ae:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    75b2:	f7ff fe29 	bl	7208 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    75b6:	4620      	mov	r0, r4
    75b8:	f002 fb77 	bl	9caa <ep2bit>
    75bc:	4a08      	ldr	r2, [pc, #32]	; (75e0 <nrfx_usbd_ep_enable+0xa4>)
    75be:	6813      	ldr	r3, [r2, #0]
    75c0:	fa05 f000 	lsl.w	r0, r5, r0
    75c4:	ea23 0300 	bic.w	r3, r3, r0
    75c8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    75ca:	f386 8811 	msr	BASEPRI, r6
    75ce:	f3bf 8f6f 	isb	sy
}
    75d2:	e7cf      	b.n	7574 <nrfx_usbd_ep_enable+0x38>
    75d4:	40027000 	.word	0x40027000
    75d8:	0000abd9 	.word	0x0000abd9
    75dc:	0000abd0 	.word	0x0000abd0
    75e0:	20001510 	.word	0x20001510

000075e4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    75e4:	0603      	lsls	r3, r0, #24
{
    75e6:	b510      	push	{r4, lr}
    75e8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    75ea:	d405      	bmi.n	75f8 <nrfx_usbd_ep_stall_clear+0x14>
    75ec:	f7ff fd7a 	bl	70e4 <nrfx_usbd_ep_stall_check>
    75f0:	b110      	cbz	r0, 75f8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    75f2:	4620      	mov	r0, r4
    75f4:	f7ff fe08 	bl	7208 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    75f8:	4b01      	ldr	r3, [pc, #4]	; (7600 <nrfx_usbd_ep_stall_clear+0x1c>)
    75fa:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    75fe:	bd10      	pop	{r4, pc}
    7600:	40027000 	.word	0x40027000

00007604 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7604:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    7606:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    760a:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
    760c:	6002      	str	r2, [r0, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    760e:	d004      	beq.n	761a <nrf_gpio_pin_port_decode+0x16>
    NRF_GPIO_Type * p_port = NULL;
    7610:	2b01      	cmp	r3, #1
    7612:	4803      	ldr	r0, [pc, #12]	; (7620 <nrf_gpio_pin_port_decode+0x1c>)
    7614:	bf18      	it	ne
    7616:	2000      	movne	r0, #0
    7618:	4770      	bx	lr
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    761a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    761e:	4770      	bx	lr
    7620:	50000300 	.word	0x50000300

00007624 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    7624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7626:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    7628:	f002 fbaa 	bl	9d80 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    762c:	4608      	mov	r0, r1
    762e:	f002 fba7 	bl	9d80 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7632:	a801      	add	r0, sp, #4
    7634:	9601      	str	r6, [sp, #4]
    7636:	f7ff ffe5 	bl	7604 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    763a:	9b01      	ldr	r3, [sp, #4]
    cnf &= ~to_update;
    763c:	4d2e      	ldr	r5, [pc, #184]	; (76f8 <nrfx_twi_twim_bus_recover+0xd4>)
    763e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
    7642:	460c      	mov	r4, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7644:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    7648:	9401      	str	r4, [sp, #4]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    764a:	f240 610d 	movw	r1, #1549	; 0x60d
    cnf &= ~to_update;
    764e:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    7650:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    7652:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7656:	a801      	add	r0, sp, #4
    7658:	f7ff ffd4 	bl	7604 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    765c:	9b01      	ldr	r3, [sp, #4]
    765e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7662:	2701      	movs	r7, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7664:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    7668:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
    766a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    766c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7670:	2004      	movs	r0, #4
    7672:	f002 f9b7 	bl	99e4 <nrfx_busy_wait>
    7676:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7678:	a801      	add	r0, sp, #4
    767a:	9401      	str	r4, [sp, #4]
    767c:	f7ff ffc2 	bl	7604 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7680:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7682:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7686:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    7688:	07db      	lsls	r3, r3, #31
    768a:	d415      	bmi.n	76b8 <nrfx_twi_twim_bus_recover+0x94>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    768c:	a801      	add	r0, sp, #4
    768e:	9601      	str	r6, [sp, #4]
    7690:	f7ff ffb8 	bl	7604 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7694:	9b01      	ldr	r3, [sp, #4]
    7696:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    769a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    769e:	2004      	movs	r0, #4
    76a0:	f002 f9a0 	bl	99e4 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    76a4:	4630      	mov	r0, r6
    76a6:	f002 fb6b 	bl	9d80 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    76aa:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    76ac:	2004      	movs	r0, #4
    76ae:	f002 f999 	bl	99e4 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    76b2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    76b6:	d1df      	bne.n	7678 <nrfx_twi_twim_bus_recover+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76b8:	a801      	add	r0, sp, #4
    76ba:	9401      	str	r4, [sp, #4]
    76bc:	f7ff ffa2 	bl	7604 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    76c0:	9a01      	ldr	r2, [sp, #4]
    76c2:	2301      	movs	r3, #1
    76c4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    76c6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    76ca:	2004      	movs	r0, #4
    76cc:	f002 f98a 	bl	99e4 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    76d0:	4620      	mov	r0, r4
    76d2:	f002 fb55 	bl	9d80 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    76d6:	2004      	movs	r0, #4
    76d8:	f002 f984 	bl	99e4 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76dc:	a801      	add	r0, sp, #4
    76de:	9401      	str	r4, [sp, #4]
    76e0:	f7ff ff90 	bl	7604 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    76e4:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    76e6:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    76ea:	4804      	ldr	r0, [pc, #16]	; (76fc <nrfx_twi_twim_bus_recover+0xd8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    76ec:	40d3      	lsrs	r3, r2
    76ee:	f003 0301 	and.w	r3, r3, #1
    76f2:	1ac0      	subs	r0, r0, r3
    76f4:	b003      	add	sp, #12
    76f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76f8:	fffcf8f0 	.word	0xfffcf8f0
    76fc:	0bad0001 	.word	0x0bad0001

00007700 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7700:	4b10      	ldr	r3, [pc, #64]	; (7744 <z_sys_init_run_level+0x44>)
{
    7702:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7704:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7708:	3001      	adds	r0, #1
    770a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    770e:	42a6      	cmp	r6, r4
    7710:	d800      	bhi.n	7714 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    7712:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
    7714:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    7718:	b195      	cbz	r5, 7740 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
    771a:	b153      	cbz	r3, 7732 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
    771c:	4628      	mov	r0, r5
    771e:	4798      	blx	r3
				if (rc != 0) {
    7720:	b138      	cbz	r0, 7732 <z_sys_init_run_level+0x32>
					if (rc < 0) {
    7722:	2800      	cmp	r0, #0
    7724:	bfb8      	it	lt
    7726:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
    7728:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
    772a:	28ff      	cmp	r0, #255	; 0xff
    772c:	bfa8      	it	ge
    772e:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
    7730:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7732:	68ea      	ldr	r2, [r5, #12]
    7734:	7853      	ldrb	r3, [r2, #1]
    7736:	f043 0301 	orr.w	r3, r3, #1
    773a:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    773c:	3408      	adds	r4, #8
    773e:	e7e6      	b.n	770e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    7740:	4798      	blx	r3
    7742:	e7fb      	b.n	773c <z_sys_init_run_level+0x3c>
    7744:	0000a958 	.word	0x0000a958

00007748 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7748:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    774a:	4b0a      	ldr	r3, [pc, #40]	; (7774 <bg_thread_main+0x2c>)
    774c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    774e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    7750:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7752:	f7ff ffd5 	bl	7700 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7756:	f001 f95d 	bl	8a14 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    775a:	2004      	movs	r0, #4
    775c:	f7ff ffd0 	bl	7700 <z_sys_init_run_level>

	z_init_static_threads();
    7760:	f000 f96a 	bl	7a38 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    7764:	f7f9 feac 	bl	14c0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7768:	4a03      	ldr	r2, [pc, #12]	; (7778 <bg_thread_main+0x30>)
    776a:	7b13      	ldrb	r3, [r2, #12]
    776c:	f023 0301 	bic.w	r3, r3, #1
    7770:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7772:	bd08      	pop	{r3, pc}
    7774:	20001587 	.word	0x20001587
    7778:	20000610 	.word	0x20000610

0000777c <z_bss_zero>:
{
    777c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    777e:	4803      	ldr	r0, [pc, #12]	; (778c <z_bss_zero+0x10>)
    7780:	4a03      	ldr	r2, [pc, #12]	; (7790 <z_bss_zero+0x14>)
    7782:	2100      	movs	r1, #0
    7784:	1a12      	subs	r2, r2, r0
    7786:	f002 fb3b 	bl	9e00 <z_early_memset>
}
    778a:	bd08      	pop	{r3, pc}
    778c:	20000330 	.word	0x20000330
    7790:	2000158c 	.word	0x2000158c

00007794 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7794:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    7796:	2300      	movs	r3, #0
{
    7798:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    779a:	2201      	movs	r2, #1
    779c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    77a0:	4e19      	ldr	r6, [pc, #100]	; (7808 <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    77a2:	4d1a      	ldr	r5, [pc, #104]	; (780c <z_init_cpu+0x78>)
	z_setup_new_thread(thread, stack,
    77a4:	9301      	str	r3, [sp, #4]
    77a6:	220f      	movs	r2, #15
    77a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    77ac:	4918      	ldr	r1, [pc, #96]	; (7810 <z_init_cpu+0x7c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    77ae:	2314      	movs	r3, #20
    77b0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    77b4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    77b8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    77ba:	f44f 70c0 	mov.w	r0, #384	; 0x180
    77be:	4b15      	ldr	r3, [pc, #84]	; (7814 <z_init_cpu+0x80>)
    77c0:	9500      	str	r5, [sp, #0]
    77c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    77c6:	fb00 1104 	mla	r1, r0, r4, r1
    77ca:	4630      	mov	r0, r6
    77cc:	f000 f8d6 	bl	797c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    77d0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    77d2:	4a11      	ldr	r2, [pc, #68]	; (7818 <z_init_cpu+0x84>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    77d4:	60ee      	str	r6, [r5, #12]
    77d6:	f023 0304 	bic.w	r3, r3, #4
    77da:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    77dc:	f44f 6304 	mov.w	r3, #2112	; 0x840
    77e0:	fb04 3303 	mla	r3, r4, r3, r3
    77e4:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
    77e6:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    77e8:	4b0c      	ldr	r3, [pc, #48]	; (781c <z_init_cpu+0x88>)
	_kernel.cpus[id].id = id;
    77ea:	742c      	strb	r4, [r5, #16]
    77ec:	f3bf 8f5b 	dmb	ish
    77f0:	e853 1f00 	ldrex	r1, [r3]
    77f4:	3101      	adds	r1, #1
    77f6:	e843 1200 	strex	r2, r1, [r3]
    77fa:	2a00      	cmp	r2, #0
    77fc:	d1f8      	bne.n	77f0 <z_init_cpu+0x5c>
    77fe:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
    7802:	b006      	add	sp, #24
    7804:	bd70      	pop	{r4, r5, r6, pc}
    7806:	bf00      	nop
    7808:	20000590 	.word	0x20000590
    780c:	20001520 	.word	0x20001520
    7810:	20002f00 	.word	0x20002f00
    7814:	00007af1 	.word	0x00007af1
    7818:	200026c0 	.word	0x200026c0
    781c:	2000151c 	.word	0x2000151c

00007820 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    7820:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7822:	2000      	movs	r0, #0
{
    7824:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7826:	f7ff ff6b 	bl	7700 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    782a:	4b2d      	ldr	r3, [pc, #180]	; (78e0 <z_cstart+0xc0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    782c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7830:	4d2c      	ldr	r5, [pc, #176]	; (78e4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    7832:	4e2d      	ldr	r6, [pc, #180]	; (78e8 <z_cstart+0xc8>)
    7834:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7836:	4f2d      	ldr	r7, [pc, #180]	; (78ec <z_cstart+0xcc>)
    7838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    783c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    783e:	2400      	movs	r4, #0
    7840:	23e0      	movs	r3, #224	; 0xe0
    7842:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7846:	77ec      	strb	r4, [r5, #31]
    7848:	762c      	strb	r4, [r5, #24]
    784a:	766c      	strb	r4, [r5, #25]
    784c:	76ac      	strb	r4, [r5, #26]
    784e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7854:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7858:	626b      	str	r3, [r5, #36]	; 0x24
    785a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    785e:	f7fc f881 	bl	3964 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7862:	f7fb fde7 	bl	3434 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7866:	f04f 33ff 	mov.w	r3, #4294967295
    786a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    786c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    786e:	f7fc f95d 	bl	3b2c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7872:	f7fc f8c3 	bl	39fc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7876:	f240 1301 	movw	r3, #257	; 0x101
    787a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    787e:	ab06      	add	r3, sp, #24
    7880:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7882:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    7886:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7888:	f002 fa87 	bl	9d9a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    788c:	2001      	movs	r0, #1
    788e:	f7ff ff37 	bl	7700 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7892:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    7894:	4d16      	ldr	r5, [pc, #88]	; (78f0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7896:	f7ff ff33 	bl	7700 <z_sys_init_run_level>
	z_sched_init();
    789a:	f000 fe0b 	bl	84b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    789e:	4b15      	ldr	r3, [pc, #84]	; (78f4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    78a0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    78a2:	9305      	str	r3, [sp, #20]
    78a4:	2301      	movs	r3, #1
    78a6:	4914      	ldr	r1, [pc, #80]	; (78f8 <z_cstart+0xd8>)
    78a8:	9400      	str	r4, [sp, #0]
    78aa:	e9cd 4303 	strd	r4, r3, [sp, #12]
    78ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    78b2:	463b      	mov	r3, r7
    78b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    78b8:	4628      	mov	r0, r5
    78ba:	f000 f85f 	bl	797c <z_setup_new_thread>
    78be:	7b6a      	ldrb	r2, [r5, #13]
    78c0:	4606      	mov	r6, r0
    78c2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    78c6:	4628      	mov	r0, r5
    78c8:	736a      	strb	r2, [r5, #13]
    78ca:	f002 fc27 	bl	a11c <z_ready_thread>
	z_init_cpu(0);
    78ce:	4620      	mov	r0, r4
    78d0:	f7ff ff60 	bl	7794 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    78d4:	463a      	mov	r2, r7
    78d6:	4631      	mov	r1, r6
    78d8:	4628      	mov	r0, r5
    78da:	f7fb fec1 	bl	3660 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    78de:	bf00      	nop
    78e0:	20002f00 	.word	0x20002f00
    78e4:	e000ed00 	.word	0xe000ed00
    78e8:	20001520 	.word	0x20001520
    78ec:	00007749 	.word	0x00007749
    78f0:	20000610 	.word	0x20000610
    78f4:	0000abec 	.word	0x0000abec
    78f8:	20003080 	.word	0x20003080

000078fc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    78fc:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    78fe:	4c06      	ldr	r4, [pc, #24]	; (7918 <init_mem_slab_module+0x1c>)
    7900:	4d06      	ldr	r5, [pc, #24]	; (791c <init_mem_slab_module+0x20>)
	int rc = 0;
    7902:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7904:	42ac      	cmp	r4, r5
    7906:	d300      	bcc.n	790a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    7908:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    790a:	4620      	mov	r0, r4
    790c:	f002 fa7c 	bl	9e08 <create_free_list>
		if (rc < 0) {
    7910:	2800      	cmp	r0, #0
    7912:	dbf9      	blt.n	7908 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7914:	341c      	adds	r4, #28
    7916:	e7f5      	b.n	7904 <init_mem_slab_module+0x8>
    7918:	200001d8 	.word	0x200001d8
    791c:	200001f4 	.word	0x200001f4

00007920 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7920:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7922:	460c      	mov	r4, r1
	__asm__ volatile(
    7924:	f04f 0520 	mov.w	r5, #32
    7928:	f3ef 8111 	mrs	r1, BASEPRI
    792c:	f385 8812 	msr	BASEPRI_MAX, r5
    7930:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7934:	6945      	ldr	r5, [r0, #20]
    7936:	b15d      	cbz	r5, 7950 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    7938:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    793a:	682b      	ldr	r3, [r5, #0]
    793c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    793e:	6983      	ldr	r3, [r0, #24]
    7940:	3301      	adds	r3, #1
    7942:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7944:	2000      	movs	r0, #0
	__asm__ volatile(
    7946:	f381 8811 	msr	BASEPRI, r1
    794a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    794e:	e011      	b.n	7974 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7950:	ea52 0603 	orrs.w	r6, r2, r3
    7954:	d103      	bne.n	795e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7956:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7958:	f06f 000b 	mvn.w	r0, #11
    795c:	e7f3      	b.n	7946 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    795e:	e9cd 2300 	strd	r2, r3, [sp]
    7962:	4602      	mov	r2, r0
    7964:	3008      	adds	r0, #8
    7966:	f000 fcaf 	bl	82c8 <z_pend_curr>
		if (result == 0) {
    796a:	b918      	cbnz	r0, 7974 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    796c:	4b02      	ldr	r3, [pc, #8]	; (7978 <k_mem_slab_alloc+0x58>)
    796e:	689b      	ldr	r3, [r3, #8]
    7970:	695b      	ldr	r3, [r3, #20]
    7972:	6023      	str	r3, [r4, #0]
}
    7974:	b002      	add	sp, #8
    7976:	bd70      	pop	{r4, r5, r6, pc}
    7978:	20001520 	.word	0x20001520

0000797c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    797c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7980:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7982:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7984:	2604      	movs	r6, #4
    7986:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7988:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    798a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    798c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7990:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7992:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7994:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    799a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    799c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    79a0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    79a2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    79a6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    79aa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    79ac:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    79ae:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    79b0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    79b4:	9202      	str	r2, [sp, #8]
    79b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79b8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    79ba:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    79bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    79be:	9200      	str	r2, [sp, #0]
    79c0:	4642      	mov	r2, r8
{
    79c2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    79c4:	f7fb fe1a 	bl	35fc <arch_new_thread>
	if (!_current) {
    79c8:	4b04      	ldr	r3, [pc, #16]	; (79dc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    79ca:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    79cc:	689b      	ldr	r3, [r3, #8]
    79ce:	b103      	cbz	r3, 79d2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    79d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    79d2:	6723      	str	r3, [r4, #112]	; 0x70
}
    79d4:	4640      	mov	r0, r8
    79d6:	b004      	add	sp, #16
    79d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79dc:	20001520 	.word	0x20001520

000079e0 <z_impl_k_thread_create>:
{
    79e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79e4:	2500      	movs	r5, #0
    79e6:	9505      	str	r5, [sp, #20]
    79e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    79ea:	9504      	str	r5, [sp, #16]
    79ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    79ee:	9503      	str	r5, [sp, #12]
    79f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    79f2:	9502      	str	r5, [sp, #8]
{
    79f4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    79fa:	9501      	str	r5, [sp, #4]
    79fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    79fe:	9500      	str	r5, [sp, #0]
{
    7a00:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7a02:	f7ff ffbb 	bl	797c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7a06:	f1b6 3fff 	cmp.w	r6, #4294967295
    7a0a:	bf08      	it	eq
    7a0c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    7a10:	d005      	beq.n	7a1e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7a12:	ea56 0307 	orrs.w	r3, r6, r7
    7a16:	d105      	bne.n	7a24 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    7a18:	4620      	mov	r0, r4
    7a1a:	f000 fccb 	bl	83b4 <z_sched_start>
}
    7a1e:	4620      	mov	r0, r4
    7a20:	b007      	add	sp, #28
    7a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7a24:	4903      	ldr	r1, [pc, #12]	; (7a34 <z_impl_k_thread_create+0x54>)
    7a26:	463a      	mov	r2, r7
    7a28:	4633      	mov	r3, r6
    7a2a:	f104 0018 	add.w	r0, r4, #24
    7a2e:	f000 fed7 	bl	87e0 <z_add_timeout>
    7a32:	e7f4      	b.n	7a1e <z_impl_k_thread_create+0x3e>
    7a34:	0000a181 	.word	0x0000a181

00007a38 <z_init_static_threads>:
{
    7a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a3c:	4c29      	ldr	r4, [pc, #164]	; (7ae4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7a3e:	4d2a      	ldr	r5, [pc, #168]	; (7ae8 <z_init_static_threads+0xb0>)
{
    7a40:	b087      	sub	sp, #28
    7a42:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7a44:	42ae      	cmp	r6, r5
    7a46:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    7a4a:	d30f      	bcc.n	7a6c <z_init_static_threads+0x34>
	k_sched_lock();
    7a4c:	f000 fd02 	bl	8454 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a50:	4c24      	ldr	r4, [pc, #144]	; (7ae4 <z_init_static_threads+0xac>)
    7a52:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7aec <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7a56:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7a5a:	f240 37e7 	movw	r7, #999	; 0x3e7
    7a5e:	42ac      	cmp	r4, r5
    7a60:	d320      	bcc.n	7aa4 <z_init_static_threads+0x6c>
}
    7a62:	b007      	add	sp, #28
    7a64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7a68:	f000 bd08 	b.w	847c <k_sched_unlock>
		z_setup_new_thread(
    7a6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7a70:	9305      	str	r3, [sp, #20]
    7a72:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    7a76:	9304      	str	r3, [sp, #16]
    7a78:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7a7c:	9303      	str	r3, [sp, #12]
    7a7e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7a82:	9302      	str	r3, [sp, #8]
    7a84:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7a88:	9301      	str	r3, [sp, #4]
    7a8a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7a8e:	9300      	str	r3, [sp, #0]
    7a90:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    7a94:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    7a98:	f7ff ff70 	bl	797c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7a9c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    7aa0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7aa2:	e7ce      	b.n	7a42 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7aa6:	1c5a      	adds	r2, r3, #1
    7aa8:	d00d      	beq.n	7ac6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7aaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7aae:	2100      	movs	r1, #0
    7ab0:	4638      	mov	r0, r7
    7ab2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7ab6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7aba:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7abe:	d104      	bne.n	7aca <z_init_static_threads+0x92>
	z_sched_start(thread);
    7ac0:	4640      	mov	r0, r8
    7ac2:	f000 fc77 	bl	83b4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7ac6:	342c      	adds	r4, #44	; 0x2c
    7ac8:	e7c9      	b.n	7a5e <z_init_static_threads+0x26>
    7aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7ace:	2300      	movs	r3, #0
    7ad0:	f7f9 fb16 	bl	1100 <__aeabi_uldivmod>
    7ad4:	4602      	mov	r2, r0
    7ad6:	460b      	mov	r3, r1
    7ad8:	f108 0018 	add.w	r0, r8, #24
    7adc:	4649      	mov	r1, r9
    7ade:	f000 fe7f 	bl	87e0 <z_add_timeout>
    7ae2:	e7f0      	b.n	7ac6 <z_init_static_threads+0x8e>
    7ae4:	0000a6a8 	.word	0x0000a6a8
    7ae8:	0000a6a8 	.word	0x0000a6a8
    7aec:	0000a181 	.word	0x0000a181

00007af0 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7af0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7af2:	4c0b      	ldr	r4, [pc, #44]	; (7b20 <idle+0x30>)
	return !z_sys_post_kernel;
    7af4:	4d0b      	ldr	r5, [pc, #44]	; (7b24 <idle+0x34>)
	__asm__ volatile(
    7af6:	f04f 0220 	mov.w	r2, #32
    7afa:	f3ef 8311 	mrs	r3, BASEPRI
    7afe:	f382 8812 	msr	BASEPRI_MAX, r2
    7b02:	f3bf 8f6f 	isb	sy
    7b06:	f002 fbd2 	bl	a2ae <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7b0a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7b0c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7b0e:	b913      	cbnz	r3, 7b16 <idle+0x26>
	arch_cpu_idle();
    7b10:	f7fb fc96 	bl	3440 <arch_cpu_idle>
}
    7b14:	e7ef      	b.n	7af6 <idle+0x6>
    7b16:	f7fa fa89 	bl	202c <pm_system_suspend>
    7b1a:	2800      	cmp	r0, #0
    7b1c:	d1eb      	bne.n	7af6 <idle+0x6>
    7b1e:	e7f7      	b.n	7b10 <idle+0x20>
    7b20:	20001520 	.word	0x20001520
    7b24:	20001587 	.word	0x20001587

00007b28 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7b28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7b2c:	4604      	mov	r4, r0
    7b2e:	4617      	mov	r7, r2
    7b30:	461e      	mov	r6, r3
    7b32:	f04f 0320 	mov.w	r3, #32
    7b36:	f3ef 8811 	mrs	r8, BASEPRI
    7b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    7b3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b42:	68c3      	ldr	r3, [r0, #12]
    7b44:	4a33      	ldr	r2, [pc, #204]	; (7c14 <z_impl_k_mutex_lock+0xec>)
    7b46:	b17b      	cbz	r3, 7b68 <z_impl_k_mutex_lock+0x40>
    7b48:	6880      	ldr	r0, [r0, #8]
    7b4a:	6891      	ldr	r1, [r2, #8]
    7b4c:	4288      	cmp	r0, r1
    7b4e:	d019      	beq.n	7b84 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7b50:	ea57 0306 	orrs.w	r3, r7, r6
    7b54:	d118      	bne.n	7b88 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7b56:	f388 8811 	msr	BASEPRI, r8
    7b5a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7b5e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7b62:	b002      	add	sp, #8
    7b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7b68:	6891      	ldr	r1, [r2, #8]
    7b6a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7b6e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7b70:	3301      	adds	r3, #1
    7b72:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7b74:	6893      	ldr	r3, [r2, #8]
    7b76:	60a3      	str	r3, [r4, #8]
    7b78:	f388 8811 	msr	BASEPRI, r8
    7b7c:	f3bf 8f6f 	isb	sy
		return 0;
    7b80:	2000      	movs	r0, #0
    7b82:	e7ee      	b.n	7b62 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    7b84:	6921      	ldr	r1, [r4, #16]
    7b86:	e7f2      	b.n	7b6e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7b88:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7b8c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7b90:	4299      	cmp	r1, r3
    7b92:	bfa8      	it	ge
    7b94:	4619      	movge	r1, r3
    7b96:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7b9a:	4291      	cmp	r1, r2
    7b9c:	bfb8      	it	lt
    7b9e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7ba0:	428b      	cmp	r3, r1
    7ba2:	dd2e      	ble.n	7c02 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7ba4:	f002 f981 	bl	9eaa <adjust_owner_prio.isra.0>
    7ba8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7baa:	e9cd 7600 	strd	r7, r6, [sp]
    7bae:	481a      	ldr	r0, [pc, #104]	; (7c18 <z_impl_k_mutex_lock+0xf0>)
    7bb0:	4622      	mov	r2, r4
    7bb2:	4641      	mov	r1, r8
    7bb4:	f000 fb88 	bl	82c8 <z_pend_curr>
	if (got_mutex == 0) {
    7bb8:	2800      	cmp	r0, #0
    7bba:	d0e1      	beq.n	7b80 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    7bbc:	f04f 0320 	mov.w	r3, #32
    7bc0:	f3ef 8611 	mrs	r6, BASEPRI
    7bc4:	f383 8812 	msr	BASEPRI_MAX, r3
    7bc8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    7bcc:	68a0      	ldr	r0, [r4, #8]
    7bce:	b1d0      	cbz	r0, 7c06 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7bd0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7bd2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bd4:	429c      	cmp	r4, r3
    7bd6:	d00a      	beq.n	7bee <z_impl_k_mutex_lock+0xc6>
    7bd8:	b14b      	cbz	r3, 7bee <z_impl_k_mutex_lock+0xc6>
    7bda:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7bde:	4299      	cmp	r1, r3
    7be0:	bfa8      	it	ge
    7be2:	4619      	movge	r1, r3
    7be4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7be8:	4299      	cmp	r1, r3
    7bea:	bfb8      	it	lt
    7bec:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7bee:	f002 f95c 	bl	9eaa <adjust_owner_prio.isra.0>
    7bf2:	b140      	cbz	r0, 7c06 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7bf4:	4808      	ldr	r0, [pc, #32]	; (7c18 <z_impl_k_mutex_lock+0xf0>)
    7bf6:	4631      	mov	r1, r6
    7bf8:	f000 fbca 	bl	8390 <z_reschedule>
	return -EAGAIN;
    7bfc:	f06f 000a 	mvn.w	r0, #10
    7c00:	e7af      	b.n	7b62 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    7c02:	2500      	movs	r5, #0
    7c04:	e7d1      	b.n	7baa <z_impl_k_mutex_lock+0x82>
	if (resched) {
    7c06:	2d00      	cmp	r5, #0
    7c08:	d1f4      	bne.n	7bf4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    7c0a:	f386 8811 	msr	BASEPRI, r6
    7c0e:	f3bf 8f6f 	isb	sy
    7c12:	e7f3      	b.n	7bfc <z_impl_k_mutex_lock+0xd4>
    7c14:	20001520 	.word	0x20001520
    7c18:	20001588 	.word	0x20001588

00007c1c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7c1c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7c1e:	6883      	ldr	r3, [r0, #8]
{
    7c20:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7c22:	b36b      	cbz	r3, 7c80 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7c24:	4a19      	ldr	r2, [pc, #100]	; (7c8c <z_impl_k_mutex_unlock+0x70>)
    7c26:	6892      	ldr	r2, [r2, #8]
    7c28:	4293      	cmp	r3, r2
    7c2a:	d12c      	bne.n	7c86 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7c2c:	68c3      	ldr	r3, [r0, #12]
    7c2e:	2b01      	cmp	r3, #1
    7c30:	d903      	bls.n	7c3a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7c32:	3b01      	subs	r3, #1
    7c34:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7c36:	2000      	movs	r0, #0
}
    7c38:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7c3a:	f04f 0320 	mov.w	r3, #32
    7c3e:	f3ef 8511 	mrs	r5, BASEPRI
    7c42:	f383 8812 	msr	BASEPRI_MAX, r3
    7c46:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7c4a:	6901      	ldr	r1, [r0, #16]
    7c4c:	6880      	ldr	r0, [r0, #8]
    7c4e:	f002 f92c 	bl	9eaa <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7c52:	4620      	mov	r0, r4
    7c54:	f002 fa98 	bl	a188 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7c58:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7c5a:	b158      	cbz	r0, 7c74 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    7c5c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7c60:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7c62:	2200      	movs	r2, #0
    7c64:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7c66:	f002 fa59 	bl	a11c <z_ready_thread>
		z_reschedule(&lock, key);
    7c6a:	4809      	ldr	r0, [pc, #36]	; (7c90 <z_impl_k_mutex_unlock+0x74>)
    7c6c:	4629      	mov	r1, r5
    7c6e:	f000 fb8f 	bl	8390 <z_reschedule>
    7c72:	e7e0      	b.n	7c36 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    7c74:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7c76:	f385 8811 	msr	BASEPRI, r5
    7c7a:	f3bf 8f6f 	isb	sy
    7c7e:	e7da      	b.n	7c36 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    7c80:	f06f 0015 	mvn.w	r0, #21
    7c84:	e7d8      	b.n	7c38 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    7c86:	f04f 30ff 	mov.w	r0, #4294967295
    7c8a:	e7d5      	b.n	7c38 <z_impl_k_mutex_unlock+0x1c>
    7c8c:	20001520 	.word	0x20001520
    7c90:	20001588 	.word	0x20001588

00007c94 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    7c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7c96:	4611      	mov	r1, r2
	__asm__ volatile(
    7c98:	f04f 0220 	mov.w	r2, #32
    7c9c:	f3ef 8511 	mrs	r5, BASEPRI
    7ca0:	f382 8812 	msr	BASEPRI_MAX, r2
    7ca4:	f3bf 8f6f 	isb	sy
    7ca8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    7caa:	b19c      	cbz	r4, 7cd4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7cac:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7cae:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    7cb0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    7cb4:	4294      	cmp	r4, r2
	list->head = node;
    7cb6:	6003      	str	r3, [r0, #0]
	list->tail = node;
    7cb8:	bf08      	it	eq
    7cba:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    7cbc:	2101      	movs	r1, #1
    7cbe:	4620      	mov	r0, r4
    7cc0:	f002 f964 	bl	9f8c <z_queue_node_peek>
    7cc4:	4604      	mov	r4, r0
	__asm__ volatile(
    7cc6:	f385 8811 	msr	BASEPRI, r5
    7cca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    7cce:	4620      	mov	r0, r4
    7cd0:	b003      	add	sp, #12
    7cd2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7cd4:	ea51 0203 	orrs.w	r2, r1, r3
    7cd8:	d0f5      	beq.n	7cc6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    7cda:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    7cde:	e9cd 1300 	strd	r1, r3, [sp]
    7ce2:	4610      	mov	r0, r2
    7ce4:	4629      	mov	r1, r5
    7ce6:	f000 faef 	bl	82c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    7cea:	2800      	cmp	r0, #0
    7cec:	d1ef      	bne.n	7cce <z_impl_k_queue_get+0x3a>
    7cee:	4b02      	ldr	r3, [pc, #8]	; (7cf8 <z_impl_k_queue_get+0x64>)
    7cf0:	689b      	ldr	r3, [r3, #8]
    7cf2:	695c      	ldr	r4, [r3, #20]
    7cf4:	e7eb      	b.n	7cce <z_impl_k_queue_get+0x3a>
    7cf6:	bf00      	nop
    7cf8:	20001520 	.word	0x20001520

00007cfc <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7cfc:	b538      	push	{r3, r4, r5, lr}
    7cfe:	4604      	mov	r4, r0
	__asm__ volatile(
    7d00:	f04f 0320 	mov.w	r3, #32
    7d04:	f3ef 8511 	mrs	r5, BASEPRI
    7d08:	f383 8812 	msr	BASEPRI_MAX, r3
    7d0c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7d10:	f002 fa3a 	bl	a188 <z_unpend_first_thread>

	if (thread != NULL) {
    7d14:	b148      	cbz	r0, 7d2a <z_impl_k_sem_give+0x2e>
    7d16:	2200      	movs	r2, #0
    7d18:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7d1a:	f002 f9ff 	bl	a11c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
    7d1e:	4629      	mov	r1, r5
    7d20:	4807      	ldr	r0, [pc, #28]	; (7d40 <z_impl_k_sem_give+0x44>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    7d26:	f000 bb33 	b.w	8390 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7d2a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7d2e:	429a      	cmp	r2, r3
    7d30:	bf18      	it	ne
    7d32:	3301      	addne	r3, #1
    7d34:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    7d36:	f385 8811 	msr	BASEPRI, r5
    7d3a:	f3bf 8f6f 	isb	sy
}
    7d3e:	bd38      	pop	{r3, r4, r5, pc}
    7d40:	20001588 	.word	0x20001588

00007d44 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7d44:	b513      	push	{r0, r1, r4, lr}
	__asm__ volatile(
    7d46:	f04f 0420 	mov.w	r4, #32
    7d4a:	f3ef 8111 	mrs	r1, BASEPRI
    7d4e:	f384 8812 	msr	BASEPRI_MAX, r4
    7d52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7d56:	6884      	ldr	r4, [r0, #8]
    7d58:	b144      	cbz	r4, 7d6c <z_impl_k_sem_take+0x28>
		sem->count--;
    7d5a:	3c01      	subs	r4, #1
    7d5c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7d5e:	f381 8811 	msr	BASEPRI, r1
    7d62:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7d66:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7d68:	b002      	add	sp, #8
    7d6a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7d6c:	ea52 0403 	orrs.w	r4, r2, r3
    7d70:	d106      	bne.n	7d80 <z_impl_k_sem_take+0x3c>
    7d72:	f381 8811 	msr	BASEPRI, r1
    7d76:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7d7a:	f06f 000f 	mvn.w	r0, #15
    7d7e:	e7f3      	b.n	7d68 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7d80:	e9cd 2300 	strd	r2, r3, [sp]
    7d84:	4602      	mov	r2, r0
    7d86:	4802      	ldr	r0, [pc, #8]	; (7d90 <z_impl_k_sem_take+0x4c>)
    7d88:	f000 fa9e 	bl	82c8 <z_pend_curr>
	return ret;
    7d8c:	e7ec      	b.n	7d68 <z_impl_k_sem_take+0x24>
    7d8e:	bf00      	nop
    7d90:	20001588 	.word	0x20001588

00007d94 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    7d98:	4e4a      	ldr	r6, [pc, #296]	; (7ec4 <work_queue_main+0x130>)
    7d9a:	b085      	sub	sp, #20
    7d9c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    7d9e:	f04f 38ff 	mov.w	r8, #4294967295
    7da2:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    7da6:	f04f 0320 	mov.w	r3, #32
    7daa:	f3ef 8711 	mrs	r7, BASEPRI
    7dae:	f383 8812 	msr	BASEPRI_MAX, r3
    7db2:	f3bf 8f6f 	isb	sy
    7db6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7dba:	b98d      	cbnz	r5, 7de0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    7dbc:	2102      	movs	r1, #2
    7dbe:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7dc2:	f002 f906 	bl	9fd2 <flag_test_and_clear>
    7dc6:	2800      	cmp	r0, #0
    7dc8:	d143      	bne.n	7e52 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7dca:	2300      	movs	r3, #0
    7dcc:	e9cd 8900 	strd	r8, r9, [sp]
    7dd0:	9302      	str	r3, [sp, #8]
    7dd2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    7dd6:	4639      	mov	r1, r7
    7dd8:	483b      	ldr	r0, [pc, #236]	; (7ec8 <work_queue_main+0x134>)
    7dda:	f000 fc8f 	bl	86fc <z_sched_wait>
			continue;
    7dde:	e7e2      	b.n	7da6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7de0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    7de4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7de6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7dea:	4295      	cmp	r5, r2
	list->tail = node;
    7dec:	bf08      	it	eq
    7dee:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7df2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7df6:	f043 0302 	orr.w	r3, r3, #2
    7dfa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7dfe:	68eb      	ldr	r3, [r5, #12]
    7e00:	f023 0304 	bic.w	r3, r3, #4
    7e04:	f043 0301 	orr.w	r3, r3, #1
    7e08:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    7e0a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    7e0c:	f387 8811 	msr	BASEPRI, r7
    7e10:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    7e14:	4628      	mov	r0, r5
    7e16:	4798      	blx	r3
	__asm__ volatile(
    7e18:	f04f 0320 	mov.w	r3, #32
    7e1c:	f3ef 8b11 	mrs	fp, BASEPRI
    7e20:	f383 8812 	msr	BASEPRI_MAX, r3
    7e24:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    7e28:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7e2a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7e2c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7e30:	d419      	bmi.n	7e66 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    7e32:	60ea      	str	r2, [r5, #12]
    7e34:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7e38:	f023 0302 	bic.w	r3, r3, #2
    7e3c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    7e40:	f38b 8811 	msr	BASEPRI, fp
    7e44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7e48:	05db      	lsls	r3, r3, #23
    7e4a:	d4ac      	bmi.n	7da6 <work_queue_main+0x12>
	z_impl_k_yield();
    7e4c:	f000 fb3a 	bl	84c4 <z_impl_k_yield>
}
    7e50:	e7a9      	b.n	7da6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    7e52:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    7e56:	2200      	movs	r2, #0
    7e58:	2101      	movs	r1, #1
    7e5a:	4628      	mov	r0, r5
    7e5c:	f002 f9ee 	bl	a23c <z_sched_wake>
    7e60:	2800      	cmp	r0, #0
    7e62:	d1f8      	bne.n	7e56 <work_queue_main+0xc2>
    7e64:	e7b1      	b.n	7dca <work_queue_main+0x36>
	return list->head;
    7e66:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    7e68:	f023 0303 	bic.w	r3, r3, #3
    7e6c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e6e:	2800      	cmp	r0, #0
    7e70:	d0e0      	beq.n	7e34 <work_queue_main+0xa0>
	return node->next;
    7e72:	2700      	movs	r7, #0
    7e74:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    7e78:	463b      	mov	r3, r7
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d0da      	beq.n	7e34 <work_queue_main+0xa0>
		if (wc->work == work) {
    7e7e:	6842      	ldr	r2, [r0, #4]
    7e80:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    7e82:	4601      	mov	r1, r0
		if (wc->work == work) {
    7e84:	d10c      	bne.n	7ea0 <work_queue_main+0x10c>
	return node->next;
    7e86:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    7e88:	b99f      	cbnz	r7, 7eb2 <work_queue_main+0x11e>
    7e8a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    7e8c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e8e:	4282      	cmp	r2, r0
    7e90:	d100      	bne.n	7e94 <work_queue_main+0x100>
	list->tail = node;
    7e92:	6071      	str	r1, [r6, #4]
	parent->next = child;
    7e94:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    7e98:	f7ff ff30 	bl	7cfc <z_impl_k_sem_give>
}
    7e9c:	4639      	mov	r1, r7
    7e9e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7ea0:	f1ba 0f00 	cmp.w	sl, #0
    7ea4:	d00b      	beq.n	7ebe <work_queue_main+0x12a>
	return node->next;
    7ea6:	f8da 2000 	ldr.w	r2, [sl]
    7eaa:	4650      	mov	r0, sl
    7eac:	460f      	mov	r7, r1
    7eae:	4692      	mov	sl, r2
    7eb0:	e7e3      	b.n	7e7a <work_queue_main+0xe6>
	parent->next = child;
    7eb2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7eb4:	6872      	ldr	r2, [r6, #4]
    7eb6:	4282      	cmp	r2, r0
	list->tail = node;
    7eb8:	bf08      	it	eq
    7eba:	6077      	streq	r7, [r6, #4]
}
    7ebc:	e7ea      	b.n	7e94 <work_queue_main+0x100>
    7ebe:	4652      	mov	r2, sl
    7ec0:	e7f3      	b.n	7eaa <work_queue_main+0x116>
    7ec2:	bf00      	nop
    7ec4:	20001544 	.word	0x20001544
    7ec8:	20001588 	.word	0x20001588

00007ecc <submit_to_queue_locked>:
{
    7ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    7ece:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7ed0:	079a      	lsls	r2, r3, #30
{
    7ed2:	4604      	mov	r4, r0
    7ed4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7ed6:	f3c3 0640 	ubfx	r6, r3, #1, #1
    7eda:	d42c      	bmi.n	7f36 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7edc:	075b      	lsls	r3, r3, #29
    7ede:	d41a      	bmi.n	7f16 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    7ee0:	680b      	ldr	r3, [r1, #0]
    7ee2:	b90b      	cbnz	r3, 7ee8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7ee4:	6883      	ldr	r3, [r0, #8]
    7ee6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    7ee8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7eea:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    7eec:	bf44      	itt	mi
    7eee:	68a3      	ldrmi	r3, [r4, #8]
    7ef0:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    7ef2:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    7ef4:	bf4c      	ite	mi
    7ef6:	2602      	movmi	r6, #2
		ret = 1;
    7ef8:	2601      	movpl	r6, #1
	if (queue == NULL) {
    7efa:	2d00      	cmp	r5, #0
    7efc:	d03a      	beq.n	7f74 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7efe:	4b1f      	ldr	r3, [pc, #124]	; (7f7c <submit_to_queue_locked+0xb0>)
    7f00:	689b      	ldr	r3, [r3, #8]
    7f02:	42ab      	cmp	r3, r5
    7f04:	d00a      	beq.n	7f1c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    7f06:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7f0a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7f0c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7f10:	d414      	bmi.n	7f3c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    7f12:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    7f16:	2300      	movs	r3, #0
    7f18:	603b      	str	r3, [r7, #0]
	return ret;
    7f1a:	e025      	b.n	7f68 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7f1c:	f001 ffb3 	bl	9e86 <k_is_in_isr>
    7f20:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    7f24:	2800      	cmp	r0, #0
    7f26:	d1f0      	bne.n	7f0a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7f28:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7f2a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7f2e:	d5f0      	bpl.n	7f12 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    7f30:	b152      	cbz	r2, 7f48 <submit_to_queue_locked+0x7c>
    7f32:	075b      	lsls	r3, r3, #29
    7f34:	d408      	bmi.n	7f48 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    7f36:	f06f 060f 	mvn.w	r6, #15
    7f3a:	e7ec      	b.n	7f16 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    7f3c:	2a00      	cmp	r2, #0
    7f3e:	d1fa      	bne.n	7f36 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    7f40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    7f44:	2b00      	cmp	r3, #0
    7f46:	d1f6      	bne.n	7f36 <submit_to_queue_locked+0x6a>
	parent->next = child;
    7f48:	2300      	movs	r3, #0
    7f4a:	6023      	str	r3, [r4, #0]
	return list->tail;
    7f4c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    7f50:	b963      	cbnz	r3, 7f6c <submit_to_queue_locked+0xa0>
	list->head = node;
    7f52:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7f56:	4628      	mov	r0, r5
    7f58:	f002 f846 	bl	9fe8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    7f5c:	68e3      	ldr	r3, [r4, #12]
    7f5e:	f043 0304 	orr.w	r3, r3, #4
    7f62:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7f64:	683b      	ldr	r3, [r7, #0]
    7f66:	60a3      	str	r3, [r4, #8]
}
    7f68:	4630      	mov	r0, r6
    7f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7f6c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7f6e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    7f72:	e7f0      	b.n	7f56 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    7f74:	f06f 0615 	mvn.w	r6, #21
    7f78:	e7cd      	b.n	7f16 <submit_to_queue_locked+0x4a>
    7f7a:	bf00      	nop
    7f7c:	20001520 	.word	0x20001520

00007f80 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f82:	b089      	sub	sp, #36	; 0x24
    7f84:	4604      	mov	r4, r0
	list->head = NULL;
    7f86:	2000      	movs	r0, #0
	list->tail = NULL;
    7f88:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    7f8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7f8e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7f92:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    7f96:	f104 0090 	add.w	r0, r4, #144	; 0x90
    7f9a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7f9e:	b31d      	cbz	r5, 7fe8 <k_work_queue_start+0x68>
    7fa0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7fa2:	2800      	cmp	r0, #0
    7fa4:	f240 1001 	movw	r0, #257	; 0x101
    7fa8:	bf08      	it	eq
    7faa:	2001      	moveq	r0, #1
	*flagp = flags;
    7fac:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7fb0:	2000      	movs	r0, #0
    7fb2:	f04f 36ff 	mov.w	r6, #4294967295
    7fb6:	f04f 37ff 	mov.w	r7, #4294967295
    7fba:	e9cd 3003 	strd	r3, r0, [sp, #12]
    7fbe:	e9cd 0001 	strd	r0, r0, [sp, #4]
    7fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    7fc6:	4b09      	ldr	r3, [pc, #36]	; (7fec <k_work_queue_start+0x6c>)
    7fc8:	9400      	str	r4, [sp, #0]
    7fca:	4620      	mov	r0, r4
    7fcc:	f7ff fd08 	bl	79e0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    7fd0:	b125      	cbz	r5, 7fdc <k_work_queue_start+0x5c>
    7fd2:	6829      	ldr	r1, [r5, #0]
    7fd4:	b111      	cbz	r1, 7fdc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    7fd6:	4620      	mov	r0, r4
    7fd8:	f001 ff5b 	bl	9e92 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7fdc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    7fde:	b009      	add	sp, #36	; 0x24
    7fe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7fe4:	f001 bf58 	b.w	9e98 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7fe8:	2001      	movs	r0, #1
    7fea:	e7df      	b.n	7fac <k_work_queue_start+0x2c>
    7fec:	00007d95 	.word	0x00007d95

00007ff0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    7ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7ff2:	9001      	str	r0, [sp, #4]
    7ff4:	4608      	mov	r0, r1
	__asm__ volatile(
    7ff6:	f04f 0120 	mov.w	r1, #32
    7ffa:	f3ef 8411 	mrs	r4, BASEPRI
    7ffe:	f381 8812 	msr	BASEPRI_MAX, r1
    8002:	f3bf 8f6f 	isb	sy
	return *flagp;
    8006:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    8008:	f011 0f0e 	tst.w	r1, #14
    800c:	d116      	bne.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    800e:	ea53 0502 	orrs.w	r5, r3, r2
    8012:	d108      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
		return submit_to_queue_locked(work, queuep);
    8014:	a901      	add	r1, sp, #4
    8016:	f7ff ff59 	bl	7ecc <submit_to_queue_locked>
	__asm__ volatile(
    801a:	f384 8811 	msr	BASEPRI, r4
    801e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    8022:	b003      	add	sp, #12
    8024:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    8026:	f041 0108 	orr.w	r1, r1, #8
    802a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    802c:	9901      	ldr	r1, [sp, #4]
    802e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    8030:	3010      	adds	r0, #16
    8032:	4903      	ldr	r1, [pc, #12]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    8034:	f000 fbd4 	bl	87e0 <z_add_timeout>
	return ret;
    8038:	2001      	movs	r0, #1
    803a:	e7ee      	b.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
	int ret = 0;
    803c:	2000      	movs	r0, #0
    803e:	e7ec      	b.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    8040:	00009ff7 	.word	0x00009ff7

00008044 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    8044:	89c3      	ldrh	r3, [r0, #14]
    8046:	2b7f      	cmp	r3, #127	; 0x7f
    8048:	d812      	bhi.n	8070 <sliceable+0x2c>
	int ret = slice_ticks;
    804a:	4b0a      	ldr	r3, [pc, #40]	; (8074 <sliceable+0x30>)
    804c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    804e:	b163      	cbz	r3, 806a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8050:	4b09      	ldr	r3, [pc, #36]	; (8078 <sliceable+0x34>)
    8052:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8056:	681b      	ldr	r3, [r3, #0]
    8058:	429a      	cmp	r2, r3
    805a:	db09      	blt.n	8070 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    805c:	7b43      	ldrb	r3, [r0, #13]
    805e:	06db      	lsls	r3, r3, #27
    8060:	d106      	bne.n	8070 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    8062:	4b06      	ldr	r3, [pc, #24]	; (807c <sliceable+0x38>)
    8064:	1ac3      	subs	r3, r0, r3
    8066:	bf18      	it	ne
    8068:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    806a:	f003 0001 	and.w	r0, r3, #1
    806e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    8070:	2300      	movs	r3, #0
    8072:	e7fa      	b.n	806a <sliceable+0x26>
    8074:	20001554 	.word	0x20001554
    8078:	20001550 	.word	0x20001550
    807c:	20000590 	.word	0x20000590

00008080 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    8080:	4b04      	ldr	r3, [pc, #16]	; (8094 <slice_timeout+0x14>)
    8082:	1ac0      	subs	r0, r0, r3
    8084:	4b04      	ldr	r3, [pc, #16]	; (8098 <slice_timeout+0x18>)
    8086:	10c0      	asrs	r0, r0, #3
    8088:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    808a:	4b04      	ldr	r3, [pc, #16]	; (809c <slice_timeout+0x1c>)
    808c:	2201      	movs	r2, #1
    808e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    8090:	4770      	bx	lr
    8092:	bf00      	nop
    8094:	20000690 	.word	0x20000690
    8098:	aaaaaaab 	.word	0xaaaaaaab
    809c:	20001588 	.word	0x20001588

000080a0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    80a0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    80a2:	4b0e      	ldr	r3, [pc, #56]	; (80dc <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    80a4:	4c0e      	ldr	r4, [pc, #56]	; (80e0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    80a6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    80a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    80ac:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    80b0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    80b2:	4620      	mov	r0, r4
    80b4:	f002 f8e5 	bl	a282 <z_abort_timeout>
	slice_expired[cpu] = false;
    80b8:	4b0a      	ldr	r3, [pc, #40]	; (80e4 <z_reset_time_slice+0x44>)
    80ba:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    80bc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    80be:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    80c0:	f7ff ffc0 	bl	8044 <sliceable>
    80c4:	b148      	cbz	r0, 80da <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    80c6:	4b08      	ldr	r3, [pc, #32]	; (80e8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    80c8:	4908      	ldr	r1, [pc, #32]	; (80ec <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    80ca:	681a      	ldr	r2, [r3, #0]
    80cc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    80ce:	4620      	mov	r0, r4
    80d0:	17d3      	asrs	r3, r2, #31
	}
}
    80d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    80d6:	f000 bb83 	b.w	87e0 <z_add_timeout>
}
    80da:	bd70      	pop	{r4, r5, r6, pc}
    80dc:	20001520 	.word	0x20001520
    80e0:	20000690 	.word	0x20000690
    80e4:	20001588 	.word	0x20001588
    80e8:	20001554 	.word	0x20001554
    80ec:	00008081 	.word	0x00008081

000080f0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    80f0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    80f2:	4d0d      	ldr	r5, [pc, #52]	; (8128 <update_cache+0x38>)
    80f4:	462b      	mov	r3, r5
    80f6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80fa:	429c      	cmp	r4, r3
    80fc:	d000      	beq.n	8100 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    80fe:	b904      	cbnz	r4, 8102 <update_cache+0x12>
    8100:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8102:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8104:	b938      	cbnz	r0, 8116 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    8106:	7b5a      	ldrb	r2, [r3, #13]
    8108:	06d2      	lsls	r2, r2, #27
    810a:	d104      	bne.n	8116 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    810c:	69a2      	ldr	r2, [r4, #24]
    810e:	b912      	cbnz	r2, 8116 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    8110:	89da      	ldrh	r2, [r3, #14]
    8112:	2a7f      	cmp	r2, #127	; 0x7f
    8114:	d805      	bhi.n	8122 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    8116:	429c      	cmp	r4, r3
    8118:	d002      	beq.n	8120 <update_cache+0x30>
			z_reset_time_slice(thread);
    811a:	4620      	mov	r0, r4
    811c:	f7ff ffc0 	bl	80a0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    8120:	4623      	mov	r3, r4
    8122:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    8124:	bd38      	pop	{r3, r4, r5, pc}
    8126:	bf00      	nop
    8128:	20001520 	.word	0x20001520

0000812c <move_thread_to_end_of_prio_q>:
{
    812c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    812e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8132:	7b43      	ldrb	r3, [r0, #13]
    8134:	2a00      	cmp	r2, #0
{
    8136:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8138:	da04      	bge.n	8144 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    813a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    813e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8140:	f001 ffb2 	bl	a0a8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8144:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8146:	4a15      	ldr	r2, [pc, #84]	; (819c <move_thread_to_end_of_prio_q+0x70>)
    8148:	f063 037f 	orn	r3, r3, #127	; 0x7f
    814c:	4610      	mov	r0, r2
    814e:	734b      	strb	r3, [r1, #13]
    8150:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8154:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8156:	4283      	cmp	r3, r0
    8158:	bf08      	it	eq
    815a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    815c:	b923      	cbnz	r3, 8168 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    815e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    8162:	6021      	str	r1, [r4, #0]
	list->tail = node;
    8164:	6211      	str	r1, [r2, #32]
}
    8166:	e00c      	b.n	8182 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    8168:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    816c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    8170:	42b5      	cmp	r5, r6
    8172:	d00e      	beq.n	8192 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8174:	42ae      	cmp	r6, r5
    8176:	dd0c      	ble.n	8192 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8178:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    817a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    817e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    8180:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    8182:	6890      	ldr	r0, [r2, #8]
    8184:	1a43      	subs	r3, r0, r1
    8186:	4258      	negs	r0, r3
}
    8188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    818c:	4158      	adcs	r0, r3
    818e:	f7ff bfaf 	b.w	80f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8192:	429c      	cmp	r4, r3
    8194:	d0e3      	beq.n	815e <move_thread_to_end_of_prio_q+0x32>
    8196:	681b      	ldr	r3, [r3, #0]
    8198:	e7e0      	b.n	815c <move_thread_to_end_of_prio_q+0x30>
    819a:	bf00      	nop
    819c:	20001520 	.word	0x20001520

000081a0 <ready_thread>:
{
    81a0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    81a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    81a6:	7b42      	ldrb	r2, [r0, #13]
    81a8:	2b00      	cmp	r3, #0
    81aa:	db29      	blt.n	8200 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    81ac:	06d3      	lsls	r3, r2, #27
    81ae:	d127      	bne.n	8200 <ready_thread+0x60>
	return node->next != NULL;
    81b0:	6983      	ldr	r3, [r0, #24]
    81b2:	bb2b      	cbnz	r3, 8200 <ready_thread+0x60>
	return list->head == list;
    81b4:	4913      	ldr	r1, [pc, #76]	; (8204 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    81b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    81ba:	7342      	strb	r2, [r0, #13]
    81bc:	460a      	mov	r2, r1
    81be:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81c2:	4294      	cmp	r4, r2
    81c4:	bf18      	it	ne
    81c6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    81c8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    81ca:	b923      	cbnz	r3, 81d6 <ready_thread+0x36>
	node->prev = tail;
    81cc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    81d0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    81d2:	6208      	str	r0, [r1, #32]
}
    81d4:	e00c      	b.n	81f0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    81d6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    81da:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    81de:	42b5      	cmp	r5, r6
    81e0:	d00a      	beq.n	81f8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    81e2:	42ae      	cmp	r6, r5
    81e4:	dd08      	ble.n	81f8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    81e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    81e8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    81ec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    81ee:	6058      	str	r0, [r3, #4]
}
    81f0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    81f2:	2000      	movs	r0, #0
    81f4:	f7ff bf7c 	b.w	80f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    81f8:	42a3      	cmp	r3, r4
    81fa:	d0e7      	beq.n	81cc <ready_thread+0x2c>
    81fc:	681b      	ldr	r3, [r3, #0]
    81fe:	e7e4      	b.n	81ca <ready_thread+0x2a>
}
    8200:	bc70      	pop	{r4, r5, r6}
    8202:	4770      	bx	lr
    8204:	20001520 	.word	0x20001520

00008208 <unready_thread>:
{
    8208:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    820a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    820e:	7b43      	ldrb	r3, [r0, #13]
    8210:	2a00      	cmp	r2, #0
{
    8212:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8214:	da04      	bge.n	8220 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    821a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    821c:	f001 ff44 	bl	a0a8 <sys_dlist_remove>
	update_cache(thread == _current);
    8220:	4b04      	ldr	r3, [pc, #16]	; (8234 <unready_thread+0x2c>)
    8222:	6898      	ldr	r0, [r3, #8]
    8224:	1a43      	subs	r3, r0, r1
    8226:	4258      	negs	r0, r3
    8228:	4158      	adcs	r0, r3
}
    822a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    822e:	f7ff bf5f 	b.w	80f0 <update_cache>
    8232:	bf00      	nop
    8234:	20001520 	.word	0x20001520

00008238 <pend_locked>:
{
    8238:	b570      	push	{r4, r5, r6, lr}
    823a:	4615      	mov	r5, r2
    823c:	461c      	mov	r4, r3
    823e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    8240:	f001 ff44 	bl	a0cc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8244:	f1b4 3fff 	cmp.w	r4, #4294967295
    8248:	bf08      	it	eq
    824a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    824e:	d008      	beq.n	8262 <pend_locked+0x2a>
    8250:	462a      	mov	r2, r5
    8252:	4623      	mov	r3, r4
    8254:	f106 0018 	add.w	r0, r6, #24
    8258:	4902      	ldr	r1, [pc, #8]	; (8264 <pend_locked+0x2c>)
}
    825a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    825e:	f000 babf 	b.w	87e0 <z_add_timeout>
    8262:	bd70      	pop	{r4, r5, r6, pc}
    8264:	0000a181 	.word	0x0000a181

00008268 <z_time_slice>:
{
    8268:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    826a:	f04f 0320 	mov.w	r3, #32
    826e:	f3ef 8511 	mrs	r5, BASEPRI
    8272:	f383 8812 	msr	BASEPRI_MAX, r3
    8276:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    827a:	4b10      	ldr	r3, [pc, #64]	; (82bc <z_time_slice+0x54>)
	if (pending_current == curr) {
    827c:	4a10      	ldr	r2, [pc, #64]	; (82c0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    827e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    8280:	6810      	ldr	r0, [r2, #0]
    8282:	42a0      	cmp	r0, r4
    8284:	d106      	bne.n	8294 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    8286:	f7ff ff0b 	bl	80a0 <z_reset_time_slice>
	__asm__ volatile(
    828a:	f385 8811 	msr	BASEPRI, r5
    828e:	f3bf 8f6f 	isb	sy
}
    8292:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    8294:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    8296:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    8298:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    829a:	4a0a      	ldr	r2, [pc, #40]	; (82c4 <z_time_slice+0x5c>)
    829c:	5cd3      	ldrb	r3, [r2, r3]
    829e:	2b00      	cmp	r3, #0
    82a0:	d0f3      	beq.n	828a <z_time_slice+0x22>
    82a2:	4620      	mov	r0, r4
    82a4:	f7ff fece 	bl	8044 <sliceable>
    82a8:	2800      	cmp	r0, #0
    82aa:	d0ee      	beq.n	828a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    82ac:	7b63      	ldrb	r3, [r4, #13]
    82ae:	06db      	lsls	r3, r3, #27
    82b0:	d102      	bne.n	82b8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    82b2:	4620      	mov	r0, r4
    82b4:	f7ff ff3a 	bl	812c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    82b8:	4620      	mov	r0, r4
    82ba:	e7e4      	b.n	8286 <z_time_slice+0x1e>
    82bc:	20001520 	.word	0x20001520
    82c0:	2000154c 	.word	0x2000154c
    82c4:	20001588 	.word	0x20001588

000082c8 <z_pend_curr>:
{
    82c8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    82ca:	480c      	ldr	r0, [pc, #48]	; (82fc <z_pend_curr+0x34>)
    82cc:	4d0c      	ldr	r5, [pc, #48]	; (8300 <z_pend_curr+0x38>)
    82ce:	6886      	ldr	r6, [r0, #8]
    82d0:	602e      	str	r6, [r5, #0]
{
    82d2:	460c      	mov	r4, r1
    82d4:	4611      	mov	r1, r2
    82d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    82da:	f04f 0620 	mov.w	r6, #32
    82de:	f3ef 8511 	mrs	r5, BASEPRI
    82e2:	f386 8812 	msr	BASEPRI_MAX, r6
    82e6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    82ea:	6880      	ldr	r0, [r0, #8]
    82ec:	f7ff ffa4 	bl	8238 <pend_locked>
	ret = arch_swap(key);
    82f0:	4620      	mov	r0, r4
}
    82f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82f6:	f7fb b92d 	b.w	3554 <arch_swap>
    82fa:	bf00      	nop
    82fc:	20001520 	.word	0x20001520
    8300:	2000154c 	.word	0x2000154c

00008304 <z_set_prio>:
{
    8304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8306:	4604      	mov	r4, r0
    8308:	f04f 0320 	mov.w	r3, #32
    830c:	f3ef 8611 	mrs	r6, BASEPRI
    8310:	f383 8812 	msr	BASEPRI_MAX, r3
    8314:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    8318:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    831a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    831c:	b249      	sxtb	r1, r1
    831e:	d119      	bne.n	8354 <z_set_prio+0x50>
	return node->next != NULL;
    8320:	6985      	ldr	r5, [r0, #24]
    8322:	b9bd      	cbnz	r5, 8354 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8328:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    832a:	f001 febd 	bl	a0a8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    832e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    8330:	4a16      	ldr	r2, [pc, #88]	; (838c <z_set_prio+0x88>)
				thread->base.prio = prio;
    8332:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8334:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8338:	7343      	strb	r3, [r0, #13]
    833a:	4613      	mov	r3, r2
    833c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8340:	4298      	cmp	r0, r3
    8342:	bf18      	it	ne
    8344:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    8346:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8348:	b95d      	cbnz	r5, 8362 <z_set_prio+0x5e>
	node->prev = tail;
    834a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    834e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    8350:	6214      	str	r4, [r2, #32]
}
    8352:	e011      	b.n	8378 <z_set_prio+0x74>
			thread->base.prio = prio;
    8354:	73a1      	strb	r1, [r4, #14]
    8356:	2000      	movs	r0, #0
	__asm__ volatile(
    8358:	f386 8811 	msr	BASEPRI, r6
    835c:	f3bf 8f6f 	isb	sy
}
    8360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    8362:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    8366:	42b9      	cmp	r1, r7
    8368:	d00b      	beq.n	8382 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    836a:	428f      	cmp	r7, r1
    836c:	dd09      	ble.n	8382 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    836e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    8370:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    8374:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8376:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8378:	2001      	movs	r0, #1
    837a:	f7ff feb9 	bl	80f0 <update_cache>
    837e:	2001      	movs	r0, #1
    8380:	e7ea      	b.n	8358 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    8382:	42a8      	cmp	r0, r5
    8384:	d0e1      	beq.n	834a <z_set_prio+0x46>
    8386:	682d      	ldr	r5, [r5, #0]
    8388:	e7de      	b.n	8348 <z_set_prio+0x44>
    838a:	bf00      	nop
    838c:	20001520 	.word	0x20001520

00008390 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8390:	b949      	cbnz	r1, 83a6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8392:	f3ef 8005 	mrs	r0, IPSR
    8396:	b930      	cbnz	r0, 83a6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8398:	4b05      	ldr	r3, [pc, #20]	; (83b0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    839a:	699a      	ldr	r2, [r3, #24]
    839c:	689b      	ldr	r3, [r3, #8]
    839e:	429a      	cmp	r2, r3
    83a0:	d001      	beq.n	83a6 <z_reschedule+0x16>
    83a2:	f7fb b8d7 	b.w	3554 <arch_swap>
    83a6:	f381 8811 	msr	BASEPRI, r1
    83aa:	f3bf 8f6f 	isb	sy
}
    83ae:	4770      	bx	lr
    83b0:	20001520 	.word	0x20001520

000083b4 <z_sched_start>:
{
    83b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    83b6:	f04f 0220 	mov.w	r2, #32
    83ba:	f3ef 8411 	mrs	r4, BASEPRI
    83be:	f382 8812 	msr	BASEPRI_MAX, r2
    83c2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    83c6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    83c8:	0751      	lsls	r1, r2, #29
    83ca:	d404      	bmi.n	83d6 <z_sched_start+0x22>
	__asm__ volatile(
    83cc:	f384 8811 	msr	BASEPRI, r4
    83d0:	f3bf 8f6f 	isb	sy
}
    83d4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    83d6:	f022 0204 	bic.w	r2, r2, #4
    83da:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    83dc:	f7ff fee0 	bl	81a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    83e0:	4621      	mov	r1, r4
    83e2:	4802      	ldr	r0, [pc, #8]	; (83ec <z_sched_start+0x38>)
}
    83e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    83e8:	f7ff bfd2 	b.w	8390 <z_reschedule>
    83ec:	20001589 	.word	0x20001589

000083f0 <z_impl_k_thread_suspend>:
{
    83f0:	b570      	push	{r4, r5, r6, lr}
    83f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    83f4:	3018      	adds	r0, #24
    83f6:	f001 ff44 	bl	a282 <z_abort_timeout>
	__asm__ volatile(
    83fa:	f04f 0320 	mov.w	r3, #32
    83fe:	f3ef 8611 	mrs	r6, BASEPRI
    8402:	f383 8812 	msr	BASEPRI_MAX, r3
    8406:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    840a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    840e:	7b63      	ldrb	r3, [r4, #13]
    8410:	2a00      	cmp	r2, #0
    8412:	da05      	bge.n	8420 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8418:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    841a:	4620      	mov	r0, r4
    841c:	f001 fe44 	bl	a0a8 <sys_dlist_remove>
		update_cache(thread == _current);
    8420:	4d0b      	ldr	r5, [pc, #44]	; (8450 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8422:	7b63      	ldrb	r3, [r4, #13]
    8424:	68a8      	ldr	r0, [r5, #8]
    8426:	f043 0310 	orr.w	r3, r3, #16
    842a:	7363      	strb	r3, [r4, #13]
    842c:	1b03      	subs	r3, r0, r4
    842e:	4258      	negs	r0, r3
    8430:	4158      	adcs	r0, r3
    8432:	f7ff fe5d 	bl	80f0 <update_cache>
	__asm__ volatile(
    8436:	f386 8811 	msr	BASEPRI, r6
    843a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    843e:	68ab      	ldr	r3, [r5, #8]
    8440:	42a3      	cmp	r3, r4
    8442:	d103      	bne.n	844c <z_impl_k_thread_suspend+0x5c>
}
    8444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8448:	f001 bede 	b.w	a208 <z_reschedule_unlocked>
}
    844c:	bd70      	pop	{r4, r5, r6, pc}
    844e:	bf00      	nop
    8450:	20001520 	.word	0x20001520

00008454 <k_sched_lock>:
	__asm__ volatile(
    8454:	f04f 0320 	mov.w	r3, #32
    8458:	f3ef 8111 	mrs	r1, BASEPRI
    845c:	f383 8812 	msr	BASEPRI_MAX, r3
    8460:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    8464:	4b04      	ldr	r3, [pc, #16]	; (8478 <k_sched_lock+0x24>)
    8466:	689a      	ldr	r2, [r3, #8]
    8468:	7bd3      	ldrb	r3, [r2, #15]
    846a:	3b01      	subs	r3, #1
    846c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    846e:	f381 8811 	msr	BASEPRI, r1
    8472:	f3bf 8f6f 	isb	sy
}
    8476:	4770      	bx	lr
    8478:	20001520 	.word	0x20001520

0000847c <k_sched_unlock>:
{
    847c:	b510      	push	{r4, lr}
	__asm__ volatile(
    847e:	f04f 0320 	mov.w	r3, #32
    8482:	f3ef 8411 	mrs	r4, BASEPRI
    8486:	f383 8812 	msr	BASEPRI_MAX, r3
    848a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    848e:	4b08      	ldr	r3, [pc, #32]	; (84b0 <k_sched_unlock+0x34>)
    8490:	689a      	ldr	r2, [r3, #8]
    8492:	7bd3      	ldrb	r3, [r2, #15]
    8494:	3301      	adds	r3, #1
    8496:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8498:	2000      	movs	r0, #0
    849a:	f7ff fe29 	bl	80f0 <update_cache>
	__asm__ volatile(
    849e:	f384 8811 	msr	BASEPRI, r4
    84a2:	f3bf 8f6f 	isb	sy
}
    84a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    84aa:	f001 bead 	b.w	a208 <z_reschedule_unlocked>
    84ae:	bf00      	nop
    84b0:	20001520 	.word	0x20001520

000084b4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    84b4:	4b02      	ldr	r3, [pc, #8]	; (84c0 <z_sched_init+0xc>)
    84b6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    84ba:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    84be:	4770      	bx	lr
    84c0:	20001520 	.word	0x20001520

000084c4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    84c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    84c6:	f04f 0320 	mov.w	r3, #32
    84ca:	f3ef 8511 	mrs	r5, BASEPRI
    84ce:	f383 8812 	msr	BASEPRI_MAX, r3
    84d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    84d6:	4919      	ldr	r1, [pc, #100]	; (853c <z_impl_k_yield+0x78>)
    84d8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    84da:	7b43      	ldrb	r3, [r0, #13]
    84dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    84e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    84e2:	f001 fde1 	bl	a0a8 <sys_dlist_remove>
	}
	queue_thread(_current);
    84e6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    84e8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    84ea:	4608      	mov	r0, r1
    84ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
    84f0:	735a      	strb	r2, [r3, #13]
    84f2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    84f6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84f8:	4282      	cmp	r2, r0
    84fa:	bf08      	it	eq
    84fc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84fe:	b922      	cbnz	r2, 850a <z_impl_k_yield+0x46>
	node->prev = tail;
    8500:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    8504:	6023      	str	r3, [r4, #0]
	list->tail = node;
    8506:	620b      	str	r3, [r1, #32]
}
    8508:	e00c      	b.n	8524 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    850a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    850e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    8512:	42be      	cmp	r6, r7
    8514:	d00e      	beq.n	8534 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8516:	42b7      	cmp	r7, r6
    8518:	dd0c      	ble.n	8534 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    851a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    851c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8520:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8522:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8524:	2001      	movs	r0, #1
    8526:	f7ff fde3 	bl	80f0 <update_cache>
    852a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    852c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8530:	f7fb b810 	b.w	3554 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8534:	42a2      	cmp	r2, r4
    8536:	d0e3      	beq.n	8500 <z_impl_k_yield+0x3c>
    8538:	6812      	ldr	r2, [r2, #0]
    853a:	e7e0      	b.n	84fe <z_impl_k_yield+0x3a>
    853c:	20001520 	.word	0x20001520

00008540 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8540:	ea50 0301 	orrs.w	r3, r0, r1
{
    8544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8548:	4605      	mov	r5, r0
    854a:	460e      	mov	r6, r1
	if (ticks == 0) {
    854c:	d103      	bne.n	8556 <z_tick_sleep+0x16>
	z_impl_k_yield();
    854e:	f7ff ffb9 	bl	84c4 <z_impl_k_yield>
		k_yield();
		return 0;
    8552:	2000      	movs	r0, #0
    8554:	e02c      	b.n	85b0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8556:	1c83      	adds	r3, r0, #2
    8558:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    855c:	db2a      	blt.n	85b4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    855e:	f001 feb6 	bl	a2ce <sys_clock_tick_get_32>
    8562:	182c      	adds	r4, r5, r0
    8564:	f04f 0320 	mov.w	r3, #32
    8568:	f3ef 8811 	mrs	r8, BASEPRI
    856c:	f383 8812 	msr	BASEPRI_MAX, r3
    8570:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8574:	4f11      	ldr	r7, [pc, #68]	; (85bc <z_tick_sleep+0x7c>)
    8576:	4b12      	ldr	r3, [pc, #72]	; (85c0 <z_tick_sleep+0x80>)
    8578:	68b8      	ldr	r0, [r7, #8]
    857a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    857c:	f7ff fe44 	bl	8208 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8580:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8582:	4910      	ldr	r1, [pc, #64]	; (85c4 <z_tick_sleep+0x84>)
    8584:	462a      	mov	r2, r5
    8586:	4633      	mov	r3, r6
    8588:	3018      	adds	r0, #24
    858a:	f000 f929 	bl	87e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    858e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8590:	7b53      	ldrb	r3, [r2, #13]
    8592:	f043 0310 	orr.w	r3, r3, #16
    8596:	7353      	strb	r3, [r2, #13]
    8598:	4640      	mov	r0, r8
    859a:	f7fa ffdb 	bl	3554 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    859e:	f001 fe96 	bl	a2ce <sys_clock_tick_get_32>
    85a2:	1a20      	subs	r0, r4, r0
    85a4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    85a8:	2801      	cmp	r0, #1
    85aa:	f173 0300 	sbcs.w	r3, r3, #0
    85ae:	dbd0      	blt.n	8552 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    85b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    85b4:	f06f 0401 	mvn.w	r4, #1
    85b8:	1a24      	subs	r4, r4, r0
    85ba:	e7d3      	b.n	8564 <z_tick_sleep+0x24>
    85bc:	20001520 	.word	0x20001520
    85c0:	2000154c 	.word	0x2000154c
    85c4:	0000a181 	.word	0x0000a181

000085c8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85c8:	f1b1 3fff 	cmp.w	r1, #4294967295
    85cc:	bf08      	it	eq
    85ce:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    85d2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85d4:	d106      	bne.n	85e4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    85d6:	4b08      	ldr	r3, [pc, #32]	; (85f8 <z_impl_k_sleep+0x30>)
    85d8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    85da:	f7ff ff09 	bl	83f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    85de:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    85e2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    85e4:	f7ff ffac 	bl	8540 <z_tick_sleep>
    85e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    85ec:	fb80 0303 	smull	r0, r3, r0, r3
    85f0:	0bc0      	lsrs	r0, r0, #15
    85f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    85f6:	e7f4      	b.n	85e2 <z_impl_k_sleep+0x1a>
    85f8:	20001520 	.word	0x20001520

000085fc <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    85fc:	b538      	push	{r3, r4, r5, lr}
    85fe:	4c0a      	ldr	r4, [pc, #40]	; (8628 <z_impl_k_usleep+0x2c>)
    8600:	4a0a      	ldr	r2, [pc, #40]	; (862c <z_impl_k_usleep+0x30>)
    8602:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    8606:	2100      	movs	r1, #0
    8608:	fbc0 4105 	smlal	r4, r1, r0, r5
    860c:	2300      	movs	r3, #0
    860e:	4620      	mov	r0, r4
    8610:	f7f8 fd76 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    8614:	17c1      	asrs	r1, r0, #31
    8616:	f7ff ff93 	bl	8540 <z_tick_sleep>
    861a:	4b04      	ldr	r3, [pc, #16]	; (862c <z_impl_k_usleep+0x30>)
    861c:	fb80 0303 	smull	r0, r3, r0, r3
    8620:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    8622:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    8626:	bd38      	pop	{r3, r4, r5, pc}
    8628:	000f423f 	.word	0x000f423f
    862c:	000f4240 	.word	0x000f4240

00008630 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8630:	4b01      	ldr	r3, [pc, #4]	; (8638 <z_impl_z_current_get+0x8>)
    8632:	6898      	ldr	r0, [r3, #8]
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	20001520 	.word	0x20001520

0000863c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8640:	4604      	mov	r4, r0
    8642:	f04f 0320 	mov.w	r3, #32
    8646:	f3ef 8611 	mrs	r6, BASEPRI
    864a:	f383 8812 	msr	BASEPRI_MAX, r3
    864e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    8652:	7b03      	ldrb	r3, [r0, #12]
    8654:	07d9      	lsls	r1, r3, #31
    8656:	d50b      	bpl.n	8670 <z_thread_abort+0x34>
	__asm__ volatile(
    8658:	f386 8811 	msr	BASEPRI, r6
    865c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    8660:	4040      	eors	r0, r0
    8662:	f380 8811 	msr	BASEPRI, r0
    8666:	f04f 0004 	mov.w	r0, #4
    866a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    866c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8670:	7b43      	ldrb	r3, [r0, #13]
    8672:	071a      	lsls	r2, r3, #28
    8674:	d504      	bpl.n	8680 <z_thread_abort+0x44>
    8676:	f386 8811 	msr	BASEPRI, r6
    867a:	f3bf 8f6f 	isb	sy
    867e:	e7f5      	b.n	866c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8680:	f023 0220 	bic.w	r2, r3, #32
    8684:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8688:	09d2      	lsrs	r2, r2, #7
    868a:	d120      	bne.n	86ce <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    868c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    868e:	68a3      	ldr	r3, [r4, #8]
    8690:	b113      	cbz	r3, 8698 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    8692:	4620      	mov	r0, r4
    8694:	f001 fd10 	bl	a0b8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8698:	f104 0018 	add.w	r0, r4, #24
    869c:	f001 fdf1 	bl	a282 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    86a0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    86a4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    86a8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86aa:	42bd      	cmp	r5, r7
    86ac:	d000      	beq.n	86b0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    86ae:	b9b5      	cbnz	r5, 86de <z_thread_abort+0xa2>
		update_cache(1);
    86b0:	2001      	movs	r0, #1
    86b2:	f7ff fd1d 	bl	80f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    86b6:	4b10      	ldr	r3, [pc, #64]	; (86f8 <z_thread_abort+0xbc>)
    86b8:	689b      	ldr	r3, [r3, #8]
    86ba:	42a3      	cmp	r3, r4
    86bc:	d1db      	bne.n	8676 <z_thread_abort+0x3a>
    86be:	f3ef 8305 	mrs	r3, IPSR
    86c2:	2b00      	cmp	r3, #0
    86c4:	d1d7      	bne.n	8676 <z_thread_abort+0x3a>
    86c6:	4630      	mov	r0, r6
    86c8:	f7fa ff44 	bl	3554 <arch_swap>
	return ret;
    86cc:	e7d3      	b.n	8676 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    86ce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    86d2:	f043 0308 	orr.w	r3, r3, #8
    86d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    86d8:	f001 fce6 	bl	a0a8 <sys_dlist_remove>
}
    86dc:	e7d7      	b.n	868e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    86de:	4628      	mov	r0, r5
    86e0:	f001 fcea 	bl	a0b8 <unpend_thread_no_timeout>
    86e4:	f105 0018 	add.w	r0, r5, #24
    86e8:	f001 fdcb 	bl	a282 <z_abort_timeout>
    86ec:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    86f0:	4628      	mov	r0, r5
    86f2:	f7ff fd55 	bl	81a0 <ready_thread>
    86f6:	e7d7      	b.n	86a8 <z_thread_abort+0x6c>
    86f8:	20001520 	.word	0x20001520

000086fc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    86fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    86fe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    8702:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    8704:	e9cd 6700 	strd	r6, r7, [sp]
    8708:	f7ff fdde 	bl	82c8 <z_pend_curr>

	if (data != NULL) {
    870c:	b11c      	cbz	r4, 8716 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    870e:	4b03      	ldr	r3, [pc, #12]	; (871c <z_sched_wait+0x20>)
    8710:	689b      	ldr	r3, [r3, #8]
    8712:	695b      	ldr	r3, [r3, #20]
    8714:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    8716:	b002      	add	sp, #8
    8718:	bdd0      	pop	{r4, r6, r7, pc}
    871a:	bf00      	nop
    871c:	20001520 	.word	0x20001520

00008720 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8720:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8722:	4806      	ldr	r0, [pc, #24]	; (873c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8724:	4a06      	ldr	r2, [pc, #24]	; (8740 <z_data_copy+0x20>)
    8726:	4907      	ldr	r1, [pc, #28]	; (8744 <z_data_copy+0x24>)
    8728:	1a12      	subs	r2, r2, r0
    872a:	f001 fb6b 	bl	9e04 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    872e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8732:	4a05      	ldr	r2, [pc, #20]	; (8748 <z_data_copy+0x28>)
    8734:	4905      	ldr	r1, [pc, #20]	; (874c <z_data_copy+0x2c>)
    8736:	4806      	ldr	r0, [pc, #24]	; (8750 <z_data_copy+0x30>)
    8738:	f001 bb64 	b.w	9e04 <z_early_memcpy>
    873c:	20000000 	.word	0x20000000
    8740:	20000330 	.word	0x20000330
    8744:	0000ac20 	.word	0x0000ac20
    8748:	00000000 	.word	0x00000000
    874c:	0000ac20 	.word	0x0000ac20
    8750:	20000000 	.word	0x20000000

00008754 <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8754:	4b03      	ldr	r3, [pc, #12]	; (8764 <elapsed+0x10>)
    8756:	681b      	ldr	r3, [r3, #0]
    8758:	b90b      	cbnz	r3, 875e <elapsed+0xa>
    875a:	f7fc becd 	b.w	54f8 <sys_clock_elapsed>
}
    875e:	2000      	movs	r0, #0
    8760:	4770      	bx	lr
    8762:	bf00      	nop
    8764:	20001558 	.word	0x20001558

00008768 <next_timeout>:

static int32_t next_timeout(void)
{
    8768:	b510      	push	{r4, lr}
	return list->head == list;
    876a:	4b0e      	ldr	r3, [pc, #56]	; (87a4 <next_timeout+0x3c>)
    876c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    876e:	429c      	cmp	r4, r3
    8770:	d104      	bne.n	877c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8772:	f7ff ffef 	bl	8754 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8776:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    877a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    877c:	f7ff ffea 	bl	8754 <elapsed>
	if ((to == NULL) ||
    8780:	2c00      	cmp	r4, #0
    8782:	d0f8      	beq.n	8776 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8784:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8788:	1a1b      	subs	r3, r3, r0
    878a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    878e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8792:	f172 0100 	sbcs.w	r1, r2, #0
    8796:	daee      	bge.n	8776 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8798:	2a00      	cmp	r2, #0
    879a:	bfac      	ite	ge
    879c:	4618      	movge	r0, r3
    879e:	2000      	movlt	r0, #0
	return ret;
    87a0:	e7eb      	b.n	877a <next_timeout+0x12>
    87a2:	bf00      	nop
    87a4:	200001c0 	.word	0x200001c0

000087a8 <remove_timeout>:
{
    87a8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    87aa:	b170      	cbz	r0, 87ca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    87ac:	4b0b      	ldr	r3, [pc, #44]	; (87dc <remove_timeout+0x34>)
    87ae:	685b      	ldr	r3, [r3, #4]
    87b0:	4298      	cmp	r0, r3
    87b2:	d00a      	beq.n	87ca <remove_timeout+0x22>
    87b4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    87b6:	b143      	cbz	r3, 87ca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    87b8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    87bc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    87c0:	1912      	adds	r2, r2, r4
    87c2:	eb41 0105 	adc.w	r1, r1, r5
    87c6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    87ca:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    87ce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    87d0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    87d2:	2300      	movs	r3, #0
	node->prev = NULL;
    87d4:	e9c0 3300 	strd	r3, r3, [r0]
}
    87d8:	bd30      	pop	{r4, r5, pc}
    87da:	bf00      	nop
    87dc:	200001c0 	.word	0x200001c0

000087e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    87e4:	bf08      	it	eq
    87e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    87ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ec:	4604      	mov	r4, r0
    87ee:	461d      	mov	r5, r3
    87f0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    87f2:	d05c      	beq.n	88ae <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    87f4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    87f6:	f04f 0320 	mov.w	r3, #32
    87fa:	f3ef 8711 	mrs	r7, BASEPRI
    87fe:	f383 8812 	msr	BASEPRI_MAX, r3
    8802:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8806:	3201      	adds	r2, #1
    8808:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    880c:	da24      	bge.n	8858 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    880e:	492d      	ldr	r1, [pc, #180]	; (88c4 <z_add_timeout+0xe4>)
    8810:	e9d1 2000 	ldrd	r2, r0, [r1]
    8814:	f06f 0301 	mvn.w	r3, #1
    8818:	1a9b      	subs	r3, r3, r2
    881a:	f04f 32ff 	mov.w	r2, #4294967295
    881e:	eb62 0000 	sbc.w	r0, r2, r0
    8822:	1b9e      	subs	r6, r3, r6
    8824:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    8828:	2e01      	cmp	r6, #1
    882a:	f170 0300 	sbcs.w	r3, r0, #0
    882e:	da01      	bge.n	8834 <z_add_timeout+0x54>
    8830:	2601      	movs	r6, #1
    8832:	2000      	movs	r0, #0
    8834:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    8838:	4e23      	ldr	r6, [pc, #140]	; (88c8 <z_add_timeout+0xe8>)
    883a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    883e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8840:	45b4      	cmp	ip, r6
    8842:	bf08      	it	eq
    8844:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8848:	f1bc 0f00 	cmp.w	ip, #0
    884c:	d10d      	bne.n	886a <z_add_timeout+0x8a>
	node->prev = tail;
    884e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    8852:	602c      	str	r4, [r5, #0]
	list->tail = node;
    8854:	6074      	str	r4, [r6, #4]
}
    8856:	e01c      	b.n	8892 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    8858:	f7ff ff7c 	bl	8754 <elapsed>
    885c:	3601      	adds	r6, #1
    885e:	f145 0500 	adc.w	r5, r5, #0
    8862:	1836      	adds	r6, r6, r0
    8864:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8868:	e7e4      	b.n	8834 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    886a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    886e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    8872:	4293      	cmp	r3, r2
    8874:	eb71 0e00 	sbcs.w	lr, r1, r0
    8878:	da1a      	bge.n	88b0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    887a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    887c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    8880:	eb60 0001 	sbc.w	r0, r0, r1
    8884:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    8888:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    888c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    888e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    8892:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8894:	42b3      	cmp	r3, r6
    8896:	d006      	beq.n	88a6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8898:	429c      	cmp	r4, r3
    889a:	d104      	bne.n	88a6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    889c:	f7ff ff64 	bl	8768 <next_timeout>
    88a0:	2100      	movs	r1, #0
    88a2:	f7fc fdf5 	bl	5490 <sys_clock_set_timeout>
	__asm__ volatile(
    88a6:	f387 8811 	msr	BASEPRI, r7
    88aa:	f3bf 8f6f 	isb	sy
		}
	}
}
    88ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    88b0:	1a9b      	subs	r3, r3, r2
    88b2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    88b6:	45ac      	cmp	ip, r5
    88b8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    88bc:	d0c7      	beq.n	884e <z_add_timeout+0x6e>
    88be:	f8dc c000 	ldr.w	ip, [ip]
    88c2:	e7c1      	b.n	8848 <z_add_timeout+0x68>
    88c4:	200006a8 	.word	0x200006a8
    88c8:	200001c0 	.word	0x200001c0

000088cc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    88cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    88d0:	f04f 0320 	mov.w	r3, #32
    88d4:	f3ef 8c11 	mrs	ip, BASEPRI
    88d8:	f383 8812 	msr	BASEPRI_MAX, r3
    88dc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    88e0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8994 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    88e4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8998 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    88e8:	4f2c      	ldr	r7, [pc, #176]	; (899c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    88ea:	f8c9 0000 	str.w	r0, [r9]
    88ee:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    88f2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88f4:	4550      	cmp	r0, sl
    88f6:	bf08      	it	eq
    88f8:	2000      	moveq	r0, #0
    88fa:	2500      	movs	r5, #0
		curr_tick += dt;
    88fc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    8900:	f8d9 3000 	ldr.w	r3, [r9]
    8904:	46e0      	mov	r8, ip
    8906:	b380      	cbz	r0, 896a <sys_clock_announce+0x9e>
    8908:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    890c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    8910:	42b3      	cmp	r3, r6
    8912:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    8916:	da05      	bge.n	8924 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    8918:	1af6      	subs	r6, r6, r3
    891a:	eb6c 040e 	sbc.w	r4, ip, lr
    891e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    8922:	e022      	b.n	896a <sys_clock_announce+0x9e>
		curr_tick += dt;
    8924:	18b2      	adds	r2, r6, r2
    8926:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    892a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    892e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    8932:	f7ff ff39 	bl	87a8 <remove_timeout>
	__asm__ volatile(
    8936:	f388 8811 	msr	BASEPRI, r8
    893a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    893e:	6883      	ldr	r3, [r0, #8]
    8940:	4798      	blx	r3
	__asm__ volatile(
    8942:	f04f 0320 	mov.w	r3, #32
    8946:	f3ef 8811 	mrs	r8, BASEPRI
    894a:	f383 8812 	msr	BASEPRI_MAX, r3
    894e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    8952:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    8956:	f8da 0000 	ldr.w	r0, [sl]
    895a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    895c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    895e:	46c4      	mov	ip, r8
    8960:	f8c9 3000 	str.w	r3, [r9]
    8964:	d1ca      	bne.n	88fc <sys_clock_announce+0x30>
		curr_tick += dt;
    8966:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    896a:	189a      	adds	r2, r3, r2
    896c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    8970:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8972:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    8976:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    897a:	f7ff fef5 	bl	8768 <next_timeout>
    897e:	4621      	mov	r1, r4
    8980:	f7fc fd86 	bl	5490 <sys_clock_set_timeout>
	__asm__ volatile(
    8984:	f388 8811 	msr	BASEPRI, r8
    8988:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    898c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    8990:	f7ff bc6a 	b.w	8268 <z_time_slice>
    8994:	200001c0 	.word	0x200001c0
    8998:	20001558 	.word	0x20001558
    899c:	200006a8 	.word	0x200006a8

000089a0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    89a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    89a2:	f04f 0320 	mov.w	r3, #32
    89a6:	f3ef 8411 	mrs	r4, BASEPRI
    89aa:	f383 8812 	msr	BASEPRI_MAX, r3
    89ae:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    89b2:	f7ff fecf 	bl	8754 <elapsed>
    89b6:	4a06      	ldr	r2, [pc, #24]	; (89d0 <sys_clock_tick_get+0x30>)
    89b8:	4603      	mov	r3, r0
    89ba:	e9d2 0100 	ldrd	r0, r1, [r2]
    89be:	1818      	adds	r0, r3, r0
    89c0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    89c4:	f384 8811 	msr	BASEPRI, r4
    89c8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    89cc:	bd10      	pop	{r4, pc}
    89ce:	bf00      	nop
    89d0:	200006a8 	.word	0x200006a8

000089d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    89d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    89d6:	4606      	mov	r6, r0
    89d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    89da:	f001 fa54 	bl	9e86 <k_is_in_isr>
    89de:	b978      	cbnz	r0, 8a00 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    89e0:	4b0b      	ldr	r3, [pc, #44]	; (8a10 <z_thread_aligned_alloc+0x3c>)
    89e2:	689b      	ldr	r3, [r3, #8]
    89e4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    89e6:	b17c      	cbz	r4, 8a08 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    89e8:	1d2a      	adds	r2, r5, #4
    89ea:	d209      	bcs.n	8a00 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    89ec:	2000      	movs	r0, #0
    89ee:	2100      	movs	r1, #0
    89f0:	e9cd 0100 	strd	r0, r1, [sp]
    89f4:	f046 0104 	orr.w	r1, r6, #4
    89f8:	4620      	mov	r0, r4
    89fa:	f001 fca1 	bl	a340 <k_heap_aligned_alloc>
	if (mem == NULL) {
    89fe:	b908      	cbnz	r0, 8a04 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    8a00:	2400      	movs	r4, #0
	}

	return ret;
    8a02:	e001      	b.n	8a08 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    8a04:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    8a06:	1d04      	adds	r4, r0, #4
}
    8a08:	4620      	mov	r0, r4
    8a0a:	b002      	add	sp, #8
    8a0c:	bd70      	pop	{r4, r5, r6, pc}
    8a0e:	bf00      	nop
    8a10:	20001520 	.word	0x20001520

00008a14 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    8a14:	4801      	ldr	r0, [pc, #4]	; (8a1c <boot_banner+0x8>)
    8a16:	f000 b832 	b.w	8a7e <printk>
    8a1a:	bf00      	nop
    8a1c:	0000abf4 	.word	0x0000abf4

00008a20 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    8a20:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8a22:	4c06      	ldr	r4, [pc, #24]	; (8a3c <statics_init+0x1c>)
    8a24:	4d06      	ldr	r5, [pc, #24]	; (8a40 <statics_init+0x20>)
    8a26:	42ac      	cmp	r4, r5
    8a28:	d301      	bcc.n	8a2e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8a2a:	2000      	movs	r0, #0
    8a2c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8a2e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8a32:	4620      	mov	r0, r4
    8a34:	f001 fc7c 	bl	a330 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8a38:	3414      	adds	r4, #20
    8a3a:	e7f4      	b.n	8a26 <statics_init+0x6>
    8a3c:	200001f4 	.word	0x200001f4
    8a40:	200001f4 	.word	0x200001f4

00008a44 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    8a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    8a46:	4b09      	ldr	r3, [pc, #36]	; (8a6c <k_sys_work_q_init+0x28>)
    8a48:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8a4a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8a4c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8a4e:	9300      	str	r3, [sp, #0]
    8a50:	4907      	ldr	r1, [pc, #28]	; (8a70 <k_sys_work_q_init+0x2c>)
    8a52:	4808      	ldr	r0, [pc, #32]	; (8a74 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8a54:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8a58:	f04f 33ff 	mov.w	r3, #4294967295
    8a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8a60:	f7ff fa8e 	bl	7f80 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8a64:	4620      	mov	r0, r4
    8a66:	b004      	add	sp, #16
    8a68:	bd10      	pop	{r4, pc}
    8a6a:	bf00      	nop
    8a6c:	0000ac16 	.word	0x0000ac16
    8a70:	200034c0 	.word	0x200034c0
    8a74:	200006b0 	.word	0x200006b0

00008a78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8a78:	4770      	bx	lr

00008a7a <arch_printk_char_out>:
}
    8a7a:	2000      	movs	r0, #0
    8a7c:	4770      	bx	lr

00008a7e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8a7e:	b40f      	push	{r0, r1, r2, r3}
    8a80:	b507      	push	{r0, r1, r2, lr}
    8a82:	a904      	add	r1, sp, #16
    8a84:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8a88:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8a8a:	f7f8 fd95 	bl	15b8 <vprintk>

	va_end(ap);
}
    8a8e:	b003      	add	sp, #12
    8a90:	f85d eb04 	ldr.w	lr, [sp], #4
    8a94:	b004      	add	sp, #16
    8a96:	4770      	bx	lr

00008a98 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8a98:	4604      	mov	r4, r0
    8a9a:	b508      	push	{r3, lr}
    8a9c:	4608      	mov	r0, r1
    8a9e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8aa0:	461a      	mov	r2, r3
    8aa2:	47a0      	blx	r4
	return z_impl_z_current_get();
    8aa4:	f7ff fdc4 	bl	8630 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8aa8:	f7fa ff92 	bl	39d0 <z_impl_k_thread_abort>

00008aac <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    8aac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8ab0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    8ab2:	0840      	lsrs	r0, r0, #1
    8ab4:	4770      	bx	lr

00008ab6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    8ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ab8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    8aba:	f7ff fff7 	bl	8aac <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    8abe:	fab0 f080 	clz	r0, r0
    8ac2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8ac6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    8aca:	00ca      	lsls	r2, r1, #3
    8acc:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8ad0:	1d17      	adds	r7, r2, #4
{
    8ad2:	460c      	mov	r4, r1
    8ad4:	3206      	adds	r2, #6
    8ad6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    8ad8:	b956      	cbnz	r6, 8af0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8ada:	2101      	movs	r1, #1
    8adc:	fa01 f000 	lsl.w	r0, r1, r0
    8ae0:	68d9      	ldr	r1, [r3, #12]
    8ae2:	4301      	orrs	r1, r0
    8ae4:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8ae6:	f8cc 4010 	str.w	r4, [ip, #16]
    8aea:	53dd      	strh	r5, [r3, r7]
    8aec:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    8aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    8af0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    8af2:	3104      	adds	r1, #4
    8af4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8af6:	53d8      	strh	r0, [r3, r7]
    8af8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8afc:	529e      	strh	r6, [r3, r2]
    8afe:	80c5      	strh	r5, [r0, #6]
    8b00:	525d      	strh	r5, [r3, r1]
    8b02:	e7f4      	b.n	8aee <free_list_add+0x38>

00008b04 <free_list_remove_bidx>:
{
    8b04:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    8b06:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    8b0a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    8b0c:	4299      	cmp	r1, r3
    8b0e:	f102 0104 	add.w	r1, r2, #4
    8b12:	d10a      	bne.n	8b2a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    8b14:	2301      	movs	r3, #1
    8b16:	fa03 f202 	lsl.w	r2, r3, r2
    8b1a:	68c3      	ldr	r3, [r0, #12]
    8b1c:	ea23 0302 	bic.w	r3, r3, r2
    8b20:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    8b22:	2300      	movs	r3, #0
    8b24:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    8b28:	bd10      	pop	{r4, pc}
    8b2a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    8b2c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    8b30:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    8b34:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    8b38:	80cb      	strh	r3, [r1, #6]
    8b3a:	8082      	strh	r2, [r0, #4]
}
    8b3c:	e7f4      	b.n	8b28 <free_list_remove_bidx+0x24>

00008b3e <free_list_remove>:
{
    8b3e:	b508      	push	{r3, lr}
    8b40:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    8b42:	f7ff ffb3 	bl	8aac <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8b46:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    8b4a:	f1c2 021f 	rsb	r2, r2, #31
    8b4e:	4618      	mov	r0, r3
}
    8b50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    8b54:	f7ff bfd6 	b.w	8b04 <free_list_remove_bidx>

00008b58 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    8b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8b5c:	fab1 f581 	clz	r5, r1
    8b60:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    8b64:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    8b68:	4603      	mov	r3, r0
	if (b->next) {
    8b6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    8b6e:	460e      	mov	r6, r1
	if (b->next) {
    8b70:	b1c2      	cbz	r2, 8ba4 <alloc_chunk+0x4c>
    8b72:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    8b74:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    8b78:	4618      	mov	r0, r3
    8b7a:	4621      	mov	r1, r4
    8b7c:	f7ff ff96 	bl	8aac <chunk_size>
    8b80:	42b0      	cmp	r0, r6
    8b82:	d306      	bcc.n	8b92 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    8b84:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    8b86:	4618      	mov	r0, r3
    8b88:	f7ff ffbc 	bl	8b04 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    8b8c:	4620      	mov	r0, r4
    8b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    8b92:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    8b96:	3f01      	subs	r7, #1
    8b98:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    8b9a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    8b9e:	d001      	beq.n	8ba4 <alloc_chunk+0x4c>
    8ba0:	4282      	cmp	r2, r0
    8ba2:	d1e7      	bne.n	8b74 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    8ba4:	f1c5 0220 	rsb	r2, r5, #32
    8ba8:	f04f 34ff 	mov.w	r4, #4294967295
    8bac:	4094      	lsls	r4, r2
    8bae:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    8bb0:	4014      	ands	r4, r2
    8bb2:	d0eb      	beq.n	8b8c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    8bb4:	fa94 f2a4 	rbit	r2, r4
    8bb8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    8bbc:	1d11      	adds	r1, r2, #4
    8bbe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    8bc2:	4621      	mov	r1, r4
    8bc4:	e7df      	b.n	8b86 <alloc_chunk+0x2e>

00008bc6 <merge_chunks>:
{
    8bc6:	b538      	push	{r3, r4, r5, lr}
    8bc8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    8bca:	f7ff ff6f 	bl	8aac <chunk_size>
{
    8bce:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    8bd0:	4604      	mov	r4, r0
    8bd2:	4611      	mov	r1, r2
    8bd4:	4618      	mov	r0, r3
    8bd6:	f7ff ff69 	bl	8aac <chunk_size>
		((uint16_t *)cmem)[f] = val;
    8bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    8bde:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8be0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    8be2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    8be4:	4618      	mov	r0, r3
    8be6:	f7ff ff61 	bl	8aac <chunk_size>
	void *cmem = &buf[c];
    8bea:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    8bec:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    8bf0:	bd38      	pop	{r3, r4, r5, pc}

00008bf2 <split_chunks>:
{
    8bf2:	b538      	push	{r3, r4, r5, lr}
    8bf4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    8bf6:	f7ff ff59 	bl	8aac <chunk_size>
{
    8bfa:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    8bfc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    8bfe:	1a51      	subs	r1, r2, r1
    8c00:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    8c04:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8c06:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    8c08:	8060      	strh	r0, [r4, #2]
    8c0a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8c0e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    8c10:	8044      	strh	r4, [r0, #2]
    8c12:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    8c16:	4618      	mov	r0, r3
    8c18:	4611      	mov	r1, r2
    8c1a:	f7ff ff47 	bl	8aac <chunk_size>
	void *cmem = &buf[c];
    8c1e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    8c20:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    8c24:	bd38      	pop	{r3, r4, r5, pc}

00008c26 <free_chunk>:
{
    8c26:	b538      	push	{r3, r4, r5, lr}
    8c28:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    8c2a:	f7ff ff3f 	bl	8aac <chunk_size>
    8c2e:	460c      	mov	r4, r1
    8c30:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    8c32:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8c36:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    8c38:	07da      	lsls	r2, r3, #31
    8c3a:	d40a      	bmi.n	8c52 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    8c3c:	4628      	mov	r0, r5
    8c3e:	f7ff ff7e 	bl	8b3e <free_list_remove>
	return c + chunk_size(h, c);
    8c42:	4621      	mov	r1, r4
    8c44:	4628      	mov	r0, r5
    8c46:	f7ff ff31 	bl	8aac <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    8c4a:	1822      	adds	r2, r4, r0
    8c4c:	4628      	mov	r0, r5
    8c4e:	f7ff ffba 	bl	8bc6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    8c52:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8c56:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    8c58:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8c5c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    8c5e:	07db      	lsls	r3, r3, #31
    8c60:	d40c      	bmi.n	8c7c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    8c62:	4628      	mov	r0, r5
    8c64:	f7ff ff6b 	bl	8b3e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    8c68:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    8c6c:	4622      	mov	r2, r4
    8c6e:	1a61      	subs	r1, r4, r1
    8c70:	4628      	mov	r0, r5
    8c72:	f7ff ffa8 	bl	8bc6 <merge_chunks>
    8c76:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8c7a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    8c7c:	4621      	mov	r1, r4
    8c7e:	4628      	mov	r0, r5
}
    8c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    8c84:	f7ff bf17 	b.w	8ab6 <free_list_add>

00008c88 <sys_heap_free>:
	if (mem == NULL) {
    8c88:	b161      	cbz	r1, 8ca4 <sys_heap_free+0x1c>
    8c8a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8c8c:	3904      	subs	r1, #4
    8c8e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    8c90:	f021 0307 	bic.w	r3, r1, #7
    8c94:	4403      	add	r3, r0
	free_chunk(h, c);
    8c96:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    8c98:	885a      	ldrh	r2, [r3, #2]
    8c9a:	f022 0201 	bic.w	r2, r2, #1
    8c9e:	805a      	strh	r2, [r3, #2]
    8ca0:	f7ff bfc1 	b.w	8c26 <free_chunk>
}
    8ca4:	4770      	bx	lr

00008ca6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    8ca6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    8ca8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    8caa:	b909      	cbnz	r1, 8cb0 <sys_heap_alloc+0xa>
		return NULL;
    8cac:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    8cae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    8cb0:	68ab      	ldr	r3, [r5, #8]
    8cb2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8cb6:	d9f9      	bls.n	8cac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8cb8:	310b      	adds	r1, #11
    8cba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    8cbc:	4621      	mov	r1, r4
    8cbe:	4628      	mov	r0, r5
    8cc0:	f7ff ff4a 	bl	8b58 <alloc_chunk>
	if (c == 0U) {
    8cc4:	4606      	mov	r6, r0
    8cc6:	2800      	cmp	r0, #0
    8cc8:	d0f0      	beq.n	8cac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    8cca:	4601      	mov	r1, r0
    8ccc:	4628      	mov	r0, r5
    8cce:	f7ff feed 	bl	8aac <chunk_size>
    8cd2:	42a0      	cmp	r0, r4
    8cd4:	d907      	bls.n	8ce6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    8cd6:	1932      	adds	r2, r6, r4
    8cd8:	4628      	mov	r0, r5
    8cda:	f7ff ff8a 	bl	8bf2 <split_chunks>
		free_list_add(h, c + chunk_sz);
    8cde:	4611      	mov	r1, r2
    8ce0:	4628      	mov	r0, r5
    8ce2:	f7ff fee8 	bl	8ab6 <free_list_add>
	void *cmem = &buf[c];
    8ce6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    8cea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8cec:	8853      	ldrh	r3, [r2, #2]
    8cee:	f043 0301 	orr.w	r3, r3, #1
    8cf2:	8053      	strh	r3, [r2, #2]
    8cf4:	3004      	adds	r0, #4
	return mem;
    8cf6:	e7da      	b.n	8cae <sys_heap_alloc+0x8>

00008cf8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    8cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cfc:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    8d00:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    8d04:	6806      	ldr	r6, [r0, #0]
{
    8d06:	460f      	mov	r7, r1
    8d08:	4614      	mov	r4, r2
	if (align != rew) {
    8d0a:	d00c      	beq.n	8d26 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    8d0c:	424b      	negs	r3, r1
    8d0e:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    8d10:	2b04      	cmp	r3, #4
    8d12:	461a      	mov	r2, r3
    8d14:	464f      	mov	r7, r9
    8d16:	bf28      	it	cs
    8d18:	2204      	movcs	r2, #4
	rew = align & -align;
    8d1a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    8d1c:	b964      	cbnz	r4, 8d38 <sys_heap_aligned_alloc+0x40>
		return NULL;
    8d1e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    8d20:	4628      	mov	r0, r5
    8d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    8d26:	2904      	cmp	r1, #4
    8d28:	d804      	bhi.n	8d34 <sys_heap_aligned_alloc+0x3c>
}
    8d2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    8d2e:	4611      	mov	r1, r2
    8d30:	f7ff bfb9 	b.w	8ca6 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    8d34:	2204      	movs	r2, #4
    8d36:	e7f1      	b.n	8d1c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    8d38:	68b3      	ldr	r3, [r6, #8]
    8d3a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    8d3e:	d9ee      	bls.n	8d1e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8d40:	f104 010b 	add.w	r1, r4, #11
    8d44:	4439      	add	r1, r7
    8d46:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    8d48:	08c9      	lsrs	r1, r1, #3
    8d4a:	4630      	mov	r0, r6
    8d4c:	f7ff ff04 	bl	8b58 <alloc_chunk>
	if (c0 == 0) {
    8d50:	4680      	mov	r8, r0
    8d52:	2800      	cmp	r0, #0
    8d54:	d0e3      	beq.n	8d1e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    8d56:	f109 0504 	add.w	r5, r9, #4
    8d5a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    8d5e:	1e7b      	subs	r3, r7, #1
    8d60:	4435      	add	r5, r6
    8d62:	441d      	add	r5, r3
    8d64:	427f      	negs	r7, r7
    8d66:	403d      	ands	r5, r7
    8d68:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8d6c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8d6e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8d70:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8d72:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    8d74:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    8d78:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    8d7a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    8d7e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    8d82:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    8d86:	d208      	bcs.n	8d9a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    8d88:	4601      	mov	r1, r0
    8d8a:	463a      	mov	r2, r7
    8d8c:	4630      	mov	r0, r6
    8d8e:	f7ff ff30 	bl	8bf2 <split_chunks>
		free_list_add(h, c0);
    8d92:	4641      	mov	r1, r8
    8d94:	4630      	mov	r0, r6
    8d96:	f7ff fe8e 	bl	8ab6 <free_list_add>
	return c + chunk_size(h, c);
    8d9a:	4639      	mov	r1, r7
    8d9c:	4630      	mov	r0, r6
    8d9e:	f7ff fe85 	bl	8aac <chunk_size>
    8da2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    8da4:	4284      	cmp	r4, r0
    8da6:	d207      	bcs.n	8db8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    8da8:	4630      	mov	r0, r6
    8daa:	4622      	mov	r2, r4
    8dac:	f7ff ff21 	bl	8bf2 <split_chunks>
		free_list_add(h, c_end);
    8db0:	4621      	mov	r1, r4
    8db2:	4630      	mov	r0, r6
    8db4:	f7ff fe7f 	bl	8ab6 <free_list_add>
	void *cmem = &buf[c];
    8db8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8dbc:	8873      	ldrh	r3, [r6, #2]
    8dbe:	f043 0301 	orr.w	r3, r3, #1
    8dc2:	8073      	strh	r3, [r6, #2]
    8dc4:	e7ac      	b.n	8d20 <sys_heap_aligned_alloc+0x28>

00008dc6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    8dc6:	3a04      	subs	r2, #4
{
    8dc8:	b4f0      	push	{r4, r5, r6, r7}
    8dca:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    8dcc:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    8dce:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    8dd0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    8dd4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    8dd8:	1a0e      	subs	r6, r1, r0
    8dda:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    8ddc:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    8dde:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    8de2:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    8de4:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    8de8:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    8dea:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    8dec:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    8dee:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8df2:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    8df4:	f1c2 0220 	rsb	r2, r2, #32
    8df8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    8dfa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    8dfe:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    8e02:	4294      	cmp	r4, r2
    8e04:	d1fb      	bne.n	8dfe <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8e06:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8e08:	f042 0201 	orr.w	r2, r2, #1
    8e0c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    8e0e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    8e12:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8e14:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    8e16:	8007      	strh	r7, [r0, #0]
    8e18:	8065      	strh	r5, [r4, #2]
    8e1a:	1984      	adds	r4, r0, r6
    8e1c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    8e20:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    8e24:	8067      	strh	r7, [r4, #2]
    8e26:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8e28:	885a      	ldrh	r2, [r3, #2]
    8e2a:	f042 0201 	orr.w	r2, r2, #1
    8e2e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    8e30:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    8e32:	f7ff be40 	b.w	8ab6 <free_list_add>

00008e36 <sys_slist_find_and_remove>:
	return list->head;
    8e36:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e38:	2200      	movs	r2, #0
    8e3a:	b90b      	cbnz	r3, 8e40 <sys_slist_find_and_remove+0xa>
    8e3c:	4618      	mov	r0, r3
    8e3e:	4770      	bx	lr
    8e40:	428b      	cmp	r3, r1
    8e42:	d110      	bne.n	8e66 <sys_slist_find_and_remove+0x30>
	return node->next;
    8e44:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    8e46:	b942      	cbnz	r2, 8e5a <sys_slist_find_and_remove+0x24>
    8e48:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    8e4a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    8e4c:	4291      	cmp	r1, r2
    8e4e:	d100      	bne.n	8e52 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    8e50:	6043      	str	r3, [r0, #4]
	parent->next = child;
    8e52:	2300      	movs	r3, #0
    8e54:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e56:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    8e58:	4770      	bx	lr
	parent->next = child;
    8e5a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    8e5c:	6843      	ldr	r3, [r0, #4]
    8e5e:	4299      	cmp	r1, r3
	list->tail = node;
    8e60:	bf08      	it	eq
    8e62:	6042      	streq	r2, [r0, #4]
}
    8e64:	e7f5      	b.n	8e52 <sys_slist_find_and_remove+0x1c>
	return node->next;
    8e66:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8e68:	681b      	ldr	r3, [r3, #0]
    8e6a:	e7e6      	b.n	8e3a <sys_slist_find_and_remove+0x4>

00008e6c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8e6c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    8e6e:	f013 0307 	ands.w	r3, r3, #7
    8e72:	d105      	bne.n	8e80 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8e74:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8e76:	2b00      	cmp	r3, #0
    8e78:	bf0c      	ite	eq
    8e7a:	2000      	moveq	r0, #0
    8e7c:	2003      	movne	r0, #3
    8e7e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8e80:	2b02      	cmp	r3, #2
    8e82:	d105      	bne.n	8e90 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8e84:	8b40      	ldrh	r0, [r0, #26]
    8e86:	fab0 f080 	clz	r0, r0
    8e8a:	0940      	lsrs	r0, r0, #5
    8e8c:	0080      	lsls	r0, r0, #2
    8e8e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8e90:	2b01      	cmp	r3, #1
    8e92:	d105      	bne.n	8ea0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8e94:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8e96:	2b00      	cmp	r3, #0
    8e98:	bf0c      	ite	eq
    8e9a:	2000      	moveq	r0, #0
    8e9c:	2005      	movne	r0, #5
    8e9e:	4770      	bx	lr
	int evt = EVT_NOP;
    8ea0:	2000      	movs	r0, #0
}
    8ea2:	4770      	bx	lr

00008ea4 <validate_args>:
{
    8ea4:	b510      	push	{r4, lr}
    8ea6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8ea8:	b100      	cbz	r0, 8eac <validate_args+0x8>
    8eaa:	b911      	cbnz	r1, 8eb2 <validate_args+0xe>
		return -EINVAL;
    8eac:	f06f 0015 	mvn.w	r0, #21
}
    8eb0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    8eb2:	1d08      	adds	r0, r1, #4
    8eb4:	f000 f8d6 	bl	9064 <sys_notify_validate>
	if ((rv == 0)
    8eb8:	2800      	cmp	r0, #0
    8eba:	d1f9      	bne.n	8eb0 <validate_args+0xc>
	    && ((cli->notify.flags
    8ebc:	68a3      	ldr	r3, [r4, #8]
    8ebe:	2b03      	cmp	r3, #3
    8ec0:	d9f6      	bls.n	8eb0 <validate_args+0xc>
    8ec2:	e7f3      	b.n	8eac <validate_args+0x8>

00008ec4 <notify_one>:
{
    8ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ec8:	460d      	mov	r5, r1
    8eca:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ecc:	4619      	mov	r1, r3
    8ece:	1d28      	adds	r0, r5, #4
{
    8ed0:	4690      	mov	r8, r2
    8ed2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ed4:	f000 f8d7 	bl	9086 <sys_notify_finalize>
	if (cb) {
    8ed8:	4604      	mov	r4, r0
    8eda:	b138      	cbz	r0, 8eec <notify_one+0x28>
		cb(mgr, cli, state, res);
    8edc:	4633      	mov	r3, r6
    8ede:	4642      	mov	r2, r8
    8ee0:	4629      	mov	r1, r5
    8ee2:	4638      	mov	r0, r7
    8ee4:	46a4      	mov	ip, r4
}
    8ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8eea:	4760      	bx	ip
}
    8eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008ef0 <transition_complete>:
{
    8ef0:	b410      	push	{r4}
	__asm__ volatile(
    8ef2:	f04f 0420 	mov.w	r4, #32
    8ef6:	f3ef 8211 	mrs	r2, BASEPRI
    8efa:	f384 8812 	msr	BASEPRI_MAX, r4
    8efe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    8f02:	6141      	str	r1, [r0, #20]
}
    8f04:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    8f06:	2101      	movs	r1, #1
    8f08:	f7f8 bb64 	b.w	15d4 <process_event>

00008f0c <onoff_manager_init>:
{
    8f0c:	b538      	push	{r3, r4, r5, lr}
    8f0e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8f10:	4605      	mov	r5, r0
    8f12:	b158      	cbz	r0, 8f2c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8f14:	b151      	cbz	r1, 8f2c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8f16:	680b      	ldr	r3, [r1, #0]
    8f18:	b143      	cbz	r3, 8f2c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8f1a:	684b      	ldr	r3, [r1, #4]
    8f1c:	b133      	cbz	r3, 8f2c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8f1e:	221c      	movs	r2, #28
    8f20:	2100      	movs	r1, #0
    8f22:	f000 fb59 	bl	95d8 <memset>
    8f26:	612c      	str	r4, [r5, #16]
	return 0;
    8f28:	2000      	movs	r0, #0
}
    8f2a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8f2c:	f06f 0015 	mvn.w	r0, #21
    8f30:	e7fb      	b.n	8f2a <onoff_manager_init+0x1e>

00008f32 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8f32:	b570      	push	{r4, r5, r6, lr}
    8f34:	4605      	mov	r5, r0
    8f36:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8f38:	f7ff ffb4 	bl	8ea4 <validate_args>

	if (rv < 0) {
    8f3c:	1e04      	subs	r4, r0, #0
    8f3e:	db15      	blt.n	8f6c <onoff_request+0x3a>
    8f40:	f04f 0320 	mov.w	r3, #32
    8f44:	f3ef 8211 	mrs	r2, BASEPRI
    8f48:	f383 8812 	msr	BASEPRI_MAX, r3
    8f4c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    8f50:	8b6b      	ldrh	r3, [r5, #26]
    8f52:	8b2c      	ldrh	r4, [r5, #24]
    8f54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8f58:	428b      	cmp	r3, r1
    8f5a:	f004 0407 	and.w	r4, r4, #7
    8f5e:	d107      	bne.n	8f70 <onoff_request+0x3e>
	__asm__ volatile(
    8f60:	f382 8811 	msr	BASEPRI, r2
    8f64:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    8f68:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    8f6c:	4620      	mov	r0, r4
    8f6e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    8f70:	2c02      	cmp	r4, #2
    8f72:	d10c      	bne.n	8f8e <onoff_request+0x5c>
		mgr->refs += 1U;
    8f74:	3301      	adds	r3, #1
    8f76:	836b      	strh	r3, [r5, #26]
    8f78:	f382 8811 	msr	BASEPRI, r2
    8f7c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    8f80:	2300      	movs	r3, #0
    8f82:	4622      	mov	r2, r4
    8f84:	4631      	mov	r1, r6
    8f86:	4628      	mov	r0, r5
    8f88:	f7ff ff9c 	bl	8ec4 <notify_one>
    8f8c:	e7ee      	b.n	8f6c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    8f8e:	2c06      	cmp	r4, #6
    8f90:	d814      	bhi.n	8fbc <onoff_request+0x8a>
    8f92:	e8df f004 	tbb	[pc, r4]
    8f96:	1304      	.short	0x1304
    8f98:	1a041313 	.word	0x1a041313
    8f9c:	04          	.byte	0x04
    8f9d:	00          	.byte	0x00
	parent->next = child;
    8f9e:	2300      	movs	r3, #0
    8fa0:	6033      	str	r3, [r6, #0]
	return list->tail;
    8fa2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    8fa4:	b93b      	cbnz	r3, 8fb6 <onoff_request+0x84>
	list->head = node;
    8fa6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    8faa:	b9ac      	cbnz	r4, 8fd8 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    8fac:	2102      	movs	r1, #2
    8fae:	4628      	mov	r0, r5
    8fb0:	f7f8 fb10 	bl	15d4 <process_event>
    8fb4:	e7da      	b.n	8f6c <onoff_request+0x3a>
	parent->next = child;
    8fb6:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8fb8:	606e      	str	r6, [r5, #4]
}
    8fba:	e7f6      	b.n	8faa <onoff_request+0x78>
    8fbc:	f382 8811 	msr	BASEPRI, r2
    8fc0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    8fc4:	f06f 0404 	mvn.w	r4, #4
    8fc8:	e7d0      	b.n	8f6c <onoff_request+0x3a>
    8fca:	f382 8811 	msr	BASEPRI, r2
    8fce:	f3bf 8f6f 	isb	sy
    8fd2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8fd6:	e7c9      	b.n	8f6c <onoff_request+0x3a>
    8fd8:	f382 8811 	msr	BASEPRI, r2
    8fdc:	f3bf 8f6f 	isb	sy
		if (notify) {
    8fe0:	e7c4      	b.n	8f6c <onoff_request+0x3a>

00008fe2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    8fe2:	b510      	push	{r4, lr}
	__asm__ volatile(
    8fe4:	f04f 0320 	mov.w	r3, #32
    8fe8:	f3ef 8211 	mrs	r2, BASEPRI
    8fec:	f383 8812 	msr	BASEPRI_MAX, r3
    8ff0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8ff4:	8b04      	ldrh	r4, [r0, #24]
    8ff6:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    8ffa:	2c02      	cmp	r4, #2
    8ffc:	d00a      	beq.n	9014 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    8ffe:	2c01      	cmp	r4, #1
    9000:	bf0c      	ite	eq
    9002:	f06f 0004 	mvneq.w	r0, #4
    9006:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    900a:	f382 8811 	msr	BASEPRI, r2
    900e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    9012:	e008      	b.n	9026 <onoff_release+0x44>
	mgr->refs -= 1U;
    9014:	8b43      	ldrh	r3, [r0, #26]
    9016:	3b01      	subs	r3, #1
    9018:	b29b      	uxth	r3, r3
    901a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    901c:	b923      	cbnz	r3, 9028 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    901e:	4621      	mov	r1, r4
    9020:	f7f8 fad8 	bl	15d4 <process_event>
	int rv = state;
    9024:	4620      	mov	r0, r4
}
    9026:	bd10      	pop	{r4, pc}
	int rv = state;
    9028:	4620      	mov	r0, r4
    902a:	e7ee      	b.n	900a <onoff_release+0x28>

0000902c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    902c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    902e:	b1b0      	cbz	r0, 905e <onoff_cancel+0x32>
    9030:	b1a9      	cbz	r1, 905e <onoff_cancel+0x32>
	__asm__ volatile(
    9032:	f04f 0220 	mov.w	r2, #32
    9036:	f3ef 8511 	mrs	r5, BASEPRI
    903a:	f382 8812 	msr	BASEPRI_MAX, r2
    903e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9042:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    9044:	f7ff fef7 	bl	8e36 <sys_slist_find_and_remove>
    9048:	b130      	cbz	r0, 9058 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    904a:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    904e:	f385 8811 	msr	BASEPRI, r5
    9052:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9056:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    9058:	f06f 0077 	mvn.w	r0, #119	; 0x77
    905c:	e7f7      	b.n	904e <onoff_cancel+0x22>
		return -EINVAL;
    905e:	f06f 0015 	mvn.w	r0, #21
    9062:	e7f8      	b.n	9056 <onoff_cancel+0x2a>

00009064 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9064:	4603      	mov	r3, r0
    9066:	b158      	cbz	r0, 9080 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9068:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    906a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    906e:	2a01      	cmp	r2, #1
    9070:	d003      	beq.n	907a <sys_notify_validate+0x16>
    9072:	2a03      	cmp	r2, #3
    9074:	d104      	bne.n	9080 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9076:	6802      	ldr	r2, [r0, #0]
    9078:	b112      	cbz	r2, 9080 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    907a:	2000      	movs	r0, #0
    907c:	6098      	str	r0, [r3, #8]
    907e:	4770      	bx	lr
    9080:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9084:	4770      	bx	lr

00009086 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9086:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9088:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    908a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    908e:	2a03      	cmp	r2, #3
    9090:	f04f 0200 	mov.w	r2, #0
{
    9094:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9096:	bf0c      	ite	eq
    9098:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    909a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    909c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    909e:	4770      	bx	lr

000090a0 <encode_uint>:
{
    90a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90a4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    90a6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    90a8:	2b6f      	cmp	r3, #111	; 0x6f
{
    90aa:	4680      	mov	r8, r0
    90ac:	460f      	mov	r7, r1
    90ae:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    90b0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    90b4:	d029      	beq.n	910a <encode_uint+0x6a>
    90b6:	d824      	bhi.n	9102 <encode_uint+0x62>
		return 10;
    90b8:	2b58      	cmp	r3, #88	; 0x58
    90ba:	bf0c      	ite	eq
    90bc:	2610      	moveq	r6, #16
    90be:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    90c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    90c4:	4632      	mov	r2, r6
    90c6:	2300      	movs	r3, #0
    90c8:	4640      	mov	r0, r8
    90ca:	4639      	mov	r1, r7
    90cc:	f7f8 f818 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    90d0:	2a09      	cmp	r2, #9
    90d2:	b2d4      	uxtb	r4, r2
    90d4:	d81e      	bhi.n	9114 <encode_uint+0x74>
    90d6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    90d8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    90da:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    90dc:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    90e0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    90e4:	d301      	bcc.n	90ea <encode_uint+0x4a>
    90e6:	45d1      	cmp	r9, sl
    90e8:	d811      	bhi.n	910e <encode_uint+0x6e>
	if (conv->flag_hash) {
    90ea:	782b      	ldrb	r3, [r5, #0]
    90ec:	069b      	lsls	r3, r3, #26
    90ee:	d505      	bpl.n	90fc <encode_uint+0x5c>
		if (radix == 8) {
    90f0:	2e08      	cmp	r6, #8
    90f2:	d115      	bne.n	9120 <encode_uint+0x80>
			conv->altform_0 = true;
    90f4:	78ab      	ldrb	r3, [r5, #2]
    90f6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    90fa:	70ab      	strb	r3, [r5, #2]
}
    90fc:	4648      	mov	r0, r9
    90fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    9102:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    9106:	2b70      	cmp	r3, #112	; 0x70
    9108:	e7d7      	b.n	90ba <encode_uint+0x1a>
	switch (specifier) {
    910a:	2608      	movs	r6, #8
    910c:	e7d8      	b.n	90c0 <encode_uint+0x20>
		value /= radix;
    910e:	4680      	mov	r8, r0
    9110:	460f      	mov	r7, r1
    9112:	e7d7      	b.n	90c4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9114:	f1bb 0f19 	cmp.w	fp, #25
    9118:	bf94      	ite	ls
    911a:	3437      	addls	r4, #55	; 0x37
    911c:	3457      	addhi	r4, #87	; 0x57
    911e:	e7db      	b.n	90d8 <encode_uint+0x38>
		} else if (radix == 16) {
    9120:	2e10      	cmp	r6, #16
    9122:	d1eb      	bne.n	90fc <encode_uint+0x5c>
			conv->altform_0c = true;
    9124:	78ab      	ldrb	r3, [r5, #2]
    9126:	f043 0310 	orr.w	r3, r3, #16
    912a:	e7e6      	b.n	90fa <encode_uint+0x5a>

0000912c <outs>:
{
    912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9130:	4607      	mov	r7, r0
    9132:	4688      	mov	r8, r1
    9134:	4615      	mov	r5, r2
    9136:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9138:	4614      	mov	r4, r2
    913a:	42b4      	cmp	r4, r6
    913c:	d305      	bcc.n	914a <outs+0x1e>
    913e:	b10e      	cbz	r6, 9144 <outs+0x18>
	return (int)count;
    9140:	1b60      	subs	r0, r4, r5
    9142:	e008      	b.n	9156 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9144:	7823      	ldrb	r3, [r4, #0]
    9146:	2b00      	cmp	r3, #0
    9148:	d0fa      	beq.n	9140 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    914a:	f814 0b01 	ldrb.w	r0, [r4], #1
    914e:	4641      	mov	r1, r8
    9150:	47b8      	blx	r7
		if (rc < 0) {
    9152:	2800      	cmp	r0, #0
    9154:	daf1      	bge.n	913a <outs+0xe>
}
    9156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000915a <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    915a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    915c:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    915e:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    9160:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    9162:	1baf      	subs	r7, r5, r6
{
    9164:	4604      	mov	r4, r0
    9166:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    9168:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    916a:	bf98      	it	ls
    916c:	1aff      	subls	r7, r7, r3
    916e:	eba5 0000 	sub.w	r0, r5, r0
{
    9172:	4694      	mov	ip, r2
		base += buf->size;
    9174:	bf98      	it	ls
    9176:	18f6      	addls	r6, r6, r3
    9178:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    917a:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    917c:	6823      	ldr	r3, [r4, #0]
    917e:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    9180:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    9182:	442b      	add	r3, r5
	size = MIN(size, free_space);
    9184:	bf28      	it	cs
    9186:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    9188:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    918a:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    918c:	4290      	cmp	r0, r2
    918e:	bf28      	it	cs
    9190:	4610      	movcs	r0, r2
	buf->put_head += size;
    9192:	4403      	add	r3, r0
    9194:	6063      	str	r3, [r4, #4]

	return size;
}
    9196:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009198 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    9198:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    919c:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    919e:	428a      	cmp	r2, r1
    91a0:	d30c      	bcc.n	91bc <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    91a2:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    91a4:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    91a6:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    91a8:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    91ac:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    91ae:	428a      	cmp	r2, r1
    91b0:	d901      	bls.n	91b6 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    91b2:	2000      	movs	r0, #0
    91b4:	4770      	bx	lr
		buf->put_base += buf->size;
    91b6:	4413      	add	r3, r2
    91b8:	60c3      	str	r3, [r0, #12]
    91ba:	e7fa      	b.n	91b2 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    91bc:	f06f 0015 	mvn.w	r0, #21
}
    91c0:	4770      	bx	lr

000091c2 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    91c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    91c6:	4680      	mov	r8, r0
    91c8:	460e      	mov	r6, r1
    91ca:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    91cc:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    91ce:	462a      	mov	r2, r5
    91d0:	a901      	add	r1, sp, #4
    91d2:	4640      	mov	r0, r8
    91d4:	f7ff ffc1 	bl	915a <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    91d8:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    91da:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    91dc:	4602      	mov	r2, r0
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	f000 f9ef 	bl	95c2 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    91e4:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    91e6:	4427      	add	r7, r4
		data += partial_size;
    91e8:	4426      	add	r6, r4
	} while (size && partial_size);
    91ea:	d001      	beq.n	91f0 <ring_buf_put+0x2e>
    91ec:	2c00      	cmp	r4, #0
    91ee:	d1ee      	bne.n	91ce <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    91f0:	4639      	mov	r1, r7
    91f2:	4640      	mov	r0, r8
    91f4:	f7ff ffd0 	bl	9198 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    91f8:	4638      	mov	r0, r7
    91fa:	b002      	add	sp, #8
    91fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009200 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    9200:	b5f0      	push	{r4, r5, r6, r7, lr}
    9202:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    9204:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    9206:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    9208:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    920a:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    920c:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    920e:	42b8      	cmp	r0, r7
{
    9210:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    9212:	bf98      	it	ls
    9214:	1836      	addls	r6, r6, r0
    9216:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    921a:	6823      	ldr	r3, [r4, #0]
    921c:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    9220:	bf98      	it	ls
    9222:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    9224:	442b      	add	r3, r5
	size = MIN(size, available_size);
    9226:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    9228:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    922c:	bf28      	it	cs
    922e:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    9230:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    9232:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    9234:	4290      	cmp	r0, r2
    9236:	bf28      	it	cs
    9238:	4610      	movcs	r0, r2
	buf->get_head += size;
    923a:	4403      	add	r3, r0
    923c:	6123      	str	r3, [r4, #16]

	return size;
}
    923e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009240 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    9240:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    9244:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    9246:	428a      	cmp	r2, r1
    9248:	d30c      	bcc.n	9264 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    924a:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    924c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    9250:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    9254:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    9256:	428a      	cmp	r2, r1
    9258:	d901      	bls.n	925e <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    925a:	2000      	movs	r0, #0
    925c:	4770      	bx	lr
		buf->get_base += buf->size;
    925e:	4413      	add	r3, r2
    9260:	6183      	str	r3, [r0, #24]
    9262:	e7fa      	b.n	925a <ring_buf_get_finish+0x1a>
		return -EINVAL;
    9264:	f06f 0015 	mvn.w	r0, #21
}
    9268:	4770      	bx	lr

0000926a <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    926a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    926e:	4680      	mov	r8, r0
    9270:	460d      	mov	r5, r1
    9272:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    9274:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    9276:	4632      	mov	r2, r6
    9278:	a901      	add	r1, sp, #4
    927a:	4640      	mov	r0, r8
    927c:	f7ff ffc0 	bl	9200 <ring_buf_get_claim>
    9280:	4604      	mov	r4, r0
		if (data) {
    9282:	b12d      	cbz	r5, 9290 <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    9284:	4602      	mov	r2, r0
    9286:	9901      	ldr	r1, [sp, #4]
    9288:	4628      	mov	r0, r5
    928a:	f000 f99a 	bl	95c2 <memcpy>
			data += partial_size;
    928e:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    9290:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    9292:	4427      	add	r7, r4
	} while (size && partial_size);
    9294:	d001      	beq.n	929a <ring_buf_get+0x30>
    9296:	2c00      	cmp	r4, #0
    9298:	d1ed      	bne.n	9276 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    929a:	4639      	mov	r1, r7
    929c:	4640      	mov	r0, r8
    929e:	f7ff ffcf 	bl	9240 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    92a2:	4638      	mov	r0, r7
    92a4:	b002      	add	sp, #8
    92a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000092aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    92aa:	4770      	bx	lr

000092ac <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    92ac:	f010 0f70 	tst.w	r0, #112	; 0x70
    92b0:	d108      	bne.n	92c4 <get_ep_bm_from_addr+0x18>
	ep_idx = ep & (~USB_EP_DIR_IN);
    92b2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (ep & USB_EP_DIR_IN) {
    92b6:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    92ba:	bf18      	it	ne
    92bc:	3310      	addne	r3, #16
    92be:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    92c0:	4098      	lsls	r0, r3
    92c2:	4770      	bx	lr
	uint32_t ep_bm = 0;
    92c4:	2000      	movs	r0, #0
}
    92c6:	4770      	bx	lr

000092c8 <usb_write>:
{
    92c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92cc:	4606      	mov	r6, r0
    92ce:	460f      	mov	r7, r1
    92d0:	4690      	mov	r8, r2
    92d2:	4699      	mov	r9, r3
    92d4:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    92d6:	464b      	mov	r3, r9
    92d8:	4642      	mov	r2, r8
    92da:	4639      	mov	r1, r7
    92dc:	4630      	mov	r0, r6
    92de:	f7fb f8d7 	bl	4490 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    92e2:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    92e6:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    92e8:	d103      	bne.n	92f2 <usb_write+0x2a>
	z_impl_k_yield();
    92ea:	f7ff f8eb 	bl	84c4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    92ee:	3d01      	subs	r5, #1
    92f0:	d1f1      	bne.n	92d6 <usb_write+0xe>
}
    92f2:	4620      	mov	r0, r4
    92f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000092f8 <usb_get_dev_data_by_cfg>:
	return list->head;
    92f8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    92fa:	b140      	cbz	r0, 930e <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    92fc:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    9300:	685b      	ldr	r3, [r3, #4]
    9302:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9304:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    9308:	d001      	beq.n	930e <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    930a:	6840      	ldr	r0, [r0, #4]
    930c:	e7f5      	b.n	92fa <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    930e:	4770      	bx	lr

00009310 <usb_get_dev_data_by_iface>:
	return list->head;
    9310:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9312:	b150      	cbz	r0, 932a <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9314:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    9318:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    931a:	685b      	ldr	r3, [r3, #4]
    931c:	789b      	ldrb	r3, [r3, #2]
    931e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9320:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    9324:	d001      	beq.n	932a <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    9326:	6840      	ldr	r0, [r0, #4]
    9328:	e7f3      	b.n	9312 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    932a:	4770      	bx	lr

0000932c <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    932c:	b530      	push	{r4, r5, lr}
	return list->head;
    932e:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    9330:	b188      	cbz	r0, 9356 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    9332:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9336:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    9338:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    933a:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    933c:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    933e:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    9340:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    9342:	b2dc      	uxtb	r4, r3
    9344:	42a5      	cmp	r5, r4
    9346:	d801      	bhi.n	934c <usb_get_dev_data_by_ep+0x20>
	return node->next;
    9348:	6840      	ldr	r0, [r0, #4]
    934a:	e7f1      	b.n	9330 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    934c:	3301      	adds	r3, #1
    934e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    9352:	428c      	cmp	r4, r1
    9354:	d1f5      	bne.n	9342 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    9356:	bd30      	pop	{r4, r5, pc}

00009358 <usb_transfer_is_busy>:
{
    9358:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    935a:	f7f9 fce7 	bl	2d2c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    935e:	b128      	cbz	r0, 936c <usb_transfer_is_busy+0x14>
    9360:	6840      	ldr	r0, [r0, #4]
    9362:	f110 0f10 	cmn.w	r0, #16
    9366:	bf14      	ite	ne
    9368:	2000      	movne	r0, #0
    936a:	2001      	moveq	r0, #1
}
    936c:	bd08      	pop	{r3, pc}

0000936e <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    936e:	1c4b      	adds	r3, r1, #1
    9370:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    9372:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    9374:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    9376:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    937a:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    937c:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    9380:	4770      	bx	lr

00009382 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    9382:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    9386:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    938a:	4718      	bx	r3

0000938c <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    938c:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    938e:	2200      	movs	r2, #0
    9390:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    9394:	4770      	bx	lr

00009396 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9396:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    9398:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    939c:	b108      	cbz	r0, 93a2 <cdc_acm_irq_tx_ready+0xc>
    939e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    93a2:	4770      	bx	lr

000093a4 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    93a4:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    93a6:	2200      	movs	r2, #0
    93a8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    93ac:	4770      	bx	lr

000093ae <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    93ae:	6903      	ldr	r3, [r0, #16]
}
    93b0:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    93b4:	4770      	bx	lr

000093b6 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    93b6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    93b8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    93bc:	b112      	cbz	r2, 93c4 <cdc_acm_irq_is_pending+0xe>
    93be:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    93c2:	b92a      	cbnz	r2, 93d0 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    93c4:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    93c8:	b118      	cbz	r0, 93d2 <cdc_acm_irq_is_pending+0x1c>
    93ca:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    93ce:	4770      	bx	lr
		return 1;
    93d0:	2001      	movs	r0, #1
}
    93d2:	4770      	bx	lr

000093d4 <cdc_acm_irq_update>:
}
    93d4:	2001      	movs	r0, #1
    93d6:	4770      	bx	lr

000093d8 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    93d8:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    93da:	e9c3 1200 	strd	r1, r2, [r3]
}
    93de:	4770      	bx	lr

000093e0 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    93e0:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    93e2:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    93e4:	d008      	beq.n	93f8 <cdc_acm_line_ctrl_get+0x18>
    93e6:	2904      	cmp	r1, #4
    93e8:	d00b      	beq.n	9402 <cdc_acm_line_ctrl_get+0x22>
    93ea:	2901      	cmp	r1, #1
    93ec:	d10e      	bne.n	940c <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    93ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    93f2:	6013      	str	r3, [r2, #0]
		return 0;
    93f4:	2000      	movs	r0, #0
    93f6:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    93f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    93fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    9400:	e7f7      	b.n	93f2 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    9402:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    9406:	f003 0301 	and.w	r3, r3, #1
		return 0;
    940a:	e7f2      	b.n	93f2 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    940c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    9410:	4770      	bx	lr

00009412 <cdc_acm_configure>:
}
    9412:	2000      	movs	r0, #0
    9414:	4770      	bx	lr

00009416 <cdc_acm_config_get>:
{
    9416:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9418:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    941a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    941e:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    9420:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    9424:	b16a      	cbz	r2, 9442 <cdc_acm_config_get+0x2c>
    9426:	2a01      	cmp	r2, #1
    9428:	bf0c      	ite	eq
    942a:	2202      	moveq	r2, #2
    942c:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    942e:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    9430:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    9434:	1e50      	subs	r0, r2, #1
    9436:	2803      	cmp	r0, #3
    9438:	d805      	bhi.n	9446 <cdc_acm_config_get+0x30>
    943a:	e8df f000 	tbb	[pc, r0]
    943e:	0505      	.short	0x0505
    9440:	0505      	.short	0x0505
	switch (dev_data->line_coding.bCharFormat) {
    9442:	2201      	movs	r2, #1
    9444:	e7f3      	b.n	942e <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    9446:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    9448:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    944a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    944e:	2b06      	cmp	r3, #6
    9450:	d009      	beq.n	9466 <cdc_acm_config_get+0x50>
    9452:	2b07      	cmp	r3, #7
    9454:	d009      	beq.n	946a <cdc_acm_config_get+0x54>
    9456:	2b05      	cmp	r3, #5
    9458:	bf0c      	ite	eq
    945a:	2300      	moveq	r3, #0
    945c:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    945e:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    9460:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    9462:	71c8      	strb	r0, [r1, #7]
}
    9464:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    9466:	2301      	movs	r3, #1
    9468:	e7f9      	b.n	945e <cdc_acm_config_get+0x48>
    946a:	2302      	movs	r3, #2
    946c:	e7f7      	b.n	945e <cdc_acm_config_get+0x48>

0000946e <cdc_acm_line_ctrl_set>:
{
    946e:	b508      	push	{r3, lr}
	switch (ctrl) {
    9470:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    9472:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    9474:	d03f      	beq.n	94f6 <cdc_acm_line_ctrl_set+0x88>
    9476:	d813      	bhi.n	94a0 <cdc_acm_line_ctrl_set+0x32>
    9478:	2910      	cmp	r1, #16
    947a:	d032      	beq.n	94e2 <cdc_acm_line_ctrl_set+0x74>
    947c:	d806      	bhi.n	948c <cdc_acm_line_ctrl_set+0x1e>
    947e:	2901      	cmp	r1, #1
    9480:	d01e      	beq.n	94c0 <cdc_acm_line_ctrl_set+0x52>
    9482:	2908      	cmp	r1, #8
    9484:	d020      	beq.n	94c8 <cdc_acm_line_ctrl_set+0x5a>
    9486:	f06f 0012 	mvn.w	r0, #18
}
    948a:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    948c:	2920      	cmp	r1, #32
    948e:	d1fa      	bne.n	9486 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    9490:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    9494:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    9498:	b352      	cbz	r2, 94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    949a:	f041 0104 	orr.w	r1, r1, #4
    949e:	e027      	b.n	94f0 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    94a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    94a4:	d030      	beq.n	9508 <cdc_acm_line_ctrl_set+0x9a>
    94a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    94aa:	d036      	beq.n	951a <cdc_acm_line_ctrl_set+0xac>
    94ac:	2980      	cmp	r1, #128	; 0x80
    94ae:	d1ea      	bne.n	9486 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    94b0:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    94b4:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    94b8:	b1d2      	cbz	r2, 94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    94ba:	f041 0110 	orr.w	r1, r1, #16
    94be:	e017      	b.n	94f0 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    94c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    94c4:	2000      	movs	r0, #0
    94c6:	e7e0      	b.n	948a <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    94c8:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    94cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    94d0:	b10a      	cbz	r2, 94d6 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    94d2:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    94d6:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    94da:	2101      	movs	r1, #1
    94dc:	f7f9 fef4 	bl	32c8 <cdc_acm_send_notification.isra.0>
		return 0;
    94e0:	e7f0      	b.n	94c4 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    94e2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    94e6:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    94ea:	b10a      	cbz	r2, 94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    94ec:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    94f0:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    94f4:	e7f2      	b.n	94dc <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    94f6:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    94fa:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    94fe:	2a00      	cmp	r2, #0
    9500:	d0f6      	beq.n	94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    9502:	f041 0108 	orr.w	r1, r1, #8
    9506:	e7f3      	b.n	94f0 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    9508:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    950c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    9510:	2a00      	cmp	r2, #0
    9512:	d0ed      	beq.n	94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    9514:	f041 0120 	orr.w	r1, r1, #32
    9518:	e7ea      	b.n	94f0 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    951a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    951e:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    9522:	2a00      	cmp	r2, #0
    9524:	d0e4      	beq.n	94f0 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    9526:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    952a:	e7e1      	b.n	94f0 <cdc_acm_line_ctrl_set+0x82>

0000952c <cdc_acm_fifo_read>:
{
    952c:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    952e:	6904      	ldr	r4, [r0, #16]
{
    9530:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    9532:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    9536:	f7ff fe98 	bl	926a <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    953a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    953e:	689a      	ldr	r2, [r3, #8]
    9540:	6919      	ldr	r1, [r3, #16]
    9542:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    9544:	bf04      	itt	eq
    9546:	2200      	moveq	r2, #0
    9548:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    954c:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    9550:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    9552:	b19a      	cbz	r2, 957c <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    9554:	685a      	ldr	r2, [r3, #4]
    9556:	6959      	ldr	r1, [r3, #20]
    9558:	69db      	ldr	r3, [r3, #28]
    955a:	1a52      	subs	r2, r2, r1
    955c:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    955e:	2b3f      	cmp	r3, #63	; 0x3f
    9560:	d90c      	bls.n	957c <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    9562:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    9566:	b133      	cbz	r3, 9576 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    9568:	686b      	ldr	r3, [r5, #4]
    956a:	6a1b      	ldr	r3, [r3, #32]
    956c:	4622      	mov	r2, r4
    956e:	7b18      	ldrb	r0, [r3, #12]
    9570:	2100      	movs	r1, #0
    9572:	f7f9 fecb 	bl	330c <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    9576:	2300      	movs	r3, #0
    9578:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    957c:	4630      	mov	r0, r6
    957e:	bd70      	pop	{r4, r5, r6, pc}

00009580 <cdc_acm_poll_in>:
{
    9580:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    9582:	2201      	movs	r2, #1
    9584:	f7ff ffd2 	bl	952c <cdc_acm_fifo_read>
}
    9588:	3801      	subs	r0, #1
    958a:	bf18      	it	ne
    958c:	f04f 30ff 	movne.w	r0, #4294967295
    9590:	bd08      	pop	{r3, pc}

00009592 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    9592:	f000 bc1a 	b.w	9dca <z_fatal_error>

00009596 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9596:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    9598:	6800      	ldr	r0, [r0, #0]
    959a:	f000 bc16 	b.w	9dca <z_fatal_error>

0000959e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    959e:	2100      	movs	r1, #0
    95a0:	2001      	movs	r0, #1
    95a2:	f7ff bff6 	b.w	9592 <z_arm_fatal_error>

000095a6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    95a6:	b508      	push	{r3, lr}
	handler();
    95a8:	f7f9 ffac 	bl	3504 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    95ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    95b0:	f7fa b88c 	b.w	36cc <z_arm_exc_exit>

000095b4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    95b4:	4603      	mov	r3, r0
	size_t n = 0;
    95b6:	2000      	movs	r0, #0

	while (*s != '\0') {
    95b8:	5c1a      	ldrb	r2, [r3, r0]
    95ba:	b902      	cbnz	r2, 95be <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    95bc:	4770      	bx	lr
		n++;
    95be:	3001      	adds	r0, #1
    95c0:	e7fa      	b.n	95b8 <strlen+0x4>

000095c2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    95c2:	b510      	push	{r4, lr}
    95c4:	1e43      	subs	r3, r0, #1
    95c6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    95c8:	4291      	cmp	r1, r2
    95ca:	d100      	bne.n	95ce <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    95cc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    95ce:	f811 4b01 	ldrb.w	r4, [r1], #1
    95d2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    95d6:	e7f7      	b.n	95c8 <memcpy+0x6>

000095d8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    95d8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    95da:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    95dc:	4603      	mov	r3, r0
	while (n > 0) {
    95de:	4293      	cmp	r3, r2
    95e0:	d100      	bne.n	95e4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    95e2:	4770      	bx	lr
		*(d_byte++) = c_byte;
    95e4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    95e8:	e7f9      	b.n	95de <memset+0x6>

000095ea <_stdout_hook_default>:
}
    95ea:	f04f 30ff 	mov.w	r0, #4294967295
    95ee:	4770      	bx	lr

000095f0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    95f0:	4603      	mov	r3, r0
	size_t n = 0;
    95f2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    95f4:	5c1a      	ldrb	r2, [r3, r0]
    95f6:	b10a      	cbz	r2, 95fc <strnlen+0xc>
    95f8:	4288      	cmp	r0, r1
    95fa:	d100      	bne.n	95fe <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    95fc:	4770      	bx	lr
		n++;
    95fe:	3001      	adds	r0, #1
    9600:	e7f8      	b.n	95f4 <strnlen+0x4>

00009602 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9602:	2806      	cmp	r0, #6
    9604:	d108      	bne.n	9618 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    960a:	2201      	movs	r2, #1
    960c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9610:	f3bf 8f4f 	dsb	sy
        __WFE();
    9614:	bf20      	wfe
    while (true)
    9616:	e7fd      	b.n	9614 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9618:	4770      	bx	lr

0000961a <pm_state_exit_post_ops>:
    961a:	2300      	movs	r3, #0
    961c:	f383 8811 	msr	BASEPRI, r3
    9620:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9624:	4770      	bx	lr

00009626 <ep_ctx_reset>:
{
    9626:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    9628:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    962a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    962e:	2300      	movs	r3, #0
    9630:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    9632:	7f83      	ldrb	r3, [r0, #30]
{
    9634:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    9636:	b113      	cbz	r3, 963e <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    9638:	7a40      	ldrb	r0, [r0, #9]
    963a:	f000 fb9f 	bl	9d7c <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    963e:	2301      	movs	r3, #1
    9640:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    9642:	2300      	movs	r3, #0
    9644:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    9646:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    9648:	77a3      	strb	r3, [r4, #30]
}
    964a:	bd10      	pop	{r4, pc}

0000964c <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    964c:	f7fe ba6c 	b.w	7b28 <z_impl_k_mutex_lock>

00009650 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    9650:	f7fe bae4 	b.w	7c1c <z_impl_k_mutex_unlock>

00009654 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    9654:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    9656:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    9658:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    965c:	b921      	cbnz	r1, 9668 <usb_dc_ep_check_cap+0x14>
    965e:	3a00      	subs	r2, #0
    9660:	bf18      	it	ne
    9662:	2201      	movne	r2, #1
    9664:	4250      	negs	r0, r2
    9666:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    9668:	2a08      	cmp	r2, #8
    966a:	d806      	bhi.n	967a <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    966c:	2901      	cmp	r1, #1
    966e:	d107      	bne.n	9680 <usb_dc_ep_check_cap+0x2c>
    9670:	f083 0008 	eor.w	r0, r3, #8
    9674:	f340 00c0 	sbfx	r0, r0, #3, #1
    9678:	4770      	bx	lr
		return -1;
    967a:	f04f 30ff 	mov.w	r0, #4294967295
    967e:	4770      	bx	lr
	return 0;
    9680:	2000      	movs	r0, #0
}
    9682:	4770      	bx	lr

00009684 <usb_dc_ep_disable>:
{
    9684:	b538      	push	{r3, r4, r5, lr}
    9686:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    9688:	f7fa fa9c 	bl	3bc4 <endpoint_ctx>
	if (!ep_ctx) {
    968c:	4605      	mov	r5, r0
    968e:	b160      	cbz	r0, 96aa <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    9690:	7a03      	ldrb	r3, [r0, #8]
    9692:	b16b      	cbz	r3, 96b0 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9694:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    9696:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    9698:	f7fd ff24 	bl	74e4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    969c:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    969e:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    96a0:	f7ff ffc1 	bl	9626 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    96a4:	722c      	strb	r4, [r5, #8]
	return 0;
    96a6:	4620      	mov	r0, r4
}
    96a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    96aa:	f06f 0015 	mvn.w	r0, #21
    96ae:	e7fb      	b.n	96a8 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    96b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    96b4:	e7f8      	b.n	96a8 <usb_dc_ep_disable+0x24>

000096b6 <usb_dc_ep_read>:
{
    96b6:	b570      	push	{r4, r5, r6, lr}
    96b8:	4604      	mov	r4, r0
    96ba:	460e      	mov	r6, r1
    96bc:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    96be:	f7fa ff63 	bl	4588 <usb_dc_ep_read_wait>
	if (ret) {
    96c2:	b930      	cbnz	r0, 96d2 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    96c4:	b906      	cbnz	r6, 96c8 <usb_dc_ep_read+0x12>
    96c6:	b125      	cbz	r5, 96d2 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    96c8:	4620      	mov	r0, r4
}
    96ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    96ce:	f7fa bfa3 	b.w	4618 <usb_dc_ep_read_continue>
}
    96d2:	bd70      	pop	{r4, r5, r6, pc}

000096d4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    96d4:	6903      	ldr	r3, [r0, #16]
    96d6:	b2c9      	uxtb	r1, r1
    96d8:	220c      	movs	r2, #12
    96da:	fb01 3302 	mla	r3, r1, r2, r3
    96de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    96e0:	f000 0007 	and.w	r0, r0, #7
    96e4:	4770      	bx	lr

000096e6 <set_on_state>:
	__asm__ volatile(
    96e6:	f04f 0320 	mov.w	r3, #32
    96ea:	f3ef 8211 	mrs	r2, BASEPRI
    96ee:	f383 8812 	msr	BASEPRI_MAX, r3
    96f2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    96f6:	6803      	ldr	r3, [r0, #0]
    96f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    96fc:	f043 0302 	orr.w	r3, r3, #2
    9700:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9702:	f382 8811 	msr	BASEPRI, r2
    9706:	f3bf 8f6f 	isb	sy
}
    970a:	4770      	bx	lr

0000970c <stop>:
{
    970c:	b570      	push	{r4, r5, r6, lr}
    970e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    9710:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    9712:	f04f 0420 	mov.w	r4, #32
    9716:	f3ef 8511 	mrs	r5, BASEPRI
    971a:	f384 8812 	msr	BASEPRI_MAX, r4
    971e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9722:	260c      	movs	r6, #12
    9724:	fb06 3401 	mla	r4, r6, r1, r3
    9728:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    972a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    972e:	d008      	beq.n	9742 <stop+0x36>
    9730:	42a2      	cmp	r2, r4
    9732:	d006      	beq.n	9742 <stop+0x36>
	__asm__ volatile(
    9734:	f385 8811 	msr	BASEPRI, r5
    9738:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    973c:	f04f 30ff 	mov.w	r0, #4294967295
}
    9740:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    9742:	fb06 3301 	mla	r3, r6, r1, r3
    9746:	2201      	movs	r2, #1
    9748:	641a      	str	r2, [r3, #64]	; 0x40
    974a:	f385 8811 	msr	BASEPRI, r5
    974e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    9752:	6843      	ldr	r3, [r0, #4]
    9754:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9758:	685b      	ldr	r3, [r3, #4]
    975a:	4798      	blx	r3
	return 0;
    975c:	2000      	movs	r0, #0
    975e:	e7ef      	b.n	9740 <stop+0x34>

00009760 <api_stop>:
	return stop(dev, subsys, CTX_API);
    9760:	2280      	movs	r2, #128	; 0x80
    9762:	f7ff bfd3 	b.w	970c <stop>

00009766 <async_start>:
{
    9766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9768:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    976a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    976c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    976e:	f04f 0520 	mov.w	r5, #32
    9772:	f3ef 8611 	mrs	r6, BASEPRI
    9776:	f385 8812 	msr	BASEPRI_MAX, r5
    977a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    977e:	250c      	movs	r5, #12
    9780:	fb05 4401 	mla	r4, r5, r1, r4
    9784:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9786:	f005 0c07 	and.w	ip, r5, #7
    978a:	f1bc 0f01 	cmp.w	ip, #1
    978e:	d10c      	bne.n	97aa <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9790:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    9792:	f386 8811 	msr	BASEPRI, r6
    9796:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    979a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    979e:	6843      	ldr	r3, [r0, #4]
    97a0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    97a4:	4798      	blx	r3
	return 0;
    97a6:	2000      	movs	r0, #0
}
    97a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    97aa:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    97ae:	42af      	cmp	r7, r5
    97b0:	f386 8811 	msr	BASEPRI, r6
    97b4:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    97b8:	bf0c      	ite	eq
    97ba:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    97be:	f04f 30ff 	movne.w	r0, #4294967295
    97c2:	e7f1      	b.n	97a8 <async_start+0x42>

000097c4 <api_start>:
{
    97c4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    97c6:	2480      	movs	r4, #128	; 0x80
    97c8:	9400      	str	r4, [sp, #0]
    97ca:	f7ff ffcc 	bl	9766 <async_start>
}
    97ce:	b002      	add	sp, #8
    97d0:	bd10      	pop	{r4, pc}

000097d2 <onoff_started_callback>:
{
    97d2:	b410      	push	{r4}
	return &data->mgr[type];
    97d4:	6900      	ldr	r0, [r0, #16]
    97d6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    97d8:	241c      	movs	r4, #28
    97da:	fb03 0004 	mla	r0, r3, r4, r0
    97de:	2100      	movs	r1, #0
}
    97e0:	bc10      	pop	{r4}
	notify(mgr, 0);
    97e2:	4710      	bx	r2

000097e4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    97e4:	2000      	movs	r0, #0
    97e6:	f000 b8ff 	b.w	99e8 <nrfx_clock_start>

000097ea <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    97ea:	2000      	movs	r0, #0
    97ec:	f000 b938 	b.w	9a60 <nrfx_clock_stop>

000097f0 <blocking_start_callback>:
{
    97f0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    97f2:	f7fe ba83 	b.w	7cfc <z_impl_k_sem_give>

000097f6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    97f6:	6843      	ldr	r3, [r0, #4]
    97f8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    97fa:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    97fe:	600b      	str	r3, [r1, #0]
}
    9800:	2000      	movs	r0, #0
    9802:	4770      	bx	lr

00009804 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9804:	6843      	ldr	r3, [r0, #4]
    9806:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    9808:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    980c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    9810:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9814:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    9818:	2000      	movs	r0, #0
    981a:	4770      	bx	lr

0000981c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    981c:	6843      	ldr	r3, [r0, #4]
    981e:	685b      	ldr	r3, [r3, #4]
}
    9820:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9822:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9826:	4770      	bx	lr

00009828 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9828:	6843      	ldr	r3, [r0, #4]
    982a:	685b      	ldr	r3, [r3, #4]
}
    982c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    982e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9832:	4770      	bx	lr

00009834 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9834:	6843      	ldr	r3, [r0, #4]
    9836:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9838:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    983c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    9840:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    9842:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9846:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    984a:	2000      	movs	r0, #0
    984c:	4770      	bx	lr

0000984e <gpio_nrfx_manage_callback>:
{
    984e:	b510      	push	{r4, lr}
	return port->data;
    9850:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9852:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    9854:	b1f8      	cbz	r0, 9896 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9856:	4288      	cmp	r0, r1
    9858:	d119      	bne.n	988e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    985a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    985c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    985e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9860:	42a1      	cmp	r1, r4
    9862:	d100      	bne.n	9866 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9864:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9866:	2000      	movs	r0, #0
    9868:	6008      	str	r0, [r1, #0]
	if (set) {
    986a:	b12a      	cbz	r2, 9878 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    986c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    986e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    9870:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    9872:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9874:	b902      	cbnz	r2, 9878 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    9876:	6099      	str	r1, [r3, #8]
	return 0;
    9878:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    987a:	e010      	b.n	989e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    987c:	4281      	cmp	r1, r0
    987e:	d106      	bne.n	988e <gpio_nrfx_manage_callback+0x40>
	return node->next;
    9880:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    9882:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9884:	6898      	ldr	r0, [r3, #8]
    9886:	4281      	cmp	r1, r0
    9888:	d1ed      	bne.n	9866 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    988a:	609c      	str	r4, [r3, #8]
}
    988c:	e7eb      	b.n	9866 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    988e:	4604      	mov	r4, r0
    9890:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9892:	2800      	cmp	r0, #0
    9894:	d1f2      	bne.n	987c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    9896:	2a00      	cmp	r2, #0
    9898:	d1e8      	bne.n	986c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    989a:	f06f 0015 	mvn.w	r0, #21
}
    989e:	bd10      	pop	{r4, pc}

000098a0 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    98a0:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    98a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    98a6:	2908      	cmp	r1, #8
    98a8:	6e13      	ldr	r3, [r2, #96]	; 0x60
    98aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
    98ac:	bf28      	it	cs
    98ae:	2108      	movcs	r1, #8
    98b0:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    98b2:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    98b4:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    98b6:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    98b8:	460a      	mov	r2, r1
    98ba:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    98bc:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    98be:	f7ff fe80 	bl	95c2 <memcpy>

	return length;
}
    98c2:	4620      	mov	r0, r4
    98c4:	b002      	add	sp, #8
    98c6:	bd10      	pop	{r4, pc}

000098c8 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
    98c8:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    98ca:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    98cc:	d405      	bmi.n	98da <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
    98ce:	f3c1 0142 	ubfx	r1, r1, #1, #3
    98d2:	2901      	cmp	r1, #1
    98d4:	d004      	beq.n	98e0 <i2c_nrfx_twim_configure+0x18>
    98d6:	2902      	cmp	r1, #2
    98d8:	d009      	beq.n	98ee <i2c_nrfx_twim_configure+0x26>
    98da:	f06f 0015 	mvn.w	r0, #21
}
    98de:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    98e0:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    98e2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    98e6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    98ea:	2000      	movs	r0, #0
    98ec:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    98ee:	681b      	ldr	r3, [r3, #0]
    98f0:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    98f4:	e7f7      	b.n	98e6 <i2c_nrfx_twim_configure+0x1e>

000098f6 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    98f6:	2200      	movs	r2, #0
    98f8:	2101      	movs	r1, #1
    98fa:	2003      	movs	r0, #3
    98fc:	f7f9 bdea 	b.w	34d4 <z_arm_irq_priority_set>

00009900 <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    9900:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    9902:	2100      	movs	r1, #0
    9904:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    9906:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    9908:	f000 f80a 	bl	9920 <pinctrl_lookup_state>
	if (ret < 0) {
    990c:	2800      	cmp	r0, #0
    990e:	db05      	blt.n	991c <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    9910:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    9912:	6822      	ldr	r2, [r4, #0]
    9914:	7919      	ldrb	r1, [r3, #4]
    9916:	6818      	ldr	r0, [r3, #0]
    9918:	f7fb faf4 	bl	4f04 <pinctrl_configure_pins>
}
    991c:	b002      	add	sp, #8
    991e:	bd10      	pop	{r4, pc}

00009920 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9920:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    9922:	6843      	ldr	r3, [r0, #4]
    9924:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    9926:	7a05      	ldrb	r5, [r0, #8]
    9928:	6844      	ldr	r4, [r0, #4]
    992a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    992e:	42a3      	cmp	r3, r4
    9930:	d302      	bcc.n	9938 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    9932:	f06f 0001 	mvn.w	r0, #1
}
    9936:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    9938:	795c      	ldrb	r4, [r3, #5]
    993a:	428c      	cmp	r4, r1
    993c:	d001      	beq.n	9942 <pinctrl_lookup_state+0x22>
		(*state)++;
    993e:	3308      	adds	r3, #8
    9940:	e7f0      	b.n	9924 <pinctrl_lookup_state+0x4>
			return 0;
    9942:	2000      	movs	r0, #0
    9944:	e7f7      	b.n	9936 <pinctrl_lookup_state+0x16>

00009946 <as5600_get>:
	return err;
}

static int as5600_get(const struct device *dev, enum sensor_channel chan,
			struct sensor_value *val)
{
    9946:	b510      	push	{r4, lr}
	struct as5600_dev_data *dev_data = dev->data;

	if (chan == SENSOR_CHAN_ROTATION) {
    9948:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    994a:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    994c:	d10c      	bne.n	9968 <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    994e:	8823      	ldrh	r3, [r4, #0]
    9950:	f44f 70b4 	mov.w	r0, #360	; 0x168
    9954:	4343      	muls	r3, r0
    9956:	131b      	asrs	r3, r3, #12
    9958:	6013      	str	r3, [r2, #0]
							AS5600_PULSES_PER_REV;

		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    995a:	8821      	ldrh	r1, [r4, #0]
    995c:	4341      	muls	r1, r0
    995e:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    9962:	6053      	str	r3, [r2, #4]
					(val->val1 * AS5600_PULSES_PER_REV);
	} else {
		return -ENOTSUP;
	}

	return 0;
    9964:	2000      	movs	r0, #0
}
    9966:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    9968:	f06f 0085 	mvn.w	r0, #133	; 0x85
    996c:	e7fb      	b.n	9966 <as5600_get+0x20>

0000996e <as5600_initialize>:

static int as5600_initialize(const struct device *dev)
{
	struct as5600_dev_data *const dev_data = dev->data;
    996e:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    9970:	2000      	movs	r0, #0
    9972:	8018      	strh	r0, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);

	return 0;
}
    9974:	4770      	bx	lr

00009976 <as5600_fetch>:
{
    9976:	b530      	push	{r4, r5, lr}
    9978:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    997a:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    997c:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    997e:	6818      	ldr	r0, [r3, #0]
    9980:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    9982:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    9984:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    9986:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    998a:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    998e:	f8ad 2004 	strh.w	r2, [sp, #4]
    9992:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    9994:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    9998:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    999a:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    999c:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    999e:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    99a0:	2107      	movs	r1, #7
	msg[1].len = num_read;
    99a2:	2202      	movs	r2, #2
    99a4:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    99a6:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    99aa:	6881      	ldr	r1, [r0, #8]
    99ac:	688d      	ldr	r5, [r1, #8]
    99ae:	a902      	add	r1, sp, #8
    99b0:	47a8      	blx	r5
	if (!err) {
    99b2:	b918      	cbnz	r0, 99bc <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    99b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    99b8:	ba5b      	rev16	r3, r3
    99ba:	8023      	strh	r3, [r4, #0]
}
    99bc:	b009      	add	sp, #36	; 0x24
    99be:	bd30      	pop	{r4, r5, pc}

000099c0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    99c0:	4770      	bx	lr

000099c2 <event_clear>:
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
    99c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    99c6:	009b      	lsls	r3, r3, #2
    99c8:	b29b      	uxth	r3, r3
    99ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    99ce:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    99d2:	2200      	movs	r2, #0
    99d4:	601a      	str	r2, [r3, #0]
    99d6:	681b      	ldr	r3, [r3, #0]
}
    99d8:	4770      	bx	lr

000099da <sys_clock_cycle_get_32>:
{
    99da:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    99dc:	f7fb fbec 	bl	51b8 <z_nrf_rtc_timer_read>
}
    99e0:	bd08      	pop	{r3, pc}

000099e2 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    99e2:	4700      	bx	r0

000099e4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    99e4:	f000 bc77 	b.w	a2d6 <z_impl_k_busy_wait>

000099e8 <nrfx_clock_start>:
{
    99e8:	b508      	push	{r3, lr}
    switch (domain)
    99ea:	b110      	cbz	r0, 99f2 <nrfx_clock_start+0xa>
    99ec:	2801      	cmp	r0, #1
    99ee:	d02c      	beq.n	9a4a <nrfx_clock_start+0x62>
}
    99f0:	bd08      	pop	{r3, pc}
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
    99f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    99f6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
    99fa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
    99fe:	03c8      	lsls	r0, r1, #15
    9a00:	d517      	bpl.n	9a32 <nrfx_clock_start+0x4a>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
    9a02:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9a06:	2b01      	cmp	r3, #1
    9a08:	d004      	beq.n	9a14 <nrfx_clock_start+0x2c>
    9a0a:	b113      	cbz	r3, 9a12 <nrfx_clock_start+0x2a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9a0c:	2000      	movs	r0, #0
    9a0e:	f7fb feb9 	bl	5784 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9a12:	2300      	movs	r3, #0
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
    9a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9a18:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a1c:	2300      	movs	r3, #0
    9a1e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    9a22:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    9a26:	2302      	movs	r3, #2
    9a28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a2c:	2301      	movs	r3, #1
    9a2e:	6093      	str	r3, [r2, #8]
}
    9a30:	e7de      	b.n	99f0 <nrfx_clock_start+0x8>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
    9a32:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9a36:	07d9      	lsls	r1, r3, #31
    9a38:	d5eb      	bpl.n	9a12 <nrfx_clock_start+0x2a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9a3a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9a3e:	079b      	lsls	r3, r3, #30
    9a40:	d4e4      	bmi.n	9a0c <nrfx_clock_start+0x24>
    p_reg->INTENSET = mask;
    9a42:	2302      	movs	r3, #2
    9a44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    9a48:	e7d2      	b.n	99f0 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a4e:	2200      	movs	r2, #0
    9a50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9a54:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9a58:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a5c:	6018      	str	r0, [r3, #0]
}
    9a5e:	e7c7      	b.n	99f0 <nrfx_clock_start+0x8>

00009a60 <nrfx_clock_stop>:
    clock_stop(domain);
    9a60:	f7fb be90 	b.w	5784 <clock_stop>

00009a64 <nrf_gpio_reconfigure>:
{
    9a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a66:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9a68:	a801      	add	r0, sp, #4
{
    9a6a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9a6e:	4616      	mov	r6, r2
    9a70:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9a72:	f7fb ff3f 	bl	58f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9a76:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    9a78:	f1b6 0c00 	subs.w	ip, r6, #0
    9a7c:	bf18      	it	ne
    9a7e:	f04f 0c01 	movne.w	ip, #1
    9a82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    9a86:	1e0b      	subs	r3, r1, #0
    9a88:	bf18      	it	ne
    9a8a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    9a8c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    9a8e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    9a92:	bf14      	ite	ne
    9a94:	f04f 0c0c 	movne.w	ip, #12
    9a98:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    9a9c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
    9a9e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
    9aa2:	bf14      	ite	ne
    9aa4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    9aa8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    9aac:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
    9aae:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9ab2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
    9ab6:	bf14      	ite	ne
    9ab8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    9abc:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
    9ac0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9ac4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    9ac8:	b101      	cbz	r1, 9acc <nrf_gpio_reconfigure+0x68>
    9aca:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
    9acc:	b10e      	cbz	r6, 9ad2 <nrf_gpio_reconfigure+0x6e>
    9ace:	7836      	ldrb	r6, [r6, #0]
    9ad0:	0076      	lsls	r6, r6, #1
    9ad2:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
    9ad4:	b10d      	cbz	r5, 9ada <nrf_gpio_reconfigure+0x76>
    9ad6:	782d      	ldrb	r5, [r5, #0]
    9ad8:	00ad      	lsls	r5, r5, #2
    9ada:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
    9adc:	b10c      	cbz	r4, 9ae2 <nrf_gpio_reconfigure+0x7e>
    9ade:	7824      	ldrb	r4, [r4, #0]
    9ae0:	0224      	lsls	r4, r4, #8
    9ae2:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9ae4:	b10f      	cbz	r7, 9aea <nrf_gpio_reconfigure+0x86>
    9ae6:	783f      	ldrb	r7, [r7, #0]
    9ae8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
    9aea:	430c      	orrs	r4, r1
    9aec:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9aee:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9af2:	b003      	add	sp, #12
    9af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009af6 <nrf_gpio_cfg_sense_set>:
{
    9af6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9af8:	f10d 030f 	add.w	r3, sp, #15
    9afc:	9301      	str	r3, [sp, #4]
    9afe:	2300      	movs	r3, #0
{
    9b00:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9b04:	9300      	str	r3, [sp, #0]
    9b06:	461a      	mov	r2, r3
    9b08:	4619      	mov	r1, r3
    9b0a:	f7ff ffab 	bl	9a64 <nrf_gpio_reconfigure>
}
    9b0e:	b005      	add	sp, #20
    9b10:	f85d fb04 	ldr.w	pc, [sp], #4

00009b14 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b14:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    9b18:	681a      	ldr	r2, [r3, #0]
    9b1a:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b1c:	bf1f      	itttt	ne
    9b1e:	2200      	movne	r2, #0
    9b20:	601a      	strne	r2, [r3, #0]
    9b22:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b24:	2001      	movne	r0, #1
    9b26:	bf08      	it	eq
    9b28:	2000      	moveq	r0, #0
}
    9b2a:	4770      	bx	lr

00009b2c <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    9b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b30:	f44f 7260 	mov.w	r2, #896	; 0x380
    9b34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9b38:	4770      	bx	lr

00009b3a <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    9b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9b3e:	f44f 7260 	mov.w	r2, #896	; 0x380
    9b42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9b46:	4770      	bx	lr

00009b48 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    9b48:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    9b4a:	f7fc fa87 	bl	605c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    9b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    9b52:	f7fb be9b 	b.w	588c <nrfx_clock_irq_handler>

00009b56 <xfer_completeness_check>:
    switch (p_cb->xfer_type)
    9b56:	f891 2020 	ldrb.w	r2, [r1, #32]
{
    9b5a:	4603      	mov	r3, r0
    switch (p_cb->xfer_type)
    9b5c:	2a03      	cmp	r2, #3
    9b5e:	d829      	bhi.n	9bb4 <xfer_completeness_check+0x5e>
    9b60:	e8df f002 	tbb	[pc, r2]
    9b64:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9b68:	688a      	ldr	r2, [r1, #8]
    9b6a:	0350      	lsls	r0, r2, #13
    9b6c:	d504      	bpl.n	9b78 <xfer_completeness_check+0x22>
    return p_reg->TXD.AMOUNT;
    9b6e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    9b72:	6908      	ldr	r0, [r1, #16]
    9b74:	4290      	cmp	r0, r2
    9b76:	d107      	bne.n	9b88 <xfer_completeness_check+0x32>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    9b78:	688a      	ldr	r2, [r1, #8]
                 (nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)) ||
    9b7a:	0352      	lsls	r2, r2, #13
    9b7c:	d41a      	bmi.n	9bb4 <xfer_completeness_check+0x5e>
    9b7e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length) ||
    9b82:	6989      	ldr	r1, [r1, #24]
            if (nrfy_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)
    9b84:	4291      	cmp	r1, r2
    9b86:	d015      	beq.n	9bb4 <xfer_completeness_check+0x5e>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9b88:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9b8a:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    9b8c:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    9b90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
/** @refhal{nrf_twim_enable} */
NRFY_STATIC_INLINE void nrfy_twim_enable(NRF_TWIM_Type * p_reg)
{
    nrf_twim_enable(p_reg);
    nrf_barrier_w();
}
    9b94:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    9b96:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length) ||
    9b9a:	6908      	ldr	r0, [r1, #16]
    9b9c:	4290      	cmp	r0, r2
    9b9e:	d1f3      	bne.n	9b88 <xfer_completeness_check+0x32>
    return p_reg->RXD.AMOUNT;
    9ba0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    9ba4:	e7ed      	b.n	9b82 <xfer_completeness_check+0x2c>
    return p_reg->TXD.AMOUNT;
    9ba6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrfy_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)
    9baa:	6909      	ldr	r1, [r1, #16]
    9bac:	e7ea      	b.n	9b84 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
    9bae:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    9bb2:	e7fa      	b.n	9baa <xfer_completeness_check+0x54>
    bool transfer_complete = true;
    9bb4:	2001      	movs	r0, #1
}
    9bb6:	4770      	bx	lr

00009bb8 <__nrfy_internal_twim_event_handle.isra.0>:
    {
        nrf_twim_event_clear(p_reg, event);
    }
}

NRFY_STATIC_INLINE bool __nrfy_internal_twim_event_handle(NRF_TWIM_Type *  p_reg,
    9bb8:	b530      	push	{r4, r5, lr}
                                                          uint32_t         mask,
                                                          nrf_twim_event_t event,
                                                          uint32_t *       p_evt_mask)
{
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_twim_event_check(p_reg, event))
    9bba:	f5a2 7580 	sub.w	r5, r2, #256	; 0x100
    9bbe:	08ad      	lsrs	r5, r5, #2
    9bc0:	2401      	movs	r4, #1
    9bc2:	40ac      	lsls	r4, r5
    9bc4:	420c      	tst	r4, r1
    9bc6:	d007      	beq.n	9bd8 <__nrfy_internal_twim_event_handle.isra.0+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9bc8:	5881      	ldr	r1, [r0, r2]
    9bca:	b129      	cbz	r1, 9bd8 <__nrfy_internal_twim_event_handle.isra.0+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bcc:	2100      	movs	r1, #0
    9bce:	5081      	str	r1, [r0, r2]
    9bd0:	5882      	ldr	r2, [r0, r2]
    {
        nrf_twim_event_clear(p_reg, event);
        if (p_evt_mask)
        {
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
    9bd2:	681a      	ldr	r2, [r3, #0]
    9bd4:	4322      	orrs	r2, r4
    9bd6:	601a      	str	r2, [r3, #0]
        }
        return true;
    }
    return false;
}
    9bd8:	bd30      	pop	{r4, r5, pc}

00009bda <__nrfy_internal_twim_events_process.constprop.0>:

NRFY_STATIC_INLINE
uint32_t __nrfy_internal_twim_events_process(NRF_TWIM_Type *               p_reg,
    9bda:	b513      	push	{r0, r1, r4, lr}
                                             uint32_t                      mask,
                                             nrfy_twim_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = 0;
    9bdc:	2300      	movs	r3, #0
uint32_t __nrfy_internal_twim_events_process(NRF_TWIM_Type *               p_reg,
    9bde:	460c      	mov	r4, r1
    uint32_t evt_mask = 0;
    9be0:	9301      	str	r3, [sp, #4]

    nrf_barrier_r();
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_SUSPENDED, &evt_mask);
    9be2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9be6:	ab01      	add	r3, sp, #4
    9be8:	f7ff ffe6 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_STOPPED, &evt_mask);
    9bec:	4621      	mov	r1, r4
    9bee:	f44f 7282 	mov.w	r2, #260	; 0x104
    9bf2:	f7ff ffe1 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_ERROR, &evt_mask);
    9bf6:	4621      	mov	r1, r4
    9bf8:	f44f 7292 	mov.w	r2, #292	; 0x124
    9bfc:	f7ff ffdc 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_TXSTARTED, &evt_mask);
    9c00:	4621      	mov	r1, r4
    9c02:	f44f 72a8 	mov.w	r2, #336	; 0x150
    9c06:	f7ff ffd7 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_RXSTARTED, &evt_mask);
    9c0a:	4621      	mov	r1, r4
    9c0c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    9c10:	f7ff ffd2 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_LASTTX, &evt_mask);
    9c14:	4621      	mov	r1, r4
    9c16:	f44f 72b0 	mov.w	r2, #352	; 0x160
    9c1a:	f7ff ffcd 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_LASTRX, &evt_mask);
    9c1e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    9c22:	4621      	mov	r1, r4
    9c24:	f7ff ffc8 	bl	9bb8 <__nrfy_internal_twim_event_handle.isra.0>
    {
        NRFY_CACHE_INV(p_xfer->p_buffer, p_xfer->length);
    }
    nrf_barrier_w();
    return evt_mask;
}
    9c28:	9801      	ldr	r0, [sp, #4]
    9c2a:	b002      	add	sp, #8
    9c2c:	bd10      	pop	{r4, pc}

00009c2e <nrfx_usbd_consumer>:
{
    9c2e:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    9c30:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    9c32:	429c      	cmp	r4, r3
    9c34:	d209      	bcs.n	9c4a <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    9c36:	2500      	movs	r5, #0
    9c38:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    9c3a:	6809      	ldr	r1, [r1, #0]
    9c3c:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    9c3e:	429a      	cmp	r2, r3
    9c40:	d10c      	bne.n	9c5c <nrfx_usbd_consumer+0x2e>
    9c42:	1e20      	subs	r0, r4, #0
    9c44:	bf18      	it	ne
    9c46:	2001      	movne	r0, #1
}
    9c48:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    9c4a:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    9c4c:	680d      	ldr	r5, [r1, #0]
    9c4e:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    9c50:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    9c52:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    9c54:	4418      	add	r0, r3
        p_transfer->size = size;
    9c56:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    9c58:	6008      	str	r0, [r1, #0]
    9c5a:	e7f0      	b.n	9c3e <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    9c5c:	2000      	movs	r0, #0
    9c5e:	e7f3      	b.n	9c48 <nrfx_usbd_consumer+0x1a>

00009c60 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    9c60:	684b      	ldr	r3, [r1, #4]
    9c62:	429a      	cmp	r2, r3
    9c64:	bf28      	it	cs
    9c66:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    9c68:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    9c6a:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    9c6e:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9c70:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    9c72:	1a80      	subs	r0, r0, r2
    9c74:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9c76:	4413      	add	r3, r2
}
    9c78:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    9c7a:	600b      	str	r3, [r1, #0]
}
    9c7c:	bf18      	it	ne
    9c7e:	2001      	movne	r0, #1
    9c80:	4770      	bx	lr

00009c82 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    9c82:	684b      	ldr	r3, [r1, #4]
    9c84:	429a      	cmp	r2, r3
    9c86:	bf28      	it	cs
    9c88:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    9c8a:	b162      	cbz	r2, 9ca6 <nrfx_usbd_feeder_ram_zlp+0x24>
    9c8c:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    9c8e:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    9c92:	684b      	ldr	r3, [r1, #4]
    9c94:	1a9b      	subs	r3, r3, r2
    9c96:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    9c98:	680b      	ldr	r3, [r1, #0]
}
    9c9a:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    9c9c:	4413      	add	r3, r2
    9c9e:	600b      	str	r3, [r1, #0]
}
    9ca0:	bf18      	it	ne
    9ca2:	2001      	movne	r0, #1
    9ca4:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    9ca6:	4613      	mov	r3, r2
    9ca8:	e7f1      	b.n	9c8e <nrfx_usbd_feeder_ram_zlp+0xc>

00009caa <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    9caa:	43c3      	mvns	r3, r0
    9cac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9cb0:	f000 000f 	and.w	r0, r0, #15
}
    9cb4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    9cb8:	4770      	bx	lr

00009cba <ev_started_handler>:
}
    9cba:	4770      	bx	lr

00009cbc <nrf_usbd_epin_dma_handler>:
{
    9cbc:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    9cbe:	f7fc fe59 	bl	6974 <usbd_dma_pending_clear>
{
    9cc2:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9cc4:	f7fc fd4c 	bl	6760 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9cc8:	7b83      	ldrb	r3, [r0, #14]
    9cca:	2b03      	cmp	r3, #3
    9ccc:	d10a      	bne.n	9ce4 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9cce:	4608      	mov	r0, r1
    9cd0:	f7ff ffeb 	bl	9caa <ep2bit>
    9cd4:	2301      	movs	r3, #1
    9cd6:	fa03 f000 	lsl.w	r0, r3, r0
    9cda:	43c0      	mvns	r0, r0
}
    9cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9ce0:	f7fc be38 	b.w	6954 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9ce4:	6803      	ldr	r3, [r0, #0]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d0f1      	beq.n	9cce <nrf_usbd_epin_dma_handler+0x12>
}
    9cea:	bd08      	pop	{r3, pc}

00009cec <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    9cec:	2087      	movs	r0, #135	; 0x87
    9cee:	f7ff bfe5 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009cf2 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    9cf2:	2086      	movs	r0, #134	; 0x86
    9cf4:	f7ff bfe2 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009cf8 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    9cf8:	2085      	movs	r0, #133	; 0x85
    9cfa:	f7ff bfdf 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009cfe <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    9cfe:	2084      	movs	r0, #132	; 0x84
    9d00:	f7ff bfdc 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009d04 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    9d04:	2083      	movs	r0, #131	; 0x83
    9d06:	f7ff bfd9 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009d0a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    9d0a:	2082      	movs	r0, #130	; 0x82
    9d0c:	f7ff bfd6 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009d10 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    9d10:	2081      	movs	r0, #129	; 0x81
    9d12:	f7ff bfd3 	b.w	9cbc <nrf_usbd_epin_dma_handler>

00009d16 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    9d16:	f7fc be3f 	b.w	6998 <nrf_usbd_ep0in_dma_handler>

00009d1a <nrfx_usbd_ep_max_packet_size_set>:
{
    9d1a:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9d1c:	f7fc fd20 	bl	6760 <ep_state_access>
    p_state->max_packet_size = size;
    9d20:	8181      	strh	r1, [r0, #12]
}
    9d22:	bd08      	pop	{r3, pc}

00009d24 <nrfx_usbd_ep_status_get>:
{
    9d24:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    9d26:	f7fc fd1b 	bl	6760 <ep_state_access>
	__asm__ volatile(
    9d2a:	f04f 0220 	mov.w	r2, #32
    9d2e:	f3ef 8311 	mrs	r3, BASEPRI
    9d32:	f382 8812 	msr	BASEPRI_MAX, r2
    9d36:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    9d3a:	6882      	ldr	r2, [r0, #8]
    9d3c:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9d3e:	6802      	ldr	r2, [r0, #0]
    9d40:	b92a      	cbnz	r2, 9d4e <nrfx_usbd_ep_status_get+0x2a>
    9d42:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    9d44:	f383 8811 	msr	BASEPRI, r3
    9d48:	f3bf 8f6f 	isb	sy
}
    9d4c:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9d4e:	2004      	movs	r0, #4
    9d50:	e7f8      	b.n	9d44 <nrfx_usbd_ep_status_get+0x20>

00009d52 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    9d52:	2007      	movs	r0, #7
    9d54:	f7fd b98c 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d58 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    9d58:	2006      	movs	r0, #6
    9d5a:	f7fd b989 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d5e <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    9d5e:	2005      	movs	r0, #5
    9d60:	f7fd b986 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d64 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    9d64:	2004      	movs	r0, #4
    9d66:	f7fd b983 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d6a <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    9d6a:	2003      	movs	r0, #3
    9d6c:	f7fd b980 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d70 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    9d70:	2002      	movs	r0, #2
    9d72:	f7fd b97d 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d76 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    9d76:	2001      	movs	r0, #1
    9d78:	f7fd b97a 	b.w	7070 <nrf_usbd_epout_dma_handler>

00009d7c <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    9d7c:	f7fd ba6e 	b.w	725c <usbd_ep_abort>

00009d80 <nrf_gpio_pin_set>:
{
    9d80:	b507      	push	{r0, r1, r2, lr}
    9d82:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9d84:	a801      	add	r0, sp, #4
    9d86:	f7fd fc3d 	bl	7604 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9d8a:	9a01      	ldr	r2, [sp, #4]
    9d8c:	2301      	movs	r3, #1
    9d8e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9d90:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9d94:	b003      	add	sp, #12
    9d96:	f85d fb04 	ldr.w	pc, [sp], #4

00009d9a <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
    9d9a:	4770      	bx	lr

00009d9c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9d9c:	b140      	cbz	r0, 9db0 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9d9e:	68c3      	ldr	r3, [r0, #12]
    9da0:	7858      	ldrb	r0, [r3, #1]
    9da2:	f010 0001 	ands.w	r0, r0, #1
    9da6:	bf1e      	ittt	ne
    9da8:	7818      	ldrbne	r0, [r3, #0]
    9daa:	fab0 f080 	clzne	r0, r0
    9dae:	0940      	lsrne	r0, r0, #5
}
    9db0:	4770      	bx	lr

00009db2 <arch_system_halt>:
	__asm__ volatile(
    9db2:	f04f 0220 	mov.w	r2, #32
    9db6:	f3ef 8311 	mrs	r3, BASEPRI
    9dba:	f382 8812 	msr	BASEPRI_MAX, r2
    9dbe:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    9dc2:	e7fe      	b.n	9dc2 <arch_system_halt+0x10>

00009dc4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    9dc4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    9dc6:	f7ff fff4 	bl	9db2 <arch_system_halt>

00009dca <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dcc:	4605      	mov	r5, r0
    9dce:	460e      	mov	r6, r1
    9dd0:	f04f 0320 	mov.w	r3, #32
    9dd4:	f3ef 8711 	mrs	r7, BASEPRI
    9dd8:	f383 8812 	msr	BASEPRI_MAX, r3
    9ddc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9de0:	f7fe fc26 	bl	8630 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    9de4:	4631      	mov	r1, r6
    9de6:	4604      	mov	r4, r0
    9de8:	4628      	mov	r0, r5
    9dea:	f7ff ffeb 	bl	9dc4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    9dee:	f387 8811 	msr	BASEPRI, r7
    9df2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9df6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9dfc:	f7f9 bde8 	b.w	39d0 <z_impl_k_thread_abort>

00009e00 <z_early_memset>:
	(void) memset(dst, c, n);
    9e00:	f7ff bbea 	b.w	95d8 <memset>

00009e04 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9e04:	f7ff bbdd 	b.w	95c2 <memcpy>

00009e08 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9e08:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    9e0c:	4313      	orrs	r3, r2
    9e0e:	f013 0303 	ands.w	r3, r3, #3
    9e12:	d10c      	bne.n	9e2e <create_free_list+0x26>
	slab->free_list = NULL;
    9e14:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9e16:	6881      	ldr	r1, [r0, #8]
    9e18:	4299      	cmp	r1, r3
    9e1a:	d801      	bhi.n	9e20 <create_free_list+0x18>
	return 0;
    9e1c:	2000      	movs	r0, #0
    9e1e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    9e20:	6941      	ldr	r1, [r0, #20]
    9e22:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    9e24:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    9e26:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9e28:	3301      	adds	r3, #1
		p += slab->block_size;
    9e2a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    9e2c:	e7f3      	b.n	9e16 <create_free_list+0xe>
		return -EINVAL;
    9e2e:	f06f 0015 	mvn.w	r0, #21
}
    9e32:	4770      	bx	lr

00009e34 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e36:	4604      	mov	r4, r0
    9e38:	460d      	mov	r5, r1
	__asm__ volatile(
    9e3a:	f04f 0320 	mov.w	r3, #32
    9e3e:	f3ef 8611 	mrs	r6, BASEPRI
    9e42:	f383 8812 	msr	BASEPRI_MAX, r3
    9e46:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    9e4a:	6947      	ldr	r7, [r0, #20]
    9e4c:	b977      	cbnz	r7, 9e6c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9e4e:	f000 f99b 	bl	a188 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    9e52:	b158      	cbz	r0, 9e6c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    9e54:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9e56:	6142      	str	r2, [r0, #20]
    9e58:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    9e5a:	f000 f95f 	bl	a11c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9e5e:	4631      	mov	r1, r6
    9e60:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    9e64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    9e68:	f7fe ba92 	b.w	8390 <z_reschedule>
	**(char ***) mem = slab->free_list;
    9e6c:	682b      	ldr	r3, [r5, #0]
    9e6e:	6962      	ldr	r2, [r4, #20]
    9e70:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9e72:	682b      	ldr	r3, [r5, #0]
    9e74:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    9e76:	69a3      	ldr	r3, [r4, #24]
    9e78:	3b01      	subs	r3, #1
    9e7a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    9e7c:	f386 8811 	msr	BASEPRI, r6
    9e80:	f3bf 8f6f 	isb	sy
}
    9e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009e86 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9e86:	f3ef 8005 	mrs	r0, IPSR
}
    9e8a:	3800      	subs	r0, #0
    9e8c:	bf18      	it	ne
    9e8e:	2001      	movne	r0, #1
    9e90:	4770      	bx	lr

00009e92 <z_impl_k_thread_name_set>:
}
    9e92:	f06f 0057 	mvn.w	r0, #87	; 0x57
    9e96:	4770      	bx	lr

00009e98 <z_impl_k_thread_start>:
	z_sched_start(thread);
    9e98:	f7fe ba8c 	b.w	83b4 <z_sched_start>

00009e9c <z_pm_save_idle_exit>:
{
    9e9c:	b508      	push	{r3, lr}
	pm_system_resume();
    9e9e:	f7f8 f889 	bl	1fb4 <pm_system_resume>
}
    9ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    9ea6:	f7ff bd8b 	b.w	99c0 <sys_clock_idle_exit>

00009eaa <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9eaa:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9eae:	428b      	cmp	r3, r1
    9eb0:	d001      	beq.n	9eb6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    9eb2:	f7fe ba27 	b.w	8304 <z_set_prio>
}
    9eb6:	2000      	movs	r0, #0
    9eb8:	4770      	bx	lr

00009eba <z_impl_k_mutex_init>:
{
    9eba:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9ebc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9ebe:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    9ec2:	e9c3 3300 	strd	r3, r3, [r3]
}
    9ec6:	4770      	bx	lr

00009ec8 <queue_insert>:
{
    9ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ecc:	4699      	mov	r9, r3
    9ece:	4604      	mov	r4, r0
    9ed0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    9ed4:	460d      	mov	r5, r1
    9ed6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9ed8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    9edc:	f04f 0220 	mov.w	r2, #32
    9ee0:	f3ef 8711 	mrs	r7, BASEPRI
    9ee4:	f382 8812 	msr	BASEPRI_MAX, r2
    9ee8:	f3bf 8f6f 	isb	sy
	if (is_append) {
    9eec:	b103      	cbz	r3, 9ef0 <queue_insert+0x28>
	return list->tail;
    9eee:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    9ef0:	4630      	mov	r0, r6
    9ef2:	f000 f949 	bl	a188 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    9ef6:	b158      	cbz	r0, 9f10 <queue_insert+0x48>
    9ef8:	2300      	movs	r3, #0
    9efa:	6783      	str	r3, [r0, #120]	; 0x78
    9efc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    9f00:	f000 f90c 	bl	a11c <z_ready_thread>
	z_reschedule(&queue->lock, key);
    9f04:	4630      	mov	r0, r6
    9f06:	4639      	mov	r1, r7
    9f08:	f7fe fa42 	bl	8390 <z_reschedule>
		return 0;
    9f0c:	2000      	movs	r0, #0
    9f0e:	e00c      	b.n	9f2a <queue_insert+0x62>
	if (alloc) {
    9f10:	f1b9 0f00 	cmp.w	r9, #0
    9f14:	d01c      	beq.n	9f50 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    9f16:	2108      	movs	r1, #8
    9f18:	f7fe fd5c 	bl	89d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
    9f1c:	b938      	cbnz	r0, 9f2e <queue_insert+0x66>
	__asm__ volatile(
    9f1e:	f387 8811 	msr	BASEPRI, r7
    9f22:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    9f26:	f06f 000b 	mvn.w	r0, #11
}
    9f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    9f2e:	2201      	movs	r2, #1
		anode->data = data;
    9f30:	f8c0 8004 	str.w	r8, [r0, #4]
    9f34:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9f36:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f38:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    9f3c:	b965      	cbnz	r5, 9f58 <_flash_used+0x4>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f3e:	6822      	ldr	r2, [r4, #0]
    9f40:	430a      	orrs	r2, r1
    9f42:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    9f44:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    9f46:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    9f48:	2a00      	cmp	r2, #0
    9f4a:	d1db      	bne.n	9f04 <queue_insert+0x3c>
	list->tail = node;
    9f4c:	6060      	str	r0, [r4, #4]
}
    9f4e:	e7d9      	b.n	9f04 <queue_insert+0x3c>
	node->next_and_flags = flags;
    9f50:	f8c8 9000 	str.w	r9, [r8]
}
    9f54:	4640      	mov	r0, r8
    9f56:	e7ee      	b.n	9f36 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9f58:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    9f5a:	2a03      	cmp	r2, #3
    9f5c:	d80b      	bhi.n	9f76 <_flash_used+0x22>
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f5e:	6001      	str	r1, [r0, #0]
	return list->tail;
    9f60:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    9f62:	b911      	cbnz	r1, 9f6a <_flash_used+0x16>
	list->head = node;
    9f64:	e9c4 0000 	strd	r0, r0, [r4]
}
    9f68:	e7cc      	b.n	9f04 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9f6a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f6c:	f002 0203 	and.w	r2, r2, #3
    9f70:	4302      	orrs	r2, r0
    9f72:	600a      	str	r2, [r1, #0]
    9f74:	e7ea      	b.n	9f4c <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9f76:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f7a:	430a      	orrs	r2, r1
    9f7c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9f7e:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    9f80:	f002 0203 	and.w	r2, r2, #3
    9f84:	ea40 0302 	orr.w	r3, r0, r2
    9f88:	602b      	str	r3, [r5, #0]
}
    9f8a:	e7bb      	b.n	9f04 <queue_insert+0x3c>

00009f8c <z_queue_node_peek>:
{
    9f8c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    9f8e:	4604      	mov	r4, r0
    9f90:	b130      	cbz	r0, 9fa0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9f92:	6802      	ldr	r2, [r0, #0]
    9f94:	0793      	lsls	r3, r2, #30
    9f96:	d003      	beq.n	9fa0 <z_queue_node_peek+0x14>
		ret = anode->data;
    9f98:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    9f9a:	b109      	cbz	r1, 9fa0 <z_queue_node_peek+0x14>
			k_free(anode);
    9f9c:	f000 f9c1 	bl	a322 <k_free>
}
    9fa0:	4620      	mov	r0, r4
    9fa2:	bd10      	pop	{r4, pc}

00009fa4 <k_queue_append>:
{
    9fa4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    9fa6:	2301      	movs	r3, #1
    9fa8:	9300      	str	r3, [sp, #0]
    9faa:	2300      	movs	r3, #0
{
    9fac:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    9fae:	4619      	mov	r1, r3
    9fb0:	f7ff ff8a 	bl	9ec8 <queue_insert>
}
    9fb4:	b003      	add	sp, #12
    9fb6:	f85d fb04 	ldr.w	pc, [sp], #4

00009fba <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9fba:	b13a      	cbz	r2, 9fcc <z_impl_k_sem_init+0x12>
    9fbc:	428a      	cmp	r2, r1
    9fbe:	d305      	bcc.n	9fcc <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    9fc0:	e9c0 1202 	strd	r1, r2, [r0, #8]
    9fc4:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    9fc8:	2000      	movs	r0, #0
    9fca:	4770      	bx	lr
		return -EINVAL;
    9fcc:	f06f 0015 	mvn.w	r0, #21
}
    9fd0:	4770      	bx	lr

00009fd2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    9fd2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    9fd4:	2301      	movs	r3, #1
    9fd6:	408b      	lsls	r3, r1
    9fd8:	ea22 0303 	bic.w	r3, r2, r3
    9fdc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    9fde:	fa22 f001 	lsr.w	r0, r2, r1
}
    9fe2:	f000 0001 	and.w	r0, r0, #1
    9fe6:	4770      	bx	lr

00009fe8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    9fe8:	b120      	cbz	r0, 9ff4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9fea:	2200      	movs	r2, #0
    9fec:	4611      	mov	r1, r2
    9fee:	3088      	adds	r0, #136	; 0x88
    9ff0:	f000 b924 	b.w	a23c <z_sched_wake>
}
    9ff4:	4770      	bx	lr

00009ff6 <work_timeout>:
{
    9ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9ff8:	4604      	mov	r4, r0
	__asm__ volatile(
    9ffa:	f04f 0320 	mov.w	r3, #32
    9ffe:	f3ef 8511 	mrs	r5, BASEPRI
    a002:	f383 8812 	msr	BASEPRI_MAX, r3
    a006:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    a00a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a00c:	f1a0 0610 	sub.w	r6, r0, #16
    a010:	2103      	movs	r1, #3
    a012:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    a014:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    a016:	f7ff ffdc 	bl	9fd2 <flag_test_and_clear>
    a01a:	b128      	cbz	r0, a028 <work_timeout+0x32>
		queue = dw->queue;
    a01c:	69a3      	ldr	r3, [r4, #24]
    a01e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    a020:	a901      	add	r1, sp, #4
    a022:	4630      	mov	r0, r6
    a024:	f7fd ff52 	bl	7ecc <submit_to_queue_locked>
	__asm__ volatile(
    a028:	f385 8811 	msr	BASEPRI, r5
    a02c:	f3bf 8f6f 	isb	sy
}
    a030:	b002      	add	sp, #8
    a032:	bd70      	pop	{r4, r5, r6, pc}

0000a034 <k_work_init>:
{
    a034:	b538      	push	{r3, r4, r5, lr}
    a036:	4604      	mov	r4, r0
    a038:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    a03a:	2210      	movs	r2, #16
    a03c:	2100      	movs	r1, #0
    a03e:	f7ff facb 	bl	95d8 <memset>
    a042:	6065      	str	r5, [r4, #4]
}
    a044:	bd38      	pop	{r3, r4, r5, pc}

0000a046 <z_work_submit_to_queue>:
{
    a046:	b513      	push	{r0, r1, r4, lr}
    a048:	9001      	str	r0, [sp, #4]
    a04a:	4608      	mov	r0, r1
	__asm__ volatile(
    a04c:	f04f 0320 	mov.w	r3, #32
    a050:	f3ef 8411 	mrs	r4, BASEPRI
    a054:	f383 8812 	msr	BASEPRI_MAX, r3
    a058:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    a05c:	a901      	add	r1, sp, #4
    a05e:	f7fd ff35 	bl	7ecc <submit_to_queue_locked>
	__asm__ volatile(
    a062:	f384 8811 	msr	BASEPRI, r4
    a066:	f3bf 8f6f 	isb	sy
}
    a06a:	b002      	add	sp, #8
    a06c:	bd10      	pop	{r4, pc}

0000a06e <k_work_submit_to_queue>:
{
    a06e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    a070:	f7ff ffe9 	bl	a046 <z_work_submit_to_queue>
	if (ret > 0) {
    a074:	1e04      	subs	r4, r0, #0
    a076:	dd09      	ble.n	a08c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    a078:	f04f 0320 	mov.w	r3, #32
    a07c:	f3ef 8011 	mrs	r0, BASEPRI
    a080:	f383 8812 	msr	BASEPRI_MAX, r3
    a084:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a088:	f000 f8b2 	bl	a1f0 <z_reschedule_irqlock>
}
    a08c:	4620      	mov	r0, r4
    a08e:	bd10      	pop	{r4, pc}

0000a090 <k_work_init_delayable>:
{
    a090:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    a092:	2230      	movs	r2, #48	; 0x30
{
    a094:	4604      	mov	r4, r0
    a096:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    a098:	2100      	movs	r1, #0
    a09a:	f7ff fa9d 	bl	95d8 <memset>
    a09e:	f44f 7380 	mov.w	r3, #256	; 0x100
    a0a2:	6065      	str	r5, [r4, #4]
    a0a4:	60e3      	str	r3, [r4, #12]
}
    a0a6:	bd38      	pop	{r3, r4, r5, pc}

0000a0a8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    a0a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    a0ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a0ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a0b0:	2300      	movs	r3, #0
	node->prev = NULL;
    a0b2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    a0b6:	4770      	bx	lr

0000a0b8 <unpend_thread_no_timeout>:
{
    a0b8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    a0ba:	f7ff fff5 	bl	a0a8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    a0be:	7b43      	ldrb	r3, [r0, #13]
    a0c0:	f023 0302 	bic.w	r3, r3, #2
    a0c4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    a0c6:	2300      	movs	r3, #0
    a0c8:	6083      	str	r3, [r0, #8]
}
    a0ca:	bd08      	pop	{r3, pc}

0000a0cc <add_to_waitq_locked>:
{
    a0cc:	b538      	push	{r3, r4, r5, lr}
    a0ce:	4604      	mov	r4, r0
    a0d0:	460d      	mov	r5, r1
	unready_thread(thread);
    a0d2:	f7fe f899 	bl	8208 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a0d6:	7b63      	ldrb	r3, [r4, #13]
    a0d8:	f043 0302 	orr.w	r3, r3, #2
    a0dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    a0de:	b1e5      	cbz	r5, a11a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    a0e0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    a0e2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a0e4:	429d      	cmp	r5, r3
    a0e6:	d109      	bne.n	a0fc <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    a0e8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    a0ea:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    a0ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a0f0:	606c      	str	r4, [r5, #4]
}
    a0f2:	e012      	b.n	a11a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    a0f4:	686a      	ldr	r2, [r5, #4]
    a0f6:	4293      	cmp	r3, r2
    a0f8:	d0f6      	beq.n	a0e8 <add_to_waitq_locked+0x1c>
    a0fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d0f3      	beq.n	a0e8 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    a100:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    a104:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    a108:	428a      	cmp	r2, r1
    a10a:	d0f3      	beq.n	a0f4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a10c:	4291      	cmp	r1, r2
    a10e:	ddf1      	ble.n	a0f4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    a110:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a112:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    a116:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    a118:	605c      	str	r4, [r3, #4]
}
    a11a:	bd38      	pop	{r3, r4, r5, pc}

0000a11c <z_ready_thread>:
{
    a11c:	b510      	push	{r4, lr}
    a11e:	f04f 0320 	mov.w	r3, #32
    a122:	f3ef 8411 	mrs	r4, BASEPRI
    a126:	f383 8812 	msr	BASEPRI_MAX, r3
    a12a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    a12e:	f7fe f837 	bl	81a0 <ready_thread>
	__asm__ volatile(
    a132:	f384 8811 	msr	BASEPRI, r4
    a136:	f3bf 8f6f 	isb	sy
}
    a13a:	bd10      	pop	{r4, pc}

0000a13c <z_sched_wake_thread>:
{
    a13c:	b538      	push	{r3, r4, r5, lr}
    a13e:	4604      	mov	r4, r0
	__asm__ volatile(
    a140:	f04f 0320 	mov.w	r3, #32
    a144:	f3ef 8511 	mrs	r5, BASEPRI
    a148:	f383 8812 	msr	BASEPRI_MAX, r3
    a14c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    a150:	7b43      	ldrb	r3, [r0, #13]
    a152:	f013 0f28 	tst.w	r3, #40	; 0x28
    a156:	d10b      	bne.n	a170 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    a158:	6883      	ldr	r3, [r0, #8]
    a15a:	b10b      	cbz	r3, a160 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    a15c:	f7ff ffac 	bl	a0b8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a160:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    a162:	b951      	cbnz	r1, a17a <z_sched_wake_thread+0x3e>
    a164:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    a168:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    a16a:	4620      	mov	r0, r4
    a16c:	f7fe f818 	bl	81a0 <ready_thread>
	__asm__ volatile(
    a170:	f385 8811 	msr	BASEPRI, r5
    a174:	f3bf 8f6f 	isb	sy
}
    a178:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    a17a:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    a17e:	e7f3      	b.n	a168 <z_sched_wake_thread+0x2c>

0000a180 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    a180:	2101      	movs	r1, #1
    a182:	3818      	subs	r0, #24
    a184:	f7ff bfda 	b.w	a13c <z_sched_wake_thread>

0000a188 <z_unpend_first_thread>:
{
    a188:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a18a:	f04f 0320 	mov.w	r3, #32
    a18e:	f3ef 8511 	mrs	r5, BASEPRI
    a192:	f383 8812 	msr	BASEPRI_MAX, r3
    a196:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a19a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a19c:	42a0      	cmp	r0, r4
    a19e:	d00d      	beq.n	a1bc <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    a1a0:	b134      	cbz	r4, a1b0 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    a1a2:	4620      	mov	r0, r4
    a1a4:	f7ff ff88 	bl	a0b8 <unpend_thread_no_timeout>
    a1a8:	f104 0018 	add.w	r0, r4, #24
    a1ac:	f000 f869 	bl	a282 <z_abort_timeout>
	__asm__ volatile(
    a1b0:	f385 8811 	msr	BASEPRI, r5
    a1b4:	f3bf 8f6f 	isb	sy
}
    a1b8:	4620      	mov	r0, r4
    a1ba:	bd38      	pop	{r3, r4, r5, pc}
    a1bc:	2400      	movs	r4, #0
    a1be:	e7f7      	b.n	a1b0 <z_unpend_first_thread+0x28>

0000a1c0 <z_unpend_thread>:
{
    a1c0:	b510      	push	{r4, lr}
    a1c2:	4601      	mov	r1, r0
	__asm__ volatile(
    a1c4:	f04f 0320 	mov.w	r3, #32
    a1c8:	f3ef 8411 	mrs	r4, BASEPRI
    a1cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a1d0:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    a1d4:	6883      	ldr	r3, [r0, #8]
    a1d6:	b10b      	cbz	r3, a1dc <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    a1d8:	f7ff ff6e 	bl	a0b8 <unpend_thread_no_timeout>
	__asm__ volatile(
    a1dc:	f384 8811 	msr	BASEPRI, r4
    a1e0:	f3bf 8f6f 	isb	sy
}
    a1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1e8:	f101 0018 	add.w	r0, r1, #24
    a1ec:	f000 b849 	b.w	a282 <z_abort_timeout>

0000a1f0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a1f0:	4603      	mov	r3, r0
    a1f2:	b920      	cbnz	r0, a1fe <z_reschedule_irqlock+0xe>
    a1f4:	f3ef 8205 	mrs	r2, IPSR
    a1f8:	b90a      	cbnz	r2, a1fe <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    a1fa:	f7f9 b9ab 	b.w	3554 <arch_swap>
    a1fe:	f383 8811 	msr	BASEPRI, r3
    a202:	f3bf 8f6f 	isb	sy
}
    a206:	4770      	bx	lr

0000a208 <z_reschedule_unlocked>:
	__asm__ volatile(
    a208:	f04f 0320 	mov.w	r3, #32
    a20c:	f3ef 8011 	mrs	r0, BASEPRI
    a210:	f383 8812 	msr	BASEPRI_MAX, r3
    a214:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a218:	f7ff bfea 	b.w	a1f0 <z_reschedule_irqlock>

0000a21c <z_unpend_all>:
{
    a21c:	b538      	push	{r3, r4, r5, lr}
    a21e:	4605      	mov	r5, r0
	int need_sched = 0;
    a220:	2000      	movs	r0, #0
	return list->head == list;
    a222:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a224:	42a5      	cmp	r5, r4
    a226:	d000      	beq.n	a22a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a228:	b904      	cbnz	r4, a22c <z_unpend_all+0x10>
}
    a22a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    a22c:	4620      	mov	r0, r4
    a22e:	f7ff ffc7 	bl	a1c0 <z_unpend_thread>
		z_ready_thread(thread);
    a232:	4620      	mov	r0, r4
    a234:	f7ff ff72 	bl	a11c <z_ready_thread>
		need_sched = 1;
    a238:	2001      	movs	r0, #1
    a23a:	e7f2      	b.n	a222 <z_unpend_all+0x6>

0000a23c <z_sched_wake>:
{
    a23c:	b538      	push	{r3, r4, r5, lr}
    a23e:	f04f 0320 	mov.w	r3, #32
    a242:	f3ef 8511 	mrs	r5, BASEPRI
    a246:	f383 8812 	msr	BASEPRI_MAX, r3
    a24a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a24e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a250:	42a0      	cmp	r0, r4
    a252:	d012      	beq.n	a27a <z_sched_wake+0x3e>
		if (thread != NULL) {
    a254:	b19c      	cbz	r4, a27e <z_sched_wake+0x42>
    a256:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    a258:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    a25a:	4620      	mov	r0, r4
    a25c:	f7ff ff2c 	bl	a0b8 <unpend_thread_no_timeout>
    a260:	f104 0018 	add.w	r0, r4, #24
    a264:	f000 f80d 	bl	a282 <z_abort_timeout>
			ready_thread(thread);
    a268:	4620      	mov	r0, r4
    a26a:	f7fd ff99 	bl	81a0 <ready_thread>
			ret = true;
    a26e:	2001      	movs	r0, #1
	__asm__ volatile(
    a270:	f385 8811 	msr	BASEPRI, r5
    a274:	f3bf 8f6f 	isb	sy
}
    a278:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    a27a:	2000      	movs	r0, #0
    a27c:	e7f8      	b.n	a270 <z_sched_wake+0x34>
    a27e:	4620      	mov	r0, r4
    a280:	e7f6      	b.n	a270 <z_sched_wake+0x34>

0000a282 <z_abort_timeout>:
{
    a282:	b510      	push	{r4, lr}
	__asm__ volatile(
    a284:	f04f 0220 	mov.w	r2, #32
    a288:	f3ef 8411 	mrs	r4, BASEPRI
    a28c:	f382 8812 	msr	BASEPRI_MAX, r2
    a290:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    a294:	6803      	ldr	r3, [r0, #0]
    a296:	b13b      	cbz	r3, a2a8 <z_abort_timeout+0x26>
			remove_timeout(to);
    a298:	f7fe fa86 	bl	87a8 <remove_timeout>
			ret = 0;
    a29c:	2000      	movs	r0, #0
	__asm__ volatile(
    a29e:	f384 8811 	msr	BASEPRI, r4
    a2a2:	f3bf 8f6f 	isb	sy
}
    a2a6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    a2a8:	f06f 0015 	mvn.w	r0, #21
    a2ac:	e7f7      	b.n	a29e <z_abort_timeout+0x1c>

0000a2ae <z_get_next_timeout_expiry>:
{
    a2ae:	b510      	push	{r4, lr}
	__asm__ volatile(
    a2b0:	f04f 0320 	mov.w	r3, #32
    a2b4:	f3ef 8411 	mrs	r4, BASEPRI
    a2b8:	f383 8812 	msr	BASEPRI_MAX, r3
    a2bc:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    a2c0:	f7fe fa52 	bl	8768 <next_timeout>
	__asm__ volatile(
    a2c4:	f384 8811 	msr	BASEPRI, r4
    a2c8:	f3bf 8f6f 	isb	sy
}
    a2cc:	bd10      	pop	{r4, pc}

0000a2ce <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a2ce:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a2d0:	f7fe fb66 	bl	89a0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a2d4:	bd08      	pop	{r3, pc}

0000a2d6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a2d6:	b108      	cbz	r0, a2dc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a2d8:	f7f9 bc6a 	b.w	3bb0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a2dc:	4770      	bx	lr

0000a2de <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a2de:	f1b1 3fff 	cmp.w	r1, #4294967295
    a2e2:	bf08      	it	eq
    a2e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    a2e8:	b538      	push	{r3, r4, r5, lr}
    a2ea:	460c      	mov	r4, r1
    a2ec:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a2ee:	d014      	beq.n	a31a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a2f0:	4308      	orrs	r0, r1
    a2f2:	d103      	bne.n	a2fc <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    a2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    a2f8:	f7fe bb52 	b.w	89a0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a2fc:	f06f 0001 	mvn.w	r0, #1
    a300:	1b40      	subs	r0, r0, r5
    a302:	f04f 33ff 	mov.w	r3, #4294967295
    a306:	eb63 0101 	sbc.w	r1, r3, r1
    a30a:	2900      	cmp	r1, #0
    a30c:	da04      	bge.n	a318 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    a30e:	f7fe fb47 	bl	89a0 <sys_clock_tick_get>
    a312:	1940      	adds	r0, r0, r5
    a314:	eb41 0104 	adc.w	r1, r1, r4
}
    a318:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    a31a:	f04f 30ff 	mov.w	r0, #4294967295
    a31e:	4601      	mov	r1, r0
    a320:	e7fa      	b.n	a318 <sys_clock_timeout_end_calc+0x3a>

0000a322 <k_free>:
	if (ptr != NULL) {
    a322:	b120      	cbz	r0, a32e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    a324:	1f01      	subs	r1, r0, #4
    a326:	f850 0c04 	ldr.w	r0, [r0, #-4]
    a32a:	f000 b856 	b.w	a3da <k_heap_free>
}
    a32e:	4770      	bx	lr

0000a330 <k_heap_init>:
{
    a330:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    a332:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    a336:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a33a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a33c:	f7fe bd43 	b.w	8dc6 <sys_heap_init>

0000a340 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a344:	b085      	sub	sp, #20
    a346:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    a34a:	4607      	mov	r7, r0
    a34c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a34e:	4650      	mov	r0, sl
    a350:	4621      	mov	r1, r4
{
    a352:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a354:	f7ff ffc3 	bl	a2de <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    a358:	f1b4 3fff 	cmp.w	r4, #4294967295
    a35c:	bf08      	it	eq
    a35e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    a362:	4605      	mov	r5, r0
    a364:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    a366:	bf04      	itt	eq
    a368:	f04f 35ff 	moveq.w	r5, #4294967295
    a36c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    a370:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    a374:	f04f 0320 	mov.w	r3, #32
    a378:	f3ef 8411 	mrs	r4, BASEPRI
    a37c:	f383 8812 	msr	BASEPRI_MAX, r3
    a380:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a384:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    a388:	464a      	mov	r2, r9
    a38a:	4641      	mov	r1, r8
    a38c:	4638      	mov	r0, r7
    a38e:	f7fe fcb3 	bl	8cf8 <sys_heap_aligned_alloc>
    a392:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    a394:	f7fe fb04 	bl	89a0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    a398:	9b03      	ldr	r3, [sp, #12]
    a39a:	b13b      	cbz	r3, a3ac <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    a39c:	f384 8811 	msr	BASEPRI, r4
    a3a0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    a3a4:	4618      	mov	r0, r3
    a3a6:	b005      	add	sp, #20
    a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    a3ac:	1a28      	subs	r0, r5, r0
    a3ae:	eb66 0101 	sbc.w	r1, r6, r1
    a3b2:	2801      	cmp	r0, #1
    a3b4:	f171 0200 	sbcs.w	r2, r1, #0
    a3b8:	dbf0      	blt.n	a39c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    a3ba:	e9cd 0100 	strd	r0, r1, [sp]
    a3be:	465a      	mov	r2, fp
    a3c0:	4621      	mov	r1, r4
    a3c2:	4650      	mov	r0, sl
    a3c4:	f7fd ff80 	bl	82c8 <z_pend_curr>
	__asm__ volatile(
    a3c8:	f04f 0320 	mov.w	r3, #32
    a3cc:	f3ef 8411 	mrs	r4, BASEPRI
    a3d0:	f383 8812 	msr	BASEPRI_MAX, r3
    a3d4:	f3bf 8f6f 	isb	sy
	return k;
    a3d8:	e7d6      	b.n	a388 <k_heap_aligned_alloc+0x48>

0000a3da <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    a3da:	b538      	push	{r3, r4, r5, lr}
    a3dc:	4604      	mov	r4, r0
    a3de:	f04f 0320 	mov.w	r3, #32
    a3e2:	f3ef 8511 	mrs	r5, BASEPRI
    a3e6:	f383 8812 	msr	BASEPRI_MAX, r3
    a3ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    a3ee:	f7fe fc4b 	bl	8c88 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    a3f2:	f104 000c 	add.w	r0, r4, #12
    a3f6:	f7ff ff11 	bl	a21c <z_unpend_all>
    a3fa:	b130      	cbz	r0, a40a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    a3fc:	4629      	mov	r1, r5
    a3fe:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    a402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    a406:	f7fd bfc3 	b.w	8390 <z_reschedule>
	__asm__ volatile(
    a40a:	f385 8811 	msr	BASEPRI, r5
    a40e:	f3bf 8f6f 	isb	sy
}
    a412:	bd38      	pop	{r3, r4, r5, pc}
