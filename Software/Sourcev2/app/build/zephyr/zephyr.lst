
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	80 3b 00 20 e1 54 00 00 bd c7 00 00 b5 54 00 00     .;. .T.......T..
    1010:	b5 54 00 00 b5 54 00 00 b5 54 00 00 00 00 00 00     .T...T...T......
	...
    102c:	b1 4d 00 00 b5 54 00 00 00 00 00 00 5d 4d 00 00     .M...T......]M..
    103c:	b5 54 00 00                                         .T..

00001040 <_irq_vector_table>:
    1040:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    1050:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    1060:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    1070:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    1080:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    1090:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10a0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10b0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10c0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10d0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10e0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..
    10f0:	61 4e 00 00 61 4e 00 00 61 4e 00 00 61 4e 00 00     aN..aN..aN..aN..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <composite_pre_init>:
	}
}


static int composite_pre_init(void)
{
    13d4:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    13d6:	4818      	ldr	r0, [pc, #96]	; (1438 <composite_pre_init+0x64>)
	hdev = device_get_binding("HID_0");
    13d8:	4c18      	ldr	r4, [pc, #96]	; (143c <composite_pre_init+0x68>)
    13da:	f008 fbf3 	bl	9bc4 <z_impl_device_get_binding>
    13de:	4601      	mov	r1, r0
    13e0:	6020      	str	r0, [r4, #0]
	if (hdev == NULL) {
    13e2:	b310      	cbz	r0, 142a <composite_pre_init+0x56>
		printk("Cannot get USB HID Device");
		return -ENODEV;
	}

	printk("HID Device: dev %p", hdev);
    13e4:	4816      	ldr	r0, [pc, #88]	; (1440 <composite_pre_init+0x6c>)
    13e6:	f00a f944 	bl	b672 <printk>

	usb_hid_register_device(hdev, hid_kbd_report_desc,sizeof(hid_kbd_report_desc), &ops);
    13ea:	4b16      	ldr	r3, [pc, #88]	; (1444 <composite_pre_init+0x70>)
    13ec:	4916      	ldr	r1, [pc, #88]	; (1448 <composite_pre_init+0x74>)
    13ee:	6820      	ldr	r0, [r4, #0]
    13f0:	223f      	movs	r2, #63	; 0x3f
    13f2:	f004 fc1b 	bl	5c2c <usb_hid_register_device>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    13f6:	f3bf 8f5b 	dmb	ish
    13fa:	4b14      	ldr	r3, [pc, #80]	; (144c <composite_pre_init+0x78>)
    13fc:	e853 1f00 	ldrex	r1, [r3]
    1400:	f041 0101 	orr.w	r1, r1, #1
    1404:	e843 1200 	strex	r2, r1, [r3]
    1408:	2a00      	cmp	r2, #0
    140a:	d1f7      	bne.n	13fc <composite_pre_init+0x28>
    140c:	f3bf 8f5b 	dmb	ish


	atomic_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG);


	if (usb_hid_set_proto_code(hdev, HID_BOOT_IFACE_CODE_NONE)) {
    1410:	2100      	movs	r1, #0
    1412:	6820      	ldr	r0, [r4, #0]
    1414:	f00b fa47 	bl	c8a6 <usb_hid_set_proto_code>
    1418:	b110      	cbz	r0, 1420 <composite_pre_init+0x4c>
		printk("Failed to set Protocol Code");
    141a:	480d      	ldr	r0, [pc, #52]	; (1450 <composite_pre_init+0x7c>)
    141c:	f00a f929 	bl	b672 <printk>
	}

	return usb_hid_init(hdev);
    1420:	6820      	ldr	r0, [r4, #0]
}
    1422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return usb_hid_init(hdev);
    1426:	f00b ba43 	b.w	c8b0 <usb_hid_init>
		printk("Cannot get USB HID Device");
    142a:	480a      	ldr	r0, [pc, #40]	; (1454 <composite_pre_init+0x80>)
    142c:	f00a f921 	bl	b672 <printk>
}
    1430:	f06f 0012 	mvn.w	r0, #18
    1434:	bd10      	pop	{r4, pc}
    1436:	bf00      	nop
    1438:	0000de04 	.word	0x0000de04
    143c:	20000c34 	.word	0x20000c34
    1440:	0000de24 	.word	0x0000de24
    1444:	0000da78 	.word	0x0000da78
    1448:	0000df56 	.word	0x0000df56
    144c:	20000c30 	.word	0x20000c30
    1450:	0000de37 	.word	0x0000de37
    1454:	0000de0a 	.word	0x0000de0a

00001458 <int_in_ready_cb>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1458:	4b09      	ldr	r3, [pc, #36]	; (1480 <int_in_ready_cb+0x28>)
    145a:	f3bf 8f5b 	dmb	ish
    145e:	e853 2f00 	ldrex	r2, [r3]
    1462:	f022 0101 	bic.w	r1, r2, #1
    1466:	e843 1000 	strex	r0, r1, [r3]
    146a:	2800      	cmp	r0, #0
    146c:	d1f7      	bne.n	145e <int_in_ready_cb+0x6>
    146e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    1472:	07d3      	lsls	r3, r2, #31
    1474:	d402      	bmi.n	147c <int_in_ready_cb+0x24>
		printk("IN endpoint callback without preceding buffer write");
    1476:	4803      	ldr	r0, [pc, #12]	; (1484 <int_in_ready_cb+0x2c>)
    1478:	f00a b8fb 	b.w	b672 <printk>
}
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	20000c30 	.word	0x20000c30
    1484:	0000de53 	.word	0x0000de53

00001488 <status_cb>:
	switch (status) {
    1488:	2803      	cmp	r0, #3
{
    148a:	b510      	push	{r4, lr}
    148c:	4601      	mov	r1, r0
	switch (status) {
    148e:	d007      	beq.n	14a0 <status_cb+0x18>
    1490:	280a      	cmp	r0, #10
    1492:	d004      	beq.n	149e <status_cb+0x16>
    1494:	2801      	cmp	r0, #1
    1496:	d10e      	bne.n	14b6 <status_cb+0x2e>
		configured = false;
    1498:	4b09      	ldr	r3, [pc, #36]	; (14c0 <status_cb+0x38>)
    149a:	2200      	movs	r2, #0
    149c:	701a      	strb	r2, [r3, #0]
}
    149e:	bd10      	pop	{r4, pc}
		if (!configured) {
    14a0:	4c07      	ldr	r4, [pc, #28]	; (14c0 <status_cb+0x38>)
    14a2:	7823      	ldrb	r3, [r4, #0]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d1fa      	bne.n	149e <status_cb+0x16>
			int_in_ready_cb(hdev);
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <status_cb+0x3c>)
    14aa:	6818      	ldr	r0, [r3, #0]
    14ac:	f7ff ffd4 	bl	1458 <int_in_ready_cb>
			configured = true;
    14b0:	2301      	movs	r3, #1
    14b2:	7023      	strb	r3, [r4, #0]
}
    14b4:	e7f3      	b.n	149e <status_cb+0x16>
    14b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("status %u unhandled", status);
    14ba:	4803      	ldr	r0, [pc, #12]	; (14c8 <status_cb+0x40>)
    14bc:	f00a b8d9 	b.w	b672 <printk>
    14c0:	200021ba 	.word	0x200021ba
    14c4:	20000c34 	.word	0x20000c34
    14c8:	0000de87 	.word	0x0000de87

000014cc <clear_report>:
{
    14cc:	b507      	push	{r0, r1, r2, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    14ce:	4a15      	ldr	r2, [pc, #84]	; (1524 <clear_report+0x58>)
    14d0:	f3bf 8f5b 	dmb	ish
    14d4:	e852 3f00 	ldrex	r3, [r2]
    14d8:	f043 0101 	orr.w	r1, r3, #1
    14dc:	e842 1000 	strex	r0, r1, [r2]
    14e0:	2800      	cmp	r0, #0
    14e2:	d1f7      	bne.n	14d4 <clear_report+0x8>
    14e4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    14e8:	f013 0301 	ands.w	r3, r3, #1
    14ec:	d113      	bne.n	1516 <clear_report+0x4a>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    14ee:	490e      	ldr	r1, [pc, #56]	; (1528 <clear_report+0x5c>)
    14f0:	6808      	ldr	r0, [r1, #0]
    14f2:	6849      	ldr	r1, [r1, #4]
    14f4:	466a      	mov	r2, sp
    14f6:	c203      	stmia	r2!, {r0, r1}
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    14f8:	480c      	ldr	r0, [pc, #48]	; (152c <clear_report+0x60>)
    14fa:	2208      	movs	r2, #8
    14fc:	6800      	ldr	r0, [r0, #0]
    14fe:	4669      	mov	r1, sp
    1500:	f004 fbaa 	bl	5c58 <hid_int_ep_write>
		if (ret != 0) {
    1504:	b128      	cbz	r0, 1512 <clear_report+0x46>
			printk("Failed to submit report");
    1506:	480a      	ldr	r0, [pc, #40]	; (1530 <clear_report+0x64>)
			printk("Report submitted");
    1508:	f00a f8b3 	bl	b672 <printk>
}
    150c:	b003      	add	sp, #12
    150e:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("Report submitted");
    1512:	4808      	ldr	r0, [pc, #32]	; (1534 <clear_report+0x68>)
    1514:	e7f8      	b.n	1508 <clear_report+0x3c>
		printk("HID IN endpoint busy");
    1516:	4808      	ldr	r0, [pc, #32]	; (1538 <clear_report+0x6c>)
}
    1518:	b003      	add	sp, #12
    151a:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("HID IN endpoint busy");
    151e:	f00a b8a8 	b.w	b672 <printk>
    1522:	bf00      	nop
    1524:	20000c30 	.word	0x20000c30
    1528:	0000da60 	.word	0x0000da60
    152c:	20000c34 	.word	0x20000c34
    1530:	0000de9b 	.word	0x0000de9b
    1534:	0000deb3 	.word	0x0000deb3
    1538:	0000dec4 	.word	0x0000dec4

0000153c <send_report>:
{
    153c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    153e:	4b19      	ldr	r3, [pc, #100]	; (15a4 <send_report+0x68>)
    1540:	f3bf 8f5b 	dmb	ish
    1544:	e853 4f00 	ldrex	r4, [r3]
    1548:	f044 0201 	orr.w	r2, r4, #1
    154c:	e843 2100 	strex	r1, r2, [r3]
    1550:	2900      	cmp	r1, #0
    1552:	d1f7      	bne.n	1544 <send_report+0x8>
    1554:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    1558:	f014 0401 	ands.w	r4, r4, #1
    155c:	d11c      	bne.n	1598 <send_report+0x5c>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    155e:	4a12      	ldr	r2, [pc, #72]	; (15a8 <send_report+0x6c>)
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    1560:	4d12      	ldr	r5, [pc, #72]	; (15ac <send_report+0x70>)
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    1562:	6810      	ldr	r0, [r2, #0]
    1564:	6851      	ldr	r1, [r2, #4]
    1566:	466b      	mov	r3, sp
    1568:	c303      	stmia	r3!, {r0, r1}
		rep[7] = HID_KEY_Z;
    156a:	231d      	movs	r3, #29
    156c:	f88d 3007 	strb.w	r3, [sp, #7]
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    1570:	6828      	ldr	r0, [r5, #0]
    1572:	4623      	mov	r3, r4
    1574:	2208      	movs	r2, #8
    1576:	4669      	mov	r1, sp
    1578:	f004 fb6e 	bl	5c58 <hid_int_ep_write>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    157c:	2100      	movs	r1, #0
    157e:	20a4      	movs	r0, #164	; 0xa4
    1580:	f009 fb22 	bl	abc8 <z_impl_k_sleep>
		ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    1584:	6828      	ldr	r0, [r5, #0]
        rep[7] = 0x00;
    1586:	f88d 4007 	strb.w	r4, [sp, #7]
		ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    158a:	4623      	mov	r3, r4
    158c:	2208      	movs	r2, #8
    158e:	4669      	mov	r1, sp
    1590:	f004 fb62 	bl	5c58 <hid_int_ep_write>
}
    1594:	b003      	add	sp, #12
    1596:	bd30      	pop	{r4, r5, pc}
		printk("HID IN endpoint busy");
    1598:	4805      	ldr	r0, [pc, #20]	; (15b0 <send_report+0x74>)
}
    159a:	b003      	add	sp, #12
    159c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("HID IN endpoint busy");
    15a0:	f00a b867 	b.w	b672 <printk>
    15a4:	20000c30 	.word	0x20000c30
    15a8:	0000da60 	.word	0x0000da60
    15ac:	20000c34 	.word	0x20000c34
    15b0:	0000dec4 	.word	0x0000dec4

000015b4 <as5600_refresh>:
{
    15b4:	b513      	push	{r0, r1, r4, lr}
    15b6:	4604      	mov	r4, r0
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
    15b8:	6883      	ldr	r3, [r0, #8]
    15ba:	2122      	movs	r1, #34	; 0x22
    15bc:	68db      	ldr	r3, [r3, #12]
    15be:	4798      	blx	r3
	if (ret != 0){
    15c0:	4601      	mov	r1, r0
    15c2:	b110      	cbz	r0, 15ca <as5600_refresh+0x16>
			printk("ono dis not good, ur err code is :,%d\n", ret);
    15c4:	4805      	ldr	r0, [pc, #20]	; (15dc <as5600_refresh+0x28>)
    15c6:	f00a f854 	bl	b672 <printk>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    15ca:	68a3      	ldr	r3, [r4, #8]
    15cc:	466a      	mov	r2, sp
    15ce:	691b      	ldr	r3, [r3, #16]
    15d0:	2122      	movs	r1, #34	; 0x22
    15d2:	4620      	mov	r0, r4
    15d4:	4798      	blx	r3
}
    15d6:	9800      	ldr	r0, [sp, #0]
    15d8:	b002      	add	sp, #8
    15da:	bd10      	pop	{r4, pc}
    15dc:	0000ded9 	.word	0x0000ded9

000015e0 <main>:
{
    15e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     int ret = usb_enable(status_cb);
    15e4:	481e      	ldr	r0, [pc, #120]	; (1660 <main+0x80>)
    15e6:	f002 fbed 	bl	3dc4 <usb_enable>
	if (ret != 0) {
    15ea:	b128      	cbz	r0, 15f8 <main+0x18>
		printk("Failed to enable USB");
    15ec:	481d      	ldr	r0, [pc, #116]	; (1664 <main+0x84>)
    15ee:	f00a f840 	bl	b672 <printk>
		return 0;
    15f2:	2000      	movs	r0, #0
}
    15f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_work_init(&report_send, send_report);
    15f8:	491b      	ldr	r1, [pc, #108]	; (1668 <main+0x88>)
    15fa:	481c      	ldr	r0, [pc, #112]	; (166c <main+0x8c>)
    15fc:	f00b fdef 	bl	d1de <k_work_init>
	k_work_init(&report_clear, clear_report);
    1600:	491b      	ldr	r1, [pc, #108]	; (1670 <main+0x90>)
    1602:	481c      	ldr	r0, [pc, #112]	; (1674 <main+0x94>)
    1604:	f00b fdeb 	bl	d1de <k_work_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1608:	4c1b      	ldr	r4, [pc, #108]	; (1678 <main+0x98>)
    160a:	4620      	mov	r0, r4
    160c:	f00b fcb2 	bl	cf74 <z_device_is_ready>
	if (as == NULL || !device_is_ready(as)) {
    1610:	b918      	cbnz	r0, 161a <main+0x3a>
		printk("\nono bad stuff sad no device tree\n");
    1612:	481a      	ldr	r0, [pc, #104]	; (167c <main+0x9c>)
    1614:	f00a f82d 	bl	b672 <printk>
		return;
    1618:	e7ec      	b.n	15f4 <main+0x14>
	printk("device is %p, name is %s\n", as, as->name);
    161a:	6822      	ldr	r2, [r4, #0]
    161c:	4818      	ldr	r0, [pc, #96]	; (1680 <main+0xa0>)
            printk("-1\n");
    161e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1684 <main+0xa4>
            k_work_submit(&report_send);
    1622:	4f12      	ldr	r7, [pc, #72]	; (166c <main+0x8c>)
	printk("device is %p, name is %s\n", as, as->name);
    1624:	4621      	mov	r1, r4
    1626:	f00a f824 	bl	b672 <printk>
   int lastDegree = as5600_refresh(as);
    162a:	4620      	mov	r0, r4
    162c:	f7ff ffc2 	bl	15b4 <as5600_refresh>
    printk("%d", lastDegree);
    1630:	4601      	mov	r1, r0
   int lastDegree = as5600_refresh(as);
    1632:	4605      	mov	r5, r0
    printk("%d", lastDegree);
    1634:	4814      	ldr	r0, [pc, #80]	; (1688 <main+0xa8>)
    1636:	f00a f81c 	bl	b672 <printk>
		int degrees = as5600_refresh(as);
    163a:	4620      	mov	r0, r4
    163c:	f7ff ffba 	bl	15b4 <as5600_refresh>
        int deltaDegrees = degrees-lastDegree;
    1640:	1b43      	subs	r3, r0, r5
        if (deltaDegrees > 6 ) {
    1642:	2b06      	cmp	r3, #6
		int degrees = as5600_refresh(as);
    1644:	4606      	mov	r6, r0
        if (deltaDegrees > 6 ) {
    1646:	dd07      	ble.n	1658 <main+0x78>
            printk("1\n");
    1648:	4810      	ldr	r0, [pc, #64]	; (168c <main+0xac>)
    164a:	f00a f812 	bl	b672 <printk>
            k_work_submit(&report_send);
    164e:	4638      	mov	r0, r7
    1650:	f008 ff90 	bl	a574 <k_work_submit>
            lastDegree=degrees;
    1654:	4635      	mov	r5, r6
    1656:	e7f0      	b.n	163a <main+0x5a>
        }else if(deltaDegrees < -6 ){
    1658:	3306      	adds	r3, #6
    165a:	daee      	bge.n	163a <main+0x5a>
            printk("-1\n");
    165c:	4640      	mov	r0, r8
    165e:	e7f4      	b.n	164a <main+0x6a>
    1660:	00001489 	.word	0x00001489
    1664:	0000df00 	.word	0x0000df00
    1668:	0000153d 	.word	0x0000153d
    166c:	20000c48 	.word	0x20000c48
    1670:	000014cd 	.word	0x000014cd
    1674:	20000c38 	.word	0x20000c38
    1678:	0000d7a8 	.word	0x0000d7a8
    167c:	0000df15 	.word	0x0000df15
    1680:	0000df38 	.word	0x0000df38
    1684:	0000df52 	.word	0x0000df52
    1688:	0000ead4 	.word	0x0000ead4
    168c:	0000df53 	.word	0x0000df53

00001690 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1694:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1696:	0784      	lsls	r4, r0, #30
{
    1698:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    169a:	f002 0304 	and.w	r3, r2, #4
    169e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    16a0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    16a4:	f103 0301 	add.w	r3, r3, #1
    16a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    16ac:	9203      	str	r2, [sp, #12]
    16ae:	4605      	mov	r5, r0
    16b0:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    16b2:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    16b4:	f040 81be 	bne.w	1a34 <CONFIG_USB_DEVICE_VID+0x11f>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    16b8:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    16ba:	b130      	cbz	r0, 16ca <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    16bc:	2907      	cmp	r1, #7
    16be:	d809      	bhi.n	16d4 <cbvprintf_package+0x44>
		return -ENOSPC;
    16c0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    16c4:	b011      	add	sp, #68	; 0x44
    16c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    16ca:	f001 0607 	and.w	r6, r1, #7
    16ce:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    16d0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    16d4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    16d6:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    16da:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    16dc:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    16e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16e4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    16e6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    16ea:	464f      	mov	r7, r9
	bool parsing = false;
    16ec:	46cb      	mov	fp, r9
	size = sizeof(char *);
    16ee:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    16f0:	b10d      	cbz	r5, 16f6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
    16f2:	9a00      	ldr	r2, [sp, #0]
    16f4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    16f6:	9805      	ldr	r0, [sp, #20]
    16f8:	2800      	cmp	r0, #0
    16fa:	f300 80eb 	bgt.w	18d4 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    16fe:	489a      	ldr	r0, [pc, #616]	; (1968 <CONFIG_USB_DEVICE_VID+0x53>)
    1700:	9a00      	ldr	r2, [sp, #0]
    1702:	4282      	cmp	r2, r0
    1704:	d303      	bcc.n	170e <cbvprintf_package+0x7e>
    1706:	4899      	ldr	r0, [pc, #612]	; (196c <CONFIG_USB_DEVICE_VID+0x57>)
    1708:	4282      	cmp	r2, r0
    170a:	f0c0 80e3 	bcc.w	18d4 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    170e:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1710:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1714:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1716:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    171a:	f100 8106 	bmi.w	192a <CONFIG_USB_DEVICE_VID+0x15>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    171e:	2f0f      	cmp	r7, #15
    1720:	f200 80b4 	bhi.w	188c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1724:	2d00      	cmp	r5, #0
    1726:	f000 8108 	beq.w	193a <CONFIG_USB_DEVICE_VID+0x25>
					str_ptr_pos[s_idx] = s_ptr_idx;
    172a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    172e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    1732:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1734:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1738:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    173c:	9804      	ldr	r0, [sp, #16]
    173e:	3001      	adds	r0, #1
    1740:	9004      	str	r0, [sp, #16]
    1742:	e0ea      	b.n	191a <CONFIG_USB_DEVICE_VID+0x5>
			switch (*fmt) {
    1744:	287a      	cmp	r0, #122	; 0x7a
    1746:	d860      	bhi.n	180a <cbvprintf_package+0x17a>
    1748:	284b      	cmp	r0, #75	; 0x4b
    174a:	d80e      	bhi.n	176a <cbvprintf_package+0xda>
    174c:	2847      	cmp	r0, #71	; 0x47
    174e:	d85c      	bhi.n	180a <cbvprintf_package+0x17a>
    1750:	2829      	cmp	r0, #41	; 0x29
    1752:	d82f      	bhi.n	17b4 <cbvprintf_package+0x124>
    1754:	2825      	cmp	r0, #37	; 0x25
    1756:	d055      	beq.n	1804 <cbvprintf_package+0x174>
    1758:	d857      	bhi.n	180a <cbvprintf_package+0x17a>
    175a:	2820      	cmp	r0, #32
    175c:	d07d      	beq.n	185a <cbvprintf_package+0x1ca>
    175e:	3823      	subs	r0, #35	; 0x23
    1760:	f1d0 0b00 	rsbs	fp, r0, #0
    1764:	eb4b 0b00 	adc.w	fp, fp, r0
    1768:	e077      	b.n	185a <cbvprintf_package+0x1ca>
    176a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    176e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    1772:	d84a      	bhi.n	180a <cbvprintf_package+0x17a>
    1774:	e8df f00c 	tbb	[pc, ip]
    1778:	49494971 	.word	0x49494971
    177c:	49494949 	.word	0x49494949
    1780:	49494949 	.word	0x49494949
    1784:	4949494c 	.word	0x4949494c
    1788:	49494949 	.word	0x49494949
    178c:	4c495a49 	.word	0x4c495a49
    1790:	5a5a5a4c 	.word	0x5a5a5a4c
    1794:	496e4c71 	.word	0x496e4c71
    1798:	4c184971 	.word	0x4c184971
    179c:	83494918 	.word	0x83494918
    17a0:	49494c80 	.word	0x49494c80
    17a4:	494c      	.short	0x494c
    17a6:	80          	.byte	0x80
    17a7:	00          	.byte	0x00
    17a8:	2000      	movs	r0, #0
    17aa:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    17ae:	f04f 0a04 	mov.w	sl, #4
    17b2:	e039      	b.n	1828 <cbvprintf_package+0x198>
			switch (*fmt) {
    17b4:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    17b8:	fa5f fc8c 	uxtb.w	ip, ip
    17bc:	2201      	movs	r2, #1
    17be:	fa02 fc0c 	lsl.w	ip, r2, ip
    17c2:	ea1c 0f0e 	tst.w	ip, lr
    17c6:	d148      	bne.n	185a <cbvprintf_package+0x1ca>
    17c8:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    17cc:	d12e      	bne.n	182c <cbvprintf_package+0x19c>
    17ce:	ea1c 0b02 	ands.w	fp, ip, r2
    17d2:	d042      	beq.n	185a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    17d4:	3c01      	subs	r4, #1
    17d6:	4454      	add	r4, sl
    17d8:	f1ca 0c00 	rsb	ip, sl, #0
    17dc:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    17e0:	2d00      	cmp	r5, #0
    17e2:	d061      	beq.n	18a8 <cbvprintf_package+0x218>
    17e4:	eba3 0c05 	sub.w	ip, r3, r5
    17e8:	44a4      	add	ip, r4
    17ea:	45b4      	cmp	ip, r6
    17ec:	f63f af68 	bhi.w	16c0 <cbvprintf_package+0x30>
		if (is_str_arg) {
    17f0:	2800      	cmp	r0, #0
    17f2:	d168      	bne.n	18c6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    17f4:	2b04      	cmp	r3, #4
    17f6:	d147      	bne.n	1888 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    17f8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    17fc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    17fe:	3404      	adds	r4, #4
    1800:	2304      	movs	r3, #4
    1802:	e02a      	b.n	185a <cbvprintf_package+0x1ca>
				arg_idx--;
    1804:	9a01      	ldr	r2, [sp, #4]
    1806:	3a01      	subs	r2, #1
    1808:	9201      	str	r2, [sp, #4]
				parsing = false;
    180a:	f04f 0b00 	mov.w	fp, #0
				continue;
    180e:	e024      	b.n	185a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    1810:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1814:	286c      	cmp	r0, #108	; 0x6c
    1816:	d134      	bne.n	1882 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1818:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    181c:	2000      	movs	r0, #0
    181e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    1820:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    1822:	d1c4      	bne.n	17ae <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1824:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1828:	4653      	mov	r3, sl
    182a:	e7d3      	b.n	17d4 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    182c:	f108 0807 	add.w	r8, r8, #7
    1830:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    1834:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    1836:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    183a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    183e:	b135      	cbz	r5, 184e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    1840:	9806      	ldr	r0, [sp, #24]
    1842:	4420      	add	r0, r4
    1844:	42b0      	cmp	r0, r6
    1846:	f63f af3b 	bhi.w	16c0 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    184a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    184e:	3408      	adds	r4, #8
				parsing = false;
    1850:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    1854:	f04f 0a08 	mov.w	sl, #8
    1858:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    185a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    185e:	2800      	cmp	r0, #0
    1860:	d078      	beq.n	1954 <CONFIG_USB_DEVICE_VID+0x3f>
			if (!parsing) {
    1862:	f1bb 0f00 	cmp.w	fp, #0
    1866:	f47f af6d 	bne.w	1744 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    186a:	2825      	cmp	r0, #37	; 0x25
    186c:	d1f5      	bne.n	185a <cbvprintf_package+0x1ca>
					arg_idx++;
    186e:	9b01      	ldr	r3, [sp, #4]
    1870:	3301      	adds	r3, #1
    1872:	9301      	str	r3, [sp, #4]
					parsing = true;
    1874:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    1878:	f04f 0a04 	mov.w	sl, #4
    187c:	e7ec      	b.n	1858 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    187e:	4658      	mov	r0, fp
    1880:	e793      	b.n	17aa <cbvprintf_package+0x11a>
    1882:	2000      	movs	r0, #0
				parsing = false;
    1884:	4683      	mov	fp, r0
    1886:	e7a5      	b.n	17d4 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    1888:	2b08      	cmp	r3, #8
    188a:	d002      	beq.n	1892 <cbvprintf_package+0x202>
					return -EINVAL;
    188c:	f06f 0015 	mvn.w	r0, #21
    1890:	e718      	b.n	16c4 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    1892:	f108 0807 	add.w	r8, r8, #7
    1896:	f028 0807 	bic.w	r8, r8, #7
    189a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    189e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    18a2:	3408      	adds	r4, #8
    18a4:	2308      	movs	r3, #8
    18a6:	e7d8      	b.n	185a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    18a8:	b968      	cbnz	r0, 18c6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    18aa:	2b04      	cmp	r3, #4
    18ac:	d102      	bne.n	18b4 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    18ae:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    18b2:	e7a4      	b.n	17fe <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    18b4:	2b08      	cmp	r3, #8
    18b6:	d1e9      	bne.n	188c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    18b8:	f108 0807 	add.w	r8, r8, #7
    18bc:	f028 0807 	bic.w	r8, r8, #7
    18c0:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    18c4:	e7ed      	b.n	18a2 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    18c6:	9a05      	ldr	r2, [sp, #20]
    18c8:	3a01      	subs	r2, #1
    18ca:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    18cc:	f858 2b04 	ldr.w	r2, [r8], #4
    18d0:	9200      	str	r2, [sp, #0]
    18d2:	e70d      	b.n	16f0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    18d4:	9a03      	ldr	r2, [sp, #12]
    18d6:	0790      	lsls	r0, r2, #30
    18d8:	d520      	bpl.n	191c <CONFIG_USB_DEVICE_VID+0x7>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    18da:	eba4 0e05 	sub.w	lr, r4, r5
    18de:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    18e2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    18e6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    18ea:	d2cf      	bcs.n	188c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    18ec:	2f0f      	cmp	r7, #15
    18ee:	d8cd      	bhi.n	188c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    18f0:	b1f5      	cbz	r5, 1930 <CONFIG_USB_DEVICE_VID+0x1b>
					str_ptr_pos[s_idx] = s_ptr_idx;
    18f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    18f6:	eb0d 0e02 	add.w	lr, sp, r2
    18fa:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    18fc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    18fe:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1902:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    1906:	f1bc 0f00 	cmp.w	ip, #0
    190a:	f43f af17 	beq.w	173c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    190e:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1912:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    1916:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    191a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    191c:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    1920:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    1922:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1924:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1928:	e797      	b.n	185a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    192a:	f04f 0c00 	mov.w	ip, #0
    192e:	e7da      	b.n	18e6 <cbvprintf_package+0x256>
				} else if (is_ro) {
    1930:	f1bc 0f00 	cmp.w	ip, #0
    1934:	d001      	beq.n	193a <CONFIG_USB_DEVICE_VID+0x25>
					len += 1;
    1936:	3601      	adds	r6, #1
    1938:	e7ef      	b.n	191a <CONFIG_USB_DEVICE_VID+0x5>
				} else if (rws_pos_en) {
    193a:	9802      	ldr	r0, [sp, #8]
					len += 2;
    193c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    193e:	2800      	cmp	r0, #0
    1940:	d1eb      	bne.n	191a <CONFIG_USB_DEVICE_VID+0x5>
					len += strlen(s) + 1 + 1;
    1942:	9800      	ldr	r0, [sp, #0]
    1944:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1948:	f00a ff42 	bl	c7d0 <strlen>
    194c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    1950:	4406      	add	r6, r0
    1952:	e7e2      	b.n	191a <CONFIG_USB_DEVICE_VID+0x5>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1954:	1b63      	subs	r3, r4, r5
    1956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    195a:	d297      	bcs.n	188c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    195c:	b945      	cbnz	r5, 1970 <CONFIG_USB_DEVICE_VID+0x5b>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    195e:	f1a6 0408 	sub.w	r4, r6, #8
    1962:	18e0      	adds	r0, r4, r3
    1964:	e6ae      	b.n	16c4 <cbvprintf_package+0x34>
    1966:	bf00      	nop
    1968:	0000d670 	.word	0x0000d670
    196c:	0000efc4 	.word	0x0000efc4
	if (rws_pos_en) {
    1970:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    1972:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1974:	089b      	lsrs	r3, r3, #2
    1976:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1978:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    197c:	b1c2      	cbz	r2, 19b0 <CONFIG_USB_DEVICE_VID+0x9b>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    197e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1980:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1984:	f1b9 0f00 	cmp.w	r9, #0
    1988:	d005      	beq.n	1996 <CONFIG_USB_DEVICE_VID+0x81>
    198a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    198c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    198e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    1992:	4297      	cmp	r7, r2
    1994:	d10e      	bne.n	19b4 <CONFIG_USB_DEVICE_VID+0x9f>
		if (BUF_OFFSET + 1 + size > len) {
    1996:	f1c5 0301 	rsb	r3, r5, #1
    199a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    199e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    19a2:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    19a4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    19a8:	4557      	cmp	r7, sl
    19aa:	d112      	bne.n	19d2 <CONFIG_USB_DEVICE_VID+0xbd>
	return BUF_OFFSET;
    19ac:	1b60      	subs	r0, r4, r5
    19ae:	e689      	b.n	16c4 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    19b0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    19b2:	e7e5      	b.n	1980 <CONFIG_USB_DEVICE_VID+0x6b>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    19b4:	f810 3b01 	ldrb.w	r3, [r0], #1
    19b8:	0619      	lsls	r1, r3, #24
    19ba:	d508      	bpl.n	19ce <CONFIG_USB_DEVICE_VID+0xb9>
			if (BUF_OFFSET + 1 > len) {
    19bc:	eb04 0e0c 	add.w	lr, r4, ip
    19c0:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    19c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    19c6:	f63f ae7b 	bhi.w	16c0 <cbvprintf_package+0x30>
			*buf++ = pos;
    19ca:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    19ce:	3201      	adds	r2, #1
    19d0:	e7df      	b.n	1992 <CONFIG_USB_DEVICE_VID+0x7d>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    19d2:	f1b9 0f00 	cmp.w	r9, #0
    19d6:	d003      	beq.n	19e0 <CONFIG_USB_DEVICE_VID+0xcb>
    19d8:	f998 2000 	ldrsb.w	r2, [r8]
    19dc:	2a00      	cmp	r2, #0
    19de:	db17      	blt.n	1a10 <CONFIG_USB_DEVICE_VID+0xfb>
		if (rws_pos_en) {
    19e0:	9b02      	ldr	r3, [sp, #8]
    19e2:	b1d3      	cbz	r3, 1a1a <CONFIG_USB_DEVICE_VID+0x105>
			*buf++ = str_ptr_arg[i];
    19e4:	f81a 200b 	ldrb.w	r2, [sl, fp]
    19e8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    19ec:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    19ee:	9b01      	ldr	r3, [sp, #4]
    19f0:	1898      	adds	r0, r3, r2
    19f2:	4420      	add	r0, r4
    19f4:	42b0      	cmp	r0, r6
    19f6:	f63f ae63 	bhi.w	16c0 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    19fa:	f898 0000 	ldrb.w	r0, [r8]
    19fe:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    1a02:	9900      	ldr	r1, [sp, #0]
    1a04:	9203      	str	r2, [sp, #12]
    1a06:	4620      	mov	r0, r4
    1a08:	f00a fefe 	bl	c808 <memcpy>
		buf += size;
    1a0c:	9a03      	ldr	r2, [sp, #12]
    1a0e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1a10:	f10a 0a01 	add.w	sl, sl, #1
    1a14:	f108 0801 	add.w	r8, r8, #1
    1a18:	e7c6      	b.n	19a8 <CONFIG_USB_DEVICE_VID+0x93>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1a1a:	f898 2000 	ldrb.w	r2, [r8]
    1a1e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    1a22:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1a24:	9b02      	ldr	r3, [sp, #8]
    1a26:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1a2a:	9800      	ldr	r0, [sp, #0]
    1a2c:	f00a fed0 	bl	c7d0 <strlen>
    1a30:	1c42      	adds	r2, r0, #1
    1a32:	e7dc      	b.n	19ee <CONFIG_USB_DEVICE_VID+0xd9>
		return -EFAULT;
    1a34:	f06f 000d 	mvn.w	r0, #13
    1a38:	e644      	b.n	16c4 <cbvprintf_package+0x34>
    1a3a:	bf00      	nop

00001a3c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a40:	b095      	sub	sp, #84	; 0x54
    1a42:	af00      	add	r7, sp, #0
    1a44:	4604      	mov	r4, r0
    1a46:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    1a4a:	61bb      	str	r3, [r7, #24]
    1a4c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    1a50:	627a      	str	r2, [r7, #36]	; 0x24
    1a52:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1a54:	6239      	str	r1, [r7, #32]
    1a56:	b951      	cbnz	r1, 1a6e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    1a58:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    1a5a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    1a5c:	7880      	ldrb	r0, [r0, #2]
    1a5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1a62:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    1a64:	6a3b      	ldr	r3, [r7, #32]
    1a66:	429e      	cmp	r6, r3
    1a68:	d81a      	bhi.n	1aa0 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    1a6a:	1b03      	subs	r3, r0, r4
    1a6c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    1a6e:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    1a72:	78e3      	ldrb	r3, [r4, #3]
    1a74:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    1a76:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    1a78:	f1ba 0f00 	cmp.w	sl, #0
    1a7c:	d002      	beq.n	1a84 <cbprintf_package_convert+0x48>
    1a7e:	f01b 0f01 	tst.w	fp, #1
    1a82:	d117      	bne.n	1ab4 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    1a84:	697b      	ldr	r3, [r7, #20]
    1a86:	bb5b      	cbnz	r3, 1ae0 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    1a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a8a:	b11b      	cbz	r3, 1a94 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    1a8c:	69ba      	ldr	r2, [r7, #24]
    1a8e:	6a39      	ldr	r1, [r7, #32]
    1a90:	4620      	mov	r0, r4
    1a92:	4798      	blx	r3
		}

		return in_len;
    1a94:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    1a96:	4628      	mov	r0, r5
    1a98:	3754      	adds	r7, #84	; 0x54
    1a9a:	46bd      	mov	sp, r7
    1a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    1aa0:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    1aa2:	4628      	mov	r0, r5
    1aa4:	f00a fe94 	bl	c7d0 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    1aa8:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    1aaa:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    1aac:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    1aae:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    1ab0:	623b      	str	r3, [r7, #32]
    1ab2:	e7d7      	b.n	1a64 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    1ab4:	f894 8000 	ldrb.w	r8, [r4]
    1ab8:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1aba:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    1abe:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1ac2:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    1ac4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1ac8:	2b00      	cmp	r3, #0
    1aca:	f040 8101 	bne.w	1cd0 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    1ace:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    1ad0:	46c1      	mov	r9, r8
    1ad2:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    1ad6:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1ad8:	454b      	cmp	r3, r9
    1ada:	d14e      	bne.n	1b7a <cbprintf_package_convert+0x13e>
    1adc:	44d0      	add	r8, sl
    1ade:	e013      	b.n	1b08 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    1ae0:	f01b 0f02 	tst.w	fp, #2
    1ae4:	d0d0      	beq.n	1a88 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    1ae6:	f894 8000 	ldrb.w	r8, [r4]
    1aea:	ea4f 0388 	mov.w	r3, r8, lsl #2
    1aee:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1af0:	6863      	ldr	r3, [r4, #4]
    1af2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    1af6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1afa:	2b00      	cmp	r3, #0
    1afc:	d178      	bne.n	1bf0 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    1afe:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1b00:	f1ba 0f00 	cmp.w	sl, #0
    1b04:	d14e      	bne.n	1ba4 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    1b06:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1b08:	f01b 0f05 	tst.w	fp, #5
    1b0c:	bf0c      	ite	eq
    1b0e:	2302      	moveq	r3, #2
    1b10:	2301      	movne	r3, #1
    1b12:	627b      	str	r3, [r7, #36]	; 0x24
    1b14:	697b      	ldr	r3, [r7, #20]
    1b16:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1b1a:	f00b 0302 	and.w	r3, fp, #2
    1b1e:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1b20:	45d0      	cmp	r8, sl
    1b22:	d0b8      	beq.n	1a96 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1b24:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1b28:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1b2c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1b30:	4bac      	ldr	r3, [pc, #688]	; (1de4 <cbprintf_package_convert+0x3a8>)
    1b32:	4599      	cmp	r9, r3
    1b34:	d302      	bcc.n	1b3c <cbprintf_package_convert+0x100>
    1b36:	4bac      	ldr	r3, [pc, #688]	; (1de8 <cbprintf_package_convert+0x3ac>)
    1b38:	4599      	cmp	r9, r3
    1b3a:	d339      	bcc.n	1bb0 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1b3c:	693b      	ldr	r3, [r7, #16]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d043      	beq.n	1bca <cbprintf_package_convert+0x18e>
    1b42:	69f8      	ldr	r0, [r7, #28]
    1b44:	f009 fd5b 	bl	b5fe <is_ptr>
    1b48:	2800      	cmp	r0, #0
    1b4a:	d03e      	beq.n	1bca <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1b4c:	46e9      	mov	r9, sp
    1b4e:	b08a      	sub	sp, #40	; 0x28
    1b50:	466a      	mov	r2, sp
    1b52:	4ba6      	ldr	r3, [pc, #664]	; (1dec <cbprintf_package_convert+0x3b0>)
    1b54:	6153      	str	r3, [r2, #20]
    1b56:	69fb      	ldr	r3, [r7, #28]
    1b58:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
    1b60:	8413      	strh	r3, [r2, #32]
    1b62:	4ba3      	ldr	r3, [pc, #652]	; (1df0 <cbprintf_package_convert+0x3b4>)
    1b64:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    1b68:	48a2      	ldr	r0, [pc, #648]	; (1df4 <cbprintf_package_convert+0x3b8>)
    1b6a:	2300      	movs	r3, #0
    1b6c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1b70:	f001 f8ce 	bl	2d10 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    1b74:	3d02      	subs	r5, #2
    1b76:	46cd      	mov	sp, r9
				continue;
    1b78:	e7d2      	b.n	1b20 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    1b7a:	f819 2b01 	ldrb.w	r2, [r9], #1
    1b7e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1b80:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    1b84:	f00a fe24 	bl	c7d0 <strlen>
				if (strl && strl_cnt < strl_len) {
    1b88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1b8c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    1b8e:	b13a      	cbz	r2, 1ba0 <cbprintf_package_convert+0x164>
    1b90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    1b94:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    1b96:	bf3e      	ittt	cc
    1b98:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    1b9a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    1b9e:	3601      	addcc	r6, #1
				out_len += len;
    1ba0:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1ba2:	e799      	b.n	1ad8 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1ba4:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    1ba8:	bf1c      	itt	ne
    1baa:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    1bac:	44d0      	addne	r8, sl
    1bae:	e7ab      	b.n	1b08 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1bb0:	693b      	ldr	r3, [r7, #16]
    1bb2:	b123      	cbz	r3, 1bbe <cbprintf_package_convert+0x182>
    1bb4:	69f8      	ldr	r0, [r7, #28]
    1bb6:	f009 fd22 	bl	b5fe <is_ptr>
    1bba:	2800      	cmp	r0, #0
    1bbc:	d1c6      	bne.n	1b4c <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1bbe:	f01b 0f01 	tst.w	fp, #1
    1bc2:	d105      	bne.n	1bd0 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bc6:	1aed      	subs	r5, r5, r3
    1bc8:	e7aa      	b.n	1b20 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1bca:	6a3b      	ldr	r3, [r7, #32]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d0a7      	beq.n	1b20 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    1bd0:	4648      	mov	r0, r9
    1bd2:	f00a fdfd 	bl	c7d0 <strlen>
				if (strl && strl_cnt < strl_len) {
    1bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bd8:	b143      	cbz	r3, 1bec <cbprintf_package_convert+0x1b0>
    1bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1bde:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    1be0:	bf3f      	itttt	cc
    1be2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1be4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    1be6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1bea:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1bec:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1bee:	e797      	b.n	1b20 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1bf0:	f1ba 0f00 	cmp.w	sl, #0
    1bf4:	d071      	beq.n	1cda <cbprintf_package_convert+0x29e>
    1bf6:	f01b 0604 	ands.w	r6, fp, #4
    1bfa:	d071      	beq.n	1ce0 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    1bfc:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1bfe:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1c00:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1c04:	4652      	mov	r2, sl
    1c06:	4641      	mov	r1, r8
    1c08:	f00a fdfe 	bl	c808 <memcpy>
	str_pos += ros_nbr;
    1c0c:	697b      	ldr	r3, [r7, #20]
    1c0e:	005b      	lsls	r3, r3, #1
    1c10:	60bb      	str	r3, [r7, #8]
    1c12:	697b      	ldr	r3, [r7, #20]
    1c14:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1c16:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1c1a:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1c1c:	f00b 0302 	and.w	r3, fp, #2
    1c20:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1c22:	697b      	ldr	r3, [r7, #20]
    1c24:	4598      	cmp	r8, r3
    1c26:	d15d      	bne.n	1ce4 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    1c28:	7823      	ldrb	r3, [r4, #0]
    1c2a:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1c2c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1c2e:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1c32:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1c36:	bf0c      	ite	eq
    1c38:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1c3c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1c3e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1c42:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1c44:	f040 809d 	bne.w	1d82 <cbprintf_package_convert+0x346>
    1c48:	f01b 0f04 	tst.w	fp, #4
    1c4c:	bf14      	ite	ne
    1c4e:	4648      	movne	r0, r9
    1c50:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1c52:	f894 b002 	ldrb.w	fp, [r4, #2]
    1c56:	f894 8003 	ldrb.w	r8, [r4, #3]
    1c5a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1c5c:	7062      	strb	r2, [r4, #1]
    1c5e:	70a0      	strb	r0, [r4, #2]
    1c60:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    1c62:	69ba      	ldr	r2, [r7, #24]
    1c64:	68f9      	ldr	r1, [r7, #12]
    1c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c68:	4620      	mov	r0, r4
    1c6a:	4798      	blx	r3
	if (rv < 0) {
    1c6c:	1e05      	subs	r5, r0, #0
    1c6e:	f6ff af12 	blt.w	1a96 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    1c72:	69fb      	ldr	r3, [r7, #28]
    1c74:	7023      	strb	r3, [r4, #0]
    1c76:	693b      	ldr	r3, [r7, #16]
    1c78:	7063      	strb	r3, [r4, #1]
    1c7a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1c7e:	69ba      	ldr	r2, [r7, #24]
    1c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    1c82:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1c86:	4649      	mov	r1, r9
    1c88:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1c8c:	4798      	blx	r3
	if (rv < 0) {
    1c8e:	f1b0 0800 	subs.w	r8, r0, #0
    1c92:	f2c0 80a3 	blt.w	1ddc <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1c96:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    1c98:	69ba      	ldr	r2, [r7, #24]
    1c9a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1c9c:	eba3 010a 	sub.w	r1, r3, sl
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    1ca4:	68bb      	ldr	r3, [r7, #8]
    1ca6:	1ac9      	subs	r1, r1, r3
    1ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1caa:	4798      	blx	r3
	if (rv < 0) {
    1cac:	2800      	cmp	r0, #0
    1cae:	f2c0 8097 	blt.w	1de0 <cbprintf_package_convert+0x3a4>
	out_len += rv;
    1cb2:	44a8      	add	r8, r5
	out_len += rv;
    1cb4:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1cb8:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    1cbc:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1cc0:	45b3      	cmp	fp, r6
    1cc2:	d360      	bcc.n	1d86 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    1cc4:	2100      	movs	r1, #0
    1cc6:	69ba      	ldr	r2, [r7, #24]
    1cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cca:	4608      	mov	r0, r1
    1ccc:	4798      	blx	r3
	return out_len;
    1cce:	e6e2      	b.n	1a96 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1cd0:	f04f 0900 	mov.w	r9, #0
    1cd4:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1cd8:	e794      	b.n	1c04 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    1cda:	4656      	mov	r6, sl
		keep_cnt = 0;
    1cdc:	46d1      	mov	r9, sl
    1cde:	e795      	b.n	1c0c <cbprintf_package_convert+0x1d0>
    1ce0:	46b1      	mov	r9, r6
    1ce2:	e793      	b.n	1c0c <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    1ce4:	f818 1b02 	ldrb.w	r1, [r8], #2
    1ce8:	4a3e      	ldr	r2, [pc, #248]	; (1de4 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    1cea:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1cee:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    1cf2:	4293      	cmp	r3, r2
    1cf4:	d302      	bcc.n	1cfc <cbprintf_package_convert+0x2c0>
    1cf6:	4a3c      	ldr	r2, [pc, #240]	; (1de8 <cbprintf_package_convert+0x3ac>)
    1cf8:	4293      	cmp	r3, r2
    1cfa:	d31c      	bcc.n	1d36 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1cfc:	693b      	ldr	r3, [r7, #16]
    1cfe:	b123      	cbz	r3, 1d0a <cbprintf_package_convert+0x2ce>
    1d00:	69f8      	ldr	r0, [r7, #28]
    1d02:	f009 fc7c 	bl	b5fe <is_ptr>
    1d06:	2800      	cmp	r0, #0
    1d08:	d18b      	bne.n	1c22 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1d0a:	687b      	ldr	r3, [r7, #4]
    1d0c:	b9f3      	cbnz	r3, 1d4c <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    1d0e:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1d12:	f107 0028 	add.w	r0, r7, #40	; 0x28
    1d16:	4402      	add	r2, r0
    1d18:	f109 0301 	add.w	r3, r9, #1
    1d1c:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1d20:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1d24:	fa52 f383 	uxtab	r3, r2, r3
    1d28:	f109 0902 	add.w	r9, r9, #2
    1d2c:	fa5f f989 	uxtb.w	r9, r9
    1d30:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1d34:	e775      	b.n	1c22 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1d36:	693b      	ldr	r3, [r7, #16]
    1d38:	b12b      	cbz	r3, 1d46 <cbprintf_package_convert+0x30a>
    1d3a:	69f8      	ldr	r0, [r7, #28]
    1d3c:	f009 fc5f 	bl	b5fe <is_ptr>
    1d40:	2800      	cmp	r0, #0
    1d42:	f47f af6e 	bne.w	1c22 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1d46:	f01b 0f01 	tst.w	fp, #1
    1d4a:	d009      	beq.n	1d60 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1d4c:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1d50:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1d54:	1c73      	adds	r3, r6, #1
    1d56:	1856      	adds	r6, r2, r1
    1d58:	f806 5c20 	strb.w	r5, [r6, #-32]
    1d5c:	b2de      	uxtb	r6, r3
    1d5e:	e760      	b.n	1c22 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1d60:	f01b 0f04 	tst.w	fp, #4
    1d64:	f43f af5d 	beq.w	1c22 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    1d68:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1d6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1d70:	f109 0301 	add.w	r3, r9, #1
    1d74:	eb02 0901 	add.w	r9, r2, r1
    1d78:	f809 5c10 	strb.w	r5, [r9, #-16]
    1d7c:	fa5f f983 	uxtb.w	r9, r3
    1d80:	e74f      	b.n	1c22 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1d82:	2000      	movs	r0, #0
    1d84:	e765      	b.n	1c52 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    1d86:	f81b 300a 	ldrb.w	r3, [fp, sl]
    1d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    1d8e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1d94:	b1fb      	cbz	r3, 1dd6 <cbprintf_package_convert+0x39a>
    1d96:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    1d9a:	69ba      	ldr	r2, [r7, #24]
    1d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d9e:	2101      	movs	r1, #1
    1da0:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    1da4:	4798      	blx	r3
		if (rv < 0) {
    1da6:	2800      	cmp	r0, #0
    1da8:	db1a      	blt.n	1de0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1daa:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    1dac:	f1b8 0f00 	cmp.w	r8, #0
    1db0:	d106      	bne.n	1dc0 <cbprintf_package_convert+0x384>
    1db2:	4648      	mov	r0, r9
    1db4:	f00a fd0c 	bl	c7d0 <strlen>
    1db8:	f100 0801 	add.w	r8, r0, #1
    1dbc:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1dc0:	69ba      	ldr	r2, [r7, #24]
    1dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1dc4:	4641      	mov	r1, r8
    1dc6:	4648      	mov	r0, r9
    1dc8:	4798      	blx	r3
		if (rv < 0) {
    1dca:	2800      	cmp	r0, #0
    1dcc:	db08      	blt.n	1de0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1dce:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1dd0:	f10b 0b01 	add.w	fp, fp, #1
    1dd4:	e774      	b.n	1cc0 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    1dd6:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    1dda:	e7de      	b.n	1d9a <cbprintf_package_convert+0x35e>
    1ddc:	4645      	mov	r5, r8
    1dde:	e65a      	b.n	1a96 <cbprintf_package_convert+0x5a>
    1de0:	4605      	mov	r5, r0
    1de2:	e658      	b.n	1a96 <cbprintf_package_convert+0x5a>
    1de4:	0000d670 	.word	0x0000d670
    1de8:	0000efc4 	.word	0x0000efc4
    1dec:	0000df95 	.word	0x0000df95
    1df0:	01000004 	.word	0x01000004
    1df4:	0000d9b4 	.word	0x0000d9b4

00001df8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <__printk_hook_install+0x8>)
    1dfa:	6018      	str	r0, [r3, #0]
}
    1dfc:	4770      	bx	lr
    1dfe:	bf00      	nop
    1e00:	200000b0 	.word	0x200000b0

00001e04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1e04:	b530      	push	{r4, r5, lr}
    1e06:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1e08:	2500      	movs	r5, #0
    1e0a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1e0e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1e10:	9500      	str	r5, [sp, #0]
    1e12:	a903      	add	r1, sp, #12
    1e14:	4805      	ldr	r0, [pc, #20]	; (1e2c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    1e16:	9505      	str	r5, [sp, #20]
    1e18:	f000 f918 	bl	204c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1e1c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1e20:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1e22:	bfb8      	it	lt
    1e24:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1e26:	b007      	add	sp, #28
    1e28:	bd30      	pop	{r4, r5, pc}
    1e2a:	bf00      	nop
    1e2c:	0000b64d 	.word	0x0000b64d

00001e30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1e34:	8b05      	ldrh	r5, [r0, #24]
{
    1e36:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1e38:	0728      	lsls	r0, r5, #28
{
    1e3a:	4690      	mov	r8, r2
	if (processing) {
    1e3c:	d411      	bmi.n	1e62 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1e3e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1e40:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1e44:	f040 80cd 	bne.w	1fe2 <process_event+0x1b2>
			evt = process_recheck(mgr);
    1e48:	4620      	mov	r0, r4
    1e4a:	f009 fe16 	bl	ba7a <process_recheck>
		}

		if (evt == EVT_NOP) {
    1e4e:	b178      	cbz	r0, 1e70 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1e50:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e52:	8b21      	ldrh	r1, [r4, #24]
    1e54:	2804      	cmp	r0, #4
    1e56:	d811      	bhi.n	1e7c <process_event+0x4c>
    1e58:	e8df f000 	tbb	[pc, r0]
    1e5c:	856d10c3 	.word	0x856d10c3
    1e60:	95          	.byte	0x95
    1e61:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1e62:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1e64:	bf0c      	ite	eq
    1e66:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e6a:	f045 0520 	orrne.w	r5, r5, #32
    1e6e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1e70:	f388 8811 	msr	BASEPRI, r8
    1e74:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e7c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e80:	45aa      	cmp	sl, r5
    1e82:	f000 80a6 	beq.w	1fd2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1e86:	2700      	movs	r7, #0
    1e88:	46b9      	mov	r9, r7
    1e8a:	463e      	mov	r6, r7
    1e8c:	68a3      	ldr	r3, [r4, #8]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	f000 80bd 	beq.w	200e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1e94:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1e98:	8321      	strh	r1, [r4, #24]
    1e9a:	f388 8811 	msr	BASEPRI, r8
    1e9e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1ea2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ea4:	2900      	cmp	r1, #0
    1ea6:	f000 80bb 	beq.w	2020 <process_event+0x1f0>
	return node->next;
    1eaa:	680d      	ldr	r5, [r1, #0]
    1eac:	2900      	cmp	r1, #0
    1eae:	f000 80b7 	beq.w	2020 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1eb2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1eb6:	4633      	mov	r3, r6
    1eb8:	4652      	mov	r2, sl
    1eba:	4620      	mov	r0, r4
    1ebc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ebe:	2d00      	cmp	r5, #0
    1ec0:	d076      	beq.n	1fb0 <process_event+0x180>
    1ec2:	682b      	ldr	r3, [r5, #0]
    1ec4:	4629      	mov	r1, r5
    1ec6:	461d      	mov	r5, r3
    1ec8:	e7f0      	b.n	1eac <process_event+0x7c>
    1eca:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1ece:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1ed0:	2a01      	cmp	r2, #1
    1ed2:	d81b      	bhi.n	1f0c <process_event+0xdc>
	list->head = NULL;
    1ed4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ed6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1eda:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1edc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ede:	b289      	uxth	r1, r1
	list->tail = NULL;
    1ee0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1ee4:	d109      	bne.n	1efa <process_event+0xca>
    1ee6:	463b      	mov	r3, r7
    1ee8:	e003      	b.n	1ef2 <process_event+0xc2>
				mgr->refs += 1U;
    1eea:	8b62      	ldrh	r2, [r4, #26]
    1eec:	3201      	adds	r2, #1
    1eee:	8362      	strh	r2, [r4, #26]
	return node->next;
    1ef0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d1f9      	bne.n	1eea <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ef6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1efa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1efc:	4620      	mov	r0, r4
    1efe:	f009 fdbc 	bl	ba7a <process_recheck>
    1f02:	2800      	cmp	r0, #0
    1f04:	d07b      	beq.n	1ffe <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f06:	f041 0120 	orr.w	r1, r1, #32
    1f0a:	e077      	b.n	1ffc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1f0c:	2b04      	cmp	r3, #4
    1f0e:	d10a      	bne.n	1f26 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f10:	f021 0107 	bic.w	r1, r1, #7
    1f14:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1f16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1f18:	4620      	mov	r0, r4
    1f1a:	f009 fdae 	bl	ba7a <process_recheck>
    1f1e:	b110      	cbz	r0, 1f26 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f20:	f041 0120 	orr.w	r1, r1, #32
    1f24:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f26:	8b21      	ldrh	r1, [r4, #24]
    1f28:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1f2c:	45aa      	cmp	sl, r5
    1f2e:	d050      	beq.n	1fd2 <process_event+0x1a2>
    1f30:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1f32:	46b9      	mov	r9, r7
    1f34:	e7aa      	b.n	1e8c <process_event+0x5c>
			transit = mgr->transitions->start;
    1f36:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f38:	f021 0107 	bic.w	r1, r1, #7
    1f3c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1f40:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1f42:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1f46:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1f48:	d12d      	bne.n	1fa6 <process_event+0x176>
		    || (transit != NULL)) {
    1f4a:	f1b9 0f00 	cmp.w	r9, #0
    1f4e:	d040      	beq.n	1fd2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1f50:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1f54:	8321      	strh	r1, [r4, #24]
    1f56:	f388 8811 	msr	BASEPRI, r8
    1f5a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1f5e:	493a      	ldr	r1, [pc, #232]	; (2048 <process_event+0x218>)
    1f60:	4620      	mov	r0, r4
    1f62:	47c8      	blx	r9
    1f64:	e029      	b.n	1fba <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f66:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1f6a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f6c:	f041 0104 	orr.w	r1, r1, #4
    1f70:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1f72:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1f74:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1f78:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1f7a:	d0e6      	beq.n	1f4a <process_event+0x11a>
    1f7c:	2700      	movs	r7, #0
		res = 0;
    1f7e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f80:	f04f 0a04 	mov.w	sl, #4
    1f84:	e782      	b.n	1e8c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f86:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1f8a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f8c:	f041 0105 	orr.w	r1, r1, #5
    1f90:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1f92:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1f94:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1f98:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1f9a:	d0d6      	beq.n	1f4a <process_event+0x11a>
    1f9c:	2700      	movs	r7, #0
		res = 0;
    1f9e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1fa0:	f04f 0a05 	mov.w	sl, #5
    1fa4:	e772      	b.n	1e8c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1fa6:	2700      	movs	r7, #0
		res = 0;
    1fa8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1faa:	f04f 0a06 	mov.w	sl, #6
    1fae:	e76d      	b.n	1e8c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1fb0:	462b      	mov	r3, r5
    1fb2:	e787      	b.n	1ec4 <process_event+0x94>
			if (transit != NULL) {
    1fb4:	f1b9 0f00 	cmp.w	r9, #0
    1fb8:	d1d1      	bne.n	1f5e <process_event+0x12e>
	__asm__ volatile(
    1fba:	f04f 0320 	mov.w	r3, #32
    1fbe:	f3ef 8811 	mrs	r8, BASEPRI
    1fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    1fc6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1fca:	8b23      	ldrh	r3, [r4, #24]
    1fcc:	f023 0308 	bic.w	r3, r3, #8
    1fd0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1fd2:	8b25      	ldrh	r5, [r4, #24]
    1fd4:	06ea      	lsls	r2, r5, #27
    1fd6:	d52e      	bpl.n	2036 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1fd8:	f025 0310 	bic.w	r3, r5, #16
    1fdc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1fde:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1fe2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fe4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1fe6:	2e00      	cmp	r6, #0
    1fe8:	f6bf af6f 	bge.w	1eca <process_event+0x9a>
	list->head = NULL;
    1fec:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1fee:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1ff0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ff4:	f021 0107 	bic.w	r1, r1, #7
    1ff8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ffc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ffe:	8b21      	ldrh	r1, [r4, #24]
    2000:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2004:	45aa      	cmp	sl, r5
    2006:	f04f 0900 	mov.w	r9, #0
    200a:	f47f af3f 	bne.w	1e8c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    200e:	2f00      	cmp	r7, #0
    2010:	d09b      	beq.n	1f4a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2012:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2016:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    2018:	f388 8811 	msr	BASEPRI, r8
    201c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    2020:	2f00      	cmp	r7, #0
    2022:	d0c7      	beq.n	1fb4 <process_event+0x184>
	return node->next;
    2024:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    2026:	4639      	mov	r1, r7
    2028:	4633      	mov	r3, r6
    202a:	4652      	mov	r2, sl
    202c:	4620      	mov	r0, r4
    202e:	f009 fd50 	bl	bad2 <notify_one>
	list->head = node;
    2032:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    2034:	e7f4      	b.n	2020 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2036:	06ab      	lsls	r3, r5, #26
    2038:	f57f af1a 	bpl.w	1e70 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    203c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2040:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    2042:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2046:	e6ff      	b.n	1e48 <process_event+0x18>
    2048:	0000baff 	.word	0x0000baff

0000204c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2050:	4681      	mov	r9, r0
    2052:	b095      	sub	sp, #84	; 0x54
    2054:	468b      	mov	fp, r1
    2056:	4617      	mov	r7, r2
    2058:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    205a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    205c:	7838      	ldrb	r0, [r7, #0]
    205e:	b908      	cbnz	r0, 2064 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2060:	4628      	mov	r0, r5
    2062:	e358      	b.n	2716 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    2064:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2066:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2068:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    206a:	d006      	beq.n	207a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    206c:	4659      	mov	r1, fp
    206e:	47c8      	blx	r9
    2070:	2800      	cmp	r0, #0
    2072:	f2c0 8350 	blt.w	2716 <z_cbvprintf_impl+0x6ca>
    2076:	3501      	adds	r5, #1
		if (bps == NULL) {
    2078:	e1fb      	b.n	2472 <z_cbvprintf_impl+0x426>
		} state = {
    207a:	2218      	movs	r2, #24
    207c:	2100      	movs	r1, #0
    207e:	a80e      	add	r0, sp, #56	; 0x38
    2080:	f00a fbcd 	bl	c81e <memset>
	if (*sp == '%') {
    2084:	787b      	ldrb	r3, [r7, #1]
    2086:	2b25      	cmp	r3, #37	; 0x25
    2088:	d07d      	beq.n	2186 <z_cbvprintf_impl+0x13a>
    208a:	2300      	movs	r3, #0
    208c:	1c78      	adds	r0, r7, #1
    208e:	4698      	mov	r8, r3
    2090:	469e      	mov	lr, r3
    2092:	469c      	mov	ip, r3
    2094:	461e      	mov	r6, r3
    2096:	4601      	mov	r1, r0
		switch (*sp) {
    2098:	f810 2b01 	ldrb.w	r2, [r0], #1
    209c:	2a2b      	cmp	r2, #43	; 0x2b
    209e:	f000 80a1 	beq.w	21e4 <z_cbvprintf_impl+0x198>
    20a2:	f200 8098 	bhi.w	21d6 <z_cbvprintf_impl+0x18a>
    20a6:	2a20      	cmp	r2, #32
    20a8:	f000 809f 	beq.w	21ea <z_cbvprintf_impl+0x19e>
    20ac:	2a23      	cmp	r2, #35	; 0x23
    20ae:	f000 809f 	beq.w	21f0 <z_cbvprintf_impl+0x1a4>
    20b2:	b12b      	cbz	r3, 20c0 <z_cbvprintf_impl+0x74>
    20b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    20b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    20bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    20c0:	f1b8 0f00 	cmp.w	r8, #0
    20c4:	d005      	beq.n	20d2 <z_cbvprintf_impl+0x86>
    20c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    20ca:	f043 0320 	orr.w	r3, r3, #32
    20ce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    20d2:	f1be 0f00 	cmp.w	lr, #0
    20d6:	d005      	beq.n	20e4 <z_cbvprintf_impl+0x98>
    20d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    20dc:	f043 0310 	orr.w	r3, r3, #16
    20e0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    20e4:	f1bc 0f00 	cmp.w	ip, #0
    20e8:	d005      	beq.n	20f6 <z_cbvprintf_impl+0xaa>
    20ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    20ee:	f043 0308 	orr.w	r3, r3, #8
    20f2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    20f6:	b12e      	cbz	r6, 2104 <z_cbvprintf_impl+0xb8>
    20f8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    20fc:	f043 0304 	orr.w	r3, r3, #4
    2100:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    2104:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2108:	f003 0044 	and.w	r0, r3, #68	; 0x44
    210c:	2844      	cmp	r0, #68	; 0x44
    210e:	d103      	bne.n	2118 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    2110:	f36f 1386 	bfc	r3, #6, #1
    2114:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    2118:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    211c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    211e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2122:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    2126:	d17f      	bne.n	2228 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    2128:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    212c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    2130:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2132:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    2136:	781a      	ldrb	r2, [r3, #0]
    2138:	2a2e      	cmp	r2, #46	; 0x2e
    213a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    213e:	bf0c      	ite	eq
    2140:	2101      	moveq	r1, #1
    2142:	2100      	movne	r1, #0
    2144:	f361 0241 	bfi	r2, r1, #1, #1
    2148:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    214c:	d178      	bne.n	2240 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    214e:	785a      	ldrb	r2, [r3, #1]
    2150:	2a2a      	cmp	r2, #42	; 0x2a
    2152:	d06e      	beq.n	2232 <z_cbvprintf_impl+0x1e6>
	++sp;
    2154:	3301      	adds	r3, #1
	size_t val = 0;
    2156:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2158:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    215c:	4619      	mov	r1, r3
    215e:	f811 0b01 	ldrb.w	r0, [r1], #1
    2162:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    2166:	2e09      	cmp	r6, #9
    2168:	f240 8095 	bls.w	2296 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    216c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    2170:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    2172:	f3c1 0040 	ubfx	r0, r1, #1, #1
    2176:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    217a:	460a      	mov	r2, r1
    217c:	f360 0241 	bfi	r2, r0, #1, #1
    2180:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    2184:	e05c      	b.n	2240 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    2186:	1cba      	adds	r2, r7, #2
    2188:	9203      	str	r2, [sp, #12]
    218a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    218e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    2192:	07da      	lsls	r2, r3, #31
    2194:	f140 812e 	bpl.w	23f4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    2198:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    219c:	f1b8 0f00 	cmp.w	r8, #0
    21a0:	da07      	bge.n	21b2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    21a2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    21a6:	f042 0204 	orr.w	r2, r2, #4
    21aa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    21ae:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    21b2:	075e      	lsls	r6, r3, #29
    21b4:	f140 8127 	bpl.w	2406 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    21b8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    21bc:	f1ba 0f00 	cmp.w	sl, #0
    21c0:	f280 8126 	bge.w	2410 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    21c4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    21c8:	f36f 0341 	bfc	r3, #1, #1
    21cc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    21d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    21d4:	e11c      	b.n	2410 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    21d6:	2a2d      	cmp	r2, #45	; 0x2d
    21d8:	d00d      	beq.n	21f6 <z_cbvprintf_impl+0x1aa>
    21da:	2a30      	cmp	r2, #48	; 0x30
    21dc:	f47f af69 	bne.w	20b2 <z_cbvprintf_impl+0x66>
    21e0:	2301      	movs	r3, #1
	} while (loop);
    21e2:	e758      	b.n	2096 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    21e4:	f04f 0c01 	mov.w	ip, #1
    21e8:	e755      	b.n	2096 <z_cbvprintf_impl+0x4a>
    21ea:	f04f 0e01 	mov.w	lr, #1
    21ee:	e752      	b.n	2096 <z_cbvprintf_impl+0x4a>
    21f0:	f04f 0801 	mov.w	r8, #1
    21f4:	e74f      	b.n	2096 <z_cbvprintf_impl+0x4a>
    21f6:	2601      	movs	r6, #1
    21f8:	e74d      	b.n	2096 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    21fa:	fb0e 6202 	mla	r2, lr, r2, r6
    21fe:	3a30      	subs	r2, #48	; 0x30
    2200:	4603      	mov	r3, r0
    2202:	4618      	mov	r0, r3
    2204:	f810 6b01 	ldrb.w	r6, [r0], #1
    2208:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    220c:	f1bc 0f09 	cmp.w	ip, #9
    2210:	d9f3      	bls.n	21fa <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    2212:	4299      	cmp	r1, r3
    2214:	d08f      	beq.n	2136 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    2216:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    221a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    221c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    221e:	f362 0141 	bfi	r1, r2, #1, #1
    2222:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    2226:	e786      	b.n	2136 <z_cbvprintf_impl+0xea>
    2228:	460b      	mov	r3, r1
	size_t val = 0;
    222a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    222c:	f04f 0e0a 	mov.w	lr, #10
    2230:	e7e7      	b.n	2202 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    2232:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    2236:	f042 0204 	orr.w	r2, r2, #4
    223a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    223e:	3302      	adds	r3, #2
	switch (*sp) {
    2240:	781a      	ldrb	r2, [r3, #0]
    2242:	2a6c      	cmp	r2, #108	; 0x6c
    2244:	d047      	beq.n	22d6 <z_cbvprintf_impl+0x28a>
    2246:	d82b      	bhi.n	22a0 <z_cbvprintf_impl+0x254>
    2248:	2a68      	cmp	r2, #104	; 0x68
    224a:	d031      	beq.n	22b0 <z_cbvprintf_impl+0x264>
    224c:	2a6a      	cmp	r2, #106	; 0x6a
    224e:	d04b      	beq.n	22e8 <z_cbvprintf_impl+0x29c>
    2250:	2a4c      	cmp	r2, #76	; 0x4c
    2252:	d051      	beq.n	22f8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    2254:	461a      	mov	r2, r3
    2256:	f812 3b01 	ldrb.w	r3, [r2], #1
    225a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    225c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    225e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    2262:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    2266:	f200 80be 	bhi.w	23e6 <z_cbvprintf_impl+0x39a>
    226a:	2b6d      	cmp	r3, #109	; 0x6d
    226c:	d851      	bhi.n	2312 <z_cbvprintf_impl+0x2c6>
    226e:	2b69      	cmp	r3, #105	; 0x69
    2270:	f200 80b9 	bhi.w	23e6 <z_cbvprintf_impl+0x39a>
    2274:	2b57      	cmp	r3, #87	; 0x57
    2276:	d867      	bhi.n	2348 <z_cbvprintf_impl+0x2fc>
    2278:	2b41      	cmp	r3, #65	; 0x41
    227a:	d003      	beq.n	2284 <z_cbvprintf_impl+0x238>
    227c:	3b45      	subs	r3, #69	; 0x45
    227e:	2b02      	cmp	r3, #2
    2280:	f200 80b1 	bhi.w	23e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    2284:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2288:	2204      	movs	r2, #4
    228a:	f362 0302 	bfi	r3, r2, #0, #3
    228e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    2292:	2301      	movs	r3, #1
			break;
    2294:	e073      	b.n	237e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    2296:	fb0c 0202 	mla	r2, ip, r2, r0
    229a:	3a30      	subs	r2, #48	; 0x30
    229c:	460b      	mov	r3, r1
    229e:	e75d      	b.n	215c <z_cbvprintf_impl+0x110>
	switch (*sp) {
    22a0:	2a74      	cmp	r2, #116	; 0x74
    22a2:	d025      	beq.n	22f0 <z_cbvprintf_impl+0x2a4>
    22a4:	2a7a      	cmp	r2, #122	; 0x7a
    22a6:	d1d5      	bne.n	2254 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    22a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    22ac:	2106      	movs	r1, #6
    22ae:	e00c      	b.n	22ca <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    22b0:	785a      	ldrb	r2, [r3, #1]
    22b2:	2a68      	cmp	r2, #104	; 0x68
    22b4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    22b8:	d106      	bne.n	22c8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    22ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    22bc:	f361 02c6 	bfi	r2, r1, #3, #4
    22c0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    22c4:	3302      	adds	r3, #2
    22c6:	e7c5      	b.n	2254 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    22c8:	2102      	movs	r1, #2
    22ca:	f361 02c6 	bfi	r2, r1, #3, #4
    22ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    22d2:	3301      	adds	r3, #1
    22d4:	e7be      	b.n	2254 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    22d6:	785a      	ldrb	r2, [r3, #1]
    22d8:	2a6c      	cmp	r2, #108	; 0x6c
    22da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    22de:	d101      	bne.n	22e4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    22e0:	2104      	movs	r1, #4
    22e2:	e7eb      	b.n	22bc <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    22e4:	2103      	movs	r1, #3
    22e6:	e7f0      	b.n	22ca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    22e8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    22ec:	2105      	movs	r1, #5
    22ee:	e7ec      	b.n	22ca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    22f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    22f4:	2107      	movs	r1, #7
    22f6:	e7e8      	b.n	22ca <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    22f8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    22fc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2300:	f022 0202 	bic.w	r2, r2, #2
    2304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2308:	f042 0202 	orr.w	r2, r2, #2
    230c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    2310:	e7df      	b.n	22d2 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    2312:	3b6e      	subs	r3, #110	; 0x6e
    2314:	b2d9      	uxtb	r1, r3
    2316:	2301      	movs	r3, #1
    2318:	408b      	lsls	r3, r1
    231a:	f240 4182 	movw	r1, #1154	; 0x482
    231e:	420b      	tst	r3, r1
    2320:	d137      	bne.n	2392 <z_cbvprintf_impl+0x346>
    2322:	f013 0f24 	tst.w	r3, #36	; 0x24
    2326:	d151      	bne.n	23cc <z_cbvprintf_impl+0x380>
    2328:	07d8      	lsls	r0, r3, #31
    232a:	d55c      	bpl.n	23e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    232c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2330:	2103      	movs	r1, #3
    2332:	f361 0302 	bfi	r3, r1, #0, #3
    2336:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    233a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    233e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    2342:	424b      	negs	r3, r1
    2344:	414b      	adcs	r3, r1
    2346:	e01a      	b.n	237e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    2348:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    234c:	b2c9      	uxtb	r1, r1
    234e:	2001      	movs	r0, #1
    2350:	fa00 f101 	lsl.w	r1, r0, r1
    2354:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2358:	d194      	bne.n	2284 <z_cbvprintf_impl+0x238>
    235a:	f640 0601 	movw	r6, #2049	; 0x801
    235e:	4231      	tst	r1, r6
    2360:	d11d      	bne.n	239e <z_cbvprintf_impl+0x352>
    2362:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2366:	d03e      	beq.n	23e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    2368:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    236c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2370:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2374:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    2376:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    237a:	d034      	beq.n	23e6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    237c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    237e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    2382:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2386:	430b      	orrs	r3, r1
    2388:	f363 0241 	bfi	r2, r3, #1, #1
    238c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    2390:	e6fd      	b.n	218e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    2392:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2396:	2102      	movs	r1, #2
    2398:	f361 0302 	bfi	r3, r1, #0, #3
    239c:	e7e8      	b.n	2370 <z_cbvprintf_impl+0x324>
    239e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    23a2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    23a4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    23a8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    23ac:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    23ae:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    23b2:	bf02      	ittt	eq
    23b4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    23b8:	f041 0101 	orreq.w	r1, r1, #1
    23bc:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    23c0:	2b63      	cmp	r3, #99	; 0x63
    23c2:	d1db      	bne.n	237c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    23c4:	1e13      	subs	r3, r2, #0
    23c6:	bf18      	it	ne
    23c8:	2301      	movne	r3, #1
    23ca:	e7d8      	b.n	237e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    23cc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    23d0:	2103      	movs	r1, #3
    23d2:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    23d6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    23da:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    23de:	bf14      	ite	ne
    23e0:	2301      	movne	r3, #1
    23e2:	2300      	moveq	r3, #0
    23e4:	e7cb      	b.n	237e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    23e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    23ea:	f043 0301 	orr.w	r3, r3, #1
    23ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    23f2:	e7c3      	b.n	237c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    23f4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    23f8:	2a00      	cmp	r2, #0
			width = conv->width_value;
    23fa:	bfb4      	ite	lt
    23fc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    2400:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    2404:	e6d5      	b.n	21b2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    2406:	0798      	lsls	r0, r3, #30
    2408:	f57f aee2 	bpl.w	21d0 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    240c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    2410:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    2414:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2416:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    241a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    241e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2422:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2424:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2428:	d133      	bne.n	2492 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    242a:	1ecb      	subs	r3, r1, #3
    242c:	2b04      	cmp	r3, #4
    242e:	d804      	bhi.n	243a <z_cbvprintf_impl+0x3ee>
    2430:	e8df f003 	tbb	[pc, r3]
    2434:	21464621 	.word	0x21464621
    2438:	21          	.byte	0x21
    2439:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    243a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    243c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    243e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2442:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    2446:	d11c      	bne.n	2482 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    2448:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    244c:	17da      	asrs	r2, r3, #31
    244e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    2452:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2454:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2458:	f013 0603 	ands.w	r6, r3, #3
    245c:	d050      	beq.n	2500 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    245e:	9b03      	ldr	r3, [sp, #12]
    2460:	463a      	mov	r2, r7
    2462:	4659      	mov	r1, fp
    2464:	4648      	mov	r0, r9
    2466:	f009 fc68 	bl	bd3a <outs>
    246a:	2800      	cmp	r0, #0
    246c:	f2c0 8153 	blt.w	2716 <z_cbvprintf_impl+0x6ca>
    2470:	4405      	add	r5, r0
			continue;
    2472:	9f03      	ldr	r7, [sp, #12]
    2474:	e5f2      	b.n	205c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2476:	f854 3b04 	ldr.w	r3, [r4], #4
    247a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    247c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    2480:	e7e8      	b.n	2454 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    2482:	2902      	cmp	r1, #2
    2484:	d1e5      	bne.n	2452 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    2486:	b21a      	sxth	r2, r3
    2488:	f343 33c0 	sbfx	r3, r3, #15, #1
    248c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    2490:	e7df      	b.n	2452 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2492:	2b02      	cmp	r3, #2
    2494:	d124      	bne.n	24e0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    2496:	1ecb      	subs	r3, r1, #3
    2498:	2b04      	cmp	r3, #4
    249a:	d804      	bhi.n	24a6 <z_cbvprintf_impl+0x45a>
    249c:	e8df f003 	tbb	[pc, r3]
    24a0:	18101018 	.word	0x18101018
    24a4:	18          	.byte	0x18
    24a5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    24a6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    24a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    24ac:	f04f 0200 	mov.w	r2, #0
    24b0:	d014      	beq.n	24dc <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    24b2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    24b4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    24b8:	d1cc      	bne.n	2454 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    24ba:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    24bc:	930e      	str	r3, [sp, #56]	; 0x38
    24be:	e7c9      	b.n	2454 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    24c0:	3407      	adds	r4, #7
    24c2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    24c6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    24ca:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    24ce:	e7c1      	b.n	2454 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    24d0:	f854 3b04 	ldr.w	r3, [r4], #4
    24d4:	930e      	str	r3, [sp, #56]	; 0x38
    24d6:	2300      	movs	r3, #0
    24d8:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    24da:	e7bb      	b.n	2454 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    24dc:	b2db      	uxtb	r3, r3
    24de:	e7cd      	b.n	247c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    24e0:	2b04      	cmp	r3, #4
    24e2:	d108      	bne.n	24f6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    24e4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    24e6:	f024 0407 	bic.w	r4, r4, #7
    24ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    24ee:	3408      	adds	r4, #8
    24f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    24f4:	e7ae      	b.n	2454 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    24f6:	2b03      	cmp	r3, #3
    24f8:	d1ac      	bne.n	2454 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    24fa:	f854 3b04 	ldr.w	r3, [r4], #4
    24fe:	e7dd      	b.n	24bc <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    2500:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    2504:	2878      	cmp	r0, #120	; 0x78
    2506:	d8b4      	bhi.n	2472 <z_cbvprintf_impl+0x426>
    2508:	2862      	cmp	r0, #98	; 0x62
    250a:	d81c      	bhi.n	2546 <z_cbvprintf_impl+0x4fa>
    250c:	2825      	cmp	r0, #37	; 0x25
    250e:	f43f adad 	beq.w	206c <z_cbvprintf_impl+0x20>
    2512:	2858      	cmp	r0, #88	; 0x58
    2514:	d1ad      	bne.n	2472 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2516:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    251a:	9300      	str	r3, [sp, #0]
    251c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    2520:	ab08      	add	r3, sp, #32
    2522:	aa10      	add	r2, sp, #64	; 0x40
    2524:	f009 fbc3 	bl	bcae <encode_uint>
			if (precision >= 0) {
    2528:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    252c:	4607      	mov	r7, r0
			if (precision >= 0) {
    252e:	f280 809a 	bge.w	2666 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    2532:	2f00      	cmp	r7, #0
    2534:	d09d      	beq.n	2472 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    2536:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    253a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    253c:	2e00      	cmp	r6, #0
    253e:	f000 80c1 	beq.w	26c4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    2542:	3001      	adds	r0, #1
    2544:	e0be      	b.n	26c4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    2546:	3863      	subs	r0, #99	; 0x63
    2548:	2815      	cmp	r0, #21
    254a:	d892      	bhi.n	2472 <z_cbvprintf_impl+0x426>
    254c:	a201      	add	r2, pc, #4	; (adr r2, 2554 <z_cbvprintf_impl+0x508>)
    254e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2552:	bf00      	nop
    2554:	00002629 	.word	0x00002629
    2558:	0000263b 	.word	0x0000263b
    255c:	00002473 	.word	0x00002473
    2560:	00002473 	.word	0x00002473
    2564:	00002473 	.word	0x00002473
    2568:	00002473 	.word	0x00002473
    256c:	0000263b 	.word	0x0000263b
    2570:	00002473 	.word	0x00002473
    2574:	00002473 	.word	0x00002473
    2578:	00002473 	.word	0x00002473
    257c:	00002473 	.word	0x00002473
    2580:	000026c9 	.word	0x000026c9
    2584:	00002661 	.word	0x00002661
    2588:	00002687 	.word	0x00002687
    258c:	00002473 	.word	0x00002473
    2590:	00002473 	.word	0x00002473
    2594:	000025ad 	.word	0x000025ad
    2598:	00002473 	.word	0x00002473
    259c:	00002661 	.word	0x00002661
    25a0:	00002473 	.word	0x00002473
    25a4:	00002473 	.word	0x00002473
    25a8:	00002661 	.word	0x00002661
			if (precision >= 0) {
    25ac:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    25b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    25b2:	db35      	blt.n	2620 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    25b4:	4651      	mov	r1, sl
    25b6:	4638      	mov	r0, r7
    25b8:	f00a f911 	bl	c7de <strnlen>
			bpe = bps + len;
    25bc:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    25c0:	2f00      	cmp	r7, #0
    25c2:	f43f af56 	beq.w	2472 <z_cbvprintf_impl+0x426>
		char sign = 0;
    25c6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    25c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    25cc:	f013 0210 	ands.w	r2, r3, #16
    25d0:	9205      	str	r2, [sp, #20]
    25d2:	f000 8093 	beq.w	26fc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    25d6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    25d8:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    25da:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    25dc:	bf48      	it	mi
    25de:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    25e0:	9204      	str	r2, [sp, #16]
    25e2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    25e4:	bf48      	it	mi
    25e6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    25e8:	f1b8 0f00 	cmp.w	r8, #0
    25ec:	f340 80a0 	ble.w	2730 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    25f0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    25f4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    25f8:	f3c2 0380 	ubfx	r3, r2, #2, #1
    25fc:	0750      	lsls	r0, r2, #29
    25fe:	9306      	str	r3, [sp, #24]
    2600:	f100 8096 	bmi.w	2730 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    2604:	0651      	lsls	r1, r2, #25
    2606:	f140 8089 	bpl.w	271c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    260a:	b13e      	cbz	r6, 261c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    260c:	4659      	mov	r1, fp
    260e:	4630      	mov	r0, r6
    2610:	47c8      	blx	r9
    2612:	2800      	cmp	r0, #0
    2614:	db7f      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    2616:	9b06      	ldr	r3, [sp, #24]
    2618:	3501      	adds	r5, #1
    261a:	461e      	mov	r6, r3
					pad = '0';
    261c:	2230      	movs	r2, #48	; 0x30
    261e:	e07e      	b.n	271e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    2620:	4638      	mov	r0, r7
    2622:	f00a f8d5 	bl	c7d0 <strlen>
    2626:	e7c9      	b.n	25bc <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    262a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    262e:	2600      	movs	r6, #0
			bps = buf;
    2630:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    2632:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    2636:	2001      	movs	r0, #1
    2638:	e7c6      	b.n	25c8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    263a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    263c:	bf5c      	itt	pl
    263e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    2642:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    2644:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    2648:	bf48      	it	mi
    264a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    264c:	2b00      	cmp	r3, #0
    264e:	f6bf af62 	bge.w	2516 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    2652:	4252      	negs	r2, r2
    2654:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2658:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    265c:	262d      	movs	r6, #45	; 0x2d
    265e:	e75a      	b.n	2516 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    2660:	2600      	movs	r6, #0
    2662:	e758      	b.n	2516 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    2664:	2600      	movs	r6, #0
				conv->flag_zero = false;
    2666:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    266a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    266e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2670:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2674:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    2676:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    267a:	f67f af5a 	bls.w	2532 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    267e:	ebaa 0303 	sub.w	r3, sl, r3
    2682:	9311      	str	r3, [sp, #68]	; 0x44
    2684:	e755      	b.n	2532 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    2686:	980e      	ldr	r0, [sp, #56]	; 0x38
    2688:	b390      	cbz	r0, 26f0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    268a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    268e:	9300      	str	r3, [sp, #0]
    2690:	aa10      	add	r2, sp, #64	; 0x40
    2692:	ab08      	add	r3, sp, #32
    2694:	2100      	movs	r1, #0
    2696:	f009 fb0a 	bl	bcae <encode_uint>
				conv->altform_0c = true;
    269a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    269e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    26a2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    26a6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    26aa:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    26ae:	4607      	mov	r7, r0
				conv->altform_0c = true;
    26b0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    26b4:	dad6      	bge.n	2664 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    26b6:	2800      	cmp	r0, #0
    26b8:	f43f aedb 	beq.w	2472 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    26bc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    26c0:	1a18      	subs	r0, r3, r0
		char sign = 0;
    26c2:	2600      	movs	r6, #0
    26c4:	469a      	mov	sl, r3
    26c6:	e77f      	b.n	25c8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    26c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    26ca:	2907      	cmp	r1, #7
    26cc:	f63f aed1 	bhi.w	2472 <z_cbvprintf_impl+0x426>
    26d0:	e8df f001 	tbb	[pc, r1]
    26d4:	0c06040c 	.word	0x0c06040c
    26d8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    26dc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    26de:	e6c8      	b.n	2472 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    26e0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    26e2:	e6c6      	b.n	2472 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    26e4:	17ea      	asrs	r2, r5, #31
    26e6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    26ea:	e6c2      	b.n	2472 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    26ec:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    26ee:	e6c0      	b.n	2472 <z_cbvprintf_impl+0x426>
    26f0:	4f2e      	ldr	r7, [pc, #184]	; (27ac <z_cbvprintf_impl+0x760>)
		char sign = 0;
    26f2:	4606      	mov	r6, r0
			bpe = bps + 5;
    26f4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    26f8:	2005      	movs	r0, #5
    26fa:	e765      	b.n	25c8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    26fc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    26fe:	bf48      	it	mi
    2700:	3001      	addmi	r0, #1
    2702:	e769      	b.n	25d8 <z_cbvprintf_impl+0x58c>
    2704:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2706:	4610      	mov	r0, r2
    2708:	9206      	str	r2, [sp, #24]
    270a:	4659      	mov	r1, fp
    270c:	47c8      	blx	r9
    270e:	2800      	cmp	r0, #0
    2710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2714:	da04      	bge.n	2720 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    2716:	b015      	add	sp, #84	; 0x54
    2718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    271c:	2220      	movs	r2, #32
					pad = '0';
    271e:	4643      	mov	r3, r8
				while (width-- > 0) {
    2720:	4619      	mov	r1, r3
    2722:	2900      	cmp	r1, #0
    2724:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2728:	dcec      	bgt.n	2704 <z_cbvprintf_impl+0x6b8>
    272a:	4445      	add	r5, r8
    272c:	1a6d      	subs	r5, r5, r1
    272e:	4698      	mov	r8, r3
		if (sign != 0) {
    2730:	b12e      	cbz	r6, 273e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    2732:	4659      	mov	r1, fp
    2734:	4630      	mov	r0, r6
    2736:	47c8      	blx	r9
    2738:	2800      	cmp	r0, #0
    273a:	dbec      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    273c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    273e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2742:	06da      	lsls	r2, r3, #27
    2744:	d401      	bmi.n	274a <z_cbvprintf_impl+0x6fe>
    2746:	071b      	lsls	r3, r3, #28
    2748:	d505      	bpl.n	2756 <z_cbvprintf_impl+0x70a>
				OUTC('0');
    274a:	4659      	mov	r1, fp
    274c:	2030      	movs	r0, #48	; 0x30
    274e:	47c8      	blx	r9
    2750:	2800      	cmp	r0, #0
    2752:	dbe0      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    2754:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2756:	9b05      	ldr	r3, [sp, #20]
    2758:	b133      	cbz	r3, 2768 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    275a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    275e:	4659      	mov	r1, fp
    2760:	47c8      	blx	r9
    2762:	2800      	cmp	r0, #0
    2764:	dbd7      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    2766:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2768:	9e04      	ldr	r6, [sp, #16]
    276a:	442e      	add	r6, r5
    276c:	e005      	b.n	277a <z_cbvprintf_impl+0x72e>
				OUTC('0');
    276e:	4659      	mov	r1, fp
    2770:	2030      	movs	r0, #48	; 0x30
    2772:	47c8      	blx	r9
    2774:	2800      	cmp	r0, #0
    2776:	dbce      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    2778:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    277a:	1b73      	subs	r3, r6, r5
    277c:	2b00      	cmp	r3, #0
    277e:	dcf6      	bgt.n	276e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    2780:	4653      	mov	r3, sl
    2782:	463a      	mov	r2, r7
    2784:	4659      	mov	r1, fp
    2786:	4648      	mov	r0, r9
    2788:	f009 fad7 	bl	bd3a <outs>
    278c:	2800      	cmp	r0, #0
    278e:	dbc2      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    2790:	4405      	add	r5, r0
		while (width > 0) {
    2792:	44a8      	add	r8, r5
    2794:	eba8 0305 	sub.w	r3, r8, r5
    2798:	2b00      	cmp	r3, #0
    279a:	f77f ae6a 	ble.w	2472 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    279e:	4659      	mov	r1, fp
    27a0:	2020      	movs	r0, #32
    27a2:	47c8      	blx	r9
    27a4:	2800      	cmp	r0, #0
    27a6:	dbb6      	blt.n	2716 <z_cbvprintf_impl+0x6ca>
    27a8:	3501      	adds	r5, #1
			--width;
    27aa:	e7f3      	b.n	2794 <z_cbvprintf_impl+0x748>
    27ac:	0000e049 	.word	0x0000e049

000027b0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    27b0:	b508      	push	{r3, lr}
    27b2:	4604      	mov	r4, r0
	__asm__ volatile(
    27b4:	f04f 0220 	mov.w	r2, #32
    27b8:	f3ef 8311 	mrs	r3, BASEPRI
    27bc:	f382 8812 	msr	BASEPRI_MAX, r2
    27c0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    27c4:	f005 f924 	bl	7a10 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    27c8:	4620      	mov	r0, r4
    27ca:	f003 f815 	bl	57f8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    27ce:	4803      	ldr	r0, [pc, #12]	; (27dc <sys_reboot+0x2c>)
    27d0:	f008 ff4f 	bl	b672 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    27d4:	f002 f9c0 	bl	4b58 <arch_cpu_idle>
    27d8:	e7fc      	b.n	27d4 <sys_reboot+0x24>
    27da:	bf00      	nop
    27dc:	0000e04f 	.word	0x0000e04f

000027e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    27e0:	f005 b95e 	b.w	7aa0 <SystemInit>

000027e4 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    27e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    27e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2844 <activate_foreach_backend+0x60>
{
    27ec:	4604      	mov	r4, r0
	while (mask_cpy) {
    27ee:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    27f0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    27f4:	b914      	cbnz	r4, 27fc <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    27f6:	4638      	mov	r0, r7
    27f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    27fc:	fa94 f5a4 	rbit	r5, r4
    2800:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    2804:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2808:	012e      	lsls	r6, r5, #4
    280a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    280e:	ea6f 0a03 	mvn.w	sl, r3
    2812:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2816:	7b2b      	ldrb	r3, [r5, #12]
    2818:	2b00      	cmp	r3, #0
    281a:	d0eb      	beq.n	27f4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    281c:	f858 3006 	ldr.w	r3, [r8, r6]
    2820:	691b      	ldr	r3, [r3, #16]
    2822:	b94b      	cbnz	r3, 2838 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    2824:	4446      	add	r6, r8
			log_backend_enable(backend,
    2826:	2204      	movs	r2, #4
    2828:	6873      	ldr	r3, [r6, #4]
    282a:	4628      	mov	r0, r5
    282c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    282e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    2832:	f000 fa59 	bl	2ce8 <log_backend_enable>
    2836:	e7dd      	b.n	27f4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    2838:	4628      	mov	r0, r5
    283a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    283c:	2800      	cmp	r0, #0
    283e:	d1d9      	bne.n	27f4 <activate_foreach_backend+0x10>
    2840:	e7f0      	b.n	2824 <activate_foreach_backend+0x40>
    2842:	bf00      	nop
    2844:	0000da4c 	.word	0x0000da4c

00002848 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    2848:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    284a:	4910      	ldr	r1, [pc, #64]	; (288c <enable_logger+0x44>)
    284c:	4810      	ldr	r0, [pc, #64]	; (2890 <enable_logger+0x48>)
{
    284e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2850:	2200      	movs	r2, #0
    2852:	f00a fe66 	bl	d522 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2856:	4d0f      	ldr	r5, [pc, #60]	; (2894 <enable_logger+0x4c>)
    2858:	490f      	ldr	r1, [pc, #60]	; (2898 <enable_logger+0x50>)
    285a:	2200      	movs	r2, #0
    285c:	2300      	movs	r3, #0
    285e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2862:	2400      	movs	r4, #0
    2864:	230e      	movs	r3, #14
    2866:	e9cd 3403 	strd	r3, r4, [sp, #12]
    286a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    286e:	4b0b      	ldr	r3, [pc, #44]	; (289c <enable_logger+0x54>)
    2870:	9400      	str	r4, [sp, #0]
    2872:	f44f 7240 	mov.w	r2, #768	; 0x300
    2876:	4628      	mov	r0, r5
    2878:	f007 fbb0 	bl	9fdc <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    287c:	4908      	ldr	r1, [pc, #32]	; (28a0 <enable_logger+0x58>)
    287e:	4628      	mov	r0, r5
    2880:	f00a fbda 	bl	d038 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2884:	4620      	mov	r0, r4
    2886:	b009      	add	sp, #36	; 0x24
    2888:	bd30      	pop	{r4, r5, pc}
    288a:	bf00      	nop
    288c:	000028a5 	.word	0x000028a5
    2890:	200008d8 	.word	0x200008d8
    2894:	20000450 	.word	0x20000450
    2898:	20002200 	.word	0x20002200
    289c:	00002b95 	.word	0x00002b95
    28a0:	0000e078 	.word	0x0000e078

000028a4 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    28a4:	4801      	ldr	r0, [pc, #4]	; (28ac <log_process_thread_timer_expiry_fn+0x8>)
    28a6:	f007 bd27 	b.w	a2f8 <z_impl_k_sem_give>
    28aa:	bf00      	nop
    28ac:	20000318 	.word	0x20000318

000028b0 <z_log_init>:
{
    28b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    28b4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    28b6:	481f      	ldr	r0, [pc, #124]	; (2934 <z_log_init+0x84>)
{
    28b8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    28ba:	f009 fd66 	bl	c38a <atomic_inc>
    28be:	4606      	mov	r6, r0
    28c0:	2800      	cmp	r0, #0
    28c2:	d030      	beq.n	2926 <z_log_init+0x76>
	uint32_t mask = 0;
    28c4:	2500      	movs	r5, #0
}
    28c6:	4628      	mov	r0, r5
    28c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    28cc:	7b23      	ldrb	r3, [r4, #12]
    28ce:	b173      	cbz	r3, 28ee <z_log_init+0x3e>
	if (backend->api->init) {
    28d0:	6823      	ldr	r3, [r4, #0]
    28d2:	68db      	ldr	r3, [r3, #12]
    28d4:	b10b      	cbz	r3, 28da <z_log_init+0x2a>
		backend->api->init(backend);
    28d6:	4620      	mov	r0, r4
    28d8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    28da:	6823      	ldr	r3, [r4, #0]
    28dc:	691b      	ldr	r3, [r3, #16]
    28de:	b9d3      	cbnz	r3, 2916 <z_log_init+0x66>
				log_backend_enable(backend,
    28e0:	6863      	ldr	r3, [r4, #4]
    28e2:	2204      	movs	r2, #4
    28e4:	6819      	ldr	r1, [r3, #0]
    28e6:	4620      	mov	r0, r4
    28e8:	f000 f9fe 	bl	2ce8 <log_backend_enable>
			i++;
    28ec:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    28ee:	3410      	adds	r4, #16
    28f0:	454c      	cmp	r4, r9
    28f2:	d3eb      	bcc.n	28cc <z_log_init+0x1c>
	if (blocking) {
    28f4:	f1b8 0f00 	cmp.w	r8, #0
    28f8:	d0e5      	beq.n	28c6 <z_log_init+0x16>
		while (mask) {
    28fa:	2d00      	cmp	r5, #0
    28fc:	d0e2      	beq.n	28c4 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    28fe:	4628      	mov	r0, r5
    2900:	f7ff ff70 	bl	27e4 <activate_foreach_backend>
    2904:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    2906:	2f00      	cmp	r7, #0
    2908:	d0f7      	beq.n	28fa <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    290a:	2100      	movs	r1, #0
    290c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2910:	f008 f95a 	bl	abc8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2914:	e7f1      	b.n	28fa <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    2916:	4620      	mov	r0, r4
    2918:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    291a:	2800      	cmp	r0, #0
    291c:	d0e0      	beq.n	28e0 <z_log_init+0x30>
				mask |= BIT(i);
    291e:	fa0a f306 	lsl.w	r3, sl, r6
    2922:	431d      	orrs	r5, r3
    2924:	e7e2      	b.n	28ec <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2926:	4c04      	ldr	r4, [pc, #16]	; (2938 <z_log_init+0x88>)
    2928:	f8df 9010 	ldr.w	r9, [pc, #16]	; 293c <z_log_init+0x8c>
	uint32_t mask = 0;
    292c:	4605      	mov	r5, r0
				mask |= BIT(i);
    292e:	f04f 0a01 	mov.w	sl, #1
    2932:	e7dd      	b.n	28f0 <z_log_init+0x40>
    2934:	20000c68 	.word	0x20000c68
    2938:	0000da4c 	.word	0x0000da4c
    293c:	0000da5c 	.word	0x0000da5c

00002940 <log_format_func_t_get>:
}
    2940:	4b01      	ldr	r3, [pc, #4]	; (2948 <log_format_func_t_get+0x8>)
    2942:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2946:	4770      	bx	lr
    2948:	0000daa0 	.word	0x0000daa0

0000294c <log_set_timestamp_func>:
{
    294c:	b508      	push	{r3, lr}
    294e:	4603      	mov	r3, r0
    2950:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    2952:	b12b      	cbz	r3, 2960 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    2954:	4a04      	ldr	r2, [pc, #16]	; (2968 <log_set_timestamp_func+0x1c>)
    2956:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    2958:	f000 fc78 	bl	324c <log_output_timestamp_freq_set>
	return 0;
    295c:	2000      	movs	r0, #0
}
    295e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    2960:	f06f 0015 	mvn.w	r0, #21
    2964:	e7fb      	b.n	295e <log_set_timestamp_func+0x12>
    2966:	bf00      	nop
    2968:	200000b4 	.word	0x200000b4

0000296c <z_log_notify_backend_enabled>:
{
    296c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    296e:	4c04      	ldr	r4, [pc, #16]	; (2980 <z_log_notify_backend_enabled+0x14>)
    2970:	7823      	ldrb	r3, [r4, #0]
    2972:	b913      	cbnz	r3, 297a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2974:	4803      	ldr	r0, [pc, #12]	; (2984 <z_log_notify_backend_enabled+0x18>)
    2976:	f007 fcbf 	bl	a2f8 <z_impl_k_sem_give>
	backend_attached = true;
    297a:	2301      	movs	r3, #1
    297c:	7023      	strb	r3, [r4, #0]
}
    297e:	bd10      	pop	{r4, pc}
    2980:	200021bb 	.word	0x200021bb
    2984:	20000318 	.word	0x20000318

00002988 <z_log_dropped>:
{
    2988:	b510      	push	{r4, lr}
    298a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    298c:	4808      	ldr	r0, [pc, #32]	; (29b0 <z_log_dropped+0x28>)
    298e:	f009 fcfc 	bl	c38a <atomic_inc>
	if (buffered) {
    2992:	b15c      	cbz	r4, 29ac <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2994:	f3bf 8f5b 	dmb	ish
    2998:	4b06      	ldr	r3, [pc, #24]	; (29b4 <z_log_dropped+0x2c>)
    299a:	e853 1f00 	ldrex	r1, [r3]
    299e:	3901      	subs	r1, #1
    29a0:	e843 1200 	strex	r2, r1, [r3]
    29a4:	2a00      	cmp	r2, #0
    29a6:	d1f8      	bne.n	299a <z_log_dropped+0x12>
    29a8:	f3bf 8f5b 	dmb	ish
}
    29ac:	bd10      	pop	{r4, pc}
    29ae:	bf00      	nop
    29b0:	20000c60 	.word	0x20000c60
    29b4:	20000c64 	.word	0x20000c64

000029b8 <z_log_dropped_read_and_clear>:
}
    29b8:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    29ba:	4b06      	ldr	r3, [pc, #24]	; (29d4 <z_log_dropped_read_and_clear+0x1c>)
    29bc:	f3bf 8f5b 	dmb	ish
    29c0:	4601      	mov	r1, r0
    29c2:	e853 0f00 	ldrex	r0, [r3]
    29c6:	e843 1200 	strex	r2, r1, [r3]
    29ca:	2a00      	cmp	r2, #0
    29cc:	d1f9      	bne.n	29c2 <z_log_dropped_read_and_clear+0xa>
    29ce:	f3bf 8f5b 	dmb	ish
    29d2:	4770      	bx	lr
    29d4:	20000c60 	.word	0x20000c60

000029d8 <dropped_notify>:
{
    29d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    29da:	f7ff ffed 	bl	29b8 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    29de:	4c08      	ldr	r4, [pc, #32]	; (2a00 <dropped_notify+0x28>)
    29e0:	4e08      	ldr	r6, [pc, #32]	; (2a04 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    29e2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    29e4:	42b4      	cmp	r4, r6
    29e6:	d300      	bcc.n	29ea <dropped_notify+0x12>
}
    29e8:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    29ea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    29ec:	795b      	ldrb	r3, [r3, #5]
    29ee:	b12b      	cbz	r3, 29fc <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    29f0:	6823      	ldr	r3, [r4, #0]
    29f2:	685b      	ldr	r3, [r3, #4]
    29f4:	b113      	cbz	r3, 29fc <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    29f6:	4629      	mov	r1, r5
    29f8:	4620      	mov	r0, r4
    29fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    29fc:	3410      	adds	r4, #16
    29fe:	e7f1      	b.n	29e4 <dropped_notify+0xc>
    2a00:	0000da4c 	.word	0x0000da4c
    2a04:	0000da5c 	.word	0x0000da5c

00002a08 <z_log_msg_init>:
{
    2a08:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2a0a:	4c04      	ldr	r4, [pc, #16]	; (2a1c <z_log_msg_init+0x14>)
    2a0c:	4904      	ldr	r1, [pc, #16]	; (2a20 <z_log_msg_init+0x18>)
    2a0e:	4620      	mov	r0, r4
    2a10:	f009 fb4c 	bl	c0ac <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2a14:	4b03      	ldr	r3, [pc, #12]	; (2a24 <z_log_msg_init+0x1c>)
    2a16:	601c      	str	r4, [r3, #0]
}
    2a18:	bd10      	pop	{r4, pc}
    2a1a:	bf00      	nop
    2a1c:	2000025c 	.word	0x2000025c
    2a20:	0000da8c 	.word	0x0000da8c
    2a24:	20000c58 	.word	0x20000c58

00002a28 <log_core_init>:
	panic_mode = false;
    2a28:	4a08      	ldr	r2, [pc, #32]	; (2a4c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    2a2a:	4809      	ldr	r0, [pc, #36]	; (2a50 <log_core_init+0x28>)
{
    2a2c:	b508      	push	{r3, lr}
	panic_mode = false;
    2a2e:	2300      	movs	r3, #0
    2a30:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2a32:	4a08      	ldr	r2, [pc, #32]	; (2a54 <log_core_init+0x2c>)
    2a34:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    2a36:	4a08      	ldr	r2, [pc, #32]	; (2a58 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    2a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2a3c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2a3e:	f7ff ff85 	bl	294c <log_set_timestamp_func>
}
    2a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    2a46:	f7ff bfdf 	b.w	2a08 <z_log_msg_init>
    2a4a:	bf00      	nop
    2a4c:	200021bc 	.word	0x200021bc
    2a50:	0000c387 	.word	0x0000c387
    2a54:	20000c60 	.word	0x20000c60
    2a58:	20000c64 	.word	0x20000c64

00002a5c <z_log_msg_alloc>:
{
    2a5c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2a5e:	2200      	movs	r2, #0
    2a60:	4801      	ldr	r0, [pc, #4]	; (2a68 <z_log_msg_alloc+0xc>)
    2a62:	2300      	movs	r3, #0
    2a64:	f009 bb43 	b.w	c0ee <mpsc_pbuf_alloc>
    2a68:	2000025c 	.word	0x2000025c

00002a6c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2a6c:	4801      	ldr	r0, [pc, #4]	; (2a74 <z_log_msg_local_claim+0x8>)
    2a6e:	f009 bbdc 	b.w	c22a <mpsc_pbuf_claim>
    2a72:	bf00      	nop
    2a74:	2000025c 	.word	0x2000025c

00002a78 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    2a78:	4b02      	ldr	r3, [pc, #8]	; (2a84 <z_log_msg_free+0xc>)
{
    2a7a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2a7c:	6818      	ldr	r0, [r3, #0]
    2a7e:	f009 bc26 	b.w	c2ce <mpsc_pbuf_free>
    2a82:	bf00      	nop
    2a84:	20000c58 	.word	0x20000c58

00002a88 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    2a88:	4801      	ldr	r0, [pc, #4]	; (2a90 <z_log_msg_pending+0x8>)
    2a8a:	f009 bc5c 	b.w	c346 <mpsc_pbuf_is_pending>
    2a8e:	bf00      	nop
    2a90:	2000025c 	.word	0x2000025c

00002a94 <z_impl_log_process>:
{
    2a94:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    2a96:	4b28      	ldr	r3, [pc, #160]	; (2b38 <z_impl_log_process+0xa4>)
    2a98:	7818      	ldrb	r0, [r3, #0]
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d04b      	beq.n	2b36 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    2a9e:	f7ff ffe5 	bl	2a6c <z_log_msg_local_claim>
	if (msg) {
    2aa2:	4605      	mov	r5, r0
    2aa4:	b190      	cbz	r0, 2acc <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2aa6:	f3bf 8f5b 	dmb	ish
    2aaa:	4b24      	ldr	r3, [pc, #144]	; (2b3c <z_impl_log_process+0xa8>)
    2aac:	e853 1f00 	ldrex	r1, [r3]
    2ab0:	3901      	subs	r1, #1
    2ab2:	e843 1200 	strex	r2, r1, [r3]
    2ab6:	2a00      	cmp	r2, #0
    2ab8:	d1f8      	bne.n	2aac <z_impl_log_process+0x18>
    2aba:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2abe:	4c20      	ldr	r4, [pc, #128]	; (2b40 <z_impl_log_process+0xac>)
    2ac0:	4e20      	ldr	r6, [pc, #128]	; (2b44 <z_impl_log_process+0xb0>)
    2ac2:	42b4      	cmp	r4, r6
    2ac4:	d32d      	bcc.n	2b22 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    2ac6:	4628      	mov	r0, r5
    2ac8:	f7ff ffd6 	bl	2a78 <z_log_msg_free>
	return dropped_cnt > 0;
    2acc:	4b1e      	ldr	r3, [pc, #120]	; (2b48 <z_impl_log_process+0xb4>)
    2ace:	4c1f      	ldr	r4, [pc, #124]	; (2b4c <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    2ad0:	681b      	ldr	r3, [r3, #0]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	dd19      	ble.n	2b0a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    2ad6:	f00a fcfc 	bl	d4d2 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ade:	fba0 0302 	umull	r0, r3, r0, r2
    2ae2:	fb02 3101 	mla	r1, r2, r1, r3
    2ae6:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2ae8:	e9d4 2000 	ldrd	r2, r0, [r4]
    2aec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    2af0:	1a9b      	subs	r3, r3, r2
    2af2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    2af6:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2afa:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    2afe:	4293      	cmp	r3, r2
    2b00:	f171 0100 	sbcs.w	r1, r1, #0
    2b04:	d301      	bcc.n	2b0a <z_impl_log_process+0x76>
				dropped_notify();
    2b06:	f7ff ff67 	bl	29d8 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    2b0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    2b0e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    2b12:	f142 0200 	adc.w	r2, r2, #0
    2b16:	e9c4 3200 	strd	r3, r2, [r4]
}
    2b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    2b1e:	f7ff bfb3 	b.w	2a88 <z_log_msg_pending>
	return backend->cb->active;
    2b22:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    2b24:	795b      	ldrb	r3, [r3, #5]
    2b26:	b123      	cbz	r3, 2b32 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    2b28:	6823      	ldr	r3, [r4, #0]
    2b2a:	4629      	mov	r1, r5
    2b2c:	681b      	ldr	r3, [r3, #0]
    2b2e:	4620      	mov	r0, r4
    2b30:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b32:	3410      	adds	r4, #16
    2b34:	e7c5      	b.n	2ac2 <z_impl_log_process+0x2e>
}
    2b36:	bd70      	pop	{r4, r5, r6, pc}
    2b38:	200021bb 	.word	0x200021bb
    2b3c:	20000c64 	.word	0x20000c64
    2b40:	0000da4c 	.word	0x0000da4c
    2b44:	0000da5c 	.word	0x0000da5c
    2b48:	20000c60 	.word	0x20000c60
    2b4c:	200008d0 	.word	0x200008d0

00002b50 <z_impl_log_panic>:
{
    2b50:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    2b52:	4d0d      	ldr	r5, [pc, #52]	; (2b88 <z_impl_log_panic+0x38>)
    2b54:	7829      	ldrb	r1, [r5, #0]
    2b56:	b961      	cbnz	r1, 2b72 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    2b58:	2001      	movs	r0, #1
    2b5a:	f7ff fea9 	bl	28b0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b5e:	4c0b      	ldr	r4, [pc, #44]	; (2b8c <z_impl_log_panic+0x3c>)
    2b60:	4e0b      	ldr	r6, [pc, #44]	; (2b90 <z_impl_log_panic+0x40>)
    2b62:	42b4      	cmp	r4, r6
    2b64:	d306      	bcc.n	2b74 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    2b66:	f7ff ff95 	bl	2a94 <z_impl_log_process>
		while (log_process() == true) {
    2b6a:	2800      	cmp	r0, #0
    2b6c:	d1fb      	bne.n	2b66 <z_impl_log_panic+0x16>
	panic_mode = true;
    2b6e:	2301      	movs	r3, #1
    2b70:	702b      	strb	r3, [r5, #0]
}
    2b72:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2b74:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2b76:	795b      	ldrb	r3, [r3, #5]
    2b78:	b11b      	cbz	r3, 2b82 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    2b7a:	6823      	ldr	r3, [r4, #0]
    2b7c:	4620      	mov	r0, r4
    2b7e:	689b      	ldr	r3, [r3, #8]
    2b80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b82:	3410      	adds	r4, #16
    2b84:	e7ed      	b.n	2b62 <z_impl_log_panic+0x12>
    2b86:	bf00      	nop
    2b88:	200021bc 	.word	0x200021bc
    2b8c:	0000da4c 	.word	0x0000da4c
    2b90:	0000da5c 	.word	0x0000da5c

00002b94 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2b94:	2100      	movs	r1, #0
{
    2b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    2b9a:	4608      	mov	r0, r1
    2b9c:	f7ff fe88 	bl	28b0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2ba0:	4604      	mov	r4, r0
    2ba2:	b348      	cbz	r0, 2bf8 <log_process_thread_func+0x64>
    2ba4:	f240 6867 	movw	r8, #1639	; 0x667
    2ba8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2bac:	f008 f840 	bl	ac30 <z_impl_z_current_get>
	proc_tid = process_tid;
    2bb0:	4b1a      	ldr	r3, [pc, #104]	; (2c1c <log_process_thread_func+0x88>)
    2bb2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2bb4:	b130      	cbz	r0, 2bc4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2bb6:	4b1a      	ldr	r3, [pc, #104]	; (2c20 <log_process_thread_func+0x8c>)
	    process_tid &&
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	2b09      	cmp	r3, #9
    2bbc:	dd02      	ble.n	2bc4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    2bbe:	4819      	ldr	r0, [pc, #100]	; (2c24 <log_process_thread_func+0x90>)
    2bc0:	f007 fb9a 	bl	a2f8 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2bc4:	4f18      	ldr	r7, [pc, #96]	; (2c28 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    2bc6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2c24 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2bca:	2500      	movs	r5, #0
		if (activate_mask) {
    2bcc:	b144      	cbz	r4, 2be0 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    2bce:	4620      	mov	r0, r4
    2bd0:	f7ff fe08 	bl	27e4 <activate_foreach_backend>
			if (!activate_mask) {
    2bd4:	4604      	mov	r4, r0
    2bd6:	b918      	cbnz	r0, 2be0 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    2bd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2bdc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2be0:	f7ff ff58 	bl	2a94 <z_impl_log_process>
		if (log_process() == false) {
    2be4:	4606      	mov	r6, r0
    2be6:	b928      	cbnz	r0, 2bf4 <log_process_thread_func+0x60>
			if (processed_any) {
    2be8:	b9b5      	cbnz	r5, 2c18 <log_process_thread_func+0x84>
    2bea:	4642      	mov	r2, r8
    2bec:	464b      	mov	r3, r9
    2bee:	4650      	mov	r0, sl
    2bf0:	f007 fba2 	bl	a338 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2bf4:	4635      	mov	r5, r6
    2bf6:	e7e9      	b.n	2bcc <log_process_thread_func+0x38>
    2bf8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2bfc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2c00:	e7d4      	b.n	2bac <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    2c02:	682b      	ldr	r3, [r5, #0]
    2c04:	699b      	ldr	r3, [r3, #24]
    2c06:	b11b      	cbz	r3, 2c10 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    2c08:	2200      	movs	r2, #0
    2c0a:	4611      	mov	r1, r2
    2c0c:	4628      	mov	r0, r5
    2c0e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2c10:	3510      	adds	r5, #16
    2c12:	42bd      	cmp	r5, r7
    2c14:	d3f5      	bcc.n	2c02 <log_process_thread_func+0x6e>
    2c16:	e7e8      	b.n	2bea <log_process_thread_func+0x56>
    2c18:	4d04      	ldr	r5, [pc, #16]	; (2c2c <log_process_thread_func+0x98>)
    2c1a:	e7fa      	b.n	2c12 <log_process_thread_func+0x7e>
    2c1c:	20000c5c 	.word	0x20000c5c
    2c20:	20000c64 	.word	0x20000c64
    2c24:	20000318 	.word	0x20000318
    2c28:	0000da5c 	.word	0x0000da5c
    2c2c:	0000da4c 	.word	0x0000da4c

00002c30 <z_log_msg_post_finalize>:
{
    2c30:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    2c32:	4818      	ldr	r0, [pc, #96]	; (2c94 <z_log_msg_post_finalize+0x64>)
    2c34:	f009 fba9 	bl	c38a <atomic_inc>
	if (panic_mode) {
    2c38:	4b17      	ldr	r3, [pc, #92]	; (2c98 <z_log_msg_post_finalize+0x68>)
    2c3a:	781b      	ldrb	r3, [r3, #0]
    2c3c:	b17b      	cbz	r3, 2c5e <z_log_msg_post_finalize+0x2e>
    2c3e:	f04f 0320 	mov.w	r3, #32
    2c42:	f3ef 8411 	mrs	r4, BASEPRI
    2c46:	f383 8812 	msr	BASEPRI_MAX, r3
    2c4a:	f3bf 8f6f 	isb	sy
    2c4e:	f7ff ff21 	bl	2a94 <z_impl_log_process>
	__asm__ volatile(
    2c52:	f384 8811 	msr	BASEPRI, r4
    2c56:	f3bf 8f6f 	isb	sy
}
    2c5a:	b002      	add	sp, #8
    2c5c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2c5e:	4b0f      	ldr	r3, [pc, #60]	; (2c9c <z_log_msg_post_finalize+0x6c>)
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	2b00      	cmp	r3, #0
    2c64:	d0f9      	beq.n	2c5a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    2c66:	b950      	cbnz	r0, 2c7e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2c68:	2200      	movs	r2, #0
    2c6a:	2300      	movs	r3, #0
    2c6c:	e9cd 2300 	strd	r2, r3, [sp]
    2c70:	480b      	ldr	r0, [pc, #44]	; (2ca0 <z_log_msg_post_finalize+0x70>)
    2c72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2c76:	2300      	movs	r3, #0
    2c78:	f008 fa1e 	bl	b0b8 <z_impl_k_timer_start>
    2c7c:	e7ed      	b.n	2c5a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2c7e:	280a      	cmp	r0, #10
    2c80:	d1eb      	bne.n	2c5a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    2c82:	4807      	ldr	r0, [pc, #28]	; (2ca0 <z_log_msg_post_finalize+0x70>)
    2c84:	f00a fc59 	bl	d53a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2c88:	4806      	ldr	r0, [pc, #24]	; (2ca4 <z_log_msg_post_finalize+0x74>)
}
    2c8a:	b002      	add	sp, #8
    2c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c90:	f007 bb32 	b.w	a2f8 <z_impl_k_sem_give>
    2c94:	20000c64 	.word	0x20000c64
    2c98:	200021bc 	.word	0x200021bc
    2c9c:	20000c5c 	.word	0x20000c5c
    2ca0:	200008d8 	.word	0x200008d8
    2ca4:	20000318 	.word	0x20000318

00002ca8 <z_log_msg_commit>:
{
    2ca8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2caa:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <z_log_msg_commit+0x1c>)
    2cac:	681b      	ldr	r3, [r3, #0]
{
    2cae:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2cb0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    2cb2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    2cb4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    2cb6:	4804      	ldr	r0, [pc, #16]	; (2cc8 <z_log_msg_commit+0x20>)
    2cb8:	f009 fa97 	bl	c1ea <mpsc_pbuf_commit>
}
    2cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2cc0:	f7ff bfb6 	b.w	2c30 <z_log_msg_post_finalize>
    2cc4:	200000b4 	.word	0x200000b4
    2cc8:	2000025c 	.word	0x2000025c

00002ccc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2ccc:	4a04      	ldr	r2, [pc, #16]	; (2ce0 <log_source_name_get+0x14>)
    2cce:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <log_source_name_get+0x18>)
    2cd0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    2cd2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    2cd6:	bf34      	ite	cc
    2cd8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    2cdc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    2cde:	4770      	bx	lr
    2ce0:	0000d98c 	.word	0x0000d98c
    2ce4:	0000da4c 	.word	0x0000da4c

00002ce8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2ce8:	4b08      	ldr	r3, [pc, #32]	; (2d0c <log_backend_enable+0x24>)
    2cea:	1ac3      	subs	r3, r0, r3
{
    2cec:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2cee:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    2cf0:	6844      	ldr	r4, [r0, #4]
    2cf2:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    2cf4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    2cf6:	6843      	ldr	r3, [r0, #4]
    2cf8:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2cfa:	6843      	ldr	r3, [r0, #4]
    2cfc:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2cfe:	6843      	ldr	r3, [r0, #4]
    2d00:	2201      	movs	r2, #1
    2d02:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2d04:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    2d06:	f7ff be31 	b.w	296c <z_log_notify_backend_enabled>
    2d0a:	bf00      	nop
    2d0c:	0000da4c 	.word	0x0000da4c

00002d10 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d14:	b08f      	sub	sp, #60	; 0x3c
    2d16:	af04      	add	r7, sp, #16
    2d18:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2d1c:	60b8      	str	r0, [r7, #8]
    2d1e:	460d      	mov	r5, r1
    2d20:	4691      	mov	r9, r2
    2d22:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    2d24:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    2d26:	f1b8 0f00 	cmp.w	r8, #0
    2d2a:	d063      	beq.n	2df4 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    2d2c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    2d2e:	f107 0314 	add.w	r3, r7, #20
    2d32:	f04f 0b04 	mov.w	fp, #4
    2d36:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2d3a:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    2d3e:	e9c7 6607 	strd	r6, r6, [r7, #28]
    2d42:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    2d44:	9301      	str	r3, [sp, #4]
    2d46:	f8cd b008 	str.w	fp, [sp, #8]
    2d4a:	f8cd a000 	str.w	sl, [sp]
    2d4e:	f107 031c 	add.w	r3, r7, #28
    2d52:	68f9      	ldr	r1, [r7, #12]
    2d54:	4632      	mov	r2, r6
    2d56:	4648      	mov	r0, r9
    2d58:	f7fe fe70 	bl	1a3c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2d5c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2d60:	4603      	mov	r3, r0
    2d62:	d31c      	bcc.n	2d9e <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2d64:	466c      	mov	r4, sp
    2d66:	b08a      	sub	sp, #40	; 0x28
    2d68:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2d6c:	ab04      	add	r3, sp, #16
    2d6e:	4826      	ldr	r0, [pc, #152]	; (2e08 <z_impl_z_log_msg_static_create+0xf8>)
    2d70:	e9c3 0105 	strd	r0, r1, [r3, #20]
    2d74:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2d78:	61d9      	str	r1, [r3, #28]
    2d7a:	461a      	mov	r2, r3
    2d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
    2d80:	8419      	strh	r1, [r3, #32]
    2d82:	4b22      	ldr	r3, [pc, #136]	; (2e0c <z_impl_z_log_msg_static_create+0xfc>)
    2d84:	f842 3f10 	str.w	r3, [r2, #16]!
    2d88:	4821      	ldr	r0, [pc, #132]	; (2e10 <z_impl_z_log_msg_static_create+0x100>)
    2d8a:	4633      	mov	r3, r6
    2d8c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    2d90:	f7ff ffbe 	bl	2d10 <z_impl_z_log_msg_static_create>
    2d94:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    2d96:	372c      	adds	r7, #44	; 0x2c
    2d98:	46bd      	mov	sp, r7
    2d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    2d9e:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    2da2:	f104 0017 	add.w	r0, r4, #23
    2da6:	4418      	add	r0, r3
    2da8:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2dac:	0880      	lsrs	r0, r0, #2
    2dae:	603b      	str	r3, [r7, #0]
    2db0:	f7ff fe54 	bl	2a5c <z_log_msg_alloc>
    2db4:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    2db8:	4604      	mov	r4, r0
    2dba:	b190      	cbz	r0, 2de2 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    2dbc:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    2dbe:	4a15      	ldr	r2, [pc, #84]	; (2e14 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    2dc0:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    2dc4:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    2dc8:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    2dcc:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    2dce:	e9cd a300 	strd	sl, r3, [sp]
    2dd2:	f8cd b008 	str.w	fp, [sp, #8]
    2dd6:	68f9      	ldr	r1, [r7, #12]
    2dd8:	f107 031c 	add.w	r3, r7, #28
    2ddc:	4648      	mov	r0, r9
    2dde:	f7fe fe2d 	bl	1a3c <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    2de2:	f368 2553 	bfi	r5, r8, #9, #11
    2de6:	687b      	ldr	r3, [r7, #4]
    2de8:	68b9      	ldr	r1, [r7, #8]
    2dea:	462a      	mov	r2, r5
    2dec:	4620      	mov	r0, r4
    2dee:	f009 fb02 	bl	c3f6 <z_log_msg_finalize>
    2df2:	e7d0      	b.n	2d96 <z_impl_z_log_msg_static_create+0x86>
    2df4:	f104 0017 	add.w	r0, r4, #23
    2df8:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2dfc:	0880      	lsrs	r0, r0, #2
    2dfe:	f7ff fe2d 	bl	2a5c <z_log_msg_alloc>
    2e02:	4604      	mov	r4, r0
    2e04:	e7ed      	b.n	2de2 <z_impl_z_log_msg_static_create+0xd2>
    2e06:	bf00      	nop
    2e08:	0000e08d 	.word	0x0000e08d
    2e0c:	01000004 	.word	0x01000004
    2e10:	0000d9dc 	.word	0x0000d9dc
    2e14:	0000c3cb 	.word	0x0000c3cb

00002e18 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e1c:	b087      	sub	sp, #28
    2e1e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    2e22:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    2e26:	4604      	mov	r4, r0
    2e28:	460f      	mov	r7, r1
    2e2a:	4693      	mov	fp, r2
    2e2c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2e2e:	b3a6      	cbz	r6, 2e9a <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2e30:	2110      	movs	r1, #16
    2e32:	f8cd 9000 	str.w	r9, [sp]
    2e36:	4633      	mov	r3, r6
    2e38:	4652      	mov	r2, sl
    2e3a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2e3c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2e40:	f7fe fc26 	bl	1690 <cbvprintf_package>
    2e44:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2e46:	f105 0017 	add.w	r0, r5, #23
    2e4a:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2e4c:	4b14      	ldr	r3, [pc, #80]	; (2ea0 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2e4e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    2e50:	f004 0407 	and.w	r4, r4, #7
    2e54:	f00b 0b07 	and.w	fp, fp, #7
    2e58:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2e5a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2e5e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    2e62:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    2e66:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2e68:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2e6a:	f7ff fdf7 	bl	2a5c <z_log_msg_alloc>
	struct log_msg_desc desc =
    2e6e:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    2e72:	4605      	mov	r5, r0
    2e74:	b140      	cbz	r0, 2e88 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2e76:	b13e      	cbz	r6, 2e88 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2e78:	9903      	ldr	r1, [sp, #12]
    2e7a:	f8cd 9000 	str.w	r9, [sp]
    2e7e:	4633      	mov	r3, r6
    2e80:	4652      	mov	r2, sl
    2e82:	3010      	adds	r0, #16
    2e84:	f7fe fc04 	bl	1690 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2e88:	4643      	mov	r3, r8
    2e8a:	4622      	mov	r2, r4
    2e8c:	4639      	mov	r1, r7
    2e8e:	4628      	mov	r0, r5
	}
}
    2e90:	b007      	add	sp, #28
    2e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    2e96:	f009 baae 	b.w	c3f6 <z_log_msg_finalize>
		plen = 0;
    2e9a:	4631      	mov	r1, r6
    2e9c:	e7d3      	b.n	2e46 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    2e9e:	bf00      	nop
    2ea0:	000ffe00 	.word	0x000ffe00

00002ea4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2ea4:	b40e      	push	{r1, r2, r3}
    2ea6:	b503      	push	{r0, r1, lr}
    2ea8:	ab03      	add	r3, sp, #12
    2eaa:	4601      	mov	r1, r0
    2eac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2eb0:	4804      	ldr	r0, [pc, #16]	; (2ec4 <print_formatted+0x20>)
	va_start(args, fmt);
    2eb2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2eb4:	f009 fac5 	bl	c442 <cbvprintf>
	va_end(args);

	return length;
}
    2eb8:	b002      	add	sp, #8
    2eba:	f85d eb04 	ldr.w	lr, [sp], #4
    2ebe:	b003      	add	sp, #12
    2ec0:	4770      	bx	lr
    2ec2:	bf00      	nop
    2ec4:	0000c46b 	.word	0x0000c46b

00002ec8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2ec8:	06ca      	lsls	r2, r1, #27
    2eca:	d405      	bmi.n	2ed8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2ecc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2ece:	bf4c      	ite	mi
    2ed0:	4902      	ldrmi	r1, [pc, #8]	; (2edc <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    2ed2:	4903      	ldrpl	r1, [pc, #12]	; (2ee0 <newline_print+0x18>)
    2ed4:	f7ff bfe6 	b.w	2ea4 <print_formatted>
	}
}
    2ed8:	4770      	bx	lr
    2eda:	bf00      	nop
    2edc:	0000e0cd 	.word	0x0000e0cd
    2ee0:	0000e0cc 	.word	0x0000e0cc

00002ee4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ee8:	b089      	sub	sp, #36	; 0x24
    2eea:	469b      	mov	fp, r3
    2eec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2ef0:	9304      	str	r3, [sp, #16]
    2ef2:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    2ef6:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2ef8:	9b04      	ldr	r3, [sp, #16]
{
    2efa:	9206      	str	r2, [sp, #24]
    2efc:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    2f00:	4604      	mov	r4, r0
    2f02:	460d      	mov	r5, r1
	if (!raw_string) {
    2f04:	2b00      	cmp	r3, #0
    2f06:	f000 8087 	beq.w	3018 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2f0a:	f006 0308 	and.w	r3, r6, #8
    2f0e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2f10:	f009 fa59 	bl	c3c6 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2f14:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    2f18:	4602      	mov	r2, r0
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d04b      	beq.n	2fb6 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    2f1e:	4986      	ldr	r1, [pc, #536]	; (3138 <log_output_process+0x254>)
    2f20:	4620      	mov	r0, r4
    2f22:	f7ff ffbf 	bl	2ea4 <print_formatted>
    2f26:	4680      	mov	r8, r0
	if (stamp) {
    2f28:	f1ba 0f00 	cmp.w	sl, #0
    2f2c:	d008      	beq.n	2f40 <log_output_process+0x5c>
	if (!format) {
    2f2e:	f016 0f44 	tst.w	r6, #68	; 0x44
    2f32:	d142      	bne.n	2fba <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2f34:	4981      	ldr	r1, [pc, #516]	; (313c <log_output_process+0x258>)
    2f36:	462a      	mov	r2, r5
    2f38:	4620      	mov	r0, r4
    2f3a:	f7ff ffb3 	bl	2ea4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2f3e:	4480      	add	r8, r0
	if (color) {
    2f40:	f006 0301 	and.w	r3, r6, #1
    2f44:	b15b      	cbz	r3, 2f5e <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    2f46:	4b7e      	ldr	r3, [pc, #504]	; (3140 <log_output_process+0x25c>)
    2f48:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2f4a:	497e      	ldr	r1, [pc, #504]	; (3144 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2f4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2f50:	4b7d      	ldr	r3, [pc, #500]	; (3148 <log_output_process+0x264>)
    2f52:	4620      	mov	r0, r4
    2f54:	2a00      	cmp	r2, #0
    2f56:	bf08      	it	eq
    2f58:	461a      	moveq	r2, r3
    2f5a:	f7ff ffa3 	bl	2ea4 <print_formatted>
	if (level_on) {
    2f5e:	f006 0308 	and.w	r3, r6, #8
    2f62:	2b00      	cmp	r3, #0
    2f64:	d055      	beq.n	3012 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2f66:	4b79      	ldr	r3, [pc, #484]	; (314c <log_output_process+0x268>)
    2f68:	9a04      	ldr	r2, [sp, #16]
    2f6a:	4979      	ldr	r1, [pc, #484]	; (3150 <log_output_process+0x26c>)
    2f6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2f70:	4620      	mov	r0, r4
    2f72:	f7ff ff97 	bl	2ea4 <print_formatted>
    2f76:	4605      	mov	r5, r0
	if (domain) {
    2f78:	9b06      	ldr	r3, [sp, #24]
    2f7a:	b12b      	cbz	r3, 2f88 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2f7c:	4975      	ldr	r1, [pc, #468]	; (3154 <log_output_process+0x270>)
    2f7e:	461a      	mov	r2, r3
    2f80:	4620      	mov	r0, r4
    2f82:	f7ff ff8f 	bl	2ea4 <print_formatted>
    2f86:	4405      	add	r5, r0
	if (source) {
    2f88:	f1bb 0f00 	cmp.w	fp, #0
    2f8c:	d005      	beq.n	2f9a <log_output_process+0xb6>
		total += print_formatted(output,
    2f8e:	4972      	ldr	r1, [pc, #456]	; (3158 <log_output_process+0x274>)
    2f90:	465a      	mov	r2, fp
    2f92:	4620      	mov	r0, r4
    2f94:	f7ff ff86 	bl	2ea4 <print_formatted>
    2f98:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2f9a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2f9c:	f1b9 0f00 	cmp.w	r9, #0
    2fa0:	d149      	bne.n	3036 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2fa2:	2f00      	cmp	r7, #0
    2fa4:	d14f      	bne.n	3046 <log_output_process+0x162>
	if (color) {
    2fa6:	07f3      	lsls	r3, r6, #31
    2fa8:	f100 80c0 	bmi.w	312c <log_output_process+0x248>
	newline_print(output, flags);
    2fac:	4631      	mov	r1, r6
    2fae:	4620      	mov	r0, r4
    2fb0:	f7ff ff8a 	bl	2ec8 <newline_print>
}
    2fb4:	e0b4      	b.n	3120 <log_output_process+0x23c>
	uint32_t length = 0U;
    2fb6:	4680      	mov	r8, r0
    2fb8:	e7b6      	b.n	2f28 <log_output_process+0x44>
	} else if (freq != 0U) {
    2fba:	4b68      	ldr	r3, [pc, #416]	; (315c <log_output_process+0x278>)
    2fbc:	6818      	ldr	r0, [r3, #0]
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d0bd      	beq.n	2f3e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    2fc2:	4b67      	ldr	r3, [pc, #412]	; (3160 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    2fc4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2fc8:	681b      	ldr	r3, [r3, #0]
    2fca:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2fce:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    2fd2:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    2fd6:	fb00 5513 	mls	r5, r0, r3, r5
    2fda:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2fde:	fb0e f505 	mul.w	r5, lr, r5
    2fe2:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    2fe6:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2fe8:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2fec:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2ff0:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    2ff4:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2ff8:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    2ffc:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2ffe:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    3002:	4958      	ldr	r1, [pc, #352]	; (3164 <log_output_process+0x280>)
    3004:	e9cd c501 	strd	ip, r5, [sp, #4]
    3008:	4652      	mov	r2, sl
    300a:	4620      	mov	r0, r4
    300c:	f7ff ff4a 	bl	2ea4 <print_formatted>
    3010:	e795      	b.n	2f3e <log_output_process+0x5a>
	int total = 0;
    3012:	f006 0508 	and.w	r5, r6, #8
    3016:	e7af      	b.n	2f78 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3018:	f1bb 0f01 	cmp.w	fp, #1
    301c:	d106      	bne.n	302c <log_output_process+0x148>
	if (package) {
    301e:	f1b9 0f00 	cmp.w	r9, #0
    3022:	d164      	bne.n	30ee <log_output_process+0x20a>
	if (data_len) {
    3024:	2f00      	cmp	r7, #0
    3026:	d07b      	beq.n	3120 <log_output_process+0x23c>
		prefix_offset = 0;
    3028:	2500      	movs	r5, #0
    302a:	e00c      	b.n	3046 <log_output_process+0x162>
	if (package) {
    302c:	f1b9 0f00 	cmp.w	r9, #0
    3030:	d0f8      	beq.n	3024 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3032:	484d      	ldr	r0, [pc, #308]	; (3168 <log_output_process+0x284>)
    3034:	e05c      	b.n	30f0 <log_output_process+0x20c>
		cb = out_func;
    3036:	484d      	ldr	r0, [pc, #308]	; (316c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3038:	494d      	ldr	r1, [pc, #308]	; (3170 <log_output_process+0x28c>)
    303a:	464b      	mov	r3, r9
    303c:	4622      	mov	r2, r4
    303e:	f008 faad 	bl	b59c <cbpprintf_external>
	if (data_len) {
    3042:	2f00      	cmp	r7, #0
    3044:	d068      	beq.n	3118 <log_output_process+0x234>
		print_formatted(output, " ");
    3046:	f8df 912c 	ldr.w	r9, [pc, #300]	; 3174 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    304a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 3178 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    304e:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    3050:	4631      	mov	r1, r6
    3052:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3054:	46b8      	mov	r8, r7
    3056:	bf28      	it	cs
    3058:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    305c:	f7ff ff34 	bl	2ec8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    3060:	f04f 0b00 	mov.w	fp, #0
    3064:	455d      	cmp	r5, fp
    3066:	dc45      	bgt.n	30f4 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    3068:	9b05      	ldr	r3, [sp, #20]
    306a:	4651      	mov	r1, sl
    306c:	781a      	ldrb	r2, [r3, #0]
    306e:	4620      	mov	r0, r4
    3070:	f7ff ff18 	bl	2ea4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3074:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    3078:	f01b 0f07 	tst.w	fp, #7
    307c:	d103      	bne.n	3086 <log_output_process+0x1a2>
			print_formatted(output, " ");
    307e:	4649      	mov	r1, r9
    3080:	4620      	mov	r0, r4
    3082:	f7ff ff0f 	bl	2ea4 <print_formatted>
		if (i < length) {
    3086:	45d8      	cmp	r8, fp
    3088:	d93b      	bls.n	3102 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    308a:	9b05      	ldr	r3, [sp, #20]
    308c:	4651      	mov	r1, sl
    308e:	f813 200b 	ldrb.w	r2, [r3, fp]
    3092:	4620      	mov	r0, r4
    3094:	f7ff ff06 	bl	2ea4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3098:	f10b 0b01 	add.w	fp, fp, #1
    309c:	f1bb 0f10 	cmp.w	fp, #16
    30a0:	d1ea      	bne.n	3078 <log_output_process+0x194>
	print_formatted(output, "|");
    30a2:	4936      	ldr	r1, [pc, #216]	; (317c <log_output_process+0x298>)
    30a4:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    30a6:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    30aa:	f7ff fefb 	bl	2ea4 <print_formatted>
		if (i < length) {
    30ae:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    30b0:	9b05      	ldr	r3, [sp, #20]
    30b2:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    30b4:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    30b8:	295f      	cmp	r1, #95	; 0x5f
    30ba:	bf28      	it	cs
    30bc:	222e      	movcs	r2, #46	; 0x2e
    30be:	4930      	ldr	r1, [pc, #192]	; (3180 <log_output_process+0x29c>)
    30c0:	4620      	mov	r0, r4
    30c2:	f7ff feef 	bl	2ea4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    30c6:	f10b 0b01 	add.w	fp, fp, #1
    30ca:	f1bb 0f10 	cmp.w	fp, #16
    30ce:	d01d      	beq.n	310c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    30d0:	f01b 0f07 	tst.w	fp, #7
    30d4:	d103      	bne.n	30de <log_output_process+0x1fa>
			print_formatted(output, " ");
    30d6:	4649      	mov	r1, r9
    30d8:	4620      	mov	r0, r4
    30da:	f7ff fee3 	bl	2ea4 <print_formatted>
		if (i < length) {
    30de:	45d8      	cmp	r8, fp
    30e0:	465a      	mov	r2, fp
    30e2:	d8e5      	bhi.n	30b0 <log_output_process+0x1cc>
			print_formatted(output, " ");
    30e4:	4649      	mov	r1, r9
    30e6:	4620      	mov	r0, r4
    30e8:	f7ff fedc 	bl	2ea4 <print_formatted>
    30ec:	e7eb      	b.n	30c6 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    30ee:	481f      	ldr	r0, [pc, #124]	; (316c <log_output_process+0x288>)
		prefix_offset = 0;
    30f0:	9d04      	ldr	r5, [sp, #16]
    30f2:	e7a1      	b.n	3038 <log_output_process+0x154>
		print_formatted(output, " ");
    30f4:	4649      	mov	r1, r9
    30f6:	4620      	mov	r0, r4
    30f8:	f7ff fed4 	bl	2ea4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    30fc:	f10b 0b01 	add.w	fp, fp, #1
    3100:	e7b0      	b.n	3064 <log_output_process+0x180>
			print_formatted(output, "   ");
    3102:	4920      	ldr	r1, [pc, #128]	; (3184 <log_output_process+0x2a0>)
    3104:	4620      	mov	r0, r4
    3106:	f7ff fecd 	bl	2ea4 <print_formatted>
    310a:	e7c5      	b.n	3098 <log_output_process+0x1b4>
		data += length;
    310c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    310e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    3112:	4443      	add	r3, r8
    3114:	9305      	str	r3, [sp, #20]
	} while (len);
    3116:	d19a      	bne.n	304e <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    3118:	9b04      	ldr	r3, [sp, #16]
    311a:	2b00      	cmp	r3, #0
    311c:	f47f af43 	bne.w	2fa6 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3120:	4620      	mov	r0, r4
}
    3122:	b009      	add	sp, #36	; 0x24
    3124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    3128:	f009 b992 	b.w	c450 <log_output_flush>
		print_formatted(output, "%s", log_color);
    312c:	4a06      	ldr	r2, [pc, #24]	; (3148 <log_output_process+0x264>)
    312e:	4905      	ldr	r1, [pc, #20]	; (3144 <log_output_process+0x260>)
    3130:	4620      	mov	r0, r4
    3132:	f7ff feb7 	bl	2ea4 <print_formatted>
}
    3136:	e739      	b.n	2fac <log_output_process+0xc8>
    3138:	0000e0d4 	.word	0x0000e0d4
    313c:	0000e0d8 	.word	0x0000e0d8
    3140:	0000dab0 	.word	0x0000dab0
    3144:	0000ec98 	.word	0x0000ec98
    3148:	0000e0cf 	.word	0x0000e0cf
    314c:	0000dac4 	.word	0x0000dac4
    3150:	0000e0fd 	.word	0x0000e0fd
    3154:	0000e103 	.word	0x0000e103
    3158:	0000e107 	.word	0x0000e107
    315c:	20000c70 	.word	0x20000c70
    3160:	20000c6c 	.word	0x20000c6c
    3164:	0000e0e1 	.word	0x0000e0e1
    3168:	0000c4a1 	.word	0x0000c4a1
    316c:	0000c46b 	.word	0x0000c46b
    3170:	0000c443 	.word	0x0000c443
    3174:	0000e114 	.word	0x0000e114
    3178:	0000e10c 	.word	0x0000e10c
    317c:	0000e116 	.word	0x0000e116
    3180:	0000e118 	.word	0x0000e118
    3184:	0000e112 	.word	0x0000e112

00003188 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    318c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    318e:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3190:	688e      	ldr	r6, [r1, #8]
    3192:	b086      	sub	sp, #24
    3194:	4605      	mov	r5, r0
    3196:	460c      	mov	r4, r1
    3198:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    319a:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    319e:	b15b      	cbz	r3, 31b8 <log_output_msg_process+0x30>
    31a0:	4a13      	ldr	r2, [pc, #76]	; (31f0 <log_output_msg_process+0x68>)
    31a2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    31a4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    31a8:	2900      	cmp	r1, #0
    31aa:	db1f      	blt.n	31ec <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    31ac:	7820      	ldrb	r0, [r4, #0]
    31ae:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    31b2:	f7ff fd8b 	bl	2ccc <log_source_name_get>
    31b6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    31b8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    31ba:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    31bc:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    31c0:	9700      	str	r7, [sp, #0]
    31c2:	f3c2 224a 	ubfx	r2, r2, #9, #11
    31c6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    31c8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    31cc:	f3c0 100b 	ubfx	r0, r0, #4, #12
    31d0:	bf08      	it	eq
    31d2:	2100      	moveq	r1, #0
    31d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
    31d8:	e9cd 1401 	strd	r1, r4, [sp, #4]
    31dc:	2200      	movs	r2, #0
    31de:	4631      	mov	r1, r6
    31e0:	4628      	mov	r0, r5
    31e2:	f7ff fe7f 	bl	2ee4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    31e6:	b006      	add	sp, #24
    31e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    31ec:	2300      	movs	r3, #0
    31ee:	e7e3      	b.n	31b8 <log_output_msg_process+0x30>
    31f0:	0000d98c 	.word	0x0000d98c

000031f4 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    31f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    31f6:	f242 730f 	movw	r3, #9999	; 0x270f
    31fa:	428b      	cmp	r3, r1
    31fc:	bf28      	it	cs
    31fe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    3200:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3202:	4a0f      	ldr	r2, [pc, #60]	; (3240 <log_output_dropped_process+0x4c>)
{
    3204:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3206:	2105      	movs	r1, #5
    3208:	4668      	mov	r0, sp
    320a:	f008 fa3f 	bl	b68c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    320e:	6863      	ldr	r3, [r4, #4]
    3210:	490c      	ldr	r1, [pc, #48]	; (3244 <log_output_dropped_process+0x50>)
    3212:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3214:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3216:	220b      	movs	r2, #11
    3218:	4628      	mov	r0, r5
    321a:	f009 f905 	bl	c428 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    321e:	6863      	ldr	r3, [r4, #4]
    3220:	4632      	mov	r2, r6
    3222:	4669      	mov	r1, sp
    3224:	4628      	mov	r0, r5
    3226:	685b      	ldr	r3, [r3, #4]
    3228:	f009 f8fe 	bl	c428 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    322c:	6863      	ldr	r3, [r4, #4]
    322e:	4906      	ldr	r1, [pc, #24]	; (3248 <log_output_dropped_process+0x54>)
    3230:	685b      	ldr	r3, [r3, #4]
    3232:	221b      	movs	r2, #27
    3234:	4628      	mov	r0, r5
    3236:	f009 f8f7 	bl	c428 <buffer_write>
		     output->control_block->ctx);
}
    323a:	b002      	add	sp, #8
    323c:	bd70      	pop	{r4, r5, r6, pc}
    323e:	bf00      	nop
    3240:	0000ead4 	.word	0x0000ead4
    3244:	0000e137 	.word	0x0000e137
    3248:	0000e11b 	.word	0x0000e11b

0000324c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    324c:	4a07      	ldr	r2, [pc, #28]	; (326c <log_output_timestamp_freq_set+0x20>)
    324e:	2100      	movs	r1, #0
    3250:	2301      	movs	r3, #1
    3252:	4290      	cmp	r0, r2
    3254:	d806      	bhi.n	3264 <log_output_timestamp_freq_set+0x18>
    3256:	4a06      	ldr	r2, [pc, #24]	; (3270 <log_output_timestamp_freq_set+0x24>)
    3258:	b901      	cbnz	r1, 325c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    325a:	2301      	movs	r3, #1
    325c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    325e:	4b05      	ldr	r3, [pc, #20]	; (3274 <log_output_timestamp_freq_set+0x28>)
    3260:	6018      	str	r0, [r3, #0]
}
    3262:	4770      	bx	lr
		frequency /= 2U;
    3264:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3266:	005b      	lsls	r3, r3, #1
    3268:	2101      	movs	r1, #1
    326a:	e7f2      	b.n	3252 <log_output_timestamp_freq_set+0x6>
    326c:	000f4240 	.word	0x000f4240
    3270:	20000c6c 	.word	0x20000c6c
    3274:	20000c70 	.word	0x20000c70

00003278 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3278:	4b01      	ldr	r3, [pc, #4]	; (3280 <format_set+0x8>)
	return 0;
}
    327a:	2000      	movs	r0, #0
	log_format_current = log_type;
    327c:	6019      	str	r1, [r3, #0]
}
    327e:	4770      	bx	lr
    3280:	20000c88 	.word	0x20000c88

00003284 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    3284:	4b02      	ldr	r3, [pc, #8]	; (3290 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3286:	4803      	ldr	r0, [pc, #12]	; (3294 <panic+0x10>)
    3288:	2201      	movs	r2, #1
    328a:	701a      	strb	r2, [r3, #0]
    328c:	f009 b8e0 	b.w	c450 <log_output_flush>
    3290:	200021be 	.word	0x200021be
    3294:	0000daf4 	.word	0x0000daf4

00003298 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3298:	4801      	ldr	r0, [pc, #4]	; (32a0 <dropped+0x8>)
    329a:	f7ff bfab 	b.w	31f4 <log_output_dropped_process>
    329e:	bf00      	nop
    32a0:	0000daf4 	.word	0x0000daf4

000032a4 <process>:
{
    32a4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    32a6:	4b06      	ldr	r3, [pc, #24]	; (32c0 <process+0x1c>)
    32a8:	6818      	ldr	r0, [r3, #0]
{
    32aa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    32ac:	f7ff fb48 	bl	2940 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    32b0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    32b2:	4603      	mov	r3, r0
}
    32b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    32b8:	4802      	ldr	r0, [pc, #8]	; (32c4 <process+0x20>)
    32ba:	220f      	movs	r2, #15
    32bc:	4718      	bx	r3
    32be:	bf00      	nop
    32c0:	20000c88 	.word	0x20000c88
    32c4:	0000daf4 	.word	0x0000daf4

000032c8 <char_out>:
{
    32c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    32ca:	4f07      	ldr	r7, [pc, #28]	; (32e8 <char_out+0x20>)
    32cc:	460d      	mov	r5, r1
    32ce:	4604      	mov	r4, r0
    32d0:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    32d2:	42b4      	cmp	r4, r6
    32d4:	d101      	bne.n	32da <char_out+0x12>
}
    32d6:	4628      	mov	r0, r5
    32d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    32da:	f814 1b01 	ldrb.w	r1, [r4], #1
    32de:	68bb      	ldr	r3, [r7, #8]
    32e0:	4801      	ldr	r0, [pc, #4]	; (32e8 <char_out+0x20>)
    32e2:	685b      	ldr	r3, [r3, #4]
    32e4:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    32e6:	e7f4      	b.n	32d2 <char_out+0xa>
    32e8:	0000d760 	.word	0x0000d760

000032ec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    32ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    32f0:	4605      	mov	r5, r0
	__asm__ volatile(
    32f2:	f04f 0320 	mov.w	r3, #32
    32f6:	f3ef 8611 	mrs	r6, BASEPRI
    32fa:	f383 8812 	msr	BASEPRI_MAX, r3
    32fe:	f3bf 8f6f 	isb	sy
	return list->head;
    3302:	4b0e      	ldr	r3, [pc, #56]	; (333c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3304:	4f0e      	ldr	r7, [pc, #56]	; (3340 <pm_state_notify+0x54>)
    3306:	681c      	ldr	r4, [r3, #0]
    3308:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3344 <pm_state_notify+0x58>
    330c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3310:	b92c      	cbnz	r4, 331e <pm_state_notify+0x32>
	__asm__ volatile(
    3312:	f386 8811 	msr	BASEPRI, r6
    3316:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    331e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3322:	2d00      	cmp	r5, #0
    3324:	bf18      	it	ne
    3326:	4613      	movne	r3, r2
		if (callback) {
    3328:	b12b      	cbz	r3, 3336 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    332a:	f898 2010 	ldrb.w	r2, [r8, #16]
    332e:	fb09 f202 	mul.w	r2, r9, r2
    3332:	5cb8      	ldrb	r0, [r7, r2]
    3334:	4798      	blx	r3
	return node->next;
    3336:	6824      	ldr	r4, [r4, #0]
    3338:	e7ea      	b.n	3310 <pm_state_notify+0x24>
    333a:	bf00      	nop
    333c:	20000ca4 	.word	0x20000ca4
    3340:	20000c98 	.word	0x20000c98
    3344:	20001fa4 	.word	0x20001fa4

00003348 <pm_system_resume>:

void pm_system_resume(void)
{
    3348:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    334a:	4b19      	ldr	r3, [pc, #100]	; (33b0 <pm_system_resume+0x68>)
    334c:	7c1c      	ldrb	r4, [r3, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    334e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3352:	f004 031f 	and.w	r3, r4, #31
    3356:	2201      	movs	r2, #1
    3358:	409a      	lsls	r2, r3
    335a:	4b16      	ldr	r3, [pc, #88]	; (33b4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    335c:	0961      	lsrs	r1, r4, #5
    335e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3362:	43d0      	mvns	r0, r2
    3364:	e853 1f00 	ldrex	r1, [r3]
    3368:	ea01 0500 	and.w	r5, r1, r0
    336c:	e843 5600 	strex	r6, r5, [r3]
    3370:	2e00      	cmp	r6, #0
    3372:	d1f7      	bne.n	3364 <pm_system_resume+0x1c>
    3374:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3378:	420a      	tst	r2, r1
    337a:	d013      	beq.n	33a4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    337c:	4b0e      	ldr	r3, [pc, #56]	; (33b8 <pm_system_resume+0x70>)
    337e:	4d0f      	ldr	r5, [pc, #60]	; (33bc <pm_system_resume+0x74>)
    3380:	b18b      	cbz	r3, 33a6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3382:	230c      	movs	r3, #12
    3384:	4363      	muls	r3, r4
    3386:	18ea      	adds	r2, r5, r3
    3388:	5ce8      	ldrb	r0, [r5, r3]
    338a:	7851      	ldrb	r1, [r2, #1]
    338c:	f009 fa5f 	bl	c84e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3390:	2000      	movs	r0, #0
    3392:	f7ff ffab 	bl	32ec <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3396:	230c      	movs	r3, #12
    3398:	435c      	muls	r4, r3
    339a:	192a      	adds	r2, r5, r4
    339c:	2300      	movs	r3, #0
    339e:	512b      	str	r3, [r5, r4]
    33a0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    33a4:	bd70      	pop	{r4, r5, r6, pc}
    33a6:	f383 8811 	msr	BASEPRI, r3
    33aa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    33ae:	e7ef      	b.n	3390 <pm_system_resume+0x48>
    33b0:	20001fa4 	.word	0x20001fa4
    33b4:	20000cac 	.word	0x20000cac
    33b8:	0000c84f 	.word	0x0000c84f
    33bc:	20000c98 	.word	0x20000c98

000033c0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    33c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    33c4:	4b35      	ldr	r3, [pc, #212]	; (349c <pm_system_suspend+0xdc>)
{
    33c6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    33c8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    33ca:	f04f 0320 	mov.w	r3, #32
    33ce:	f3ef 8811 	mrs	r8, BASEPRI
    33d2:	f383 8812 	msr	BASEPRI_MAX, r3
    33d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    33da:	240c      	movs	r4, #12
    33dc:	4b30      	ldr	r3, [pc, #192]	; (34a0 <pm_system_suspend+0xe0>)
    33de:	4e31      	ldr	r6, [pc, #196]	; (34a4 <pm_system_suspend+0xe4>)
    33e0:	436c      	muls	r4, r5
    33e2:	191a      	adds	r2, r3, r4
    33e4:	5d19      	ldrb	r1, [r3, r4]
    33e6:	2900      	cmp	r1, #0
    33e8:	d04c      	beq.n	3484 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    33ea:	ca07      	ldmia	r2, {r0, r1, r2}
    33ec:	eb06 0c04 	add.w	ip, r6, r4
    33f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    33f4:	2200      	movs	r2, #0
    33f6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    33f8:	f388 8811 	msr	BASEPRI, r8
    33fc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3400:	230c      	movs	r3, #12
    3402:	436b      	muls	r3, r5
    3404:	18f2      	adds	r2, r6, r3
    3406:	5cf0      	ldrb	r0, [r6, r3]
    3408:	2800      	cmp	r0, #0
    340a:	d039      	beq.n	3480 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    340c:	1c7b      	adds	r3, r7, #1
    340e:	d010      	beq.n	3432 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3410:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3414:	4c24      	ldr	r4, [pc, #144]	; (34a8 <pm_system_suspend+0xe8>)
    3416:	4a25      	ldr	r2, [pc, #148]	; (34ac <pm_system_suspend+0xec>)
    3418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    341c:	2100      	movs	r1, #0
    341e:	fbec 4100 	umlal	r4, r1, ip, r0
    3422:	2300      	movs	r3, #0
    3424:	4620      	mov	r0, r4
    3426:	f7fd fe6b 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    342a:	2101      	movs	r1, #1
    342c:	1a38      	subs	r0, r7, r0
    342e:	f004 fab3 	bl	7998 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3432:	f007 fb0f 	bl	aa54 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3436:	2001      	movs	r0, #1
    3438:	f7ff ff58 	bl	32ec <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    343c:	f3bf 8f5b 	dmb	ish
    3440:	4b1b      	ldr	r3, [pc, #108]	; (34b0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3442:	096a      	lsrs	r2, r5, #5
    3444:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3448:	f005 011f 	and.w	r1, r5, #31
    344c:	2201      	movs	r2, #1
    344e:	408a      	lsls	r2, r1
    3450:	e853 0f00 	ldrex	r0, [r3]
    3454:	4310      	orrs	r0, r2
    3456:	e843 0100 	strex	r1, r0, [r3]
    345a:	2900      	cmp	r1, #0
    345c:	d1f8      	bne.n	3450 <pm_system_suspend+0x90>
    345e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3462:	4b14      	ldr	r3, [pc, #80]	; (34b4 <pm_system_suspend+0xf4>)
    3464:	b13b      	cbz	r3, 3476 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    3466:	230c      	movs	r3, #12
    3468:	fb03 f005 	mul.w	r0, r3, r5
    346c:	1833      	adds	r3, r6, r0
    346e:	5c30      	ldrb	r0, [r6, r0]
    3470:	7859      	ldrb	r1, [r3, #1]
    3472:	f009 f9e0 	bl	c836 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3476:	f7ff ff67 	bl	3348 <pm_system_resume>
	k_sched_unlock();
    347a:	f007 faff 	bl	aa7c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    347e:	2001      	movs	r0, #1
}
    3480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3484:	4601      	mov	r1, r0
    3486:	4628      	mov	r0, r5
    3488:	f000 f816 	bl	34b8 <pm_policy_next_state>
		if (info != NULL) {
    348c:	2800      	cmp	r0, #0
    348e:	d0b3      	beq.n	33f8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3490:	c807      	ldmia	r0, {r0, r1, r2}
    3492:	4434      	add	r4, r6
    3494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    3498:	e7ae      	b.n	33f8 <pm_system_suspend+0x38>
    349a:	bf00      	nop
    349c:	20001fa4 	.word	0x20001fa4
    34a0:	20000c8c 	.word	0x20000c8c
    34a4:	20000c98 	.word	0x20000c98
    34a8:	000f423f 	.word	0x000f423f
    34ac:	000f4240 	.word	0x000f4240
    34b0:	20000cac 	.word	0x20000cac
    34b4:	0000c837 	.word	0x0000c837

000034b8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    34b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34bc:	b085      	sub	sp, #20
    34be:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    34c0:	a903      	add	r1, sp, #12
    34c2:	f000 f843 	bl	354c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    34c6:	4b1e      	ldr	r3, [pc, #120]	; (3540 <pm_policy_next_state+0x88>)
    34c8:	9d03      	ldr	r5, [sp, #12]
    34ca:	f8d3 a000 	ldr.w	sl, [r3]
    34ce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3544 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    34d2:	1e43      	subs	r3, r0, #1
    34d4:	b21b      	sxth	r3, r3
    34d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    34da:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    34dc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    34e0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    34e4:	f04f 0b00 	mov.w	fp, #0
    34e8:	b924      	cbnz	r4, 34f4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    34ea:	46a1      	mov	r9, r4
}
    34ec:	4648      	mov	r0, r9
    34ee:	b005      	add	sp, #20
    34f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34f4:	6868      	ldr	r0, [r5, #4]
    34f6:	4a14      	ldr	r2, [pc, #80]	; (3548 <pm_policy_next_state+0x90>)
    34f8:	46c4      	mov	ip, r8
    34fa:	4659      	mov	r1, fp
    34fc:	fbe0 c107 	umlal	ip, r1, r0, r7
    3500:	2300      	movs	r3, #0
    3502:	4660      	mov	r0, ip
    3504:	f7fd fdfc 	bl	1100 <__aeabi_uldivmod>
    3508:	9001      	str	r0, [sp, #4]
    350a:	68a8      	ldr	r0, [r5, #8]
    350c:	4a0e      	ldr	r2, [pc, #56]	; (3548 <pm_policy_next_state+0x90>)
    350e:	46c4      	mov	ip, r8
    3510:	4659      	mov	r1, fp
    3512:	fbe0 c107 	umlal	ip, r1, r0, r7
    3516:	2300      	movs	r3, #0
    3518:	4660      	mov	r0, ip
    351a:	f7fd fdf1 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    351e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    3522:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3524:	d001      	beq.n	352a <pm_policy_next_state+0x72>
    3526:	4582      	cmp	sl, r0
    3528:	d905      	bls.n	3536 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    352a:	1c73      	adds	r3, r6, #1
    352c:	d0de      	beq.n	34ec <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    352e:	9b01      	ldr	r3, [sp, #4]
    3530:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    3532:	42b0      	cmp	r0, r6
    3534:	d9da      	bls.n	34ec <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3536:	3c01      	subs	r4, #1
    3538:	b2a4      	uxth	r4, r4
    353a:	3d0c      	subs	r5, #12
    353c:	e7d4      	b.n	34e8 <pm_policy_next_state+0x30>
    353e:	bf00      	nop
    3540:	200000b8 	.word	0x200000b8
    3544:	000f423f 	.word	0x000f423f
    3548:	000f4240 	.word	0x000f4240

0000354c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    354c:	b908      	cbnz	r0, 3552 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    354e:	4b02      	ldr	r3, [pc, #8]	; (3558 <pm_state_cpu_get_all+0xc>)
    3550:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3552:	2000      	movs	r0, #0
    3554:	4770      	bx	lr
    3556:	bf00      	nop
    3558:	0000db04 	.word	0x0000db04

0000355c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    355c:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    355e:	4b0c      	ldr	r3, [pc, #48]	; (3590 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3560:	4e0c      	ldr	r6, [pc, #48]	; (3594 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3562:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3564:	4b0c      	ldr	r3, [pc, #48]	; (3598 <class_handler+0x3c>)
    3566:	42b3      	cmp	r3, r6
    3568:	d303      	bcc.n	3572 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    356a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    356e:	bcf0      	pop	{r4, r5, r6, r7}
    3570:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3572:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3574:	42bd      	cmp	r5, r7
    3576:	d309      	bcc.n	358c <class_handler+0x30>
		if (iface->class_handler &&
    3578:	691c      	ldr	r4, [r3, #16]
    357a:	b13c      	cbz	r4, 358c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    357c:	f895 c002 	ldrb.w	ip, [r5, #2]
    3580:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3582:	45ac      	cmp	ip, r5
    3584:	d102      	bne.n	358c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3586:	4623      	mov	r3, r4
}
    3588:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    358a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    358c:	3324      	adds	r3, #36	; 0x24
    358e:	e7ea      	b.n	3566 <class_handler+0xa>
    3590:	20000cb0 	.word	0x20000cb0
    3594:	2000044c 	.word	0x2000044c
    3598:	20000404 	.word	0x20000404

0000359c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    359c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35a0:	4c13      	ldr	r4, [pc, #76]	; (35f0 <custom_handler+0x54>)
    35a2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 35f4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    35a6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 35f8 <custom_handler+0x5c>
{
    35aa:	4605      	mov	r5, r0
    35ac:	460e      	mov	r6, r1
    35ae:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35b0:	4544      	cmp	r4, r8
    35b2:	d303      	bcc.n	35bc <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    35b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    35b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    35bc:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    35be:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    35c2:	429a      	cmp	r2, r3
    35c4:	d312      	bcc.n	35ec <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    35c6:	69a3      	ldr	r3, [r4, #24]
    35c8:	b183      	cbz	r3, 35ec <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    35ca:	7890      	ldrb	r0, [r2, #2]
    35cc:	7929      	ldrb	r1, [r5, #4]
    35ce:	4288      	cmp	r0, r1
    35d0:	d105      	bne.n	35de <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    35d2:	463a      	mov	r2, r7
    35d4:	4631      	mov	r1, r6
    35d6:	4628      	mov	r0, r5
}
    35d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    35dc:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    35de:	7952      	ldrb	r2, [r2, #5]
    35e0:	2a01      	cmp	r2, #1
    35e2:	d103      	bne.n	35ec <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    35e4:	463a      	mov	r2, r7
    35e6:	4631      	mov	r1, r6
    35e8:	4628      	mov	r0, r5
    35ea:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35ec:	3424      	adds	r4, #36	; 0x24
    35ee:	e7df      	b.n	35b0 <custom_handler+0x14>
    35f0:	20000404 	.word	0x20000404
    35f4:	2000044c 	.word	0x2000044c
    35f8:	20000cb0 	.word	0x20000cb0

000035fc <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    35fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3600:	4c0b      	ldr	r4, [pc, #44]	; (3630 <vendor_handler+0x34>)
    3602:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3634 <vendor_handler+0x38>
{
    3606:	4605      	mov	r5, r0
    3608:	460e      	mov	r6, r1
    360a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    360c:	4544      	cmp	r4, r8
    360e:	d302      	bcc.n	3616 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3610:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3614:	e009      	b.n	362a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    3616:	6963      	ldr	r3, [r4, #20]
    3618:	b90b      	cbnz	r3, 361e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    361a:	3424      	adds	r4, #36	; 0x24
    361c:	e7f6      	b.n	360c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    361e:	463a      	mov	r2, r7
    3620:	4631      	mov	r1, r6
    3622:	4628      	mov	r0, r5
    3624:	4798      	blx	r3
    3626:	2800      	cmp	r0, #0
    3628:	d1f7      	bne.n	361a <vendor_handler+0x1e>
}
    362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    362e:	bf00      	nop
    3630:	20000404 	.word	0x20000404
    3634:	2000044c 	.word	0x2000044c

00003638 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3638:	4802      	ldr	r0, [pc, #8]	; (3644 <usb_reset_alt_setting+0xc>)
    363a:	2208      	movs	r2, #8
    363c:	2100      	movs	r1, #0
    363e:	f009 b8ee 	b.w	c81e <memset>
    3642:	bf00      	nop
    3644:	20000d6b 	.word	0x20000d6b

00003648 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    3648:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    364a:	4b0b      	ldr	r3, [pc, #44]	; (3678 <is_ep_valid.part.0+0x30>)
    364c:	4c0b      	ldr	r4, [pc, #44]	; (367c <is_ep_valid.part.0+0x34>)
    364e:	42a3      	cmp	r3, r4
    3650:	d301      	bcc.n	3656 <is_ep_valid.part.0+0xe>
	return false;
    3652:	2000      	movs	r0, #0
}
    3654:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    3656:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3658:	7f1e      	ldrb	r6, [r3, #28]
    365a:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    365c:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    365e:	b2d5      	uxtb	r5, r2
    3660:	42ae      	cmp	r6, r5
    3662:	d801      	bhi.n	3668 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3664:	3324      	adds	r3, #36	; 0x24
    3666:	e7f2      	b.n	364e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    3668:	3201      	adds	r2, #1
    366a:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    366e:	4285      	cmp	r5, r0
    3670:	d1f5      	bne.n	365e <is_ep_valid.part.0+0x16>
		return true;
    3672:	2001      	movs	r0, #1
    3674:	e7ee      	b.n	3654 <is_ep_valid.part.0+0xc>
    3676:	bf00      	nop
    3678:	20000404 	.word	0x20000404
    367c:	2000044c 	.word	0x2000044c

00003680 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    3680:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    3682:	4809      	ldr	r0, [pc, #36]	; (36a8 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    3684:	7803      	ldrb	r3, [r0, #0]
    3686:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    368a:	330a      	adds	r3, #10
    368c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3690:	b13b      	cbz	r3, 36a2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3692:	f100 0208 	add.w	r2, r0, #8
    3696:	f100 0110 	add.w	r1, r0, #16
    369a:	4798      	blx	r3
    369c:	43c0      	mvns	r0, r0
    369e:	0fc0      	lsrs	r0, r0, #31
}
    36a0:	bd08      	pop	{r3, pc}
		return false;
    36a2:	4618      	mov	r0, r3
    36a4:	e7fc      	b.n	36a0 <usb_handle_request.constprop.0+0x20>
    36a6:	bf00      	nop
    36a8:	20000cb0 	.word	0x20000cb0

000036ac <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    36ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    36ae:	4b08      	ldr	r3, [pc, #32]	; (36d0 <usb_device_init.part.0+0x24>)
    36b0:	9305      	str	r3, [sp, #20]
    36b2:	2302      	movs	r3, #2
    36b4:	9304      	str	r3, [sp, #16]
    36b6:	4807      	ldr	r0, [pc, #28]	; (36d4 <usb_device_init.part.0+0x28>)
    36b8:	2300      	movs	r3, #0
    36ba:	aa04      	add	r2, sp, #16
    36bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36c0:	f7ff fb26 	bl	2d10 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    36c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36c8:	b007      	add	sp, #28
    36ca:	f85d fb04 	ldr.w	pc, [sp], #4
    36ce:	bf00      	nop
    36d0:	0000e180 	.word	0x0000e180
    36d4:	0000da2c 	.word	0x0000da2c

000036d8 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    36d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    36da:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    36dc:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    36de:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    36e0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    36e4:	d007      	beq.n	36f6 <usb_halt_endpoint_req.isra.0+0x1e>
    36e6:	4620      	mov	r0, r4
    36e8:	f7ff ffae 	bl	3648 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    36ec:	b178      	cbz	r0, 370e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    36ee:	4b0d      	ldr	r3, [pc, #52]	; (3724 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    36f0:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    36f4:	b158      	cbz	r0, 370e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    36f6:	4e0b      	ldr	r6, [pc, #44]	; (3724 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    36f8:	4620      	mov	r0, r4
		if (halt) {
    36fa:	b155      	cbz	r5, 3712 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    36fc:	f002 ffb6 	bl	666c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3700:	69f3      	ldr	r3, [r6, #28]
    3702:	b11b      	cbz	r3, 370c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3704:	f10d 0107 	add.w	r1, sp, #7
    3708:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    370a:	4798      	blx	r3
		return true;
    370c:	2001      	movs	r0, #1
}
    370e:	b002      	add	sp, #8
    3710:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    3712:	f002 ffe5 	bl	66e0 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3716:	69f3      	ldr	r3, [r6, #28]
    3718:	2b00      	cmp	r3, #0
    371a:	d0f7      	beq.n	370c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    371c:	f10d 0107 	add.w	r1, sp, #7
    3720:	2009      	movs	r0, #9
    3722:	e7f2      	b.n	370a <usb_halt_endpoint_req.isra.0+0x32>
    3724:	20000cb0 	.word	0x20000cb0

00003728 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    3728:	b580      	push	{r7, lr}
    372a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    372c:	b088      	sub	sp, #32
    372e:	466a      	mov	r2, sp
    3730:	4b07      	ldr	r3, [pc, #28]	; (3750 <get_ep_bm_from_addr.part.0+0x28>)
    3732:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3736:	2303      	movs	r3, #3
    3738:	f842 3f10 	str.w	r3, [r2, #16]!
    373c:	4805      	ldr	r0, [pc, #20]	; (3754 <get_ep_bm_from_addr.part.0+0x2c>)
    373e:	2300      	movs	r3, #0
    3740:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3744:	f7ff fae4 	bl	2d10 <z_impl_z_log_msg_static_create>
}
    3748:	2000      	movs	r0, #0
    374a:	46bd      	mov	sp, r7
    374c:	bd80      	pop	{r7, pc}
    374e:	bf00      	nop
    3750:	0000e1a5 	.word	0x0000e1a5
    3754:	0000da2c 	.word	0x0000da2c

00003758 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    3758:	2804      	cmp	r0, #4
{
    375a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    375e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 37fc <forward_status_cb+0xa4>
    3762:	4604      	mov	r4, r0
    3764:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    3766:	d015      	beq.n	3794 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3768:	2801      	cmp	r0, #1
    376a:	d12f      	bne.n	37cc <forward_status_cb+0x74>
		if (usb_dev.configured) {
    376c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3800 <forward_status_cb+0xa8>
    3770:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    3774:	b353      	cbz	r3, 37cc <forward_status_cb+0x74>
			usb_cancel_transfers();
    3776:	f000 fed1 	bl	451c <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    377a:	4d22      	ldr	r5, [pc, #136]	; (3804 <forward_status_cb+0xac>)
    377c:	454d      	cmp	r5, r9
    377e:	d222      	bcs.n	37c6 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    3780:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3782:	f04f 0a00 	mov.w	sl, #0
    3786:	7f2b      	ldrb	r3, [r5, #28]
    3788:	fa5f f68a 	uxtb.w	r6, sl
    378c:	42b3      	cmp	r3, r6
    378e:	d804      	bhi.n	379a <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3790:	3524      	adds	r5, #36	; 0x24
    3792:	e7f3      	b.n	377c <forward_status_cb+0x24>
		usb_reset_alt_setting();
    3794:	f7ff ff50 	bl	3638 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3798:	e7e8      	b.n	376c <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    379a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    379e:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    37a0:	7930      	ldrb	r0, [r6, #4]
    37a2:	f009 f8a9 	bl	c8f8 <usb_dc_ep_disable>
    37a6:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    37a8:	7930      	ldrb	r0, [r6, #4]
    37aa:	f008 fe88 	bl	c4be <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    37ae:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    37b2:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    37b4:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    37b8:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    37bc:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    37c0:	f10a 0a01 	add.w	sl, sl, #1
    37c4:	dadf      	bge.n	3786 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    37c6:	2300      	movs	r3, #0
    37c8:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    37cc:	4d0d      	ldr	r5, [pc, #52]	; (3804 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    37ce:	454d      	cmp	r5, r9
    37d0:	d308      	bcc.n	37e4 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    37d2:	4b0b      	ldr	r3, [pc, #44]	; (3800 <forward_status_cb+0xa8>)
    37d4:	6a1b      	ldr	r3, [r3, #32]
    37d6:	b16b      	cbz	r3, 37f4 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    37d8:	4639      	mov	r1, r7
    37da:	4620      	mov	r0, r4
}
    37dc:	b003      	add	sp, #12
    37de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    37e2:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    37e4:	68eb      	ldr	r3, [r5, #12]
    37e6:	b11b      	cbz	r3, 37f0 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    37e8:	463a      	mov	r2, r7
    37ea:	4621      	mov	r1, r4
    37ec:	4628      	mov	r0, r5
    37ee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    37f0:	3524      	adds	r5, #36	; 0x24
    37f2:	e7ec      	b.n	37ce <forward_status_cb+0x76>
}
    37f4:	b003      	add	sp, #12
    37f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37fa:	bf00      	nop
    37fc:	2000044c 	.word	0x2000044c
    3800:	20000cb0 	.word	0x20000cb0
    3804:	20000404 	.word	0x20000404

00003808 <disable_endpoint>:
{
    3808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    380a:	af00      	add	r7, sp, #0
    380c:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    380e:	f009 f873 	bl	c8f8 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    3812:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    3816:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    3818:	d013      	beq.n	3842 <disable_endpoint+0x3a>
	} else if (ret) {
    381a:	b190      	cbz	r0, 3842 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    381c:	466e      	mov	r6, sp
    381e:	b088      	sub	sp, #32
    3820:	466a      	mov	r2, sp
    3822:	4b0e      	ldr	r3, [pc, #56]	; (385c <disable_endpoint+0x54>)
    3824:	e9c2 3505 	strd	r3, r5, [r2, #20]
    3828:	2303      	movs	r3, #3
    382a:	f842 3f10 	str.w	r3, [r2, #16]!
    382e:	480c      	ldr	r0, [pc, #48]	; (3860 <disable_endpoint+0x58>)
    3830:	2300      	movs	r3, #0
    3832:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3836:	f7ff fa6b 	bl	2d10 <z_impl_z_log_msg_static_create>
    383a:	46b5      	mov	sp, r6
}
    383c:	4620      	mov	r0, r4
    383e:	46bd      	mov	sp, r7
    3840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    3842:	4628      	mov	r0, r5
    3844:	f008 fe3b 	bl	c4be <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    3848:	4a06      	ldr	r2, [pc, #24]	; (3864 <disable_endpoint+0x5c>)
    384a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    384e:	ea23 0300 	bic.w	r3, r3, r0
    3852:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    3856:	2400      	movs	r4, #0
    3858:	e7f0      	b.n	383c <disable_endpoint+0x34>
    385a:	bf00      	nop
    385c:	0000e1c0 	.word	0x0000e1c0
    3860:	0000da2c 	.word	0x0000da2c
    3864:	20000cb0 	.word	0x20000cb0

00003868 <set_endpoint>:
{
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
    386a:	b083      	sub	sp, #12
    386c:	af00      	add	r7, sp, #0
    386e:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3870:	7880      	ldrb	r0, [r0, #2]
    3872:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3874:	7923      	ldrb	r3, [r4, #4]
    3876:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    3878:	4d27      	ldr	r5, [pc, #156]	; (3918 <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    387a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    387e:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3880:	78e3      	ldrb	r3, [r4, #3]
    3882:	f003 0303 	and.w	r3, r3, #3
    3886:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3888:	f008 fe19 	bl	c4be <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    388c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3890:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3892:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    3894:	d00c      	beq.n	38b0 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    3896:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3898:	4620      	mov	r0, r4
    389a:	f000 fe21 	bl	44e0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    389e:	4620      	mov	r0, r4
    38a0:	f7ff ffb2 	bl	3808 <disable_endpoint>
		if (!k_is_in_isr()) {
    38a4:	f009 fbc2 	bl	d02c <k_is_in_isr>
    38a8:	b910      	cbnz	r0, 38b0 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    38aa:	2096      	movs	r0, #150	; 0x96
    38ac:	f007 f9a6 	bl	abfc <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    38b0:	4638      	mov	r0, r7
    38b2:	f002 fea7 	bl	6604 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    38b6:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    38ba:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    38bc:	7838      	ldrb	r0, [r7, #0]
    38be:	d014      	beq.n	38ea <set_endpoint+0x82>
	} else if (ret) {
    38c0:	b19b      	cbz	r3, 38ea <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    38c2:	466c      	mov	r4, sp
    38c4:	b088      	sub	sp, #32
    38c6:	466a      	mov	r2, sp
    38c8:	4b14      	ldr	r3, [pc, #80]	; (391c <set_endpoint+0xb4>)
    38ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    38ce:	2303      	movs	r3, #3
    38d0:	f842 3f10 	str.w	r3, [r2, #16]!
    38d4:	4812      	ldr	r0, [pc, #72]	; (3920 <set_endpoint+0xb8>)
    38d6:	2300      	movs	r3, #0
    38d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    38dc:	f7ff fa18 	bl	2d10 <z_impl_z_log_msg_static_create>
		return false;
    38e0:	2000      	movs	r0, #0
    38e2:	46a5      	mov	sp, r4
}
    38e4:	370c      	adds	r7, #12
    38e6:	46bd      	mov	sp, r7
    38e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    38ea:	f002 ff35 	bl	6758 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    38ee:	f110 0f78 	cmn.w	r0, #120	; 0x78
    38f2:	d008      	beq.n	3906 <set_endpoint+0x9e>
	} else if (ret) {
    38f4:	b138      	cbz	r0, 3906 <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    38f6:	466c      	mov	r4, sp
    38f8:	b088      	sub	sp, #32
    38fa:	783b      	ldrb	r3, [r7, #0]
    38fc:	466a      	mov	r2, sp
    38fe:	4909      	ldr	r1, [pc, #36]	; (3924 <set_endpoint+0xbc>)
    3900:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3904:	e7e3      	b.n	38ce <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    3906:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    390a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    390c:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    390e:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    3912:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    3916:	e7e5      	b.n	38e4 <set_endpoint+0x7c>
    3918:	20000cb0 	.word	0x20000cb0
    391c:	0000e1e2 	.word	0x0000e1e2
    3920:	0000da2c 	.word	0x0000da2c
    3924:	0000e206 	.word	0x0000e206

00003928 <usb_handle_standard_request>:
{
    3928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    392c:	4ea3      	ldr	r6, [pc, #652]	; (3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>)
    392e:	69b3      	ldr	r3, [r6, #24]
{
    3930:	4604      	mov	r4, r0
    3932:	460f      	mov	r7, r1
    3934:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    3936:	b9fb      	cbnz	r3, 3978 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    3938:	7823      	ldrb	r3, [r4, #0]
    393a:	f003 031f 	and.w	r3, r3, #31
    393e:	2b01      	cmp	r3, #1
    3940:	f000 809d 	beq.w	3a7e <usb_handle_standard_request+0x156>
    3944:	2b02      	cmp	r3, #2
    3946:	f000 8104 	beq.w	3b52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xba>
    394a:	bb33      	cbnz	r3, 399a <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    394c:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    3950:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    3952:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3954:	2800      	cmp	r0, #0
    3956:	da34      	bge.n	39c2 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    3958:	2906      	cmp	r1, #6
    395a:	d012      	beq.n	3982 <usb_handle_standard_request+0x5a>
    395c:	2908      	cmp	r1, #8
    395e:	d02b      	beq.n	39b8 <usb_handle_standard_request+0x90>
    3960:	b9d9      	cbnz	r1, 399a <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    3962:	2301      	movs	r3, #1
    3964:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    3966:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    3968:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    396c:	005b      	lsls	r3, r3, #1
    396e:	f043 0301 	orr.w	r3, r3, #1
    3972:	7013      	strb	r3, [r2, #0]
		*len = 2;
    3974:	2302      	movs	r3, #2
    3976:	e12a      	b.n	3bce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x136>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    3978:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    397a:	2800      	cmp	r0, #0
    397c:	d1dc      	bne.n	3938 <usb_handle_standard_request+0x10>
		return 0;
    397e:	2000      	movs	r0, #0
    3980:	e00d      	b.n	399e <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    3982:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3984:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3986:	1f01      	subs	r1, r0, #4
    3988:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    398a:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    398c:	d905      	bls.n	399a <usb_handle_standard_request+0x72>
    398e:	2807      	cmp	r0, #7
    3990:	d803      	bhi.n	399a <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    3992:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3994:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    3996:	780c      	ldrb	r4, [r1, #0]
    3998:	b91c      	cbnz	r4, 39a2 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    399a:	f06f 0015 	mvn.w	r0, #21
}
    399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    39a2:	784e      	ldrb	r6, [r1, #1]
    39a4:	4566      	cmp	r6, ip
    39a6:	d103      	bne.n	39b0 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    39a8:	429a      	cmp	r2, r3
    39aa:	f000 810b 	beq.w	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
			cur_index++;
    39ae:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    39b0:	4421      	add	r1, r4
    39b2:	e7f0      	b.n	3996 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    39b4:	780b      	ldrb	r3, [r1, #0]
    39b6:	e10a      	b.n	3bce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x136>
			data[0] = usb_dev.configuration;
    39b8:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    39bc:	7013      	strb	r3, [r2, #0]
				*len = 1;
    39be:	2301      	movs	r3, #1
    39c0:	e105      	b.n	3bce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x136>
		switch (setup->bRequest) {
    39c2:	3901      	subs	r1, #1
    39c4:	2908      	cmp	r1, #8
    39c6:	d8e8      	bhi.n	399a <usb_handle_standard_request+0x72>
    39c8:	a301      	add	r3, pc, #4	; (adr r3, 39d0 <usb_handle_standard_request+0xa8>)
    39ca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    39ce:	bf00      	nop
    39d0:	00003a69 	.word	0x00003a69
    39d4:	0000399b 	.word	0x0000399b
    39d8:	00003a77 	.word	0x00003a77
    39dc:	0000399b 	.word	0x0000399b
    39e0:	000039f5 	.word	0x000039f5
    39e4:	0000399b 	.word	0x0000399b
    39e8:	0000399b 	.word	0x0000399b
    39ec:	0000399b 	.word	0x0000399b
    39f0:	00003a01 	.word	0x00003a01
			return !usb_dc_set_address(setup->wValue);
    39f4:	78a0      	ldrb	r0, [r4, #2]
    39f6:	f002 fdc9 	bl	658c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    39fa:	2800      	cmp	r0, #0
    39fc:	d0bf      	beq.n	397e <usb_handle_standard_request+0x56>
    39fe:	e7cc      	b.n	399a <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    3a00:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3a02:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    3a04:	bb63      	cbnz	r3, 3a60 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    3a06:	f7ff fe17 	bl	3638 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    3a0a:	8863      	ldrh	r3, [r4, #2]
    3a0c:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    3a10:	69f3      	ldr	r3, [r6, #28]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d0b3      	beq.n	397e <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3a16:	496a      	ldr	r1, [pc, #424]	; (3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    3a18:	2003      	movs	r0, #3
    3a1a:	4798      	blx	r3
    3a1c:	e7af      	b.n	397e <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    3a1e:	786b      	ldrb	r3, [r5, #1]
    3a20:	2b04      	cmp	r3, #4
    3a22:	d010      	beq.n	3a46 <usb_handle_standard_request+0x11e>
    3a24:	2b05      	cmp	r3, #5
    3a26:	d011      	beq.n	3a4c <usb_handle_standard_request+0x124>
    3a28:	2b02      	cmp	r3, #2
    3a2a:	d104      	bne.n	3a36 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    3a2c:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    3a2e:	8863      	ldrh	r3, [r4, #2]
				found = true;
    3a30:	42bb      	cmp	r3, r7
    3a32:	bf08      	it	eq
    3a34:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    3a36:	782b      	ldrb	r3, [r5, #0]
    3a38:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    3a3a:	782b      	ldrb	r3, [r5, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d1ee      	bne.n	3a1e <usb_handle_standard_request+0xf6>
	if (found) {
    3a40:	2800      	cmp	r0, #0
    3a42:	d0aa      	beq.n	399a <usb_handle_standard_request+0x72>
    3a44:	e7df      	b.n	3a06 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    3a46:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    3a4a:	e7f4      	b.n	3a36 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    3a4c:	8863      	ldrh	r3, [r4, #2]
    3a4e:	42bb      	cmp	r3, r7
    3a50:	d1f1      	bne.n	3a36 <usb_handle_standard_request+0x10e>
    3a52:	f1b8 0f00 	cmp.w	r8, #0
    3a56:	d1ee      	bne.n	3a36 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    3a58:	4628      	mov	r0, r5
    3a5a:	f7ff ff05 	bl	3868 <set_endpoint>
			break;
    3a5e:	e7ea      	b.n	3a36 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    3a60:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    3a62:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    3a64:	46b8      	mov	r8, r7
    3a66:	e7e8      	b.n	3a3a <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3a68:	8863      	ldrh	r3, [r4, #2]
    3a6a:	2b01      	cmp	r3, #1
    3a6c:	d195      	bne.n	399a <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    3a6e:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    3a70:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    3a74:	e783      	b.n	397e <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3a76:	8863      	ldrh	r3, [r4, #2]
    3a78:	2b01      	cmp	r3, #1
    3a7a:	d18e      	bne.n	399a <usb_handle_standard_request+0x72>
    3a7c:	e7f8      	b.n	3a70 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    3a7e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3a82:	f8d5 c000 	ldr.w	ip, [r5]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d087      	beq.n	399a <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3a8a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    3a8c:	88a3      	ldrh	r3, [r4, #4]
    3a8e:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3a92:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    3a94:	7810      	ldrb	r0, [r2, #0]
    3a96:	2800      	cmp	r0, #0
    3a98:	f43f af7f 	beq.w	399a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    3a9c:	7851      	ldrb	r1, [r2, #1]
    3a9e:	2902      	cmp	r1, #2
    3aa0:	d104      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
			if (interface < cfg_descr->bNumInterfaces) {
    3aa2:	f892 8004 	ldrb.w	r8, [r2, #4]
    3aa6:	45f0      	cmp	r8, lr
    3aa8:	f200 8093 	bhi.w	3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
		p += p[DESC_bLength];
    3aac:	4402      	add	r2, r0
    3aae:	e7f1      	b.n	3a94 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    3ab0:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    3ab4:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    3ab8:	6039      	str	r1, [r7, #0]
			return true;
    3aba:	e760      	b.n	397e <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    3abc:	4415      	add	r5, r2
    3abe:	e094      	b.n	3bea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x152>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    3ac0:	2a0b      	cmp	r2, #11
    3ac2:	f47f af6a 	bne.w	399a <usb_handle_standard_request+0x72>
	bool ret = false;
    3ac6:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    3ac8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3acc:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    3ace:	46ba      	mov	sl, r7
    3ad0:	e006      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
		switch (p[DESC_bDescriptorType]) {
    3ad2:	786b      	ldrb	r3, [r5, #1]
    3ad4:	2b04      	cmp	r3, #4
    3ad6:	d00f      	beq.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3ad8:	2b05      	cmp	r3, #5
    3ada:	d021      	beq.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
		p += p[DESC_bLength];
    3adc:	782b      	ldrb	r3, [r5, #0]
    3ade:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    3ae0:	782b      	ldrb	r3, [r5, #0]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d1f5      	bne.n	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
	if (usb_dev.status_callback) {
    3ae6:	69f3      	ldr	r3, [r6, #28]
    3ae8:	b113      	cbz	r3, 3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    3aea:	4651      	mov	r1, sl
    3aec:	2007      	movs	r0, #7
    3aee:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    3af0:	2f00      	cmp	r7, #0
    3af2:	f47f af44 	bne.w	397e <usb_handle_standard_request+0x56>
    3af6:	e750      	b.n	399a <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3af8:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    3afc:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    3afe:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    3b02:	4598      	cmp	r8, r3
    3b04:	d1ea      	bne.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
			    cur_alt_setting == setup->wValue) {
    3b06:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    3b08:	4599      	cmp	r9, r3
    3b0a:	d1e7      	bne.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3b0c:	f1b8 0f07 	cmp.w	r8, #7
    3b10:	d81c      	bhi.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
		usb_dev.alt_setting[iface] = alt_setting;
    3b12:	eb06 0308 	add.w	r3, r6, r8
		return true;
    3b16:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    3b18:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    3b1c:	2701      	movs	r7, #1
    3b1e:	e7dd      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
			if (cur_iface == setup->wIndex) {
    3b20:	88a3      	ldrh	r3, [r4, #4]
    3b22:	4543      	cmp	r3, r8
    3b24:	d1da      	bne.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
	if (cur_alt_setting != alt_setting) {
    3b26:	78a3      	ldrb	r3, [r4, #2]
    3b28:	454b      	cmp	r3, r9
    3b2a:	d00a      	beq.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
		ret = reset_endpoint(ep_desc);
    3b2c:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3b2e:	4638      	mov	r0, r7
    3b30:	f000 fcd6 	bl	44e0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3b34:	4638      	mov	r0, r7
    3b36:	f7ff fe67 	bl	3808 <disable_endpoint>
    3b3a:	fab0 f780 	clz	r7, r0
    3b3e:	097f      	lsrs	r7, r7, #5
    3b40:	e7cc      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
		ret = set_endpoint(ep_desc);
    3b42:	4628      	mov	r0, r5
    3b44:	f7ff fe90 	bl	3868 <set_endpoint>
    3b48:	4607      	mov	r7, r0
    3b4a:	e7c7      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
    3b4c:	46aa      	mov	sl, r5
	return false;
    3b4e:	2700      	movs	r7, #0
    3b50:	e7c4      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
	if (usb_reqtype_is_to_host(setup)) {
    3b52:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    3b56:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3b58:	2a00      	cmp	r2, #0
    3b5a:	da18      	bge.n	3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	f47f af1c 	bne.w	399a <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    3b62:	7924      	ldrb	r4, [r4, #4]
    3b64:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    3b66:	0663      	lsls	r3, r4, #25
    3b68:	d00a      	beq.n	3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
    3b6a:	4620      	mov	r0, r4
    3b6c:	f7ff fd6c 	bl	3648 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3b70:	2800      	cmp	r0, #0
    3b72:	f43f af12 	beq.w	399a <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3b76:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	f43f af0d 	beq.w	399a <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    3b80:	4629      	mov	r1, r5
    3b82:	4620      	mov	r0, r4
    3b84:	f002 fdcc 	bl	6720 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    3b88:	2300      	movs	r3, #0
    3b8a:	706b      	strb	r3, [r5, #1]
    3b8c:	e6f2      	b.n	3974 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    3b8e:	2b01      	cmp	r3, #1
    3b90:	d008      	beq.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
    3b92:	2b03      	cmp	r3, #3
    3b94:	f47f af01 	bne.w	399a <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3b98:	8863      	ldrh	r3, [r4, #2]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	f47f aefd 	bne.w	399a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3ba0:	2101      	movs	r1, #1
    3ba2:	e003      	b.n	3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3ba4:	8861      	ldrh	r1, [r4, #2]
    3ba6:	2900      	cmp	r1, #0
    3ba8:	f47f aef7 	bne.w	399a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3bac:	88a0      	ldrh	r0, [r4, #4]
    3bae:	f7ff fd93 	bl	36d8 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    3bb2:	2800      	cmp	r0, #0
    3bb4:	f47f aee3 	bne.w	397e <usb_handle_standard_request+0x56>
    3bb8:	e6ef      	b.n	399a <usb_handle_standard_request+0x72>
    3bba:	bf00      	nop
    3bbc:	20000cb0 	.word	0x20000cb0
    3bc0:	20000d6a 	.word	0x20000d6a
		if (type == USB_DESC_CONFIGURATION) {
    3bc4:	2802      	cmp	r0, #2
		*data = p;
    3bc6:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    3bc8:	f47f aef4 	bne.w	39b4 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    3bcc:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    3bce:	603b      	str	r3, [r7, #0]
		return true;
    3bd0:	e6d5      	b.n	397e <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    3bd2:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    3bd6:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3bd8:	2800      	cmp	r0, #0
    3bda:	f6bf af71 	bge.w	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
		switch (setup->bRequest) {
    3bde:	2a00      	cmp	r2, #0
    3be0:	f43f af66 	beq.w	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3be4:	2a0a      	cmp	r2, #10
    3be6:	f47f aed8 	bne.w	399a <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    3bea:	782a      	ldrb	r2, [r5, #0]
    3bec:	2a00      	cmp	r2, #0
    3bee:	f43f aed4 	beq.w	399a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3bf2:	7869      	ldrb	r1, [r5, #1]
    3bf4:	2904      	cmp	r1, #4
    3bf6:	f47f af61 	bne.w	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3bfa:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    3bfc:	428b      	cmp	r3, r1
    3bfe:	f47f af5d 	bne.w	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3c02:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    3c04:	bf96      	itet	ls
    3c06:	199b      	addls	r3, r3, r6
	return 0;
    3c08:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    3c0a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    3c0e:	f88c 3000 	strb.w	r3, [ip]
    3c12:	e6d4      	b.n	39be <usb_handle_standard_request+0x96>

00003c14 <usb_data_to_host>:
{
    3c14:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    3c16:	4c13      	ldr	r4, [pc, #76]	; (3c64 <usb_data_to_host+0x50>)
    3c18:	7d23      	ldrb	r3, [r4, #20]
    3c1a:	b9cb      	cbnz	r3, 3c50 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    3c1c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3c1e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    3c20:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3c22:	ab01      	add	r3, sp, #4
    3c24:	2080      	movs	r0, #128	; 0x80
    3c26:	f008 fc58 	bl	c4da <usb_write>
		usb_dev.data_buf += chunk;
    3c2a:	9a01      	ldr	r2, [sp, #4]
    3c2c:	68a3      	ldr	r3, [r4, #8]
    3c2e:	4413      	add	r3, r2
    3c30:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3c32:	68e3      	ldr	r3, [r4, #12]
    3c34:	1a9b      	subs	r3, r3, r2
    3c36:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    3c38:	b943      	cbnz	r3, 3c4c <usb_data_to_host+0x38>
    3c3a:	b13a      	cbz	r2, 3c4c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    3c3c:	6923      	ldr	r3, [r4, #16]
    3c3e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    3c40:	429a      	cmp	r2, r3
    3c42:	dd03      	ble.n	3c4c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    3c44:	069b      	lsls	r3, r3, #26
    3c46:	d101      	bne.n	3c4c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    3c48:	2301      	movs	r3, #1
    3c4a:	7523      	strb	r3, [r4, #20]
}
    3c4c:	b002      	add	sp, #8
    3c4e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    3c50:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3c52:	461a      	mov	r2, r3
    3c54:	4619      	mov	r1, r3
    3c56:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    3c58:	7523      	strb	r3, [r4, #20]
}
    3c5a:	b002      	add	sp, #8
    3c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3c60:	f002 bda4 	b.w	67ac <usb_dc_ep_write>
    3c64:	20000cb0 	.word	0x20000cb0

00003c68 <usb_handle_control_transfer>:
{
    3c68:	b570      	push	{r4, r5, r6, lr}
    3c6a:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    3c6c:	2300      	movs	r3, #0
{
    3c6e:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    3c70:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    3c72:	4606      	mov	r6, r0
    3c74:	2800      	cmp	r0, #0
    3c76:	d168      	bne.n	3d4a <usb_handle_control_transfer+0xe2>
    3c78:	2900      	cmp	r1, #0
    3c7a:	d140      	bne.n	3cfe <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3c7c:	2208      	movs	r2, #8
    3c7e:	460b      	mov	r3, r1
    3c80:	eb0d 0102 	add.w	r1, sp, r2
    3c84:	f008 fe51 	bl	c92a <usb_dc_ep_read>
    3c88:	2800      	cmp	r0, #0
    3c8a:	da04      	bge.n	3c96 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3c8c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3c8e:	f002 fced 	bl	666c <usb_dc_ep_set_stall>
}
    3c92:	b00a      	add	sp, #40	; 0x28
    3c94:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    3c96:	4c32      	ldr	r4, [pc, #200]	; (3d60 <usb_handle_control_transfer+0xf8>)
    3c98:	9a02      	ldr	r2, [sp, #8]
    3c9a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3c9c:	9a03      	ldr	r2, [sp, #12]
    3c9e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    3ca0:	f104 0238 	add.w	r2, r4, #56	; 0x38
    3ca4:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    3ca6:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3caa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    3cae:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    3cb0:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    3cb2:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3cb6:	db15      	blt.n	3ce4 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3cb8:	2b80      	cmp	r3, #128	; 0x80
    3cba:	d90f      	bls.n	3cdc <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
    3cbc:	4b29      	ldr	r3, [pc, #164]	; (3d64 <usb_handle_control_transfer+0xfc>)
    3cbe:	9309      	str	r3, [sp, #36]	; 0x24
    3cc0:	2302      	movs	r3, #2
    3cc2:	9308      	str	r3, [sp, #32]
    3cc4:	4828      	ldr	r0, [pc, #160]	; (3d68 <usb_handle_control_transfer+0x100>)
    3cc6:	462b      	mov	r3, r5
    3cc8:	aa08      	add	r2, sp, #32
    3cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3cce:	f7ff f81f 	bl	2d10 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3cd2:	2080      	movs	r0, #128	; 0x80
    3cd4:	f002 fcca 	bl	666c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3cd8:	4628      	mov	r0, r5
    3cda:	e7d8      	b.n	3c8e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    3cdc:	b113      	cbz	r3, 3ce4 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
    3cde:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    3ce2:	e7d6      	b.n	3c92 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    3ce4:	f7ff fccc 	bl	3680 <usb_handle_request.constprop.0>
    3ce8:	2800      	cmp	r0, #0
    3cea:	d0cf      	beq.n	3c8c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    3cec:	88e2      	ldrh	r2, [r4, #6]
    3cee:	6923      	ldr	r3, [r4, #16]
    3cf0:	429a      	cmp	r2, r3
    3cf2:	bfd4      	ite	le
    3cf4:	60e2      	strle	r2, [r4, #12]
    3cf6:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    3cf8:	f7ff ff8c 	bl	3c14 <usb_data_to_host>
    3cfc:	e7c9      	b.n	3c92 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    3cfe:	4c18      	ldr	r4, [pc, #96]	; (3d60 <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3d00:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    3d04:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3d06:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    3d08:	dc05      	bgt.n	3d16 <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3d0a:	4602      	mov	r2, r0
    3d0c:	f008 fe0d 	bl	c92a <usb_dc_ep_read>
    3d10:	2800      	cmp	r0, #0
    3d12:	dabe      	bge.n	3c92 <usb_handle_control_transfer+0x2a>
    3d14:	e7ba      	b.n	3c8c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3d16:	f008 fe08 	bl	c92a <usb_dc_ep_read>
    3d1a:	2800      	cmp	r0, #0
    3d1c:	da04      	bge.n	3d28 <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d1e:	2080      	movs	r0, #128	; 0x80
    3d20:	f002 fca4 	bl	666c <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3d24:	4630      	mov	r0, r6
    3d26:	e7b2      	b.n	3c8e <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    3d28:	9a01      	ldr	r2, [sp, #4]
    3d2a:	68a3      	ldr	r3, [r4, #8]
    3d2c:	4413      	add	r3, r2
    3d2e:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3d30:	68e3      	ldr	r3, [r4, #12]
    3d32:	1a9b      	subs	r3, r3, r2
    3d34:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    3d36:	2b00      	cmp	r3, #0
    3d38:	d1ab      	bne.n	3c92 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    3d3a:	f104 0338 	add.w	r3, r4, #56	; 0x38
    3d3e:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    3d40:	f7ff fc9e 	bl	3680 <usb_handle_request.constprop.0>
    3d44:	2800      	cmp	r0, #0
    3d46:	d1d7      	bne.n	3cf8 <usb_handle_control_transfer+0x90>
    3d48:	e7a0      	b.n	3c8c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    3d4a:	2880      	cmp	r0, #128	; 0x80
    3d4c:	d1a1      	bne.n	3c92 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    3d4e:	4b04      	ldr	r3, [pc, #16]	; (3d60 <usb_handle_control_transfer+0xf8>)
    3d50:	68da      	ldr	r2, [r3, #12]
    3d52:	2a00      	cmp	r2, #0
    3d54:	d1d0      	bne.n	3cf8 <usb_handle_control_transfer+0x90>
    3d56:	7d1b      	ldrb	r3, [r3, #20]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d1cd      	bne.n	3cf8 <usb_handle_control_transfer+0x90>
    3d5c:	e799      	b.n	3c92 <usb_handle_control_transfer+0x2a>
    3d5e:	bf00      	nop
    3d60:	20000cb0 	.word	0x20000cb0
    3d64:	0000e227 	.word	0x0000e227
    3d68:	0000da2c 	.word	0x0000da2c

00003d6c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    3d6c:	4b05      	ldr	r3, [pc, #20]	; (3d84 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    3d6e:	4a06      	ldr	r2, [pc, #24]	; (3d88 <usb_set_config+0x1c>)
    3d70:	629a      	str	r2, [r3, #40]	; 0x28
    3d72:	4a06      	ldr	r2, [pc, #24]	; (3d8c <usb_set_config+0x20>)
    3d74:	62da      	str	r2, [r3, #44]	; 0x2c
    3d76:	4a06      	ldr	r2, [pc, #24]	; (3d90 <usb_set_config+0x24>)
    3d78:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    3d7a:	4a06      	ldr	r2, [pc, #24]	; (3d94 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    3d7c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    3d7e:	619a      	str	r2, [r3, #24]
}
    3d80:	2000      	movs	r0, #0
    3d82:	4770      	bx	lr
    3d84:	20000cb0 	.word	0x20000cb0
    3d88:	00003929 	.word	0x00003929
    3d8c:	0000355d 	.word	0x0000355d
    3d90:	000035fd 	.word	0x000035fd
    3d94:	0000359d 	.word	0x0000359d

00003d98 <usb_device_init>:
{
    3d98:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    3d9a:	4b09      	ldr	r3, [pc, #36]	; (3dc0 <usb_device_init+0x28>)
    3d9c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    3da0:	b954      	cbnz	r4, 3db8 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    3da2:	f000 f8d9 	bl	3f58 <usb_get_device_descriptor>
	if (!device_descriptor) {
    3da6:	b918      	cbnz	r0, 3db0 <usb_device_init+0x18>
}
    3da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dac:	f7ff bc7e 	b.w	36ac <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    3db0:	f7ff ffdc 	bl	3d6c <usb_set_config>
	return 0;
    3db4:	4620      	mov	r0, r4
}
    3db6:	bd10      	pop	{r4, pc}
		return -EALREADY;
    3db8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3dbc:	e7fb      	b.n	3db6 <usb_device_init+0x1e>
    3dbe:	bf00      	nop
    3dc0:	20000cb0 	.word	0x20000cb0

00003dc4 <usb_enable>:
{
    3dc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3dc8:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    3dca:	4d3b      	ldr	r5, [pc, #236]	; (3eb8 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    3dcc:	483b      	ldr	r0, [pc, #236]	; (3ebc <usb_enable+0xf8>)
    3dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3dd6:	f006 f9a5 	bl	a124 <z_impl_k_mutex_lock>
    3dda:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    3dde:	2e00      	cmp	r6, #0
    3de0:	d167      	bne.n	3eb2 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    3de2:	4837      	ldr	r0, [pc, #220]	; (3ec0 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    3de4:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    3de6:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    3de8:	f002 fe54 	bl	6a94 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    3dec:	f002 fb9c 	bl	6528 <usb_dc_attach>
	if (ret < 0) {
    3df0:	1e04      	subs	r4, r0, #0
    3df2:	db42      	blt.n	3e7a <usb_enable+0xb6>
	ret = usb_transfer_init();
    3df4:	f000 fbb6 	bl	4564 <usb_transfer_init>
	if (ret < 0) {
    3df8:	1e04      	subs	r4, r0, #0
    3dfa:	db3e      	blt.n	3e7a <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3dfc:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    3dfe:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3e00:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    3e04:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3e08:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3e0c:	f002 fbfa 	bl	6604 <usb_dc_ep_configure>
	if (ret < 0) {
    3e10:	1e04      	subs	r4, r0, #0
    3e12:	db32      	blt.n	3e7a <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3e14:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    3e16:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3e18:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3e1c:	f002 fbf2 	bl	6604 <usb_dc_ep_configure>
	if (ret < 0) {
    3e20:	1e04      	subs	r4, r0, #0
    3e22:	db2a      	blt.n	3e7a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    3e24:	4927      	ldr	r1, [pc, #156]	; (3ec4 <usb_enable+0x100>)
    3e26:	4630      	mov	r0, r6
    3e28:	f002 fe20 	bl	6a6c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3e2c:	1e04      	subs	r4, r0, #0
    3e2e:	db24      	blt.n	3e7a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    3e30:	4924      	ldr	r1, [pc, #144]	; (3ec4 <usb_enable+0x100>)
    3e32:	4638      	mov	r0, r7
    3e34:	f002 fe1a 	bl	6a6c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3e38:	1e04      	subs	r4, r0, #0
    3e3a:	db1e      	blt.n	3e7a <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e3c:	4c22      	ldr	r4, [pc, #136]	; (3ec8 <usb_enable+0x104>)
    3e3e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3ecc <usb_enable+0x108>
    3e42:	4544      	cmp	r4, r8
    3e44:	d320      	bcc.n	3e88 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3e46:	2000      	movs	r0, #0
    3e48:	f002 fc86 	bl	6758 <usb_dc_ep_enable>
	if (ret < 0) {
    3e4c:	1e04      	subs	r4, r0, #0
    3e4e:	db14      	blt.n	3e7a <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    3e50:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3e54:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    3e56:	f043 0301 	orr.w	r3, r3, #1
    3e5a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3e5e:	f002 fc7b 	bl	6758 <usb_dc_ep_enable>
	if (ret < 0) {
    3e62:	1e04      	subs	r4, r0, #0
    3e64:	db09      	blt.n	3e7a <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    3e66:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3e6e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    3e72:	2301      	movs	r3, #1
    3e74:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    3e78:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    3e7a:	4810      	ldr	r0, [pc, #64]	; (3ebc <usb_enable+0xf8>)
    3e7c:	f006 f9cc 	bl	a218 <z_impl_k_mutex_unlock>
}
    3e80:	4620      	mov	r0, r4
    3e82:	b002      	add	sp, #8
    3e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    3e88:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3e8a:	2600      	movs	r6, #0
    3e8c:	7f22      	ldrb	r2, [r4, #28]
    3e8e:	b2f3      	uxtb	r3, r6
    3e90:	429a      	cmp	r2, r3
    3e92:	d801      	bhi.n	3e98 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3e94:	3424      	adds	r4, #36	; 0x24
    3e96:	e7d4      	b.n	3e42 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    3e98:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    3e9c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    3ea0:	7910      	ldrb	r0, [r2, #4]
    3ea2:	f002 fde3 	bl	6a6c <usb_dc_ep_set_callback>
    3ea6:	3601      	adds	r6, #1
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d0ef      	beq.n	3e8c <usb_enable+0xc8>
    3eac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3eb0:	e7e3      	b.n	3e7a <usb_enable+0xb6>
		ret = -EALREADY;
    3eb2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3eb6:	e7e0      	b.n	3e7a <usb_enable+0xb6>
    3eb8:	20000cb0 	.word	0x20000cb0
    3ebc:	20000304 	.word	0x20000304
    3ec0:	00003759 	.word	0x00003759
    3ec4:	00003c69 	.word	0x00003c69
    3ec8:	20000404 	.word	0x20000404
    3ecc:	2000044c 	.word	0x2000044c

00003ed0 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3ed0:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3ed2:	4b1f      	ldr	r3, [pc, #124]	; (3f50 <usb_update_sn_string_descriptor+0x80>)
{
    3ed4:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    3ed6:	aa05      	add	r2, sp, #20
    3ed8:	f103 0510 	add.w	r5, r3, #16
    3edc:	6818      	ldr	r0, [r3, #0]
    3ede:	6859      	ldr	r1, [r3, #4]
    3ee0:	4614      	mov	r4, r2
    3ee2:	c403      	stmia	r4!, {r0, r1}
    3ee4:	3308      	adds	r3, #8
    3ee6:	42ab      	cmp	r3, r5
    3ee8:	4622      	mov	r2, r4
    3eea:	d1f7      	bne.n	3edc <usb_update_sn_string_descriptor+0xc>
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3ef0:	2210      	movs	r2, #16
    3ef2:	2100      	movs	r1, #0
    3ef4:	a801      	add	r0, sp, #4
    3ef6:	f008 fc92 	bl	c81e <memset>
	memset(sn, 0, sizeof(sn));
    3efa:	2212      	movs	r2, #18
    3efc:	2100      	movs	r1, #0
    3efe:	4815      	ldr	r0, [pc, #84]	; (3f54 <usb_update_sn_string_descriptor+0x84>)
    3f00:	f008 fc8d 	bl	c81e <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3f04:	2110      	movs	r1, #16
    3f06:	a801      	add	r0, sp, #4
    3f08:	f008 fe02 	bl	cb10 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    3f0c:	2800      	cmp	r0, #0
    3f0e:	dd1b      	ble.n	3f48 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    3f10:	2808      	cmp	r0, #8
    3f12:	bfb8      	it	lt
    3f14:	2008      	movlt	r0, #8
    3f16:	3809      	subs	r0, #9
    3f18:	ab01      	add	r3, sp, #4
    3f1a:	490e      	ldr	r1, [pc, #56]	; (3f54 <usb_update_sn_string_descriptor+0x84>)
    3f1c:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3f1e:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3f20:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3f24:	ac0a      	add	r4, sp, #40	; 0x28
    3f26:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3f2a:	f003 030f 	and.w	r3, r3, #15
    3f2e:	3328      	adds	r3, #40	; 0x28
    3f30:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    3f32:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3f34:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3f38:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3f3c:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    3f3e:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3f40:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    3f42:	f101 0102 	add.w	r1, r1, #2
    3f46:	d1eb      	bne.n	3f20 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    3f48:	4802      	ldr	r0, [pc, #8]	; (3f54 <usb_update_sn_string_descriptor+0x84>)
    3f4a:	b00b      	add	sp, #44	; 0x2c
    3f4c:	bd30      	pop	{r4, r5, pc}
    3f4e:	bf00      	nop
    3f50:	0000e24b 	.word	0x0000e24b
    3f54:	200021bf 	.word	0x200021bf

00003f58 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    3f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f5c:	4c83      	ldr	r4, [pc, #524]	; (416c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16c>)
    3f5e:	b08b      	sub	sp, #44	; 0x2c
    3f60:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    3f62:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    3f64:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    3f68:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    3f6a:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3f6c:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    3f6e:	7823      	ldrb	r3, [r4, #0]
    3f70:	b943      	cbnz	r3, 3f84 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    3f72:	4b7f      	ldr	r3, [pc, #508]	; (4170 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x170>)
    3f74:	3402      	adds	r4, #2
    3f76:	429c      	cmp	r4, r3
    3f78:	d1f3      	bne.n	3f62 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3f7a:	487c      	ldr	r0, [pc, #496]	; (416c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16c>)
}
    3f7c:	372c      	adds	r7, #44	; 0x2c
    3f7e:	46bd      	mov	sp, r7
    3f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    3f84:	7863      	ldrb	r3, [r4, #1]
    3f86:	2b05      	cmp	r3, #5
    3f88:	d805      	bhi.n	3f96 <usb_get_device_descriptor+0x3e>
    3f8a:	e8df f003 	tbb	[pc, r3]
    3f8e:	04a6      	.short	0x04a6
    3f90:	3f07a603 	.word	0x3f07a603
    3f94:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3f96:	7823      	ldrb	r3, [r4, #0]
    3f98:	441c      	add	r4, r3
    3f9a:	e7e8      	b.n	3f6e <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    3f9c:	78e3      	ldrb	r3, [r4, #3]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d1f9      	bne.n	3f96 <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    3fa2:	78a3      	ldrb	r3, [r4, #2]
    3fa4:	b343      	cbz	r3, 3ff8 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    3fa6:	f10a 0a01 	add.w	sl, sl, #1
    3faa:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    3fae:	e7f2      	b.n	3f96 <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    3fb0:	686a      	ldr	r2, [r5, #4]
    3fb2:	4294      	cmp	r4, r2
    3fb4:	d023      	beq.n	3ffe <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3fb6:	3524      	adds	r5, #36	; 0x24
    3fb8:	429d      	cmp	r5, r3
    3fba:	d3f9      	bcc.n	3fb0 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    3fbc:	466d      	mov	r5, sp
    3fbe:	b088      	sub	sp, #32
    3fc0:	466a      	mov	r2, sp
    3fc2:	4b6c      	ldr	r3, [pc, #432]	; (4174 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x174>)
    3fc4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3fc8:	2303      	movs	r3, #3
    3fca:	f842 3f10 	str.w	r3, [r2, #16]!
    3fce:	486a      	ldr	r0, [pc, #424]	; (4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>)
    3fd0:	2300      	movs	r3, #0
    3fd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3fd6:	f7fe fe9b 	bl	2d10 <z_impl_z_log_msg_static_create>
    3fda:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    3fdc:	4b67      	ldr	r3, [pc, #412]	; (417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>)
    3fde:	627b      	str	r3, [r7, #36]	; 0x24
    3fe0:	2302      	movs	r3, #2
    3fe2:	623b      	str	r3, [r7, #32]
    3fe4:	4864      	ldr	r0, [pc, #400]	; (4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>)
    3fe6:	2300      	movs	r3, #0
    3fe8:	f107 0220 	add.w	r2, r7, #32
    3fec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ff0:	f7fe fe8e 	bl	2d10 <z_impl_z_log_msg_static_create>
		return NULL;
    3ff4:	2000      	movs	r0, #0
    3ff6:	e7c1      	b.n	3f7c <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3ff8:	4d61      	ldr	r5, [pc, #388]	; (4180 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x180>)
    3ffa:	4b62      	ldr	r3, [pc, #392]	; (4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>)
    3ffc:	e7dc      	b.n	3fb8 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    3ffe:	68ab      	ldr	r3, [r5, #8]
    4000:	2b00      	cmp	r3, #0
    4002:	d0d0      	beq.n	3fa6 <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    4004:	4651      	mov	r1, sl
    4006:	4620      	mov	r0, r4
    4008:	4798      	blx	r3
    400a:	e7cc      	b.n	3fa6 <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    400c:	2d00      	cmp	r5, #0
    400e:	d162      	bne.n	40d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd6>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4010:	4b5d      	ldr	r3, [pc, #372]	; (4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>)
				LOG_ERR("Failed to validate endpoints");
    4012:	627b      	str	r3, [r7, #36]	; 0x24
    4014:	2302      	movs	r3, #2
    4016:	623b      	str	r3, [r7, #32]
    4018:	4857      	ldr	r0, [pc, #348]	; (4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>)
    401a:	2300      	movs	r3, #0
    401c:	f107 0220 	add.w	r2, r7, #32
    4020:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4024:	f7fe fe74 	bl	2d10 <z_impl_z_log_msg_static_create>
				return -1;
    4028:	e7d8      	b.n	3fdc <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    402a:	6a29      	ldr	r1, [r5, #32]
    402c:	78a0      	ldrb	r0, [r4, #2]
    402e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    4032:	790b      	ldrb	r3, [r1, #4]
    4034:	4298      	cmp	r0, r3
    4036:	d005      	beq.n	4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    4038:	3201      	adds	r2, #1
    403a:	7f2b      	ldrb	r3, [r5, #28]
    403c:	429a      	cmp	r2, r3
    403e:	d3f4      	bcc.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
				LOG_ERR("Failed to validate endpoints");
    4040:	4b52      	ldr	r3, [pc, #328]	; (418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>)
    4042:	e7e6      	b.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    4044:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    4048:	78e0      	ldrb	r0, [r4, #3]
    404a:	f000 0003 	and.w	r0, r0, #3
    404e:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    4050:	7920      	ldrb	r0, [r4, #4]
    4052:	f894 c005 	ldrb.w	ip, [r4, #5]
    4056:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    405a:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    405c:	f994 0002 	ldrsb.w	r0, [r4, #2]
    4060:	2800      	cmp	r0, #0
    4062:	fa5f f389 	uxtb.w	r3, r9
    4066:	da28      	bge.n	40ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xba>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    4068:	f109 0010 	add.w	r0, r9, #16
    406c:	f04f 0c01 	mov.w	ip, #1
    4070:	fa0c f000 	lsl.w	r0, ip, r0
    4074:	ea10 0f0b 	tst.w	r0, fp
    4078:	d127      	bne.n	40ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xca>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    407a:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    407e:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    4080:	f107 0010 	add.w	r0, r7, #16
    4084:	e9c7 3101 	strd	r3, r1, [r7, #4]
    4088:	60fa      	str	r2, [r7, #12]
    408a:	f002 fa91 	bl	65b0 <usb_dc_ep_check_cap>
    408e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    4092:	687b      	ldr	r3, [r7, #4]
    4094:	b9c8      	cbnz	r0, 40ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xca>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    4096:	7c3a      	ldrb	r2, [r7, #16]
    4098:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    409a:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    409e:	bf18      	it	ne
    40a0:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    40a2:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    40a4:	bf18      	it	ne
    40a6:	b2db      	uxtbne	r3, r3
    40a8:	f04f 0201 	mov.w	r2, #1
    40ac:	bf14      	ite	ne
    40ae:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    40b0:	fa02 f209 	lsleq.w	r2, r2, r9
    40b4:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    40b8:	e76d      	b.n	3f96 <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    40ba:	2001      	movs	r0, #1
    40bc:	fa00 f009 	lsl.w	r0, r0, r9
    40c0:	ea10 0f0b 	tst.w	r0, fp
    40c4:	d101      	bne.n	40ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xca>
    40c6:	4618      	mov	r0, r3
    40c8:	e7d9      	b.n	407e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    40ca:	f109 0901 	add.w	r9, r9, #1
    40ce:	f1b9 0f10 	cmp.w	r9, #16
    40d2:	d1b9      	bne.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
    40d4:	e7b0      	b.n	4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    40d6:	2200      	movs	r2, #0
    40d8:	e7af      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    40da:	2e03      	cmp	r6, #3
    40dc:	d12a      	bne.n	4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    40de:	f7ff fef7 	bl	3ed0 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    40e2:	4681      	mov	r9, r0
    40e4:	b1a8      	cbz	r0, 4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
	runtime_sn_len = strlen(runtime_sn);
    40e6:	f008 fb73 	bl	c7d0 <strlen>
	if (!runtime_sn_len) {
    40ea:	60f8      	str	r0, [r7, #12]
    40ec:	b188      	cbz	r0, 4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    40ee:	4828      	ldr	r0, [pc, #160]	; (4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>)
    40f0:	f008 fb6e 	bl	c7d0 <strlen>
	if (runtime_sn_len != default_sn_len) {
    40f4:	68fa      	ldr	r2, [r7, #12]
    40f6:	4282      	cmp	r2, r0
    40f8:	d017      	beq.n	412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
		LOG_ERR("the new SN descriptor doesn't have the same "
    40fa:	4b26      	ldr	r3, [pc, #152]	; (4194 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x194>)
    40fc:	627b      	str	r3, [r7, #36]	; 0x24
    40fe:	2302      	movs	r3, #2
    4100:	623b      	str	r3, [r7, #32]
    4102:	481d      	ldr	r0, [pc, #116]	; (4178 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x178>)
    4104:	2300      	movs	r3, #0
    4106:	f107 0220 	add.w	r2, r7, #32
    410a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    410e:	f7fe fdff 	bl	2d10 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4112:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4114:	f06f 0102 	mvn.w	r1, #2
    4118:	18e2      	adds	r2, r4, r3
    411a:	1b09      	subs	r1, r1, r4
    411c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    4120:	42d1      	cmn	r1, r2
    4122:	d50e      	bpl.n	4142 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x142>
			str_descr_idx += 1U;
    4124:	3601      	adds	r6, #1
    4126:	b2f6      	uxtb	r6, r6
			break;
    4128:	e735      	b.n	3f96 <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    412a:	4649      	mov	r1, r9
    412c:	1ca0      	adds	r0, r4, #2
    412e:	f008 fb6b 	bl	c808 <memcpy>
			if (str_descr_idx) {
    4132:	e7ee      	b.n	4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
    4134:	2e00      	cmp	r6, #0
    4136:	d1ec      	bne.n	4112 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x112>
				if (!cfg_descr) {
    4138:	f1b8 0f00 	cmp.w	r8, #0
    413c:	d10a      	bne.n	4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>
					LOG_ERR("Incomplete device descriptor");
    413e:	4b16      	ldr	r3, [pc, #88]	; (4198 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x198>)
    4140:	e767      	b.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
		buf[i] = 0U;
    4142:	f04f 0000 	mov.w	r0, #0
    4146:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    414a:	f813 0901 	ldrb.w	r0, [r3], #-1
    414e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    4152:	e7e5      	b.n	4120 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x120>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4154:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4158:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    415c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4160:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4164:	f888 a004 	strb.w	sl, [r8, #4]
    4168:	e7dc      	b.n	4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>
    416a:	bf00      	nop
    416c:	20000338 	.word	0x20000338
    4170:	20000402 	.word	0x20000402
    4174:	0000e25c 	.word	0x0000e25c
    4178:	0000da24 	.word	0x0000da24
    417c:	0000e342 	.word	0x0000e342
    4180:	20000404 	.word	0x20000404
    4184:	2000044c 	.word	0x2000044c
    4188:	0000e27c 	.word	0x0000e27c
    418c:	0000e2bd 	.word	0x0000e2bd
    4190:	0000e24b 	.word	0x0000e24b
    4194:	0000e2da 	.word	0x0000e2da
    4198:	0000e325 	.word	0x0000e325

0000419c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    419c:	b510      	push	{r4, lr}
    419e:	4b09      	ldr	r3, [pc, #36]	; (41c4 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    41a0:	2100      	movs	r1, #0
    41a2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    41a4:	781c      	ldrb	r4, [r3, #0]
    41a6:	4284      	cmp	r4, r0
    41a8:	d104      	bne.n	41b4 <usb_ep_get_transfer+0x18>
    41aa:	685c      	ldr	r4, [r3, #4]
    41ac:	b114      	cbz	r4, 41b4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    41ae:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    41b2:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    41b4:	3101      	adds	r1, #1
    41b6:	2904      	cmp	r1, #4
    41b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    41bc:	d1f2      	bne.n	41a4 <usb_ep_get_transfer+0x8>
	return NULL;
    41be:	2000      	movs	r0, #0
    41c0:	e7f7      	b.n	41b2 <usb_ep_get_transfer+0x16>
    41c2:	bf00      	nop
    41c4:	20000d78 	.word	0x20000d78

000041c8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    41c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41cc:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    41ce:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    41d2:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    41d6:	3310      	adds	r3, #16
{
    41d8:	af00      	add	r7, sp, #0
    41da:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    41dc:	d111      	bne.n	4202 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    41de:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    41e0:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    41e4:	f013 0602 	ands.w	r6, r3, #2
    41e8:	d04e      	beq.n	4288 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    41ea:	bb0a      	cbnz	r2, 4230 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    41ec:	f013 0304 	ands.w	r3, r3, #4
    41f0:	d104      	bne.n	41fc <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    41f2:	461a      	mov	r2, r3
    41f4:	4619      	mov	r1, r3
    41f6:	4628      	mov	r0, r5
    41f8:	f008 f96f 	bl	c4da <usb_write>
			}
			trans->status = 0;
    41fc:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    41fe:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4202:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4206:	3310      	adds	r3, #16
    4208:	d00e      	beq.n	4228 <usb_transfer_work+0x60>
    420a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    420e:	b15e      	cbz	r6, 4228 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4210:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    4214:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    4218:	f008 ff08 	bl	d02c <k_is_in_isr>
    421c:	2800      	cmp	r0, #0
    421e:	d06f      	beq.n	4300 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4220:	483d      	ldr	r0, [pc, #244]	; (4318 <usb_transfer_work+0x150>)
    4222:	4621      	mov	r1, r4
    4224:	f008 fff8 	bl	d218 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    4228:	370c      	adds	r7, #12
    422a:	46bd      	mov	sp, r7
    422c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4230:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4234:	1d3b      	adds	r3, r7, #4
    4236:	4628      	mov	r0, r5
    4238:	f008 f94f 	bl	c4da <usb_write>
		if (ret) {
    423c:	b198      	cbz	r0, 4266 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    423e:	466e      	mov	r6, sp
    4240:	b088      	sub	sp, #32
    4242:	466a      	mov	r2, sp
    4244:	4b35      	ldr	r3, [pc, #212]	; (431c <usb_transfer_work+0x154>)
    4246:	61d5      	str	r5, [r2, #28]
    4248:	e9c2 3005 	strd	r3, r0, [r2, #20]
    424c:	2304      	movs	r3, #4
    424e:	f842 3f10 	str.w	r3, [r2, #16]!
    4252:	4833      	ldr	r0, [pc, #204]	; (4320 <usb_transfer_work+0x158>)
    4254:	2300      	movs	r3, #0
    4256:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    425a:	f7fe fd59 	bl	2d10 <z_impl_z_log_msg_static_create>
    425e:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    4260:	f06f 0315 	mvn.w	r3, #21
    4264:	e7cb      	b.n	41fe <usb_transfer_work+0x36>
		trans->buffer += bytes;
    4266:	687a      	ldr	r2, [r7, #4]
    4268:	f854 3c24 	ldr.w	r3, [r4, #-36]
    426c:	4413      	add	r3, r2
    426e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4272:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4276:	1a9b      	subs	r3, r3, r2
    4278:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    427c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4280:	4413      	add	r3, r2
    4282:	f844 3c1c 	str.w	r3, [r4, #-28]
    4286:	e7bc      	b.n	4202 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4288:	f850 1c24 	ldr.w	r1, [r0, #-36]
    428c:	1d3b      	adds	r3, r7, #4
    428e:	4628      	mov	r0, r5
    4290:	f002 fb2e 	bl	68f0 <usb_dc_ep_read_wait>
		if (ret) {
    4294:	b188      	cbz	r0, 42ba <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4296:	46e8      	mov	r8, sp
    4298:	b088      	sub	sp, #32
    429a:	466a      	mov	r2, sp
    429c:	4b1f      	ldr	r3, [pc, #124]	; (431c <usb_transfer_work+0x154>)
    429e:	61d5      	str	r5, [r2, #28]
    42a0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    42a4:	2304      	movs	r3, #4
    42a6:	f842 3f10 	str.w	r3, [r2, #16]!
    42aa:	481d      	ldr	r0, [pc, #116]	; (4320 <usb_transfer_work+0x158>)
    42ac:	4633      	mov	r3, r6
    42ae:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    42b2:	f7fe fd2d 	bl	2d10 <z_impl_z_log_msg_static_create>
    42b6:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    42b8:	e7d2      	b.n	4260 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    42ba:	687e      	ldr	r6, [r7, #4]
    42bc:	f854 3c24 	ldr.w	r3, [r4, #-36]
    42c0:	4433      	add	r3, r6
    42c2:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    42c6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    42ca:	1b9b      	subs	r3, r3, r6
    42cc:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    42d0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    42d4:	4433      	add	r3, r6
    42d6:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    42da:	2e00      	cmp	r6, #0
    42dc:	d08e      	beq.n	41fc <usb_transfer_work+0x34>
    42de:	4628      	mov	r0, r5
    42e0:	f002 fbde 	bl	6aa0 <usb_dc_ep_mps>
    42e4:	fbb6 f3f0 	udiv	r3, r6, r0
    42e8:	fb03 6610 	mls	r6, r3, r0, r6
    42ec:	2e00      	cmp	r6, #0
    42ee:	d185      	bne.n	41fc <usb_transfer_work+0x34>
    42f0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d081      	beq.n	41fc <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    42f8:	4628      	mov	r0, r5
    42fa:	f002 fb5f 	bl	69bc <usb_dc_ep_read_continue>
    42fe:	e780      	b.n	4202 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    4300:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    4304:	f1a4 0010 	sub.w	r0, r4, #16
    4308:	f005 fff6 	bl	a2f8 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    430c:	464a      	mov	r2, r9
    430e:	4641      	mov	r1, r8
    4310:	4628      	mov	r0, r5
    4312:	47b0      	blx	r6
    4314:	e788      	b.n	4228 <usb_transfer_work+0x60>
    4316:	bf00      	nop
    4318:	20000910 	.word	0x20000910
    431c:	0000e370 	.word	0x0000e370
    4320:	0000da44 	.word	0x0000da44

00004324 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    4324:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4326:	1e4b      	subs	r3, r1, #1
    4328:	2b01      	cmp	r3, #1
{
    432a:	b088      	sub	sp, #32
    432c:	4606      	mov	r6, r0
    432e:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4330:	d818      	bhi.n	4364 <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4332:	f7ff ff33 	bl	419c <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    4336:	4604      	mov	r4, r0
    4338:	b9b0      	cbnz	r0, 4368 <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
    433a:	2d01      	cmp	r5, #1
    433c:	d112      	bne.n	4364 <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    433e:	ab01      	add	r3, sp, #4
    4340:	2201      	movs	r2, #1
    4342:	a902      	add	r1, sp, #8
    4344:	4630      	mov	r0, r6
    4346:	f002 fad3 	bl	68f0 <usb_dc_ep_read_wait>
			} while (bytes);
    434a:	9b01      	ldr	r3, [sp, #4]
    434c:	2b00      	cmp	r3, #0
    434e:	d1f6      	bne.n	433e <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    4350:	4a0f      	ldr	r2, [pc, #60]	; (4390 <usb_transfer_ep_callback+0x6c>)
    4352:	9207      	str	r2, [sp, #28]
    4354:	2202      	movs	r2, #2
    4356:	9206      	str	r2, [sp, #24]
    4358:	480e      	ldr	r0, [pc, #56]	; (4394 <usb_transfer_ep_callback+0x70>)
    435a:	aa06      	add	r2, sp, #24
    435c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4360:	f7fe fcd6 	bl	2d10 <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4364:	b008      	add	sp, #32
    4366:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4368:	f008 fe60 	bl	d02c <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    436c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4370:	b108      	cbz	r0, 4376 <usb_transfer_ep_callback+0x52>
    4372:	2d01      	cmp	r5, #1
    4374:	d105      	bne.n	4382 <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
    4376:	4608      	mov	r0, r1
}
    4378:	b008      	add	sp, #32
    437a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    437e:	f7ff bf23 	b.w	41c8 <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4382:	4805      	ldr	r0, [pc, #20]	; (4398 <usb_transfer_ep_callback+0x74>)
}
    4384:	b008      	add	sp, #32
    4386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    438a:	f008 bf45 	b.w	d218 <k_work_submit_to_queue>
    438e:	bf00      	nop
    4390:	0000e38d 	.word	0x0000e38d
    4394:	0000da44 	.word	0x0000da44
    4398:	20000910 	.word	0x20000910

0000439c <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43a0:	b08b      	sub	sp, #44	; 0x2c
    43a2:	af00      	add	r7, sp, #0
    43a4:	4605      	mov	r5, r0
    43a6:	60b9      	str	r1, [r7, #8]
    43a8:	4616      	mov	r6, r2
    43aa:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    43ac:	f008 f8dd 	bl	c56a <usb_transfer_is_busy>
    43b0:	2800      	cmp	r0, #0
    43b2:	f040 8086 	bne.w	44c2 <usb_transfer+0x126>
	__asm__ volatile(
    43b6:	f04f 0320 	mov.w	r3, #32
    43ba:	f3ef 8211 	mrs	r2, BASEPRI
    43be:	f383 8812 	msr	BASEPRI_MAX, r3
    43c2:	f3bf 8f6f 	isb	sy
    43c6:	f8df a100 	ldr.w	sl, [pc, #256]	; 44c8 <usb_transfer+0x12c>
    43ca:	607a      	str	r2, [r7, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    43cc:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
    43ce:	2300      	movs	r3, #0
    43d0:	2200      	movs	r2, #0
    43d2:	4650      	mov	r0, sl
    43d4:	f005 ffb0 	bl	a338 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    43d8:	4603      	mov	r3, r0
    43da:	b9e8      	cbnz	r0, 4418 <usb_transfer+0x7c>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    43dc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 44cc <usb_transfer+0x130>
    43e0:	ea4f 1889 	mov.w	r8, r9, lsl #6
    43e4:	eb0b 1989 	add.w	r9, fp, r9, lsl #6
    43e8:	f8d9 4004 	ldr.w	r4, [r9, #4]
    43ec:	f114 0f10 	cmn.w	r4, #16
    43f0:	d131      	bne.n	4456 <usb_transfer+0xba>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    43f2:	466e      	mov	r6, sp
    43f4:	b088      	sub	sp, #32
    43f6:	466a      	mov	r2, sp
    43f8:	4935      	ldr	r1, [pc, #212]	; (44d0 <usb_transfer+0x134>)
    43fa:	e9c2 1505 	strd	r1, r5, [r2, #20]
    43fe:	2103      	movs	r1, #3
    4400:	f842 1f10 	str.w	r1, [r2, #16]!
    4404:	4833      	ldr	r0, [pc, #204]	; (44d4 <usb_transfer+0x138>)
    4406:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    440a:	f7fe fc81 	bl	2d10 <z_impl_z_log_msg_static_create>
    440e:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    4410:	4650      	mov	r0, sl
    4412:	f005 ff71 	bl	a2f8 <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    4416:	e014      	b.n	4442 <usb_transfer+0xa6>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4418:	f109 0901 	add.w	r9, r9, #1
    441c:	f1b9 0f04 	cmp.w	r9, #4
    4420:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
    4424:	d1d3      	bne.n	43ce <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
    4426:	4b2c      	ldr	r3, [pc, #176]	; (44d8 <usb_transfer+0x13c>)
    4428:	627b      	str	r3, [r7, #36]	; 0x24
    442a:	2302      	movs	r3, #2
    442c:	623b      	str	r3, [r7, #32]
    442e:	4829      	ldr	r0, [pc, #164]	; (44d4 <usb_transfer+0x138>)
    4430:	2300      	movs	r3, #0
    4432:	f107 0220 	add.w	r2, r7, #32
    4436:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		ret = -ENOMEM;
    443a:	f06f 040b 	mvn.w	r4, #11
    443e:	f7fe fc67 	bl	2d10 <z_impl_z_log_msg_static_create>
	__asm__ volatile(
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	f383 8811 	msr	BASEPRI, r3
    4448:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    444c:	4620      	mov	r0, r4
    444e:	372c      	adds	r7, #44	; 0x2c
    4450:	46bd      	mov	sp, r7
    4452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
    4456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4458:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
    445c:	68fb      	ldr	r3, [r7, #12]
	trans->buffer = data;
    445e:	68ba      	ldr	r2, [r7, #8]
	trans->flags = flags;
    4460:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	trans->priv = cb_data;
    4464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->tsize = 0;
    4466:	f8c9 0010 	str.w	r0, [r9, #16]
	trans->priv = cb_data;
    446a:	f8c9 3018 	str.w	r3, [r9, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    446e:	4628      	mov	r0, r5
	trans->status = -EBUSY;
    4470:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
    4474:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->ep = ep;
    4478:	f80b 5008 	strb.w	r5, [fp, r8]
	trans->status = -EBUSY;
    447c:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4480:	f002 fb0e 	bl	6aa0 <usb_dc_ep_mps>
    4484:	b168      	cbz	r0, 44a2 <usb_transfer+0x106>
    4486:	4628      	mov	r0, r5
    4488:	f002 fb0a 	bl	6aa0 <usb_dc_ep_mps>
    448c:	fbb6 f3f0 	udiv	r3, r6, r0
    4490:	fb03 6610 	mls	r6, r3, r0, r6
    4494:	b12e      	cbz	r6, 44a2 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    4496:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    449a:	f043 0304 	orr.w	r3, r3, #4
    449e:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	079b      	lsls	r3, r3, #30
    44a6:	d507      	bpl.n	44b8 <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    44a8:	f108 012c 	add.w	r1, r8, #44	; 0x2c
    44ac:	480b      	ldr	r0, [pc, #44]	; (44dc <usb_transfer+0x140>)
    44ae:	4459      	add	r1, fp
    44b0:	f008 feb2 	bl	d218 <k_work_submit_to_queue>
	int key, ret = 0;
    44b4:	2400      	movs	r4, #0
    44b6:	e7c4      	b.n	4442 <usb_transfer+0xa6>
		ret = usb_dc_ep_read_continue(ep);
    44b8:	4628      	mov	r0, r5
    44ba:	f002 fa7f 	bl	69bc <usb_dc_ep_read_continue>
    44be:	4604      	mov	r4, r0
    44c0:	e7bf      	b.n	4442 <usb_transfer+0xa6>
		return -EBUSY;
    44c2:	f06f 040f 	mvn.w	r4, #15
    44c6:	e7c1      	b.n	444c <usb_transfer+0xb0>
    44c8:	20000d94 	.word	0x20000d94
    44cc:	20000d78 	.word	0x20000d78
    44d0:	0000e3c2 	.word	0x0000e3c2
    44d4:	0000da44 	.word	0x0000da44
    44d8:	0000e3a7 	.word	0x0000e3a7
    44dc:	20000910 	.word	0x20000910

000044e0 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    44e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    44e2:	f04f 0320 	mov.w	r3, #32
    44e6:	f3ef 8411 	mrs	r4, BASEPRI
    44ea:	f383 8812 	msr	BASEPRI_MAX, r3
    44ee:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    44f2:	f7ff fe53 	bl	419c <usb_ep_get_transfer>
	if (!trans) {
    44f6:	b150      	cbz	r0, 450e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    44f8:	6843      	ldr	r3, [r0, #4]
    44fa:	3310      	adds	r3, #16
    44fc:	d107      	bne.n	450e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    44fe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4502:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4504:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    4508:	4803      	ldr	r0, [pc, #12]	; (4518 <usb_cancel_transfer+0x38>)
    450a:	f008 fe85 	bl	d218 <k_work_submit_to_queue>
	__asm__ volatile(
    450e:	f384 8811 	msr	BASEPRI, r4
    4512:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    4516:	bd10      	pop	{r4, pc}
    4518:	20000910 	.word	0x20000910

0000451c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    451c:	b570      	push	{r4, r5, r6, lr}
    451e:	4c0f      	ldr	r4, [pc, #60]	; (455c <usb_cancel_transfers+0x40>)
    4520:	2504      	movs	r5, #4
	__asm__ volatile(
    4522:	f04f 0320 	mov.w	r3, #32
    4526:	f3ef 8611 	mrs	r6, BASEPRI
    452a:	f383 8812 	msr	BASEPRI_MAX, r3
    452e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    4532:	6863      	ldr	r3, [r4, #4]
    4534:	3310      	adds	r3, #16
    4536:	d107      	bne.n	4548 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    4538:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    453c:	4808      	ldr	r0, [pc, #32]	; (4560 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    453e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4540:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4544:	f008 fe68 	bl	d218 <k_work_submit_to_queue>
	__asm__ volatile(
    4548:	f386 8811 	msr	BASEPRI, r6
    454c:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4550:	3d01      	subs	r5, #1
    4552:	f104 0440 	add.w	r4, r4, #64	; 0x40
    4556:	d1e4      	bne.n	4522 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4558:	bd70      	pop	{r4, r5, r6, pc}
    455a:	bf00      	nop
    455c:	20000d78 	.word	0x20000d78
    4560:	20000910 	.word	0x20000910

00004564 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4564:	b570      	push	{r4, r5, r6, lr}
    4566:	4c0a      	ldr	r4, [pc, #40]	; (4590 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4568:	4e0a      	ldr	r6, [pc, #40]	; (4594 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    456a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    456c:	4631      	mov	r1, r6
    456e:	4620      	mov	r0, r4
    4570:	f008 fe35 	bl	d1de <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4574:	2201      	movs	r2, #1
    4576:	f1a4 0010 	sub.w	r0, r4, #16
    457a:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    457c:	3501      	adds	r5, #1
    457e:	f008 fdf1 	bl	d164 <z_impl_k_sem_init>
    4582:	2d04      	cmp	r5, #4
    4584:	f104 0440 	add.w	r4, r4, #64	; 0x40
    4588:	d1f0      	bne.n	456c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    458a:	2000      	movs	r0, #0
    458c:	bd70      	pop	{r4, r5, r6, pc}
    458e:	bf00      	nop
    4590:	20000da4 	.word	0x20000da4
    4594:	000041c9 	.word	0x000041c9

00004598 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	4604      	mov	r4, r0
    459c:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    459e:	7901      	ldrb	r1, [r0, #4]
    45a0:	4812      	ldr	r0, [pc, #72]	; (45ec <cdc_acm_class_handle_req+0x54>)
{
    45a2:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    45a4:	f007 ffbd 	bl	c522 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    45a8:	b1e8      	cbz	r0, 45e6 <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    45aa:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    45ae:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    45b0:	2a00      	cmp	r2, #0
    45b2:	db11      	blt.n	45d8 <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    45b4:	2b20      	cmp	r3, #32
    45b6:	d004      	beq.n	45c2 <cdc_acm_class_handle_req+0x2a>
    45b8:	2b22      	cmp	r3, #34	; 0x22
    45ba:	d009      	beq.n	45d0 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    45bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    45c0:	e005      	b.n	45ce <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    45c2:	6829      	ldr	r1, [r5, #0]
    45c4:	2207      	movs	r2, #7
    45c6:	3810      	subs	r0, #16
    45c8:	f008 f91e 	bl	c808 <memcpy>
			return 0;
    45cc:	2000      	movs	r0, #0
}
    45ce:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    45d0:	8863      	ldrh	r3, [r4, #2]
    45d2:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    45d6:	e7f9      	b.n	45cc <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    45d8:	2b21      	cmp	r3, #33	; 0x21
    45da:	d1ef      	bne.n	45bc <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    45dc:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    45de:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    45e0:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    45e2:	6033      	str	r3, [r6, #0]
			return 0;
    45e4:	e7f2      	b.n	45cc <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    45e6:	f06f 0012 	mvn.w	r0, #18
    45ea:	e7f0      	b.n	45ce <cdc_acm_class_handle_req+0x36>
    45ec:	20000e78 	.word	0x20000e78

000045f0 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    45f0:	b508      	push	{r3, lr}
    45f2:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    45f4:	4803      	ldr	r0, [pc, #12]	; (4604 <cdc_acm_int_in+0x14>)
    45f6:	f007 ffa2 	bl	c53e <usb_get_dev_data_by_ep>
	if (common == NULL) {
    45fa:	b110      	cbz	r0, 4602 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    45fc:	2301      	movs	r3, #1
    45fe:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    4602:	bd08      	pop	{r3, pc}
    4604:	20000e78 	.word	0x20000e78

00004608 <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4608:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    460a:	2301      	movs	r3, #1
    460c:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    4610:	680b      	ldr	r3, [r1, #0]
    4612:	b133      	cbz	r3, 4622 <cdc_acm_irq_rx_enable+0x1a>
    4614:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    4618:	b11b      	cbz	r3, 4622 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    461a:	4802      	ldr	r0, [pc, #8]	; (4624 <cdc_acm_irq_rx_enable+0x1c>)
    461c:	3108      	adds	r1, #8
    461e:	f008 bdfb 	b.w	d218 <k_work_submit_to_queue>
	}
}
    4622:	4770      	bx	lr
    4624:	20000910 	.word	0x20000910

00004628 <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4628:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    462a:	2301      	movs	r3, #1
    462c:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    4630:	680b      	ldr	r3, [r1, #0]
    4632:	b133      	cbz	r3, 4642 <cdc_acm_irq_tx_enable+0x1a>
    4634:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    4638:	b11b      	cbz	r3, 4642 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    463a:	4802      	ldr	r0, [pc, #8]	; (4644 <cdc_acm_irq_tx_enable+0x1c>)
    463c:	3108      	adds	r1, #8
    463e:	f008 bdeb 	b.w	d218 <k_work_submit_to_queue>
}
    4642:	4770      	bx	lr
    4644:	20000910 	.word	0x20000910

00004648 <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4648:	4a0d      	ldr	r2, [pc, #52]	; (4680 <cdc_acm_reset_port+0x38>)
{
    464a:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    464c:	2100      	movs	r1, #0
    464e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4652:	6810      	ldr	r0, [r2, #0]
    4654:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    4658:	8890      	ldrh	r0, [r2, #4]
    465a:	7992      	ldrb	r2, [r2, #6]
    465c:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    4660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    4664:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    4668:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    466c:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    4670:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4674:	2240      	movs	r2, #64	; 0x40
    4676:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    467a:	f008 b8d0 	b.w	c81e <memset>
    467e:	bf00      	nop
    4680:	0000da68 	.word	0x0000da68

00004684 <cdc_acm_fifo_fill>:
{
    4684:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4686:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    4688:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    468c:	b188      	cbz	r0, 46b2 <cdc_acm_fifo_fill+0x2e>
    468e:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    4692:	b97b      	cbnz	r3, 46b4 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    4694:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4698:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    469c:	f007 fb98 	bl	bdd0 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    46a0:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    46a2:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    46a4:	2300      	movs	r3, #0
    46a6:	4804      	ldr	r0, [pc, #16]	; (46b8 <cdc_acm_fifo_fill+0x34>)
    46a8:	f105 0118 	add.w	r1, r5, #24
    46ac:	f005 ffa0 	bl	a5f0 <k_work_schedule_for_queue>
	return wrote;
    46b0:	4620      	mov	r0, r4
}
    46b2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    46b4:	2000      	movs	r0, #0
    46b6:	e7fc      	b.n	46b2 <cdc_acm_fifo_fill+0x2e>
    46b8:	20000910 	.word	0x20000910

000046bc <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    46bc:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    46be:	6904      	ldr	r4, [r0, #16]
{
    46c0:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    46c4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    46c8:	b1a3      	cbz	r3, 46f4 <cdc_acm_poll_out+0x38>
    46ca:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    46ce:	b98b      	cbnz	r3, 46f4 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    46d0:	f10d 0107 	add.w	r1, sp, #7
    46d4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    46d8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    46dc:	2201      	movs	r2, #1
    46de:	f007 fb77 	bl	bdd0 <ring_buf_put>
    46e2:	4601      	mov	r1, r0
    46e4:	b140      	cbz	r0, 46f8 <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    46e6:	480d      	ldr	r0, [pc, #52]	; (471c <cdc_acm_poll_out+0x60>)
    46e8:	2221      	movs	r2, #33	; 0x21
    46ea:	2300      	movs	r3, #0
    46ec:	f104 0118 	add.w	r1, r4, #24
    46f0:	f005 ff7e 	bl	a5f0 <k_work_schedule_for_queue>
}
    46f4:	b002      	add	sp, #8
    46f6:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    46f8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    46fc:	2201      	movs	r2, #1
    46fe:	f007 fbbb 	bl	be78 <ring_buf_get>
    4702:	2800      	cmp	r0, #0
    4704:	d0f6      	beq.n	46f4 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4706:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    470a:	2201      	movs	r2, #1
    470c:	f10d 0107 	add.w	r1, sp, #7
    4710:	f007 fb5e 	bl	bdd0 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4714:	2800      	cmp	r0, #0
    4716:	d1e6      	bne.n	46e6 <cdc_acm_poll_out+0x2a>
    4718:	e7ec      	b.n	46f4 <cdc_acm_poll_out+0x38>
    471a:	bf00      	nop
    471c:	20000910 	.word	0x20000910

00004720 <tx_work_handler>:
{
    4720:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    4722:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    4726:	685b      	ldr	r3, [r3, #4]
    4728:	6a1b      	ldr	r3, [r3, #32]
    472a:	7d1f      	ldrb	r7, [r3, #20]
{
    472c:	b085      	sub	sp, #20
    472e:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    4730:	4638      	mov	r0, r7
    4732:	f007 ff1a 	bl	c56a <usb_transfer_is_busy>
    4736:	4606      	mov	r6, r0
    4738:	b9e0      	cbnz	r0, 4774 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    473a:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    473c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4740:	a903      	add	r1, sp, #12
    4742:	f007 fb64 	bl	be0e <ring_buf_get_claim>
	if (!len) {
    4746:	4604      	mov	r4, r0
    4748:	b1a0      	cbz	r0, 4774 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    474a:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    474c:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    4750:	bf08      	it	eq
    4752:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
    4756:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    475a:	9301      	str	r3, [sp, #4]
    475c:	4b06      	ldr	r3, [pc, #24]	; (4778 <tx_work_handler+0x58>)
    475e:	9903      	ldr	r1, [sp, #12]
    4760:	9300      	str	r3, [sp, #0]
    4762:	4622      	mov	r2, r4
    4764:	2302      	movs	r3, #2
    4766:	4638      	mov	r0, r7
    4768:	f7ff fe18 	bl	439c <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    476c:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    476e:	4621      	mov	r1, r4
    4770:	f007 fb6d 	bl	be4e <ring_buf_get_finish>
}
    4774:	b005      	add	sp, #20
    4776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4778:	0000477d 	.word	0x0000477d

0000477c <cdc_acm_write_cb>:
{
    477c:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    477e:	2301      	movs	r3, #1
    4780:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4784:	6813      	ldr	r3, [r2, #0]
{
    4786:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4788:	b13b      	cbz	r3, 479a <cdc_acm_write_cb+0x1e>
    478a:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    478e:	b123      	cbz	r3, 479a <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4790:	480a      	ldr	r0, [pc, #40]	; (47bc <cdc_acm_write_cb+0x40>)
    4792:	f102 0108 	add.w	r1, r2, #8
    4796:	f008 fd3f 	bl	d218 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    479a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    479e:	689a      	ldr	r2, [r3, #8]
    47a0:	691b      	ldr	r3, [r3, #16]
    47a2:	429a      	cmp	r2, r3
    47a4:	d008      	beq.n	47b8 <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    47a6:	f104 0118 	add.w	r1, r4, #24
    47aa:	4804      	ldr	r0, [pc, #16]	; (47bc <cdc_acm_write_cb+0x40>)
}
    47ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    47b0:	2200      	movs	r2, #0
    47b2:	2300      	movs	r3, #0
    47b4:	f005 bf1c 	b.w	a5f0 <k_work_schedule_for_queue>
}
    47b8:	bd10      	pop	{r4, pc}
    47ba:	bf00      	nop
    47bc:	20000910 	.word	0x20000910

000047c0 <cdc_acm_init>:
{
    47c0:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    47c2:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    47c4:	2300      	movs	r3, #0
    47c6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    47ca:	4b0c      	ldr	r3, [pc, #48]	; (47fc <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    47cc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    47d0:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    47d2:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    47d6:	b969      	cbnz	r1, 47f4 <cdc_acm_init+0x34>
	list->head = node;
    47d8:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    47dc:	f104 0008 	add.w	r0, r4, #8
    47e0:	4907      	ldr	r1, [pc, #28]	; (4800 <cdc_acm_init+0x40>)
    47e2:	f008 fcfc 	bl	d1de <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    47e6:	f104 0018 	add.w	r0, r4, #24
    47ea:	4906      	ldr	r1, [pc, #24]	; (4804 <cdc_acm_init+0x44>)
    47ec:	f008 fd25 	bl	d23a <k_work_init_delayable>
}
    47f0:	2000      	movs	r0, #0
    47f2:	bd10      	pop	{r4, pc}
	parent->next = child;
    47f4:	600a      	str	r2, [r1, #0]
	list->tail = node;
    47f6:	605a      	str	r2, [r3, #4]
}
    47f8:	e7f0      	b.n	47dc <cdc_acm_init+0x1c>
    47fa:	bf00      	nop
    47fc:	20000e78 	.word	0x20000e78
    4800:	0000c595 	.word	0x0000c595
    4804:	00004721 	.word	0x00004721

00004808 <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    4808:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    480a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    480e:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4810:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4812:	4c0d      	ldr	r4, [pc, #52]	; (4848 <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    4814:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    4816:	f242 00a1 	movw	r0, #8353	; 0x20a1
    481a:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    481e:	2300      	movs	r3, #0
    4820:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    4824:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    4826:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    482a:	7900      	ldrb	r0, [r0, #4]
    482c:	220a      	movs	r2, #10
    482e:	a901      	add	r1, sp, #4
    4830:	f007 fe53 	bl	c4da <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4834:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    4838:	b923      	cbnz	r3, 4844 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    483a:	2001      	movs	r0, #1
    483c:	f008 fe4b 	bl	d4d6 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    4840:	3c01      	subs	r4, #1
    4842:	d1f7      	bne.n	4834 <cdc_acm_send_notification.isra.0+0x2c>
}
    4844:	b005      	add	sp, #20
    4846:	bd30      	pop	{r4, r5, pc}
    4848:	000186a1 	.word	0x000186a1

0000484c <cdc_acm_read_cb>:
{
    484c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    484e:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4850:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    4854:	1e0a      	subs	r2, r1, #0
{
    4856:	4605      	mov	r5, r0
	if (size <= 0) {
    4858:	dd1f      	ble.n	489a <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    485a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    485e:	4631      	mov	r1, r6
    4860:	f007 fab6 	bl	bdd0 <ring_buf_put>
	dev_data->rx_ready = true;
    4864:	2301      	movs	r3, #1
    4866:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    486a:	6823      	ldr	r3, [r4, #0]
    486c:	b13b      	cbz	r3, 487e <cdc_acm_read_cb+0x32>
    486e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    4872:	b123      	cbz	r3, 487e <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4874:	480e      	ldr	r0, [pc, #56]	; (48b0 <cdc_acm_read_cb+0x64>)
    4876:	f104 0108 	add.w	r1, r4, #8
    487a:	f008 fccd 	bl	d218 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    487e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    4882:	684b      	ldr	r3, [r1, #4]
    4884:	694a      	ldr	r2, [r1, #20]
    4886:	1a9a      	subs	r2, r3, r2
    4888:	69cb      	ldr	r3, [r1, #28]
    488a:	1a9b      	subs	r3, r3, r2
    488c:	2b3f      	cmp	r3, #63	; 0x3f
    488e:	d804      	bhi.n	489a <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    4890:	2301      	movs	r3, #1
    4892:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    4896:	b002      	add	sp, #8
    4898:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    489a:	4b06      	ldr	r3, [pc, #24]	; (48b4 <cdc_acm_read_cb+0x68>)
    489c:	9300      	str	r3, [sp, #0]
    489e:	9401      	str	r4, [sp, #4]
    48a0:	2301      	movs	r3, #1
    48a2:	2240      	movs	r2, #64	; 0x40
    48a4:	4631      	mov	r1, r6
    48a6:	4628      	mov	r0, r5
    48a8:	f7ff fd78 	bl	439c <usb_transfer>
    48ac:	e7f3      	b.n	4896 <cdc_acm_read_cb+0x4a>
    48ae:	bf00      	nop
    48b0:	20000910 	.word	0x20000910
    48b4:	0000484d 	.word	0x0000484d

000048b8 <cdc_acm_dev_status_cb>:
{
    48b8:	b538      	push	{r3, r4, r5, lr}
    48ba:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    48bc:	4601      	mov	r1, r0
    48be:	481e      	ldr	r0, [pc, #120]	; (4938 <cdc_acm_dev_status_cb+0x80>)
    48c0:	f007 fe23 	bl	c50a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    48c4:	4604      	mov	r4, r0
    48c6:	b380      	cbz	r0, 492a <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    48c8:	4602      	mov	r2, r0
	switch (status) {
    48ca:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    48cc:	f852 39a4 	ldr.w	r3, [r2], #-164
    48d0:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    48d2:	2905      	cmp	r1, #5
    48d4:	d829      	bhi.n	492a <cdc_acm_dev_status_cb+0x72>
    48d6:	e8df f001 	tbb	[pc, r1]
    48da:	2820      	.short	0x2820
    48dc:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    48e0:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    48e4:	b931      	cbnz	r1, 48f4 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    48e6:	6a1b      	ldr	r3, [r3, #32]
    48e8:	7b18      	ldrb	r0, [r3, #12]
    48ea:	f7ff ffaf 	bl	484c <cdc_acm_read_cb>
			dev_data->configured = true;
    48ee:	2301      	movs	r3, #1
    48f0:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    48f4:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    48f8:	b9bb      	cbnz	r3, 492a <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    48fa:	2301      	movs	r3, #1
    48fc:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    4900:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    4904:	b18b      	cbz	r3, 492a <cdc_acm_dev_status_cb+0x72>
    4906:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    490a:	b173      	cbz	r3, 492a <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    490c:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    4910:	480a      	ldr	r0, [pc, #40]	; (493c <cdc_acm_dev_status_cb+0x84>)
}
    4912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4916:	f008 bc7f 	b.w	d218 <k_work_submit_to_queue>
}
    491a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    491e:	4610      	mov	r0, r2
    4920:	f7ff be92 	b.w	4648 <cdc_acm_reset_port>
		dev_data->suspended = true;
    4924:	2301      	movs	r3, #1
			dev_data->suspended = false;
    4926:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    492a:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    492c:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    4930:	2b00      	cmp	r3, #0
    4932:	d0fa      	beq.n	492a <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    4934:	2300      	movs	r3, #0
    4936:	e7f6      	b.n	4926 <cdc_acm_dev_status_cb+0x6e>
    4938:	20000e78 	.word	0x20000e78
    493c:	20000910 	.word	0x20000910

00004940 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    4940:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    4942:	4d09      	ldr	r5, [pc, #36]	; (4968 <z_usb_work_q_init+0x28>)
    4944:	4909      	ldr	r1, [pc, #36]	; (496c <z_usb_work_q_init+0x2c>)
    4946:	2400      	movs	r4, #0
    4948:	9400      	str	r4, [sp, #0]
    494a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    494e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4952:	4628      	mov	r0, r5
    4954:	f005 fe14 	bl	a580 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4958:	4905      	ldr	r1, [pc, #20]	; (4970 <z_usb_work_q_init+0x30>)
    495a:	4628      	mov	r0, r5
    495c:	f008 fb6c 	bl	d038 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    4960:	4620      	mov	r0, r4
    4962:	b003      	add	sp, #12
    4964:	bd30      	pop	{r4, r5, pc}
    4966:	bf00      	nop
    4968:	20000910 	.word	0x20000910
    496c:	20002540 	.word	0x20002540
    4970:	0000e412 	.word	0x0000e412

00004974 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    4974:	4801      	ldr	r0, [pc, #4]	; (497c <nrf_cc3xx_platform_abort_init+0x8>)
    4976:	f006 bc69 	b.w	b24c <nrf_cc3xx_platform_set_abort>
    497a:	bf00      	nop
    497c:	0000db58 	.word	0x0000db58

00004980 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4980:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    4982:	4604      	mov	r4, r0
    4984:	b918      	cbnz	r0, 498e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    4986:	4b0f      	ldr	r3, [pc, #60]	; (49c4 <mutex_free_platform+0x44>)
    4988:	480f      	ldr	r0, [pc, #60]	; (49c8 <mutex_free_platform+0x48>)
    498a:	685b      	ldr	r3, [r3, #4]
    498c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    498e:	6861      	ldr	r1, [r4, #4]
    4990:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    4994:	d00f      	beq.n	49b6 <mutex_free_platform+0x36>
    4996:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    499a:	d00c      	beq.n	49b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    499c:	4d0b      	ldr	r5, [pc, #44]	; (49cc <mutex_free_platform+0x4c>)
    499e:	42a9      	cmp	r1, r5
    49a0:	d009      	beq.n	49b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    49a2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    49a6:	d007      	beq.n	49b8 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    49a8:	4809      	ldr	r0, [pc, #36]	; (49d0 <mutex_free_platform+0x50>)
    49aa:	4621      	mov	r1, r4
    49ac:	f008 fb15 	bl	cfda <k_mem_slab_free>
        mutex->mutex = NULL;
    49b0:	2300      	movs	r3, #0
    49b2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    49b4:	6065      	str	r5, [r4, #4]
}
    49b6:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    49b8:	6820      	ldr	r0, [r4, #0]
    49ba:	2214      	movs	r2, #20
    49bc:	f007 ff2f 	bl	c81e <memset>
    49c0:	e7f8      	b.n	49b4 <mutex_free_platform+0x34>
    49c2:	bf00      	nop
    49c4:	200001ec 	.word	0x200001ec
    49c8:	0000e41b 	.word	0x0000e41b
    49cc:	a95c5f2c 	.word	0xa95c5f2c
    49d0:	20001380 	.word	0x20001380

000049d4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    49d4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    49d6:	b320      	cbz	r0, 4a22 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    49d8:	6843      	ldr	r3, [r0, #4]
    49da:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    49de:	d110      	bne.n	4a02 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    49e0:	2201      	movs	r2, #1
    49e2:	6803      	ldr	r3, [r0, #0]
    49e4:	f3bf 8f5b 	dmb	ish
    49e8:	e853 1f00 	ldrex	r1, [r3]
    49ec:	2900      	cmp	r1, #0
    49ee:	d103      	bne.n	49f8 <mutex_lock_platform+0x24>
    49f0:	e843 2000 	strex	r0, r2, [r3]
    49f4:	2800      	cmp	r0, #0
    49f6:	d1f7      	bne.n	49e8 <mutex_lock_platform+0x14>
    49f8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    49fc:	d10d      	bne.n	4a1a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    49fe:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    4a00:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4a02:	4a09      	ldr	r2, [pc, #36]	; (4a28 <mutex_lock_platform+0x54>)
    4a04:	4293      	cmp	r3, r2
    4a06:	d00a      	beq.n	4a1e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4a08:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a12:	f005 fb87 	bl	a124 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4a16:	2800      	cmp	r0, #0
    4a18:	d0f1      	beq.n	49fe <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4a1a:	4804      	ldr	r0, [pc, #16]	; (4a2c <mutex_lock_platform+0x58>)
    4a1c:	e7f0      	b.n	4a00 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4a1e:	4804      	ldr	r0, [pc, #16]	; (4a30 <mutex_lock_platform+0x5c>)
    4a20:	e7ee      	b.n	4a00 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4a22:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4a26:	e7eb      	b.n	4a00 <mutex_lock_platform+0x2c>
    4a28:	a95c5f2c 	.word	0xa95c5f2c
    4a2c:	ffff8fe9 	.word	0xffff8fe9
    4a30:	ffff8fea 	.word	0xffff8fea

00004a34 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4a34:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4a36:	b1d8      	cbz	r0, 4a70 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4a38:	6843      	ldr	r3, [r0, #4]
    4a3a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    4a3e:	d110      	bne.n	4a62 <mutex_unlock_platform+0x2e>
    4a40:	2200      	movs	r2, #0
    4a42:	6803      	ldr	r3, [r0, #0]
    4a44:	f3bf 8f5b 	dmb	ish
    4a48:	e853 1f00 	ldrex	r1, [r3]
    4a4c:	2901      	cmp	r1, #1
    4a4e:	d103      	bne.n	4a58 <mutex_unlock_platform+0x24>
    4a50:	e843 2000 	strex	r0, r2, [r3]
    4a54:	2800      	cmp	r0, #0
    4a56:	d1f7      	bne.n	4a48 <mutex_unlock_platform+0x14>
    4a58:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4a5c:	d10b      	bne.n	4a76 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4a5e:	2000      	movs	r0, #0
    }
}
    4a60:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4a62:	4a07      	ldr	r2, [pc, #28]	; (4a80 <mutex_unlock_platform+0x4c>)
    4a64:	4293      	cmp	r3, r2
    4a66:	d008      	beq.n	4a7a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4a68:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4a6a:	f005 fbd5 	bl	a218 <z_impl_k_mutex_unlock>
    4a6e:	e7f6      	b.n	4a5e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4a70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4a74:	e7f4      	b.n	4a60 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4a76:	4803      	ldr	r0, [pc, #12]	; (4a84 <mutex_unlock_platform+0x50>)
    4a78:	e7f2      	b.n	4a60 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4a7a:	4803      	ldr	r0, [pc, #12]	; (4a88 <mutex_unlock_platform+0x54>)
    4a7c:	e7f0      	b.n	4a60 <mutex_unlock_platform+0x2c>
    4a7e:	bf00      	nop
    4a80:	a95c5f2c 	.word	0xa95c5f2c
    4a84:	ffff8fe9 	.word	0xffff8fe9
    4a88:	ffff8fea 	.word	0xffff8fea

00004a8c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4a8c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4a8e:	4604      	mov	r4, r0
    4a90:	b918      	cbnz	r0, 4a9a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    4a92:	4b1d      	ldr	r3, [pc, #116]	; (4b08 <mutex_init_platform+0x7c>)
    4a94:	481d      	ldr	r0, [pc, #116]	; (4b0c <mutex_init_platform+0x80>)
    4a96:	685b      	ldr	r3, [r3, #4]
    4a98:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4a9a:	6863      	ldr	r3, [r4, #4]
    4a9c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    4aa0:	d02f      	beq.n	4b02 <mutex_init_platform+0x76>
    4aa2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    4aa6:	d02c      	beq.n	4b02 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    4aa8:	4a19      	ldr	r2, [pc, #100]	; (4b10 <mutex_init_platform+0x84>)
    4aaa:	4293      	cmp	r3, r2
    4aac:	d119      	bne.n	4ae2 <mutex_init_platform+0x56>
    4aae:	6823      	ldr	r3, [r4, #0]
    4ab0:	bb03      	cbnz	r3, 4af4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4ab2:	4818      	ldr	r0, [pc, #96]	; (4b14 <mutex_init_platform+0x88>)
    4ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4abc:	4621      	mov	r1, r4
    4abe:	f005 fa2d 	bl	9f1c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4ac2:	b908      	cbnz	r0, 4ac8 <mutex_init_platform+0x3c>
    4ac4:	6823      	ldr	r3, [r4, #0]
    4ac6:	b91b      	cbnz	r3, 4ad0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    4ac8:	4b0f      	ldr	r3, [pc, #60]	; (4b08 <mutex_init_platform+0x7c>)
    4aca:	4813      	ldr	r0, [pc, #76]	; (4b18 <mutex_init_platform+0x8c>)
    4acc:	685b      	ldr	r3, [r3, #4]
    4ace:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4ad0:	6820      	ldr	r0, [r4, #0]
    4ad2:	2214      	movs	r2, #20
    4ad4:	2100      	movs	r1, #0
    4ad6:	f007 fea2 	bl	c81e <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4ada:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    4ade:	6063      	str	r3, [r4, #4]
    4ae0:	e008      	b.n	4af4 <mutex_init_platform+0x68>
    switch(flags){
    4ae2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    4ae6:	d80d      	bhi.n	4b04 <mutex_init_platform+0x78>
    4ae8:	2b3a      	cmp	r3, #58	; 0x3a
    4aea:	d003      	beq.n	4af4 <mutex_init_platform+0x68>
    4aec:	f640 62ba 	movw	r2, #3770	; 0xeba
    4af0:	4293      	cmp	r3, r2
    4af2:	d1de      	bne.n	4ab2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4af4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4af6:	f008 fab5 	bl	d064 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4afa:	6863      	ldr	r3, [r4, #4]
    4afc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    4b00:	6063      	str	r3, [r4, #4]
}
    4b02:	bd10      	pop	{r4, pc}
    switch(flags){
    4b04:	4a05      	ldr	r2, [pc, #20]	; (4b1c <mutex_init_platform+0x90>)
    4b06:	e7f3      	b.n	4af0 <mutex_init_platform+0x64>
    4b08:	200001ec 	.word	0x200001ec
    4b0c:	0000e41b 	.word	0x0000e41b
    4b10:	a95c5f2c 	.word	0xa95c5f2c
    4b14:	20001380 	.word	0x20001380
    4b18:	0000e441 	.word	0x0000e441
    4b1c:	3a00003a 	.word	0x3a00003a

00004b20 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4b20:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4b22:	4906      	ldr	r1, [pc, #24]	; (4b3c <nrf_cc3xx_platform_mutex_init+0x1c>)
    4b24:	4806      	ldr	r0, [pc, #24]	; (4b40 <nrf_cc3xx_platform_mutex_init+0x20>)
    4b26:	2340      	movs	r3, #64	; 0x40
    4b28:	2214      	movs	r2, #20
    4b2a:	f008 fa48 	bl	cfbe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    4b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4b32:	4904      	ldr	r1, [pc, #16]	; (4b44 <nrf_cc3xx_platform_mutex_init+0x24>)
    4b34:	4804      	ldr	r0, [pc, #16]	; (4b48 <nrf_cc3xx_platform_mutex_init+0x28>)
    4b36:	f006 bbfb 	b.w	b330 <nrf_cc3xx_platform_set_mutexes>
    4b3a:	bf00      	nop
    4b3c:	20000e80 	.word	0x20000e80
    4b40:	20001380 	.word	0x20001380
    4b44:	0000db60 	.word	0x0000db60
    4b48:	0000db74 	.word	0x0000db74

00004b4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4b4c:	4901      	ldr	r1, [pc, #4]	; (4b54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4b4e:	2210      	movs	r2, #16
	str	r2, [r1]
    4b50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4b52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4b54:	e000ed10 	.word	0xe000ed10

00004b58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4b58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4b5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4b5c:	f380 8811 	msr	BASEPRI, r0
	isb
    4b60:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    4b64:	f3bf 8f4f 	dsb	sy
    4b68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4b6a:	b662      	cpsie	i
	isb
    4b6c:	f3bf 8f6f 	isb	sy

	bx	lr
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop

00004b74 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4b74:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4b76:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4b78:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    4b7c:	f3bf 8f4f 	dsb	sy
    4b80:	bf20      	wfe

	msr	BASEPRI, r0
    4b82:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4b86:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4b88:	4770      	bx	lr
    4b8a:	bf00      	nop

00004b8c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b90:	4681      	mov	r9, r0
    4b92:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    4b94:	460c      	mov	r4, r1
    4b96:	2900      	cmp	r1, #0
    4b98:	d04c      	beq.n	4c34 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4b9a:	466e      	mov	r6, sp
    4b9c:	b08a      	sub	sp, #40	; 0x28
    4b9e:	e9d1 1200 	ldrd	r1, r2, [r1]
    4ba2:	68a3      	ldr	r3, [r4, #8]
    4ba4:	466d      	mov	r5, sp
    4ba6:	4827      	ldr	r0, [pc, #156]	; (4c44 <z_arm_fatal_error+0xb8>)
    4ba8:	46a8      	mov	r8, r5
    4baa:	f04f 0a05 	mov.w	sl, #5
    4bae:	e9c5 0105 	strd	r0, r1, [r5, #20]
    4bb2:	e9c5 2307 	strd	r2, r3, [r5, #28]
    4bb6:	f848 af10 	str.w	sl, [r8, #16]!
    4bba:	4823      	ldr	r0, [pc, #140]	; (4c48 <z_arm_fatal_error+0xbc>)
    4bbc:	4642      	mov	r2, r8
    4bbe:	2300      	movs	r3, #0
    4bc0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    4bc4:	f7fe f8a4 	bl	2d10 <z_impl_z_log_msg_static_create>
    4bc8:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4bca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    4bce:	6963      	ldr	r3, [r4, #20]
    4bd0:	46ad      	mov	sp, r5
    4bd2:	481e      	ldr	r0, [pc, #120]	; (4c4c <z_arm_fatal_error+0xc0>)
    4bd4:	f8c5 a010 	str.w	sl, [r5, #16]
    4bd8:	e9c5 0105 	strd	r0, r1, [r5, #20]
    4bdc:	e9c5 2307 	strd	r2, r3, [r5, #28]
    4be0:	4819      	ldr	r0, [pc, #100]	; (4c48 <z_arm_fatal_error+0xbc>)
    4be2:	2300      	movs	r3, #0
    4be4:	4642      	mov	r2, r8
    4be6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    4bea:	f7fe f891 	bl	2d10 <z_impl_z_log_msg_static_create>
    4bee:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4bf0:	b088      	sub	sp, #32
    4bf2:	69e3      	ldr	r3, [r4, #28]
    4bf4:	466d      	mov	r5, sp
    4bf6:	4a16      	ldr	r2, [pc, #88]	; (4c50 <z_arm_fatal_error+0xc4>)
    4bf8:	46a8      	mov	r8, r5
    4bfa:	f04f 0a03 	mov.w	sl, #3
    4bfe:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4c02:	f848 af10 	str.w	sl, [r8, #16]!
    4c06:	4810      	ldr	r0, [pc, #64]	; (4c48 <z_arm_fatal_error+0xbc>)
    4c08:	2300      	movs	r3, #0
    4c0a:	4642      	mov	r2, r8
    4c0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c10:	f7fe f87e 	bl	2d10 <z_impl_z_log_msg_static_create>
    4c14:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4c16:	69a3      	ldr	r3, [r4, #24]
    4c18:	46ad      	mov	sp, r5
    4c1a:	4a0e      	ldr	r2, [pc, #56]	; (4c54 <z_arm_fatal_error+0xc8>)
    4c1c:	f8c5 a010 	str.w	sl, [r5, #16]
    4c20:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4c24:	4808      	ldr	r0, [pc, #32]	; (4c48 <z_arm_fatal_error+0xbc>)
    4c26:	2300      	movs	r3, #0
    4c28:	4642      	mov	r2, r8
    4c2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c2e:	f7fe f86f 	bl	2d10 <z_impl_z_log_msg_static_create>
    4c32:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4c34:	4621      	mov	r1, r4
    4c36:	4648      	mov	r0, r9
    4c38:	f004 ffee 	bl	9c18 <z_fatal_error>
}
    4c3c:	46bd      	mov	sp, r7
    4c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c42:	bf00      	nop
    4c44:	0000e46e 	.word	0x0000e46e
    4c48:	0000d9fc 	.word	0x0000d9fc
    4c4c:	0000e49d 	.word	0x0000e49d
    4c50:	0000e4cc 	.word	0x0000e4cc
    4c54:	0000e4db 	.word	0x0000e4db

00004c58 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4c58:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4c5a:	2800      	cmp	r0, #0
    4c5c:	db07      	blt.n	4c6e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c5e:	4a04      	ldr	r2, [pc, #16]	; (4c70 <arch_irq_enable+0x18>)
    4c60:	0941      	lsrs	r1, r0, #5
    4c62:	2301      	movs	r3, #1
    4c64:	f000 001f 	and.w	r0, r0, #31
    4c68:	4083      	lsls	r3, r0
    4c6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4c6e:	4770      	bx	lr
    4c70:	e000e100 	.word	0xe000e100

00004c74 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4c74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4c76:	2800      	cmp	r0, #0
    4c78:	db0c      	blt.n	4c94 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c7a:	0943      	lsrs	r3, r0, #5
    4c7c:	4906      	ldr	r1, [pc, #24]	; (4c98 <arch_irq_disable+0x24>)
    4c7e:	f000 001f 	and.w	r0, r0, #31
    4c82:	3320      	adds	r3, #32
    4c84:	2201      	movs	r2, #1
    4c86:	4082      	lsls	r2, r0
    4c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c90:	f3bf 8f6f 	isb	sy
}
    4c94:	4770      	bx	lr
    4c96:	bf00      	nop
    4c98:	e000e100 	.word	0xe000e100

00004c9c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4c9c:	4b05      	ldr	r3, [pc, #20]	; (4cb4 <arch_irq_is_enabled+0x18>)
    4c9e:	0942      	lsrs	r2, r0, #5
    4ca0:	f000 001f 	and.w	r0, r0, #31
    4ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4ca8:	2301      	movs	r3, #1
    4caa:	fa03 f000 	lsl.w	r0, r3, r0
}
    4cae:	4010      	ands	r0, r2
    4cb0:	4770      	bx	lr
    4cb2:	bf00      	nop
    4cb4:	e000e100 	.word	0xe000e100

00004cb8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4cb8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4cba:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cbc:	bfa8      	it	ge
    4cbe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4cc2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cc6:	bfb8      	it	lt
    4cc8:	4b06      	ldrlt	r3, [pc, #24]	; (4ce4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cca:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4cce:	bfac      	ite	ge
    4cd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cd4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cd8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cda:	bfb4      	ite	lt
    4cdc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4cde:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    4ce2:	4770      	bx	lr
    4ce4:	e000ed14 	.word	0xe000ed14

00004ce8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4ce8:	bf30      	wfi
    b z_SysNmiOnReset
    4cea:	f7ff bffd 	b.w	4ce8 <z_SysNmiOnReset>
    4cee:	bf00      	nop

00004cf0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4cf0:	4a0b      	ldr	r2, [pc, #44]	; (4d20 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4cf2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4cf4:	4b0b      	ldr	r3, [pc, #44]	; (4d24 <z_arm_prep_c+0x34>)
    4cf6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4cfa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d00:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4d08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4d10:	f005 f83e 	bl	9d90 <z_bss_zero>
	z_data_copy();
    4d14:	f006 f804 	bl	ad20 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4d18:	f000 fbd6 	bl	54c8 <z_arm_interrupt_init>
	z_cstart();
    4d1c:	f005 f87c 	bl	9e18 <z_cstart>
    4d20:	00001000 	.word	0x00001000
    4d24:	e000ed00 	.word	0xe000ed00

00004d28 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4d28:	4a09      	ldr	r2, [pc, #36]	; (4d50 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4d2a:	490a      	ldr	r1, [pc, #40]	; (4d54 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4d2c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4d2e:	6809      	ldr	r1, [r1, #0]
    4d30:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4d32:	4909      	ldr	r1, [pc, #36]	; (4d58 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4d34:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4d36:	684b      	ldr	r3, [r1, #4]
    4d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4d3c:	604b      	str	r3, [r1, #4]
    4d3e:	2300      	movs	r3, #0
    4d40:	f383 8811 	msr	BASEPRI, r3
    4d44:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4d48:	6893      	ldr	r3, [r2, #8]
}
    4d4a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4d4c:	4770      	bx	lr
    4d4e:	bf00      	nop
    4d50:	20001fa4 	.word	0x20001fa4
    4d54:	0000dd28 	.word	0x0000dd28
    4d58:	e000ed00 	.word	0xe000ed00

00004d5c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4d5c:	4912      	ldr	r1, [pc, #72]	; (4da8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4d5e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4d60:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4d64:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4d66:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4d6a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4d6e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4d70:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4d74:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4d78:	4f0c      	ldr	r7, [pc, #48]	; (4dac <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4d7a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4d7e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    4d80:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4d82:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4d84:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4d86:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4d88:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4d8a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4d8e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4d90:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4d92:	f000 fc35 	bl	5600 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4d96:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4d9a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4d9e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4da2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4da6:	4770      	bx	lr
    ldr r1, =_kernel
    4da8:	20001fa4 	.word	0x20001fa4
    ldr v4, =_SCS_ICSR
    4dac:	e000ed04 	.word	0xe000ed04

00004db0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4db0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4db4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4db6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4dba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4dbe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4dc0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4dc4:	2902      	cmp	r1, #2
    beq _oops
    4dc6:	d0ff      	beq.n	4dc8 <_oops>

00004dc8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4dc8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4dca:	f007 fcef 	bl	c7ac <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4dce:	bd01      	pop	{r0, pc}

00004dd0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4dd0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4dd4:	9b00      	ldr	r3, [sp, #0]
    4dd6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4dda:	490a      	ldr	r1, [pc, #40]	; (4e04 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4ddc:	9b01      	ldr	r3, [sp, #4]
    4dde:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4de2:	9b02      	ldr	r3, [sp, #8]
    4de4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4de8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4df0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4df4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4df8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4dfa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4dfc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4dfe:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4e00:	4770      	bx	lr
    4e02:	bf00      	nop
    4e04:	0000b6a7 	.word	0x0000b6a7

00004e08 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4e08:	4a09      	ldr	r2, [pc, #36]	; (4e30 <z_check_thread_stack_fail+0x28>)
{
    4e0a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4e0c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4e0e:	b170      	cbz	r0, 4e2e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4e10:	f113 0f16 	cmn.w	r3, #22
    4e14:	6e40      	ldr	r0, [r0, #100]	; 0x64
    4e16:	d005      	beq.n	4e24 <z_check_thread_stack_fail+0x1c>
    4e18:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4e1c:	429a      	cmp	r2, r3
    4e1e:	d805      	bhi.n	4e2c <z_check_thread_stack_fail+0x24>
    4e20:	4283      	cmp	r3, r0
    4e22:	d203      	bcs.n	4e2c <z_check_thread_stack_fail+0x24>
		return 0;
    4e24:	4281      	cmp	r1, r0
    4e26:	bf28      	it	cs
    4e28:	2000      	movcs	r0, #0
    4e2a:	4770      	bx	lr
    4e2c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    4e2e:	4770      	bx	lr
    4e30:	20001fa4 	.word	0x20001fa4

00004e34 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4e34:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4e36:	4b09      	ldr	r3, [pc, #36]	; (4e5c <arch_switch_to_main_thread+0x28>)
{
    4e38:	460d      	mov	r5, r1
    4e3a:	4614      	mov	r4, r2
	_current = main_thread;
    4e3c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4e3e:	f000 fbdf 	bl	5600 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4e42:	4620      	mov	r0, r4
    4e44:	f385 8809 	msr	PSP, r5
    4e48:	2100      	movs	r1, #0
    4e4a:	b663      	cpsie	if
    4e4c:	f381 8811 	msr	BASEPRI, r1
    4e50:	f3bf 8f6f 	isb	sy
    4e54:	2200      	movs	r2, #0
    4e56:	2300      	movs	r3, #0
    4e58:	f006 fc25 	bl	b6a6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4e5c:	20001fa4 	.word	0x20001fa4

00004e60 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4e60:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4e62:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4e64:	4a0b      	ldr	r2, [pc, #44]	; (4e94 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4e66:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    4e68:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4e6a:	bf1e      	ittt	ne
	movne	r1, #0
    4e6c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4e6e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4e70:	f008 f8e9 	blne	d046 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4e74:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4e76:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4e7a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4e7e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4e82:	4905      	ldr	r1, [pc, #20]	; (4e98 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4e84:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4e86:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4e88:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4e8a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4e8e:	4903      	ldr	r1, [pc, #12]	; (4e9c <_isr_wrapper+0x3c>)
	bx r1
    4e90:	4708      	bx	r1
    4e92:	0000      	.short	0x0000
	ldr r2, =_kernel
    4e94:	20001fa4 	.word	0x20001fa4
	ldr r1, =_sw_isr_table
    4e98:	0000d7d8 	.word	0x0000d7d8
	ldr r1, =z_arm_int_exit
    4e9c:	00004ea1 	.word	0x00004ea1

00004ea0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4ea0:	4b04      	ldr	r3, [pc, #16]	; (4eb4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4ea2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4ea4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    4ea6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4ea8:	d003      	beq.n	4eb2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4eaa:	4903      	ldr	r1, [pc, #12]	; (4eb8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4eb0:	600a      	str	r2, [r1, #0]

00004eb2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4eb2:	4770      	bx	lr
	ldr r3, =_kernel
    4eb4:	20001fa4 	.word	0x20001fa4
	ldr r1, =_SCS_ICSR
    4eb8:	e000ed04 	.word	0xe000ed04

00004ebc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ec0:	b086      	sub	sp, #24
    4ec2:	4606      	mov	r6, r0
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4ec8:	4b47      	ldr	r3, [pc, #284]	; (4fe8 <bus_fault.constprop.0+0x12c>)
    4eca:	617b      	str	r3, [r7, #20]
    4ecc:	2402      	movs	r4, #2
    4ece:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ed2:	4846      	ldr	r0, [pc, #280]	; (4fec <bus_fault.constprop.0+0x130>)
    4ed4:	613c      	str	r4, [r7, #16]
    4ed6:	f107 0210 	add.w	r2, r7, #16
    4eda:	f007 fc76 	bl	c7ca <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4ede:	4b44      	ldr	r3, [pc, #272]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ee2:	04d9      	lsls	r1, r3, #19
    4ee4:	d56d      	bpl.n	4fc2 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    4ee6:	4b43      	ldr	r3, [pc, #268]	; (4ff4 <bus_fault.constprop.0+0x138>)
    4ee8:	4840      	ldr	r0, [pc, #256]	; (4fec <bus_fault.constprop.0+0x130>)
    4eea:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4eee:	f107 0210 	add.w	r2, r7, #16
    4ef2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ef6:	f007 fc68 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    4efa:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4efc:	4b3c      	ldr	r3, [pc, #240]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f00:	051a      	lsls	r2, r3, #20
    4f02:	d50b      	bpl.n	4f1c <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    4f04:	4b3c      	ldr	r3, [pc, #240]	; (4ff8 <bus_fault.constprop.0+0x13c>)
    4f06:	617b      	str	r3, [r7, #20]
    4f08:	2302      	movs	r3, #2
    4f0a:	4838      	ldr	r0, [pc, #224]	; (4fec <bus_fault.constprop.0+0x130>)
    4f0c:	613b      	str	r3, [r7, #16]
    4f0e:	f107 0210 	add.w	r2, r7, #16
    4f12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f16:	f007 fc58 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    4f1a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4f1c:	4c34      	ldr	r4, [pc, #208]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f20:	059b      	lsls	r3, r3, #22
    4f22:	d523      	bpl.n	4f6c <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    4f24:	46e8      	mov	r8, sp
    4f26:	4b35      	ldr	r3, [pc, #212]	; (4ffc <bus_fault.constprop.0+0x140>)
    4f28:	617b      	str	r3, [r7, #20]
    4f2a:	2302      	movs	r3, #2
    4f2c:	482f      	ldr	r0, [pc, #188]	; (4fec <bus_fault.constprop.0+0x130>)
    4f2e:	613b      	str	r3, [r7, #16]
    4f30:	f107 0210 	add.w	r2, r7, #16
    4f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f38:	f007 fc47 	bl	c7ca <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4f3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4f3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f40:	0410      	lsls	r0, r2, #16
    4f42:	d512      	bpl.n	4f6a <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4f44:	b088      	sub	sp, #32
    4f46:	466a      	mov	r2, sp
    4f48:	492d      	ldr	r1, [pc, #180]	; (5000 <bus_fault.constprop.0+0x144>)
    4f4a:	4828      	ldr	r0, [pc, #160]	; (4fec <bus_fault.constprop.0+0x130>)
    4f4c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4f50:	2303      	movs	r3, #3
    4f52:	f842 3f10 	str.w	r3, [r2, #16]!
    4f56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4f5a:	f007 fc36 	bl	c7ca <z_log_msg_static_create.constprop.0>
    4f5e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4f60:	b11e      	cbz	r6, 4f6a <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4f62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4f68:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    4f6a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4f6c:	4b20      	ldr	r3, [pc, #128]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f70:	0559      	lsls	r1, r3, #21
    4f72:	d50b      	bpl.n	4f8c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    4f74:	4b23      	ldr	r3, [pc, #140]	; (5004 <bus_fault.constprop.0+0x148>)
    4f76:	617b      	str	r3, [r7, #20]
    4f78:	2302      	movs	r3, #2
    4f7a:	481c      	ldr	r0, [pc, #112]	; (4fec <bus_fault.constprop.0+0x130>)
    4f7c:	613b      	str	r3, [r7, #16]
    4f7e:	f107 0210 	add.w	r2, r7, #16
    4f82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f86:	f007 fc20 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    4f8a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4f8c:	4b18      	ldr	r3, [pc, #96]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f90:	05d2      	lsls	r2, r2, #23
    4f92:	d518      	bpl.n	4fc6 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    4f94:	4b1c      	ldr	r3, [pc, #112]	; (5008 <bus_fault.constprop.0+0x14c>)
    4f96:	617b      	str	r3, [r7, #20]
    4f98:	2302      	movs	r3, #2
    4f9a:	4814      	ldr	r0, [pc, #80]	; (4fec <bus_fault.constprop.0+0x130>)
    4f9c:	613b      	str	r3, [r7, #16]
    4f9e:	f107 0210 	add.w	r2, r7, #16
    4fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4fa6:	f007 fc10 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    4faa:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4fac:	4a10      	ldr	r2, [pc, #64]	; (4ff0 <bus_fault.constprop.0+0x134>)
    4fae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4fb0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4fb4:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    4fb6:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4fb8:	2300      	movs	r3, #0
    4fba:	702b      	strb	r3, [r5, #0]
}
    4fbc:	46bd      	mov	sp, r7
    4fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    4fc2:	2016      	movs	r0, #22
    4fc4:	e79a      	b.n	4efc <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fc8:	049b      	lsls	r3, r3, #18
    4fca:	d5ef      	bpl.n	4fac <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4fcc:	4b0f      	ldr	r3, [pc, #60]	; (500c <bus_fault.constprop.0+0x150>)
    4fce:	617b      	str	r3, [r7, #20]
    4fd0:	2302      	movs	r3, #2
    4fd2:	4806      	ldr	r0, [pc, #24]	; (4fec <bus_fault.constprop.0+0x130>)
    4fd4:	613b      	str	r3, [r7, #16]
    4fd6:	f107 0210 	add.w	r2, r7, #16
    4fda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4fde:	f007 fbf4 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    4fe2:	201c      	movs	r0, #28
    4fe4:	e7e2      	b.n	4fac <bus_fault.constprop.0+0xf0>
    4fe6:	bf00      	nop
    4fe8:	0000e509 	.word	0x0000e509
    4fec:	0000d9fc 	.word	0x0000d9fc
    4ff0:	e000ed00 	.word	0xe000ed00
    4ff4:	0000e51f 	.word	0x0000e51f
    4ff8:	0000e530 	.word	0x0000e530
    4ffc:	0000e543 	.word	0x0000e543
    5000:	0000e55c 	.word	0x0000e55c
    5004:	0000e571 	.word	0x0000e571
    5008:	0000e58c 	.word	0x0000e58c
    500c:	0000e5a4 	.word	0x0000e5a4

00005010 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5010:	b510      	push	{r4, lr}
    5012:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5014:	4b36      	ldr	r3, [pc, #216]	; (50f0 <usage_fault.constprop.0+0xe0>)
    5016:	4837      	ldr	r0, [pc, #220]	; (50f4 <usage_fault.constprop.0+0xe4>)
    5018:	9305      	str	r3, [sp, #20]
    501a:	aa04      	add	r2, sp, #16
    501c:	2402      	movs	r4, #2
    501e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5022:	9404      	str	r4, [sp, #16]
    5024:	f007 fbd1 	bl	c7ca <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5028:	4b33      	ldr	r3, [pc, #204]	; (50f8 <usage_fault.constprop.0+0xe8>)
    502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    502c:	019a      	lsls	r2, r3, #6
    502e:	d55d      	bpl.n	50ec <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    5030:	4b32      	ldr	r3, [pc, #200]	; (50fc <usage_fault.constprop.0+0xec>)
    5032:	4830      	ldr	r0, [pc, #192]	; (50f4 <usage_fault.constprop.0+0xe4>)
    5034:	aa04      	add	r2, sp, #16
    5036:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    503a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    503e:	f007 fbc4 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    5042:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5044:	4b2c      	ldr	r3, [pc, #176]	; (50f8 <usage_fault.constprop.0+0xe8>)
    5046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5048:	01db      	lsls	r3, r3, #7
    504a:	d50a      	bpl.n	5062 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    504c:	4b2c      	ldr	r3, [pc, #176]	; (5100 <usage_fault.constprop.0+0xf0>)
    504e:	4829      	ldr	r0, [pc, #164]	; (50f4 <usage_fault.constprop.0+0xe4>)
    5050:	9305      	str	r3, [sp, #20]
    5052:	aa04      	add	r2, sp, #16
    5054:	2302      	movs	r3, #2
    5056:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    505a:	9304      	str	r3, [sp, #16]
    505c:	f007 fbb5 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    5060:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5062:	4b25      	ldr	r3, [pc, #148]	; (50f8 <usage_fault.constprop.0+0xe8>)
    5064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5066:	031c      	lsls	r4, r3, #12
    5068:	d50a      	bpl.n	5080 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    506a:	4b26      	ldr	r3, [pc, #152]	; (5104 <usage_fault.constprop.0+0xf4>)
    506c:	4821      	ldr	r0, [pc, #132]	; (50f4 <usage_fault.constprop.0+0xe4>)
    506e:	9305      	str	r3, [sp, #20]
    5070:	aa04      	add	r2, sp, #16
    5072:	2302      	movs	r3, #2
    5074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5078:	9304      	str	r3, [sp, #16]
    507a:	f007 fba6 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    507e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5080:	4b1d      	ldr	r3, [pc, #116]	; (50f8 <usage_fault.constprop.0+0xe8>)
    5082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5084:	0359      	lsls	r1, r3, #13
    5086:	d50a      	bpl.n	509e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5088:	4b1f      	ldr	r3, [pc, #124]	; (5108 <usage_fault.constprop.0+0xf8>)
    508a:	481a      	ldr	r0, [pc, #104]	; (50f4 <usage_fault.constprop.0+0xe4>)
    508c:	9305      	str	r3, [sp, #20]
    508e:	aa04      	add	r2, sp, #16
    5090:	2302      	movs	r3, #2
    5092:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5096:	9304      	str	r3, [sp, #16]
    5098:	f007 fb97 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    509c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    509e:	4b16      	ldr	r3, [pc, #88]	; (50f8 <usage_fault.constprop.0+0xe8>)
    50a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50a2:	039a      	lsls	r2, r3, #14
    50a4:	d50a      	bpl.n	50bc <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    50a6:	4b19      	ldr	r3, [pc, #100]	; (510c <usage_fault.constprop.0+0xfc>)
    50a8:	4812      	ldr	r0, [pc, #72]	; (50f4 <usage_fault.constprop.0+0xe4>)
    50aa:	9305      	str	r3, [sp, #20]
    50ac:	aa04      	add	r2, sp, #16
    50ae:	2302      	movs	r3, #2
    50b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    50b4:	9304      	str	r3, [sp, #16]
    50b6:	f007 fb88 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    50ba:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    50bc:	4b0e      	ldr	r3, [pc, #56]	; (50f8 <usage_fault.constprop.0+0xe8>)
    50be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50c0:	03db      	lsls	r3, r3, #15
    50c2:	d50a      	bpl.n	50da <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    50c4:	4b12      	ldr	r3, [pc, #72]	; (5110 <usage_fault.constprop.0+0x100>)
    50c6:	480b      	ldr	r0, [pc, #44]	; (50f4 <usage_fault.constprop.0+0xe4>)
    50c8:	9305      	str	r3, [sp, #20]
    50ca:	aa04      	add	r2, sp, #16
    50cc:	2302      	movs	r3, #2
    50ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    50d2:	9304      	str	r3, [sp, #16]
    50d4:	f007 fb79 	bl	c7ca <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    50d8:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    50da:	4a07      	ldr	r2, [pc, #28]	; (50f8 <usage_fault.constprop.0+0xe8>)
    50dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    50de:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    50e2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    50e6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    50e8:	b006      	add	sp, #24
    50ea:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    50ec:	201d      	movs	r0, #29
    50ee:	e7a9      	b.n	5044 <usage_fault.constprop.0+0x34>
    50f0:	0000e5d3 	.word	0x0000e5d3
    50f4:	0000d9fc 	.word	0x0000d9fc
    50f8:	e000ed00 	.word	0xe000ed00
    50fc:	0000e5eb 	.word	0x0000e5eb
    5100:	0000e5fe 	.word	0x0000e5fe
    5104:	0000e618 	.word	0x0000e618
    5108:	0000e636 	.word	0x0000e636
    510c:	0000e65b 	.word	0x0000e65b
    5110:	0000e675 	.word	0x0000e675

00005114 <mem_manage_fault>:
{
    5114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5118:	b086      	sub	sp, #24
    511a:	4681      	mov	r9, r0
    511c:	af00      	add	r7, sp, #0
    511e:	468a      	mov	sl, r1
    5120:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    5122:	4b51      	ldr	r3, [pc, #324]	; (5268 <mem_manage_fault+0x154>)
    5124:	617b      	str	r3, [r7, #20]
    5126:	2402      	movs	r4, #2
    5128:	4850      	ldr	r0, [pc, #320]	; (526c <mem_manage_fault+0x158>)
    512a:	613c      	str	r4, [r7, #16]
    512c:	f107 0210 	add.w	r2, r7, #16
    5130:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5134:	f007 fb49 	bl	c7ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5138:	4b4d      	ldr	r3, [pc, #308]	; (5270 <mem_manage_fault+0x15c>)
    513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    513c:	06de      	lsls	r6, r3, #27
    513e:	d545      	bpl.n	51cc <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5140:	4b4c      	ldr	r3, [pc, #304]	; (5274 <mem_manage_fault+0x160>)
    5142:	484a      	ldr	r0, [pc, #296]	; (526c <mem_manage_fault+0x158>)
    5144:	e9c7 4304 	strd	r4, r3, [r7, #16]
    5148:	f107 0210 	add.w	r2, r7, #16
    514c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    5150:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    5152:	f007 fb3a 	bl	c7ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5156:	4b46      	ldr	r3, [pc, #280]	; (5270 <mem_manage_fault+0x15c>)
    5158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    515a:	071d      	lsls	r5, r3, #28
    515c:	d50b      	bpl.n	5176 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    515e:	4b46      	ldr	r3, [pc, #280]	; (5278 <mem_manage_fault+0x164>)
    5160:	617b      	str	r3, [r7, #20]
    5162:	2302      	movs	r3, #2
    5164:	4841      	ldr	r0, [pc, #260]	; (526c <mem_manage_fault+0x158>)
    5166:	613b      	str	r3, [r7, #16]
    5168:	f107 0210 	add.w	r2, r7, #16
    516c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    5170:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    5172:	f007 fb2a 	bl	c7ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5176:	4d3e      	ldr	r5, [pc, #248]	; (5270 <mem_manage_fault+0x15c>)
    5178:	6aab      	ldr	r3, [r5, #40]	; 0x28
    517a:	0798      	lsls	r0, r3, #30
    517c:	d528      	bpl.n	51d0 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    517e:	466c      	mov	r4, sp
    5180:	4b3e      	ldr	r3, [pc, #248]	; (527c <mem_manage_fault+0x168>)
    5182:	617b      	str	r3, [r7, #20]
    5184:	2302      	movs	r3, #2
    5186:	613b      	str	r3, [r7, #16]
    5188:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    518c:	4837      	ldr	r0, [pc, #220]	; (526c <mem_manage_fault+0x158>)
    518e:	f107 0210 	add.w	r2, r7, #16
    5192:	f007 fb1a 	bl	c7ca <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    5196:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5198:	6aab      	ldr	r3, [r5, #40]	; 0x28
    519a:	0619      	lsls	r1, r3, #24
    519c:	d560      	bpl.n	5260 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    519e:	b088      	sub	sp, #32
    51a0:	466a      	mov	r2, sp
    51a2:	4b37      	ldr	r3, [pc, #220]	; (5280 <mem_manage_fault+0x16c>)
    51a4:	4831      	ldr	r0, [pc, #196]	; (526c <mem_manage_fault+0x158>)
    51a6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    51aa:	2303      	movs	r3, #3
    51ac:	f842 3f10 	str.w	r3, [r2, #16]!
    51b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    51b4:	f007 fb09 	bl	c7ca <z_log_msg_static_create.constprop.0>
    51b8:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    51ba:	f1ba 0f00 	cmp.w	sl, #0
    51be:	d003      	beq.n	51c8 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    51c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    51c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    51c6:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    51c8:	2413      	movs	r4, #19
    51ca:	e003      	b.n	51d4 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    51cc:	2410      	movs	r4, #16
    51ce:	e7c2      	b.n	5156 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    51d0:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    51d4:	4b26      	ldr	r3, [pc, #152]	; (5270 <mem_manage_fault+0x15c>)
    51d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51d8:	07da      	lsls	r2, r3, #31
    51da:	d50b      	bpl.n	51f4 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    51dc:	4b29      	ldr	r3, [pc, #164]	; (5284 <mem_manage_fault+0x170>)
    51de:	617b      	str	r3, [r7, #20]
    51e0:	2302      	movs	r3, #2
    51e2:	4822      	ldr	r0, [pc, #136]	; (526c <mem_manage_fault+0x158>)
    51e4:	613b      	str	r3, [r7, #16]
    51e6:	f107 0210 	add.w	r2, r7, #16
    51ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    51ee:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    51f0:	f007 faeb 	bl	c7ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    51f4:	4b1e      	ldr	r3, [pc, #120]	; (5270 <mem_manage_fault+0x15c>)
    51f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51f8:	069b      	lsls	r3, r3, #26
    51fa:	d50b      	bpl.n	5214 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    51fc:	4b22      	ldr	r3, [pc, #136]	; (5288 <mem_manage_fault+0x174>)
    51fe:	617b      	str	r3, [r7, #20]
    5200:	2302      	movs	r3, #2
    5202:	481a      	ldr	r0, [pc, #104]	; (526c <mem_manage_fault+0x158>)
    5204:	613b      	str	r3, [r7, #16]
    5206:	f107 0210 	add.w	r2, r7, #16
    520a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    520e:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    5210:	f007 fadb 	bl	c7ca <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5214:	4b16      	ldr	r3, [pc, #88]	; (5270 <mem_manage_fault+0x15c>)
    5216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5218:	06d5      	lsls	r5, r2, #27
    521a:	d402      	bmi.n	5222 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    521c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    521e:	0790      	lsls	r0, r2, #30
    5220:	d50a      	bpl.n	5238 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5222:	685b      	ldr	r3, [r3, #4]
    5224:	0519      	lsls	r1, r3, #20
    5226:	d507      	bpl.n	5238 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5228:	4649      	mov	r1, r9
    522a:	4630      	mov	r0, r6
    522c:	f7ff fdec 	bl	4e08 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5230:	b110      	cbz	r0, 5238 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5232:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5236:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5238:	4b0d      	ldr	r3, [pc, #52]	; (5270 <mem_manage_fault+0x15c>)
    523a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    523c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    523e:	bf42      	ittt	mi
    5240:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    5242:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    5246:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    524a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    524e:	629a      	str	r2, [r3, #40]	; 0x28
}
    5250:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    5252:	2300      	movs	r3, #0
}
    5254:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    5256:	f888 3000 	strb.w	r3, [r8]
}
    525a:	46bd      	mov	sp, r7
    525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    5260:	f06f 0615 	mvn.w	r6, #21
    5264:	e7b0      	b.n	51c8 <mem_manage_fault+0xb4>
    5266:	bf00      	nop
    5268:	0000e6a0 	.word	0x0000e6a0
    526c:	0000d9fc 	.word	0x0000d9fc
    5270:	e000ed00 	.word	0xe000ed00
    5274:	0000e6b6 	.word	0x0000e6b6
    5278:	0000e530 	.word	0x0000e530
    527c:	0000e6e9 	.word	0x0000e6e9
    5280:	0000e701 	.word	0x0000e701
    5284:	0000e717 	.word	0x0000e717
    5288:	0000e5a4 	.word	0x0000e5a4

0000528c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    528c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5290:	4b77      	ldr	r3, [pc, #476]	; (5470 <z_arm_fault+0x1e4>)
{
    5292:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5294:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    5298:	af00      	add	r7, sp, #0
    529a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    529c:	f3c8 0408 	ubfx	r4, r8, #0, #9
    52a0:	2600      	movs	r6, #0
    52a2:	f386 8811 	msr	BASEPRI, r6
    52a6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    52aa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    52ae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    52b2:	d10e      	bne.n	52d2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    52b4:	f002 030c 	and.w	r3, r2, #12
    52b8:	2b08      	cmp	r3, #8
    52ba:	d119      	bne.n	52f0 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    52bc:	4b6d      	ldr	r3, [pc, #436]	; (5474 <z_arm_fault+0x1e8>)
    52be:	61fb      	str	r3, [r7, #28]
    52c0:	2302      	movs	r3, #2
    52c2:	486d      	ldr	r0, [pc, #436]	; (5478 <z_arm_fault+0x1ec>)
    52c4:	61bb      	str	r3, [r7, #24]
    52c6:	f107 0218 	add.w	r2, r7, #24
    52ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    52ce:	f007 fa7c 	bl	c7ca <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    52d2:	2600      	movs	r6, #0
		return NULL;
    52d4:	4635      	mov	r5, r6
	*recoverable = false;
    52d6:	2300      	movs	r3, #0
    52d8:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    52da:	1ee3      	subs	r3, r4, #3
    52dc:	2b09      	cmp	r3, #9
    52de:	f200 80a6 	bhi.w	542e <z_arm_fault+0x1a2>
    52e2:	e8df f003 	tbb	[pc, r3]
    52e6:	990a      	.short	0x990a
    52e8:	a4a4959c 	.word	0xa4a4959c
    52ec:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    52f0:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    52f2:	bf4c      	ite	mi
    52f4:	460d      	movmi	r5, r1
			*nested_exc = true;
    52f6:	2601      	movpl	r6, #1
    52f8:	e7ed      	b.n	52d6 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    52fa:	46e9      	mov	r9, sp
    52fc:	4b5f      	ldr	r3, [pc, #380]	; (547c <z_arm_fault+0x1f0>)
    52fe:	61fb      	str	r3, [r7, #28]
    5300:	f04f 0802 	mov.w	r8, #2
    5304:	f107 0218 	add.w	r2, r7, #24
    5308:	485b      	ldr	r0, [pc, #364]	; (5478 <z_arm_fault+0x1ec>)
    530a:	f8c7 8018 	str.w	r8, [r7, #24]
    530e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5312:	f007 fa5a 	bl	c7ca <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    5316:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5318:	4c55      	ldr	r4, [pc, #340]	; (5470 <z_arm_fault+0x1e4>)
	*recoverable = false;
    531a:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    531c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    531e:	079a      	lsls	r2, r3, #30
    5320:	d50b      	bpl.n	533a <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    5322:	4b57      	ldr	r3, [pc, #348]	; (5480 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    5324:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    5328:	4853      	ldr	r0, [pc, #332]	; (5478 <z_arm_fault+0x1ec>)
    532a:	f107 0218 	add.w	r2, r7, #24
    532e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5332:	f007 fa4a 	bl	c7ca <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5336:	2400      	movs	r4, #0
    5338:	e041      	b.n	53be <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    533a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    533c:	2b00      	cmp	r3, #0
    533e:	da01      	bge.n	5344 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    5340:	4b50      	ldr	r3, [pc, #320]	; (5484 <z_arm_fault+0x1f8>)
    5342:	e7ef      	b.n	5324 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5344:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5346:	005b      	lsls	r3, r3, #1
    5348:	d5f5      	bpl.n	5336 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    534a:	4b4f      	ldr	r3, [pc, #316]	; (5488 <z_arm_fault+0x1fc>)
    534c:	484a      	ldr	r0, [pc, #296]	; (5478 <z_arm_fault+0x1ec>)
    534e:	e9c7 8306 	strd	r8, r3, [r7, #24]
    5352:	f107 0218 	add.w	r2, r7, #24
    5356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    535a:	f007 fa36 	bl	c7ca <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    535e:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    5360:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    5362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5366:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    536c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5370:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    5372:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    537a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    537c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5380:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5384:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5388:	429a      	cmp	r2, r3
    538a:	d008      	beq.n	539e <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    538c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    538e:	b2db      	uxtb	r3, r3
    5390:	b38b      	cbz	r3, 53f6 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    5392:	1dfa      	adds	r2, r7, #7
    5394:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5396:	4628      	mov	r0, r5
    5398:	f7ff febc 	bl	5114 <mem_manage_fault>
    539c:	e03a      	b.n	5414 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    539e:	b088      	sub	sp, #32
    53a0:	682b      	ldr	r3, [r5, #0]
    53a2:	466a      	mov	r2, sp
    53a4:	4939      	ldr	r1, [pc, #228]	; (548c <z_arm_fault+0x200>)
    53a6:	4834      	ldr	r0, [pc, #208]	; (5478 <z_arm_fault+0x1ec>)
    53a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    53ac:	2303      	movs	r3, #3
    53ae:	f842 3f10 	str.w	r3, [r2, #16]!
    53b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    53b6:	f007 fa08 	bl	c7ca <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    53ba:	682c      	ldr	r4, [r5, #0]
    53bc:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    53be:	79fb      	ldrb	r3, [r7, #7]
    53c0:	b9ab      	cbnz	r3, 53ee <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    53c2:	2220      	movs	r2, #32
    53c4:	4629      	mov	r1, r5
    53c6:	f107 0008 	add.w	r0, r7, #8
    53ca:	f007 fa1d 	bl	c808 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    53ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    53d0:	2e00      	cmp	r6, #0
    53d2:	d047      	beq.n	5464 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    53d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    53d8:	b922      	cbnz	r2, 53e4 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    53da:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    53de:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    53e2:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    53e4:	f107 0108 	add.w	r1, r7, #8
    53e8:	4620      	mov	r0, r4
    53ea:	f7ff fbcf 	bl	4b8c <z_arm_fatal_error>
}
    53ee:	372c      	adds	r7, #44	; 0x2c
    53f0:	46bd      	mov	sp, r7
    53f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    53f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53f8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    53fc:	d004      	beq.n	5408 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    53fe:	1df9      	adds	r1, r7, #7
    5400:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5402:	f7ff fd5b 	bl	4ebc <bus_fault.constprop.0>
    5406:	e005      	b.n	5414 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    5408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    540a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    540e:	d392      	bcc.n	5336 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    5410:	f7ff fdfe 	bl	5010 <usage_fault.constprop.0>
    5414:	4604      	mov	r4, r0
    5416:	e7d2      	b.n	53be <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    5418:	1dfa      	adds	r2, r7, #7
    541a:	2100      	movs	r1, #0
    541c:	e7bb      	b.n	5396 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    541e:	1df9      	adds	r1, r7, #7
    5420:	2000      	movs	r0, #0
    5422:	e7ee      	b.n	5402 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    5424:	4b1a      	ldr	r3, [pc, #104]	; (5490 <z_arm_fault+0x204>)
    5426:	61fb      	str	r3, [r7, #28]
    5428:	2302      	movs	r3, #2
    542a:	61bb      	str	r3, [r7, #24]
    542c:	e77c      	b.n	5328 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    542e:	4a19      	ldr	r2, [pc, #100]	; (5494 <z_arm_fault+0x208>)
    5430:	4b19      	ldr	r3, [pc, #100]	; (5498 <z_arm_fault+0x20c>)
    5432:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    5436:	46e8      	mov	r8, sp
    5438:	b08a      	sub	sp, #40	; 0x28
    543a:	bf18      	it	ne
    543c:	4613      	movne	r3, r2
    543e:	466a      	mov	r2, sp
    5440:	4916      	ldr	r1, [pc, #88]	; (549c <z_arm_fault+0x210>)
    5442:	480d      	ldr	r0, [pc, #52]	; (5478 <z_arm_fault+0x1ec>)
    5444:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5448:	f44f 7300 	mov.w	r3, #512	; 0x200
    544c:	8413      	strh	r3, [r2, #32]
    544e:	3c10      	subs	r4, #16
    5450:	4b13      	ldr	r3, [pc, #76]	; (54a0 <z_arm_fault+0x214>)
    5452:	61d4      	str	r4, [r2, #28]
    5454:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    5458:	f842 3f10 	str.w	r3, [r2, #16]!
    545c:	f007 f9b5 	bl	c7ca <z_log_msg_static_create.constprop.0>
    5460:	46c5      	mov	sp, r8
}
    5462:	e768      	b.n	5336 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5464:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5468:	f023 0301 	bic.w	r3, r3, #1
    546c:	e7b9      	b.n	53e2 <z_arm_fault+0x156>
    546e:	bf00      	nop
    5470:	e000ed00 	.word	0xe000ed00
    5474:	0000e764 	.word	0x0000e764
    5478:	0000d9fc 	.word	0x0000d9fc
    547c:	0000e78f 	.word	0x0000e78f
    5480:	0000e7a6 	.word	0x0000e7a6
    5484:	0000e7c7 	.word	0x0000e7c7
    5488:	0000e7d5 	.word	0x0000e7d5
    548c:	0000e7f4 	.word	0x0000e7f4
    5490:	0000e810 	.word	0x0000e810
    5494:	0000e74b 	.word	0x0000e74b
    5498:	0000e736 	.word	0x0000e736
    549c:	0000e834 	.word	0x0000e834
    54a0:	01000004 	.word	0x01000004

000054a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    54a4:	4a02      	ldr	r2, [pc, #8]	; (54b0 <z_arm_fault_init+0xc>)
    54a6:	6953      	ldr	r3, [r2, #20]
    54a8:	f043 0310 	orr.w	r3, r3, #16
    54ac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    54ae:	4770      	bx	lr
    54b0:	e000ed00 	.word	0xe000ed00

000054b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    54b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    54b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    54bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    54be:	4672      	mov	r2, lr
	bl z_arm_fault
    54c0:	f7ff fee4 	bl	528c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    54c4:	bd01      	pop	{r0, pc}
    54c6:	bf00      	nop

000054c8 <z_arm_interrupt_init>:
    54c8:	4804      	ldr	r0, [pc, #16]	; (54dc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    54ca:	2300      	movs	r3, #0
    54cc:	2120      	movs	r1, #32
    54ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    54d0:	3301      	adds	r3, #1
    54d2:	2b30      	cmp	r3, #48	; 0x30
    54d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    54d8:	d1f9      	bne.n	54ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    54da:	4770      	bx	lr
    54dc:	e000e100 	.word	0xe000e100

000054e0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    54e0:	2000      	movs	r0, #0
    msr CONTROL, r0
    54e2:	f380 8814 	msr	CONTROL, r0
    isb
    54e6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    54ea:	f7fd f979 	bl	27e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    54ee:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    54f0:	490d      	ldr	r1, [pc, #52]	; (5528 <__start+0x48>)
    str r0, [r1]
    54f2:	6008      	str	r0, [r1, #0]
    dsb
    54f4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    54f8:	480c      	ldr	r0, [pc, #48]	; (552c <__start+0x4c>)
    msr msp, r0
    54fa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    54fe:	f000 f82b 	bl	5558 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5502:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5504:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5508:	4809      	ldr	r0, [pc, #36]	; (5530 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    550a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    550e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5510:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5514:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5518:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    551a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    551c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5520:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5524:	f7ff fbe4 	bl	4cf0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5528:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    552c:	20003b80 	.word	0x20003b80
    ldr r0, =z_interrupt_stacks
    5530:	20002dc0 	.word	0x20002dc0

00005534 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5534:	4907      	ldr	r1, [pc, #28]	; (5554 <z_arm_clear_arm_mpu_config+0x20>)
    5536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    553a:	2300      	movs	r3, #0
	int num_regions =
    553c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    5540:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    5542:	4293      	cmp	r3, r2
    5544:	db00      	blt.n	5548 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    5546:	4770      	bx	lr
  MPU->RNR = rnr;
    5548:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    554c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    5550:	3301      	adds	r3, #1
    5552:	e7f6      	b.n	5542 <z_arm_clear_arm_mpu_config+0xe>
    5554:	e000ed00 	.word	0xe000ed00

00005558 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5558:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    555a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    555c:	2300      	movs	r3, #0
    555e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5562:	f7ff ffe7 	bl	5534 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    5566:	4b14      	ldr	r3, [pc, #80]	; (55b8 <z_arm_init_arch_hw_at_boot+0x60>)
    5568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    5570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    5574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    5578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    557c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5580:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5584:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    5588:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    558c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5590:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    5594:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    5598:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    559c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    55a0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    55a4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    55a8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    55ac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    55ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    55b2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    55b6:	bd08      	pop	{r3, pc}
    55b8:	e000e100 	.word	0xe000e100

000055bc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    55bc:	4b08      	ldr	r3, [pc, #32]	; (55e0 <z_impl_k_thread_abort+0x24>)
    55be:	689b      	ldr	r3, [r3, #8]
    55c0:	4283      	cmp	r3, r0
    55c2:	d10b      	bne.n	55dc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    55c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    55c8:	b143      	cbz	r3, 55dc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    55ca:	4b06      	ldr	r3, [pc, #24]	; (55e4 <z_impl_k_thread_abort+0x28>)
    55cc:	685a      	ldr	r2, [r3, #4]
    55ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    55d2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    55d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    55d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    55da:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    55dc:	f005 bb2e 	b.w	ac3c <z_thread_abort>
    55e0:	20001fa4 	.word	0x20001fa4
    55e4:	e000ed00 	.word	0xe000ed00

000055e8 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    55e8:	4b02      	ldr	r3, [pc, #8]	; (55f4 <z_arm_configure_static_mpu_regions+0xc>)
    55ea:	4a03      	ldr	r2, [pc, #12]	; (55f8 <z_arm_configure_static_mpu_regions+0x10>)
    55ec:	4803      	ldr	r0, [pc, #12]	; (55fc <z_arm_configure_static_mpu_regions+0x14>)
    55ee:	2101      	movs	r1, #1
    55f0:	f000 b892 	b.w	5718 <arm_core_mpu_configure_static_mpu_regions>
    55f4:	20040000 	.word	0x20040000
    55f8:	20000000 	.word	0x20000000
    55fc:	0000db84 	.word	0x0000db84

00005600 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5600:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5602:	4b05      	ldr	r3, [pc, #20]	; (5618 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    5604:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    5606:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5608:	4a04      	ldr	r2, [pc, #16]	; (561c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    560a:	2140      	movs	r1, #64	; 0x40
    560c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5610:	4618      	mov	r0, r3
    5612:	2101      	movs	r1, #1
    5614:	f000 b88a 	b.w	572c <arm_core_mpu_configure_dynamic_mpu_regions>
    5618:	2000139c 	.word	0x2000139c
    561c:	150b0000 	.word	0x150b0000

00005620 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5624:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 56dc <mpu_configure_regions+0xbc>
    5628:	469c      	mov	ip, r3
    562a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    562c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    562e:	2300      	movs	r3, #0
    5630:	428b      	cmp	r3, r1
    5632:	da1a      	bge.n	566a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    5634:	6844      	ldr	r4, [r0, #4]
    5636:	2c00      	cmp	r4, #0
    5638:	d04d      	beq.n	56d6 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    563a:	f1bc 0f00 	cmp.w	ip, #0
    563e:	d01d      	beq.n	567c <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5640:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5642:	4234      	tst	r4, r6
    5644:	d015      	beq.n	5672 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    5646:	466c      	mov	r4, sp
    5648:	b088      	sub	sp, #32
    564a:	466a      	mov	r2, sp
    564c:	4924      	ldr	r1, [pc, #144]	; (56e0 <mpu_configure_regions+0xc0>)
    564e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5652:	2303      	movs	r3, #3
    5654:	f842 3f10 	str.w	r3, [r2, #16]!
    5658:	4822      	ldr	r0, [pc, #136]	; (56e4 <mpu_configure_regions+0xc4>)
    565a:	2300      	movs	r3, #0
    565c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5660:	f7fd fb56 	bl	2d10 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    5664:	f06f 0515 	mvn.w	r5, #21
    5668:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    566a:	4628      	mov	r0, r5
    566c:	46bd      	mov	sp, r7
    566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    5672:	2c1f      	cmp	r4, #31
    5674:	d9e7      	bls.n	5646 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    5676:	6802      	ldr	r2, [r0, #0]
		&&
    5678:	4216      	tst	r6, r2
    567a:	d1e4      	bne.n	5646 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    567c:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    567e:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5680:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5682:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    5686:	d914      	bls.n	56b2 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    5688:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    568c:	d813      	bhi.n	56b6 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    568e:	3c01      	subs	r4, #1
    5690:	fab4 f484 	clz	r4, r4
    5694:	f1c4 041f 	rsb	r4, r4, #31
    5698:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    569a:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    569e:	ea46 0604 	orr.w	r6, r6, r4
    56a2:	d90a      	bls.n	56ba <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    56a4:	466c      	mov	r4, sp
    56a6:	b088      	sub	sp, #32
    56a8:	466a      	mov	r2, sp
    56aa:	4b0f      	ldr	r3, [pc, #60]	; (56e8 <mpu_configure_regions+0xc8>)
    56ac:	e9c2 3505 	strd	r3, r5, [r2, #20]
    56b0:	e7cf      	b.n	5652 <mpu_configure_regions+0x32>
		return REGION_32B;
    56b2:	2408      	movs	r4, #8
    56b4:	e7f1      	b.n	569a <mpu_configure_regions+0x7a>
		return REGION_4G;
    56b6:	243e      	movs	r4, #62	; 0x3e
    56b8:	e7ef      	b.n	569a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    56ba:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    56be:	432a      	orrs	r2, r5
    56c0:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    56c4:	f046 0601 	orr.w	r6, r6, #1
    56c8:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    56cc:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    56d0:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    56d2:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    56d6:	3301      	adds	r3, #1
    56d8:	300c      	adds	r0, #12
    56da:	e7a9      	b.n	5630 <mpu_configure_regions+0x10>
    56dc:	e000ed00 	.word	0xe000ed00
    56e0:	0000e84b 	.word	0x0000e84b
    56e4:	0000d9f4 	.word	0x0000d9f4
    56e8:	0000e86e 	.word	0x0000e86e

000056ec <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    56ec:	4b04      	ldr	r3, [pc, #16]	; (5700 <arm_core_mpu_enable+0x14>)
    56ee:	2205      	movs	r2, #5
    56f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    56f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56f8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    56fc:	4770      	bx	lr
    56fe:	bf00      	nop
    5700:	e000ed00 	.word	0xe000ed00

00005704 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5704:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5708:	4b02      	ldr	r3, [pc, #8]	; (5714 <arm_core_mpu_disable+0x10>)
    570a:	2200      	movs	r2, #0
    570c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5710:	4770      	bx	lr
    5712:	bf00      	nop
    5714:	e000ed00 	.word	0xe000ed00

00005718 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5718:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    571a:	4c03      	ldr	r4, [pc, #12]	; (5728 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    571c:	2301      	movs	r3, #1
    571e:	7822      	ldrb	r2, [r4, #0]
    5720:	f7ff ff7e 	bl	5620 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5724:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5726:	bd10      	pop	{r4, pc}
    5728:	200021d1 	.word	0x200021d1

0000572c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    572c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    572e:	4a09      	ldr	r2, [pc, #36]	; (5754 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5730:	2300      	movs	r3, #0
    5732:	7812      	ldrb	r2, [r2, #0]
    5734:	f7ff ff74 	bl	5620 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5738:	f110 0f16 	cmn.w	r0, #22
    573c:	d003      	beq.n	5746 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    573e:	4b06      	ldr	r3, [pc, #24]	; (5758 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    5740:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5742:	2807      	cmp	r0, #7
    5744:	dd00      	ble.n	5748 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5746:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5748:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    574c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5750:	3001      	adds	r0, #1
    5752:	e7f6      	b.n	5742 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5754:	200021d1 	.word	0x200021d1
    5758:	e000ed00 	.word	0xe000ed00

0000575c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    575c:	4914      	ldr	r1, [pc, #80]	; (57b0 <z_arm_mpu_init+0x54>)
    575e:	6808      	ldr	r0, [r1, #0]
    5760:	2808      	cmp	r0, #8
{
    5762:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5764:	d821      	bhi.n	57aa <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5766:	f7ff ffcd 	bl	5704 <arm_core_mpu_disable>
    576a:	4c12      	ldr	r4, [pc, #72]	; (57b4 <z_arm_mpu_init+0x58>)
    576c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    576e:	2200      	movs	r2, #0
    5770:	4290      	cmp	r0, r2
    5772:	f101 010c 	add.w	r1, r1, #12
    5776:	d105      	bne.n	5784 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5778:	4b0f      	ldr	r3, [pc, #60]	; (57b8 <z_arm_mpu_init+0x5c>)
    577a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    577c:	f7ff ffb6 	bl	56ec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5780:	2000      	movs	r0, #0
}
    5782:	bd10      	pop	{r4, pc}
    5784:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5788:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    578c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5790:	4313      	orrs	r3, r2
    5792:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5796:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    579a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    579e:	f043 0301 	orr.w	r3, r3, #1
    57a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    57a6:	3201      	adds	r2, #1
    57a8:	e7e2      	b.n	5770 <z_arm_mpu_init+0x14>
		return -1;
    57aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    57ae:	e7e8      	b.n	5782 <z_arm_mpu_init+0x26>
    57b0:	0000db90 	.word	0x0000db90
    57b4:	e000ed00 	.word	0xe000ed00
    57b8:	200021d1 	.word	0x200021d1

000057bc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    57bc:	4b01      	ldr	r3, [pc, #4]	; (57c4 <__stdout_hook_install+0x8>)
    57be:	6018      	str	r0, [r3, #0]
}
    57c0:	4770      	bx	lr
    57c2:	bf00      	nop
    57c4:	20000134 	.word	0x20000134

000057c8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    57c8:	f04f 0320 	mov.w	r3, #32
    57cc:	f3ef 8211 	mrs	r2, BASEPRI
    57d0:	f383 8812 	msr	BASEPRI_MAX, r3
    57d4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    57d8:	4906      	ldr	r1, [pc, #24]	; (57f4 <nordicsemi_nrf52_init+0x2c>)
    57da:	2301      	movs	r3, #1
    57dc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    57e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    57e4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    57e8:	f382 8811 	msr	BASEPRI, r2
    57ec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    57f0:	2000      	movs	r0, #0
    57f2:	4770      	bx	lr
    57f4:	4001e000 	.word	0x4001e000

000057f8 <sys_arch_reboot>:
    *p_gpregret = val;
    57f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57fc:	b2c0      	uxtb	r0, r0
    57fe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5802:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5806:	4905      	ldr	r1, [pc, #20]	; (581c <sys_arch_reboot+0x24>)
    5808:	4b05      	ldr	r3, [pc, #20]	; (5820 <sys_arch_reboot+0x28>)
    580a:	68ca      	ldr	r2, [r1, #12]
    580c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5810:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5812:	60cb      	str	r3, [r1, #12]
    5814:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5818:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    581a:	e7fd      	b.n	5818 <sys_arch_reboot+0x20>
    581c:	e000ed00 	.word	0xe000ed00
    5820:	05fa0004 	.word	0x05fa0004

00005824 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5824:	b120      	cbz	r0, 5830 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5826:	4b03      	ldr	r3, [pc, #12]	; (5834 <arch_busy_wait+0x10>)
    5828:	0180      	lsls	r0, r0, #6
    582a:	f043 0301 	orr.w	r3, r3, #1
    582e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5830:	4770      	bx	lr
    5832:	bf00      	nop
    5834:	0000da70 	.word	0x0000da70

00005838 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    5838:	b580      	push	{r7, lr}
    583a:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    583c:	b088      	sub	sp, #32
    583e:	466a      	mov	r2, sp
    5840:	4b06      	ldr	r3, [pc, #24]	; (585c <hid_status_cb.part.0+0x24>)
    5842:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5846:	2303      	movs	r3, #3
    5848:	f842 3f10 	str.w	r3, [r2, #16]!
    584c:	4804      	ldr	r0, [pc, #16]	; (5860 <hid_status_cb.part.0+0x28>)
    584e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5852:	f007 f806 	bl	c862 <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    5856:	46bd      	mov	sp, r7
    5858:	bd80      	pop	{r7, pc}
    585a:	bf00      	nop
    585c:	0000e8a7 	.word	0x0000e8a7
    5860:	0000da34 	.word	0x0000da34

00005864 <hid_custom_handle_req>:
	return -ENOTSUP;
}

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    5864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    5868:	f990 3000 	ldrsb.w	r3, [r0]
    586c:	2b00      	cmp	r3, #0
{
    586e:	af00      	add	r7, sp, #0
    5870:	4604      	mov	r4, r0
    5872:	460d      	mov	r5, r1
    5874:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
    5876:	db04      	blt.n	5882 <hid_custom_handle_req+0x1e>

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
		if (common == NULL) {
			LOG_WRN("Device data not found for interface %u",
				iface_num);
			return -EINVAL;
    5878:	f06f 0015 	mvn.w	r0, #21

		return 0;
	}

	return -EINVAL;
}
    587c:	46bd      	mov	sp, r7
    587e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    5882:	8803      	ldrh	r3, [r0, #0]
    5884:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    5888:	b29b      	uxth	r3, r3
    588a:	f240 6201 	movw	r2, #1537	; 0x601
    588e:	4293      	cmp	r3, r2
    5890:	d1f2      	bne.n	5878 <hid_custom_handle_req+0x14>
		uint8_t iface_num = (uint8_t)setup->wIndex;
    5892:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    5896:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    589a:	481b      	ldr	r0, [pc, #108]	; (5908 <hid_custom_handle_req+0xa4>)
    589c:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    589e:	ea4f 2818 	mov.w	r8, r8, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    58a2:	f006 fe3e 	bl	c522 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    58a6:	b978      	cbnz	r0, 58c8 <hid_custom_handle_req+0x64>
			LOG_WRN("Device data not found for interface %u",
    58a8:	466c      	mov	r4, sp
    58aa:	b088      	sub	sp, #32
    58ac:	466a      	mov	r2, sp
    58ae:	4b17      	ldr	r3, [pc, #92]	; (590c <hid_custom_handle_req+0xa8>)
    58b0:	4817      	ldr	r0, [pc, #92]	; (5910 <hid_custom_handle_req+0xac>)
    58b2:	e9c2 3905 	strd	r3, r9, [r2, #20]
    58b6:	2303      	movs	r3, #3
    58b8:	f842 3f10 	str.w	r3, [r2, #16]!
    58bc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    58c0:	f006 ffcf 	bl	c862 <z_log_msg_static_create.constprop.0>
    58c4:	46a5      	mov	sp, r4
			return -EINVAL;
    58c6:	e7d7      	b.n	5878 <hid_custom_handle_req+0x14>
		switch (value) {
    58c8:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
    58cc:	d005      	beq.n	58da <hid_custom_handle_req+0x76>
    58ce:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    58d2:	d00f      	beq.n	58f4 <hid_custom_handle_req+0x90>
    58d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    58d8:	e7d0      	b.n	587c <hid_custom_handle_req+0x18>
			cfg = common->dev->config;
    58da:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    58dc:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    58de:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    58e0:	685b      	ldr	r3, [r3, #4]
    58e2:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    58e6:	4291      	cmp	r1, r2
    58e8:	bf94      	ite	ls
    58ea:	6029      	strls	r1, [r5, #0]
    58ec:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    58ee:	6033      	str	r3, [r6, #0]
		return 0;
    58f0:	2000      	movs	r0, #0
    58f2:	e7c3      	b.n	587c <hid_custom_handle_req+0x18>
			*len = MIN(setup->wLength, dev_data->report_size);
    58f4:	88e3      	ldrh	r3, [r4, #6]
    58f6:	f850 2c14 	ldr.w	r2, [r0, #-20]
    58fa:	429a      	cmp	r2, r3
    58fc:	bf94      	ite	ls
    58fe:	602a      	strls	r2, [r5, #0]
    5900:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    5902:	f850 3c18 	ldr.w	r3, [r0, #-24]
			break;
    5906:	e7f2      	b.n	58ee <hid_custom_handle_req+0x8a>
    5908:	200013c8 	.word	0x200013c8
    590c:	0000e8c8 	.word	0x0000e8c8
    5910:	0000da34 	.word	0x0000da34

00005914 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    5914:	b580      	push	{r7, lr}
    5916:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    5918:	b088      	sub	sp, #32
    591a:	466a      	mov	r2, sp
    591c:	4b06      	ldr	r3, [pc, #24]	; (5938 <hid_int_in.part.0+0x24>)
    591e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5922:	2303      	movs	r3, #3
    5924:	f842 3f10 	str.w	r3, [r2, #16]!
    5928:	4804      	ldr	r0, [pc, #16]	; (593c <hid_int_in.part.0+0x28>)
    592a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    592e:	f006 ff98 	bl	c862 <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    5932:	46bd      	mov	sp, r7
    5934:	bd80      	pop	{r7, pc}
    5936:	bf00      	nop
    5938:	0000e8ef 	.word	0x0000e8ef
    593c:	0000da34 	.word	0x0000da34

00005940 <hid_int_in>:
{
    5940:	b570      	push	{r4, r5, r6, lr}
    5942:	4604      	mov	r4, r0
    5944:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    5946:	4601      	mov	r1, r0
    5948:	480a      	ldr	r0, [pc, #40]	; (5974 <hid_int_in+0x34>)
    594a:	f006 fdf8 	bl	c53e <usb_get_dev_data_by_ep>
	if (common == NULL) {
    594e:	b920      	cbnz	r0, 595a <hid_int_in+0x1a>
    5950:	4620      	mov	r0, r4
}
    5952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5956:	f7ff bfdd 	b.w	5914 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    595a:	2d02      	cmp	r5, #2
    595c:	d108      	bne.n	5970 <hid_int_in+0x30>
    595e:	f850 3c10 	ldr.w	r3, [r0, #-16]
    5962:	b12b      	cbz	r3, 5970 <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    5964:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    5966:	b11b      	cbz	r3, 5970 <hid_int_in+0x30>
}
    5968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    596c:	6800      	ldr	r0, [r0, #0]
    596e:	4718      	bx	r3
}
    5970:	bd70      	pop	{r4, r5, r6, pc}
    5972:	bf00      	nop
    5974:	200013c8 	.word	0x200013c8

00005978 <hid_class_handle_req>:
{
    5978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    597c:	b087      	sub	sp, #28
    597e:	4605      	mov	r5, r0
    5980:	af00      	add	r7, sp, #0
    5982:	4688      	mov	r8, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    5984:	7901      	ldrb	r1, [r0, #4]
    5986:	484e      	ldr	r0, [pc, #312]	; (5ac0 <hid_class_handle_req+0x148>)
{
    5988:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    598a:	f006 fdca 	bl	c522 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    598e:	4604      	mov	r4, r0
    5990:	b9a8      	cbnz	r0, 59be <hid_class_handle_req+0x46>
		LOG_WRN("Device data not found for interface %u",
    5992:	466c      	mov	r4, sp
    5994:	b088      	sub	sp, #32
    5996:	88ab      	ldrh	r3, [r5, #4]
    5998:	466a      	mov	r2, sp
    599a:	494a      	ldr	r1, [pc, #296]	; (5ac4 <hid_class_handle_req+0x14c>)
    599c:	484a      	ldr	r0, [pc, #296]	; (5ac8 <hid_class_handle_req+0x150>)
    599e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    59a2:	2303      	movs	r3, #3
    59a4:	f842 3f10 	str.w	r3, [r2, #16]!
    59a8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    59ac:	f006 ff59 	bl	c862 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    59b0:	f06f 0012 	mvn.w	r0, #18
    59b4:	46a5      	mov	sp, r4
}
    59b6:	371c      	adds	r7, #28
    59b8:	46bd      	mov	sp, r7
    59ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    59be:	f995 3000 	ldrsb.w	r3, [r5]
	dev = common->dev;
    59c2:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    59c4:	786e      	ldrb	r6, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    59c6:	2b00      	cmp	r3, #0
    59c8:	da3c      	bge.n	5a44 <hid_class_handle_req+0xcc>
		switch (setup->bRequest) {
    59ca:	2e02      	cmp	r6, #2
    59cc:	d00d      	beq.n	59ea <hid_class_handle_req+0x72>
    59ce:	2e03      	cmp	r6, #3
    59d0:	d028      	beq.n	5a24 <hid_class_handle_req+0xac>
    59d2:	2e01      	cmp	r6, #1
    59d4:	d16d      	bne.n	5ab2 <hid_class_handle_req+0x13a>
			if (dev_data->ops && dev_data->ops->get_report) {
    59d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    59da:	b1c3      	cbz	r3, 5a0e <hid_class_handle_req+0x96>
    59dc:	681c      	ldr	r4, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    59de:	b1b4      	cbz	r4, 5a0e <hid_class_handle_req+0x96>
				return dev_data->ops->set_report(dev, setup,
    59e0:	464b      	mov	r3, r9
    59e2:	4642      	mov	r2, r8
    59e4:	4629      	mov	r1, r5
    59e6:	47a0      	blx	r4
    59e8:	e7e5      	b.n	59b6 <hid_class_handle_req+0x3e>
	uint8_t report_id = (uint8_t)setup->wValue;
    59ea:	78ab      	ldrb	r3, [r5, #2]
	if (report_id > CONFIG_USB_HID_REPORTS) {
    59ec:	2b01      	cmp	r3, #1
    59ee:	d911      	bls.n	5a14 <hid_class_handle_req+0x9c>
		LOG_ERR("Report id out of limit: %d", report_id);
    59f0:	466c      	mov	r4, sp
    59f2:	b088      	sub	sp, #32
    59f4:	466a      	mov	r2, sp
    59f6:	4935      	ldr	r1, [pc, #212]	; (5acc <hid_class_handle_req+0x154>)
    59f8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    59fc:	2303      	movs	r3, #3
    59fe:	f842 3f10 	str.w	r3, [r2, #16]!
    5a02:	4831      	ldr	r0, [pc, #196]	; (5ac8 <hid_class_handle_req+0x150>)
    5a04:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5a08:	f006 ff2b 	bl	c862 <z_log_msg_static_create.constprop.0>
    5a0c:	46a5      	mov	sp, r4
		return -ENOTSUP;
    5a0e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5a12:	e7d0      	b.n	59b6 <hid_class_handle_req+0x3e>
		*data = &dev_data->idle_rate[0];
    5a14:	3c07      	subs	r4, #7
		*len = sizeof(dev_data->idle_rate[report_id - 1]);
    5a16:	2301      	movs	r3, #1
		*data = &dev_data->idle_rate[report_id - 1];
    5a18:	f8c9 4000 	str.w	r4, [r9]
		*len = sizeof(dev_data->idle_rate[report_id - 1]);
    5a1c:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    5a20:	2000      	movs	r0, #0
    5a22:	e7c8      	b.n	59b6 <hid_class_handle_req+0x3e>
	if (setup->wValue) {
    5a24:	886b      	ldrh	r3, [r5, #2]
    5a26:	b15b      	cbz	r3, 5a40 <hid_class_handle_req+0xc8>
		LOG_ERR("wValue should be 0");
    5a28:	4b29      	ldr	r3, [pc, #164]	; (5ad0 <hid_class_handle_req+0x158>)
    5a2a:	617b      	str	r3, [r7, #20]
    5a2c:	4826      	ldr	r0, [pc, #152]	; (5ac8 <hid_class_handle_req+0x150>)
    5a2e:	2302      	movs	r3, #2
    5a30:	f107 0210 	add.w	r2, r7, #16
    5a34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5a38:	613b      	str	r3, [r7, #16]
    5a3a:	f006 ff12 	bl	c862 <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
    5a3e:	e7e6      	b.n	5a0e <hid_class_handle_req+0x96>
	*data = &dev_data->protocol;
    5a40:	3c06      	subs	r4, #6
    5a42:	e7e8      	b.n	5a16 <hid_class_handle_req+0x9e>
		switch (setup->bRequest) {
    5a44:	2e0a      	cmp	r6, #10
    5a46:	d009      	beq.n	5a5c <hid_class_handle_req+0xe4>
    5a48:	2e0b      	cmp	r6, #11
    5a4a:	d018      	beq.n	5a7e <hid_class_handle_req+0x106>
    5a4c:	2e09      	cmp	r6, #9
    5a4e:	d130      	bne.n	5ab2 <hid_class_handle_req+0x13a>
			if (dev_data->ops && dev_data->ops->set_report) {
    5a50:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d0da      	beq.n	5a0e <hid_class_handle_req+0x96>
    5a58:	685c      	ldr	r4, [r3, #4]
    5a5a:	e7c0      	b.n	59de <hid_class_handle_req+0x66>
	uint8_t rate = (uint8_t)(setup->wValue >> 8);
    5a5c:	886b      	ldrh	r3, [r5, #2]
    5a5e:	0a1a      	lsrs	r2, r3, #8
	uint8_t report_id = (uint8_t)setup->wValue;
    5a60:	b2db      	uxtb	r3, r3
	if (report_id > CONFIG_USB_HID_REPORTS) {
    5a62:	2b01      	cmp	r3, #1
    5a64:	d8c4      	bhi.n	59f0 <hid_class_handle_req+0x78>
			dev_data->sof_cnt[i] = 0U;
    5a66:	2300      	movs	r3, #0
			dev_data->idle_rate[i] = rate;
    5a68:	f804 2c07 	strb.w	r2, [r4, #-7]
			dev_data->sof_cnt[i] = 0U;
    5a6c:	f844 3c0c 	str.w	r3, [r4, #-12]
	dev_data->idle_on = (bool)setup->wValue;
    5a70:	886b      	ldrh	r3, [r5, #2]
    5a72:	3b00      	subs	r3, #0
    5a74:	bf18      	it	ne
    5a76:	2301      	movne	r3, #1
    5a78:	f804 3c08 	strb.w	r3, [r4, #-8]
	return 0;
    5a7c:	e7d0      	b.n	5a20 <hid_class_handle_req+0xa8>
			return hid_on_set_protocol(dev, dev_data, setup);
    5a7e:	8869      	ldrh	r1, [r5, #2]
	if (protocol > HID_PROTOCOL_REPORT) {
    5a80:	2901      	cmp	r1, #1
    5a82:	d906      	bls.n	5a92 <hid_class_handle_req+0x11a>
		LOG_ERR("Unsupported protocol: %u", protocol);
    5a84:	466c      	mov	r4, sp
    5a86:	b088      	sub	sp, #32
    5a88:	466a      	mov	r2, sp
    5a8a:	4b12      	ldr	r3, [pc, #72]	; (5ad4 <hid_class_handle_req+0x15c>)
    5a8c:	e9c2 3105 	strd	r3, r1, [r2, #20]
    5a90:	e7b4      	b.n	59fc <hid_class_handle_req+0x84>
	if (dev_data->protocol != protocol) {
    5a92:	f814 3c06 	ldrb.w	r3, [r4, #-6]
    5a96:	428b      	cmp	r3, r1
    5a98:	d0c2      	beq.n	5a20 <hid_class_handle_req+0xa8>
		if (dev_data->ops && dev_data->ops->protocol_change) {
    5a9a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		dev_data->protocol = protocol;
    5a9e:	b2c9      	uxtb	r1, r1
    5aa0:	f804 1c06 	strb.w	r1, [r4, #-6]
		if (dev_data->ops && dev_data->ops->protocol_change) {
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d0bb      	beq.n	5a20 <hid_class_handle_req+0xa8>
    5aa8:	689b      	ldr	r3, [r3, #8]
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d0b8      	beq.n	5a20 <hid_class_handle_req+0xa8>
			dev_data->ops->protocol_change(dev, protocol);
    5aae:	4798      	blx	r3
    5ab0:	e7b6      	b.n	5a20 <hid_class_handle_req+0xa8>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    5ab2:	466c      	mov	r4, sp
    5ab4:	b088      	sub	sp, #32
    5ab6:	466a      	mov	r2, sp
    5ab8:	4b07      	ldr	r3, [pc, #28]	; (5ad8 <hid_class_handle_req+0x160>)
    5aba:	e9c2 3605 	strd	r3, r6, [r2, #20]
    5abe:	e79d      	b.n	59fc <hid_class_handle_req+0x84>
    5ac0:	200013c8 	.word	0x200013c8
    5ac4:	0000e8c8 	.word	0x0000e8c8
    5ac8:	0000da34 	.word	0x0000da34
    5acc:	0000e915 	.word	0x0000e915
    5ad0:	0000e930 	.word	0x0000e930
    5ad4:	0000e95c 	.word	0x0000e95c
    5ad8:	0000e943 	.word	0x0000e943

00005adc <hid_status_cb>:
{
    5adc:	b570      	push	{r4, r5, r6, lr}
    5ade:	4606      	mov	r6, r0
    5ae0:	b086      	sub	sp, #24
    5ae2:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    5ae4:	4601      	mov	r1, r0
    5ae6:	4846      	ldr	r0, [pc, #280]	; (5c00 <hid_status_cb+0x124>)
    5ae8:	f006 fd0f 	bl	c50a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    5aec:	4604      	mov	r4, r0
    5aee:	b928      	cbnz	r0, 5afc <hid_status_cb+0x20>
    5af0:	4630      	mov	r0, r6
}
    5af2:	b006      	add	sp, #24
    5af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5af8:	f7ff be9e 	b.w	5838 <hid_status_cb.part.0>
	dev_data = CONTAINER_OF(common, struct hid_device_info, common);
    5afc:	f1a0 0618 	sub.w	r6, r0, #24
	switch (status) {
    5b00:	2d0a      	cmp	r5, #10
    5b02:	d87a      	bhi.n	5bfa <hid_status_cb+0x11e>
    5b04:	e8df f005 	tbb	[pc, r5]
    5b08:	2b291106 	.word	0x2b291106
    5b0c:	79564a3a 	.word	0x79564a3a
    5b10:	7979      	.short	0x7979
    5b12:	6f          	.byte	0x6f
    5b13:	00          	.byte	0x00
		LOG_INF("Device error");
    5b14:	4b3b      	ldr	r3, [pc, #236]	; (5c04 <hid_status_cb+0x128>)
		LOG_INF("Unknown event");
    5b16:	9305      	str	r3, [sp, #20]
    5b18:	483b      	ldr	r0, [pc, #236]	; (5c08 <hid_status_cb+0x12c>)
    5b1a:	2302      	movs	r3, #2
    5b1c:	aa04      	add	r2, sp, #16
    5b1e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5b22:	9304      	str	r3, [sp, #16]
    5b24:	f006 fe9d 	bl	c862 <z_log_msg_static_create.constprop.0>
    5b28:	e026      	b.n	5b78 <hid_status_cb+0x9c>
		LOG_INF("Device reset detected");
    5b2a:	4b38      	ldr	r3, [pc, #224]	; (5c0c <hid_status_cb+0x130>)
    5b2c:	9305      	str	r3, [sp, #20]
    5b2e:	4836      	ldr	r0, [pc, #216]	; (5c08 <hid_status_cb+0x12c>)
    5b30:	2302      	movs	r3, #2
    5b32:	aa04      	add	r2, sp, #16
    5b34:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5b38:	9304      	str	r3, [sp, #16]
    5b3a:	f006 fe92 	bl	c862 <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    5b3e:	2300      	movs	r3, #0
    5b40:	f804 3c05 	strb.w	r3, [r4, #-5]
		dev_data->suspended = false;
    5b44:	f804 3c04 	strb.w	r3, [r4, #-4]
		hid_clear_idle_ctx(dev_data);
    5b48:	4630      	mov	r0, r6
		dev_data->protocol = HID_PROTOCOL_REPORT;
    5b4a:	2301      	movs	r3, #1
    5b4c:	f804 3c06 	strb.w	r3, [r4, #-6]
}
    5b50:	b006      	add	sp, #24
    5b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		hid_clear_idle_ctx(dev_data);
    5b56:	f006 be87 	b.w	c868 <hid_clear_idle_ctx>
		LOG_INF("Device connected");
    5b5a:	4b2d      	ldr	r3, [pc, #180]	; (5c10 <hid_status_cb+0x134>)
    5b5c:	e7db      	b.n	5b16 <hid_status_cb+0x3a>
		LOG_INF("Device configured");
    5b5e:	4b2d      	ldr	r3, [pc, #180]	; (5c14 <hid_status_cb+0x138>)
    5b60:	9305      	str	r3, [sp, #20]
    5b62:	4829      	ldr	r0, [pc, #164]	; (5c08 <hid_status_cb+0x12c>)
    5b64:	2302      	movs	r3, #2
    5b66:	aa04      	add	r2, sp, #16
    5b68:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5b6c:	9304      	str	r3, [sp, #16]
    5b6e:	f006 fe78 	bl	c862 <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    5b72:	2301      	movs	r3, #1
    5b74:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    5b78:	b006      	add	sp, #24
    5b7a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    5b7c:	4b26      	ldr	r3, [pc, #152]	; (5c18 <hid_status_cb+0x13c>)
    5b7e:	9305      	str	r3, [sp, #20]
    5b80:	4821      	ldr	r0, [pc, #132]	; (5c08 <hid_status_cb+0x12c>)
    5b82:	2302      	movs	r3, #2
    5b84:	aa04      	add	r2, sp, #16
    5b86:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5b8a:	9304      	str	r3, [sp, #16]
    5b8c:	f006 fe69 	bl	c862 <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    5b90:	2300      	movs	r3, #0
    5b92:	f804 3c05 	strb.w	r3, [r4, #-5]
			dev_data->suspended = false;
    5b96:	f804 3c04 	strb.w	r3, [r4, #-4]
    5b9a:	e7ed      	b.n	5b78 <hid_status_cb+0x9c>
		LOG_INF("Device suspended");
    5b9c:	4b1f      	ldr	r3, [pc, #124]	; (5c1c <hid_status_cb+0x140>)
    5b9e:	9305      	str	r3, [sp, #20]
    5ba0:	4819      	ldr	r0, [pc, #100]	; (5c08 <hid_status_cb+0x12c>)
    5ba2:	2302      	movs	r3, #2
    5ba4:	aa04      	add	r2, sp, #16
    5ba6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5baa:	9304      	str	r3, [sp, #16]
    5bac:	f006 fe59 	bl	c862 <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    5bb0:	2301      	movs	r3, #1
    5bb2:	e7f0      	b.n	5b96 <hid_status_cb+0xba>
		LOG_INF("Device resumed");
    5bb4:	4b1a      	ldr	r3, [pc, #104]	; (5c20 <hid_status_cb+0x144>)
    5bb6:	4814      	ldr	r0, [pc, #80]	; (5c08 <hid_status_cb+0x12c>)
    5bb8:	9305      	str	r3, [sp, #20]
    5bba:	2502      	movs	r5, #2
    5bbc:	aa04      	add	r2, sp, #16
    5bbe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5bc2:	9504      	str	r5, [sp, #16]
    5bc4:	f006 fe4d 	bl	c862 <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    5bc8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d0d3      	beq.n	5b78 <hid_status_cb+0x9c>
			LOG_INF("from suspend");
    5bd0:	4b14      	ldr	r3, [pc, #80]	; (5c24 <hid_status_cb+0x148>)
    5bd2:	480d      	ldr	r0, [pc, #52]	; (5c08 <hid_status_cb+0x12c>)
    5bd4:	aa04      	add	r2, sp, #16
    5bd6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5bda:	e9cd 5304 	strd	r5, r3, [sp, #16]
    5bde:	f006 fe40 	bl	c862 <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    5be2:	2300      	movs	r3, #0
    5be4:	e7d7      	b.n	5b96 <hid_status_cb+0xba>
		if (dev_data->idle_on) {
    5be6:	f810 3c08 	ldrb.w	r3, [r0, #-8]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d0c4      	beq.n	5b78 <hid_status_cb+0x9c>
			hid_sof_handler(dev_data);
    5bee:	4630      	mov	r0, r6
}
    5bf0:	b006      	add	sp, #24
    5bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			hid_sof_handler(dev_data);
    5bf6:	f006 be3b 	b.w	c870 <hid_sof_handler>
		LOG_INF("Unknown event");
    5bfa:	4b0b      	ldr	r3, [pc, #44]	; (5c28 <hid_status_cb+0x14c>)
    5bfc:	e78b      	b.n	5b16 <hid_status_cb+0x3a>
    5bfe:	bf00      	nop
    5c00:	200013c8 	.word	0x200013c8
    5c04:	0000e975 	.word	0x0000e975
    5c08:	0000da34 	.word	0x0000da34
    5c0c:	0000e982 	.word	0x0000e982
    5c10:	0000e998 	.word	0x0000e998
    5c14:	0000e9a9 	.word	0x0000e9a9
    5c18:	0000e9bb 	.word	0x0000e9bb
    5c1c:	0000e9cf 	.word	0x0000e9cf
    5c20:	0000e9e0 	.word	0x0000e9e0
    5c24:	0000e9ef 	.word	0x0000e9ef
    5c28:	0000e9fc 	.word	0x0000e9fc

00005c2c <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    5c2c:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    5c2e:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    5c30:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    5c34:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    5c36:	2300      	movs	r3, #0
    5c38:	61e3      	str	r3, [r4, #28]
	return list->tail;
    5c3a:	4b06      	ldr	r3, [pc, #24]	; (5c54 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    5c3c:	61a0      	str	r0, [r4, #24]
    5c3e:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    5c40:	f104 021c 	add.w	r2, r4, #28
Z_GENLIST_APPEND(slist, snode)
    5c44:	b911      	cbnz	r1, 5c4c <usb_hid_register_device+0x20>
	list->head = node;
    5c46:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    5c4a:	bd10      	pop	{r4, pc}
	parent->next = child;
    5c4c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5c4e:	605a      	str	r2, [r3, #4]
    5c50:	e7fb      	b.n	5c4a <usb_hid_register_device+0x1e>
    5c52:	bf00      	nop
    5c54:	200013c8 	.word	0x200013c8

00005c58 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    5c58:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    5c5a:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    5c5c:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    5c5e:	7cc5      	ldrb	r5, [r0, #19]
{
    5c60:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    5c62:	b145      	cbz	r5, 5c76 <hid_int_ep_write+0x1e>
    5c64:	7d00      	ldrb	r0, [r0, #20]
    5c66:	b930      	cbnz	r0, 5c76 <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    5c68:	6a20      	ldr	r0, [r4, #32]
    5c6a:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    5c6c:	b007      	add	sp, #28
    5c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    5c72:	f006 bc32 	b.w	c4da <usb_write>
		LOG_WRN("Device is not configured");
    5c76:	4b07      	ldr	r3, [pc, #28]	; (5c94 <hid_int_ep_write+0x3c>)
    5c78:	9305      	str	r3, [sp, #20]
    5c7a:	4807      	ldr	r0, [pc, #28]	; (5c98 <hid_int_ep_write+0x40>)
    5c7c:	2302      	movs	r3, #2
    5c7e:	aa04      	add	r2, sp, #16
    5c80:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    5c84:	9304      	str	r3, [sp, #16]
    5c86:	f006 fdec 	bl	c862 <z_log_msg_static_create.constprop.0>
}
    5c8a:	f06f 000a 	mvn.w	r0, #10
    5c8e:	b007      	add	sp, #28
    5c90:	bd30      	pop	{r4, r5, pc}
    5c92:	bf00      	nop
    5c94:	0000ea0a 	.word	0x0000ea0a
    5c98:	0000da34 	.word	0x0000da34

00005c9c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5c9c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    5c9e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5ca2:	d512      	bpl.n	5cca <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5ca4:	2b08      	cmp	r3, #8
    5ca6:	d105      	bne.n	5cb4 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5ca8:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5caa:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5cae:	d506      	bpl.n	5cbe <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5cb0:	480e      	ldr	r0, [pc, #56]	; (5cec <endpoint_ctx+0x50>)
    5cb2:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    5cb4:	f010 0f78 	tst.w	r0, #120	; 0x78
    5cb8:	d112      	bne.n	5ce0 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5cba:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    5cbe:	204c      	movs	r0, #76	; 0x4c
    5cc0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5cc4:	4b0a      	ldr	r3, [pc, #40]	; (5cf0 <endpoint_ctx+0x54>)
    5cc6:	4418      	add	r0, r3
    5cc8:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5cca:	2b08      	cmp	r3, #8
    5ccc:	d105      	bne.n	5cda <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5cce:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5cd0:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5cd4:	d506      	bpl.n	5ce4 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5cd6:	4807      	ldr	r0, [pc, #28]	; (5cf4 <endpoint_ctx+0x58>)
    5cd8:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    5cda:	f010 0f78 	tst.w	r0, #120	; 0x78
    5cde:	d0f6      	beq.n	5cce <endpoint_ctx+0x32>
		return NULL;
    5ce0:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    5ce2:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5ce4:	4804      	ldr	r0, [pc, #16]	; (5cf8 <endpoint_ctx+0x5c>)
    5ce6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5cea:	4770      	bx	lr
    5cec:	2000151c 	.word	0x2000151c
    5cf0:	200013d0 	.word	0x200013d0
    5cf4:	2000163c 	.word	0x2000163c
    5cf8:	2000153c 	.word	0x2000153c

00005cfc <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5cfc:	4901      	ldr	r1, [pc, #4]	; (5d04 <usbd_work_schedule+0x8>)
    5cfe:	4802      	ldr	r0, [pc, #8]	; (5d08 <usbd_work_schedule+0xc>)
    5d00:	f007 ba8a 	b.w	d218 <k_work_submit_to_queue>
    5d04:	200013f8 	.word	0x200013f8
    5d08:	200009b0 	.word	0x200009b0

00005d0c <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    5d0c:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    5d0e:	4801      	ldr	r0, [pc, #4]	; (5d14 <usbd_evt_put+0x8>)
    5d10:	f007 ba1d 	b.w	d14e <k_queue_append>
    5d14:	20000328 	.word	0x20000328

00005d18 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    5d18:	4802      	ldr	r0, [pc, #8]	; (5d24 <usbd_evt_get+0xc>)
    5d1a:	2200      	movs	r2, #0
    5d1c:	2300      	movs	r3, #0
    5d1e:	f004 bab7 	b.w	a290 <z_impl_k_queue_get>
    5d22:	bf00      	nop
    5d24:	20000328 	.word	0x20000328

00005d28 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    5d28:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5d2a:	4c05      	ldr	r4, [pc, #20]	; (5d40 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    5d2c:	f7ff fff4 	bl	5d18 <usbd_evt_get>
		if (ev) {
    5d30:	b120      	cbz	r0, 5d3c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5d32:	1d01      	adds	r1, r0, #4
    5d34:	4620      	mov	r0, r4
    5d36:	f007 f950 	bl	cfda <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    5d3a:	e7f7      	b.n	5d2c <usbd_evt_flush+0x4>
}
    5d3c:	bd10      	pop	{r4, pc}
    5d3e:	bf00      	nop
    5d40:	20000298 	.word	0x20000298

00005d44 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    5d44:	b510      	push	{r4, lr}
    5d46:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    5d48:	4818      	ldr	r0, [pc, #96]	; (5dac <usbd_evt_alloc+0x68>)
    5d4a:	2200      	movs	r2, #0
    5d4c:	2300      	movs	r3, #0
    5d4e:	a901      	add	r1, sp, #4
    5d50:	f004 f8e4 	bl	9f1c <k_mem_slab_alloc>
    5d54:	b330      	cbz	r0, 5da4 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    5d56:	4b16      	ldr	r3, [pc, #88]	; (5db0 <usbd_evt_alloc+0x6c>)
    5d58:	4816      	ldr	r0, [pc, #88]	; (5db4 <usbd_evt_alloc+0x70>)
    5d5a:	9307      	str	r3, [sp, #28]
    5d5c:	aa06      	add	r2, sp, #24
    5d5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d62:	2402      	movs	r4, #2
    5d64:	9406      	str	r4, [sp, #24]
    5d66:	f006 fdc0 	bl	c8ea <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    5d6a:	f7ff ffdd 	bl	5d28 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5d6e:	480f      	ldr	r0, [pc, #60]	; (5dac <usbd_evt_alloc+0x68>)
    5d70:	2200      	movs	r2, #0
    5d72:	2300      	movs	r3, #0
    5d74:	a901      	add	r1, sp, #4
    5d76:	f004 f8d1 	bl	9f1c <k_mem_slab_alloc>
    5d7a:	b150      	cbz	r0, 5d92 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    5d7c:	4b0e      	ldr	r3, [pc, #56]	; (5db8 <usbd_evt_alloc+0x74>)
    5d7e:	480d      	ldr	r0, [pc, #52]	; (5db4 <usbd_evt_alloc+0x70>)
    5d80:	aa06      	add	r2, sp, #24
    5d82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d86:	e9cd 4306 	strd	r4, r3, [sp, #24]
    5d8a:	f006 fdae 	bl	c8ea <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    5d8e:	2000      	movs	r0, #0
    5d90:	e00a      	b.n	5da8 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    5d92:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    5d94:	2304      	movs	r3, #4
		ev->block = block;
    5d96:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5d98:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    5d9a:	f7ff ffb7 	bl	5d0c <usbd_evt_put>
		usbd_work_schedule();
    5d9e:	f7ff ffad 	bl	5cfc <usbd_work_schedule>

		return NULL;
    5da2:	e7f4      	b.n	5d8e <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    5da4:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    5da6:	6040      	str	r0, [r0, #4]

	return ev;
}
    5da8:	b008      	add	sp, #32
    5daa:	bd10      	pop	{r4, pc}
    5dac:	20000298 	.word	0x20000298
    5db0:	0000ea2b 	.word	0x0000ea2b
    5db4:	0000da3c 	.word	0x0000da3c
    5db8:	0000ea49 	.word	0x0000ea49

00005dbc <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    5dbc:	b598      	push	{r3, r4, r7, lr}
    5dbe:	2802      	cmp	r0, #2
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	d811      	bhi.n	5de8 <usb_dc_power_event_handler+0x2c>
    5dc4:	4b10      	ldr	r3, [pc, #64]	; (5e08 <usb_dc_power_event_handler+0x4c>)
    5dc6:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    5dc8:	f7ff ffbc 	bl	5d44 <usbd_evt_alloc>
	if (!ev) {
    5dcc:	b150      	cbz	r0, 5de4 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    5dce:	2200      	movs	r2, #0
    5dd0:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    5dd2:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    5dd4:	f7ff ff9a 	bl	5d0c <usbd_evt_put>
	if (usbd_ctx.attached) {
    5dd8:	4b0c      	ldr	r3, [pc, #48]	; (5e0c <usb_dc_power_event_handler+0x50>)
    5dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5dde:	b10b      	cbz	r3, 5de4 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    5de0:	f7ff ff8c 	bl	5cfc <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    5de4:	46bd      	mov	sp, r7
    5de6:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    5de8:	466c      	mov	r4, sp
    5dea:	b088      	sub	sp, #32
    5dec:	466a      	mov	r2, sp
    5dee:	4b08      	ldr	r3, [pc, #32]	; (5e10 <usb_dc_power_event_handler+0x54>)
	switch (event) {
    5df0:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    5df4:	2303      	movs	r3, #3
    5df6:	f842 3f10 	str.w	r3, [r2, #16]!
    5dfa:	4806      	ldr	r0, [pc, #24]	; (5e14 <usb_dc_power_event_handler+0x58>)
    5dfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5e00:	f006 fd73 	bl	c8ea <z_log_msg_static_create.constprop.0>
    5e04:	46a5      	mov	sp, r4
    5e06:	e7ed      	b.n	5de4 <usb_dc_power_event_handler+0x28>
    5e08:	0000ec25 	.word	0x0000ec25
    5e0c:	200013d0 	.word	0x200013d0
    5e10:	0000ea65 	.word	0x0000ea65
    5e14:	0000da3c 	.word	0x0000da3c

00005e18 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    5e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    5e1c:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    5e20:	4606      	mov	r6, r0
    5e22:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5e24:	4640      	mov	r0, r8
    5e26:	f7ff ff39 	bl	5c9c <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5e2a:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    5e2e:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    5e30:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5e32:	d025      	beq.n	5e80 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    5e34:	b19c      	cbz	r4, 5e5e <usbd_event_transfer_data+0x46>
    5e36:	2c03      	cmp	r4, #3
    5e38:	d01f      	beq.n	5e7a <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5e3a:	466d      	mov	r5, sp
    5e3c:	b088      	sub	sp, #32
    5e3e:	466a      	mov	r2, sp
    5e40:	4b2a      	ldr	r3, [pc, #168]	; (5eec <usbd_event_transfer_data+0xd4>)
    5e42:	f8c2 801c 	str.w	r8, [r2, #28]
    5e46:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5e4a:	2304      	movs	r3, #4
    5e4c:	f842 3f10 	str.w	r3, [r2, #16]!
    5e50:	4827      	ldr	r0, [pc, #156]	; (5ef0 <usbd_event_transfer_data+0xd8>)
    5e52:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5e56:	f006 fd48 	bl	c8ea <z_log_msg_static_create.constprop.0>
    5e5a:	46ad      	mov	sp, r5
    5e5c:	e00d      	b.n	5e7a <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    5e5e:	f7ff ff71 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    5e62:	4603      	mov	r3, r0
    5e64:	b148      	cbz	r0, 5e7a <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    5e66:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5e68:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5e6a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5e6c:	2203      	movs	r2, #3
    5e6e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5e70:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    5e72:	f7ff ff4b 	bl	5d0c <usbd_evt_put>
			usbd_work_schedule();
    5e76:	f7ff ff41 	bl	5cfc <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    5e7a:	46bd      	mov	sp, r7
    5e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    5e80:	b154      	cbz	r4, 5e98 <usbd_event_transfer_data+0x80>
    5e82:	2c01      	cmp	r4, #1
    5e84:	d1d9      	bne.n	5e3a <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    5e86:	f7ff ff5d 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    5e8a:	4603      	mov	r3, r0
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d0f4      	beq.n	5e7a <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    5e90:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5e92:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5e94:	7304      	strb	r4, [r0, #12]
    5e96:	e7eb      	b.n	5e70 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    5e98:	f7ff ff54 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d0ec      	beq.n	5e7a <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    5ea0:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5ea2:	4b14      	ldr	r3, [pc, #80]	; (5ef4 <usbd_event_transfer_data+0xdc>)
    5ea4:	f012 0f80 	tst.w	r2, #128	; 0x80
    5ea8:	f002 0108 	and.w	r1, r2, #8
    5eac:	d011      	beq.n	5ed2 <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5eae:	b141      	cbz	r1, 5ec2 <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    5eb0:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5eb4:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    5eb6:	2301      	movs	r3, #1
    5eb8:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5eba:	2302      	movs	r3, #2
    5ebc:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5ebe:	6085      	str	r5, [r0, #8]
    5ec0:	e7d7      	b.n	5e72 <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    5ec2:	f002 020f 	and.w	r2, r2, #15
    5ec6:	2114      	movs	r1, #20
    5ec8:	fb01 3302 	mla	r3, r1, r2, r3
    5ecc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5ed0:	e7f0      	b.n	5eb4 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5ed2:	b111      	cbz	r1, 5eda <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5ed4:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    5ed8:	e7ec      	b.n	5eb4 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    5eda:	f002 020f 	and.w	r2, r2, #15
    5ede:	2114      	movs	r1, #20
    5ee0:	fb01 3302 	mla	r3, r1, r2, r3
    5ee4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5ee8:	e7e4      	b.n	5eb4 <usbd_event_transfer_data+0x9c>
    5eea:	bf00      	nop
    5eec:	0000ea80 	.word	0x0000ea80
    5ef0:	0000da3c 	.word	0x0000da3c
    5ef4:	40027000 	.word	0x40027000

00005ef8 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    5ef8:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    5efa:	4812      	ldr	r0, [pc, #72]	; (5f44 <usb_init+0x4c>)
    5efc:	f003 f970 	bl	91e0 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5f00:	4b11      	ldr	r3, [pc, #68]	; (5f48 <usb_init+0x50>)
    5f02:	4298      	cmp	r0, r3
    5f04:	d11a      	bne.n	5f3c <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    5f06:	4811      	ldr	r0, [pc, #68]	; (5f4c <usb_init+0x54>)
    5f08:	f002 fb0a 	bl	8520 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    5f0c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    5f0e:	4810      	ldr	r0, [pc, #64]	; (5f50 <usb_init+0x58>)
    5f10:	f002 fb4c 	bl	85ac <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    5f14:	490f      	ldr	r1, [pc, #60]	; (5f54 <usb_init+0x5c>)
    5f16:	4810      	ldr	r0, [pc, #64]	; (5f58 <usb_init+0x60>)
    5f18:	9400      	str	r4, [sp, #0]
    5f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5f22:	f004 fb2d 	bl	a580 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    5f26:	490d      	ldr	r1, [pc, #52]	; (5f5c <usb_init+0x64>)
    5f28:	480b      	ldr	r0, [pc, #44]	; (5f58 <usb_init+0x60>)
    5f2a:	f007 f885 	bl	d038 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    5f2e:	480c      	ldr	r0, [pc, #48]	; (5f60 <usb_init+0x68>)
    5f30:	490c      	ldr	r1, [pc, #48]	; (5f64 <usb_init+0x6c>)
    5f32:	f007 f954 	bl	d1de <k_work_init>

	return 0;
    5f36:	4620      	mov	r0, r4
}
    5f38:	b002      	add	sp, #8
    5f3a:	bd10      	pop	{r4, pc}
		return -EIO;
    5f3c:	f06f 0004 	mvn.w	r0, #4
    5f40:	e7fa      	b.n	5f38 <usb_init+0x40>
    5f42:	bf00      	nop
    5f44:	00005fa9 	.word	0x00005fa9
    5f48:	0bad0000 	.word	0x0bad0000
    5f4c:	0000ec28 	.word	0x0000ec28
    5f50:	0000dbb4 	.word	0x0000dbb4
    5f54:	20002980 	.word	0x20002980
    5f58:	200009b0 	.word	0x200009b0
    5f5c:	0000eaac 	.word	0x0000eaac
    5f60:	200013f8 	.word	0x200013f8
    5f64:	00006185 	.word	0x00006185

00005f68 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    5f68:	b510      	push	{r4, lr}
    5f6a:	490e      	ldr	r1, [pc, #56]	; (5fa4 <hfxo_stop.constprop.0.isra.0+0x3c>)
    5f6c:	f3bf 8f5b 	dmb	ish
    5f70:	2300      	movs	r3, #0
    5f72:	e851 2f00 	ldrex	r2, [r1]
    5f76:	2a01      	cmp	r2, #1
    5f78:	d103      	bne.n	5f82 <hfxo_stop.constprop.0.isra.0+0x1a>
    5f7a:	e841 3000 	strex	r0, r3, [r1]
    5f7e:	2800      	cmp	r0, #0
    5f80:	d1f7      	bne.n	5f72 <hfxo_stop.constprop.0.isra.0+0xa>
    5f82:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    5f86:	d10c      	bne.n	5fa2 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5f88:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    5f8c:	3914      	subs	r1, #20
    5f8e:	4620      	mov	r0, r4
    5f90:	f005 fe53 	bl	bc3a <onoff_cancel>

	if (rv == -EALREADY) {
    5f94:	3078      	adds	r0, #120	; 0x78
    5f96:	d104      	bne.n	5fa2 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    5f98:	4620      	mov	r0, r4
}
    5f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f9e:	f005 be27 	b.w	bbf0 <onoff_release>
    5fa2:	bd10      	pop	{r4, pc}
    5fa4:	200013f0 	.word	0x200013f0

00005fa8 <usbd_event_handler>:
{
    5fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fac:	b088      	sub	sp, #32
    5fae:	4606      	mov	r6, r0
    5fb0:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    5fb2:	2214      	movs	r2, #20
    5fb4:	2100      	movs	r1, #0
    5fb6:	f107 000c 	add.w	r0, r7, #12
    5fba:	f006 fc30 	bl	c81e <memset>
	switch (p_event->type) {
    5fbe:	7833      	ldrb	r3, [r6, #0]
    5fc0:	2b06      	cmp	r3, #6
    5fc2:	d824      	bhi.n	600e <usbd_event_handler+0x66>
    5fc4:	e8df f003 	tbb	[pc, r3]
    5fc8:	1612049e 	.word	0x1612049e
    5fcc:	9016      	.short	0x9016
    5fce:	18          	.byte	0x18
    5fcf:	00          	.byte	0x00
		evt.evt_type = USBD_EVT_RESET;
    5fd0:	2402      	movs	r4, #2
		ev = usbd_evt_alloc();
    5fd2:	f7ff feb7 	bl	5d44 <usbd_evt_alloc>
		if (!ev) {
    5fd6:	4603      	mov	r3, r0
    5fd8:	b1c8      	cbz	r0, 600e <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    5fda:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    5fdc:	f100 0208 	add.w	r2, r0, #8
    5fe0:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    5fe4:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    5fe8:	4618      	mov	r0, r3
    5fea:	e038      	b.n	605e <usbd_event_handler+0xb6>
	switch (p_event->type) {
    5fec:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    5fee:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    5ff0:	2400      	movs	r4, #0
    5ff2:	e7ee      	b.n	5fd2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    5ff4:	2304      	movs	r3, #4
    5ff6:	e7fa      	b.n	5fee <usbd_event_handler+0x46>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5ff8:	f896 8002 	ldrb.w	r8, [r6, #2]
    5ffc:	4640      	mov	r0, r8
    5ffe:	f7ff fe4d 	bl	5c9c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    6002:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    6004:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    6006:	b133      	cbz	r3, 6016 <usbd_event_handler+0x6e>
    6008:	3b01      	subs	r3, #1
    600a:	2b02      	cmp	r3, #2
    600c:	d968      	bls.n	60e0 <usbd_event_handler+0x138>
}
    600e:	3720      	adds	r7, #32
    6010:	46bd      	mov	sp, r7
    6012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6016:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    601a:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    601c:	d024      	beq.n	6068 <usbd_event_handler+0xc0>
		switch (p_event->data.eptransfer.status) {
    601e:	b19c      	cbz	r4, 6048 <usbd_event_handler+0xa0>
    6020:	2c03      	cmp	r4, #3
    6022:	d0f4      	beq.n	600e <usbd_event_handler+0x66>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6024:	466d      	mov	r5, sp
    6026:	b088      	sub	sp, #32
    6028:	466a      	mov	r2, sp
    602a:	4b37      	ldr	r3, [pc, #220]	; (6108 <usbd_event_handler+0x160>)
    602c:	f8c2 801c 	str.w	r8, [r2, #28]
    6030:	e9c2 3405 	strd	r3, r4, [r2, #20]
    6034:	2304      	movs	r3, #4
    6036:	f842 3f10 	str.w	r3, [r2, #16]!
    603a:	4834      	ldr	r0, [pc, #208]	; (610c <usbd_event_handler+0x164>)
    603c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6040:	f006 fc53 	bl	c8ea <z_log_msg_static_create.constprop.0>
    6044:	46ad      	mov	sp, r5
    6046:	e7e2      	b.n	600e <usbd_event_handler+0x66>
			struct usbd_event *ev = usbd_evt_alloc();
    6048:	f7ff fe7c 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    604c:	4603      	mov	r3, r0
    604e:	2800      	cmp	r0, #0
    6050:	d0dd      	beq.n	600e <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    6052:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    6054:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    6056:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    6058:	2203      	movs	r2, #3
    605a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    605c:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    605e:	f7ff fe55 	bl	5d0c <usbd_evt_put>
		usbd_work_schedule();
    6062:	f7ff fe4b 	bl	5cfc <usbd_work_schedule>
    6066:	e7d2      	b.n	600e <usbd_event_handler+0x66>
		switch (p_event->data.eptransfer.status) {
    6068:	b154      	cbz	r4, 6080 <usbd_event_handler+0xd8>
    606a:	2c01      	cmp	r4, #1
    606c:	d1da      	bne.n	6024 <usbd_event_handler+0x7c>
			struct usbd_event *ev = usbd_evt_alloc();
    606e:	f7ff fe69 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    6072:	4603      	mov	r3, r0
    6074:	2800      	cmp	r0, #0
    6076:	d0ca      	beq.n	600e <usbd_event_handler+0x66>
			ep_ctx->read_pending = true;
    6078:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    607a:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    607c:	7304      	strb	r4, [r0, #12]
    607e:	e7ed      	b.n	605c <usbd_event_handler+0xb4>
			struct usbd_event *ev = usbd_evt_alloc();
    6080:	f7ff fe60 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    6084:	4604      	mov	r4, r0
    6086:	2800      	cmp	r0, #0
    6088:	d0c1      	beq.n	600e <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    608a:	2301      	movs	r3, #1
    608c:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    608e:	2302      	movs	r3, #2
    6090:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6092:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    6094:	78b0      	ldrb	r0, [r6, #2]
    6096:	f105 010c 	add.w	r1, r5, #12
    609a:	f006 ff2f 	bl	cefc <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    609e:	b170      	cbz	r0, 60be <usbd_event_handler+0x116>
				LOG_ERR("_ep_status_get failed! Code: %d",
    60a0:	466e      	mov	r6, sp
    60a2:	b088      	sub	sp, #32
    60a4:	466a      	mov	r2, sp
    60a6:	4b1a      	ldr	r3, [pc, #104]	; (6110 <usbd_event_handler+0x168>)
    60a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    60ac:	2303      	movs	r3, #3
    60ae:	f842 3f10 	str.w	r3, [r2, #16]!
    60b2:	4816      	ldr	r0, [pc, #88]	; (610c <usbd_event_handler+0x164>)
    60b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    60b8:	f006 fc17 	bl	c8ea <z_log_msg_static_create.constprop.0>
    60bc:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    60be:	4a15      	ldr	r2, [pc, #84]	; (6114 <usbd_event_handler+0x16c>)
    60c0:	68e9      	ldr	r1, [r5, #12]
    60c2:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    60c6:	428b      	cmp	r3, r1
    60c8:	d906      	bls.n	60d8 <usbd_event_handler+0x130>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    60ca:	1a5b      	subs	r3, r3, r1
    60cc:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    60d0:	f003 fac2 	bl	9658 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    60d4:	4620      	mov	r0, r4
    60d6:	e7c2      	b.n	605e <usbd_event_handler+0xb6>
				ctx->ctrl_read_len = 0U;
    60d8:	2300      	movs	r3, #0
    60da:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    60de:	e7f9      	b.n	60d4 <usbd_event_handler+0x12c>
			usbd_event_transfer_data(p_event);
    60e0:	4630      	mov	r0, r6
    60e2:	f7ff fe99 	bl	5e18 <usbd_event_transfer_data>
	if (put_evt) {
    60e6:	e792      	b.n	600e <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    60e8:	1d38      	adds	r0, r7, #4
    60ea:	f003 fa8f 	bl	960c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    60ee:	797b      	ldrb	r3, [r7, #5]
    60f0:	2b05      	cmp	r3, #5
    60f2:	d103      	bne.n	60fc <usbd_event_handler+0x154>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    60f4:	793b      	ldrb	r3, [r7, #4]
    60f6:	f013 0f60 	tst.w	r3, #96	; 0x60
    60fa:	d088      	beq.n	600e <usbd_event_handler+0x66>
			evt.evt.ep_evt.ep = ep_ctx;
    60fc:	4b06      	ldr	r3, [pc, #24]	; (6118 <usbd_event_handler+0x170>)
    60fe:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    6100:	2401      	movs	r4, #1
    6102:	e766      	b.n	5fd2 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    6104:	2403      	movs	r4, #3
    6106:	e764      	b.n	5fd2 <usbd_event_handler+0x2a>
    6108:	0000ea80 	.word	0x0000ea80
    610c:	0000da3c 	.word	0x0000da3c
    6110:	0000eab7 	.word	0x0000eab7
    6114:	200013d0 	.word	0x200013d0
    6118:	2000153c 	.word	0x2000153c

0000611c <eps_ctx_init>:
{
    611c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    611e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6120:	f064 007f 	orn	r0, r4, #127	; 0x7f
    6124:	b2c0      	uxtb	r0, r0
    6126:	f7ff fdb9 	bl	5c9c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    612a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    612c:	f006 fbca 	bl	c8c4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6130:	2c08      	cmp	r4, #8
    6132:	d1f5      	bne.n	6120 <eps_ctx_init+0x4>
    6134:	4d0e      	ldr	r5, [pc, #56]	; (6170 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6136:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6138:	b2e0      	uxtb	r0, r4
    613a:	f7ff fdaf 	bl	5c9c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    613e:	6903      	ldr	r3, [r0, #16]
    6140:	b903      	cbnz	r3, 6144 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    6142:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6144:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    6146:	f006 fbbd 	bl	c8c4 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    614a:	2c08      	cmp	r4, #8
    614c:	f105 0540 	add.w	r5, r5, #64	; 0x40
    6150:	d1f2      	bne.n	6138 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    6152:	4808      	ldr	r0, [pc, #32]	; (6174 <eps_ctx_init+0x58>)
    6154:	f006 fbb6 	bl	c8c4 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    6158:	4b07      	ldr	r3, [pc, #28]	; (6178 <eps_ctx_init+0x5c>)
    615a:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    615e:	b912      	cbnz	r2, 6166 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    6160:	4a06      	ldr	r2, [pc, #24]	; (617c <eps_ctx_init+0x60>)
    6162:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    6166:	4806      	ldr	r0, [pc, #24]	; (6180 <eps_ctx_init+0x64>)
    6168:	f006 fbac 	bl	c8c4 <ep_ctx_reset>
}
    616c:	2000      	movs	r0, #0
    616e:	bd38      	pop	{r3, r4, r5, pc}
    6170:	20001a60 	.word	0x20001a60
    6174:	2000151c 	.word	0x2000151c
    6178:	200013d0 	.word	0x200013d0
    617c:	20001660 	.word	0x20001660
    6180:	2000163c 	.word	0x2000163c

00006184 <usbd_work_handler>:
{
    6184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    6188:	4ca3      	ldr	r4, [pc, #652]	; (6418 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    618a:	f8df a290 	ldr.w	sl, [pc, #656]	; 641c <usbd_work_handler+0x298>
{
    618e:	b086      	sub	sp, #24
    6190:	4680      	mov	r8, r0
    6192:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    6194:	f7ff fdc0 	bl	5d18 <usbd_evt_get>
    6198:	4606      	mov	r6, r0
    619a:	b918      	cbnz	r0, 61a4 <usbd_work_handler+0x20>
}
    619c:	3718      	adds	r7, #24
    619e:	46bd      	mov	sp, r7
    61a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    61a4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    61a8:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    61aa:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    61ae:	b93a      	cbnz	r2, 61c0 <usbd_work_handler+0x3c>
    61b0:	2b00      	cmp	r3, #0
    61b2:	f000 80af 	beq.w	6314 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    61b6:	4899      	ldr	r0, [pc, #612]	; (641c <usbd_work_handler+0x298>)
    61b8:	4649      	mov	r1, r9
    61ba:	f006 ff0e 	bl	cfda <k_mem_slab_free>
}
    61be:	e7e9      	b.n	6194 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    61c0:	2b04      	cmp	r3, #4
    61c2:	f200 8195 	bhi.w	64f0 <usbd_work_handler+0x36c>
    61c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    61ca:	00a5      	.short	0x00a5
    61cc:	013b0005 	.word	0x013b0005
    61d0:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    61d4:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    61d8:	b983      	cbnz	r3, 61fc <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    61da:	68b3      	ldr	r3, [r6, #8]
    61dc:	466d      	mov	r5, sp
    61de:	b088      	sub	sp, #32
    61e0:	7a5b      	ldrb	r3, [r3, #9]
    61e2:	466a      	mov	r2, sp
    61e4:	498e      	ldr	r1, [pc, #568]	; (6420 <usbd_work_handler+0x29c>)
    61e6:	488f      	ldr	r0, [pc, #572]	; (6424 <usbd_work_handler+0x2a0>)
    61e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    61ec:	2303      	movs	r3, #3
    61ee:	f842 3f10 	str.w	r3, [r2, #16]!
    61f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    61f6:	f006 fb78 	bl	c8ea <z_log_msg_static_create.constprop.0>
    61fa:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    61fc:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    61fe:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    6200:	2b03      	cmp	r3, #3
    6202:	d839      	bhi.n	6278 <usbd_work_handler+0xf4>
    6204:	e8df f003 	tbb	[pc, r3]
    6208:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    620c:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    620e:	2208      	movs	r2, #8
    6210:	2100      	movs	r1, #0
    6212:	4630      	mov	r0, r6
    6214:	f006 fb03 	bl	c81e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6218:	4b83      	ldr	r3, [pc, #524]	; (6428 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    621a:	4884      	ldr	r0, [pc, #528]	; (642c <usbd_work_handler+0x2a8>)
    621c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    6220:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    6222:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    6226:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    6228:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    622c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    6230:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6234:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    6236:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    623a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    623e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    6242:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    6244:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6248:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    624c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6250:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    6252:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6254:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6256:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6258:	f006 fad6 	bl	c808 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    625c:	682b      	ldr	r3, [r5, #0]
    625e:	7a68      	ldrb	r0, [r5, #9]
    6260:	2100      	movs	r1, #0
    6262:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    6264:	f996 3000 	ldrsb.w	r3, [r6]
    6268:	2b00      	cmp	r3, #0
    626a:	db08      	blt.n	627e <usbd_work_handler+0xfa>
    626c:	88f3      	ldrh	r3, [r6, #6]
    626e:	b133      	cbz	r3, 627e <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    6270:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    6274:	f003 f9f0 	bl	9658 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6278:	4649      	mov	r1, r9
    627a:	4650      	mov	r0, sl
    627c:	e79d      	b.n	61ba <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    627e:	2300      	movs	r3, #0
    6280:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    6284:	e7f8      	b.n	6278 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    6286:	7f6b      	ldrb	r3, [r5, #29]
    6288:	2b00      	cmp	r3, #0
    628a:	d0f5      	beq.n	6278 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    628c:	7f2b      	ldrb	r3, [r5, #28]
    628e:	2b00      	cmp	r3, #0
    6290:	d0f2      	beq.n	6278 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    6292:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6294:	4866      	ldr	r0, [pc, #408]	; (6430 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    6296:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    629c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    62a0:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    62a2:	f006 fb25 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    62a6:	696b      	ldr	r3, [r5, #20]
    62a8:	603b      	str	r3, [r7, #0]
    62aa:	686b      	ldr	r3, [r5, #4]
    62ac:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    62b0:	4639      	mov	r1, r7
    62b2:	7a68      	ldrb	r0, [r5, #9]
    62b4:	f002 ffd6 	bl	9264 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    62b8:	4b5e      	ldr	r3, [pc, #376]	; (6434 <usbd_work_handler+0x2b0>)
    62ba:	4298      	cmp	r0, r3
    62bc:	d00e      	beq.n	62dc <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    62be:	466d      	mov	r5, sp
    62c0:	b088      	sub	sp, #32
    62c2:	466a      	mov	r2, sp
    62c4:	4b5c      	ldr	r3, [pc, #368]	; (6438 <usbd_work_handler+0x2b4>)
    62c6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    62ca:	2303      	movs	r3, #3
    62cc:	f842 3f10 	str.w	r3, [r2, #16]!
    62d0:	4854      	ldr	r0, [pc, #336]	; (6424 <usbd_work_handler+0x2a0>)
    62d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    62d6:	f006 fb08 	bl	c8ea <z_log_msg_static_create.constprop.0>
    62da:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    62dc:	4854      	ldr	r0, [pc, #336]	; (6430 <usbd_work_handler+0x2ac>)
    62de:	f006 fb09 	bl	c8f4 <k_mutex_unlock.isra.0>
    62e2:	e7c9      	b.n	6278 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    62e4:	682b      	ldr	r3, [r5, #0]
    62e6:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    62e8:	7a68      	ldrb	r0, [r5, #9]
    62ea:	4798      	blx	r3
		break;
    62ec:	e7c4      	b.n	6278 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    62ee:	7aab      	ldrb	r3, [r5, #10]
    62f0:	b96b      	cbnz	r3, 630e <usbd_work_handler+0x18a>
    62f2:	7feb      	ldrb	r3, [r5, #31]
    62f4:	b95b      	cbnz	r3, 630e <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    62f6:	484e      	ldr	r0, [pc, #312]	; (6430 <usbd_work_handler+0x2ac>)
    62f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6300:	f006 faf6 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    6304:	f003 f9d8 	bl	96b8 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    6308:	4849      	ldr	r0, [pc, #292]	; (6430 <usbd_work_handler+0x2ac>)
    630a:	f006 faf3 	bl	c8f4 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    630e:	682b      	ldr	r3, [r5, #0]
    6310:	2102      	movs	r1, #2
    6312:	e7e9      	b.n	62e8 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    6314:	7a33      	ldrb	r3, [r6, #8]
    6316:	2b04      	cmp	r3, #4
    6318:	d8ae      	bhi.n	6278 <usbd_work_handler+0xf4>
    631a:	e8df f003 	tbb	[pc, r3]
    631e:	0359      	.short	0x0359
    6320:	6723      	.short	0x6723
    6322:	73          	.byte	0x73
    6323:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    6324:	f002 ff26 	bl	9174 <nrfx_usbd_is_enabled>
    6328:	4605      	mov	r5, r0
    632a:	2800      	cmp	r0, #0
    632c:	d1a4      	bne.n	6278 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    632e:	f002 fe5d 	bl	8fec <nrfx_usbd_enable>
    6332:	f3bf 8f5b 	dmb	ish
    6336:	4941      	ldr	r1, [pc, #260]	; (643c <usbd_work_handler+0x2b8>)
    6338:	2301      	movs	r3, #1
    633a:	e851 2f00 	ldrex	r2, [r1]
    633e:	2a00      	cmp	r2, #0
    6340:	d103      	bne.n	634a <usbd_work_handler+0x1c6>
    6342:	e841 3000 	strex	r0, r3, [r1]
    6346:	2800      	cmp	r0, #0
    6348:	d1f7      	bne.n	633a <usbd_work_handler+0x1b6>
    634a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    634e:	d193      	bne.n	6278 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6350:	f841 5c08 	str.w	r5, [r1, #-8]
    6354:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    6358:	69e0      	ldr	r0, [r4, #28]
    635a:	6163      	str	r3, [r4, #20]
    635c:	3914      	subs	r1, #20
    635e:	f005 fbef 	bl	bb40 <onoff_request>
    6362:	e789      	b.n	6278 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    6364:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    6366:	f065 007f 	orn	r0, r5, #127	; 0x7f
    636a:	b2c0      	uxtb	r0, r0
    636c:	f7ff fc96 	bl	5c9c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6370:	7a03      	ldrb	r3, [r0, #8]
    6372:	b113      	cbz	r3, 637a <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6374:	7a40      	ldrb	r0, [r0, #9]
    6376:	f003 fb4f 	bl	9a18 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    637a:	3501      	adds	r5, #1
    637c:	2d08      	cmp	r5, #8
    637e:	d1f2      	bne.n	6366 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    6380:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    6384:	b11b      	cbz	r3, 638e <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    6386:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    638a:	f003 fb45 	bl	9a18 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    638e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    6390:	b2e8      	uxtb	r0, r5
    6392:	f7ff fc83 	bl	5c9c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    6396:	7a03      	ldrb	r3, [r0, #8]
    6398:	b113      	cbz	r3, 63a0 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    639a:	7a40      	ldrb	r0, [r0, #9]
    639c:	f003 fb3c 	bl	9a18 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    63a0:	3501      	adds	r5, #1
    63a2:	2d08      	cmp	r5, #8
    63a4:	d1f4      	bne.n	6390 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    63a6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    63aa:	b11b      	cbz	r3, 63b4 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    63ac:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    63b0:	f003 fb32 	bl	9a18 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    63b4:	2001      	movs	r0, #1
    63b6:	f002 febf 	bl	9138 <nrfx_usbd_start>
		ctx->ready = true;
    63ba:	2301      	movs	r3, #1
    63bc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    63c0:	6823      	ldr	r3, [r4, #0]
    63c2:	2b00      	cmp	r3, #0
    63c4:	f43f af58 	beq.w	6278 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    63c8:	2100      	movs	r1, #0
    63ca:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    63cc:	4798      	blx	r3
    63ce:	e753      	b.n	6278 <usbd_work_handler+0xf4>
		ctx->ready = false;
    63d0:	2500      	movs	r5, #0
    63d2:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    63d6:	f003 fadb 	bl	9990 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    63da:	f7ff fdc5 	bl	5f68 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    63de:	6823      	ldr	r3, [r4, #0]
    63e0:	2b00      	cmp	r3, #0
    63e2:	f43f af49 	beq.w	6278 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    63e6:	4629      	mov	r1, r5
    63e8:	2004      	movs	r0, #4
    63ea:	e7ef      	b.n	63cc <usbd_work_handler+0x248>
		if (dev_ready()) {
    63ec:	2a00      	cmp	r2, #0
    63ee:	f43f af43 	beq.w	6278 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    63f2:	f002 fec9 	bl	9188 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    63f6:	6823      	ldr	r3, [r4, #0]
    63f8:	2b00      	cmp	r3, #0
    63fa:	f43f af3d 	beq.w	6278 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    63fe:	2100      	movs	r1, #0
    6400:	2005      	movs	r0, #5
    6402:	e7e3      	b.n	63cc <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    6404:	6823      	ldr	r3, [r4, #0]
    6406:	2b00      	cmp	r3, #0
    6408:	f43f af36 	beq.w	6278 <usbd_work_handler+0xf4>
    640c:	2a00      	cmp	r2, #0
    640e:	f43f af33 	beq.w	6278 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    6412:	2100      	movs	r1, #0
    6414:	2006      	movs	r0, #6
    6416:	e7d9      	b.n	63cc <usbd_work_handler+0x248>
    6418:	200013d0 	.word	0x200013d0
    641c:	20000298 	.word	0x20000298
    6420:	0000ead7 	.word	0x0000ead7
    6424:	0000da3c 	.word	0x0000da3c
    6428:	40027000 	.word	0x40027000
    642c:	200013d4 	.word	0x200013d4
    6430:	20001408 	.word	0x20001408
    6434:	0bad0000 	.word	0x0bad0000
    6438:	0000eafd 	.word	0x0000eafd
    643c:	200013f0 	.word	0x200013f0
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6440:	f108 0510 	add.w	r5, r8, #16
    6444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    644c:	4628      	mov	r0, r5
    644e:	f006 fa4f 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    6452:	f7ff fe63 	bl	611c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    6456:	4628      	mov	r0, r5
    6458:	f006 fa4c 	bl	c8f4 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    645c:	f858 3c28 	ldr.w	r3, [r8, #-40]
    6460:	2b00      	cmp	r3, #0
    6462:	f43f af09 	beq.w	6278 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    6466:	2100      	movs	r1, #0
    6468:	2001      	movs	r0, #1
    646a:	e7af      	b.n	63cc <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    646c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    6470:	b193      	cbz	r3, 6498 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    6472:	2501      	movs	r5, #1
    6474:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    6478:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    647c:	f7ff fc62 	bl	5d44 <usbd_evt_alloc>
		if (!ev) {
    6480:	b990      	cbnz	r0, 64a8 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    6482:	4b23      	ldr	r3, [pc, #140]	; (6510 <usbd_work_handler+0x38c>)
    6484:	617b      	str	r3, [r7, #20]
    6486:	2302      	movs	r3, #2
    6488:	4822      	ldr	r0, [pc, #136]	; (6514 <usbd_work_handler+0x390>)
    648a:	613b      	str	r3, [r7, #16]
    648c:	f107 0210 	add.w	r2, r7, #16
    6490:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6494:	f006 fa29 	bl	c8ea <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    6498:	f858 3c28 	ldr.w	r3, [r8, #-40]
    649c:	2b00      	cmp	r3, #0
    649e:	f43f aeeb 	beq.w	6278 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    64a2:	2100      	movs	r1, #0
    64a4:	200a      	movs	r0, #10
    64a6:	e791      	b.n	63cc <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    64a8:	4a1b      	ldr	r2, [pc, #108]	; (6518 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    64aa:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    64ac:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    64ae:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    64b0:	f7ff fc2c 	bl	5d0c <usbd_evt_put>
		usbd_work_schedule();
    64b4:	f7ff fc22 	bl	5cfc <usbd_work_schedule>
    64b8:	e7ee      	b.n	6498 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    64ba:	4b18      	ldr	r3, [pc, #96]	; (651c <usbd_work_handler+0x398>)
    64bc:	617b      	str	r3, [r7, #20]
    64be:	2302      	movs	r3, #2
    64c0:	613b      	str	r3, [r7, #16]
    64c2:	f107 0210 	add.w	r2, r7, #16
    64c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64ca:	4812      	ldr	r0, [pc, #72]	; (6514 <usbd_work_handler+0x390>)
    64cc:	f006 fa0d 	bl	c8ea <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    64d0:	f006 fc5b 	bl	cd8a <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    64d4:	f003 fa5c 	bl	9990 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    64d8:	f002 fd7e 	bl	8fd8 <nrfx_usbd_uninit>
	usbd_evt_flush();
    64dc:	f7ff fc24 	bl	5d28 <usbd_evt_flush>
	ret = eps_ctx_init();
    64e0:	f7ff fe1c 	bl	611c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    64e4:	f006 fc4a 	bl	cd7c <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    64e8:	480d      	ldr	r0, [pc, #52]	; (6520 <usbd_work_handler+0x39c>)
    64ea:	f002 fe79 	bl	91e0 <nrfx_usbd_init>
}
    64ee:	e6c3      	b.n	6278 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    64f0:	466d      	mov	r5, sp
    64f2:	b088      	sub	sp, #32
    64f4:	466a      	mov	r2, sp
    64f6:	490b      	ldr	r1, [pc, #44]	; (6524 <usbd_work_handler+0x3a0>)
    64f8:	4806      	ldr	r0, [pc, #24]	; (6514 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    64fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    64fe:	2303      	movs	r3, #3
    6500:	f842 3f10 	str.w	r3, [r2, #16]!
    6504:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6508:	f006 f9ef 	bl	c8ea <z_log_msg_static_create.constprop.0>
    650c:	46ad      	mov	sp, r5
    650e:	e6b3      	b.n	6278 <usbd_work_handler+0xf4>
    6510:	0000eb23 	.word	0x0000eb23
    6514:	0000da3c 	.word	0x0000da3c
    6518:	2000163c 	.word	0x2000163c
    651c:	0000eb37 	.word	0x0000eb37
    6520:	00005fa9 	.word	0x00005fa9
    6524:	0000eb4e 	.word	0x0000eb4e

00006528 <usb_dc_attach>:
{
    6528:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    652a:	4d16      	ldr	r5, [pc, #88]	; (6584 <usb_dc_attach+0x5c>)
    652c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6530:	bb2c      	cbnz	r4, 657e <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    6532:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6536:	f006 fd95 	bl	d064 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    653a:	4620      	mov	r0, r4
    653c:	f000 fbb6 	bl	6cac <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6540:	4622      	mov	r2, r4
    6542:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    6544:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6546:	2027      	movs	r0, #39	; 0x27
    6548:	f7fe fbb6 	bl	4cb8 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    654c:	f006 fc16 	bl	cd7c <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6550:	f7ff fde4 	bl	611c <eps_ctx_init>
	if (ret == 0) {
    6554:	4604      	mov	r4, r0
    6556:	b910      	cbnz	r0, 655e <usb_dc_attach+0x36>
		ctx->attached = true;
    6558:	2301      	movs	r3, #1
    655a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    655e:	4b0a      	ldr	r3, [pc, #40]	; (6588 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6560:	681b      	ldr	r3, [r3, #0]
    6562:	b10b      	cbz	r3, 6568 <usb_dc_attach+0x40>
		usbd_work_schedule();
    6564:	f7ff fbca 	bl	5cfc <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    6568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    656c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6570:	07db      	lsls	r3, r3, #31
    6572:	d502      	bpl.n	657a <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6574:	2000      	movs	r0, #0
    6576:	f7ff fc21 	bl	5dbc <usb_dc_power_event_handler>
}
    657a:	4620      	mov	r0, r4
    657c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    657e:	2400      	movs	r4, #0
    6580:	e7fb      	b.n	657a <usb_dc_attach+0x52>
    6582:	bf00      	nop
    6584:	200013d0 	.word	0x200013d0
    6588:	20000328 	.word	0x20000328

0000658c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    658c:	4b07      	ldr	r3, [pc, #28]	; (65ac <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    658e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    6592:	b13a      	cbz	r2, 65a4 <usb_dc_set_address+0x18>
    6594:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    6598:	2b00      	cmp	r3, #0
    659a:	bf14      	ite	ne
    659c:	2000      	movne	r0, #0
    659e:	f06f 0012 	mvneq.w	r0, #18
    65a2:	4770      	bx	lr
    65a4:	f06f 0012 	mvn.w	r0, #18
}
    65a8:	4770      	bx	lr
    65aa:	bf00      	nop
    65ac:	200013d0 	.word	0x200013d0

000065b0 <usb_dc_ep_check_cap>:
{
    65b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    65b2:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    65b4:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    65b6:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    65b8:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    65bc:	b97a      	cbnz	r2, 65de <usb_dc_ep_check_cap+0x2e>
    65be:	b158      	cbz	r0, 65d8 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    65c0:	4b0d      	ldr	r3, [pc, #52]	; (65f8 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    65c2:	480e      	ldr	r0, [pc, #56]	; (65fc <usb_dc_ep_check_cap+0x4c>)
    65c4:	9305      	str	r3, [sp, #20]
    65c6:	aa04      	add	r2, sp, #16
    65c8:	2302      	movs	r3, #2
    65ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65ce:	9304      	str	r3, [sp, #16]
    65d0:	f006 f98b 	bl	c8ea <z_log_msg_static_create.constprop.0>
		return -1;
    65d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    65d8:	b007      	add	sp, #28
    65da:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    65de:	2808      	cmp	r0, #8
    65e0:	d901      	bls.n	65e6 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    65e2:	4b07      	ldr	r3, [pc, #28]	; (6600 <usb_dc_ep_check_cap+0x50>)
    65e4:	e7ed      	b.n	65c2 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    65e6:	2a01      	cmp	r2, #1
    65e8:	bf06      	itte	eq
    65ea:	f083 0308 	eoreq.w	r3, r3, #8
    65ee:	f343 00c0 	sbfxeq	r0, r3, #3, #1
	return 0;
    65f2:	2000      	movne	r0, #0
    65f4:	e7f0      	b.n	65d8 <usb_dc_ep_check_cap+0x28>
    65f6:	bf00      	nop
    65f8:	0000eb65 	.word	0x0000eb65
    65fc:	0000da3c 	.word	0x0000da3c
    6600:	0000eb84 	.word	0x0000eb84

00006604 <usb_dc_ep_configure>:
{
    6604:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    6606:	4b16      	ldr	r3, [pc, #88]	; (6660 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    6608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    660c:	b087      	sub	sp, #28
    660e:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6610:	b31b      	cbz	r3, 665a <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6612:	7805      	ldrb	r5, [r0, #0]
    6614:	4628      	mov	r0, r5
    6616:	f7ff fb41 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    661a:	b1b0      	cbz	r0, 664a <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    661c:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    661e:	7923      	ldrb	r3, [r4, #4]
    6620:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6622:	8863      	ldrh	r3, [r4, #2]
    6624:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6626:	7820      	ldrb	r0, [r4, #0]
    6628:	8861      	ldrh	r1, [r4, #2]
    662a:	f010 0f08 	tst.w	r0, #8
    662e:	d110      	bne.n	6652 <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6630:	1e4b      	subs	r3, r1, #1
    6632:	420b      	tst	r3, r1
    6634:	d00d      	beq.n	6652 <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    6636:	4b0b      	ldr	r3, [pc, #44]	; (6664 <usb_dc_ep_configure+0x60>)
    6638:	9305      	str	r3, [sp, #20]
    663a:	480b      	ldr	r0, [pc, #44]	; (6668 <usb_dc_ep_configure+0x64>)
    663c:	2302      	movs	r3, #2
    663e:	aa04      	add	r2, sp, #16
    6640:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6644:	9304      	str	r3, [sp, #16]
    6646:	f006 f950 	bl	c8ea <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    664a:	f06f 0015 	mvn.w	r0, #21
}
    664e:	b007      	add	sp, #28
    6650:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6652:	f006 fc4e 	bl	cef2 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6656:	2000      	movs	r0, #0
    6658:	e7f9      	b.n	664e <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    665a:	f06f 0012 	mvn.w	r0, #18
    665e:	e7f6      	b.n	664e <usb_dc_ep_configure+0x4a>
    6660:	200013d0 	.word	0x200013d0
    6664:	0000eba3 	.word	0x0000eba3
    6668:	0000da3c 	.word	0x0000da3c

0000666c <usb_dc_ep_set_stall>:
{
    666c:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    666e:	4b19      	ldr	r3, [pc, #100]	; (66d4 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    6670:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6674:	b087      	sub	sp, #28
    6676:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6678:	b342      	cbz	r2, 66cc <usb_dc_ep_set_stall+0x60>
    667a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    667e:	b32b      	cbz	r3, 66cc <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    6680:	f7ff fb0c 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6684:	4604      	mov	r4, r0
    6686:	b918      	cbnz	r0, 6690 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    6688:	f06f 0015 	mvn.w	r0, #21
}
    668c:	b007      	add	sp, #28
    668e:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    6690:	7a83      	ldrb	r3, [r0, #10]
    6692:	2b01      	cmp	r3, #1
    6694:	d00f      	beq.n	66b6 <usb_dc_ep_set_stall+0x4a>
    6696:	d907      	bls.n	66a8 <usb_dc_ep_set_stall+0x3c>
    6698:	3b02      	subs	r3, #2
    669a:	2b01      	cmp	r3, #1
    669c:	d907      	bls.n	66ae <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    669e:	6963      	ldr	r3, [r4, #20]
    66a0:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    66a2:	2000      	movs	r0, #0
    66a4:	60e0      	str	r0, [r4, #12]
	return 0;
    66a6:	e7f1      	b.n	668c <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    66a8:	f003 f80e 	bl	96c8 <nrfx_usbd_setup_stall>
		break;
    66ac:	e7f7      	b.n	669e <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    66ae:	4628      	mov	r0, r5
    66b0:	f002 ff7e 	bl	95b0 <nrfx_usbd_ep_stall>
		break;
    66b4:	e7f3      	b.n	669e <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    66b6:	4b08      	ldr	r3, [pc, #32]	; (66d8 <usb_dc_ep_set_stall+0x6c>)
    66b8:	9305      	str	r3, [sp, #20]
    66ba:	4808      	ldr	r0, [pc, #32]	; (66dc <usb_dc_ep_set_stall+0x70>)
    66bc:	2302      	movs	r3, #2
    66be:	aa04      	add	r2, sp, #16
    66c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    66c4:	9304      	str	r3, [sp, #16]
    66c6:	f006 f910 	bl	c8ea <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    66ca:	e7dd      	b.n	6688 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    66cc:	f06f 0012 	mvn.w	r0, #18
    66d0:	e7dc      	b.n	668c <usb_dc_ep_set_stall+0x20>
    66d2:	bf00      	nop
    66d4:	200013d0 	.word	0x200013d0
    66d8:	0000ebcb 	.word	0x0000ebcb
    66dc:	0000da3c 	.word	0x0000da3c

000066e0 <usb_dc_ep_clear_stall>:
{
    66e0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    66e2:	4b0e      	ldr	r3, [pc, #56]	; (671c <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    66e4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    66e8:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    66ea:	b182      	cbz	r2, 670e <usb_dc_ep_clear_stall+0x2e>
    66ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    66f0:	b16b      	cbz	r3, 670e <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    66f2:	f7ff fad3 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    66f6:	b168      	cbz	r0, 6714 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    66f8:	f015 0408 	ands.w	r4, r5, #8
    66fc:	d10a      	bne.n	6714 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    66fe:	4628      	mov	r0, r5
    6700:	f002 ff78 	bl	95f4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6704:	4628      	mov	r0, r5
    6706:	f003 f9db 	bl	9ac0 <nrfx_usbd_ep_stall_clear>
	return 0;
    670a:	4620      	mov	r0, r4
}
    670c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    670e:	f06f 0012 	mvn.w	r0, #18
    6712:	e7fb      	b.n	670c <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    6714:	f06f 0015 	mvn.w	r0, #21
    6718:	e7f8      	b.n	670c <usb_dc_ep_clear_stall+0x2c>
    671a:	bf00      	nop
    671c:	200013d0 	.word	0x200013d0

00006720 <usb_dc_ep_is_stalled>:
{
    6720:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6722:	4b0c      	ldr	r3, [pc, #48]	; (6754 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    6724:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6728:	4605      	mov	r5, r0
    672a:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    672c:	b162      	cbz	r2, 6748 <usb_dc_ep_is_stalled+0x28>
    672e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6732:	b14b      	cbz	r3, 6748 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    6734:	f7ff fab2 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6738:	b148      	cbz	r0, 674e <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    673a:	b144      	cbz	r4, 674e <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    673c:	4628      	mov	r0, r5
    673e:	f002 ff3f 	bl	95c0 <nrfx_usbd_ep_stall_check>
    6742:	7020      	strb	r0, [r4, #0]
	return 0;
    6744:	2000      	movs	r0, #0
}
    6746:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6748:	f06f 0012 	mvn.w	r0, #18
    674c:	e7fb      	b.n	6746 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    674e:	f06f 0015 	mvn.w	r0, #21
    6752:	e7f8      	b.n	6746 <usb_dc_ep_is_stalled+0x26>
    6754:	200013d0 	.word	0x200013d0

00006758 <usb_dc_ep_enable>:
{
    6758:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    675a:	4e13      	ldr	r6, [pc, #76]	; (67a8 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    675c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    6760:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6762:	b1c3      	cbz	r3, 6796 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    6764:	f7ff fa9a 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6768:	4605      	mov	r5, r0
    676a:	b1b8      	cbz	r0, 679c <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    676c:	0723      	lsls	r3, r4, #28
    676e:	d405      	bmi.n	677c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6770:	4620      	mov	r0, r4
    6772:	f002 ff3f 	bl	95f4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6776:	4620      	mov	r0, r4
    6778:	f003 f9a2 	bl	9ac0 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    677c:	7a2b      	ldrb	r3, [r5, #8]
    677e:	b983      	cbnz	r3, 67a2 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    6780:	2301      	movs	r3, #1
    6782:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    6784:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    6788:	b90b      	cbnz	r3, 678e <usb_dc_ep_enable+0x36>
	return 0;
    678a:	2000      	movs	r0, #0
}
    678c:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    678e:	4620      	mov	r0, r4
    6790:	f003 f942 	bl	9a18 <nrfx_usbd_ep_enable>
    6794:	e7f9      	b.n	678a <usb_dc_ep_enable+0x32>
		return -ENODEV;
    6796:	f06f 0012 	mvn.w	r0, #18
    679a:	e7f7      	b.n	678c <usb_dc_ep_enable+0x34>
		return -EINVAL;
    679c:	f06f 0015 	mvn.w	r0, #21
    67a0:	e7f4      	b.n	678c <usb_dc_ep_enable+0x34>
		return -EALREADY;
    67a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    67a6:	e7f1      	b.n	678c <usb_dc_ep_enable+0x34>
    67a8:	200013d0 	.word	0x200013d0

000067ac <usb_dc_ep_write>:
{
    67ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    67b0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 68d8 <usb_dc_ep_write+0x12c>
{
    67b4:	b084      	sub	sp, #16
    67b6:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    67b8:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    67bc:	af00      	add	r7, sp, #0
    67be:	4680      	mov	r8, r0
    67c0:	468a      	mov	sl, r1
    67c2:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    67c4:	2b00      	cmp	r3, #0
    67c6:	f000 8083 	beq.w	68d0 <usb_dc_ep_write+0x124>
    67ca:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    67ce:	2b00      	cmp	r3, #0
    67d0:	d07e      	beq.n	68d0 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    67d2:	f010 0f80 	tst.w	r0, #128	; 0x80
    67d6:	d014      	beq.n	6802 <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    67d8:	f7ff fa60 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    67dc:	4604      	mov	r4, r0
    67de:	b180      	cbz	r0, 6802 <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    67e0:	7a03      	ldrb	r3, [r0, #8]
    67e2:	b9ab      	cbnz	r3, 6810 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    67e4:	466c      	mov	r4, sp
    67e6:	b088      	sub	sp, #32
    67e8:	466a      	mov	r2, sp
    67ea:	4b3c      	ldr	r3, [pc, #240]	; (68dc <usb_dc_ep_write+0x130>)
    67ec:	483c      	ldr	r0, [pc, #240]	; (68e0 <usb_dc_ep_write+0x134>)
    67ee:	e9c2 3805 	strd	r3, r8, [r2, #20]
    67f2:	2303      	movs	r3, #3
    67f4:	f842 3f10 	str.w	r3, [r2, #16]!
    67f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    67fc:	f006 f875 	bl	c8ea <z_log_msg_static_create.constprop.0>
    6800:	46a5      	mov	sp, r4
		return -EINVAL;
    6802:	f06f 0415 	mvn.w	r4, #21
}
    6806:	4620      	mov	r0, r4
    6808:	3710      	adds	r7, #16
    680a:	46bd      	mov	sp, r7
    680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6818:	f109 0038 	add.w	r0, r9, #56	; 0x38
    681c:	f006 f868 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    6820:	7fa3      	ldrb	r3, [r4, #30]
    6822:	b133      	cbz	r3, 6832 <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    6824:	f109 0038 	add.w	r0, r9, #56	; 0x38
    6828:	f006 f864 	bl	c8f4 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    682c:	f06f 040a 	mvn.w	r4, #10
    6830:	e7e9      	b.n	6806 <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6832:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    6834:	b355      	cbz	r5, 688c <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6836:	2b00      	cmp	r3, #0
    6838:	d038      	beq.n	68ac <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    683a:	2301      	movs	r3, #1
    683c:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    683e:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6842:	1d39      	adds	r1, r7, #4
    6844:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    6846:	e9c7 a501 	strd	sl, r5, [r7, #4]
    684a:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    684e:	f002 fd09 	bl	9264 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6852:	4b24      	ldr	r3, [pc, #144]	; (68e4 <usb_dc_ep_write+0x138>)
    6854:	4298      	cmp	r0, r3
    6856:	d037      	beq.n	68c8 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    6858:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    685c:	b10e      	cbz	r6, 6862 <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    685e:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    6862:	466c      	mov	r4, sp
    6864:	b088      	sub	sp, #32
    6866:	466a      	mov	r2, sp
    6868:	4b1f      	ldr	r3, [pc, #124]	; (68e8 <usb_dc_ep_write+0x13c>)
    686a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    686e:	2303      	movs	r3, #3
    6870:	f842 3f10 	str.w	r3, [r2, #16]!
    6874:	481a      	ldr	r0, [pc, #104]	; (68e0 <usb_dc_ep_write+0x134>)
    6876:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    687a:	f006 f836 	bl	c8ea <z_log_msg_static_create.constprop.0>
    687e:	46a5      	mov	sp, r4
		result = -EIO;
    6880:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    6884:	4819      	ldr	r0, [pc, #100]	; (68ec <usb_dc_ep_write+0x140>)
    6886:	f006 f835 	bl	c8f4 <k_mutex_unlock.isra.0>
	return result;
    688a:	e7bc      	b.n	6806 <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    688c:	7fe2      	ldrb	r2, [r4, #31]
    688e:	b102      	cbz	r2, 6892 <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    6890:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6892:	2b00      	cmp	r3, #0
    6894:	d1d1      	bne.n	683a <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6896:	f002 ff1f 	bl	96d8 <nrfx_usbd_last_setup_dir_get>
    689a:	4580      	cmp	r8, r0
    689c:	d0cd      	beq.n	683a <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    689e:	f002 ff0b 	bl	96b8 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    68a2:	4812      	ldr	r0, [pc, #72]	; (68ec <usb_dc_ep_write+0x140>)
    68a4:	f006 f826 	bl	c8f4 <k_mutex_unlock.isra.0>
		return 0;
    68a8:	2400      	movs	r4, #0
    68aa:	e7ac      	b.n	6806 <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    68ac:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    68b0:	429d      	cmp	r5, r3
    68b2:	d2f0      	bcs.n	6896 <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    68b4:	6862      	ldr	r2, [r4, #4]
    68b6:	fbb5 f3f2 	udiv	r3, r5, r2
    68ba:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    68be:	2b00      	cmp	r3, #0
    68c0:	d1e9      	bne.n	6896 <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    68c2:	2301      	movs	r3, #1
    68c4:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    68c6:	e7e6      	b.n	6896 <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    68c8:	b106      	cbz	r6, 68cc <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    68ca:	6035      	str	r5, [r6, #0]
	int result = 0;
    68cc:	2400      	movs	r4, #0
    68ce:	e7d9      	b.n	6884 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    68d0:	f06f 0412 	mvn.w	r4, #18
    68d4:	e797      	b.n	6806 <usb_dc_ep_write+0x5a>
    68d6:	bf00      	nop
    68d8:	200013d0 	.word	0x200013d0
    68dc:	0000ebed 	.word	0x0000ebed
    68e0:	0000da3c 	.word	0x0000da3c
    68e4:	0bad0000 	.word	0x0bad0000
    68e8:	0000ec0c 	.word	0x0000ec0c
    68ec:	20001408 	.word	0x20001408

000068f0 <usb_dc_ep_read_wait>:
{
    68f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68f4:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    68f6:	4b2d      	ldr	r3, [pc, #180]	; (69ac <usb_dc_ep_read_wait+0xbc>)
{
    68f8:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    68fa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    68fe:	af00      	add	r7, sp, #0
    6900:	4681      	mov	r9, r0
    6902:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    6904:	2a00      	cmp	r2, #0
    6906:	d04d      	beq.n	69a4 <usb_dc_ep_read_wait+0xb4>
    6908:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    690c:	2b00      	cmp	r3, #0
    690e:	d049      	beq.n	69a4 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6910:	f010 0f80 	tst.w	r0, #128	; 0x80
    6914:	d119      	bne.n	694a <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    6916:	b911      	cbnz	r1, 691e <usb_dc_ep_read_wait+0x2e>
    6918:	f1b8 0f00 	cmp.w	r8, #0
    691c:	d115      	bne.n	694a <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    691e:	4648      	mov	r0, r9
    6920:	f7ff f9bc 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6924:	4604      	mov	r4, r0
    6926:	b180      	cbz	r0, 694a <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    6928:	7a03      	ldrb	r3, [r0, #8]
    692a:	b98b      	cbnz	r3, 6950 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    692c:	466c      	mov	r4, sp
    692e:	b088      	sub	sp, #32
    6930:	466a      	mov	r2, sp
    6932:	4b1f      	ldr	r3, [pc, #124]	; (69b0 <usb_dc_ep_read_wait+0xc0>)
    6934:	481f      	ldr	r0, [pc, #124]	; (69b4 <usb_dc_ep_read_wait+0xc4>)
    6936:	e9c2 3905 	strd	r3, r9, [r2, #20]
    693a:	2303      	movs	r3, #3
    693c:	f842 3f10 	str.w	r3, [r2, #16]!
    6940:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6944:	f005 ffd1 	bl	c8ea <z_log_msg_static_create.constprop.0>
    6948:	46a5      	mov	sp, r4
		return -EINVAL;
    694a:	f06f 0015 	mvn.w	r0, #21
    694e:	e015      	b.n	697c <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6954:	4818      	ldr	r0, [pc, #96]	; (69b8 <usb_dc_ep_read_wait+0xc8>)
    6956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    695a:	f005 ffc9 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    695e:	68e3      	ldr	r3, [r4, #12]
    6960:	4598      	cmp	r8, r3
    6962:	46c1      	mov	r9, r8
    6964:	bf28      	it	cs
    6966:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    6968:	b95e      	cbnz	r6, 6982 <usb_dc_ep_read_wait+0x92>
    696a:	f1b8 0f00 	cmp.w	r8, #0
    696e:	d108      	bne.n	6982 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    6970:	b105      	cbz	r5, 6974 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    6972:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    6974:	4810      	ldr	r0, [pc, #64]	; (69b8 <usb_dc_ep_read_wait+0xc8>)
    6976:	f005 ffbd 	bl	c8f4 <k_mutex_unlock.isra.0>
		return 0;
    697a:	2000      	movs	r0, #0
}
    697c:	46bd      	mov	sp, r7
    697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    6982:	69a1      	ldr	r1, [r4, #24]
    6984:	464a      	mov	r2, r9
    6986:	4630      	mov	r0, r6
    6988:	f005 ff3e 	bl	c808 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    698c:	69a3      	ldr	r3, [r4, #24]
    698e:	444b      	add	r3, r9
    6990:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    6992:	68e3      	ldr	r3, [r4, #12]
    6994:	eba3 0309 	sub.w	r3, r3, r9
    6998:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    699a:	2d00      	cmp	r5, #0
    699c:	d0ea      	beq.n	6974 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    699e:	f8c5 9000 	str.w	r9, [r5]
    69a2:	e7e7      	b.n	6974 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    69a4:	f06f 0012 	mvn.w	r0, #18
    69a8:	e7e8      	b.n	697c <usb_dc_ep_read_wait+0x8c>
    69aa:	bf00      	nop
    69ac:	200013d0 	.word	0x200013d0
    69b0:	0000ebed 	.word	0x0000ebed
    69b4:	0000da3c 	.word	0x0000da3c
    69b8:	20001408 	.word	0x20001408

000069bc <usb_dc_ep_read_continue>:
{
    69bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    69be:	4d27      	ldr	r5, [pc, #156]	; (6a5c <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    69c0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    69c4:	af00      	add	r7, sp, #0
    69c6:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    69c8:	2b00      	cmp	r3, #0
    69ca:	d044      	beq.n	6a56 <usb_dc_ep_read_continue+0x9a>
    69cc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    69d0:	2b00      	cmp	r3, #0
    69d2:	d040      	beq.n	6a56 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    69d4:	0603      	lsls	r3, r0, #24
    69d6:	d414      	bmi.n	6a02 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    69d8:	f7ff f960 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    69dc:	4604      	mov	r4, r0
    69de:	b180      	cbz	r0, 6a02 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    69e0:	7a03      	ldrb	r3, [r0, #8]
    69e2:	b993      	cbnz	r3, 6a0a <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    69e4:	466c      	mov	r4, sp
    69e6:	b088      	sub	sp, #32
    69e8:	466a      	mov	r2, sp
    69ea:	4b1d      	ldr	r3, [pc, #116]	; (6a60 <usb_dc_ep_read_continue+0xa4>)
    69ec:	481d      	ldr	r0, [pc, #116]	; (6a64 <usb_dc_ep_read_continue+0xa8>)
    69ee:	e9c2 3605 	strd	r3, r6, [r2, #20]
    69f2:	2303      	movs	r3, #3
    69f4:	f842 3f10 	str.w	r3, [r2, #16]!
    69f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    69fc:	f005 ff75 	bl	c8ea <z_log_msg_static_create.constprop.0>
    6a00:	46a5      	mov	sp, r4
		return -EINVAL;
    6a02:	f06f 0015 	mvn.w	r0, #21
}
    6a06:	46bd      	mov	sp, r7
    6a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a12:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6a16:	f005 ff6b 	bl	c8f0 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    6a1a:	68e3      	ldr	r3, [r4, #12]
    6a1c:	b9b3      	cbnz	r3, 6a4c <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    6a1e:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6a20:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    6a22:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6a24:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    6a26:	7f63      	ldrb	r3, [r4, #29]
    6a28:	b183      	cbz	r3, 6a4c <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    6a2a:	f7ff f98b 	bl	5d44 <usbd_evt_alloc>
			if (!ev) {
    6a2e:	b930      	cbnz	r0, 6a3e <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    6a30:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6a34:	f005 ff5e 	bl	c8f4 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    6a38:	f06f 000b 	mvn.w	r0, #11
    6a3c:	e7e3      	b.n	6a06 <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    6a3e:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6a40:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6a42:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    6a44:	f7ff f962 	bl	5d0c <usbd_evt_put>
			usbd_work_schedule();
    6a48:	f7ff f958 	bl	5cfc <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    6a4c:	4806      	ldr	r0, [pc, #24]	; (6a68 <usb_dc_ep_read_continue+0xac>)
    6a4e:	f005 ff51 	bl	c8f4 <k_mutex_unlock.isra.0>
	return 0;
    6a52:	2000      	movs	r0, #0
    6a54:	e7d7      	b.n	6a06 <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    6a56:	f06f 0012 	mvn.w	r0, #18
    6a5a:	e7d4      	b.n	6a06 <usb_dc_ep_read_continue+0x4a>
    6a5c:	200013d0 	.word	0x200013d0
    6a60:	0000ebed 	.word	0x0000ebed
    6a64:	0000da3c 	.word	0x0000da3c
    6a68:	20001408 	.word	0x20001408

00006a6c <usb_dc_ep_set_callback>:
{
    6a6c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6a6e:	4b08      	ldr	r3, [pc, #32]	; (6a90 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    6a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6a74:	460c      	mov	r4, r1
	if (!dev_attached()) {
    6a76:	b12b      	cbz	r3, 6a84 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    6a78:	f7ff f910 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6a7c:	b128      	cbz	r0, 6a8a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    6a7e:	6004      	str	r4, [r0, #0]
	return 0;
    6a80:	2000      	movs	r0, #0
}
    6a82:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6a84:	f06f 0012 	mvn.w	r0, #18
    6a88:	e7fb      	b.n	6a82 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    6a8a:	f06f 0015 	mvn.w	r0, #21
    6a8e:	e7f8      	b.n	6a82 <usb_dc_ep_set_callback+0x16>
    6a90:	200013d0 	.word	0x200013d0

00006a94 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    6a94:	4b01      	ldr	r3, [pc, #4]	; (6a9c <usb_dc_set_status_callback+0x8>)
    6a96:	6018      	str	r0, [r3, #0]
}
    6a98:	4770      	bx	lr
    6a9a:	bf00      	nop
    6a9c:	200013d0 	.word	0x200013d0

00006aa0 <usb_dc_ep_mps>:
{
    6aa0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    6aa2:	4b07      	ldr	r3, [pc, #28]	; (6ac0 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    6aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6aa8:	b123      	cbz	r3, 6ab4 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    6aaa:	f7ff f8f7 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    6aae:	b120      	cbz	r0, 6aba <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    6ab0:	6840      	ldr	r0, [r0, #4]
}
    6ab2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6ab4:	f06f 0012 	mvn.w	r0, #18
    6ab8:	e7fb      	b.n	6ab2 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    6aba:	f06f 0015 	mvn.w	r0, #21
    6abe:	e7f8      	b.n	6ab2 <usb_dc_ep_mps+0x12>
    6ac0:	200013d0 	.word	0x200013d0

00006ac4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6ac4:	4b08      	ldr	r3, [pc, #32]	; (6ae8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6ac6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6ac8:	1ac3      	subs	r3, r0, r3
{
    6aca:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6acc:	4907      	ldr	r1, [pc, #28]	; (6aec <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6ace:	109b      	asrs	r3, r3, #2
{
    6ad0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6ad2:	4359      	muls	r1, r3
    6ad4:	4806      	ldr	r0, [pc, #24]	; (6af0 <onoff_stop+0x2c>)
    6ad6:	2240      	movs	r2, #64	; 0x40
    6ad8:	f005 ff52 	bl	c980 <stop>
	notify(mgr, res);
    6adc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6ade:	4601      	mov	r1, r0
	notify(mgr, res);
    6ae0:	4620      	mov	r0, r4
}
    6ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6ae6:	4718      	bx	r3
    6ae8:	20001c74 	.word	0x20001c74
    6aec:	b6db6db7 	.word	0xb6db6db7
    6af0:	0000d718 	.word	0x0000d718

00006af4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6af4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6af6:	4c0c      	ldr	r4, [pc, #48]	; (6b28 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6af8:	4a0c      	ldr	r2, [pc, #48]	; (6b2c <onoff_start+0x38>)
    6afa:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6afc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6afe:	9300      	str	r3, [sp, #0]
{
    6b00:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6b02:	460b      	mov	r3, r1
    6b04:	490a      	ldr	r1, [pc, #40]	; (6b30 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    6b06:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6b08:	4361      	muls	r1, r4
{
    6b0a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6b0c:	4809      	ldr	r0, [pc, #36]	; (6b34 <onoff_start+0x40>)
    6b0e:	f005 ff63 	bl	c9d8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6b12:	1e01      	subs	r1, r0, #0
    6b14:	da05      	bge.n	6b22 <onoff_start+0x2e>
		notify(mgr, err);
    6b16:	4630      	mov	r0, r6
    6b18:	462b      	mov	r3, r5
	}
}
    6b1a:	b002      	add	sp, #8
    6b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6b20:	4718      	bx	r3
}
    6b22:	b002      	add	sp, #8
    6b24:	bd70      	pop	{r4, r5, r6, pc}
    6b26:	bf00      	nop
    6b28:	20001c74 	.word	0x20001c74
    6b2c:	0000ca43 	.word	0x0000ca43
    6b30:	b6db6db7 	.word	0xb6db6db7
    6b34:	0000d718 	.word	0x0000d718

00006b38 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6b38:	2200      	movs	r2, #0
{
    6b3a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6b3c:	2101      	movs	r1, #1
{
    6b3e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6b40:	4610      	mov	r0, r2
    6b42:	f7fe f8b9 	bl	4cb8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6b46:	480f      	ldr	r0, [pc, #60]	; (6b84 <clk_init+0x4c>)
    6b48:	f001 f92c 	bl	7da4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6b4c:	4b0e      	ldr	r3, [pc, #56]	; (6b88 <clk_init+0x50>)
    6b4e:	4298      	cmp	r0, r3
    6b50:	d115      	bne.n	6b7e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6b52:	f001 f937 	bl	7dc4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    6b56:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6b58:	490c      	ldr	r1, [pc, #48]	; (6b8c <clk_init+0x54>)
    6b5a:	4630      	mov	r0, r6
    6b5c:	f004 ffdd 	bl	bb1a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6b60:	2800      	cmp	r0, #0
    6b62:	db0b      	blt.n	6b7c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6b64:	2501      	movs	r5, #1
    6b66:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    6b68:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6b6a:	4908      	ldr	r1, [pc, #32]	; (6b8c <clk_init+0x54>)
    6b6c:	f104 001c 	add.w	r0, r4, #28
    6b70:	f004 ffd3 	bl	bb1a <onoff_manager_init>
		if (err < 0) {
    6b74:	2800      	cmp	r0, #0
    6b76:	db01      	blt.n	6b7c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6b78:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6b7a:	2000      	movs	r0, #0
}
    6b7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6b7e:	f06f 0004 	mvn.w	r0, #4
    6b82:	e7fb      	b.n	6b7c <clk_init+0x44>
    6b84:	00006bc5 	.word	0x00006bc5
    6b88:	0bad0000 	.word	0x0bad0000
    6b8c:	0000dbb8 	.word	0x0000dbb8

00006b90 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6b90:	b570      	push	{r4, r5, r6, lr}
    6b92:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6b94:	230c      	movs	r3, #12
    6b96:	4809      	ldr	r0, [pc, #36]	; (6bbc <clkstarted_handle.constprop.0+0x2c>)
    6b98:	434b      	muls	r3, r1
    6b9a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6b9c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6ba0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6ba2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6ba4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    6ba6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6ba8:	f005 fed7 	bl	c95a <set_on_state>
	if (callback) {
    6bac:	b12d      	cbz	r5, 6bba <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6bae:	4632      	mov	r2, r6
    6bb0:	462b      	mov	r3, r5
    6bb2:	4803      	ldr	r0, [pc, #12]	; (6bc0 <clkstarted_handle.constprop.0+0x30>)
}
    6bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6bb8:	4718      	bx	r3
}
    6bba:	bd70      	pop	{r4, r5, r6, pc}
    6bbc:	20001c74 	.word	0x20001c74
    6bc0:	0000d718 	.word	0x0000d718

00006bc4 <clock_event_handler>:
	switch (event) {
    6bc4:	b110      	cbz	r0, 6bcc <clock_event_handler+0x8>
    6bc6:	2801      	cmp	r0, #1
    6bc8:	d004      	beq.n	6bd4 <clock_event_handler+0x10>
    6bca:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6bcc:	4b03      	ldr	r3, [pc, #12]	; (6bdc <clock_event_handler+0x18>)
    6bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bd0:	075b      	lsls	r3, r3, #29
    6bd2:	d101      	bne.n	6bd8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6bd4:	f7ff bfdc 	b.w	6b90 <clkstarted_handle.constprop.0>
}
    6bd8:	4770      	bx	lr
    6bda:	bf00      	nop
    6bdc:	20001c74 	.word	0x20001c74

00006be0 <generic_hfclk_start>:
{
    6be0:	b508      	push	{r3, lr}
	__asm__ volatile(
    6be2:	f04f 0320 	mov.w	r3, #32
    6be6:	f3ef 8111 	mrs	r1, BASEPRI
    6bea:	f383 8812 	msr	BASEPRI_MAX, r3
    6bee:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6bf2:	4a12      	ldr	r2, [pc, #72]	; (6c3c <generic_hfclk_start+0x5c>)
    6bf4:	6813      	ldr	r3, [r2, #0]
    6bf6:	f043 0002 	orr.w	r0, r3, #2
    6bfa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6bfc:	07da      	lsls	r2, r3, #31
    6bfe:	d408      	bmi.n	6c12 <generic_hfclk_start+0x32>
	__asm__ volatile(
    6c00:	f381 8811 	msr	BASEPRI, r1
    6c04:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6c08:	2001      	movs	r0, #1
}
    6c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6c0e:	f006 b813 	b.w	cc38 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6c16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6c1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6c1e:	07d3      	lsls	r3, r2, #31
    6c20:	d5ee      	bpl.n	6c00 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    6c22:	4807      	ldr	r0, [pc, #28]	; (6c40 <generic_hfclk_start+0x60>)
    6c24:	f005 fe99 	bl	c95a <set_on_state>
    6c28:	f381 8811 	msr	BASEPRI, r1
    6c2c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    6c30:	2000      	movs	r0, #0
}
    6c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    6c36:	f7ff bfab 	b.w	6b90 <clkstarted_handle.constprop.0>
    6c3a:	bf00      	nop
    6c3c:	20001cc4 	.word	0x20001cc4
    6c40:	20001cb4 	.word	0x20001cb4

00006c44 <api_blocking_start>:
{
    6c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6c46:	2200      	movs	r2, #0
    6c48:	2301      	movs	r3, #1
    6c4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6c4e:	4a09      	ldr	r2, [pc, #36]	; (6c74 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6c50:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6c54:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6c56:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6c5a:	f005 feeb 	bl	ca34 <api_start>
	if (err < 0) {
    6c5e:	2800      	cmp	r0, #0
    6c60:	db05      	blt.n	6c6e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    6c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6c66:	2300      	movs	r3, #0
    6c68:	4668      	mov	r0, sp
    6c6a:	f003 fb65 	bl	a338 <z_impl_k_sem_take>
}
    6c6e:	b005      	add	sp, #20
    6c70:	f85d fb04 	ldr.w	pc, [sp], #4
    6c74:	0000ca61 	.word	0x0000ca61

00006c78 <generic_hfclk_stop>:
{
    6c78:	b510      	push	{r4, lr}
	__asm__ volatile(
    6c7a:	f04f 0320 	mov.w	r3, #32
    6c7e:	f3ef 8411 	mrs	r4, BASEPRI
    6c82:	f383 8812 	msr	BASEPRI_MAX, r3
    6c86:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    6c8a:	4a07      	ldr	r2, [pc, #28]	; (6ca8 <generic_hfclk_stop+0x30>)
    6c8c:	6813      	ldr	r3, [r2, #0]
    6c8e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    6c92:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    6c94:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    6c96:	d402      	bmi.n	6c9e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6c98:	2001      	movs	r0, #1
    6c9a:	f006 f809 	bl	ccb0 <nrfx_clock_stop>
	__asm__ volatile(
    6c9e:	f384 8811 	msr	BASEPRI, r4
    6ca2:	f3bf 8f6f 	isb	sy
}
    6ca6:	bd10      	pop	{r4, pc}
    6ca8:	20001cc4 	.word	0x20001cc4

00006cac <z_nrf_clock_control_get_onoff>:
}
    6cac:	4a02      	ldr	r2, [pc, #8]	; (6cb8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6cae:	b2c3      	uxtb	r3, r0
}
    6cb0:	201c      	movs	r0, #28
    6cb2:	fb03 2000 	mla	r0, r3, r0, r2
    6cb6:	4770      	bx	lr
    6cb8:	20001c74 	.word	0x20001c74

00006cbc <z_nrf_clock_control_lf_on>:
{
    6cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6cc0:	4938      	ldr	r1, [pc, #224]	; (6da4 <z_nrf_clock_control_lf_on+0xe8>)
    6cc2:	f3bf 8f5b 	dmb	ish
    6cc6:	4607      	mov	r7, r0
    6cc8:	2201      	movs	r2, #1
    6cca:	e851 3f00 	ldrex	r3, [r1]
    6cce:	e841 2000 	strex	r0, r2, [r1]
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d1f9      	bne.n	6cca <z_nrf_clock_control_lf_on+0xe>
    6cd6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6cda:	b933      	cbnz	r3, 6cea <z_nrf_clock_control_lf_on+0x2e>
    6cdc:	4932      	ldr	r1, [pc, #200]	; (6da8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    6cde:	4833      	ldr	r0, [pc, #204]	; (6dac <z_nrf_clock_control_lf_on+0xf0>)
    6ce0:	604b      	str	r3, [r1, #4]
    6ce2:	60cb      	str	r3, [r1, #12]
    6ce4:	608a      	str	r2, [r1, #8]
    6ce6:	f004 ff2b 	bl	bb40 <onoff_request>
	switch (start_mode) {
    6cea:	1e7b      	subs	r3, r7, #1
    6cec:	2b01      	cmp	r3, #1
    6cee:	d82b      	bhi.n	6d48 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6cf0:	2f01      	cmp	r7, #1
    6cf2:	d107      	bne.n	6d04 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cf8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6cfc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6d00:	2b01      	cmp	r3, #1
    6d02:	d021      	beq.n	6d48 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6d04:	f006 f992 	bl	d02c <k_is_in_isr>
    6d08:	4605      	mov	r5, r0
    6d0a:	b9f8      	cbnz	r0, 6d4c <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    6d0c:	4b28      	ldr	r3, [pc, #160]	; (6db0 <z_nrf_clock_control_lf_on+0xf4>)
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	b1e3      	cbz	r3, 6d4c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    6d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d16:	2202      	movs	r2, #2
    6d18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6d1c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d1e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6db4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6d22:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    6d26:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6d2a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    6d2e:	03d2      	lsls	r2, r2, #15
    6d30:	d516      	bpl.n	6d60 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6d32:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6d36:	2b01      	cmp	r3, #1
    6d38:	d001      	beq.n	6d3e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6d3a:	2f01      	cmp	r7, #1
    6d3c:	d110      	bne.n	6d60 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    6d3e:	b35d      	cbz	r5, 6d98 <z_nrf_clock_control_lf_on+0xdc>
    6d40:	f386 8811 	msr	BASEPRI, r6
    6d44:	f3bf 8f6f 	isb	sy
}
    6d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    6d4c:	f04f 0320 	mov.w	r3, #32
    6d50:	f3ef 8611 	mrs	r6, BASEPRI
    6d54:	f383 8812 	msr	BASEPRI_MAX, r3
    6d58:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6d5c:	2501      	movs	r5, #1
    6d5e:	e7de      	b.n	6d1e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6d60:	b1ad      	cbz	r5, 6d8e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6d62:	4630      	mov	r0, r6
    6d64:	f7fd ff06 	bl	4b74 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6d68:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d1da      	bne.n	6d26 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6d70:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6d74:	2a00      	cmp	r2, #0
    6d76:	d0d6      	beq.n	6d26 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d78:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6d7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d80:	2301      	movs	r3, #1
    6d82:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    6d86:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d8a:	60a3      	str	r3, [r4, #8]
}
    6d8c:	e7cb      	b.n	6d26 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    6d8e:	2100      	movs	r1, #0
    6d90:	2021      	movs	r0, #33	; 0x21
    6d92:	f003 ff19 	bl	abc8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6d96:	e7e7      	b.n	6d68 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    6d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d9c:	2202      	movs	r2, #2
    6d9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6da2:	e7d1      	b.n	6d48 <z_nrf_clock_control_lf_on+0x8c>
    6da4:	20001c70 	.word	0x20001c70
    6da8:	20001c60 	.word	0x20001c60
    6dac:	20001c90 	.word	0x20001c90
    6db0:	200021e8 	.word	0x200021e8
    6db4:	e000e100 	.word	0xe000e100

00006db8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    6db8:	b508      	push	{r3, lr}
    6dba:	4807      	ldr	r0, [pc, #28]	; (6dd8 <uart_console_init+0x20>)
    6dbc:	f006 f8da 	bl	cf74 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    6dc0:	b138      	cbz	r0, 6dd2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    6dc2:	4806      	ldr	r0, [pc, #24]	; (6ddc <uart_console_init+0x24>)
    6dc4:	f7fe fcfa 	bl	57bc <__stdout_hook_install>
	__printk_hook_install(console_out);
    6dc8:	4804      	ldr	r0, [pc, #16]	; (6ddc <uart_console_init+0x24>)
    6dca:	f7fb f815 	bl	1df8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    6dce:	2000      	movs	r0, #0
}
    6dd0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6dd2:	f06f 0012 	mvn.w	r0, #18
    6dd6:	e7fb      	b.n	6dd0 <uart_console_init+0x18>
    6dd8:	0000d760 	.word	0x0000d760
    6ddc:	00006de1 	.word	0x00006de1

00006de0 <console_out>:
	if ('\n' == c) {
    6de0:	280a      	cmp	r0, #10
{
    6de2:	b538      	push	{r3, r4, r5, lr}
    6de4:	4d07      	ldr	r5, [pc, #28]	; (6e04 <console_out+0x24>)
    6de6:	4604      	mov	r4, r0
	if ('\n' == c) {
    6de8:	d104      	bne.n	6df4 <console_out+0x14>
    6dea:	68ab      	ldr	r3, [r5, #8]
    6dec:	210d      	movs	r1, #13
    6dee:	685b      	ldr	r3, [r3, #4]
    6df0:	4628      	mov	r0, r5
    6df2:	4798      	blx	r3
    6df4:	68ab      	ldr	r3, [r5, #8]
    6df6:	4803      	ldr	r0, [pc, #12]	; (6e04 <console_out+0x24>)
    6df8:	685b      	ldr	r3, [r3, #4]
    6dfa:	b2e1      	uxtb	r1, r4
    6dfc:	4798      	blx	r3
}
    6dfe:	4620      	mov	r0, r4
    6e00:	bd38      	pop	{r3, r4, r5, pc}
    6e02:	bf00      	nop
    6e04:	0000d760 	.word	0x0000d760

00006e08 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    6e08:	b530      	push	{r4, r5, lr}
	return port->config;
    6e0a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6e0c:	7b05      	ldrb	r5, [r0, #12]
    6e0e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    6e12:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    6e16:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6e18:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6e1c:	d105      	bne.n	6e2a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    6e1e:	4620      	mov	r0, r4
    6e20:	f001 fa54 	bl	82cc <nrfx_gpiote_trigger_disable>

		return 0;
    6e24:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    6e26:	b005      	add	sp, #20
    6e28:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e2a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    6e2c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e30:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    6e34:	d114      	bne.n	6e60 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e3a:	bf0c      	ite	eq
    6e3c:	2304      	moveq	r3, #4
    6e3e:	2305      	movne	r3, #5
    6e40:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6e44:	2300      	movs	r3, #0
    6e46:	4619      	mov	r1, r3
    6e48:	aa02      	add	r2, sp, #8
    6e4a:	4620      	mov	r0, r4
    6e4c:	f001 f87c 	bl	7f48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6e50:	4b1f      	ldr	r3, [pc, #124]	; (6ed0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    6e52:	4298      	cmp	r0, r3
    6e54:	d139      	bne.n	6eca <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    6e56:	2101      	movs	r1, #1
    6e58:	4620      	mov	r0, r4
    6e5a:	f001 f9ef 	bl	823c <nrfx_gpiote_trigger_enable>
	return 0;
    6e5e:	e7e1      	b.n	6e24 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6e60:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    6e64:	d026      	beq.n	6eb4 <gpio_nrfx_pin_interrupt_configure+0xac>
    6e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    6e6a:	bf14      	ite	ne
    6e6c:	2301      	movne	r3, #1
    6e6e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6e70:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6e74:	6883      	ldr	r3, [r0, #8]
    6e76:	40cb      	lsrs	r3, r1
    6e78:	07d9      	lsls	r1, r3, #31
    6e7a:	d4e3      	bmi.n	6e44 <gpio_nrfx_pin_interrupt_configure+0x3c>
    6e7c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    6e80:	d1e0      	bne.n	6e44 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    6e82:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    6e84:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    6e86:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    6e8a:	4a12      	ldr	r2, [pc, #72]	; (6ed4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6e8c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    6e90:	bf18      	it	ne
    6e92:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    6e9a:	07db      	lsls	r3, r3, #31
    6e9c:	d4d2      	bmi.n	6e44 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6e9e:	f10d 0507 	add.w	r5, sp, #7
    6ea2:	4629      	mov	r1, r5
    6ea4:	4620      	mov	r0, r4
    6ea6:	f001 f975 	bl	8194 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    6eaa:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    6eac:	4298      	cmp	r0, r3
    6eae:	d003      	beq.n	6eb8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    6eb0:	9503      	str	r5, [sp, #12]
    6eb2:	e7c7      	b.n	6e44 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6eb4:	2303      	movs	r3, #3
    6eb6:	e7db      	b.n	6e70 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    6eb8:	4628      	mov	r0, r5
    6eba:	f001 f9b9 	bl	8230 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    6ebe:	4b04      	ldr	r3, [pc, #16]	; (6ed0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    6ec0:	4298      	cmp	r0, r3
    6ec2:	d0f5      	beq.n	6eb0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    6ec4:	f06f 000b 	mvn.w	r0, #11
    6ec8:	e7ad      	b.n	6e26 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    6eca:	f06f 0015 	mvn.w	r0, #21
    6ece:	e7aa      	b.n	6e26 <gpio_nrfx_pin_interrupt_configure+0x1e>
    6ed0:	0bad0000 	.word	0x0bad0000
    6ed4:	50000300 	.word	0x50000300
    6ed8:	0bad0004 	.word	0x0bad0004

00006edc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6edc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    6ede:	f001 f997 	bl	8210 <nrfx_gpiote_is_init>
    6ee2:	4604      	mov	r4, r0
    6ee4:	b968      	cbnz	r0, 6f02 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    6ee6:	f001 f96b 	bl	81c0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6eea:	4b08      	ldr	r3, [pc, #32]	; (6f0c <gpio_nrfx_init+0x30>)
    6eec:	4298      	cmp	r0, r3
    6eee:	d10a      	bne.n	6f06 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6ef0:	4807      	ldr	r0, [pc, #28]	; (6f10 <gpio_nrfx_init+0x34>)
    6ef2:	4621      	mov	r1, r4
    6ef4:	f001 f948 	bl	8188 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6ef8:	4622      	mov	r2, r4
    6efa:	2105      	movs	r1, #5
    6efc:	2006      	movs	r0, #6
    6efe:	f7fd fedb 	bl	4cb8 <z_arm_irq_priority_set>
		return 0;
    6f02:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6f04:	bd10      	pop	{r4, pc}
		return -EIO;
    6f06:	f06f 0004 	mvn.w	r0, #4
    6f0a:	e7fb      	b.n	6f04 <gpio_nrfx_init+0x28>
    6f0c:	0bad0000 	.word	0x0bad0000
    6f10:	00006f15 	.word	0x00006f15

00006f14 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f14:	0942      	lsrs	r2, r0, #5
{
    6f16:	b570      	push	{r4, r5, r6, lr}
    6f18:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f1a:	d002      	beq.n	6f22 <nrfx_gpio_handler+0xe>
    6f1c:	2a01      	cmp	r2, #1
    6f1e:	d017      	beq.n	6f50 <nrfx_gpio_handler+0x3c>
}
    6f20:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f22:	4e0d      	ldr	r6, [pc, #52]	; (6f58 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    6f24:	6932      	ldr	r2, [r6, #16]
    6f26:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6f28:	2900      	cmp	r1, #0
    6f2a:	d0f9      	beq.n	6f20 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    6f2c:	f003 031f 	and.w	r3, r3, #31
    6f30:	2501      	movs	r5, #1
	return node->next;
    6f32:	680c      	ldr	r4, [r1, #0]
    6f34:	409d      	lsls	r5, r3
    6f36:	2900      	cmp	r1, #0
    6f38:	d0f2      	beq.n	6f20 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    6f3a:	688a      	ldr	r2, [r1, #8]
    6f3c:	402a      	ands	r2, r5
    6f3e:	d002      	beq.n	6f46 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6f40:	684b      	ldr	r3, [r1, #4]
    6f42:	4630      	mov	r0, r6
    6f44:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6f46:	b12c      	cbz	r4, 6f54 <nrfx_gpio_handler+0x40>
    6f48:	6823      	ldr	r3, [r4, #0]
    6f4a:	4621      	mov	r1, r4
    6f4c:	461c      	mov	r4, r3
    6f4e:	e7f2      	b.n	6f36 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f50:	4e02      	ldr	r6, [pc, #8]	; (6f5c <nrfx_gpio_handler+0x48>)
    6f52:	e7e7      	b.n	6f24 <nrfx_gpio_handler+0x10>
    6f54:	4623      	mov	r3, r4
    6f56:	e7f8      	b.n	6f4a <nrfx_gpio_handler+0x36>
    6f58:	0000d748 	.word	0x0000d748
    6f5c:	0000d730 	.word	0x0000d730

00006f60 <gpio_nrfx_pin_configure>:
{
    6f60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6f64:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6f66:	7b3b      	ldrb	r3, [r7, #12]
    6f68:	f001 051f 	and.w	r5, r1, #31
    6f6c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    6f70:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6f72:	4628      	mov	r0, r5
    6f74:	f10d 0103 	add.w	r1, sp, #3
{
    6f78:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6f7a:	f001 f90b 	bl	8194 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6f7e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6f82:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6f84:	d10b      	bne.n	6f9e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6f86:	4628      	mov	r0, r5
    6f88:	f001 f9c8 	bl	831c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6f8c:	4b3d      	ldr	r3, [pc, #244]	; (7084 <gpio_nrfx_pin_configure+0x124>)
    6f8e:	4598      	cmp	r8, r3
    6f90:	d103      	bne.n	6f9a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    6f92:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6f96:	f001 f945 	bl	8224 <nrfx_gpiote_channel_free>
		return 0;
    6f9a:	2000      	movs	r0, #0
    6f9c:	e00c      	b.n	6fb8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6f9e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6fa0:	4619      	mov	r1, r3
    6fa2:	aa02      	add	r2, sp, #8
    6fa4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    6fa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6faa:	f000 ffcd 	bl	7f48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6fae:	4b35      	ldr	r3, [pc, #212]	; (7084 <gpio_nrfx_pin_configure+0x124>)
    6fb0:	4298      	cmp	r0, r3
    6fb2:	d004      	beq.n	6fbe <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    6fb4:	f06f 0015 	mvn.w	r0, #21
}
    6fb8:	b004      	add	sp, #16
    6fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    6fbe:	4580      	cmp	r8, r0
    6fc0:	d103      	bne.n	6fca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    6fc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6fc6:	f001 f92d 	bl	8224 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    6fca:	03a3      	lsls	r3, r4, #14
    6fcc:	d54b      	bpl.n	7066 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6fce:	f240 3306 	movw	r3, #774	; 0x306
    6fd2:	4023      	ands	r3, r4
    6fd4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    6fd8:	d019      	beq.n	700e <gpio_nrfx_pin_configure+0xae>
    6fda:	d80c      	bhi.n	6ff6 <gpio_nrfx_pin_configure+0x96>
    6fdc:	2b06      	cmp	r3, #6
    6fde:	d017      	beq.n	7010 <gpio_nrfx_pin_configure+0xb0>
    6fe0:	d804      	bhi.n	6fec <gpio_nrfx_pin_configure+0x8c>
    6fe2:	b1ab      	cbz	r3, 7010 <gpio_nrfx_pin_configure+0xb0>
    6fe4:	2b02      	cmp	r3, #2
    6fe6:	d1e5      	bne.n	6fb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    6fe8:	2304      	movs	r3, #4
    6fea:	e011      	b.n	7010 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6ff0:	d1e0      	bne.n	6fb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    6ff2:	2301      	movs	r3, #1
    6ff4:	e00c      	b.n	7010 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ff6:	f240 2202 	movw	r2, #514	; 0x202
    6ffa:	4293      	cmp	r3, r2
    6ffc:	d027      	beq.n	704e <gpio_nrfx_pin_configure+0xee>
    6ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    7002:	d026      	beq.n	7052 <gpio_nrfx_pin_configure+0xf2>
    7004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7008:	d1d4      	bne.n	6fb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    700a:	2302      	movs	r3, #2
    700c:	e000      	b.n	7010 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    700e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    7010:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    7014:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    7018:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    701c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    701e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    7022:	bf54      	ite	pl
    7024:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    7028:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    702a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    702c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7030:	d511      	bpl.n	7056 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7032:	687a      	ldr	r2, [r7, #4]
    7034:	2301      	movs	r3, #1
    7036:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    7038:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    703c:	2200      	movs	r2, #0
    703e:	a901      	add	r1, sp, #4
    7040:	4628      	mov	r0, r5
    7042:	f001 f82f 	bl	80a4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7046:	4b0f      	ldr	r3, [pc, #60]	; (7084 <gpio_nrfx_pin_configure+0x124>)
    7048:	4298      	cmp	r0, r3
    704a:	d0a6      	beq.n	6f9a <gpio_nrfx_pin_configure+0x3a>
    704c:	e7b2      	b.n	6fb4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    704e:	2305      	movs	r3, #5
    7050:	e7de      	b.n	7010 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    7052:	2303      	movs	r3, #3
    7054:	e7dc      	b.n	7010 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7056:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7058:	bf41      	itttt	mi
    705a:	2301      	movmi	r3, #1
    705c:	687a      	ldrmi	r2, [r7, #4]
    705e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    7060:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    7064:	e7ea      	b.n	703c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    7066:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7068:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    706c:	bf54      	ite	pl
    706e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    7072:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7074:	461a      	mov	r2, r3
    7076:	a901      	add	r1, sp, #4
    7078:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    707a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    707e:	f000 ff63 	bl	7f48 <nrfx_gpiote_input_configure>
    7082:	e7e0      	b.n	7046 <gpio_nrfx_pin_configure+0xe6>
    7084:	0bad0000 	.word	0x0bad0000

00007088 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    7088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    708a:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    708c:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    708e:	69e3      	ldr	r3, [r4, #28]
{
    7090:	af00      	add	r7, sp, #0
    7092:	4605      	mov	r5, r0
	dev_config->irq_connect();
    7094:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    7096:	6a20      	ldr	r0, [r4, #32]
    7098:	f005 fd53 	bl	cb42 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    709c:	2800      	cmp	r0, #0
    709e:	db1f      	blt.n	70e0 <i2c_nrfx_twim_init+0x58>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    70a0:	4633      	mov	r3, r6
    70a2:	4a13      	ldr	r2, [pc, #76]	; (70f0 <i2c_nrfx_twim_init+0x68>)
    70a4:	f104 0108 	add.w	r1, r4, #8
    70a8:	4620      	mov	r0, r4
    70aa:	f001 fad9 	bl	8660 <nrfx_twim_init>
    70ae:	4b11      	ldr	r3, [pc, #68]	; (70f4 <i2c_nrfx_twim_init+0x6c>)
    70b0:	4298      	cmp	r0, r3
    70b2:	d017      	beq.n	70e4 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
    70b4:	466c      	mov	r4, sp
    70b6:	b088      	sub	sp, #32
    70b8:	682b      	ldr	r3, [r5, #0]
    70ba:	466a      	mov	r2, sp
    70bc:	490e      	ldr	r1, [pc, #56]	; (70f8 <i2c_nrfx_twim_init+0x70>)
    70be:	e9c2 1305 	strd	r1, r3, [r2, #20]
    70c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    70c6:	8393      	strh	r3, [r2, #28]
    70c8:	4b0c      	ldr	r3, [pc, #48]	; (70fc <i2c_nrfx_twim_init+0x74>)
    70ca:	f842 3f10 	str.w	r3, [r2, #16]!
    70ce:	480c      	ldr	r0, [pc, #48]	; (7100 <i2c_nrfx_twim_init+0x78>)
    70d0:	2300      	movs	r3, #0
    70d2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    70d6:	f7fb fe1b 	bl	2d10 <z_impl_z_log_msg_static_create>
		return -EIO;
    70da:	f06f 0004 	mvn.w	r0, #4
    70de:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
    70e0:	46bd      	mov	sp, r7
    70e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
    70e4:	4620      	mov	r0, r4
    70e6:	f001 fb1d 	bl	8724 <nrfx_twim_enable>
	return 0;
    70ea:	2000      	movs	r0, #0
    70ec:	e7f8      	b.n	70e0 <i2c_nrfx_twim_init+0x58>
    70ee:	bf00      	nop
    70f0:	00007141 	.word	0x00007141
    70f4:	0bad0000 	.word	0x0bad0000
    70f8:	0000ec7b 	.word	0x0000ec7b
    70fc:	01000003 	.word	0x01000003
    7100:	0000d9d4 	.word	0x0000d9d4

00007104 <i2c_nrfx_twim_recover_bus>:
{
    7104:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    7106:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    7108:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    710a:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    710e:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    7112:	4620      	mov	r0, r4
    7114:	f001 fb16 	bl	8744 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    7118:	4631      	mov	r1, r6
    711a:	4628      	mov	r0, r5
    711c:	f002 fcee 	bl	9afc <nrfx_twi_twim_bus_recover>
    7120:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    7122:	6a20      	ldr	r0, [r4, #32]
    7124:	f005 fd0d 	bl	cb42 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    7128:	4620      	mov	r0, r4
    712a:	f001 fafb 	bl	8724 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    712e:	4b03      	ldr	r3, [pc, #12]	; (713c <i2c_nrfx_twim_recover_bus+0x38>)
    7130:	429d      	cmp	r5, r3
}
    7132:	bf14      	ite	ne
    7134:	f06f 000f 	mvnne.w	r0, #15
    7138:	2000      	moveq	r0, #0
    713a:	bd70      	pop	{r4, r5, r6, pc}
    713c:	0bad0000 	.word	0x0bad0000

00007140 <event_handler>:
	switch (p_event->type) {
    7140:	7803      	ldrb	r3, [r0, #0]
    7142:	2b01      	cmp	r3, #1
    7144:	d008      	beq.n	7158 <event_handler+0x18>
    7146:	2b02      	cmp	r3, #2
    7148:	d008      	beq.n	715c <event_handler+0x1c>
    714a:	b94b      	cbnz	r3, 7160 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    714c:	4b05      	ldr	r3, [pc, #20]	; (7164 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    714e:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    7150:	f101 0010 	add.w	r0, r1, #16
    7154:	f003 b8d0 	b.w	a2f8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    7158:	4b03      	ldr	r3, [pc, #12]	; (7168 <event_handler+0x28>)
    715a:	e7f8      	b.n	714e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    715c:	4b03      	ldr	r3, [pc, #12]	; (716c <event_handler+0x2c>)
    715e:	e7f6      	b.n	714e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    7160:	4b03      	ldr	r3, [pc, #12]	; (7170 <event_handler+0x30>)
    7162:	e7f4      	b.n	714e <event_handler+0xe>
    7164:	0bad0000 	.word	0x0bad0000
    7168:	0bae0001 	.word	0x0bae0001
    716c:	0bae0002 	.word	0x0bae0002
    7170:	0bad0001 	.word	0x0bad0001

00007174 <i2c_nrfx_twim_configure>:
{
    7174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    7176:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    717a:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    717c:	d10f      	bne.n	719e <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
    717e:	f3c1 0142 	ubfx	r1, r1, #1, #3
    7182:	2901      	cmp	r1, #1
    7184:	d00e      	beq.n	71a4 <i2c_nrfx_twim_configure+0x30>
    7186:	2902      	cmp	r1, #2
    7188:	d015      	beq.n	71b6 <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
    718a:	4a0d      	ldr	r2, [pc, #52]	; (71c0 <i2c_nrfx_twim_configure+0x4c>)
    718c:	9205      	str	r2, [sp, #20]
    718e:	2202      	movs	r2, #2
    7190:	9204      	str	r2, [sp, #16]
    7192:	480c      	ldr	r0, [pc, #48]	; (71c4 <i2c_nrfx_twim_configure+0x50>)
    7194:	aa04      	add	r2, sp, #16
    7196:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    719a:	f7fb fdb9 	bl	2d10 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    719e:	f06f 0015 	mvn.w	r0, #21
    71a2:	e005      	b.n	71b0 <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    71a4:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    71a6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    71aa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    71ae:	2000      	movs	r0, #0
}
    71b0:	b007      	add	sp, #28
    71b2:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    71b6:	6813      	ldr	r3, [r2, #0]
    71b8:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    71bc:	e7f5      	b.n	71aa <i2c_nrfx_twim_configure+0x36>
    71be:	bf00      	nop
    71c0:	0000ec9b 	.word	0x0000ec9b
    71c4:	0000d9d4 	.word	0x0000d9d4

000071c8 <i2c_nrfx_twim_transfer>:
{
    71c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71cc:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    71ce:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    71d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
    71d6:	af00      	add	r7, sp, #0
    71d8:	461d      	mov	r5, r3
    71da:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    71dc:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    71e0:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    71e4:	617b      	str	r3, [r7, #20]
{
    71e6:	4606      	mov	r6, r0
    71e8:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    71ea:	2214      	movs	r2, #20
    71ec:	2100      	movs	r1, #0
    71ee:	f107 001c 	add.w	r0, r7, #28
    71f2:	f005 fb14 	bl	c81e <memset>
    71f6:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
    71f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7200:	4648      	mov	r0, r9
    7202:	f003 f899 	bl	a338 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    7206:	f109 0310 	add.w	r3, r9, #16
    720a:	60fb      	str	r3, [r7, #12]
    720c:	2200      	movs	r2, #0
    720e:	2300      	movs	r3, #0
    7210:	f109 0010 	add.w	r0, r9, #16
    7214:	f003 f890 	bl	a338 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    7218:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    721c:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    721e:	693b      	ldr	r3, [r7, #16]
    7220:	4598      	cmp	r8, r3
    7222:	d301      	bcc.n	7228 <i2c_nrfx_twim_transfer+0x60>
    7224:	2400      	movs	r4, #0
    7226:	e038      	b.n	729a <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    7228:	7a20      	ldrb	r0, [r4, #8]
    722a:	0702      	lsls	r2, r0, #28
    722c:	f100 80eb 	bmi.w	7406 <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    7230:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
    7232:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    7236:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
    7238:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
    723a:	d20a      	bcs.n	7252 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    723c:	0783      	lsls	r3, r0, #30
    723e:	d408      	bmi.n	7252 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    7240:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    7242:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    7246:	f002 0201 	and.w	r2, r2, #1
    724a:	f003 0304 	and.w	r3, r3, #4
    724e:	431a      	orrs	r2, r3
    7250:	d02b      	beq.n	72aa <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
    7252:	2d00      	cmp	r5, #0
    7254:	d03f      	beq.n	72d6 <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
    7256:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    7258:	6862      	ldr	r2, [r4, #4]
    725a:	f8d7 c014 	ldr.w	ip, [r7, #20]
    725e:	18a9      	adds	r1, r5, r2
    7260:	4561      	cmp	r1, ip
    7262:	d924      	bls.n	72ae <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
    7264:	466c      	mov	r4, sp
    7266:	b08c      	sub	sp, #48	; 0x30
    7268:	6831      	ldr	r1, [r6, #0]
    726a:	466b      	mov	r3, sp
    726c:	61da      	str	r2, [r3, #28]
    726e:	697a      	ldr	r2, [r7, #20]
    7270:	4866      	ldr	r0, [pc, #408]	; (740c <i2c_nrfx_twim_transfer+0x244>)
    7272:	e9c3 2108 	strd	r2, r1, [r3, #32]
    7276:	f240 5203 	movw	r2, #1283	; 0x503
    727a:	851a      	strh	r2, [r3, #40]	; 0x28
    727c:	461a      	mov	r2, r3
    727e:	e9c3 0505 	strd	r0, r5, [r3, #20]
    7282:	4b63      	ldr	r3, [pc, #396]	; (7410 <i2c_nrfx_twim_transfer+0x248>)
    7284:	f842 3f10 	str.w	r3, [r2, #16]!
    7288:	4862      	ldr	r0, [pc, #392]	; (7414 <i2c_nrfx_twim_transfer+0x24c>)
    728a:	2300      	movs	r3, #0
    728c:	f44f 5151 	mov.w	r1, #13376	; 0x3440
    7290:	f7fb fd3e 	bl	2d10 <z_impl_z_log_msg_static_create>
    7294:	46a5      	mov	sp, r4
				ret = -ENOSPC;
    7296:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
    729a:	4648      	mov	r0, r9
    729c:	f003 f82c 	bl	a2f8 <z_impl_k_sem_give>
}
    72a0:	4620      	mov	r0, r4
    72a2:	3734      	adds	r7, #52	; 0x34
    72a4:	46bd      	mov	sp, r7
    72a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
    72aa:	2301      	movs	r3, #1
    72ac:	e7d4      	b.n	7258 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    72ae:	07c1      	lsls	r1, r0, #31
    72b0:	d406      	bmi.n	72c0 <i2c_nrfx_twim_transfer+0xf8>
				memcpy(msg_buf + msg_buf_used,
    72b2:	6821      	ldr	r1, [r4, #0]
    72b4:	607b      	str	r3, [r7, #4]
    72b6:	eb0a 0005 	add.w	r0, sl, r5
    72ba:	f005 faa5 	bl	c808 <memcpy>
    72be:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
    72c0:	6862      	ldr	r2, [r4, #4]
    72c2:	442a      	add	r2, r5
    72c4:	b295      	uxth	r5, r2
		if (concat_next) {
    72c6:	2b00      	cmp	r3, #0
    72c8:	f040 8085 	bne.w	73d6 <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
    72cc:	b13d      	cbz	r5, 72de <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msg_buf;
    72ce:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    72d2:	462b      	mov	r3, r5
    72d4:	e007      	b.n	72e6 <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    72d6:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    72d8:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    72dc:	d51b      	bpl.n	7316 <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    72de:	6823      	ldr	r3, [r4, #0]
    72e0:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    72e2:	6863      	ldr	r3, [r4, #4]
    72e4:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    72e6:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    72e8:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    72ea:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    72ee:	f082 0202 	eor.w	r2, r2, #2
    72f2:	f3c2 0240 	ubfx	r2, r2, #1, #1
    72f6:	0152      	lsls	r2, r2, #5
    72f8:	f107 011c 	add.w	r1, r7, #28
    72fc:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    72fe:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    7300:	f001 fa3e 	bl	8780 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    7304:	4b44      	ldr	r3, [pc, #272]	; (7418 <i2c_nrfx_twim_transfer+0x250>)
    7306:	4298      	cmp	r0, r3
    7308:	d02c      	beq.n	7364 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
    730a:	330b      	adds	r3, #11
    730c:	4298      	cmp	r0, r3
    730e:	d144      	bne.n	739a <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
    7310:	f06f 040f 	mvn.w	r4, #15
    7314:	e7c1      	b.n	729a <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7316:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    731a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    731e:	d0de      	beq.n	72de <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    7320:	f8bb 301a 	ldrh.w	r3, [fp, #26]
    7324:	4293      	cmp	r3, r2
    7326:	d218      	bcs.n	735a <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    7328:	466c      	mov	r4, sp
    732a:	b08a      	sub	sp, #40	; 0x28
    732c:	6831      	ldr	r1, [r6, #0]
    732e:	466b      	mov	r3, sp
    7330:	483a      	ldr	r0, [pc, #232]	; (741c <i2c_nrfx_twim_transfer+0x254>)
    7332:	61d9      	str	r1, [r3, #28]
    7334:	e9c3 0205 	strd	r0, r2, [r3, #20]
    7338:	f240 3201 	movw	r2, #769	; 0x301
    733c:	841a      	strh	r2, [r3, #32]
    733e:	461a      	mov	r2, r3
    7340:	4b37      	ldr	r3, [pc, #220]	; (7420 <i2c_nrfx_twim_transfer+0x258>)
    7342:	f842 3f10 	str.w	r3, [r2, #16]!
    7346:	4833      	ldr	r0, [pc, #204]	; (7414 <i2c_nrfx_twim_transfer+0x24c>)
    7348:	462b      	mov	r3, r5
    734a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    734e:	f7fb fcdf 	bl	2d10 <z_impl_z_log_msg_static_create>
    7352:	46a5      	mov	sp, r4
				ret = -EINVAL;
    7354:	f06f 0415 	mvn.w	r4, #21
				break;
    7358:	e79f      	b.n	729a <i2c_nrfx_twim_transfer+0xd2>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    735a:	4650      	mov	r0, sl
    735c:	f005 fa54 	bl	c808 <memcpy>
			msg_buf_used = msgs[i].len;
    7360:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    7362:	e7b3      	b.n	72cc <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
    7364:	2300      	movs	r3, #0
    7366:	68f8      	ldr	r0, [r7, #12]
    7368:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    736c:	f002 ffe4 	bl	a338 <z_impl_k_sem_take>
		if (ret != 0) {
    7370:	4603      	mov	r3, r0
    7372:	b1a8      	cbz	r0, 73a0 <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    7374:	466c      	mov	r4, sp
    7376:	b088      	sub	sp, #32
    7378:	466a      	mov	r2, sp
    737a:	4b2a      	ldr	r3, [pc, #168]	; (7424 <i2c_nrfx_twim_transfer+0x25c>)
    737c:	e9c2 3805 	strd	r3, r8, [r2, #20]
    7380:	2303      	movs	r3, #3
    7382:	f842 3f10 	str.w	r3, [r2, #16]!
    7386:	4823      	ldr	r0, [pc, #140]	; (7414 <i2c_nrfx_twim_transfer+0x24c>)
    7388:	2300      	movs	r3, #0
    738a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    738e:	f7fb fcbf 	bl	2d10 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
    7392:	4630      	mov	r0, r6
    7394:	46a5      	mov	sp, r4
    7396:	f7ff feb5 	bl	7104 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    739a:	f06f 0404 	mvn.w	r4, #4
    739e:	e77c      	b.n	729a <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
    73a0:	f8d9 1020 	ldr.w	r1, [r9, #32]
		if (res != NRFX_SUCCESS) {
    73a4:	4a1c      	ldr	r2, [pc, #112]	; (7418 <i2c_nrfx_twim_transfer+0x250>)
    73a6:	4291      	cmp	r1, r2
    73a8:	d011      	beq.n	73ce <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    73aa:	466c      	mov	r4, sp
    73ac:	b088      	sub	sp, #32
    73ae:	466a      	mov	r2, sp
    73b0:	481d      	ldr	r0, [pc, #116]	; (7428 <i2c_nrfx_twim_transfer+0x260>)
    73b2:	f8c2 801c 	str.w	r8, [r2, #28]
    73b6:	e9c2 0105 	strd	r0, r1, [r2, #20]
    73ba:	2104      	movs	r1, #4
    73bc:	f842 1f10 	str.w	r1, [r2, #16]!
    73c0:	4814      	ldr	r0, [pc, #80]	; (7414 <i2c_nrfx_twim_transfer+0x24c>)
    73c2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    73c6:	f7fb fca3 	bl	2d10 <z_impl_z_log_msg_static_create>
    73ca:	46a5      	mov	sp, r4
			break;
    73cc:	e7e5      	b.n	739a <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
    73ce:	7a23      	ldrb	r3, [r4, #8]
    73d0:	07db      	lsls	r3, r3, #31
    73d2:	d404      	bmi.n	73de <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
    73d4:	2500      	movs	r5, #0
    73d6:	f8d7 8008 	ldr.w	r8, [r7, #8]
    73da:	340c      	adds	r4, #12
    73dc:	e71f      	b.n	721e <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
    73de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    73e0:	459a      	cmp	sl, r3
    73e2:	d1f7      	bne.n	73d4 <i2c_nrfx_twim_transfer+0x20c>
    73e4:	46a0      	mov	r8, r4
    73e6:	e007      	b.n	73f8 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
    73e8:	1aa9      	subs	r1, r5, r2
    73ea:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    73ec:	f8d8 000c 	ldr.w	r0, [r8, #12]
    73f0:	fa1a f181 	uxtah	r1, sl, r1
    73f4:	f005 fa08 	bl	c808 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    73f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    73fc:	4295      	cmp	r5, r2
    73fe:	f1a8 080c 	sub.w	r8, r8, #12
    7402:	d2f1      	bcs.n	73e8 <i2c_nrfx_twim_transfer+0x220>
    7404:	e7e6      	b.n	73d4 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
    7406:	f06f 0485 	mvn.w	r4, #133	; 0x85
    740a:	e746      	b.n	729a <i2c_nrfx_twim_transfer+0xd2>
    740c:	0000ecad 	.word	0x0000ecad
    7410:	01000006 	.word	0x01000006
    7414:	0000d9d4 	.word	0x0000d9d4
    7418:	0bad0000 	.word	0x0bad0000
    741c:	0000ed3d 	.word	0x0000ed3d
    7420:	01000004 	.word	0x01000004
    7424:	0000eda3 	.word	0x0000eda3
    7428:	0000edcd 	.word	0x0000edcd

0000742c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    742c:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    742e:	4e1c      	ldr	r6, [pc, #112]	; (74a0 <pinctrl_configure_pins+0x74>)
    7430:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7434:	4281      	cmp	r1, r0
    7436:	d101      	bne.n	743c <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    7438:	2000      	movs	r0, #0
    743a:	e010      	b.n	745e <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    743c:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    743e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    7442:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7444:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    7448:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    744c:	bf08      	it	eq
    744e:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    7452:	2b0b      	cmp	r3, #11
    7454:	d004      	beq.n	7460 <pinctrl_configure_pins+0x34>
    7456:	2b0c      	cmp	r3, #12
    7458:	d01f      	beq.n	749a <pinctrl_configure_pins+0x6e>
    745a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    7460:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    7464:	b905      	cbnz	r5, 7468 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    7466:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    7468:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    746c:	f004 071f 	and.w	r7, r4, #31
    7470:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    7474:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    7476:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    747a:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    747c:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    7480:	bf0c      	ite	eq
    7482:	46b4      	moveq	ip, r6
    7484:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    7488:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    748c:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7490:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7494:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7498:	e7cc      	b.n	7434 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    749a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    749e:	e7e1      	b.n	7464 <pinctrl_configure_pins+0x38>
    74a0:	50000300 	.word	0x50000300

000074a4 <as5600_initialize>:

	return 0;
}

static int as5600_initialize(const struct device *dev)
{
    74a4:	b598      	push	{r3, r4, r7, lr}
	struct as5600_dev_data *const dev_data = dev->data;
    74a6:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    74a8:	2400      	movs	r4, #0
{
    74aa:	af00      	add	r7, sp, #0
	dev_data->position = 0;
    74ac:	801c      	strh	r4, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);
    74ae:	b088      	sub	sp, #32
    74b0:	6803      	ldr	r3, [r0, #0]
    74b2:	466a      	mov	r2, sp
    74b4:	4908      	ldr	r1, [pc, #32]	; (74d8 <as5600_initialize+0x34>)
    74b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    74ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    74be:	8393      	strh	r3, [r2, #28]
    74c0:	4b06      	ldr	r3, [pc, #24]	; (74dc <as5600_initialize+0x38>)
    74c2:	f842 3f10 	str.w	r3, [r2, #16]!
    74c6:	4806      	ldr	r0, [pc, #24]	; (74e0 <as5600_initialize+0x3c>)
    74c8:	4623      	mov	r3, r4
    74ca:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    74ce:	f7fb fc1f 	bl	2d10 <z_impl_z_log_msg_static_create>

	return 0;
}
    74d2:	4620      	mov	r0, r4
    74d4:	46bd      	mov	sp, r7
    74d6:	bd98      	pop	{r3, r4, r7, pc}
    74d8:	0000ee0d 	.word	0x0000ee0d
    74dc:	01000003 	.word	0x01000003
    74e0:	0000d9ac 	.word	0x0000d9ac

000074e4 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    74e4:	4b01      	ldr	r3, [pc, #4]	; (74ec <hfclk_on_callback+0x8>)
    74e6:	2201      	movs	r2, #1
    74e8:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    74ea:	4770      	bx	lr
    74ec:	4000c000 	.word	0x4000c000

000074f0 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    74f0:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    74f2:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    74f4:	d10b      	bne.n	750e <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    74f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74f8:	4906      	ldr	r1, [pc, #24]	; (7514 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    74fa:	4807      	ldr	r0, [pc, #28]	; (7518 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    74fc:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    74fe:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    7502:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    7506:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    7508:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    750a:	2000      	movs	r0, #0
    750c:	4770      	bx	lr
		return -ENOTSUP;
    750e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7512:	4770      	bx	lr
    7514:	0003d090 	.word	0x0003d090
    7518:	000f4240 	.word	0x000f4240

0000751c <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    751c:	4b04      	ldr	r3, [pc, #16]	; (7530 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    751e:	6900      	ldr	r0, [r0, #16]
    7520:	2200      	movs	r2, #0
    7522:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7526:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    752a:	f002 bee5 	b.w	a2f8 <z_impl_k_sem_give>
    752e:	bf00      	nop
    7530:	4000c000 	.word	0x4000c000

00007534 <temp_nrf5_sample_fetch>:
{
    7534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    7536:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    7538:	6aab      	ldr	r3, [r5, #40]	; 0x28
    753a:	b363      	cbz	r3, 7596 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    753c:	2939      	cmp	r1, #57	; 0x39
    753e:	d001      	beq.n	7544 <temp_nrf5_sample_fetch+0x10>
    7540:	290c      	cmp	r1, #12
    7542:	d12b      	bne.n	759c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    7544:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    7548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    754c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7550:	4630      	mov	r0, r6
    7552:	f002 fde7 	bl	a124 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    7556:	4b13      	ldr	r3, [pc, #76]	; (75a4 <temp_nrf5_sample_fetch+0x70>)
    7558:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    755a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    755c:	2303      	movs	r3, #3
    755e:	2400      	movs	r4, #0
    7560:	4669      	mov	r1, sp
    7562:	9403      	str	r4, [sp, #12]
    7564:	9302      	str	r3, [sp, #8]
    7566:	f004 faeb 	bl	bb40 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    756a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    756e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7572:	4628      	mov	r0, r5
    7574:	f002 fee0 	bl	a338 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    7578:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    757a:	f004 fb39 	bl	bbf0 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    757e:	4b0a      	ldr	r3, [pc, #40]	; (75a8 <temp_nrf5_sample_fetch+0x74>)
    7580:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    7584:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    7586:	2201      	movs	r2, #1
    7588:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    758a:	4630      	mov	r0, r6
    758c:	f002 fe44 	bl	a218 <z_impl_k_mutex_unlock>
	return 0;
    7590:	4620      	mov	r0, r4
}
    7592:	b004      	add	sp, #16
    7594:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    7596:	f06f 000a 	mvn.w	r0, #10
    759a:	e7fa      	b.n	7592 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    759c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    75a0:	e7f7      	b.n	7592 <temp_nrf5_sample_fetch+0x5e>
    75a2:	bf00      	nop
    75a4:	000074e5 	.word	0x000074e5
    75a8:	4000c000 	.word	0x4000c000

000075ac <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    75ac:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    75ae:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    75b0:	2000      	movs	r0, #0
    75b2:	f7ff fb7b 	bl	6cac <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    75b6:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    75b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    75bc:	2100      	movs	r1, #0
    75be:	4620      	mov	r0, r4
    75c0:	f005 fdd0 	bl	d164 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    75c4:	f104 0010 	add.w	r0, r4, #16
    75c8:	f005 fd4c 	bl	d064 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    75cc:	2200      	movs	r2, #0
    75ce:	2101      	movs	r1, #1
    75d0:	200c      	movs	r0, #12
    75d2:	f7fd fb71 	bl	4cb8 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    75d6:	200c      	movs	r0, #12
    75d8:	f7fd fb3e 	bl	4c58 <arch_irq_enable>
    p_reg->INTENSET = mask;
    75dc:	4b02      	ldr	r3, [pc, #8]	; (75e8 <temp_nrf5_init+0x3c>)
    75de:	2201      	movs	r2, #1
    75e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    75e4:	2000      	movs	r0, #0
    75e6:	bd10      	pop	{r4, pc}
    75e8:	4000c000 	.word	0x4000c000

000075ec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    75ec:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    75ee:	2301      	movs	r3, #1
    75f0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    75f2:	4a0e      	ldr	r2, [pc, #56]	; (762c <compare_int_lock+0x40>)
    75f4:	f3bf 8f5b 	dmb	ish
    75f8:	43dc      	mvns	r4, r3
    75fa:	e852 1f00 	ldrex	r1, [r2]
    75fe:	ea01 0504 	and.w	r5, r1, r4
    7602:	e842 5600 	strex	r6, r5, [r2]
    7606:	2e00      	cmp	r6, #0
    7608:	d1f7      	bne.n	75fa <compare_int_lock+0xe>
    760a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    760e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7612:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    7614:	4806      	ldr	r0, [pc, #24]	; (7630 <compare_int_lock+0x44>)
    7616:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    761a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    761e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    7622:	420b      	tst	r3, r1
}
    7624:	bf14      	ite	ne
    7626:	2001      	movne	r0, #1
    7628:	2000      	moveq	r0, #0
    762a:	bd70      	pop	{r4, r5, r6, pc}
    762c:	20001d10 	.word	0x20001d10
    7630:	40011000 	.word	0x40011000

00007634 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    7634:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    7636:	490e      	ldr	r1, [pc, #56]	; (7670 <sys_clock_timeout_handler+0x3c>)
    7638:	e9d1 3400 	ldrd	r3, r4, [r1]
    763c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    763e:	18c3      	adds	r3, r0, r3
    7640:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    7644:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    7648:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    764c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7650:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7654:	d209      	bcs.n	766a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7656:	4b07      	ldr	r3, [pc, #28]	; (7674 <sys_clock_timeout_handler+0x40>)
    7658:	681b      	ldr	r3, [r3, #0]
    765a:	0a1a      	lsrs	r2, r3, #8
    765c:	061b      	lsls	r3, r3, #24
    765e:	199c      	adds	r4, r3, r6
    7660:	4b05      	ldr	r3, [pc, #20]	; (7678 <sys_clock_timeout_handler+0x44>)
    7662:	f142 0500 	adc.w	r5, r2, #0
    7666:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    766a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    766c:	f003 bc2e 	b.w	aecc <sys_clock_announce>
    7670:	20000a60 	.word	0x20000a60
    7674:	20001d14 	.word	0x20001d14
    7678:	20000a68 	.word	0x20000a68

0000767c <compare_int_unlock>:
	if (key) {
    767c:	b311      	cbz	r1, 76c4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    767e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    7682:	2301      	movs	r3, #1
    7684:	4a10      	ldr	r2, [pc, #64]	; (76c8 <compare_int_unlock+0x4c>)
    7686:	4083      	lsls	r3, r0
    7688:	e852 cf00 	ldrex	ip, [r2]
    768c:	ea4c 0c03 	orr.w	ip, ip, r3
    7690:	e842 c100 	strex	r1, ip, [r2]
    7694:	2900      	cmp	r1, #0
    7696:	d1f7      	bne.n	7688 <compare_int_unlock+0xc>
    7698:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    769c:	4a0b      	ldr	r2, [pc, #44]	; (76cc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    769e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    76a2:	4083      	lsls	r3, r0
    76a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76a8:	4b09      	ldr	r3, [pc, #36]	; (76d0 <compare_int_unlock+0x54>)
    76aa:	f3bf 8f5b 	dmb	ish
    76ae:	681b      	ldr	r3, [r3, #0]
    76b0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    76b4:	40c3      	lsrs	r3, r0
    76b6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76b8:	bf42      	ittt	mi
    76ba:	4b06      	ldrmi	r3, [pc, #24]	; (76d4 <compare_int_unlock+0x58>)
    76bc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    76c0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    76c4:	4770      	bx	lr
    76c6:	bf00      	nop
    76c8:	20001d10 	.word	0x20001d10
    76cc:	40011000 	.word	0x40011000
    76d0:	20001d0c 	.word	0x20001d0c
    76d4:	e000e100 	.word	0xe000e100

000076d8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    76d8:	4b0d      	ldr	r3, [pc, #52]	; (7710 <z_nrf_rtc_timer_read+0x38>)
    76da:	6818      	ldr	r0, [r3, #0]
    76dc:	0a01      	lsrs	r1, r0, #8
    76de:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    76e0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    76e4:	4b0b      	ldr	r3, [pc, #44]	; (7714 <z_nrf_rtc_timer_read+0x3c>)
    76e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    76ea:	1818      	adds	r0, r3, r0
    76ec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    76f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    76f4:	d20a      	bcs.n	770c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    76f6:	4b08      	ldr	r3, [pc, #32]	; (7718 <z_nrf_rtc_timer_read+0x40>)
    76f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    76fc:	4290      	cmp	r0, r2
    76fe:	eb71 0303 	sbcs.w	r3, r1, r3
    7702:	d203      	bcs.n	770c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    7704:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7708:	f141 0100 	adc.w	r1, r1, #0
}
    770c:	4770      	bx	lr
    770e:	bf00      	nop
    7710:	20001d14 	.word	0x20001d14
    7714:	40011000 	.word	0x40011000
    7718:	20000a68 	.word	0x20000a68

0000771c <compare_set>:
{
    771c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7720:	4616      	mov	r6, r2
    7722:	461f      	mov	r7, r3
    7724:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    7726:	f7ff ff61 	bl	75ec <compare_int_lock>
    772a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    772c:	f7ff ffd4 	bl	76d8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7730:	42b0      	cmp	r0, r6
    7732:	eb71 0307 	sbcs.w	r3, r1, r7
    7736:	d251      	bcs.n	77dc <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    7738:	4b3a      	ldr	r3, [pc, #232]	; (7824 <compare_set+0x108>)
    773a:	1a30      	subs	r0, r6, r0
    773c:	eb67 0101 	sbc.w	r1, r7, r1
    7740:	4298      	cmp	r0, r3
    7742:	f171 0100 	sbcs.w	r1, r1, #0
    7746:	d26a      	bcs.n	781e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    7748:	4b37      	ldr	r3, [pc, #220]	; (7828 <compare_set+0x10c>)
    774a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    774e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7752:	429f      	cmp	r7, r3
    7754:	bf08      	it	eq
    7756:	4296      	cmpeq	r6, r2
    7758:	d04e      	beq.n	77f8 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    775a:	4934      	ldr	r1, [pc, #208]	; (782c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    775c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7760:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7764:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7768:	00ad      	lsls	r5, r5, #2
    776a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    776e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7770:	b2ad      	uxth	r5, r5
    7772:	f005 fa43 	bl	cbfc <event_clear>
	return absolute_time & COUNTER_MAX;
    7776:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    777a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    777e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7782:	4a2b      	ldr	r2, [pc, #172]	; (7830 <compare_set+0x114>)
    7784:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7786:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    778a:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    778c:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    7790:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7792:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    7796:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    779a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    779e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    77a2:	f06f 0002 	mvn.w	r0, #2
    77a6:	eba0 0008 	sub.w	r0, r0, r8
    77aa:	4460      	add	r0, ip
    77ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    77b0:	4290      	cmp	r0, r2
    77b2:	d921      	bls.n	77f8 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77b4:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    77b6:	b160      	cbz	r0, 77d2 <compare_set+0xb6>
     return p_reg->COUNTER;
    77b8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    77bc:	eba8 000b 	sub.w	r0, r8, fp
    77c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    77c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    77c8:	d916      	bls.n	77f8 <compare_set+0xdc>
					event_clear(chan);
    77ca:	4620      	mov	r0, r4
    77cc:	f005 fa16 	bl	cbfc <event_clear>
    77d0:	4a17      	ldr	r2, [pc, #92]	; (7830 <compare_set+0x114>)
			cc_val = now + cc_inc;
    77d2:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    77d6:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    77da:	e7d9      	b.n	7790 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    77dc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    77de:	4a15      	ldr	r2, [pc, #84]	; (7834 <compare_set+0x118>)
    77e0:	f3bf 8f5b 	dmb	ish
    77e4:	40a3      	lsls	r3, r4
    77e6:	e852 0f00 	ldrex	r0, [r2]
    77ea:	4318      	orrs	r0, r3
    77ec:	e842 0100 	strex	r1, r0, [r2]
    77f0:	2900      	cmp	r1, #0
    77f2:	d1f8      	bne.n	77e6 <compare_set+0xca>
    77f4:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    77f8:	490b      	ldr	r1, [pc, #44]	; (7828 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    77fa:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    77fc:	0123      	lsls	r3, r4, #4
    77fe:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    7802:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    7806:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    7808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    780a:	6053      	str	r3, [r2, #4]
	return ret;
    780c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    780e:	4620      	mov	r0, r4
    7810:	9900      	ldr	r1, [sp, #0]
    7812:	f7ff ff33 	bl	767c <compare_int_unlock>
}
    7816:	4628      	mov	r0, r5
    7818:	b003      	add	sp, #12
    781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    781e:	f06f 0515 	mvn.w	r5, #21
    7822:	e7f4      	b.n	780e <compare_set+0xf2>
    7824:	00800001 	.word	0x00800001
    7828:	20000a50 	.word	0x20000a50
    782c:	40011000 	.word	0x40011000
    7830:	007ffffd 	.word	0x007ffffd
    7834:	20001d0c 	.word	0x20001d0c

00007838 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    7838:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    783a:	4c1b      	ldr	r4, [pc, #108]	; (78a8 <sys_clock_driver_init+0x70>)
    783c:	4b1b      	ldr	r3, [pc, #108]	; (78ac <sys_clock_driver_init+0x74>)
    783e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    7842:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7846:	4b1a      	ldr	r3, [pc, #104]	; (78b0 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    7848:	2500      	movs	r5, #0
    784a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    784e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7852:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    7856:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    785a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    785e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7862:	4b14      	ldr	r3, [pc, #80]	; (78b4 <sys_clock_driver_init+0x7c>)
    7864:	2602      	movs	r6, #2
    7866:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    786a:	2101      	movs	r1, #1
    786c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    7870:	2011      	movs	r0, #17
    7872:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7876:	462a      	mov	r2, r5
    7878:	f7fd fa1e 	bl	4cb8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    787c:	2011      	movs	r0, #17
    787e:	f7fd f9eb 	bl	4c58 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7882:	4a0d      	ldr	r2, [pc, #52]	; (78b8 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7884:	2301      	movs	r3, #1
    7886:	60a3      	str	r3, [r4, #8]
    7888:	6023      	str	r3, [r4, #0]
    788a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    788c:	4b0b      	ldr	r3, [pc, #44]	; (78bc <sys_clock_driver_init+0x84>)
    788e:	4a0c      	ldr	r2, [pc, #48]	; (78c0 <sys_clock_driver_init+0x88>)
    7890:	9300      	str	r3, [sp, #0]
    7892:	9501      	str	r5, [sp, #4]
    7894:	2300      	movs	r3, #0
    7896:	4628      	mov	r0, r5
    7898:	f7ff ff40 	bl	771c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    789c:	4630      	mov	r0, r6
    789e:	f7ff fa0d 	bl	6cbc <z_nrf_clock_control_lf_on>

	return 0;
}
    78a2:	4628      	mov	r0, r5
    78a4:	b002      	add	sp, #8
    78a6:	bd70      	pop	{r4, r5, r6, pc}
    78a8:	40011000 	.word	0x40011000
    78ac:	000f0003 	.word	0x000f0003
    78b0:	20000a50 	.word	0x20000a50
    78b4:	e000e100 	.word	0xe000e100
    78b8:	20001d10 	.word	0x20001d10
    78bc:	00007635 	.word	0x00007635
    78c0:	007fffff 	.word	0x007fffff

000078c4 <rtc_nrf_isr>:
{
    78c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    78c8:	4c2f      	ldr	r4, [pc, #188]	; (7988 <rtc_nrf_isr+0xc4>)
    78ca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    78ce:	0799      	lsls	r1, r3, #30
    78d0:	d50b      	bpl.n	78ea <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    78d6:	b143      	cbz	r3, 78ea <rtc_nrf_isr+0x26>
		overflow_cnt++;
    78d8:	4a2c      	ldr	r2, [pc, #176]	; (798c <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    78da:	2300      	movs	r3, #0
    78dc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    78e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    78e4:	6813      	ldr	r3, [r2, #0]
    78e6:	3301      	adds	r3, #1
    78e8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    78ea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    78ee:	03da      	lsls	r2, r3, #15
    78f0:	d52a      	bpl.n	7948 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    78f2:	f3bf 8f5b 	dmb	ish
    78f6:	4b26      	ldr	r3, [pc, #152]	; (7990 <rtc_nrf_isr+0xcc>)
    78f8:	e853 2f00 	ldrex	r2, [r3]
    78fc:	f022 0101 	bic.w	r1, r2, #1
    7900:	e843 1000 	strex	r0, r1, [r3]
    7904:	2800      	cmp	r0, #0
    7906:	d1f7      	bne.n	78f8 <rtc_nrf_isr+0x34>
    7908:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    790c:	07d3      	lsls	r3, r2, #31
    790e:	d402      	bmi.n	7916 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7910:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7914:	b1c3      	cbz	r3, 7948 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7916:	2500      	movs	r5, #0
    7918:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    791c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    7920:	f7ff feda 	bl	76d8 <z_nrf_rtc_timer_read>
    7924:	f04f 0320 	mov.w	r3, #32
    7928:	f3ef 8211 	mrs	r2, BASEPRI
    792c:	f383 8812 	msr	BASEPRI_MAX, r3
    7930:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    7934:	4b17      	ldr	r3, [pc, #92]	; (7994 <rtc_nrf_isr+0xd0>)
    7936:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    793a:	42b0      	cmp	r0, r6
    793c:	41b9      	sbcs	r1, r7
    793e:	d206      	bcs.n	794e <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    7940:	f382 8811 	msr	BASEPRI, r2
    7944:	f3bf 8f6f 	isb	sy
}
    7948:	b003      	add	sp, #12
    794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    794e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    7952:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    7956:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    795a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    795e:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    7960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7964:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7968:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    796c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7970:	f382 8811 	msr	BASEPRI, r2
    7974:	f3bf 8f6f 	isb	sy
		if (handler) {
    7978:	2900      	cmp	r1, #0
    797a:	d0e5      	beq.n	7948 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    797c:	9000      	str	r0, [sp, #0]
    797e:	4632      	mov	r2, r6
    7980:	463b      	mov	r3, r7
    7982:	4628      	mov	r0, r5
    7984:	4788      	blx	r1
    7986:	e7df      	b.n	7948 <rtc_nrf_isr+0x84>
    7988:	40011000 	.word	0x40011000
    798c:	20001d14 	.word	0x20001d14
    7990:	20001d0c 	.word	0x20001d0c
    7994:	20000a50 	.word	0x20000a50

00007998 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    7998:	1c43      	adds	r3, r0, #1
{
    799a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    799c:	d022      	beq.n	79e4 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    799e:	2801      	cmp	r0, #1
    79a0:	dd22      	ble.n	79e8 <sys_clock_set_timeout+0x50>
    79a2:	4a12      	ldr	r2, [pc, #72]	; (79ec <sys_clock_set_timeout+0x54>)
    79a4:	4b12      	ldr	r3, [pc, #72]	; (79f0 <sys_clock_set_timeout+0x58>)
    79a6:	4290      	cmp	r0, r2
    79a8:	bfd4      	ite	le
    79aa:	4604      	movle	r4, r0
    79ac:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    79ae:	f7ff fe93 	bl	76d8 <z_nrf_rtc_timer_read>
    79b2:	4b10      	ldr	r3, [pc, #64]	; (79f4 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    79b4:	490e      	ldr	r1, [pc, #56]	; (79f0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    79b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    79ba:	1a80      	subs	r0, r0, r2
		cyc = 0;
    79bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    79c0:	bf28      	it	cs
    79c2:	2400      	movcs	r4, #0
	cyc += unannounced;
    79c4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    79c6:	428c      	cmp	r4, r1
    79c8:	bf28      	it	cs
    79ca:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    79cc:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    79ce:	490a      	ldr	r1, [pc, #40]	; (79f8 <sys_clock_set_timeout+0x60>)
    79d0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    79d2:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    79d6:	9001      	str	r0, [sp, #4]
    79d8:	f143 0300 	adc.w	r3, r3, #0
    79dc:	f7ff fe9e 	bl	771c <compare_set>
}
    79e0:	b002      	add	sp, #8
    79e2:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    79e4:	4c02      	ldr	r4, [pc, #8]	; (79f0 <sys_clock_set_timeout+0x58>)
    79e6:	e7e2      	b.n	79ae <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    79e8:	2401      	movs	r4, #1
    79ea:	e7e0      	b.n	79ae <sys_clock_set_timeout+0x16>
    79ec:	007ffffe 	.word	0x007ffffe
    79f0:	007fffff 	.word	0x007fffff
    79f4:	20000a60 	.word	0x20000a60
    79f8:	00007635 	.word	0x00007635

000079fc <sys_clock_elapsed>:
{
    79fc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    79fe:	f7ff fe6b 	bl	76d8 <z_nrf_rtc_timer_read>
    7a02:	4b02      	ldr	r3, [pc, #8]	; (7a0c <sys_clock_elapsed+0x10>)
    7a04:	681b      	ldr	r3, [r3, #0]
}
    7a06:	1ac0      	subs	r0, r0, r3
    7a08:	bd08      	pop	{r3, pc}
    7a0a:	bf00      	nop
    7a0c:	20000a60 	.word	0x20000a60

00007a10 <sys_clock_disable>:
{
    7a10:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7a12:	4c08      	ldr	r4, [pc, #32]	; (7a34 <sys_clock_disable+0x24>)
    7a14:	2301      	movs	r3, #1
    7a16:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    7a18:	2011      	movs	r0, #17
    7a1a:	f7fd f92b 	bl	4c74 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7a1e:	4b06      	ldr	r3, [pc, #24]	; (7a38 <sys_clock_disable+0x28>)
    7a20:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    7a24:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    7a28:	4b04      	ldr	r3, [pc, #16]	; (7a3c <sys_clock_disable+0x2c>)
    7a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7a2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    7a32:	bd10      	pop	{r4, pc}
    7a34:	40011000 	.word	0x40011000
    7a38:	000f0003 	.word	0x000f0003
    7a3c:	e000e100 	.word	0xe000e100

00007a40 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    7a42:	f7fb f885 	bl	2b50 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    7a46:	4b07      	ldr	r3, [pc, #28]	; (7a64 <k_sys_fatal_error_handler+0x24>)
    7a48:	9305      	str	r3, [sp, #20]
    7a4a:	2302      	movs	r3, #2
    7a4c:	9304      	str	r3, [sp, #16]
    7a4e:	4806      	ldr	r0, [pc, #24]	; (7a68 <k_sys_fatal_error_handler+0x28>)
    7a50:	2300      	movs	r3, #0
    7a52:	aa04      	add	r2, sp, #16
    7a54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a58:	f7fb f95a 	bl	2d10 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    7a5c:	2000      	movs	r0, #0
    7a5e:	f7fd fecb 	bl	57f8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    7a62:	bf00      	nop
    7a64:	0000ee50 	.word	0x0000ee50
    7a68:	0000d9c4 	.word	0x0000d9c4

00007a6c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7a6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7a70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7a74:	2a08      	cmp	r2, #8
    7a76:	d106      	bne.n	7a86 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7a78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    7a7c:	2b05      	cmp	r3, #5
    7a7e:	d802      	bhi.n	7a86 <nrf52_errata_103+0x1a>
    7a80:	4a02      	ldr	r2, [pc, #8]	; (7a8c <nrf52_errata_103+0x20>)
    7a82:	5cd0      	ldrb	r0, [r2, r3]
    7a84:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    7a86:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    7a88:	4770      	bx	lr
    7a8a:	bf00      	nop
    7a8c:	0000ee73 	.word	0x0000ee73

00007a90 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7a90:	4a02      	ldr	r2, [pc, #8]	; (7a9c <nvmc_wait+0xc>)
    7a92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7a96:	2b00      	cmp	r3, #0
    7a98:	d0fb      	beq.n	7a92 <nvmc_wait+0x2>
}
    7a9a:	4770      	bx	lr
    7a9c:	4001e000 	.word	0x4001e000

00007aa0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    7aa0:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7aa6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7aaa:	2a08      	cmp	r2, #8
    7aac:	d14e      	bne.n	7b4c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    7aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7ab2:	2100      	movs	r1, #0
    7ab4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7ab8:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    7abc:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7ac0:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    7ac4:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    7ac8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7acc:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    7ad0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7ad4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    7ad8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7adc:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    7ae0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7ae4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    7ae8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7aec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    7af0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7af4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    7af8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7afc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    7b00:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7b04:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    7b08:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7b0c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    7b10:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    7b14:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    7b18:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    7b1c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    7b20:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    7b24:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    7b28:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    7b2c:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    7b30:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    7b34:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    7b38:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    7b3c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    7b40:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    7b44:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    7b48:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    7b4c:	f7ff ff8e 	bl	7a6c <nrf52_errata_103>
    7b50:	b118      	cbz	r0, 7b5a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    7b52:	4b3a      	ldr	r3, [pc, #232]	; (7c3c <SystemInit+0x19c>)
    7b54:	4a3a      	ldr	r2, [pc, #232]	; (7c40 <SystemInit+0x1a0>)
    7b56:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    7b5a:	f7ff ff87 	bl	7a6c <nrf52_errata_103>
    7b5e:	b118      	cbz	r0, 7b68 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    7b60:	4b38      	ldr	r3, [pc, #224]	; (7c44 <SystemInit+0x1a4>)
    7b62:	22fb      	movs	r2, #251	; 0xfb
    7b64:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    7b68:	f7ff ff80 	bl	7a6c <nrf52_errata_103>
    7b6c:	b170      	cbz	r0, 7b8c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    7b6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7b76:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    7b7a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    7b7e:	f022 020f 	bic.w	r2, r2, #15
    7b82:	f003 030f 	and.w	r3, r3, #15
    7b86:	4313      	orrs	r3, r2
    7b88:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7b8c:	f7ff ff6e 	bl	7a6c <nrf52_errata_103>
    7b90:	b120      	cbz	r0, 7b9c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    7b92:	4b2d      	ldr	r3, [pc, #180]	; (7c48 <SystemInit+0x1a8>)
    7b94:	f44f 7200 	mov.w	r2, #512	; 0x200
    7b98:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7ba0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7ba4:	2b08      	cmp	r3, #8
    7ba6:	d11a      	bne.n	7bde <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7bac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7bb0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7bb2:	bf44      	itt	mi
    7bb4:	f06f 0201 	mvnmi.w	r2, #1
    7bb8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7bbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7bc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    7bc4:	2b05      	cmp	r3, #5
    7bc6:	d802      	bhi.n	7bce <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7bc8:	4a20      	ldr	r2, [pc, #128]	; (7c4c <SystemInit+0x1ac>)
    7bca:	5cd3      	ldrb	r3, [r2, r3]
    7bcc:	b13b      	cbz	r3, 7bde <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7bce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7bd2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7bda:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7bde:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7be2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7be6:	2a00      	cmp	r2, #0
    7be8:	db03      	blt.n	7bf2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7bea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7bee:	2b00      	cmp	r3, #0
    7bf0:	da22      	bge.n	7c38 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7bf2:	4917      	ldr	r1, [pc, #92]	; (7c50 <SystemInit+0x1b0>)
    7bf4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7bf6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7bfa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7bfe:	2412      	movs	r4, #18
    nvmc_wait();
    7c00:	f7ff ff46 	bl	7a90 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7c04:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    7c08:	f7ff ff42 	bl	7a90 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    7c0c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    7c10:	f7ff ff3e 	bl	7a90 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7c14:	2300      	movs	r3, #0
    7c16:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    7c1a:	f7ff ff39 	bl	7a90 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    7c1e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7c22:	490c      	ldr	r1, [pc, #48]	; (7c54 <SystemInit+0x1b4>)
    7c24:	4b0c      	ldr	r3, [pc, #48]	; (7c58 <SystemInit+0x1b8>)
    7c26:	68ca      	ldr	r2, [r1, #12]
    7c28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7c2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7c2e:	60cb      	str	r3, [r1, #12]
    7c30:	f3bf 8f4f 	dsb	sy
    __NOP();
    7c34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7c36:	e7fd      	b.n	7c34 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    7c38:	bd10      	pop	{r4, pc}
    7c3a:	bf00      	nop
    7c3c:	40005000 	.word	0x40005000
    7c40:	00038148 	.word	0x00038148
    7c44:	4000f000 	.word	0x4000f000
    7c48:	40029000 	.word	0x40029000
    7c4c:	0000ee6d 	.word	0x0000ee6d
    7c50:	4001e000 	.word	0x4001e000
    7c54:	e000ed00 	.word	0xe000ed00
    7c58:	05fa0004 	.word	0x05fa0004

00007c5c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    7c5c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    7c5e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    7c60:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7c62:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    7c66:	fab2 f382 	clz	r3, r2
    7c6a:	f1c3 031f 	rsb	r3, r3, #31
    7c6e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    7c70:	fa05 f403 	lsl.w	r4, r5, r3
    7c74:	ea22 0404 	bic.w	r4, r2, r4
    7c78:	e850 6f00 	ldrex	r6, [r0]
    7c7c:	4296      	cmp	r6, r2
    7c7e:	d104      	bne.n	7c8a <nrfx_flag32_alloc+0x2e>
    7c80:	e840 4c00 	strex	ip, r4, [r0]
    7c84:	f1bc 0f00 	cmp.w	ip, #0
    7c88:	d1f6      	bne.n	7c78 <nrfx_flag32_alloc+0x1c>
    7c8a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7c8e:	d1e7      	bne.n	7c60 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    7c90:	4801      	ldr	r0, [pc, #4]	; (7c98 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    7c92:	700b      	strb	r3, [r1, #0]
}
    7c94:	bd70      	pop	{r4, r5, r6, pc}
    7c96:	bf00      	nop
    7c98:	0bad0000 	.word	0x0bad0000

00007c9c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    7c9c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    7c9e:	6803      	ldr	r3, [r0, #0]
    7ca0:	40cb      	lsrs	r3, r1
    7ca2:	07db      	lsls	r3, r3, #31
    7ca4:	d414      	bmi.n	7cd0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    7ca6:	2301      	movs	r3, #1
    7ca8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    7caa:	6802      	ldr	r2, [r0, #0]
    7cac:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    7cb0:	ea43 0102 	orr.w	r1, r3, r2
    7cb4:	e850 4f00 	ldrex	r4, [r0]
    7cb8:	4294      	cmp	r4, r2
    7cba:	d104      	bne.n	7cc6 <nrfx_flag32_free+0x2a>
    7cbc:	e840 1c00 	strex	ip, r1, [r0]
    7cc0:	f1bc 0f00 	cmp.w	ip, #0
    7cc4:	d1f6      	bne.n	7cb4 <nrfx_flag32_free+0x18>
    7cc6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7cca:	d1ee      	bne.n	7caa <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    7ccc:	4801      	ldr	r0, [pc, #4]	; (7cd4 <nrfx_flag32_free+0x38>)
}
    7cce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7cd0:	4801      	ldr	r0, [pc, #4]	; (7cd8 <nrfx_flag32_free+0x3c>)
    7cd2:	e7fc      	b.n	7cce <nrfx_flag32_free+0x32>
    7cd4:	0bad0000 	.word	0x0bad0000
    7cd8:	0bad0004 	.word	0x0bad0004

00007cdc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    7cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    7cde:	4604      	mov	r4, r0
    7ce0:	b118      	cbz	r0, 7cea <clock_stop+0xe>
    7ce2:	2801      	cmp	r0, #1
    7ce4:	d022      	beq.n	7d2c <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    7ce6:	b003      	add	sp, #12
    7ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    7cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7cee:	2202      	movs	r2, #2
    7cf0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7cf4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    7cf8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7cfc:	2201      	movs	r2, #1
    7cfe:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7d00:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7d02:	2301      	movs	r3, #1
    7d04:	f88d 3007 	strb.w	r3, [sp, #7]
    7d08:	f242 7510 	movw	r5, #10000	; 0x2710
    7d0c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    7d10:	b1cc      	cbz	r4, 7d46 <clock_stop+0x6a>
    7d12:	2c01      	cmp	r4, #1
    7d14:	d1e7      	bne.n	7ce6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    7d16:	b3c7      	cbz	r7, 7d8a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7d18:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7d1c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7d20:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7d22:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7d26:	03da      	lsls	r2, r3, #15
    7d28:	d521      	bpl.n	7d6e <clock_stop+0x92>
    7d2a:	e016      	b.n	7d5a <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    7d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d30:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    7d32:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7d36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7d3a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7d3e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7d40:	f10d 0707 	add.w	r7, sp, #7
    7d44:	e7dd      	b.n	7d02 <clock_stop+0x26>
            if (p_clk_src != NULL)
    7d46:	b1b7      	cbz	r7, 7d76 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7d48:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7d4c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7d50:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7d52:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7d56:	03d8      	lsls	r0, r3, #15
    7d58:	d5c5      	bpl.n	7ce6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7d5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7d5e:	2801      	cmp	r0, #1
    7d60:	d103      	bne.n	7d6a <clock_stop+0x8e>
    7d62:	f004 ff67 	bl	cc34 <nrfx_busy_wait>
    7d66:	3d01      	subs	r5, #1
    7d68:	d1d2      	bne.n	7d10 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7d6a:	2c01      	cmp	r4, #1
    7d6c:	d1bb      	bne.n	7ce6 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    7d6e:	4b0c      	ldr	r3, [pc, #48]	; (7da0 <clock_stop+0xc4>)
    7d70:	2200      	movs	r2, #0
    7d72:	715a      	strb	r2, [r3, #5]
    7d74:	e7b7      	b.n	7ce6 <clock_stop+0xa>
    7d76:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7d7a:	03d9      	lsls	r1, r3, #15
    7d7c:	d5b3      	bpl.n	7ce6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7d7e:	2001      	movs	r0, #1
    7d80:	f004 ff58 	bl	cc34 <nrfx_busy_wait>
    7d84:	3d01      	subs	r5, #1
    7d86:	d1f6      	bne.n	7d76 <clock_stop+0x9a>
    7d88:	e7ad      	b.n	7ce6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7d8a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7d8e:	03db      	lsls	r3, r3, #15
    7d90:	d5ed      	bpl.n	7d6e <clock_stop+0x92>
    7d92:	2001      	movs	r0, #1
    7d94:	f004 ff4e 	bl	cc34 <nrfx_busy_wait>
    7d98:	3d01      	subs	r5, #1
    7d9a:	d1f6      	bne.n	7d8a <clock_stop+0xae>
    7d9c:	e7e7      	b.n	7d6e <clock_stop+0x92>
    7d9e:	bf00      	nop
    7da0:	20001d18 	.word	0x20001d18

00007da4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7da4:	4b04      	ldr	r3, [pc, #16]	; (7db8 <nrfx_clock_init+0x14>)
    7da6:	791a      	ldrb	r2, [r3, #4]
    7da8:	b922      	cbnz	r2, 7db4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    7daa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    7dac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    7dae:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7db0:	4802      	ldr	r0, [pc, #8]	; (7dbc <nrfx_clock_init+0x18>)
    7db2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7db4:	4802      	ldr	r0, [pc, #8]	; (7dc0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7db6:	4770      	bx	lr
    7db8:	20001d18 	.word	0x20001d18
    7dbc:	0bad0000 	.word	0x0bad0000
    7dc0:	0bad000c 	.word	0x0bad000c

00007dc4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7dc4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7dc6:	2000      	movs	r0, #0
    7dc8:	f7fc ff68 	bl	4c9c <arch_irq_is_enabled>
    7dcc:	b908      	cbnz	r0, 7dd2 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7dce:	f7fc ff43 	bl	4c58 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7dd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7dd6:	2200      	movs	r2, #0
    7dd8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    7ddc:	4b01      	ldr	r3, [pc, #4]	; (7de4 <nrfx_clock_enable+0x20>)
    7dde:	2201      	movs	r2, #1
    7de0:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7de2:	bd08      	pop	{r3, pc}
    7de4:	200021e2 	.word	0x200021e2

00007de8 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7de8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7dee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7df2:	b16a      	cbz	r2, 7e10 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7df4:	2200      	movs	r2, #0
    7df6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7dfa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    7dfe:	2201      	movs	r2, #1
    7e00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    7e04:	4b11      	ldr	r3, [pc, #68]	; (7e4c <nrfx_clock_irq_handler+0x64>)
    7e06:	7958      	ldrb	r0, [r3, #5]
    7e08:	b910      	cbnz	r0, 7e10 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    7e0a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7e0c:	681b      	ldr	r3, [r3, #0]
    7e0e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7e14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7e18:	b172      	cbz	r2, 7e38 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7e1a:	2200      	movs	r2, #0
    7e1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7e20:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7e24:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7e28:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7e2c:	0792      	lsls	r2, r2, #30
    7e2e:	d104      	bne.n	7e3a <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7e30:	2201      	movs	r2, #1
    7e32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7e36:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7e38:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    7e3a:	2202      	movs	r2, #2
    7e3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7e40:	4b02      	ldr	r3, [pc, #8]	; (7e4c <nrfx_clock_irq_handler+0x64>)
}
    7e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	2001      	movs	r0, #1
    7e4a:	4718      	bx	r3
    7e4c:	20001d18 	.word	0x20001d18

00007e50 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    7e50:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    7e52:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7e56:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    7e58:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    7e5a:	6002      	str	r2, [r0, #0]
}
    7e5c:	4802      	ldr	r0, [pc, #8]	; (7e68 <nrf_gpio_pin_port_decode+0x18>)
    7e5e:	bf18      	it	ne
    7e60:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7e64:	4770      	bx	lr
    7e66:	bf00      	nop
    7e68:	50000300 	.word	0x50000300

00007e6c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7e6c:	4b03      	ldr	r3, [pc, #12]	; (7e7c <pin_in_use_by_te+0x10>)
    7e6e:	3008      	adds	r0, #8
    7e70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7e74:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7e78:	4770      	bx	lr
    7e7a:	bf00      	nop
    7e7c:	20000168 	.word	0x20000168

00007e80 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7e80:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7e82:	f100 0308 	add.w	r3, r0, #8
    7e86:	4c0c      	ldr	r4, [pc, #48]	; (7eb8 <call_handler+0x38>)
    7e88:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    7e8c:	05da      	lsls	r2, r3, #23
{
    7e8e:	4605      	mov	r5, r0
    7e90:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7e92:	d507      	bpl.n	7ea4 <call_handler+0x24>
    7e94:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7e98:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    7e9c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    7ea0:	6852      	ldr	r2, [r2, #4]
    7ea2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7ea4:	68a3      	ldr	r3, [r4, #8]
    7ea6:	b12b      	cbz	r3, 7eb4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7ea8:	68e2      	ldr	r2, [r4, #12]
    7eaa:	4631      	mov	r1, r6
    7eac:	4628      	mov	r0, r5
    }
}
    7eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7eb2:	4718      	bx	r3
}
    7eb4:	bd70      	pop	{r4, r5, r6, pc}
    7eb6:	bf00      	nop
    7eb8:	20000168 	.word	0x20000168

00007ebc <release_handler>:
{
    7ebc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7ebe:	4a12      	ldr	r2, [pc, #72]	; (7f08 <release_handler+0x4c>)
    7ec0:	3008      	adds	r0, #8
    7ec2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    7ec6:	05d9      	lsls	r1, r3, #23
    7ec8:	d51b      	bpl.n	7f02 <release_handler+0x46>
    7eca:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7ece:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7ed2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7ed6:	f102 040e 	add.w	r4, r2, #14
    7eda:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7edc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
    7ee4:	d003      	beq.n	7eee <release_handler+0x32>
    7ee6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7eea:	4299      	cmp	r1, r3
    7eec:	d009      	beq.n	7f02 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7eee:	3001      	adds	r0, #1
    7ef0:	2830      	cmp	r0, #48	; 0x30
    7ef2:	d1f3      	bne.n	7edc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    7ef4:	2300      	movs	r3, #0
    7ef6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7efa:	4804      	ldr	r0, [pc, #16]	; (7f0c <release_handler+0x50>)
}
    7efc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7efe:	f7ff becd 	b.w	7c9c <nrfx_flag32_free>
}
    7f02:	bc10      	pop	{r4}
    7f04:	4770      	bx	lr
    7f06:	bf00      	nop
    7f08:	20000168 	.word	0x20000168
    7f0c:	200001dc 	.word	0x200001dc

00007f10 <pin_handler_trigger_uninit>:
{
    7f10:	b538      	push	{r3, r4, r5, lr}
    7f12:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7f14:	f7ff ffaa 	bl	7e6c <pin_in_use_by_te>
    7f18:	4c09      	ldr	r4, [pc, #36]	; (7f40 <pin_handler_trigger_uninit+0x30>)
    7f1a:	f102 0508 	add.w	r5, r2, #8
    7f1e:	b140      	cbz	r0, 7f32 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7f20:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7f24:	4907      	ldr	r1, [pc, #28]	; (7f44 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7f26:	0b5b      	lsrs	r3, r3, #13
    7f28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7f2c:	2000      	movs	r0, #0
    7f2e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    7f32:	4610      	mov	r0, r2
    7f34:	f7ff ffc2 	bl	7ebc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7f38:	2300      	movs	r3, #0
    7f3a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    7f3e:	bd38      	pop	{r3, r4, r5, pc}
    7f40:	20000168 	.word	0x20000168
    7f44:	40006000 	.word	0x40006000

00007f48 <nrfx_gpiote_input_configure>:
{
    7f48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7f4c:	4604      	mov	r4, r0
    7f4e:	4616      	mov	r6, r2
    7f50:	461d      	mov	r5, r3
    if (p_input_config)
    7f52:	b301      	cbz	r1, 7f96 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7f54:	4f4e      	ldr	r7, [pc, #312]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7f56:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7f5a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    7f5e:	079b      	lsls	r3, r3, #30
    7f60:	d502      	bpl.n	7f68 <nrfx_gpiote_input_configure+0x20>
    7f62:	f7ff ff83 	bl	7e6c <pin_in_use_by_te>
    7f66:	bb10      	cbnz	r0, 7fae <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7f68:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7f6a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7f6e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    7f72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7f76:	f10d 020f 	add.w	r2, sp, #15
    7f7a:	460b      	mov	r3, r1
    7f7c:	4620      	mov	r0, r4
    7f7e:	f10d 010e 	add.w	r1, sp, #14
    7f82:	f004 fe97 	bl	ccb4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7f86:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    7f8a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7f8e:	f043 0301 	orr.w	r3, r3, #1
    7f92:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    7f96:	b346      	cbz	r6, 7fea <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7f98:	4b3d      	ldr	r3, [pc, #244]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7f9a:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7f9e:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7fa0:	f104 0708 	add.w	r7, r4, #8
    7fa4:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    7fa8:	0788      	lsls	r0, r1, #30
    7faa:	d502      	bpl.n	7fb2 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    7fac:	b1aa      	cbz	r2, 7fda <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    7fae:	4839      	ldr	r0, [pc, #228]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7fb0:	e01d      	b.n	7fee <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7fb2:	f021 0120 	bic.w	r1, r1, #32
    7fb6:	04c9      	lsls	r1, r1, #19
    7fb8:	0cc9      	lsrs	r1, r1, #19
    7fba:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    7fbe:	b162      	cbz	r2, 7fda <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    7fc0:	f1bc 0f03 	cmp.w	ip, #3
    7fc4:	d8f3      	bhi.n	7fae <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7fc6:	6872      	ldr	r2, [r6, #4]
    7fc8:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7fca:	f1bc 0f00 	cmp.w	ip, #0
    7fce:	d111      	bne.n	7ff4 <nrfx_gpiote_input_configure+0xac>
    7fd0:	4a31      	ldr	r2, [pc, #196]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fd2:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    7fd6:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7fda:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    7fde:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7fe2:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    7fe6:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    7fea:	bb45      	cbnz	r5, 803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
        err = NRFX_SUCCESS;
    7fec:	482b      	ldr	r0, [pc, #172]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
}
    7fee:	b004      	add	sp, #16
    7ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7ff4:	00b2      	lsls	r2, r6, #2
    7ff6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7ffa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7ffe:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    8002:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8006:	f020 0003 	bic.w	r0, r0, #3
    800a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    800e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8012:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    8016:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    801a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    801e:	0220      	lsls	r0, r4, #8
    8020:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8024:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    8028:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    802c:	ea40 000e 	orr.w	r0, r0, lr
    8030:	f041 0120 	orr.w	r1, r1, #32
    8034:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    8038:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    803c:	e7cd      	b.n	7fda <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    803e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8042:	4620      	mov	r0, r4
    8044:	f7ff ff3a 	bl	7ebc <release_handler>
    if (!handler)
    8048:	2e00      	cmp	r6, #0
    804a:	d0cf      	beq.n	7fec <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    804c:	4d10      	ldr	r5, [pc, #64]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    804e:	e9d5 2300 	ldrd	r2, r3, [r5]
    8052:	4296      	cmp	r6, r2
    8054:	d101      	bne.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    8056:	429f      	cmp	r7, r3
    8058:	d018      	beq.n	808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    805a:	4811      	ldr	r0, [pc, #68]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    805c:	f10d 010f 	add.w	r1, sp, #15
    8060:	f7ff fdfc 	bl	7c5c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8064:	4b0d      	ldr	r3, [pc, #52]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    8066:	4298      	cmp	r0, r3
    8068:	d1c1      	bne.n	7fee <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    806a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    806e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8072:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8076:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8078:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    807a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    807e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8086:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    808a:	e7af      	b.n	7fec <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    808c:	2200      	movs	r2, #0
    808e:	e7ee      	b.n	806e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    8090:	20000168 	.word	0x20000168
    8094:	0bad0004 	.word	0x0bad0004
    8098:	40006000 	.word	0x40006000
    809c:	0bad0000 	.word	0x0bad0000
    80a0:	200001dc 	.word	0x200001dc

000080a4 <nrfx_gpiote_output_configure>:
{
    80a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80a6:	4604      	mov	r4, r0
    80a8:	b085      	sub	sp, #20
    80aa:	4615      	mov	r5, r2
    if (p_config)
    80ac:	b319      	cbz	r1, 80f6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    80ae:	4e33      	ldr	r6, [pc, #204]	; (817c <nrfx_gpiote_output_configure+0xd8>)
    80b0:	f100 0708 	add.w	r7, r0, #8
    80b4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    80b8:	0793      	lsls	r3, r2, #30
    80ba:	d403      	bmi.n	80c4 <nrfx_gpiote_output_configure+0x20>
    80bc:	f7ff fed6 	bl	7e6c <pin_in_use_by_te>
    80c0:	2800      	cmp	r0, #0
    80c2:	d158      	bne.n	8176 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    80c4:	f012 0f1c 	tst.w	r2, #28
    80c8:	d002      	beq.n	80d0 <nrfx_gpiote_output_configure+0x2c>
    80ca:	784b      	ldrb	r3, [r1, #1]
    80cc:	2b01      	cmp	r3, #1
    80ce:	d052      	beq.n	8176 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    80d0:	2301      	movs	r3, #1
    80d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    80d6:	2300      	movs	r3, #0
    80d8:	e9cd 1300 	strd	r1, r3, [sp]
    80dc:	1c4a      	adds	r2, r1, #1
    80de:	1c8b      	adds	r3, r1, #2
    80e0:	4620      	mov	r0, r4
    80e2:	f10d 010f 	add.w	r1, sp, #15
    80e6:	f004 fde5 	bl	ccb4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    80ea:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    80ee:	f043 0303 	orr.w	r3, r3, #3
    80f2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    80f6:	b915      	cbnz	r5, 80fe <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    80f8:	4821      	ldr	r0, [pc, #132]	; (8180 <nrfx_gpiote_output_configure+0xdc>)
}
    80fa:	b005      	add	sp, #20
    80fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    80fe:	4e1f      	ldr	r6, [pc, #124]	; (817c <nrfx_gpiote_output_configure+0xd8>)
    8100:	f104 0708 	add.w	r7, r4, #8
    8104:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    8108:	0783      	lsls	r3, r0, #30
    810a:	d534      	bpl.n	8176 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    810c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    8110:	4661      	mov	r1, ip
    8112:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8114:	f020 0020 	bic.w	r0, r0, #32
    8118:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    811c:	04c0      	lsls	r0, r0, #19
    811e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    8122:	0cc0      	lsrs	r0, r0, #19
    8124:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8128:	2300      	movs	r3, #0
    812a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    812e:	786a      	ldrb	r2, [r5, #1]
    8130:	2a00      	cmp	r2, #0
    8132:	d0e1      	beq.n	80f8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    8134:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    8138:	78ad      	ldrb	r5, [r5, #2]
    813a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    813e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8142:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8146:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    814a:	0223      	lsls	r3, r4, #8
    814c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8150:	0412      	lsls	r2, r2, #16
    8152:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8156:	ea43 030e 	orr.w	r3, r3, lr
    815a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    815c:	052a      	lsls	r2, r5, #20
    815e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8162:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8166:	4313      	orrs	r3, r2
    8168:	f040 0020 	orr.w	r0, r0, #32
    816c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8170:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    8174:	e7c0      	b.n	80f8 <nrfx_gpiote_output_configure+0x54>
{
    8176:	4803      	ldr	r0, [pc, #12]	; (8184 <nrfx_gpiote_output_configure+0xe0>)
    8178:	e7bf      	b.n	80fa <nrfx_gpiote_output_configure+0x56>
    817a:	bf00      	nop
    817c:	20000168 	.word	0x20000168
    8180:	0bad0000 	.word	0x0bad0000
    8184:	0bad0004 	.word	0x0bad0004

00008188 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8188:	4b01      	ldr	r3, [pc, #4]	; (8190 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    818a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    818e:	4770      	bx	lr
    8190:	20000168 	.word	0x20000168

00008194 <nrfx_gpiote_channel_get>:
{
    8194:	b508      	push	{r3, lr}
    8196:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8198:	f7ff fe68 	bl	7e6c <pin_in_use_by_te>
    819c:	b138      	cbz	r0, 81ae <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    819e:	4b05      	ldr	r3, [pc, #20]	; (81b4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    81a0:	4805      	ldr	r0, [pc, #20]	; (81b8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    81a2:	3208      	adds	r2, #8
    81a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    81a8:	0b5b      	lsrs	r3, r3, #13
    81aa:	700b      	strb	r3, [r1, #0]
}
    81ac:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    81ae:	4803      	ldr	r0, [pc, #12]	; (81bc <nrfx_gpiote_channel_get+0x28>)
    81b0:	e7fc      	b.n	81ac <nrfx_gpiote_channel_get+0x18>
    81b2:	bf00      	nop
    81b4:	20000168 	.word	0x20000168
    81b8:	0bad0000 	.word	0x0bad0000
    81bc:	0bad0004 	.word	0x0bad0004

000081c0 <nrfx_gpiote_init>:
{
    81c0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    81c2:	4c0f      	ldr	r4, [pc, #60]	; (8200 <nrfx_gpiote_init+0x40>)
    81c4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    81c8:	b9bd      	cbnz	r5, 81fa <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    81ca:	2260      	movs	r2, #96	; 0x60
    81cc:	4629      	mov	r1, r5
    81ce:	f104 0010 	add.w	r0, r4, #16
    81d2:	f004 fb24 	bl	c81e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    81d6:	2006      	movs	r0, #6
    81d8:	f7fc fd3e 	bl	4c58 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    81dc:	4b09      	ldr	r3, [pc, #36]	; (8204 <nrfx_gpiote_init+0x44>)
    return err_code;
    81de:	480a      	ldr	r0, [pc, #40]	; (8208 <nrfx_gpiote_init+0x48>)
    81e0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    81e4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    81e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    81ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    81f0:	2301      	movs	r3, #1
    81f2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    81f6:	6763      	str	r3, [r4, #116]	; 0x74
}
    81f8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    81fa:	4804      	ldr	r0, [pc, #16]	; (820c <nrfx_gpiote_init+0x4c>)
    81fc:	e7fc      	b.n	81f8 <nrfx_gpiote_init+0x38>
    81fe:	bf00      	nop
    8200:	20000168 	.word	0x20000168
    8204:	40006000 	.word	0x40006000
    8208:	0bad0000 	.word	0x0bad0000
    820c:	0bad0005 	.word	0x0bad0005

00008210 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8210:	4b03      	ldr	r3, [pc, #12]	; (8220 <nrfx_gpiote_is_init+0x10>)
    8212:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    8216:	3800      	subs	r0, #0
    8218:	bf18      	it	ne
    821a:	2001      	movne	r0, #1
    821c:	4770      	bx	lr
    821e:	bf00      	nop
    8220:	20000168 	.word	0x20000168

00008224 <nrfx_gpiote_channel_free>:
{
    8224:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8226:	4801      	ldr	r0, [pc, #4]	; (822c <nrfx_gpiote_channel_free+0x8>)
    8228:	f7ff bd38 	b.w	7c9c <nrfx_flag32_free>
    822c:	200001d8 	.word	0x200001d8

00008230 <nrfx_gpiote_channel_alloc>:
{
    8230:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8232:	4801      	ldr	r0, [pc, #4]	; (8238 <nrfx_gpiote_channel_alloc+0x8>)
    8234:	f7ff bd12 	b.w	7c5c <nrfx_flag32_alloc>
    8238:	200001d8 	.word	0x200001d8

0000823c <nrfx_gpiote_trigger_enable>:
{
    823c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    823e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8240:	f7ff fe14 	bl	7e6c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8244:	f104 0208 	add.w	r2, r4, #8
    8248:	4b1e      	ldr	r3, [pc, #120]	; (82c4 <nrfx_gpiote_trigger_enable+0x88>)
    824a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    824e:	b1e8      	cbz	r0, 828c <nrfx_gpiote_trigger_enable+0x50>
    8250:	f013 0502 	ands.w	r5, r3, #2
    8254:	d11a      	bne.n	828c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8256:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8258:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    825a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    825e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    8262:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8266:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    826a:	6005      	str	r5, [r0, #0]
    826c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    826e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8272:	f040 0001 	orr.w	r0, r0, #1
    8276:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    827a:	b129      	cbz	r1, 8288 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    827c:	2201      	movs	r2, #1
    827e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    8282:	4a11      	ldr	r2, [pc, #68]	; (82c8 <nrfx_gpiote_trigger_enable+0x8c>)
    8284:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8288:	b003      	add	sp, #12
    828a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    828c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    8290:	2b04      	cmp	r3, #4
    8292:	d012      	beq.n	82ba <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8294:	2b05      	cmp	r3, #5
    8296:	d012      	beq.n	82be <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8298:	a801      	add	r0, sp, #4
    829a:	9401      	str	r4, [sp, #4]
    829c:	f7ff fdd8 	bl	7e50 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    82a0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    82a2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    82a6:	40d9      	lsrs	r1, r3
    82a8:	f001 0101 	and.w	r1, r1, #1
    82ac:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    82ae:	4620      	mov	r0, r4
}
    82b0:	b003      	add	sp, #12
    82b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    82b6:	f004 bd46 	b.w	cd46 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    82ba:	2103      	movs	r1, #3
    82bc:	e7f7      	b.n	82ae <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    82be:	2102      	movs	r1, #2
    82c0:	e7f5      	b.n	82ae <nrfx_gpiote_trigger_enable+0x72>
    82c2:	bf00      	nop
    82c4:	20000168 	.word	0x20000168
    82c8:	40006000 	.word	0x40006000

000082cc <nrfx_gpiote_trigger_disable>:
{
    82cc:	b508      	push	{r3, lr}
    82ce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    82d0:	f7ff fdcc 	bl	7e6c <pin_in_use_by_te>
    82d4:	b1c0      	cbz	r0, 8308 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    82d6:	f102 0108 	add.w	r1, r2, #8
    82da:	4b0e      	ldr	r3, [pc, #56]	; (8314 <nrfx_gpiote_trigger_disable+0x48>)
    82dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    82e0:	0799      	lsls	r1, r3, #30
    82e2:	d411      	bmi.n	8308 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    82e4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    82e6:	2201      	movs	r2, #1
    82e8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    82ea:	009b      	lsls	r3, r3, #2
    82ec:	490a      	ldr	r1, [pc, #40]	; (8318 <nrfx_gpiote_trigger_disable+0x4c>)
    82ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    82f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    82f6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    82fa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    82fe:	f022 0203 	bic.w	r2, r2, #3
    8302:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    8306:	bd08      	pop	{r3, pc}
    8308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    830c:	2100      	movs	r1, #0
    830e:	4610      	mov	r0, r2
    8310:	f004 bd19 	b.w	cd46 <nrf_gpio_cfg_sense_set>
    8314:	20000168 	.word	0x20000168
    8318:	40006000 	.word	0x40006000

0000831c <nrfx_gpiote_pin_uninit>:
{
    831c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    831e:	4b0e      	ldr	r3, [pc, #56]	; (8358 <nrfx_gpiote_pin_uninit+0x3c>)
    8320:	f100 0208 	add.w	r2, r0, #8
{
    8324:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8326:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    832a:	07db      	lsls	r3, r3, #31
    832c:	d511      	bpl.n	8352 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    832e:	f7ff ffcd 	bl	82cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8332:	4620      	mov	r0, r4
    8334:	f7ff fdec 	bl	7f10 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8338:	a801      	add	r0, sp, #4
    833a:	9401      	str	r4, [sp, #4]
    833c:	f7ff fd88 	bl	7e50 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8340:	9b01      	ldr	r3, [sp, #4]
    8342:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8346:	2202      	movs	r2, #2
    8348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    834c:	4803      	ldr	r0, [pc, #12]	; (835c <nrfx_gpiote_pin_uninit+0x40>)
}
    834e:	b002      	add	sp, #8
    8350:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8352:	4803      	ldr	r0, [pc, #12]	; (8360 <nrfx_gpiote_pin_uninit+0x44>)
    8354:	e7fb      	b.n	834e <nrfx_gpiote_pin_uninit+0x32>
    8356:	bf00      	nop
    8358:	20000168 	.word	0x20000168
    835c:	0bad0000 	.word	0x0bad0000
    8360:	0bad0004 	.word	0x0bad0004

00008364 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    8364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8368:	4b68      	ldr	r3, [pc, #416]	; (850c <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    836a:	4869      	ldr	r0, [pc, #420]	; (8510 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    836c:	4969      	ldr	r1, [pc, #420]	; (8514 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    836e:	2600      	movs	r6, #0
{
    8370:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8372:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8374:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8376:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8378:	b135      	cbz	r5, 8388 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    837a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    837e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8380:	bf1e      	ittt	ne
    8382:	601c      	strne	r4, [r3, #0]
    8384:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    8386:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8388:	3304      	adds	r3, #4
    838a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    838c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8390:	d1f1      	bne.n	8376 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8392:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8510 <nrfx_gpiote_irq_handler+0x1ac>
    8396:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    839a:	2b00      	cmp	r3, #0
    839c:	f000 8099 	beq.w	84d2 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    83a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    83a4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    83a8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    83aa:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    83ae:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    83b2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    83b4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    83b8:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    83bc:	f10d 0a10 	add.w	sl, sp, #16
    83c0:	ea4f 1348 	mov.w	r3, r8, lsl #5
    83c4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    83c6:	f04f 0b01 	mov.w	fp, #1
    83ca:	e049      	b.n	8460 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    83cc:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    83ce:	4a52      	ldr	r2, [pc, #328]	; (8518 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    83d0:	fa94 f4a4 	rbit	r4, r4
    83d4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    83d8:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    83da:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    83dc:	f104 0308 	add.w	r3, r4, #8
    83e0:	9403      	str	r4, [sp, #12]
    83e2:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    83e6:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    83ea:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    83ee:	fa0b f202 	lsl.w	r2, fp, r2
    83f2:	ea23 0302 	bic.w	r3, r3, r2
    83f6:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    83fa:	a803      	add	r0, sp, #12
    83fc:	f7ff fd28 	bl	7e50 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8400:	9b03      	ldr	r3, [sp, #12]
    8402:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8406:	08b9      	lsrs	r1, r7, #2
    8408:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    840c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    8410:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8412:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8414:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    8418:	d52c      	bpl.n	8474 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    841a:	4620      	mov	r0, r4
    841c:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    841e:	b2dd      	uxtb	r5, r3
    8420:	f7ff fd2e 	bl	7e80 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8424:	a803      	add	r0, sp, #12
    8426:	9403      	str	r4, [sp, #12]
    8428:	f7ff fd12 	bl	7e50 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    842c:	9b03      	ldr	r3, [sp, #12]
    842e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8432:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8436:	f3c3 4301 	ubfx	r3, r3, #16, #2
    843a:	429d      	cmp	r5, r3
    843c:	d107      	bne.n	844e <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    843e:	2100      	movs	r1, #0
    8440:	4620      	mov	r0, r4
    8442:	f004 fc80 	bl	cd46 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    8446:	4629      	mov	r1, r5
    8448:	4620      	mov	r0, r4
    844a:	f004 fc7c 	bl	cd46 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    844e:	a803      	add	r0, sp, #12
    8450:	9403      	str	r4, [sp, #12]
    8452:	f7ff fcfd 	bl	7e50 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    8456:	9b03      	ldr	r3, [sp, #12]
    8458:	fa0b f303 	lsl.w	r3, fp, r3
    845c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    8460:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    8464:	2c00      	cmp	r4, #0
    8466:	d1b1      	bne.n	83cc <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    8468:	f1b8 0f00 	cmp.w	r8, #0
    846c:	d11d      	bne.n	84aa <nrfx_gpiote_irq_handler+0x146>
    846e:	f04f 0801 	mov.w	r8, #1
    8472:	e7a5      	b.n	83c0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8474:	2b02      	cmp	r3, #2
    8476:	d10c      	bne.n	8492 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8478:	2103      	movs	r1, #3
    847a:	4620      	mov	r0, r4
    847c:	f004 fc63 	bl	cd46 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8480:	f005 0305 	and.w	r3, r5, #5
    8484:	2b01      	cmp	r3, #1
    8486:	d1e2      	bne.n	844e <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    8488:	4639      	mov	r1, r7
    848a:	4620      	mov	r0, r4
    848c:	f7ff fcf8 	bl	7e80 <call_handler>
    8490:	e7dd      	b.n	844e <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8492:	2102      	movs	r1, #2
    8494:	4620      	mov	r0, r4
    8496:	9301      	str	r3, [sp, #4]
    8498:	f004 fc55 	bl	cd46 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    849c:	2d03      	cmp	r5, #3
    849e:	d0f3      	beq.n	8488 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    84a0:	9b01      	ldr	r3, [sp, #4]
    84a2:	2b03      	cmp	r3, #3
    84a4:	d1d3      	bne.n	844e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    84a6:	2d02      	cmp	r5, #2
    84a8:	e7ed      	b.n	8486 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    84aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    84ae:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    84b2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    84b6:	4919      	ldr	r1, [pc, #100]	; (851c <nrfx_gpiote_irq_handler+0x1b8>)
    84b8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    84bc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    84be:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    84c2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    84c6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    84c8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    84ca:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    84ce:	f47f af73 	bne.w	83b8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    84d2:	2401      	movs	r4, #1
    while (mask)
    84d4:	b916      	cbnz	r6, 84dc <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    84d6:	b007      	add	sp, #28
    84d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    84dc:	fa96 f3a6 	rbit	r3, r6
    84e0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    84e4:	fa04 f203 	lsl.w	r2, r4, r3
    84e8:	009b      	lsls	r3, r3, #2
    84ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    84ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    84f2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    84f6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    84fa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    84fe:	f3c0 2005 	ubfx	r0, r0, #8, #6
    8502:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8506:	f7ff fcbb 	bl	7e80 <call_handler>
    850a:	e7e3      	b.n	84d4 <nrfx_gpiote_irq_handler+0x170>
    850c:	40006100 	.word	0x40006100
    8510:	40006000 	.word	0x40006000
    8514:	40006120 	.word	0x40006120
    8518:	20000168 	.word	0x20000168
    851c:	50000300 	.word	0x50000300

00008520 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8520:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8522:	4c18      	ldr	r4, [pc, #96]	; (8584 <nrfx_power_init+0x64>)
    8524:	7823      	ldrb	r3, [r4, #0]
    8526:	bb53      	cbnz	r3, 857e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8528:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    852a:	f3c2 0340 	ubfx	r3, r2, #1, #1
    852e:	0792      	lsls	r2, r2, #30
    8530:	d512      	bpl.n	8558 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8532:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8536:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    853a:	2a08      	cmp	r2, #8
    853c:	d10b      	bne.n	8556 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    853e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8542:	2b05      	cmp	r3, #5
    8544:	d807      	bhi.n	8556 <nrfx_power_init+0x36>
    8546:	4a10      	ldr	r2, [pc, #64]	; (8588 <nrfx_power_init+0x68>)
    8548:	5cd3      	ldrb	r3, [r2, r3]
    854a:	b123      	cbz	r3, 8556 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    854c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8550:	2201      	movs	r2, #1
    8552:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8556:	2301      	movs	r3, #1
    8558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    855c:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    8560:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8562:	f003 0301 	and.w	r3, r3, #1
    8566:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    856a:	2000      	movs	r0, #0
    856c:	f7fc fb96 	bl	4c9c <arch_irq_is_enabled>
    8570:	b908      	cbnz	r0, 8576 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8572:	f7fc fb71 	bl	4c58 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    8576:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    8578:	4804      	ldr	r0, [pc, #16]	; (858c <nrfx_power_init+0x6c>)
    m_initialized = true;
    857a:	7023      	strb	r3, [r4, #0]
}
    857c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    857e:	4804      	ldr	r0, [pc, #16]	; (8590 <nrfx_power_init+0x70>)
    8580:	e7fc      	b.n	857c <nrfx_power_init+0x5c>
    8582:	bf00      	nop
    8584:	200021e3 	.word	0x200021e3
    8588:	0000ee90 	.word	0x0000ee90
    858c:	0bad0000 	.word	0x0bad0000
    8590:	0bad000c 	.word	0x0bad000c

00008594 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    8594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8598:	f44f 7260 	mov.w	r2, #896	; 0x380
    859c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    85a0:	4b01      	ldr	r3, [pc, #4]	; (85a8 <nrfx_power_usbevt_uninit+0x14>)
    85a2:	2200      	movs	r2, #0
    85a4:	601a      	str	r2, [r3, #0]
}
    85a6:	4770      	bx	lr
    85a8:	20001d20 	.word	0x20001d20

000085ac <nrfx_power_usbevt_init>:
{
    85ac:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    85ae:	f7ff fff1 	bl	8594 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    85b2:	6803      	ldr	r3, [r0, #0]
    85b4:	b10b      	cbz	r3, 85ba <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    85b6:	4a01      	ldr	r2, [pc, #4]	; (85bc <nrfx_power_usbevt_init+0x10>)
    85b8:	6013      	str	r3, [r2, #0]
}
    85ba:	bd08      	pop	{r3, pc}
    85bc:	20001d20 	.word	0x20001d20

000085c0 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    85c0:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    85c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    85c6:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    85ca:	0762      	lsls	r2, r4, #29
    85cc:	d507      	bpl.n	85de <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    85ce:	f44f 7084 	mov.w	r0, #264	; 0x108
    85d2:	f004 fbc7 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    85d6:	b110      	cbz	r0, 85de <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    85d8:	4b1e      	ldr	r3, [pc, #120]	; (8654 <nrfx_power_irq_handler+0x94>)
    85da:	681b      	ldr	r3, [r3, #0]
    85dc:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    85de:	06a3      	lsls	r3, r4, #26
    85e0:	d508      	bpl.n	85f4 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    85e2:	f44f 708a 	mov.w	r0, #276	; 0x114
    85e6:	f004 fbbd 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    85ea:	b118      	cbz	r0, 85f4 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    85ec:	4b1a      	ldr	r3, [pc, #104]	; (8658 <nrfx_power_irq_handler+0x98>)
    85ee:	2000      	movs	r0, #0
    85f0:	681b      	ldr	r3, [r3, #0]
    85f2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    85f4:	0660      	lsls	r0, r4, #25
    85f6:	d508      	bpl.n	860a <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    85f8:	f44f 708c 	mov.w	r0, #280	; 0x118
    85fc:	f004 fbb2 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8600:	b118      	cbz	r0, 860a <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8602:	4b15      	ldr	r3, [pc, #84]	; (8658 <nrfx_power_irq_handler+0x98>)
    8604:	2001      	movs	r0, #1
    8606:	681b      	ldr	r3, [r3, #0]
    8608:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    860a:	0621      	lsls	r1, r4, #24
    860c:	d508      	bpl.n	8620 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    860e:	f44f 708e 	mov.w	r0, #284	; 0x11c
    8612:	f004 fba7 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8616:	b118      	cbz	r0, 8620 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    8618:	4b10      	ldr	r3, [pc, #64]	; (865c <nrfx_power_irq_handler+0x9c>)
    861a:	2000      	movs	r0, #0
    861c:	681b      	ldr	r3, [r3, #0]
    861e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8620:	05e2      	lsls	r2, r4, #23
    8622:	d508      	bpl.n	8636 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    8624:	f44f 7090 	mov.w	r0, #288	; 0x120
    8628:	f004 fb9c 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    862c:	b118      	cbz	r0, 8636 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    862e:	4b0b      	ldr	r3, [pc, #44]	; (865c <nrfx_power_irq_handler+0x9c>)
    8630:	2001      	movs	r0, #1
    8632:	681b      	ldr	r3, [r3, #0]
    8634:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8636:	05a3      	lsls	r3, r4, #22
    8638:	d50a      	bpl.n	8650 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    863a:	f44f 7092 	mov.w	r0, #292	; 0x124
    863e:	f004 fb91 	bl	cd64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8642:	b128      	cbz	r0, 8650 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8644:	4b05      	ldr	r3, [pc, #20]	; (865c <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    8646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    864a:	681b      	ldr	r3, [r3, #0]
    864c:	2002      	movs	r0, #2
    864e:	4718      	bx	r3
}
    8650:	bd10      	pop	{r4, pc}
    8652:	bf00      	nop
    8654:	20001d28 	.word	0x20001d28
    8658:	20001d24 	.word	0x20001d24
    865c:	20001d20 	.word	0x20001d20

00008660 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    8660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    8664:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8666:	4d2b      	ldr	r5, [pc, #172]	; (8714 <nrfx_twim_init+0xb4>)
    8668:	f04f 0e34 	mov.w	lr, #52	; 0x34
    866c:	fb0e fe06 	mul.w	lr, lr, r6
    8670:	eb05 040e 	add.w	r4, r5, lr
    8674:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    8678:	2f00      	cmp	r7, #0
    867a:	d148      	bne.n	870e <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    867c:	f8d0 c000 	ldr.w	ip, [r0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    8680:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    8684:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    8686:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    8688:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    868c:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    8690:	7b4b      	ldrb	r3, [r1, #13]
    8692:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    8696:	7b8b      	ldrb	r3, [r1, #14]
    8698:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    869c:	b1cb      	cbz	r3, 86d2 <nrfx_twim_init+0x72>
    869e:	7bcb      	ldrb	r3, [r1, #15]
    86a0:	b92b      	cbnz	r3, 86ae <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    86a2:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    86a6:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    86aa:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    86ae:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    86b0:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
    86b4:	b122      	cbz	r2, 86c0 <nrfx_twim_init+0x60>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    86b6:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    86b8:	f340 3007 	sbfx	r0, r0, #12, #8
    86bc:	f7fc facc 	bl	4c58 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    86c0:	2334      	movs	r3, #52	; 0x34
    86c2:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    86c6:	4814      	ldr	r0, [pc, #80]	; (8718 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    86c8:	2301      	movs	r3, #1
    86ca:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    86ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    86d2:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    86d4:	4b11      	ldr	r3, [pc, #68]	; (871c <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    86d6:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    86da:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    86dc:	2c01      	cmp	r4, #1
    86de:	bf08      	it	eq
    86e0:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    86e2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
    86e6:	bf18      	it	ne
    86e8:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    86ec:	f240 6e0c 	movw	lr, #1548	; 0x60c
    86f0:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    86f4:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    86f6:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    86fa:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    86fc:	2c01      	cmp	r4, #1
    86fe:	bf18      	it	ne
    8700:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    8704:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    8708:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    870c:	e7c7      	b.n	869e <nrfx_twim_init+0x3e>
        return err_code;
    870e:	4804      	ldr	r0, [pc, #16]	; (8720 <nrfx_twim_init+0xc0>)
    8710:	e7dd      	b.n	86ce <nrfx_twim_init+0x6e>
    8712:	bf00      	nop
    8714:	20001d2c 	.word	0x20001d2c
    8718:	0bad0000 	.word	0x0bad0000
    871c:	50000300 	.word	0x50000300
    8720:	0bad0005 	.word	0x0bad0005

00008724 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    8724:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8726:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    8728:	2106      	movs	r1, #6
    872a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    872e:	4b04      	ldr	r3, [pc, #16]	; (8740 <nrfx_twim_enable+0x1c>)
    8730:	2134      	movs	r1, #52	; 0x34
    8732:	fb01 3302 	mla	r3, r1, r2, r3
    8736:	2202      	movs	r2, #2
    8738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    873c:	4770      	bx	lr
    873e:	bf00      	nop
    8740:	20001d2c 	.word	0x20001d2c

00008744 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8744:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    8746:	4b0c      	ldr	r3, [pc, #48]	; (8778 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    8748:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    874a:	2034      	movs	r0, #52	; 0x34
    874c:	fb00 3301 	mla	r3, r0, r1, r3
    8750:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    8752:	480a      	ldr	r0, [pc, #40]	; (877c <nrfx_twim_disable+0x38>)
    8754:	6099      	str	r1, [r3, #8]
    8756:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    875a:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    875e:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    8762:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    8766:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    876a:	2201      	movs	r2, #1
    876c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    8770:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    8774:	4770      	bx	lr
    8776:	bf00      	nop
    8778:	20001d2c 	.word	0x20001d2c
    877c:	019c0202 	.word	0x019c0202

00008780 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    8780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    8784:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8a74 <nrfx_twim_xfer+0x2f4>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8788:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    878c:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    878e:	2334      	movs	r3, #52	; 0x34
    8790:	fb03 c30e 	mla	r3, r3, lr, ip
{
    8794:	4617      	mov	r7, r2
    p_cb->error = false;
    8796:	2200      	movs	r2, #0
    8798:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    879c:	684b      	ldr	r3, [r1, #4]
{
    879e:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    87a0:	b14b      	cbz	r3, 87b6 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    87a2:	68cb      	ldr	r3, [r1, #12]
    87a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    87a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    87ac:	d003      	beq.n	87b6 <nrfx_twim_xfer+0x36>
        return err_code;
    87ae:	4eb2      	ldr	r6, [pc, #712]	; (8a78 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    87b0:	4630      	mov	r0, r6
    87b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    87b6:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    87b8:	4bb0      	ldr	r3, [pc, #704]	; (8a7c <nrfx_twim_xfer+0x2fc>)
    87ba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    87be:	fb06 c60e 	mla	r6, r6, lr, ip
    87c2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    87c6:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    87ca:	b123      	cbz	r3, 87d6 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    87cc:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    87ce:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    87d2:	4eab      	ldr	r6, [pc, #684]	; (8a80 <nrfx_twim_xfer+0x300>)
    87d4:	e7ec      	b.n	87b0 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    87d6:	f017 0f14 	tst.w	r7, #20
    87da:	bf0c      	ite	eq
    87dc:	2301      	moveq	r3, #1
    87de:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    87e0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    87e4:	46a9      	mov	r9, r5
    87e6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    87ea:	f106 080c 	add.w	r8, r6, #12
    87ee:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    87f2:	f8d9 3000 	ldr.w	r3, [r9]
    87f6:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    87fa:	f3c7 1300 	ubfx	r3, r7, #4, #1
    87fe:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    8802:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    8804:	786b      	ldrb	r3, [r5, #1]
    8806:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    880a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    880e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    8812:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    8816:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    881a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    881e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    8822:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    8826:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    882a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    882e:	bf18      	it	ne
    8830:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    8832:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    8836:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    883a:	bf18      	it	ne
    883c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    883e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    8842:	782b      	ldrb	r3, [r5, #0]
    8844:	2b03      	cmp	r3, #3
    8846:	f200 80b9 	bhi.w	89bc <nrfx_twim_xfer+0x23c>
    884a:	e8df f003 	tbb	[pc, r3]
    884e:	a48b      	.short	0xa48b
    8850:	026d      	.short	0x026d
    8852:	692b      	ldr	r3, [r5, #16]
    8854:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    8858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    885c:	d1a7      	bne.n	87ae <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    885e:	f44f 7380 	mov.w	r3, #256	; 0x100
    8862:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8866:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8868:	68ea      	ldr	r2, [r5, #12]
    886a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    886e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8872:	2300      	movs	r3, #0
    8874:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    8878:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    887c:	2201      	movs	r2, #1
    887e:	6222      	str	r2, [r4, #32]
    8880:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8882:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    8886:	2a00      	cmp	r2, #0
    8888:	d0fb      	beq.n	8882 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    888a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    888e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8892:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    8894:	68ab      	ldr	r3, [r5, #8]
    8896:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    889a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    889e:	2334      	movs	r3, #52	; 0x34
    88a0:	fb03 c30e 	mla	r3, r3, lr, ip
    88a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    88a8:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    88aa:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    88ac:	4e75      	ldr	r6, [pc, #468]	; (8a84 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    88ae:	0738      	lsls	r0, r7, #28
    88b0:	d407      	bmi.n	88c2 <nrfx_twim_xfer+0x142>
    88b2:	782a      	ldrb	r2, [r5, #0]
    88b4:	2a03      	cmp	r2, #3
    88b6:	d004      	beq.n	88c2 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88b8:	2201      	movs	r2, #1
    88ba:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    88bc:	686b      	ldr	r3, [r5, #4]
    88be:	b903      	cbnz	r3, 88c2 <nrfx_twim_xfer+0x142>
    88c0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    88c2:	2334      	movs	r3, #52	; 0x34
    88c4:	fb03 f30e 	mul.w	r3, r3, lr
    88c8:	eb0c 0203 	add.w	r2, ip, r3
    88cc:	f85c 1003 	ldr.w	r1, [ip, r3]
    88d0:	2900      	cmp	r1, #0
    88d2:	d176      	bne.n	89c2 <nrfx_twim_xfer+0x242>
    88d4:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88d6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    88da:	2b00      	cmp	r3, #0
    88dc:	f000 8089 	beq.w	89f2 <nrfx_twim_xfer+0x272>
    88e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    88e4:	2b00      	cmp	r3, #0
    88e6:	f040 8087 	bne.w	89f8 <nrfx_twim_xfer+0x278>
    88ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    88ee:	2b00      	cmp	r3, #0
    88f0:	f000 8095 	beq.w	8a1e <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    88f4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88f6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    88fa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88fe:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    8902:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    8906:	2d00      	cmp	r5, #0
    8908:	f000 8081 	beq.w	8a0e <nrfx_twim_xfer+0x28e>
    890c:	f412 7f00 	tst.w	r2, #512	; 0x200
    8910:	f402 7280 	and.w	r2, r2, #256	; 0x100
    8914:	d17e      	bne.n	8a14 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8916:	6220      	str	r0, [r4, #32]
    8918:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    891a:	2a00      	cmp	r2, #0
    891c:	d0db      	beq.n	88d6 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    891e:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    8922:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    8926:	e7d6      	b.n	88d6 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8928:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    892a:	68ea      	ldr	r2, [r5, #12]
    892c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8930:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    8934:	692b      	ldr	r3, [r5, #16]
    8936:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    893a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    893e:	f47f af36 	bne.w	87ae <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    8942:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8944:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    8948:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    894c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    8950:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    8954:	2334      	movs	r3, #52	; 0x34
    8956:	fb03 c30e 	mla	r3, r3, lr, ip
    895a:	2202      	movs	r2, #2
    895c:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    895e:	2301      	movs	r3, #1
    8960:	6223      	str	r3, [r4, #32]
    8962:	e7a2      	b.n	88aa <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8964:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8966:	68ea      	ldr	r2, [r5, #12]
    8968:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    896c:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    8970:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    8974:	f04f 0334 	mov.w	r3, #52	; 0x34
    8978:	d008      	beq.n	898c <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    897a:	f44f 7280 	mov.w	r2, #256	; 0x100
    897e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    8982:	fb03 c30e 	mla	r3, r3, lr, ip
    8986:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    898a:	e7e7      	b.n	895c <nrfx_twim_xfer+0x1dc>
    898c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8990:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    8994:	e7df      	b.n	8956 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8996:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8998:	68ea      	ldr	r2, [r5, #12]
    899a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    899e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    89a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    89a6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    89aa:	2334      	movs	r3, #52	; 0x34
    89ac:	fb03 c30e 	mla	r3, r3, lr, ip
    89b0:	2202      	movs	r2, #2
    89b2:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    89b4:	2301      	movs	r3, #1
    89b6:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    89b8:	2300      	movs	r3, #0
    89ba:	e777      	b.n	88ac <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    89bc:	4e32      	ldr	r6, [pc, #200]	; (8a88 <nrfx_twim_xfer+0x308>)
    89be:	2308      	movs	r3, #8
    89c0:	e775      	b.n	88ae <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    89c2:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    89c4:	bf44      	itt	mi
    89c6:	2300      	movmi	r3, #0
    89c8:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    89ca:	067a      	lsls	r2, r7, #25
    89cc:	d406      	bmi.n	89dc <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    89ce:	2334      	movs	r3, #52	; 0x34
    89d0:	fb03 c30e 	mla	r3, r3, lr, ip
    89d4:	689a      	ldr	r2, [r3, #8]
    89d6:	f042 0202 	orr.w	r2, r2, #2
    89da:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    89dc:	2334      	movs	r3, #52	; 0x34
    89de:	fb03 c30e 	mla	r3, r3, lr, ip
    89e2:	689a      	ldr	r2, [r3, #8]
    89e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    89e8:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    89ea:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    89ec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    89f0:	e6de      	b.n	87b0 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    89f2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    89f6:	b123      	cbz	r3, 8a02 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    89fc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8a00:	e773      	b.n	88ea <nrfx_twim_xfer+0x16a>
    8a02:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    8a06:	2a00      	cmp	r2, #0
    8a08:	f43f af65 	beq.w	88d6 <nrfx_twim_xfer+0x156>
    8a0c:	e773      	b.n	88f6 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8a0e:	6220      	str	r0, [r4, #32]
    8a10:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    8a12:	e760      	b.n	88d6 <nrfx_twim_xfer+0x156>
    8a14:	2a00      	cmp	r2, #0
    8a16:	d182      	bne.n	891e <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    8a18:	2b00      	cmp	r3, #0
    8a1a:	f43f af5c 	beq.w	88d6 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    8a1e:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    8a20:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    8a24:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    8a28:	fb01 c20e 	mla	r2, r1, lr, ip
    8a2c:	2000      	movs	r0, #0
    8a2e:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    8a32:	b18b      	cbz	r3, 8a58 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    8a34:	4a15      	ldr	r2, [pc, #84]	; (8a8c <nrfx_twim_xfer+0x30c>)
    8a36:	4e16      	ldr	r6, [pc, #88]	; (8a90 <nrfx_twim_xfer+0x310>)
    8a38:	f013 0f01 	tst.w	r3, #1
    8a3c:	bf18      	it	ne
    8a3e:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    8a40:	f013 0f02 	tst.w	r3, #2
    8a44:	f102 0201 	add.w	r2, r2, #1
    8a48:	bf18      	it	ne
    8a4a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    8a4c:	f013 0f04 	tst.w	r3, #4
    8a50:	4b10      	ldr	r3, [pc, #64]	; (8a94 <nrfx_twim_xfer+0x314>)
    8a52:	bf18      	it	ne
    8a54:	461e      	movne	r6, r3
    8a56:	e6ab      	b.n	87b0 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    8a58:	067b      	lsls	r3, r7, #25
    8a5a:	f53f aea9 	bmi.w	87b0 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    8a5e:	fb0e c101 	mla	r1, lr, r1, ip
    8a62:	4620      	mov	r0, r4
    8a64:	f004 f99f 	bl	cda6 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    8a68:	4b09      	ldr	r3, [pc, #36]	; (8a90 <nrfx_twim_xfer+0x310>)
    8a6a:	2800      	cmp	r0, #0
    8a6c:	bf08      	it	eq
    8a6e:	461e      	moveq	r6, r3
    8a70:	e69e      	b.n	87b0 <nrfx_twim_xfer+0x30>
    8a72:	bf00      	nop
    8a74:	20001d2c 	.word	0x20001d2c
    8a78:	0bad000a 	.word	0x0bad000a
    8a7c:	019c0202 	.word	0x019c0202
    8a80:	0bad000b 	.word	0x0bad000b
    8a84:	0bad0000 	.word	0x0bad0000
    8a88:	0bad0004 	.word	0x0bad0004
    8a8c:	0bae0000 	.word	0x0bae0000
    8a90:	0bad0001 	.word	0x0bad0001
    8a94:	0bae0002 	.word	0x0bae0002

00008a98 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    8a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8a9a:	4d59      	ldr	r5, [pc, #356]	; (8c00 <nrfx_twim_0_irq_handler+0x168>)
    8a9c:	4c59      	ldr	r4, [pc, #356]	; (8c04 <nrfx_twim_0_irq_handler+0x16c>)
    8a9e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    8aa2:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    8aa4:	b1fb      	cbz	r3, 8ae6 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8aa6:	2300      	movs	r3, #0
    8aa8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    8aac:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ab0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    8ab4:	b9bb      	cbnz	r3, 8ae6 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    8ab6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    8ab8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    8abc:	2302      	movs	r3, #2
    8abe:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    8ac0:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    8ac2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ac6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    8aca:	b11b      	cbz	r3, 8ad4 <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    8acc:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    8ad0:	059e      	lsls	r6, r3, #22
    8ad2:	d403      	bmi.n	8adc <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ad4:	4b4a      	ldr	r3, [pc, #296]	; (8c00 <nrfx_twim_0_irq_handler+0x168>)
    8ad6:	2201      	movs	r2, #1
    8ad8:	621a      	str	r2, [r3, #32]
    8ada:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    8adc:	2301      	movs	r3, #1
    8ade:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    8ae2:	b007      	add	sp, #28
    8ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ae6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    8aea:	2b00      	cmp	r3, #0
    8aec:	d059      	beq.n	8ba2 <nrfx_twim_0_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8aee:	2300      	movs	r3, #0
    8af0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    8af4:	6a27      	ldr	r7, [r4, #32]
    8af6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    8afa:	067d      	lsls	r5, r7, #25
    8afc:	d40a      	bmi.n	8b14 <nrfx_twim_0_irq_handler+0x7c>
    8afe:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    8b02:	b93b      	cbnz	r3, 8b14 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    8b04:	493f      	ldr	r1, [pc, #252]	; (8c04 <nrfx_twim_0_irq_handler+0x16c>)
    8b06:	483e      	ldr	r0, [pc, #248]	; (8c00 <nrfx_twim_0_irq_handler+0x168>)
    8b08:	f004 f94d 	bl	cda6 <xfer_completeness_check>
    8b0c:	f080 0001 	eor.w	r0, r0, #1
    8b10:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    8b14:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    8b18:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    8b1c:	d11f      	bne.n	8b5e <nrfx_twim_0_irq_handler+0xc6>
            event.xfer_desc = p_cb->xfer_desc;
    8b1e:	4e3a      	ldr	r6, [pc, #232]	; (8c08 <nrfx_twim_0_irq_handler+0x170>)
    8b20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8b22:	ad01      	add	r5, sp, #4
    8b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8b26:	6833      	ldr	r3, [r6, #0]
    8b28:	602b      	str	r3, [r5, #0]
    8b2a:	4b35      	ldr	r3, [pc, #212]	; (8c00 <nrfx_twim_0_irq_handler+0x168>)
    8b2c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    8b30:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    8b34:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    8b38:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    8b3c:	f1bc 0f00 	cmp.w	ip, #0
    8b40:	d002      	beq.n	8b48 <nrfx_twim_0_irq_handler+0xb0>
    8b42:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    8b46:	b152      	cbz	r2, 8b5e <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    8b48:	2200      	movs	r2, #0
    8b4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    8b4e:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    8b50:	4a2e      	ldr	r2, [pc, #184]	; (8c0c <nrfx_twim_0_irq_handler+0x174>)
    8b52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8b56:	4b2e      	ldr	r3, [pc, #184]	; (8c10 <nrfx_twim_0_irq_handler+0x178>)
    8b58:	2208      	movs	r2, #8
    8b5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    8b5e:	4a28      	ldr	r2, [pc, #160]	; (8c00 <nrfx_twim_0_irq_handler+0x168>)
    8b60:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    8b64:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    8b68:	0798      	lsls	r0, r3, #30
    8b6a:	d443      	bmi.n	8bf4 <nrfx_twim_0_irq_handler+0x15c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    8b6c:	0759      	lsls	r1, r3, #29
    8b6e:	d443      	bmi.n	8bf8 <nrfx_twim_0_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    8b70:	07da      	lsls	r2, r3, #31
    8b72:	d443      	bmi.n	8bfc <nrfx_twim_0_irq_handler+0x164>
    else if (p_cb->error)
    8b74:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    8b78:	009b      	lsls	r3, r3, #2
    8b7a:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    8b7c:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    8b80:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    8b84:	b90b      	cbnz	r3, 8b8a <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    8b86:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    8b8a:	6a23      	ldr	r3, [r4, #32]
    8b8c:	075b      	lsls	r3, r3, #29
    8b8e:	d503      	bpl.n	8b98 <nrfx_twim_0_irq_handler+0x100>
    8b90:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    8b94:	2b00      	cmp	r3, #0
    8b96:	d0a4      	beq.n	8ae2 <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    8b98:	e9d4 3100 	ldrd	r3, r1, [r4]
    8b9c:	4668      	mov	r0, sp
    8b9e:	4798      	blx	r3
}
    8ba0:	e79f      	b.n	8ae2 <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ba2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    8ba6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    8baa:	7b23      	ldrb	r3, [r4, #12]
    8bac:	b983      	cbnz	r3, 8bd0 <nrfx_twim_0_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    8bae:	4f16      	ldr	r7, [pc, #88]	; (8c08 <nrfx_twim_0_irq_handler+0x170>)
    8bb0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8bb2:	ae01      	add	r6, sp, #4
    8bb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8bb6:	683b      	ldr	r3, [r7, #0]
    8bb8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    8bba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d1cd      	bne.n	8b5e <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    8bc2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    8bc6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    8bc8:	4b10      	ldr	r3, [pc, #64]	; (8c0c <nrfx_twim_0_irq_handler+0x174>)
    8bca:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    8bce:	e7c2      	b.n	8b56 <nrfx_twim_0_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    8bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
    8bd4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    8bd8:	f240 2302 	movw	r3, #514	; 0x202
    8bdc:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    8bde:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    8be2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    8be6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    8be8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8bec:	2301      	movs	r3, #1
    8bee:	60ab      	str	r3, [r5, #8]
    8bf0:	622b      	str	r3, [r5, #32]
            return;
    8bf2:	e776      	b.n	8ae2 <nrfx_twim_0_irq_handler+0x4a>
    8bf4:	2301      	movs	r3, #1
    8bf6:	e7c1      	b.n	8b7c <nrfx_twim_0_irq_handler+0xe4>
    8bf8:	2302      	movs	r3, #2
    8bfa:	e7bf      	b.n	8b7c <nrfx_twim_0_irq_handler+0xe4>
    8bfc:	2303      	movs	r3, #3
    8bfe:	e7bd      	b.n	8b7c <nrfx_twim_0_irq_handler+0xe4>
    8c00:	40003000 	.word	0x40003000
    8c04:	20001d2c 	.word	0x20001d2c
    8c08:	20001d38 	.word	0x20001d38
    8c0c:	019c0202 	.word	0x019c0202
    8c10:	e000e100 	.word	0xe000e100

00008c14 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8c18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8c1c:	2a08      	cmp	r2, #8
    8c1e:	d106      	bne.n	8c2e <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8c20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    8c24:	2b05      	cmp	r3, #5
    8c26:	d804      	bhi.n	8c32 <nrf52_errata_187+0x1e>
    8c28:	4a03      	ldr	r2, [pc, #12]	; (8c38 <nrf52_errata_187+0x24>)
    8c2a:	5cd0      	ldrb	r0, [r2, r3]
    8c2c:	4770      	bx	lr
                        return false;
    8c2e:	2000      	movs	r0, #0
    8c30:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8c32:	2001      	movs	r0, #1
}
    8c34:	4770      	bx	lr
    8c36:	bf00      	nop
    8c38:	0000eea0 	.word	0x0000eea0

00008c3c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8c3c:	4b05      	ldr	r3, [pc, #20]	; (8c54 <ep_state_access+0x18>)
    8c3e:	f010 0f80 	tst.w	r0, #128	; 0x80
    8c42:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    8c46:	bf08      	it	eq
    8c48:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    8c4a:	f000 000f 	and.w	r0, r0, #15
}
    8c4e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    8c52:	4770      	bx	lr
    8c54:	20001f08 	.word	0x20001f08

00008c58 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    8c58:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    8c5a:	4a07      	ldr	r2, [pc, #28]	; (8c78 <ev_usbreset_handler+0x20>)
    8c5c:	2300      	movs	r3, #0
    8c5e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8c60:	4a06      	ldr	r2, [pc, #24]	; (8c7c <ev_usbreset_handler+0x24>)
    8c62:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    8c64:	2301      	movs	r3, #1
    8c66:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    8c68:	4b05      	ldr	r3, [pc, #20]	; (8c80 <ev_usbreset_handler+0x28>)
    8c6a:	a801      	add	r0, sp, #4
    8c6c:	681b      	ldr	r3, [r3, #0]
    8c6e:	4798      	blx	r3
}
    8c70:	b003      	add	sp, #12
    8c72:	f85d fb04 	ldr.w	pc, [sp], #4
    8c76:	bf00      	nop
    8c78:	200021e6 	.word	0x200021e6
    8c7c:	200021e5 	.word	0x200021e5
    8c80:	20001fa0 	.word	0x20001fa0

00008c84 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    8c84:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    8c86:	4b19      	ldr	r3, [pc, #100]	; (8cec <ev_usbevent_handler+0x68>)
    8c88:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    8c8c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    8c90:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    8c92:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8c96:	d508      	bpl.n	8caa <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8c98:	4b15      	ldr	r3, [pc, #84]	; (8cf0 <ev_usbevent_handler+0x6c>)
    8c9a:	2201      	movs	r2, #1
    8c9c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8c9e:	2302      	movs	r3, #2
    8ca0:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8ca2:	4b14      	ldr	r3, [pc, #80]	; (8cf4 <ev_usbevent_handler+0x70>)
    8ca4:	a801      	add	r0, sp, #4
    8ca6:	681b      	ldr	r3, [r3, #0]
    8ca8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8caa:	05a2      	lsls	r2, r4, #22
    8cac:	d508      	bpl.n	8cc0 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    8cae:	4b10      	ldr	r3, [pc, #64]	; (8cf0 <ev_usbevent_handler+0x6c>)
    8cb0:	2200      	movs	r2, #0
    8cb2:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8cb4:	2303      	movs	r3, #3
    8cb6:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8cb8:	4b0e      	ldr	r3, [pc, #56]	; (8cf4 <ev_usbevent_handler+0x70>)
    8cba:	a801      	add	r0, sp, #4
    8cbc:	681b      	ldr	r3, [r3, #0]
    8cbe:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8cc0:	0563      	lsls	r3, r4, #21
    8cc2:	d510      	bpl.n	8ce6 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8cc4:	4b0a      	ldr	r3, [pc, #40]	; (8cf0 <ev_usbevent_handler+0x6c>)
    8cc6:	781a      	ldrb	r2, [r3, #0]
    8cc8:	b16a      	cbz	r2, 8ce6 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    8cca:	2200      	movs	r2, #0
    8ccc:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    8cce:	4b07      	ldr	r3, [pc, #28]	; (8cec <ev_usbevent_handler+0x68>)
    8cd0:	2201      	movs	r2, #1
    8cd2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8cd6:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    8cda:	2304      	movs	r3, #4
    8cdc:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    8cde:	4b05      	ldr	r3, [pc, #20]	; (8cf4 <ev_usbevent_handler+0x70>)
    8ce0:	a801      	add	r0, sp, #4
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	4798      	blx	r3
        }
    }
}
    8ce6:	b002      	add	sp, #8
    8ce8:	bd10      	pop	{r4, pc}
    8cea:	bf00      	nop
    8cec:	40027000 	.word	0x40027000
    8cf0:	200021e6 	.word	0x200021e6
    8cf4:	20001fa0 	.word	0x20001fa0

00008cf8 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    8cf8:	f04f 0320 	mov.w	r3, #32
    8cfc:	f3ef 8011 	mrs	r0, BASEPRI
    8d00:	f383 8812 	msr	BASEPRI_MAX, r3
    8d04:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8d08:	4b0a      	ldr	r3, [pc, #40]	; (8d34 <usbd_errata_187_211_begin+0x3c>)
    8d0a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    8d0e:	2203      	movs	r2, #3
    8d10:	b961      	cbnz	r1, 8d2c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8d12:	f249 3175 	movw	r1, #37749	; 0x9375
    8d16:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8d1a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8d1e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8d22:	f380 8811 	msr	BASEPRI, r0
    8d26:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8d2a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8d2c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    8d30:	e7f7      	b.n	8d22 <usbd_errata_187_211_begin+0x2a>
    8d32:	bf00      	nop
    8d34:	4006e000 	.word	0x4006e000

00008d38 <usbd_errata_187_211_end>:
	__asm__ volatile(
    8d38:	f04f 0320 	mov.w	r3, #32
    8d3c:	f3ef 8011 	mrs	r0, BASEPRI
    8d40:	f383 8812 	msr	BASEPRI_MAX, r3
    8d44:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8d48:	4b0a      	ldr	r3, [pc, #40]	; (8d74 <usbd_errata_187_211_end+0x3c>)
    8d4a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    8d4e:	b961      	cbnz	r1, 8d6a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8d50:	f249 3275 	movw	r2, #37749	; 0x9375
    8d54:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8d58:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8d5c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8d60:	f380 8811 	msr	BASEPRI, r0
    8d64:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8d68:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8d6a:	2200      	movs	r2, #0
    8d6c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    8d70:	e7f6      	b.n	8d60 <usbd_errata_187_211_end+0x28>
    8d72:	bf00      	nop
    8d74:	4006e000 	.word	0x4006e000

00008d78 <nrfx_usbd_feeder_flash>:
{
    8d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d7a:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8d7c:	4f0b      	ldr	r7, [pc, #44]	; (8dac <nrfx_usbd_feeder_flash+0x34>)
    8d7e:	429a      	cmp	r2, r3
    8d80:	bf28      	it	cs
    8d82:	461a      	movcs	r2, r3
{
    8d84:	460c      	mov	r4, r1
    8d86:	4615      	mov	r5, r2
    8d88:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8d8a:	6809      	ldr	r1, [r1, #0]
    8d8c:	4638      	mov	r0, r7
    8d8e:	f003 fd3b 	bl	c808 <memcpy>
    p_next->size = tx_size;
    8d92:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    8d96:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8d98:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    8d9a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    8d9c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    8d9e:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8da0:	6023      	str	r3, [r4, #0]
}
    8da2:	3800      	subs	r0, #0
    8da4:	bf18      	it	ne
    8da6:	2001      	movne	r0, #1
    8da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8daa:	bf00      	nop
    8dac:	20001d60 	.word	0x20001d60

00008db0 <nrfx_usbd_feeder_flash_zlp>:
{
    8db0:	b570      	push	{r4, r5, r6, lr}
    8db2:	684b      	ldr	r3, [r1, #4]
    8db4:	429a      	cmp	r2, r3
    8db6:	bf28      	it	cs
    8db8:	461a      	movcs	r2, r3
    8dba:	4606      	mov	r6, r0
    8dbc:	460d      	mov	r5, r1
    8dbe:	4614      	mov	r4, r2
    if (tx_size != 0)
    8dc0:	b182      	cbz	r2, 8de4 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8dc2:	6809      	ldr	r1, [r1, #0]
    8dc4:	4808      	ldr	r0, [pc, #32]	; (8de8 <nrfx_usbd_feeder_flash_zlp+0x38>)
    8dc6:	f003 fd1f 	bl	c808 <memcpy>
        p_next->p_data.tx = p_buffer;
    8dca:	4b07      	ldr	r3, [pc, #28]	; (8de8 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    8dcc:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    8dd0:	686b      	ldr	r3, [r5, #4]
    8dd2:	1b1b      	subs	r3, r3, r4
    8dd4:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    8dd6:	682b      	ldr	r3, [r5, #0]
    8dd8:	4423      	add	r3, r4
}
    8dda:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    8ddc:	602b      	str	r3, [r5, #0]
}
    8dde:	bf18      	it	ne
    8de0:	2001      	movne	r0, #1
    8de2:	bd70      	pop	{r4, r5, r6, pc}
    8de4:	4613      	mov	r3, r2
    8de6:	e7f1      	b.n	8dcc <nrfx_usbd_feeder_flash_zlp+0x1c>
    8de8:	20001d60 	.word	0x20001d60

00008dec <ev_sof_handler>:
{
    8dec:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    8dee:	2300      	movs	r3, #0
    8df0:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8df4:	4b0b      	ldr	r3, [pc, #44]	; (8e24 <ev_sof_handler+0x38>)
    8df6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    8dfa:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    8dfe:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    8e02:	4a09      	ldr	r2, [pc, #36]	; (8e28 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8e04:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    8e06:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8e08:	bf14      	ite	ne
    8e0a:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    8e0e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    8e12:	430b      	orrs	r3, r1
    8e14:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    8e16:	4b05      	ldr	r3, [pc, #20]	; (8e2c <ev_sof_handler+0x40>)
    8e18:	a801      	add	r0, sp, #4
    8e1a:	681b      	ldr	r3, [r3, #0]
    8e1c:	4798      	blx	r3
}
    8e1e:	b003      	add	sp, #12
    8e20:	f85d fb04 	ldr.w	pc, [sp], #4
    8e24:	40027000 	.word	0x40027000
    8e28:	20001f9c 	.word	0x20001f9c
    8e2c:	20001fa0 	.word	0x20001fa0

00008e30 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8e30:	4b06      	ldr	r3, [pc, #24]	; (8e4c <atomic_and.constprop.0.isra.0+0x1c>)
    8e32:	f3bf 8f5b 	dmb	ish
    8e36:	e853 1f00 	ldrex	r1, [r3]
    8e3a:	4001      	ands	r1, r0
    8e3c:	e843 1200 	strex	r2, r1, [r3]
    8e40:	2a00      	cmp	r2, #0
    8e42:	d1f8      	bne.n	8e36 <atomic_and.constprop.0.isra.0+0x6>
    8e44:	f3bf 8f5b 	dmb	ish
}
    8e48:	4770      	bx	lr
    8e4a:	bf00      	nop
    8e4c:	20001f98 	.word	0x20001f98

00008e50 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8e54:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8e58:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8e5a:	bf02      	ittt	eq
    8e5c:	4b03      	ldreq	r3, [pc, #12]	; (8e6c <usbd_dma_pending_clear+0x1c>)
    8e5e:	2200      	moveq	r2, #0
    8e60:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    8e64:	4b02      	ldr	r3, [pc, #8]	; (8e70 <usbd_dma_pending_clear+0x20>)
    8e66:	2200      	movs	r2, #0
    8e68:	701a      	strb	r2, [r3, #0]
}
    8e6a:	4770      	bx	lr
    8e6c:	40027000 	.word	0x40027000
    8e70:	200021e4 	.word	0x200021e4

00008e74 <nrf_usbd_ep0in_dma_handler>:
{
    8e74:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    8e76:	f7ff ffeb 	bl	8e50 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8e7a:	4b08      	ldr	r3, [pc, #32]	; (8e9c <nrf_usbd_ep0in_dma_handler+0x28>)
    8e7c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    8e80:	2a03      	cmp	r2, #3
    8e82:	d105      	bne.n	8e90 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    8e84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8e88:	f06f 0001 	mvn.w	r0, #1
    8e8c:	f7ff bfd0 	b.w	8e30 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8e94:	2b00      	cmp	r3, #0
    8e96:	d0f5      	beq.n	8e84 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8e98:	bd08      	pop	{r3, pc}
    8e9a:	bf00      	nop
    8e9c:	20001e78 	.word	0x20001e78

00008ea0 <usbd_ep_data_handler>:
{
    8ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    8ea2:	2201      	movs	r2, #1
    8ea4:	fa02 f501 	lsl.w	r5, r2, r1
    8ea8:	491c      	ldr	r1, [pc, #112]	; (8f1c <usbd_ep_data_handler+0x7c>)
    8eaa:	4e1d      	ldr	r6, [pc, #116]	; (8f20 <usbd_ep_data_handler+0x80>)
    8eac:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    8eae:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    8eb2:	ea43 0305 	orr.w	r3, r3, r5
{
    8eb6:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    8eb8:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    8eba:	d024      	beq.n	8f06 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8ebc:	f000 020f 	and.w	r2, r0, #15
    8ec0:	4b18      	ldr	r3, [pc, #96]	; (8f24 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8ec2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8eca:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8ece:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8ed0:	b132      	cbz	r2, 8ee0 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8ed2:	2200      	movs	r2, #0
    8ed4:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    8ed6:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8ed8:	681b      	ldr	r3, [r3, #0]
    8eda:	d011      	beq.n	8f00 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    8edc:	f003 ffda 	bl	ce94 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8ee0:	6833      	ldr	r3, [r6, #0]
    8ee2:	402b      	ands	r3, r5
    8ee4:	d10a      	bne.n	8efc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8ee6:	2206      	movs	r2, #6
    8ee8:	f88d 2004 	strb.w	r2, [sp, #4]
    8eec:	f88d 4006 	strb.w	r4, [sp, #6]
    8ef0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8ef4:	4b0c      	ldr	r3, [pc, #48]	; (8f28 <usbd_ep_data_handler+0x88>)
    8ef6:	a801      	add	r0, sp, #4
    8ef8:	681b      	ldr	r3, [r3, #0]
    8efa:	4798      	blx	r3
}
    8efc:	b002      	add	sp, #8
    8efe:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    8f00:	f7ff ffb8 	bl	8e74 <nrf_usbd_ep0in_dma_handler>
    8f04:	e7ec      	b.n	8ee0 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8f06:	6833      	ldr	r3, [r6, #0]
    8f08:	421d      	tst	r5, r3
    8f0a:	d1f7      	bne.n	8efc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    8f0c:	2306      	movs	r3, #6
    8f0e:	f88d 3004 	strb.w	r3, [sp, #4]
    8f12:	f88d 0006 	strb.w	r0, [sp, #6]
    8f16:	f88d 2007 	strb.w	r2, [sp, #7]
    8f1a:	e7eb      	b.n	8ef4 <usbd_ep_data_handler+0x54>
    8f1c:	20001f9c 	.word	0x20001f9c
    8f20:	20001f98 	.word	0x20001f98
    8f24:	0000ddf2 	.word	0x0000ddf2
    8f28:	20001fa0 	.word	0x20001fa0

00008f2c <ev_setup_data_handler>:
{
    8f2c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8f2e:	4b05      	ldr	r3, [pc, #20]	; (8f44 <ev_setup_data_handler+0x18>)
    8f30:	781a      	ldrb	r2, [r3, #0]
    8f32:	4610      	mov	r0, r2
    8f34:	f003 ffa5 	bl	ce82 <ep2bit>
}
    8f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8f3c:	4601      	mov	r1, r0
    8f3e:	4610      	mov	r0, r2
    8f40:	f7ff bfae 	b.w	8ea0 <usbd_ep_data_handler>
    8f44:	200021e5 	.word	0x200021e5

00008f48 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8f48:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    8f4a:	f7ff ff81 	bl	8e50 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8f4e:	4b0c      	ldr	r3, [pc, #48]	; (8f80 <ev_dma_epout8_handler+0x38>)
    8f50:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    8f54:	2a03      	cmp	r2, #3
    8f56:	d010      	beq.n	8f7a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    8f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8f5c:	b96b      	cbnz	r3, 8f7a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8f5e:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    8f62:	f7ff ff65 	bl	8e30 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8f66:	2306      	movs	r3, #6
    8f68:	f88d 3004 	strb.w	r3, [sp, #4]
    8f6c:	2308      	movs	r3, #8
    8f6e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8f72:	4b04      	ldr	r3, [pc, #16]	; (8f84 <ev_dma_epout8_handler+0x3c>)
    8f74:	a801      	add	r0, sp, #4
    8f76:	681b      	ldr	r3, [r3, #0]
    8f78:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8f7a:	b003      	add	sp, #12
    8f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    8f80:	20001e78 	.word	0x20001e78
    8f84:	20001fa0 	.word	0x20001fa0

00008f88 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8f88:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    8f8a:	f7ff ff61 	bl	8e50 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8f8e:	4b10      	ldr	r3, [pc, #64]	; (8fd0 <ev_dma_epin8_handler+0x48>)
    8f90:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    8f94:	2a03      	cmp	r2, #3
    8f96:	d106      	bne.n	8fa6 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8f98:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8f9c:	b003      	add	sp, #12
    8f9e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8fa2:	f7ff bf45 	b.w	8e30 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8fa6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8faa:	b96b      	cbnz	r3, 8fc8 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8fac:	f46f 7080 	mvn.w	r0, #256	; 0x100
    8fb0:	f7ff ff3e 	bl	8e30 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8fb4:	2306      	movs	r3, #6
    8fb6:	f88d 3004 	strb.w	r3, [sp, #4]
    8fba:	2388      	movs	r3, #136	; 0x88
    8fbc:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8fc0:	4b04      	ldr	r3, [pc, #16]	; (8fd4 <ev_dma_epin8_handler+0x4c>)
    8fc2:	a801      	add	r0, sp, #4
    8fc4:	681b      	ldr	r3, [r3, #0]
    8fc6:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8fc8:	b003      	add	sp, #12
    8fca:	f85d fb04 	ldr.w	pc, [sp], #4
    8fce:	bf00      	nop
    8fd0:	20001e78 	.word	0x20001e78
    8fd4:	20001fa0 	.word	0x20001fa0

00008fd8 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8fd8:	4a02      	ldr	r2, [pc, #8]	; (8fe4 <nrfx_usbd_uninit+0xc>)
    8fda:	2300      	movs	r3, #0
    8fdc:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    8fde:	4a02      	ldr	r2, [pc, #8]	; (8fe8 <nrfx_usbd_uninit+0x10>)
    8fe0:	7013      	strb	r3, [r2, #0]
    return;
}
    8fe2:	4770      	bx	lr
    8fe4:	20001fa0 	.word	0x20001fa0
    8fe8:	200021e7 	.word	0x200021e7

00008fec <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    8fec:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    8fee:	4b4c      	ldr	r3, [pc, #304]	; (9120 <nrfx_usbd_enable+0x134>)
    8ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8ff4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8ff8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8ffc:	f7ff fe0a 	bl	8c14 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9000:	b108      	cbz	r0, 9006 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    9002:	f7ff fe79 	bl	8cf8 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    900a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    900e:	2b08      	cmp	r3, #8
    9010:	d119      	bne.n	9046 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    9012:	f04f 0320 	mov.w	r3, #32
    9016:	f3ef 8011 	mrs	r0, BASEPRI
    901a:	f383 8812 	msr	BASEPRI_MAX, r3
    901e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9022:	4b40      	ldr	r3, [pc, #256]	; (9124 <nrfx_usbd_enable+0x138>)
    9024:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9028:	22c0      	movs	r2, #192	; 0xc0
    902a:	2900      	cmp	r1, #0
    902c:	d170      	bne.n	9110 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    902e:	f249 3175 	movw	r1, #37749	; 0x9375
    9032:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9036:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    903a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    903e:	f380 8811 	msr	BASEPRI, r0
    9042:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    9046:	4b36      	ldr	r3, [pc, #216]	; (9120 <nrfx_usbd_enable+0x134>)
    9048:	2201      	movs	r2, #1
    904a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    904e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9052:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    9056:	0512      	lsls	r2, r2, #20
    9058:	d5fb      	bpl.n	9052 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    905a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    905e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    9062:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    906a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    906e:	2b08      	cmp	r3, #8
    9070:	d118      	bne.n	90a4 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    9072:	f04f 0320 	mov.w	r3, #32
    9076:	f3ef 8011 	mrs	r0, BASEPRI
    907a:	f383 8812 	msr	BASEPRI_MAX, r3
    907e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9082:	4b28      	ldr	r3, [pc, #160]	; (9124 <nrfx_usbd_enable+0x138>)
    9084:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9088:	2900      	cmp	r1, #0
    908a:	d144      	bne.n	9116 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    908c:	f249 3275 	movw	r2, #37749	; 0x9375
    9090:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9094:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9098:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    909c:	f380 8811 	msr	BASEPRI, r0
    90a0:	f3bf 8f6f 	isb	sy
    90a4:	f7ff fdb6 	bl	8c14 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    90a8:	b130      	cbz	r0, 90b8 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    90aa:	f7ff fe45 	bl	8d38 <usbd_errata_187_211_end>
    90ae:	f7ff fdb1 	bl	8c14 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    90b2:	b108      	cbz	r0, 90b8 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    90b4:	f7ff fe20 	bl	8cf8 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    90b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    90bc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    90c0:	2b08      	cmp	r3, #8
    90c2:	4b17      	ldr	r3, [pc, #92]	; (9120 <nrfx_usbd_enable+0x134>)
    90c4:	d10a      	bne.n	90dc <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    90c6:	f240 72e3 	movw	r2, #2019	; 0x7e3
    90ca:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    90ce:	2240      	movs	r2, #64	; 0x40
    90d0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    90d4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    90d8:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    90dc:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    90de:	2280      	movs	r2, #128	; 0x80
    90e0:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    90e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    90e8:	4b0f      	ldr	r3, [pc, #60]	; (9128 <nrfx_usbd_enable+0x13c>)
    90ea:	f240 12ff 	movw	r2, #511	; 0x1ff
    90ee:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    90f0:	4b0e      	ldr	r3, [pc, #56]	; (912c <nrfx_usbd_enable+0x140>)
    90f2:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    90f4:	f7ff feac 	bl	8e50 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    90f8:	4b0d      	ldr	r3, [pc, #52]	; (9130 <nrfx_usbd_enable+0x144>)
    90fa:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    90fc:	4b0d      	ldr	r3, [pc, #52]	; (9134 <nrfx_usbd_enable+0x148>)
    90fe:	2202      	movs	r2, #2
    9100:	701a      	strb	r2, [r3, #0]
    9102:	f7ff fd87 	bl	8c14 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    9106:	b150      	cbz	r0, 911e <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    910c:	f7ff be14 	b.w	8d38 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9110:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    9114:	e793      	b.n	903e <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    9116:	2200      	movs	r2, #0
    9118:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    911c:	e7be      	b.n	909c <nrfx_usbd_enable+0xb0>
}
    911e:	bd08      	pop	{r3, pc}
    9120:	40027000 	.word	0x40027000
    9124:	4006e000 	.word	0x4006e000
    9128:	20001f9c 	.word	0x20001f9c
    912c:	20001f98 	.word	0x20001f98
    9130:	200021e5 	.word	0x200021e5
    9134:	200021e7 	.word	0x200021e7

00009138 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9138:	4b0a      	ldr	r3, [pc, #40]	; (9164 <nrfx_usbd_start+0x2c>)
    913a:	2200      	movs	r2, #0
{
    913c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    913e:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    9140:	4a09      	ldr	r2, [pc, #36]	; (9168 <nrfx_usbd_start+0x30>)
    9142:	4b0a      	ldr	r3, [pc, #40]	; (916c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9144:	4c0a      	ldr	r4, [pc, #40]	; (9170 <nrfx_usbd_start+0x38>)
    9146:	2800      	cmp	r0, #0
    9148:	bf08      	it	eq
    914a:	4613      	moveq	r3, r2
    914c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9150:	2027      	movs	r0, #39	; 0x27
    9152:	f7fb fd81 	bl	4c58 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9156:	2301      	movs	r3, #1
    9158:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    915c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9160:	bd10      	pop	{r4, pc}
    9162:	bf00      	nop
    9164:	200021e6 	.word	0x200021e6
    9168:	01c01407 	.word	0x01c01407
    916c:	01e01407 	.word	0x01e01407
    9170:	40027000 	.word	0x40027000

00009174 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9174:	4b03      	ldr	r3, [pc, #12]	; (9184 <nrfx_usbd_is_enabled+0x10>)
    9176:	7818      	ldrb	r0, [r3, #0]
}
    9178:	2801      	cmp	r0, #1
    917a:	bf94      	ite	ls
    917c:	2000      	movls	r0, #0
    917e:	2001      	movhi	r0, #1
    9180:	4770      	bx	lr
    9182:	bf00      	nop
    9184:	200021e7 	.word	0x200021e7

00009188 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    9188:	b510      	push	{r4, lr}
	__asm__ volatile(
    918a:	f04f 0320 	mov.w	r3, #32
    918e:	f3ef 8111 	mrs	r1, BASEPRI
    9192:	f383 8812 	msr	BASEPRI_MAX, r3
    9196:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    919a:	4b0f      	ldr	r3, [pc, #60]	; (91d8 <nrfx_usbd_suspend+0x50>)
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    91a2:	b193      	cbz	r3, 91ca <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    91a4:	4b0d      	ldr	r3, [pc, #52]	; (91dc <nrfx_usbd_suspend+0x54>)
    91a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    91aa:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    91ae:	d10c      	bne.n	91ca <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    91b0:	2401      	movs	r4, #1
    91b2:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    91b6:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    91ba:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    91be:	05a4      	lsls	r4, r4, #22
    91c0:	d504      	bpl.n	91cc <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    91c2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    91c6:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    91ca:	2000      	movs	r0, #0
	__asm__ volatile(
    91cc:	f381 8811 	msr	BASEPRI, r1
    91d0:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    91d4:	bd10      	pop	{r4, pc}
    91d6:	bf00      	nop
    91d8:	200021e6 	.word	0x200021e6
    91dc:	40027000 	.word	0x40027000

000091e0 <nrfx_usbd_init>:
{
    91e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    91e2:	4b1c      	ldr	r3, [pc, #112]	; (9254 <nrfx_usbd_init+0x74>)
    91e4:	781c      	ldrb	r4, [r3, #0]
    91e6:	bb94      	cbnz	r4, 924e <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    91e8:	4a1b      	ldr	r2, [pc, #108]	; (9258 <nrfx_usbd_init+0x78>)
    91ea:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    91ec:	2201      	movs	r2, #1
    91ee:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    91f0:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    91f4:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    91f6:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    91fa:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    91fe:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9200:	bf14      	ite	ne
    9202:	4639      	movne	r1, r7
    9204:	2140      	moveq	r1, #64	; 0x40
    9206:	4628      	mov	r0, r5
    9208:	f003 fe73 	bl	cef2 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    920c:	4628      	mov	r0, r5
    920e:	f7ff fd15 	bl	8c3c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9212:	3401      	adds	r4, #1
    9214:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9216:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    9218:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    921a:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    921c:	d1eb      	bne.n	91f6 <nrfx_usbd_init+0x16>
    921e:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9220:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9224:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9226:	f014 0f08 	tst.w	r4, #8
    922a:	b2e6      	uxtb	r6, r4
    922c:	bf14      	ite	ne
    922e:	4639      	movne	r1, r7
    9230:	2140      	moveq	r1, #64	; 0x40
    9232:	4630      	mov	r0, r6
    9234:	f003 fe5d 	bl	cef2 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9238:	4630      	mov	r0, r6
    923a:	f7ff fcff 	bl	8c3c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    923e:	3401      	adds	r4, #1
    9240:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9242:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    9244:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    9246:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9248:	d1ed      	bne.n	9226 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    924a:	4804      	ldr	r0, [pc, #16]	; (925c <nrfx_usbd_init+0x7c>)
}
    924c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    924e:	4804      	ldr	r0, [pc, #16]	; (9260 <nrfx_usbd_init+0x80>)
    9250:	e7fc      	b.n	924c <nrfx_usbd_init+0x6c>
    9252:	bf00      	nop
    9254:	200021e7 	.word	0x200021e7
    9258:	20001fa0 	.word	0x20001fa0
    925c:	0bad0000 	.word	0x0bad0000
    9260:	0bad0005 	.word	0x0bad0005

00009264 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9268:	4604      	mov	r4, r0
	__asm__ volatile(
    926a:	f04f 0320 	mov.w	r3, #32
    926e:	f3ef 8611 	mrs	r6, BASEPRI
    9272:	f383 8812 	msr	BASEPRI_MAX, r3
    9276:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    927a:	f010 090f 	ands.w	r9, r0, #15
    927e:	d103      	bne.n	9288 <nrfx_usbd_ep_transfer+0x24>
    9280:	4b27      	ldr	r3, [pc, #156]	; (9320 <nrfx_usbd_ep_transfer+0xbc>)
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	4283      	cmp	r3, r0
    9286:	d147      	bne.n	9318 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9288:	4b26      	ldr	r3, [pc, #152]	; (9324 <nrfx_usbd_ep_transfer+0xc0>)
    928a:	4f27      	ldr	r7, [pc, #156]	; (9328 <nrfx_usbd_ep_transfer+0xc4>)
    928c:	681a      	ldr	r2, [r3, #0]
    928e:	683b      	ldr	r3, [r7, #0]
    9290:	43d2      	mvns	r2, r2
    9292:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    9294:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9296:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    9298:	f003 fdf3 	bl	ce82 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    929c:	f04f 0801 	mov.w	r8, #1
    92a0:	fa08 f800 	lsl.w	r8, r8, r0
    92a4:	ea12 0f08 	tst.w	r2, r8
    92a8:	d138      	bne.n	931c <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    92aa:	4620      	mov	r0, r4
    92ac:	f7ff fcc6 	bl	8c3c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    92b0:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    92b2:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    92b4:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    92b6:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    92ba:	d529      	bpl.n	9310 <nrfx_usbd_ep_transfer+0xac>
    92bc:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    92be:	6888      	ldr	r0, [r1, #8]
    92c0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    92c4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    92c8:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    92cc:	d11d      	bne.n	930a <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    92ce:	4a17      	ldr	r2, [pc, #92]	; (932c <nrfx_usbd_ep_transfer+0xc8>)
    92d0:	4c17      	ldr	r4, [pc, #92]	; (9330 <nrfx_usbd_ep_transfer+0xcc>)
    92d2:	2800      	cmp	r0, #0
    92d4:	bf08      	it	eq
    92d6:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    92d8:	4816      	ldr	r0, [pc, #88]	; (9334 <nrfx_usbd_ep_transfer+0xd0>)
    92da:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    92dc:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    92de:	c907      	ldmia	r1, {r0, r1, r2}
    92e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    92e4:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    92e6:	2300      	movs	r3, #0
    92e8:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    92ea:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    92ec:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    92ee:	4812      	ldr	r0, [pc, #72]	; (9338 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    92f0:	ea43 0308 	orr.w	r3, r3, r8
    92f4:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    92f6:	4b11      	ldr	r3, [pc, #68]	; (933c <nrfx_usbd_ep_transfer+0xd8>)
    92f8:	2280      	movs	r2, #128	; 0x80
    92fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    92fe:	f386 8811 	msr	BASEPRI, r6
    9302:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    930a:	4a0d      	ldr	r2, [pc, #52]	; (9340 <nrfx_usbd_ep_transfer+0xdc>)
    930c:	4c0d      	ldr	r4, [pc, #52]	; (9344 <nrfx_usbd_ep_transfer+0xe0>)
    930e:	e7e0      	b.n	92d2 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9310:	4a0d      	ldr	r2, [pc, #52]	; (9348 <nrfx_usbd_ep_transfer+0xe4>)
    9312:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    9314:	4a0d      	ldr	r2, [pc, #52]	; (934c <nrfx_usbd_ep_transfer+0xe8>)
    9316:	e7e1      	b.n	92dc <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    9318:	480d      	ldr	r0, [pc, #52]	; (9350 <nrfx_usbd_ep_transfer+0xec>)
    931a:	e7f0      	b.n	92fe <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    931c:	480d      	ldr	r0, [pc, #52]	; (9354 <nrfx_usbd_ep_transfer+0xf0>)
    931e:	e7ee      	b.n	92fe <nrfx_usbd_ep_transfer+0x9a>
    9320:	200021e5 	.word	0x200021e5
    9324:	20001f9c 	.word	0x20001f9c
    9328:	20001f98 	.word	0x20001f98
    932c:	0000ce5b 	.word	0x0000ce5b
    9330:	0000ce39 	.word	0x0000ce39
    9334:	20001e0c 	.word	0x20001e0c
    9338:	0bad0000 	.word	0x0bad0000
    933c:	e000e100 	.word	0xe000e100
    9340:	00008db1 	.word	0x00008db1
    9344:	00008d79 	.word	0x00008d79
    9348:	20001da0 	.word	0x20001da0
    934c:	0000ce07 	.word	0x0000ce07
    9350:	0bad000a 	.word	0x0bad000a
    9354:	0bad000b 	.word	0x0bad000b

00009358 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9358:	f010 0f08 	tst.w	r0, #8
    935c:	4b07      	ldr	r3, [pc, #28]	; (937c <nrfx_usbd_epout_size_get+0x24>)
    935e:	d006      	beq.n	936e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9360:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9364:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9368:	bf18      	it	ne
    936a:	2000      	movne	r0, #0
    936c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    936e:	f000 000f 	and.w	r0, r0, #15
    9372:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    937a:	4770      	bx	lr
    937c:	40027000 	.word	0x40027000

00009380 <usbd_dmareq_process>:
{
    9380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9384:	4e59      	ldr	r6, [pc, #356]	; (94ec <usbd_dmareq_process+0x16c>)
    9386:	7833      	ldrb	r3, [r6, #0]
{
    9388:	b085      	sub	sp, #20
    if (!m_dma_pending)
    938a:	2b00      	cmp	r3, #0
    938c:	d173      	bne.n	9476 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    938e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 94f0 <usbd_dmareq_process+0x170>
    9392:	4d58      	ldr	r5, [pc, #352]	; (94f4 <usbd_dmareq_process+0x174>)
    9394:	f8d8 4000 	ldr.w	r4, [r8]
    9398:	682b      	ldr	r3, [r5, #0]
    939a:	401c      	ands	r4, r3
    939c:	d06b      	beq.n	9476 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    939e:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    93a2:	bf14      	ite	ne
    93a4:	fa93 f4a3 	rbitne	r4, r3
    93a8:	fa94 f4a4 	rbiteq	r4, r4
    93ac:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    93b0:	f04f 0901 	mov.w	r9, #1
    93b4:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    93b8:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    93ba:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    93be:	d95d      	bls.n	947c <usbd_dmareq_process+0xfc>
    93c0:	3c10      	subs	r4, #16
    93c2:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    93c4:	4620      	mov	r0, r4
    93c6:	f7ff fc39 	bl	8c3c <ep_state_access>
    93ca:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    93cc:	4620      	mov	r0, r4
    93ce:	f7ff ffc3 	bl	9358 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    93d2:	f8da 7000 	ldr.w	r7, [sl]
    93d6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    93da:	f8da 1004 	ldr.w	r1, [sl, #4]
    93de:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    93e0:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    93e2:	a802      	add	r0, sp, #8
    93e4:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    93e6:	9b02      	ldr	r3, [sp, #8]
    93e8:	2b00      	cmp	r3, #0
    93ea:	d153      	bne.n	9494 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    93ec:	b908      	cbnz	r0, 93f2 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    93ee:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    93f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    93f6:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    93f8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    93fc:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    93fe:	bf02      	ittt	eq
    9400:	4b3d      	ldreq	r3, [pc, #244]	; (94f8 <usbd_dmareq_process+0x178>)
    9402:	2282      	moveq	r2, #130	; 0x82
    9404:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    9408:	2301      	movs	r3, #1
    940a:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    940c:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    940e:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9410:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    9412:	ea03 0309 	and.w	r3, r3, r9
    9416:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9418:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    941c:	2900      	cmp	r1, #0
    941e:	4413      	add	r3, r2
    9420:	f8ca 3008 	str.w	r3, [sl, #8]
    9424:	f004 0508 	and.w	r5, r4, #8
    9428:	4b33      	ldr	r3, [pc, #204]	; (94f8 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    942a:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    942e:	da4e      	bge.n	94ce <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    9430:	2d00      	cmp	r5, #0
    9432:	d044      	beq.n	94be <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    9434:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    9438:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    943c:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    943e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9446:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    944a:	2201      	movs	r2, #1
    944c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    944e:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9450:	4a2a      	ldr	r2, [pc, #168]	; (94fc <usbd_dmareq_process+0x17c>)
    9452:	4b2b      	ldr	r3, [pc, #172]	; (9500 <usbd_dmareq_process+0x180>)
    9454:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    9458:	bf38      	it	cc
    945a:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    945c:	4926      	ldr	r1, [pc, #152]	; (94f8 <usbd_dmareq_process+0x178>)
    945e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9466:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    946a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    946c:	b91a      	cbnz	r2, 9476 <usbd_dmareq_process+0xf6>
    946e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9472:	2a00      	cmp	r2, #0
    9474:	d0f9      	beq.n	946a <usbd_dmareq_process+0xea>
}
    9476:	b005      	add	sp, #20
    9478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    947c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9480:	4620      	mov	r0, r4
    9482:	f7ff fbdb 	bl	8c3c <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    9486:	6803      	ldr	r3, [r0, #0]
    9488:	8982      	ldrh	r2, [r0, #12]
    948a:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    948c:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    948e:	a802      	add	r0, sp, #8
    9490:	4798      	blx	r3
    9492:	e7ab      	b.n	93ec <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    9494:	9b03      	ldr	r3, [sp, #12]
    9496:	459b      	cmp	fp, r3
    9498:	d9a8      	bls.n	93ec <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    949a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    949c:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    949e:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    94a2:	f7ff fcc5 	bl	8e30 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    94a6:	2306      	movs	r3, #6
    94a8:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    94ac:	4b15      	ldr	r3, [pc, #84]	; (9504 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    94ae:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    94b2:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    94b4:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    94b8:	a801      	add	r0, sp, #4
    94ba:	4798      	blx	r3
                    continue;
    94bc:	e76a      	b.n	9394 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    94be:	2514      	movs	r5, #20
    94c0:	fb05 3304 	mla	r3, r5, r4, r3
    94c4:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    94c8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    94cc:	e7b6      	b.n	943c <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    94ce:	b12d      	cbz	r5, 94dc <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    94d0:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    94d4:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    94d8:	2328      	movs	r3, #40	; 0x28
    94da:	e7b0      	b.n	943e <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    94dc:	2514      	movs	r5, #20
    94de:	fb05 3304 	mla	r3, r5, r4, r3
    94e2:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    94e6:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    94ea:	e7f5      	b.n	94d8 <usbd_dmareq_process+0x158>
    94ec:	200021e4 	.word	0x200021e4
    94f0:	20001f98 	.word	0x20001f98
    94f4:	20001f9c 	.word	0x20001f9c
    94f8:	40027000 	.word	0x40027000
    94fc:	0000dde0 	.word	0x0000dde0
    9500:	0000ddf2 	.word	0x0000ddf2
    9504:	20001fa0 	.word	0x20001fa0

00009508 <ev_epdata_handler>:
{
    9508:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    950a:	4b0f      	ldr	r3, [pc, #60]	; (9548 <ev_epdata_handler+0x40>)
    950c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9510:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    9514:	2501      	movs	r5, #1
    while (dataepstatus)
    9516:	b91c      	cbnz	r4, 9520 <ev_epdata_handler+0x18>
}
    9518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    951c:	f7ff bf30 	b.w	9380 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9520:	fa94 f3a4 	rbit	r3, r4
    9524:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9528:	2b0f      	cmp	r3, #15
    952a:	bfc8      	it	gt
    952c:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9530:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9532:	bfd4      	ite	le
    9534:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    9538:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    953a:	fa05 f303 	lsl.w	r3, r5, r3
    953e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9542:	f7ff fcad 	bl	8ea0 <usbd_ep_data_handler>
    9546:	e7e6      	b.n	9516 <ev_epdata_handler+0xe>
    9548:	40027000 	.word	0x40027000

0000954c <nrf_usbd_epout_dma_handler>:
{
    954c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    954e:	f7ff fc7f 	bl	8e50 <usbd_dma_pending_clear>
{
    9552:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9554:	f7ff fb72 	bl	8c3c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9558:	7b83      	ldrb	r3, [r0, #14]
    955a:	2b03      	cmp	r3, #3
    955c:	d10d      	bne.n	957a <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    955e:	4620      	mov	r0, r4
    9560:	f003 fc8f 	bl	ce82 <ep2bit>
    9564:	2301      	movs	r3, #1
    9566:	fa03 f000 	lsl.w	r0, r3, r0
    956a:	43c0      	mvns	r0, r0
    956c:	f7ff fc60 	bl	8e30 <atomic_and.constprop.0.isra.0>
}
    9570:	b003      	add	sp, #12
    9572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9576:	f7ff bf03 	b.w	9380 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    957a:	6805      	ldr	r5, [r0, #0]
    957c:	2d00      	cmp	r5, #0
    957e:	d1f7      	bne.n	9570 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9580:	4620      	mov	r0, r4
    9582:	f003 fc7e 	bl	ce82 <ep2bit>
    9586:	2301      	movs	r3, #1
    9588:	fa03 f000 	lsl.w	r0, r3, r0
    958c:	43c0      	mvns	r0, r0
    958e:	f7ff fc4f 	bl	8e30 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9592:	2306      	movs	r3, #6
    9594:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9598:	4b04      	ldr	r3, [pc, #16]	; (95ac <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    959a:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    959e:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    95a0:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    95a4:	a801      	add	r0, sp, #4
    95a6:	4798      	blx	r3
    95a8:	e7e2      	b.n	9570 <nrf_usbd_epout_dma_handler+0x24>
    95aa:	bf00      	nop
    95ac:	20001fa0 	.word	0x20001fa0

000095b0 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    95b0:	4b02      	ldr	r3, [pc, #8]	; (95bc <nrfx_usbd_ep_stall+0xc>)
    95b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    95b6:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    95ba:	4770      	bx	lr
    95bc:	40027000 	.word	0x40027000

000095c0 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    95c0:	0702      	lsls	r2, r0, #28
    95c2:	d413      	bmi.n	95ec <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    95c4:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    95c8:	f010 0f80 	tst.w	r0, #128	; 0x80
    95cc:	4a08      	ldr	r2, [pc, #32]	; (95f0 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    95ce:	bf0b      	itete	eq
    95d0:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    95d4:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    95d8:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    95dc:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    95e0:	bf08      	it	eq
    95e2:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    95e4:	1e43      	subs	r3, r0, #1
    95e6:	4258      	negs	r0, r3
    95e8:	4158      	adcs	r0, r3
    95ea:	4770      	bx	lr
        return false;
    95ec:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    95ee:	4770      	bx	lr
    95f0:	40027000 	.word	0x40027000

000095f4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    95f4:	4b04      	ldr	r3, [pc, #16]	; (9608 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    95f6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    95fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    95fe:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9602:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9606:	4770      	bx	lr
    9608:	40027000 	.word	0x40027000

0000960c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    960c:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    960e:	2208      	movs	r2, #8
    9610:	2100      	movs	r1, #0
{
    9612:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9614:	f003 f903 	bl	c81e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9618:	4b0e      	ldr	r3, [pc, #56]	; (9654 <nrfx_usbd_setup_get+0x48>)
    961a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    961e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9620:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9624:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9626:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    962a:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    962e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9632:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9634:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9638:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    963c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9640:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9642:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9646:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    964a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    964e:	80e3      	strh	r3, [r4, #6]
}
    9650:	bd10      	pop	{r4, pc}
    9652:	bf00      	nop
    9654:	40027000 	.word	0x40027000

00009658 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9658:	4b02      	ldr	r3, [pc, #8]	; (9664 <nrfx_usbd_setup_data_clear+0xc>)
    965a:	2201      	movs	r2, #1
    965c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    965e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9660:	4770      	bx	lr
    9662:	bf00      	nop
    9664:	40027000 	.word	0x40027000

00009668 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9668:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    966a:	f7ff fbf1 	bl	8e50 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    966e:	4b10      	ldr	r3, [pc, #64]	; (96b0 <ev_dma_epout0_handler+0x48>)
    9670:	7b9a      	ldrb	r2, [r3, #14]
    9672:	2a03      	cmp	r2, #3
    9674:	d106      	bne.n	9684 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9676:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    967a:	b002      	add	sp, #8
    967c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9680:	f7ff bbd6 	b.w	8e30 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9684:	681c      	ldr	r4, [r3, #0]
    9686:	b974      	cbnz	r4, 96a6 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9688:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    968c:	f7ff fbd0 	bl	8e30 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9690:	2306      	movs	r3, #6
    9692:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9696:	4b07      	ldr	r3, [pc, #28]	; (96b4 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9698:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    969c:	681b      	ldr	r3, [r3, #0]
    969e:	a801      	add	r0, sp, #4
    96a0:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    96a2:	b002      	add	sp, #8
    96a4:	bd10      	pop	{r4, pc}
    96a6:	b002      	add	sp, #8
    96a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    96ac:	f7ff bfd4 	b.w	9658 <nrfx_usbd_setup_data_clear>
    96b0:	20001e78 	.word	0x20001e78
    96b4:	20001fa0 	.word	0x20001fa0

000096b8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    96b8:	4b02      	ldr	r3, [pc, #8]	; (96c4 <nrfx_usbd_setup_clear+0xc>)
    96ba:	2201      	movs	r2, #1
    96bc:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    96be:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    96c0:	4770      	bx	lr
    96c2:	bf00      	nop
    96c4:	40027000 	.word	0x40027000

000096c8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    96c8:	4b02      	ldr	r3, [pc, #8]	; (96d4 <nrfx_usbd_setup_stall+0xc>)
    96ca:	2201      	movs	r2, #1
    96cc:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    96ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    96d0:	4770      	bx	lr
    96d2:	bf00      	nop
    96d4:	40027000 	.word	0x40027000

000096d8 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    96d8:	4b01      	ldr	r3, [pc, #4]	; (96e0 <nrfx_usbd_last_setup_dir_get+0x8>)
    96da:	7818      	ldrb	r0, [r3, #0]
    96dc:	4770      	bx	lr
    96de:	bf00      	nop
    96e0:	200021e5 	.word	0x200021e5

000096e4 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    96e4:	b510      	push	{r4, lr}
    96e6:	4602      	mov	r2, r0
	__asm__ volatile(
    96e8:	f04f 0320 	mov.w	r3, #32
    96ec:	f3ef 8411 	mrs	r4, BASEPRI
    96f0:	f383 8812 	msr	BASEPRI_MAX, r3
    96f4:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    96f8:	f003 fbc3 	bl	ce82 <ep2bit>
    96fc:	490d      	ldr	r1, [pc, #52]	; (9734 <nrfx_usbd_transfer_out_drop+0x50>)
    96fe:	2301      	movs	r3, #1
    9700:	fa03 f000 	lsl.w	r0, r3, r0
    9704:	680b      	ldr	r3, [r1, #0]
    9706:	ea23 0300 	bic.w	r3, r3, r0
    970a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    970c:	f012 0108 	ands.w	r1, r2, #8
    9710:	d10a      	bne.n	9728 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    9712:	f002 030f 	and.w	r3, r2, #15
    9716:	009b      	lsls	r3, r3, #2
    9718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    971c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    9720:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9724:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    9728:	f384 8811 	msr	BASEPRI, r4
    972c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9730:	bd10      	pop	{r4, pc}
    9732:	bf00      	nop
    9734:	20001f9c 	.word	0x20001f9c

00009738 <usbd_ep_abort>:
{
    9738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    973a:	4601      	mov	r1, r0
	__asm__ volatile(
    973c:	f04f 0320 	mov.w	r3, #32
    9740:	f3ef 8511 	mrs	r5, BASEPRI
    9744:	f383 8812 	msr	BASEPRI_MAX, r3
    9748:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    974c:	f7ff fa76 	bl	8c3c <ep_state_access>
    9750:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9752:	4608      	mov	r0, r1
    9754:	f003 fb95 	bl	ce82 <ep2bit>
    9758:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    975a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    975e:	fa02 f200 	lsl.w	r2, r2, r0
    9762:	482e      	ldr	r0, [pc, #184]	; (981c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    9764:	d119      	bne.n	979a <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9766:	6803      	ldr	r3, [r0, #0]
    9768:	ea32 0303 	bics.w	r3, r2, r3
    976c:	d00a      	beq.n	9784 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    976e:	4608      	mov	r0, r1
    9770:	f7ff ffb8 	bl	96e4 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    9774:	2303      	movs	r3, #3
    9776:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9778:	f385 8811 	msr	BASEPRI, r5
    977c:	f3bf 8f6f 	isb	sy
}
    9780:	b003      	add	sp, #12
    9782:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    9784:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9786:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9788:	4925      	ldr	r1, [pc, #148]	; (9820 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    978a:	ea23 0302 	bic.w	r3, r3, r2
    978e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9790:	680b      	ldr	r3, [r1, #0]
    9792:	ea23 0302 	bic.w	r3, r3, r2
    9796:	600b      	str	r3, [r1, #0]
    9798:	e7ec      	b.n	9774 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    979a:	070b      	lsls	r3, r1, #28
    979c:	d415      	bmi.n	97ca <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    979e:	2980      	cmp	r1, #128	; 0x80
    97a0:	4b20      	ldr	r3, [pc, #128]	; (9824 <usbd_ep_abort+0xec>)
    97a2:	d02f      	beq.n	9804 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    97a4:	f001 040f 	and.w	r4, r1, #15
    97a8:	f204 34da 	addw	r4, r4, #986	; 0x3da
    97ac:	0064      	lsls	r4, r4, #1
    97ae:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    97b2:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    97b6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    97ba:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    97bc:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    97c0:	433c      	orrs	r4, r7
    97c2:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    97c6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    97ca:	4f15      	ldr	r7, [pc, #84]	; (9820 <usbd_ep_abort+0xe8>)
    97cc:	6804      	ldr	r4, [r0, #0]
    97ce:	683b      	ldr	r3, [r7, #0]
    97d0:	ea64 0c03 	orn	ip, r4, r3
    97d4:	ea1c 0f02 	tst.w	ip, r2
    97d8:	d0ce      	beq.n	9778 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    97da:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    97dc:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    97e0:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    97e2:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    97e4:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    97e6:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    97e8:	2303      	movs	r3, #3
    97ea:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    97ec:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    97f0:	4b0d      	ldr	r3, [pc, #52]	; (9828 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    97f2:	f88d 1006 	strb.w	r1, [sp, #6]
    97f6:	2206      	movs	r2, #6
            m_event_handler(&evt);
    97f8:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    97fa:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    97fe:	a801      	add	r0, sp, #4
    9800:	4798      	blx	r3
    9802:	e7b9      	b.n	9778 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9804:	f240 74b4 	movw	r4, #1972	; 0x7b4
    9808:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    980c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9810:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9814:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9816:	f044 0404 	orr.w	r4, r4, #4
    981a:	e7d1      	b.n	97c0 <usbd_ep_abort+0x88>
    981c:	20001f98 	.word	0x20001f98
    9820:	20001f9c 	.word	0x20001f9c
    9824:	40027000 	.word	0x40027000
    9828:	20001fa0 	.word	0x20001fa0

0000982c <ev_setup_handler>:
{
    982c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    982e:	4b14      	ldr	r3, [pc, #80]	; (9880 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9830:	4c14      	ldr	r4, [pc, #80]	; (9884 <ev_setup_handler+0x58>)
    9832:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    9836:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    9838:	4e13      	ldr	r6, [pc, #76]	; (9888 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    983a:	43da      	mvns	r2, r3
    983c:	4b13      	ldr	r3, [pc, #76]	; (988c <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    983e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9840:	681b      	ldr	r3, [r3, #0]
    9842:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9844:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9846:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    9848:	f003 fb1b 	bl	ce82 <ep2bit>
    984c:	2301      	movs	r3, #1
    984e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9850:	4213      	tst	r3, r2
    9852:	d002      	beq.n	985a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    9854:	4608      	mov	r0, r1
    9856:	f7ff ff6f 	bl	9738 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    985a:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    985e:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    9862:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    9864:	f7ff fae4 	bl	8e30 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9868:	6823      	ldr	r3, [r4, #0]
    986a:	f043 0301 	orr.w	r3, r3, #1
    986e:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    9870:	2305      	movs	r3, #5
    9872:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    9874:	4b06      	ldr	r3, [pc, #24]	; (9890 <ev_setup_handler+0x64>)
    9876:	a801      	add	r0, sp, #4
    9878:	681b      	ldr	r3, [r3, #0]
    987a:	4798      	blx	r3
}
    987c:	b002      	add	sp, #8
    987e:	bd70      	pop	{r4, r5, r6, pc}
    9880:	40027000 	.word	0x40027000
    9884:	20001f9c 	.word	0x20001f9c
    9888:	200021e5 	.word	0x200021e5
    988c:	20001f98 	.word	0x20001f98
    9890:	20001fa0 	.word	0x20001fa0

00009894 <nrfx_usbd_irq_handler>:
{
    9894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    9898:	4b1a      	ldr	r3, [pc, #104]	; (9904 <nrfx_usbd_irq_handler+0x70>)
    989a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    989e:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    98a0:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    98a2:	461d      	mov	r5, r3
    while (to_process)
    98a4:	b970      	cbnz	r0, 98c4 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    98a6:	4f18      	ldr	r7, [pc, #96]	; (9908 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    98a8:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    98ac:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    98b0:	f04f 0801 	mov.w	r8, #1
    while (active)
    98b4:	b9bc      	cbnz	r4, 98e6 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    98b6:	f7ff fd63 	bl	9380 <usbd_dmareq_process>
    if (setup_active)
    98ba:	b306      	cbz	r6, 98fe <nrfx_usbd_irq_handler+0x6a>
}
    98bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    98c0:	f7ff bfb4 	b.w	982c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    98c4:	fa90 f2a0 	rbit	r2, r0
    98c8:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    98cc:	490f      	ldr	r1, [pc, #60]	; (990c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    98ce:	0096      	lsls	r6, r2, #2
    98d0:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    98d2:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    98d6:	680e      	ldr	r6, [r1, #0]
    if (ret)
    98d8:	b116      	cbz	r6, 98e0 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    98da:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    98dc:	6809      	ldr	r1, [r1, #0]
    98de:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    98e0:	ea20 0002 	bic.w	r0, r0, r2
    98e4:	e7de      	b.n	98a4 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    98e6:	fa94 f5a4 	rbit	r5, r4
    98ea:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    98ee:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    98f2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    98f6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    98f8:	ea24 0405 	bic.w	r4, r4, r5
    98fc:	e7da      	b.n	98b4 <nrfx_usbd_irq_handler+0x20>
}
    98fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9902:	bf00      	nop
    9904:	40027000 	.word	0x40027000
    9908:	0000dcc4 	.word	0x0000dcc4
    990c:	40027100 	.word	0x40027100

00009910 <nrfx_usbd_stop>:
{
    9910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9912:	4b1b      	ldr	r3, [pc, #108]	; (9980 <nrfx_usbd_stop+0x70>)
    9914:	2280      	movs	r2, #128	; 0x80
    9916:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    991a:	2027      	movs	r0, #39	; 0x27
    991c:	f7fb f9be 	bl	4c9c <arch_irq_is_enabled>
    9920:	b1b8      	cbz	r0, 9952 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    9922:	4e18      	ldr	r6, [pc, #96]	; (9984 <nrfx_usbd_stop+0x74>)
    9924:	4b18      	ldr	r3, [pc, #96]	; (9988 <nrfx_usbd_stop+0x78>)
    9926:	6834      	ldr	r4, [r6, #0]
    9928:	681b      	ldr	r3, [r3, #0]
    992a:	0c24      	lsrs	r4, r4, #16
    992c:	0424      	lsls	r4, r4, #16
    992e:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    9930:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    9932:	b97c      	cbnz	r4, 9954 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9934:	4d15      	ldr	r5, [pc, #84]	; (998c <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9936:	f240 13ff 	movw	r3, #511	; 0x1ff
    993a:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    993c:	2027      	movs	r0, #39	; 0x27
    993e:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9942:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    9946:	f7fb f995 	bl	4c74 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    994a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    994e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    9952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9954:	fa94 f5a4 	rbit	r5, r4
    9958:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    995c:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    995e:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9960:	bfc6      	itte	gt
    9962:	f1a5 0010 	subgt.w	r0, r5, #16
    9966:	b2c0      	uxtbgt	r0, r0
    9968:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    996c:	0703      	lsls	r3, r0, #28
    996e:	d401      	bmi.n	9974 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    9970:	f7ff fee2 	bl	9738 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    9974:	fa07 f505 	lsl.w	r5, r7, r5
    9978:	ea24 0405 	bic.w	r4, r4, r5
    997c:	e7d9      	b.n	9932 <nrfx_usbd_stop+0x22>
    997e:	bf00      	nop
    9980:	e000e100 	.word	0xe000e100
    9984:	20001f9c 	.word	0x20001f9c
    9988:	20001f98 	.word	0x20001f98
    998c:	40027000 	.word	0x40027000

00009990 <nrfx_usbd_disable>:
{
    9990:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9992:	f7ff ffbd 	bl	9910 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9996:	4b08      	ldr	r3, [pc, #32]	; (99b8 <nrfx_usbd_disable+0x28>)
    9998:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    999c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    99a0:	2200      	movs	r2, #0
    99a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    99a6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    99aa:	f7ff fa51 	bl	8e50 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    99ae:	4b03      	ldr	r3, [pc, #12]	; (99bc <nrfx_usbd_disable+0x2c>)
    99b0:	2201      	movs	r2, #1
    99b2:	701a      	strb	r2, [r3, #0]
}
    99b4:	bd08      	pop	{r3, pc}
    99b6:	bf00      	nop
    99b8:	40027000 	.word	0x40027000
    99bc:	200021e7 	.word	0x200021e7

000099c0 <nrfx_usbd_ep_disable>:
{
    99c0:	b510      	push	{r4, lr}
    99c2:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    99c4:	f7ff feb8 	bl	9738 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    99c8:	4a10      	ldr	r2, [pc, #64]	; (9a0c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    99ca:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    99ce:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    99d2:	f04f 0301 	mov.w	r3, #1
    99d6:	bf14      	ite	ne
    99d8:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    99dc:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    99e0:	fa03 f300 	lsl.w	r3, r3, r0
    99e4:	ea6f 0303 	mvn.w	r3, r3
    99e8:	bf15      	itete	ne
    99ea:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    99ec:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    99ee:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    99f2:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    99f6:	bf14      	ite	ne
    99f8:	4b05      	ldrne	r3, [pc, #20]	; (9a10 <nrfx_usbd_ep_disable+0x50>)
    99fa:	4b06      	ldreq	r3, [pc, #24]	; (9a14 <nrfx_usbd_ep_disable+0x54>)
    99fc:	5c1a      	ldrb	r2, [r3, r0]
    99fe:	2301      	movs	r3, #1
    9a00:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    9a02:	4a02      	ldr	r2, [pc, #8]	; (9a0c <nrfx_usbd_ep_disable+0x4c>)
    9a04:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9a08:	bd10      	pop	{r4, pc}
    9a0a:	bf00      	nop
    9a0c:	40027000 	.word	0x40027000
    9a10:	0000eeaf 	.word	0x0000eeaf
    9a14:	0000eea6 	.word	0x0000eea6

00009a18 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9a18:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    9a1c:	b570      	push	{r4, r5, r6, lr}
    9a1e:	4924      	ldr	r1, [pc, #144]	; (9ab0 <nrfx_usbd_ep_enable+0x98>)
    9a20:	4604      	mov	r4, r0
    9a22:	f000 030f 	and.w	r3, r0, #15
    9a26:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9a2a:	d012      	beq.n	9a52 <nrfx_usbd_ep_enable+0x3a>
    9a2c:	4a21      	ldr	r2, [pc, #132]	; (9ab4 <nrfx_usbd_ep_enable+0x9c>)
    9a2e:	5cd2      	ldrb	r2, [r2, r3]
    9a30:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    9a34:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    9a38:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    9a3c:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9a3e:	07d0      	lsls	r0, r2, #31
    9a40:	d406      	bmi.n	9a50 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    9a42:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    9a46:	fa05 f303 	lsl.w	r3, r5, r3
    9a4a:	4313      	orrs	r3, r2
    9a4c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    9a50:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9a52:	4a19      	ldr	r2, [pc, #100]	; (9ab8 <nrfx_usbd_ep_enable+0xa0>)
    9a54:	5cd2      	ldrb	r2, [r2, r3]
    9a56:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    9a5a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    9a5e:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    9a62:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9a64:	07d2      	lsls	r2, r2, #31
    9a66:	d4f3      	bmi.n	9a50 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    9a68:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    9a6c:	fa05 f203 	lsl.w	r2, r5, r3
    9a70:	4332      	orrs	r2, r6
    9a72:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9a76:	2b00      	cmp	r3, #0
    9a78:	d0ea      	beq.n	9a50 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    9a7a:	0703      	lsls	r3, r0, #28
    9a7c:	d4e8      	bmi.n	9a50 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    9a7e:	f04f 0320 	mov.w	r3, #32
    9a82:	f3ef 8611 	mrs	r6, BASEPRI
    9a86:	f383 8812 	msr	BASEPRI_MAX, r3
    9a8a:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    9a8e:	f7ff fe29 	bl	96e4 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9a92:	4620      	mov	r0, r4
    9a94:	f003 f9f5 	bl	ce82 <ep2bit>
    9a98:	4a08      	ldr	r2, [pc, #32]	; (9abc <nrfx_usbd_ep_enable+0xa4>)
    9a9a:	6813      	ldr	r3, [r2, #0]
    9a9c:	fa05 f000 	lsl.w	r0, r5, r0
    9aa0:	ea23 0300 	bic.w	r3, r3, r0
    9aa4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    9aa6:	f386 8811 	msr	BASEPRI, r6
    9aaa:	f3bf 8f6f 	isb	sy
}
    9aae:	e7cf      	b.n	9a50 <nrfx_usbd_ep_enable+0x38>
    9ab0:	40027000 	.word	0x40027000
    9ab4:	0000eeaf 	.word	0x0000eeaf
    9ab8:	0000eea6 	.word	0x0000eea6
    9abc:	20001f98 	.word	0x20001f98

00009ac0 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9ac0:	0603      	lsls	r3, r0, #24
{
    9ac2:	b510      	push	{r4, lr}
    9ac4:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9ac6:	d405      	bmi.n	9ad4 <nrfx_usbd_ep_stall_clear+0x14>
    9ac8:	f7ff fd7a 	bl	95c0 <nrfx_usbd_ep_stall_check>
    9acc:	b110      	cbz	r0, 9ad4 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    9ace:	4620      	mov	r0, r4
    9ad0:	f7ff fe08 	bl	96e4 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    9ad4:	4b01      	ldr	r3, [pc, #4]	; (9adc <nrfx_usbd_ep_stall_clear+0x1c>)
    9ad6:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    9ada:	bd10      	pop	{r4, pc}
    9adc:	40027000 	.word	0x40027000

00009ae0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    9ae0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    9ae2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9ae6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    9ae8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    9aea:	6002      	str	r2, [r0, #0]
}
    9aec:	4802      	ldr	r0, [pc, #8]	; (9af8 <nrf_gpio_pin_port_decode+0x18>)
    9aee:	bf18      	it	ne
    9af0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    9af4:	4770      	bx	lr
    9af6:	bf00      	nop
    9af8:	50000300 	.word	0x50000300

00009afc <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    9afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9afe:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    9b00:	f003 fa2a 	bl	cf58 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    9b04:	4608      	mov	r0, r1
    9b06:	f003 fa27 	bl	cf58 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9b0a:	a801      	add	r0, sp, #4
    9b0c:	9601      	str	r6, [sp, #4]
    9b0e:	f7ff ffe7 	bl	9ae0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9b12:	9b01      	ldr	r3, [sp, #4]
    9b14:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    9b18:	460c      	mov	r4, r1
    9b1a:	f240 610d 	movw	r1, #1549	; 0x60d
    9b1e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9b22:	a801      	add	r0, sp, #4
    9b24:	9401      	str	r4, [sp, #4]
    9b26:	f7ff ffdb 	bl	9ae0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    9b2a:	9b01      	ldr	r3, [sp, #4]
    9b2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    9b30:	2509      	movs	r5, #9
    9b32:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    9b36:	2004      	movs	r0, #4
    9b38:	f003 f87c 	bl	cc34 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9b3c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9b3e:	a801      	add	r0, sp, #4
    9b40:	9401      	str	r4, [sp, #4]
    9b42:	f7ff ffcd 	bl	9ae0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9b46:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    9b48:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9b4c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    9b4e:	07db      	lsls	r3, r3, #31
    9b50:	d415      	bmi.n	9b7e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9b52:	a801      	add	r0, sp, #4
    9b54:	9601      	str	r6, [sp, #4]
    9b56:	f7ff ffc3 	bl	9ae0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9b5a:	9b01      	ldr	r3, [sp, #4]
    9b5c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    9b60:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    9b64:	2004      	movs	r0, #4
    9b66:	f003 f865 	bl	cc34 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    9b6a:	4630      	mov	r0, r6
    9b6c:	f003 f9f4 	bl	cf58 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    9b70:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    9b72:	2004      	movs	r0, #4
    9b74:	f003 f85e 	bl	cc34 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    9b78:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    9b7c:	d1df      	bne.n	9b3e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9b7e:	a801      	add	r0, sp, #4
    9b80:	9401      	str	r4, [sp, #4]
    9b82:	f7ff ffad 	bl	9ae0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9b86:	9a01      	ldr	r2, [sp, #4]
    9b88:	2301      	movs	r3, #1
    9b8a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9b8c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    9b90:	2004      	movs	r0, #4
    9b92:	f003 f84f 	bl	cc34 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    9b96:	4620      	mov	r0, r4
    9b98:	f003 f9de 	bl	cf58 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    9b9c:	2004      	movs	r0, #4
    9b9e:	f003 f849 	bl	cc34 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9ba2:	a801      	add	r0, sp, #4
    9ba4:	9401      	str	r4, [sp, #4]
    9ba6:	f7ff ff9b 	bl	9ae0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9baa:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    9bac:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    9bb0:	4803      	ldr	r0, [pc, #12]	; (9bc0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9bb2:	40d3      	lsrs	r3, r2
    9bb4:	f003 0301 	and.w	r3, r3, #1
    9bb8:	1ac0      	subs	r0, r0, r3
    9bba:	b003      	add	sp, #12
    9bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bbe:	bf00      	nop
    9bc0:	0bad0001 	.word	0x0bad0001

00009bc4 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    9bc4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    9bc6:	4605      	mov	r5, r0
    9bc8:	b910      	cbnz	r0, 9bd0 <z_impl_device_get_binding+0xc>
		return NULL;
    9bca:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    9bcc:	4620      	mov	r0, r4
    9bce:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    9bd0:	7803      	ldrb	r3, [r0, #0]
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d0f9      	beq.n	9bca <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    9bd6:	4c0e      	ldr	r4, [pc, #56]	; (9c10 <z_impl_device_get_binding+0x4c>)
    9bd8:	4e0e      	ldr	r6, [pc, #56]	; (9c14 <z_impl_device_get_binding+0x50>)
    9bda:	42b4      	cmp	r4, r6
    9bdc:	d108      	bne.n	9bf0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    9bde:	4c0c      	ldr	r4, [pc, #48]	; (9c10 <z_impl_device_get_binding+0x4c>)
    9be0:	42b4      	cmp	r4, r6
    9be2:	d0f2      	beq.n	9bca <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    9be4:	4620      	mov	r0, r4
    9be6:	f003 f9c5 	bl	cf74 <z_device_is_ready>
    9bea:	b950      	cbnz	r0, 9c02 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    9bec:	3418      	adds	r4, #24
    9bee:	e7f7      	b.n	9be0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    9bf0:	4620      	mov	r0, r4
    9bf2:	f003 f9bf 	bl	cf74 <z_device_is_ready>
    9bf6:	b110      	cbz	r0, 9bfe <z_impl_device_get_binding+0x3a>
    9bf8:	6823      	ldr	r3, [r4, #0]
    9bfa:	42ab      	cmp	r3, r5
    9bfc:	d0e6      	beq.n	9bcc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    9bfe:	3418      	adds	r4, #24
    9c00:	e7eb      	b.n	9bda <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    9c02:	6821      	ldr	r1, [r4, #0]
    9c04:	4628      	mov	r0, r5
    9c06:	f002 fdf3 	bl	c7f0 <strcmp>
    9c0a:	2800      	cmp	r0, #0
    9c0c:	d1ee      	bne.n	9bec <z_impl_device_get_binding+0x28>
    9c0e:	e7dd      	b.n	9bcc <z_impl_device_get_binding+0x8>
    9c10:	0000d718 	.word	0x0000d718
    9c14:	0000d7d8 	.word	0x0000d7d8

00009c18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c1c:	b086      	sub	sp, #24
    9c1e:	4605      	mov	r5, r0
    9c20:	af00      	add	r7, sp, #0
    9c22:	460e      	mov	r6, r1
	__asm__ volatile(
    9c24:	f04f 0320 	mov.w	r3, #32
    9c28:	f3ef 8811 	mrs	r8, BASEPRI
    9c2c:	f383 8812 	msr	BASEPRI_MAX, r3
    9c30:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9c34:	f000 fffc 	bl	ac30 <z_impl_z_current_get>
    9c38:	2d04      	cmp	r5, #4
    9c3a:	bf96      	itet	ls
    9c3c:	4b2c      	ldrls	r3, [pc, #176]	; (9cf0 <z_fatal_error+0xd8>)
    9c3e:	4b2d      	ldrhi	r3, [pc, #180]	; (9cf4 <z_fatal_error+0xdc>)
    9c40:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    9c44:	46e9      	mov	r9, sp
    9c46:	b08a      	sub	sp, #40	; 0x28
    9c48:	4604      	mov	r4, r0
    9c4a:	466a      	mov	r2, sp
    9c4c:	492a      	ldr	r1, [pc, #168]	; (9cf8 <z_fatal_error+0xe0>)
    9c4e:	61d3      	str	r3, [r2, #28]
    9c50:	f240 3301 	movw	r3, #769	; 0x301
    9c54:	8493      	strh	r3, [r2, #36]	; 0x24
    9c56:	f04f 0a00 	mov.w	sl, #0
    9c5a:	4b28      	ldr	r3, [pc, #160]	; (9cfc <z_fatal_error+0xe4>)
    9c5c:	f8c2 a020 	str.w	sl, [r2, #32]
    9c60:	e9c2 1505 	strd	r1, r5, [r2, #20]
    9c64:	f842 3f10 	str.w	r3, [r2, #16]!
    9c68:	4825      	ldr	r0, [pc, #148]	; (9d00 <z_fatal_error+0xe8>)
    9c6a:	4653      	mov	r3, sl
    9c6c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    9c70:	f7f9 f84e 	bl	2d10 <z_impl_z_log_msg_static_create>
    9c74:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    9c76:	b17e      	cbz	r6, 9c98 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    9c78:	69f3      	ldr	r3, [r6, #28]
    9c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9c7e:	b15b      	cbz	r3, 9c98 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    9c80:	4b20      	ldr	r3, [pc, #128]	; (9d04 <z_fatal_error+0xec>)
    9c82:	617b      	str	r3, [r7, #20]
    9c84:	2302      	movs	r3, #2
    9c86:	613b      	str	r3, [r7, #16]
    9c88:	481d      	ldr	r0, [pc, #116]	; (9d00 <z_fatal_error+0xe8>)
    9c8a:	4653      	mov	r3, sl
    9c8c:	f107 0210 	add.w	r2, r7, #16
    9c90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9c94:	f7f9 f83c 	bl	2d10 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    9c98:	b12c      	cbz	r4, 9ca6 <z_fatal_error+0x8e>
    9c9a:	4620      	mov	r0, r4
    9c9c:	f003 f9cf 	bl	d03e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    9ca0:	b108      	cbz	r0, 9ca6 <z_fatal_error+0x8e>
    9ca2:	7803      	ldrb	r3, [r0, #0]
    9ca4:	b903      	cbnz	r3, 9ca8 <z_fatal_error+0x90>
		thread_name = "unknown";
    9ca6:	4818      	ldr	r0, [pc, #96]	; (9d08 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    9ca8:	46e9      	mov	r9, sp
    9caa:	b08a      	sub	sp, #40	; 0x28
    9cac:	466a      	mov	r2, sp
    9cae:	4b17      	ldr	r3, [pc, #92]	; (9d0c <z_fatal_error+0xf4>)
    9cb0:	61d0      	str	r0, [r2, #28]
    9cb2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9cb6:	f240 3301 	movw	r3, #769	; 0x301
    9cba:	8413      	strh	r3, [r2, #32]
    9cbc:	4b14      	ldr	r3, [pc, #80]	; (9d10 <z_fatal_error+0xf8>)
    9cbe:	f842 3f10 	str.w	r3, [r2, #16]!
    9cc2:	2300      	movs	r3, #0
    9cc4:	480e      	ldr	r0, [pc, #56]	; (9d00 <z_fatal_error+0xe8>)
    9cc6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    9cca:	f7f9 f821 	bl	2d10 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    9cce:	4631      	mov	r1, r6
    9cd0:	46cd      	mov	sp, r9
    9cd2:	4628      	mov	r0, r5
    9cd4:	f7fd feb4 	bl	7a40 <k_sys_fatal_error_handler>
	__asm__ volatile(
    9cd8:	f388 8811 	msr	BASEPRI, r8
    9cdc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9ce0:	4620      	mov	r0, r4
    9ce2:	f7fb fc6b 	bl	55bc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9ce6:	3718      	adds	r7, #24
    9ce8:	46bd      	mov	sp, r7
    9cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cee:	bf00      	nop
    9cf0:	0000dd2c 	.word	0x0000dd2c
    9cf4:	0000eec2 	.word	0x0000eec2
    9cf8:	0000eed8 	.word	0x0000eed8
    9cfc:	01000005 	.word	0x01000005
    9d00:	0000d9fc 	.word	0x0000d9fc
    9d04:	0000ef00 	.word	0x0000ef00
    9d08:	0000eed0 	.word	0x0000eed0
    9d0c:	0000ef21 	.word	0x0000ef21
    9d10:	01000004 	.word	0x01000004

00009d14 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9d14:	4b10      	ldr	r3, [pc, #64]	; (9d58 <z_sys_init_run_level+0x44>)
{
    9d16:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9d18:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9d1c:	3001      	adds	r0, #1
    9d1e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    9d22:	42a6      	cmp	r6, r4
    9d24:	d800      	bhi.n	9d28 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    9d26:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    9d28:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    9d2c:	b18d      	cbz	r5, 9d52 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    9d2e:	4628      	mov	r0, r5
    9d30:	4798      	blx	r3
			if (rc != 0) {
    9d32:	b138      	cbz	r0, 9d44 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    9d34:	2800      	cmp	r0, #0
    9d36:	bfb8      	it	lt
    9d38:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    9d3a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    9d3c:	28ff      	cmp	r0, #255	; 0xff
    9d3e:	bfa8      	it	ge
    9d40:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    9d42:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    9d44:	68ea      	ldr	r2, [r5, #12]
    9d46:	7853      	ldrb	r3, [r2, #1]
    9d48:	f043 0301 	orr.w	r3, r3, #1
    9d4c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9d4e:	3408      	adds	r4, #8
    9d50:	e7e7      	b.n	9d22 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    9d52:	4798      	blx	r3
    9d54:	e7fb      	b.n	9d4e <z_sys_init_run_level+0x3a>
    9d56:	bf00      	nop
    9d58:	0000dd40 	.word	0x0000dd40

00009d5c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9d5c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    9d5e:	4b0a      	ldr	r3, [pc, #40]	; (9d88 <bg_thread_main+0x2c>)
    9d60:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    9d62:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    9d64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    9d66:	f7ff ffd5 	bl	9d14 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    9d6a:	f001 f9f5 	bl	b158 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    9d6e:	2004      	movs	r0, #4
    9d70:	f7ff ffd0 	bl	9d14 <z_sys_init_run_level>

	z_init_static_threads();
    9d74:	f000 f95e 	bl	a034 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    9d78:	f7f7 fc32 	bl	15e0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9d7c:	4a03      	ldr	r2, [pc, #12]	; (9d8c <bg_thread_main+0x30>)
    9d7e:	7b13      	ldrb	r3, [r2, #12]
    9d80:	f023 0301 	bic.w	r3, r3, #1
    9d84:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    9d86:	bd08      	pop	{r3, pc}
    9d88:	200021e8 	.word	0x200021e8
    9d8c:	20000af0 	.word	0x20000af0

00009d90 <z_bss_zero>:
{
    9d90:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    9d92:	4803      	ldr	r0, [pc, #12]	; (9da0 <z_bss_zero+0x10>)
    9d94:	4a03      	ldr	r2, [pc, #12]	; (9da4 <z_bss_zero+0x14>)
    9d96:	2100      	movs	r1, #0
    9d98:	1a12      	subs	r2, r2, r0
    9d9a:	f003 f8f6 	bl	cf8a <z_early_memset>
}
    9d9e:	bd08      	pop	{r3, pc}
    9da0:	20000450 	.word	0x20000450
    9da4:	200021ec 	.word	0x200021ec

00009da8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    9da8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    9daa:	2300      	movs	r3, #0
{
    9dac:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    9dae:	2201      	movs	r2, #1
    9db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    9db4:	4e13      	ldr	r6, [pc, #76]	; (9e04 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9db6:	4d14      	ldr	r5, [pc, #80]	; (9e08 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    9db8:	9301      	str	r3, [sp, #4]
    9dba:	220f      	movs	r2, #15
    9dbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9dc0:	4912      	ldr	r1, [pc, #72]	; (9e0c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9dc2:	2314      	movs	r3, #20
    9dc4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    9dc8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    9dcc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    9dce:	f44f 70c0 	mov.w	r0, #384	; 0x180
    9dd2:	fb00 1104 	mla	r1, r0, r4, r1
    9dd6:	4b0e      	ldr	r3, [pc, #56]	; (9e10 <z_init_cpu+0x68>)
    9dd8:	9500      	str	r5, [sp, #0]
    9dda:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9dde:	4630      	mov	r0, r6
    9de0:	f000 f8ca 	bl	9f78 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9de4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9de6:	4a0b      	ldr	r2, [pc, #44]	; (9e14 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    9de8:	60ee      	str	r6, [r5, #12]
    9dea:	f023 0304 	bic.w	r3, r3, #4
    9dee:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9df0:	f44f 6304 	mov.w	r3, #2112	; 0x840
    9df4:	fb04 3303 	mla	r3, r4, r3, r3
    9df8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    9dfa:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    9dfc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    9dfe:	b006      	add	sp, #24
    9e00:	bd70      	pop	{r4, r5, r6, pc}
    9e02:	bf00      	nop
    9e04:	20000a70 	.word	0x20000a70
    9e08:	20001fa4 	.word	0x20001fa4
    9e0c:	20003600 	.word	0x20003600
    9e10:	0000a0ed 	.word	0x0000a0ed
    9e14:	20002dc0 	.word	0x20002dc0

00009e18 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    9e18:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    9e1a:	2000      	movs	r0, #0
{
    9e1c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    9e1e:	f7ff ff79 	bl	9d14 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    9e22:	4b2e      	ldr	r3, [pc, #184]	; (9edc <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9e24:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    9e28:	4d2d      	ldr	r5, [pc, #180]	; (9ee0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    9e2a:	4e2e      	ldr	r6, [pc, #184]	; (9ee4 <z_cstart+0xcc>)
    9e2c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9e2e:	4f2e      	ldr	r7, [pc, #184]	; (9ee8 <z_cstart+0xd0>)
    9e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    9e34:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9e36:	2400      	movs	r4, #0
    9e38:	23e0      	movs	r3, #224	; 0xe0
    9e3a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    9e3e:	77ec      	strb	r4, [r5, #31]
    9e40:	762c      	strb	r4, [r5, #24]
    9e42:	766c      	strb	r4, [r5, #25]
    9e44:	76ac      	strb	r4, [r5, #26]
    9e46:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9e4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9e4c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9e50:	626b      	str	r3, [r5, #36]	; 0x24
    9e52:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    9e56:	f7fb fb25 	bl	54a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    9e5a:	f7fa fe77 	bl	4b4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e62:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9e64:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    9e66:	f7fb fc79 	bl	575c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    9e6a:	f7fb fbbd 	bl	55e8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    9e6e:	f7f8 fddb 	bl	2a28 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    9e72:	f240 1301 	movw	r3, #257	; 0x101
    9e76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    9e7a:	ab06      	add	r3, sp, #24
    9e7c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    9e7e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    9e82:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9e84:	f003 f875 	bl	cf72 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    9e88:	2001      	movs	r0, #1
    9e8a:	f7ff ff43 	bl	9d14 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9e8e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    9e90:	4d16      	ldr	r5, [pc, #88]	; (9eec <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9e92:	f7ff ff3f 	bl	9d14 <z_sys_init_run_level>
	z_sched_init();
    9e96:	f000 fe0d 	bl	aab4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9e9a:	4b15      	ldr	r3, [pc, #84]	; (9ef0 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    9e9c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9e9e:	9305      	str	r3, [sp, #20]
    9ea0:	2301      	movs	r3, #1
    9ea2:	4914      	ldr	r1, [pc, #80]	; (9ef4 <z_cstart+0xdc>)
    9ea4:	9400      	str	r4, [sp, #0]
    9ea6:	e9cd 4303 	strd	r4, r3, [sp, #12]
    9eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9eae:	463b      	mov	r3, r7
    9eb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9eb4:	4628      	mov	r0, r5
    9eb6:	f000 f85f 	bl	9f78 <z_setup_new_thread>
    9eba:	7b6a      	ldrb	r2, [r5, #13]
    9ebc:	4606      	mov	r6, r0
    9ebe:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    9ec2:	4628      	mov	r0, r5
    9ec4:	736a      	strb	r2, [r5, #13]
    9ec6:	f003 f9fe 	bl	d2c6 <z_ready_thread>
	z_init_cpu(0);
    9eca:	4620      	mov	r0, r4
    9ecc:	f7ff ff6c 	bl	9da8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9ed0:	463a      	mov	r2, r7
    9ed2:	4631      	mov	r1, r6
    9ed4:	4628      	mov	r0, r5
    9ed6:	f7fa ffad 	bl	4e34 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    9eda:	bf00      	nop
    9edc:	20003600 	.word	0x20003600
    9ee0:	e000ed00 	.word	0xe000ed00
    9ee4:	20001fa4 	.word	0x20001fa4
    9ee8:	00009d5d 	.word	0x00009d5d
    9eec:	20000af0 	.word	0x20000af0
    9ef0:	0000ef83 	.word	0x0000ef83
    9ef4:	20003780 	.word	0x20003780

00009ef8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    9ef8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9efa:	4c06      	ldr	r4, [pc, #24]	; (9f14 <init_mem_slab_module+0x1c>)
    9efc:	4d06      	ldr	r5, [pc, #24]	; (9f18 <init_mem_slab_module+0x20>)
	int rc = 0;
    9efe:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9f00:	42ac      	cmp	r4, r5
    9f02:	d300      	bcc.n	9f06 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    9f04:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    9f06:	4620      	mov	r0, r4
    9f08:	f003 f843 	bl	cf92 <create_free_list>
		if (rc < 0) {
    9f0c:	2800      	cmp	r0, #0
    9f0e:	dbf9      	blt.n	9f04 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9f10:	341c      	adds	r4, #28
    9f12:	e7f5      	b.n	9f00 <init_mem_slab_module+0x8>
    9f14:	20000298 	.word	0x20000298
    9f18:	200002b4 	.word	0x200002b4

00009f1c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9f1e:	460c      	mov	r4, r1
	__asm__ volatile(
    9f20:	f04f 0520 	mov.w	r5, #32
    9f24:	f3ef 8111 	mrs	r1, BASEPRI
    9f28:	f385 8812 	msr	BASEPRI_MAX, r5
    9f2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    9f30:	6945      	ldr	r5, [r0, #20]
    9f32:	b15d      	cbz	r5, 9f4c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    9f34:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9f36:	682b      	ldr	r3, [r5, #0]
    9f38:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9f3a:	6983      	ldr	r3, [r0, #24]
    9f3c:	3301      	adds	r3, #1
    9f3e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    9f40:	2000      	movs	r0, #0
	__asm__ volatile(
    9f42:	f381 8811 	msr	BASEPRI, r1
    9f46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    9f4a:	e011      	b.n	9f70 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    9f4c:	ea52 0603 	orrs.w	r6, r2, r3
    9f50:	d103      	bne.n	9f5a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    9f52:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9f54:	f06f 000b 	mvn.w	r0, #11
    9f58:	e7f3      	b.n	9f42 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    9f5a:	e9cd 2300 	strd	r2, r3, [sp]
    9f5e:	4602      	mov	r2, r0
    9f60:	3008      	adds	r0, #8
    9f62:	f000 fcb1 	bl	a8c8 <z_pend_curr>
		if (result == 0) {
    9f66:	b918      	cbnz	r0, 9f70 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9f68:	4b02      	ldr	r3, [pc, #8]	; (9f74 <k_mem_slab_alloc+0x58>)
    9f6a:	689b      	ldr	r3, [r3, #8]
    9f6c:	695b      	ldr	r3, [r3, #20]
    9f6e:	6023      	str	r3, [r4, #0]
}
    9f70:	b002      	add	sp, #8
    9f72:	bd70      	pop	{r4, r5, r6, pc}
    9f74:	20001fa4 	.word	0x20001fa4

00009f78 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9f78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    9f7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9f7e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9f80:	2604      	movs	r6, #4
    9f82:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9f84:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    9f86:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9f88:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    9f8c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9f8e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9f90:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    9f96:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9f98:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    9f9c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    9f9e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    9fa2:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    9fa6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9fa8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    9faa:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9fac:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9fb0:	9202      	str	r2, [sp, #8]
    9fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9fb4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    9fb6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9fba:	9200      	str	r2, [sp, #0]
    9fbc:	4642      	mov	r2, r8
{
    9fbe:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9fc0:	f7fa ff06 	bl	4dd0 <arch_new_thread>
	if (!_current) {
    9fc4:	4b04      	ldr	r3, [pc, #16]	; (9fd8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    9fc6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9fc8:	689b      	ldr	r3, [r3, #8]
    9fca:	b103      	cbz	r3, 9fce <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    9fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    9fce:	6723      	str	r3, [r4, #112]	; 0x70
}
    9fd0:	4640      	mov	r0, r8
    9fd2:	b004      	add	sp, #16
    9fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fd8:	20001fa4 	.word	0x20001fa4

00009fdc <z_impl_k_thread_create>:
{
    9fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fde:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9fe0:	2500      	movs	r5, #0
    9fe2:	9505      	str	r5, [sp, #20]
    9fe4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    9fe6:	9504      	str	r5, [sp, #16]
    9fe8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9fea:	9503      	str	r5, [sp, #12]
    9fec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9fee:	9502      	str	r5, [sp, #8]
{
    9ff0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9ff4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9ff6:	9501      	str	r5, [sp, #4]
    9ff8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9ffa:	9500      	str	r5, [sp, #0]
{
    9ffc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9ffe:	f7ff ffbb 	bl	9f78 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a002:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    a006:	bf08      	it	eq
    a008:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    a00c:	d005      	beq.n	a01a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a00e:	ea56 0307 	orrs.w	r3, r6, r7
    a012:	d105      	bne.n	a020 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    a014:	4620      	mov	r0, r4
    a016:	f000 fccd 	bl	a9b4 <z_sched_start>
}
    a01a:	4620      	mov	r0, r4
    a01c:	b007      	add	sp, #28
    a01e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a020:	4903      	ldr	r1, [pc, #12]	; (a030 <z_impl_k_thread_create+0x54>)
    a022:	463a      	mov	r2, r7
    a024:	4633      	mov	r3, r6
    a026:	f104 0018 	add.w	r0, r4, #24
    a02a:	f000 fed9 	bl	ade0 <z_add_timeout>
    a02e:	e7f4      	b.n	a01a <z_impl_k_thread_create+0x3e>
    a030:	0000d34f 	.word	0x0000d34f

0000a034 <z_init_static_threads>:
{
    a034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a038:	4c29      	ldr	r4, [pc, #164]	; (a0e0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    a03a:	4d2a      	ldr	r5, [pc, #168]	; (a0e4 <z_init_static_threads+0xb0>)
{
    a03c:	b087      	sub	sp, #28
    a03e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    a040:	42ae      	cmp	r6, r5
    a042:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    a046:	d30f      	bcc.n	a068 <z_init_static_threads+0x34>
	k_sched_lock();
    a048:	f000 fd04 	bl	aa54 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a04c:	4c24      	ldr	r4, [pc, #144]	; (a0e0 <z_init_static_threads+0xac>)
    a04e:	f8df 9098 	ldr.w	r9, [pc, #152]	; a0e8 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    a052:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a056:	f240 37e7 	movw	r7, #999	; 0x3e7
    a05a:	42ac      	cmp	r4, r5
    a05c:	d320      	bcc.n	a0a0 <z_init_static_threads+0x6c>
}
    a05e:	b007      	add	sp, #28
    a060:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    a064:	f000 bd0a 	b.w	aa7c <k_sched_unlock>
		z_setup_new_thread(
    a068:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a06c:	9305      	str	r3, [sp, #20]
    a06e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a072:	9304      	str	r3, [sp, #16]
    a074:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a078:	9303      	str	r3, [sp, #12]
    a07a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a07e:	9302      	str	r3, [sp, #8]
    a080:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a084:	9301      	str	r3, [sp, #4]
    a086:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a08a:	9300      	str	r3, [sp, #0]
    a08c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    a090:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    a094:	f7ff ff70 	bl	9f78 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a098:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a09c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a09e:	e7ce      	b.n	a03e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a0a2:	1c5a      	adds	r2, r3, #1
    a0a4:	d00d      	beq.n	a0c2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    a0a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a0aa:	2100      	movs	r1, #0
    a0ac:	4638      	mov	r0, r7
    a0ae:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a0b2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    a0b6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a0ba:	d104      	bne.n	a0c6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    a0bc:	4640      	mov	r0, r8
    a0be:	f000 fc79 	bl	a9b4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a0c2:	342c      	adds	r4, #44	; 0x2c
    a0c4:	e7c9      	b.n	a05a <z_init_static_threads+0x26>
    a0c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0ca:	2300      	movs	r3, #0
    a0cc:	f7f7 f818 	bl	1100 <__aeabi_uldivmod>
    a0d0:	4602      	mov	r2, r0
    a0d2:	460b      	mov	r3, r1
    a0d4:	f108 0018 	add.w	r0, r8, #24
    a0d8:	4649      	mov	r1, r9
    a0da:	f000 fe81 	bl	ade0 <z_add_timeout>
    a0de:	e7f0      	b.n	a0c2 <z_init_static_threads+0x8e>
    a0e0:	0000d958 	.word	0x0000d958
    a0e4:	0000d958 	.word	0x0000d958
    a0e8:	0000d34f 	.word	0x0000d34f

0000a0ec <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a0ec:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a0ee:	4c0b      	ldr	r4, [pc, #44]	; (a11c <idle+0x30>)
	return !z_sys_post_kernel;
    a0f0:	4d0b      	ldr	r5, [pc, #44]	; (a120 <idle+0x34>)
	__asm__ volatile(
    a0f2:	f04f 0220 	mov.w	r2, #32
    a0f6:	f3ef 8311 	mrs	r3, BASEPRI
    a0fa:	f382 8812 	msr	BASEPRI_MAX, r2
    a0fe:	f3bf 8f6f 	isb	sy
    a102:	f003 f9d2 	bl	d4aa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a106:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    a108:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a10a:	b913      	cbnz	r3, a112 <idle+0x26>
	arch_cpu_idle();
    a10c:	f7fa fd24 	bl	4b58 <arch_cpu_idle>
}
    a110:	e7ef      	b.n	a0f2 <idle+0x6>
    a112:	f7f9 f955 	bl	33c0 <pm_system_suspend>
    a116:	2800      	cmp	r0, #0
    a118:	d1eb      	bne.n	a0f2 <idle+0x6>
    a11a:	e7f7      	b.n	a10c <idle+0x20>
    a11c:	20001fa4 	.word	0x20001fa4
    a120:	200021e8 	.word	0x200021e8

0000a124 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a128:	4604      	mov	r4, r0
    a12a:	4617      	mov	r7, r2
    a12c:	461e      	mov	r6, r3
    a12e:	f04f 0320 	mov.w	r3, #32
    a132:	f3ef 8811 	mrs	r8, BASEPRI
    a136:	f383 8812 	msr	BASEPRI_MAX, r3
    a13a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a13e:	68c3      	ldr	r3, [r0, #12]
    a140:	4a33      	ldr	r2, [pc, #204]	; (a210 <z_impl_k_mutex_lock+0xec>)
    a142:	b17b      	cbz	r3, a164 <z_impl_k_mutex_lock+0x40>
    a144:	6880      	ldr	r0, [r0, #8]
    a146:	6891      	ldr	r1, [r2, #8]
    a148:	4288      	cmp	r0, r1
    a14a:	d019      	beq.n	a180 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a14c:	ea57 0306 	orrs.w	r3, r7, r6
    a150:	d118      	bne.n	a184 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    a152:	f388 8811 	msr	BASEPRI, r8
    a156:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    a15a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a15e:	b002      	add	sp, #8
    a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    a164:	6891      	ldr	r1, [r2, #8]
    a166:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a16a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    a16c:	3301      	adds	r3, #1
    a16e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    a170:	6893      	ldr	r3, [r2, #8]
    a172:	60a3      	str	r3, [r4, #8]
    a174:	f388 8811 	msr	BASEPRI, r8
    a178:	f3bf 8f6f 	isb	sy
		return 0;
    a17c:	2000      	movs	r0, #0
    a17e:	e7ee      	b.n	a15e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    a180:	6921      	ldr	r1, [r4, #16]
    a182:	e7f2      	b.n	a16a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a184:	f991 100e 	ldrsb.w	r1, [r1, #14]
    a188:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    a18c:	4299      	cmp	r1, r3
    a18e:	bfa8      	it	ge
    a190:	4619      	movge	r1, r3
    a192:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    a196:	4291      	cmp	r1, r2
    a198:	bfb8      	it	lt
    a19a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a19c:	428b      	cmp	r3, r1
    a19e:	dd2e      	ble.n	a1fe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    a1a0:	f002 ff58 	bl	d054 <adjust_owner_prio.isra.0>
    a1a4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a1a6:	e9cd 7600 	strd	r7, r6, [sp]
    a1aa:	481a      	ldr	r0, [pc, #104]	; (a214 <z_impl_k_mutex_lock+0xf0>)
    a1ac:	4622      	mov	r2, r4
    a1ae:	4641      	mov	r1, r8
    a1b0:	f000 fb8a 	bl	a8c8 <z_pend_curr>
	if (got_mutex == 0) {
    a1b4:	2800      	cmp	r0, #0
    a1b6:	d0e1      	beq.n	a17c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    a1b8:	f04f 0320 	mov.w	r3, #32
    a1bc:	f3ef 8611 	mrs	r6, BASEPRI
    a1c0:	f383 8812 	msr	BASEPRI_MAX, r3
    a1c4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    a1c8:	68a0      	ldr	r0, [r4, #8]
    a1ca:	b1d0      	cbz	r0, a202 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a1cc:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a1ce:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a1d0:	429c      	cmp	r4, r3
    a1d2:	d00a      	beq.n	a1ea <z_impl_k_mutex_lock+0xc6>
    a1d4:	b14b      	cbz	r3, a1ea <z_impl_k_mutex_lock+0xc6>
    a1d6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a1da:	4299      	cmp	r1, r3
    a1dc:	bfa8      	it	ge
    a1de:	4619      	movge	r1, r3
    a1e0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    a1e4:	4299      	cmp	r1, r3
    a1e6:	bfb8      	it	lt
    a1e8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    a1ea:	f002 ff33 	bl	d054 <adjust_owner_prio.isra.0>
    a1ee:	b140      	cbz	r0, a202 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    a1f0:	4808      	ldr	r0, [pc, #32]	; (a214 <z_impl_k_mutex_lock+0xf0>)
    a1f2:	4631      	mov	r1, r6
    a1f4:	f000 fbcc 	bl	a990 <z_reschedule>
	return -EAGAIN;
    a1f8:	f06f 000a 	mvn.w	r0, #10
    a1fc:	e7af      	b.n	a15e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    a1fe:	2500      	movs	r5, #0
    a200:	e7d1      	b.n	a1a6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    a202:	2d00      	cmp	r5, #0
    a204:	d1f4      	bne.n	a1f0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    a206:	f386 8811 	msr	BASEPRI, r6
    a20a:	f3bf 8f6f 	isb	sy
    a20e:	e7f3      	b.n	a1f8 <z_impl_k_mutex_lock+0xd4>
    a210:	20001fa4 	.word	0x20001fa4
    a214:	200021e9 	.word	0x200021e9

0000a218 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a218:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a21a:	6883      	ldr	r3, [r0, #8]
{
    a21c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    a21e:	b36b      	cbz	r3, a27c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a220:	4a19      	ldr	r2, [pc, #100]	; (a288 <z_impl_k_mutex_unlock+0x70>)
    a222:	6892      	ldr	r2, [r2, #8]
    a224:	4293      	cmp	r3, r2
    a226:	d12c      	bne.n	a282 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a228:	68c3      	ldr	r3, [r0, #12]
    a22a:	2b01      	cmp	r3, #1
    a22c:	d903      	bls.n	a236 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    a22e:	3b01      	subs	r3, #1
    a230:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    a232:	2000      	movs	r0, #0
}
    a234:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a236:	f04f 0320 	mov.w	r3, #32
    a23a:	f3ef 8511 	mrs	r5, BASEPRI
    a23e:	f383 8812 	msr	BASEPRI_MAX, r3
    a242:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a246:	6901      	ldr	r1, [r0, #16]
    a248:	6880      	ldr	r0, [r0, #8]
    a24a:	f002 ff03 	bl	d054 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a24e:	4620      	mov	r0, r4
    a250:	f003 f898 	bl	d384 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a254:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a256:	b158      	cbz	r0, a270 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    a258:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a25c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a25e:	2200      	movs	r2, #0
    a260:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    a262:	f003 f830 	bl	d2c6 <z_ready_thread>
		z_reschedule(&lock, key);
    a266:	4809      	ldr	r0, [pc, #36]	; (a28c <z_impl_k_mutex_unlock+0x74>)
    a268:	4629      	mov	r1, r5
    a26a:	f000 fb91 	bl	a990 <z_reschedule>
    a26e:	e7e0      	b.n	a232 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    a270:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a272:	f385 8811 	msr	BASEPRI, r5
    a276:	f3bf 8f6f 	isb	sy
    a27a:	e7da      	b.n	a232 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    a27c:	f06f 0015 	mvn.w	r0, #21
    a280:	e7d8      	b.n	a234 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    a282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a286:	e7d5      	b.n	a234 <z_impl_k_mutex_unlock+0x1c>
    a288:	20001fa4 	.word	0x20001fa4
    a28c:	200021e9 	.word	0x200021e9

0000a290 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a290:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a292:	4611      	mov	r1, r2
	__asm__ volatile(
    a294:	f04f 0220 	mov.w	r2, #32
    a298:	f3ef 8511 	mrs	r5, BASEPRI
    a29c:	f382 8812 	msr	BASEPRI_MAX, r2
    a2a0:	f3bf 8f6f 	isb	sy
    a2a4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a2a6:	b19c      	cbz	r4, a2d0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a2a8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a2aa:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a2ac:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a2b0:	4294      	cmp	r4, r2
	list->head = node;
    a2b2:	6003      	str	r3, [r0, #0]
	list->tail = node;
    a2b4:	bf08      	it	eq
    a2b6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a2b8:	2101      	movs	r1, #1
    a2ba:	4620      	mov	r0, r4
    a2bc:	f002 ff3b 	bl	d136 <z_queue_node_peek>
    a2c0:	4604      	mov	r4, r0
	__asm__ volatile(
    a2c2:	f385 8811 	msr	BASEPRI, r5
    a2c6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a2ca:	4620      	mov	r0, r4
    a2cc:	b003      	add	sp, #12
    a2ce:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a2d0:	ea51 0203 	orrs.w	r2, r1, r3
    a2d4:	d0f5      	beq.n	a2c2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a2d6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a2da:	e9cd 1300 	strd	r1, r3, [sp]
    a2de:	4610      	mov	r0, r2
    a2e0:	4629      	mov	r1, r5
    a2e2:	f000 faf1 	bl	a8c8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a2e6:	2800      	cmp	r0, #0
    a2e8:	d1ef      	bne.n	a2ca <z_impl_k_queue_get+0x3a>
    a2ea:	4b02      	ldr	r3, [pc, #8]	; (a2f4 <z_impl_k_queue_get+0x64>)
    a2ec:	689b      	ldr	r3, [r3, #8]
    a2ee:	695c      	ldr	r4, [r3, #20]
    a2f0:	e7eb      	b.n	a2ca <z_impl_k_queue_get+0x3a>
    a2f2:	bf00      	nop
    a2f4:	20001fa4 	.word	0x20001fa4

0000a2f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a2f8:	b538      	push	{r3, r4, r5, lr}
    a2fa:	4604      	mov	r4, r0
	__asm__ volatile(
    a2fc:	f04f 0320 	mov.w	r3, #32
    a300:	f3ef 8511 	mrs	r5, BASEPRI
    a304:	f383 8812 	msr	BASEPRI_MAX, r3
    a308:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a30c:	f003 f83a 	bl	d384 <z_unpend_first_thread>

	if (thread != NULL) {
    a310:	b148      	cbz	r0, a326 <z_impl_k_sem_give+0x2e>
    a312:	2200      	movs	r2, #0
    a314:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a316:	f002 ffd6 	bl	d2c6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a31a:	4629      	mov	r1, r5
    a31c:	4805      	ldr	r0, [pc, #20]	; (a334 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    a322:	f000 bb35 	b.w	a990 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a326:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    a32a:	429a      	cmp	r2, r3
    a32c:	bf18      	it	ne
    a32e:	3301      	addne	r3, #1
    a330:	60a3      	str	r3, [r4, #8]
}
    a332:	e7f2      	b.n	a31a <z_impl_k_sem_give+0x22>
    a334:	200021e9 	.word	0x200021e9

0000a338 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a338:	b513      	push	{r0, r1, r4, lr}
    a33a:	f04f 0420 	mov.w	r4, #32
    a33e:	f3ef 8111 	mrs	r1, BASEPRI
    a342:	f384 8812 	msr	BASEPRI_MAX, r4
    a346:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a34a:	6884      	ldr	r4, [r0, #8]
    a34c:	b144      	cbz	r4, a360 <z_impl_k_sem_take+0x28>
		sem->count--;
    a34e:	3c01      	subs	r4, #1
    a350:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    a352:	f381 8811 	msr	BASEPRI, r1
    a356:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a35a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a35c:	b002      	add	sp, #8
    a35e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a360:	ea52 0403 	orrs.w	r4, r2, r3
    a364:	d106      	bne.n	a374 <z_impl_k_sem_take+0x3c>
    a366:	f381 8811 	msr	BASEPRI, r1
    a36a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    a36e:	f06f 000f 	mvn.w	r0, #15
    a372:	e7f3      	b.n	a35c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    a374:	e9cd 2300 	strd	r2, r3, [sp]
    a378:	4602      	mov	r2, r0
    a37a:	4802      	ldr	r0, [pc, #8]	; (a384 <z_impl_k_sem_take+0x4c>)
    a37c:	f000 faa4 	bl	a8c8 <z_pend_curr>
	return ret;
    a380:	e7ec      	b.n	a35c <z_impl_k_sem_take+0x24>
    a382:	bf00      	nop
    a384:	200021e9 	.word	0x200021e9

0000a388 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    a38c:	4e4a      	ldr	r6, [pc, #296]	; (a4b8 <work_queue_main+0x130>)
    a38e:	b085      	sub	sp, #20
    a390:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    a392:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    a396:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    a39a:	f04f 0320 	mov.w	r3, #32
    a39e:	f3ef 8711 	mrs	r7, BASEPRI
    a3a2:	f383 8812 	msr	BASEPRI_MAX, r3
    a3a6:	f3bf 8f6f 	isb	sy
    a3aa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    a3ae:	b98d      	cbnz	r5, a3d4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    a3b0:	2102      	movs	r1, #2
    a3b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    a3b6:	f002 fee1 	bl	d17c <flag_test_and_clear>
    a3ba:	2800      	cmp	r0, #0
    a3bc:	d143      	bne.n	a446 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a3be:	2300      	movs	r3, #0
    a3c0:	e9cd 8900 	strd	r8, r9, [sp]
    a3c4:	9302      	str	r3, [sp, #8]
    a3c6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    a3ca:	4639      	mov	r1, r7
    a3cc:	483b      	ldr	r0, [pc, #236]	; (a4bc <work_queue_main+0x134>)
    a3ce:	f000 fc95 	bl	acfc <z_sched_wait>
			continue;
    a3d2:	e7e2      	b.n	a39a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a3d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    a3d8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    a3da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a3de:	4295      	cmp	r5, r2
	list->tail = node;
    a3e0:	bf08      	it	eq
    a3e2:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    a3e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    a3ea:	f043 0302 	orr.w	r3, r3, #2
    a3ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    a3f2:	68eb      	ldr	r3, [r5, #12]
    a3f4:	f023 0304 	bic.w	r3, r3, #4
    a3f8:	f043 0301 	orr.w	r3, r3, #1
    a3fc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    a3fe:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    a400:	f387 8811 	msr	BASEPRI, r7
    a404:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    a408:	4628      	mov	r0, r5
    a40a:	4798      	blx	r3
	__asm__ volatile(
    a40c:	f04f 0320 	mov.w	r3, #32
    a410:	f3ef 8b11 	mrs	fp, BASEPRI
    a414:	f383 8812 	msr	BASEPRI_MAX, r3
    a418:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    a41c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a41e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    a420:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a424:	d419      	bmi.n	a45a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    a426:	60ea      	str	r2, [r5, #12]
    a428:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    a42c:	f023 0302 	bic.w	r3, r3, #2
    a430:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    a434:	f38b 8811 	msr	BASEPRI, fp
    a438:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    a43c:	05db      	lsls	r3, r3, #23
    a43e:	d4ac      	bmi.n	a39a <work_queue_main+0x12>
	z_impl_k_yield();
    a440:	f000 fb40 	bl	aac4 <z_impl_k_yield>
}
    a444:	e7a9      	b.n	a39a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    a446:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    a44a:	2200      	movs	r2, #0
    a44c:	2101      	movs	r1, #1
    a44e:	4628      	mov	r0, r5
    a450:	f002 fff2 	bl	d438 <z_sched_wake>
    a454:	2800      	cmp	r0, #0
    a456:	d1f8      	bne.n	a44a <work_queue_main+0xc2>
    a458:	e7b1      	b.n	a3be <work_queue_main+0x36>
	return list->head;
    a45a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    a45c:	f023 0303 	bic.w	r3, r3, #3
    a460:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a462:	2800      	cmp	r0, #0
    a464:	d0e0      	beq.n	a428 <work_queue_main+0xa0>
	return node->next;
    a466:	2700      	movs	r7, #0
    a468:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    a46c:	463b      	mov	r3, r7
    a46e:	2800      	cmp	r0, #0
    a470:	d0da      	beq.n	a428 <work_queue_main+0xa0>
		if (wc->work == work) {
    a472:	6842      	ldr	r2, [r0, #4]
    a474:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    a476:	4601      	mov	r1, r0
		if (wc->work == work) {
    a478:	d10c      	bne.n	a494 <work_queue_main+0x10c>
	return node->next;
    a47a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a47c:	b99f      	cbnz	r7, a4a6 <work_queue_main+0x11e>
    a47e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    a480:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    a482:	4282      	cmp	r2, r0
    a484:	d100      	bne.n	a488 <work_queue_main+0x100>
	list->tail = node;
    a486:	6071      	str	r1, [r6, #4]
	parent->next = child;
    a488:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a48c:	f7ff ff34 	bl	a2f8 <z_impl_k_sem_give>
}
    a490:	4639      	mov	r1, r7
    a492:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a494:	f1ba 0f00 	cmp.w	sl, #0
    a498:	d00b      	beq.n	a4b2 <work_queue_main+0x12a>
	return node->next;
    a49a:	f8da 2000 	ldr.w	r2, [sl]
    a49e:	4650      	mov	r0, sl
    a4a0:	460f      	mov	r7, r1
    a4a2:	4692      	mov	sl, r2
    a4a4:	e7e3      	b.n	a46e <work_queue_main+0xe6>
	parent->next = child;
    a4a6:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    a4a8:	6872      	ldr	r2, [r6, #4]
    a4aa:	4282      	cmp	r2, r0
	list->tail = node;
    a4ac:	bf08      	it	eq
    a4ae:	6077      	streq	r7, [r6, #4]
}
    a4b0:	e7ea      	b.n	a488 <work_queue_main+0x100>
    a4b2:	4652      	mov	r2, sl
    a4b4:	e7f3      	b.n	a49e <work_queue_main+0x116>
    a4b6:	bf00      	nop
    a4b8:	20001fc8 	.word	0x20001fc8
    a4bc:	200021e9 	.word	0x200021e9

0000a4c0 <submit_to_queue_locked>:
{
    a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    a4c2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a4c4:	079a      	lsls	r2, r3, #30
{
    a4c6:	4604      	mov	r4, r0
    a4c8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a4ca:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a4ce:	d42c      	bmi.n	a52a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a4d0:	075b      	lsls	r3, r3, #29
    a4d2:	d41a      	bmi.n	a50a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    a4d4:	680b      	ldr	r3, [r1, #0]
    a4d6:	b90b      	cbnz	r3, a4dc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    a4d8:	6883      	ldr	r3, [r0, #8]
    a4da:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    a4dc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a4de:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    a4e0:	bf44      	itt	mi
    a4e2:	68a3      	ldrmi	r3, [r4, #8]
    a4e4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    a4e6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    a4e8:	bf4c      	ite	mi
    a4ea:	2602      	movmi	r6, #2
		ret = 1;
    a4ec:	2601      	movpl	r6, #1
	if (queue == NULL) {
    a4ee:	2d00      	cmp	r5, #0
    a4f0:	d03a      	beq.n	a568 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a4f2:	4b1f      	ldr	r3, [pc, #124]	; (a570 <submit_to_queue_locked+0xb0>)
    a4f4:	689b      	ldr	r3, [r3, #8]
    a4f6:	42ab      	cmp	r3, r5
    a4f8:	d00a      	beq.n	a510 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    a4fa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a4fe:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    a500:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a504:	d414      	bmi.n	a530 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    a506:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    a50a:	2300      	movs	r3, #0
    a50c:	603b      	str	r3, [r7, #0]
	return ret;
    a50e:	e025      	b.n	a55c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a510:	f002 fd8c 	bl	d02c <k_is_in_isr>
    a514:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    a518:	2800      	cmp	r0, #0
    a51a:	d1f0      	bne.n	a4fe <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a51c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    a51e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a522:	d5f0      	bpl.n	a506 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    a524:	b152      	cbz	r2, a53c <submit_to_queue_locked+0x7c>
    a526:	075b      	lsls	r3, r3, #29
    a528:	d408      	bmi.n	a53c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    a52a:	f06f 060f 	mvn.w	r6, #15
    a52e:	e7ec      	b.n	a50a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    a530:	2a00      	cmp	r2, #0
    a532:	d1fa      	bne.n	a52a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    a534:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    a538:	2b00      	cmp	r3, #0
    a53a:	d1f6      	bne.n	a52a <submit_to_queue_locked+0x6a>
	parent->next = child;
    a53c:	2300      	movs	r3, #0
    a53e:	6023      	str	r3, [r4, #0]
	return list->tail;
    a540:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    a544:	b963      	cbnz	r3, a560 <submit_to_queue_locked+0xa0>
	list->head = node;
    a546:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    a54a:	4628      	mov	r0, r5
    a54c:	f002 fe21 	bl	d192 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    a550:	68e3      	ldr	r3, [r4, #12]
    a552:	f043 0304 	orr.w	r3, r3, #4
    a556:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    a558:	683b      	ldr	r3, [r7, #0]
    a55a:	60a3      	str	r3, [r4, #8]
}
    a55c:	4630      	mov	r0, r6
    a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    a560:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a562:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    a566:	e7f0      	b.n	a54a <submit_to_queue_locked+0x8a>
		return -EINVAL;
    a568:	f06f 0615 	mvn.w	r6, #21
    a56c:	e7cd      	b.n	a50a <submit_to_queue_locked+0x4a>
    a56e:	bf00      	nop
    a570:	20001fa4 	.word	0x20001fa4

0000a574 <k_work_submit>:
{
    a574:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    a576:	4801      	ldr	r0, [pc, #4]	; (a57c <k_work_submit+0x8>)
    a578:	f002 be4e 	b.w	d218 <k_work_submit_to_queue>
    a57c:	20000b90 	.word	0x20000b90

0000a580 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    a580:	b5f0      	push	{r4, r5, r6, r7, lr}
    a582:	b089      	sub	sp, #36	; 0x24
    a584:	4604      	mov	r4, r0
	list->head = NULL;
    a586:	2000      	movs	r0, #0
	list->tail = NULL;
    a588:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    a58c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a58e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    a592:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    a596:	f104 0090 	add.w	r0, r4, #144	; 0x90
    a59a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    a59e:	b31d      	cbz	r5, a5e8 <k_work_queue_start+0x68>
    a5a0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    a5a2:	2800      	cmp	r0, #0
    a5a4:	f240 1001 	movw	r0, #257	; 0x101
    a5a8:	bf08      	it	eq
    a5aa:	2001      	moveq	r0, #1
	*flagp = flags;
    a5ac:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a5b0:	2000      	movs	r0, #0
    a5b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a5b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    a5ba:	e9cd 3003 	strd	r3, r0, [sp, #12]
    a5be:	e9cd 0001 	strd	r0, r0, [sp, #4]
    a5c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a5c6:	4b09      	ldr	r3, [pc, #36]	; (a5ec <k_work_queue_start+0x6c>)
    a5c8:	9400      	str	r4, [sp, #0]
    a5ca:	4620      	mov	r0, r4
    a5cc:	f7ff fd06 	bl	9fdc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    a5d0:	b125      	cbz	r5, a5dc <k_work_queue_start+0x5c>
    a5d2:	6829      	ldr	r1, [r5, #0]
    a5d4:	b111      	cbz	r1, a5dc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    a5d6:	4620      	mov	r0, r4
    a5d8:	f002 fd2e 	bl	d038 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    a5dc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    a5de:	b009      	add	sp, #36	; 0x24
    a5e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a5e4:	f002 bd2d 	b.w	d042 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    a5e8:	2001      	movs	r0, #1
    a5ea:	e7df      	b.n	a5ac <k_work_queue_start+0x2c>
    a5ec:	0000a389 	.word	0x0000a389

0000a5f0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    a5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a5f2:	9001      	str	r0, [sp, #4]
    a5f4:	4608      	mov	r0, r1
	__asm__ volatile(
    a5f6:	f04f 0120 	mov.w	r1, #32
    a5fa:	f3ef 8411 	mrs	r4, BASEPRI
    a5fe:	f381 8812 	msr	BASEPRI_MAX, r1
    a602:	f3bf 8f6f 	isb	sy
	return *flagp;
    a606:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    a608:	f011 0f0e 	tst.w	r1, #14
    a60c:	d116      	bne.n	a63c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a60e:	ea53 0502 	orrs.w	r5, r3, r2
    a612:	d108      	bne.n	a626 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    a614:	a901      	add	r1, sp, #4
    a616:	f7ff ff53 	bl	a4c0 <submit_to_queue_locked>
	__asm__ volatile(
    a61a:	f384 8811 	msr	BASEPRI, r4
    a61e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    a622:	b003      	add	sp, #12
    a624:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    a626:	f041 0108 	orr.w	r1, r1, #8
    a62a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    a62c:	9901      	ldr	r1, [sp, #4]
    a62e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    a630:	3010      	adds	r0, #16
    a632:	4903      	ldr	r1, [pc, #12]	; (a640 <k_work_schedule_for_queue+0x50>)
    a634:	f000 fbd4 	bl	ade0 <z_add_timeout>
	return ret;
    a638:	2001      	movs	r0, #1
    a63a:	e7ee      	b.n	a61a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    a63c:	2000      	movs	r0, #0
    a63e:	e7ec      	b.n	a61a <k_work_schedule_for_queue+0x2a>
    a640:	0000d1a1 	.word	0x0000d1a1

0000a644 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    a644:	89c3      	ldrh	r3, [r0, #14]
    a646:	2b7f      	cmp	r3, #127	; 0x7f
    a648:	d812      	bhi.n	a670 <sliceable+0x2c>
	int ret = slice_ticks;
    a64a:	4b0a      	ldr	r3, [pc, #40]	; (a674 <sliceable+0x30>)
    a64c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    a64e:	b163      	cbz	r3, a66a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    a650:	4b09      	ldr	r3, [pc, #36]	; (a678 <sliceable+0x34>)
    a652:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a656:	681b      	ldr	r3, [r3, #0]
    a658:	429a      	cmp	r2, r3
    a65a:	db09      	blt.n	a670 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    a65c:	7b43      	ldrb	r3, [r0, #13]
    a65e:	06db      	lsls	r3, r3, #27
    a660:	d106      	bne.n	a670 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    a662:	4b06      	ldr	r3, [pc, #24]	; (a67c <sliceable+0x38>)
    a664:	1ac3      	subs	r3, r0, r3
    a666:	bf18      	it	ne
    a668:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    a66a:	f003 0001 	and.w	r0, r3, #1
    a66e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    a670:	2300      	movs	r3, #0
    a672:	e7fa      	b.n	a66a <sliceable+0x26>
    a674:	20001fd8 	.word	0x20001fd8
    a678:	20001fd4 	.word	0x20001fd4
    a67c:	20000a70 	.word	0x20000a70

0000a680 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    a680:	4b04      	ldr	r3, [pc, #16]	; (a694 <slice_timeout+0x14>)
    a682:	1ac0      	subs	r0, r0, r3
    a684:	4b04      	ldr	r3, [pc, #16]	; (a698 <slice_timeout+0x18>)
    a686:	10c0      	asrs	r0, r0, #3
    a688:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    a68a:	4b04      	ldr	r3, [pc, #16]	; (a69c <slice_timeout+0x1c>)
    a68c:	2201      	movs	r2, #1
    a68e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    a690:	4770      	bx	lr
    a692:	bf00      	nop
    a694:	20000b70 	.word	0x20000b70
    a698:	aaaaaaab 	.word	0xaaaaaaab
    a69c:	200021e9 	.word	0x200021e9

0000a6a0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    a6a0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    a6a2:	4b0e      	ldr	r3, [pc, #56]	; (a6dc <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    a6a4:	4c0e      	ldr	r4, [pc, #56]	; (a6e0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    a6a6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    a6a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a6ac:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    a6b0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    a6b2:	4620      	mov	r0, r4
    a6b4:	f002 fee3 	bl	d47e <z_abort_timeout>
	slice_expired[cpu] = false;
    a6b8:	4b0a      	ldr	r3, [pc, #40]	; (a6e4 <z_reset_time_slice+0x44>)
    a6ba:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    a6bc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    a6be:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    a6c0:	f7ff ffc0 	bl	a644 <sliceable>
    a6c4:	b148      	cbz	r0, a6da <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    a6c6:	4b08      	ldr	r3, [pc, #32]	; (a6e8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a6c8:	4908      	ldr	r1, [pc, #32]	; (a6ec <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    a6ca:	681a      	ldr	r2, [r3, #0]
    a6cc:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a6ce:	4620      	mov	r0, r4
    a6d0:	17d3      	asrs	r3, r2, #31
	}
}
    a6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a6d6:	f000 bb83 	b.w	ade0 <z_add_timeout>
}
    a6da:	bd70      	pop	{r4, r5, r6, pc}
    a6dc:	20001fa4 	.word	0x20001fa4
    a6e0:	20000b70 	.word	0x20000b70
    a6e4:	200021e9 	.word	0x200021e9
    a6e8:	20001fd8 	.word	0x20001fd8
    a6ec:	0000a681 	.word	0x0000a681

0000a6f0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    a6f0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    a6f2:	4d0d      	ldr	r5, [pc, #52]	; (a728 <update_cache+0x38>)
    a6f4:	462b      	mov	r3, r5
    a6f6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6fa:	429c      	cmp	r4, r3
    a6fc:	d000      	beq.n	a700 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a6fe:	b904      	cbnz	r4, a702 <update_cache+0x12>
    a700:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    a702:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    a704:	b938      	cbnz	r0, a716 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    a706:	7b5a      	ldrb	r2, [r3, #13]
    a708:	06d2      	lsls	r2, r2, #27
    a70a:	d104      	bne.n	a716 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a70c:	69a2      	ldr	r2, [r4, #24]
    a70e:	b912      	cbnz	r2, a716 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    a710:	89da      	ldrh	r2, [r3, #14]
    a712:	2a7f      	cmp	r2, #127	; 0x7f
    a714:	d805      	bhi.n	a722 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    a716:	429c      	cmp	r4, r3
    a718:	d002      	beq.n	a720 <update_cache+0x30>
			z_reset_time_slice(thread);
    a71a:	4620      	mov	r0, r4
    a71c:	f7ff ffc0 	bl	a6a0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    a720:	4623      	mov	r3, r4
    a722:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    a724:	bd38      	pop	{r3, r4, r5, pc}
    a726:	bf00      	nop
    a728:	20001fa4 	.word	0x20001fa4

0000a72c <move_thread_to_end_of_prio_q>:
{
    a72c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    a72e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a732:	7b43      	ldrb	r3, [r0, #13]
    a734:	2a00      	cmp	r2, #0
{
    a736:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a738:	da04      	bge.n	a744 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a73e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    a740:	f002 fd87 	bl	d252 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a744:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    a746:	4a15      	ldr	r2, [pc, #84]	; (a79c <move_thread_to_end_of_prio_q+0x70>)
    a748:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a74c:	4610      	mov	r0, r2
    a74e:	734b      	strb	r3, [r1, #13]
    a750:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    a754:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a756:	4283      	cmp	r3, r0
    a758:	bf08      	it	eq
    a75a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a75c:	b923      	cbnz	r3, a768 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    a75e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    a762:	6021      	str	r1, [r4, #0]
	list->tail = node;
    a764:	6211      	str	r1, [r2, #32]
}
    a766:	e00c      	b.n	a782 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    a768:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    a76c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a770:	42b5      	cmp	r5, r6
    a772:	d00e      	beq.n	a792 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a774:	42ae      	cmp	r6, r5
    a776:	dd0c      	ble.n	a792 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    a778:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    a77a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    a77e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    a780:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    a782:	6890      	ldr	r0, [r2, #8]
    a784:	1a43      	subs	r3, r0, r1
    a786:	4258      	negs	r0, r3
}
    a788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    a78c:	4158      	adcs	r0, r3
    a78e:	f7ff bfaf 	b.w	a6f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a792:	429c      	cmp	r4, r3
    a794:	d0e3      	beq.n	a75e <move_thread_to_end_of_prio_q+0x32>
    a796:	681b      	ldr	r3, [r3, #0]
    a798:	e7e0      	b.n	a75c <move_thread_to_end_of_prio_q+0x30>
    a79a:	bf00      	nop
    a79c:	20001fa4 	.word	0x20001fa4

0000a7a0 <ready_thread>:
{
    a7a0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a7a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a7a6:	7b42      	ldrb	r2, [r0, #13]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	db29      	blt.n	a800 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a7ac:	06d3      	lsls	r3, r2, #27
    a7ae:	d127      	bne.n	a800 <ready_thread+0x60>
	return node->next != NULL;
    a7b0:	6983      	ldr	r3, [r0, #24]
    a7b2:	bb2b      	cbnz	r3, a800 <ready_thread+0x60>
	return list->head == list;
    a7b4:	4913      	ldr	r1, [pc, #76]	; (a804 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    a7b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a7ba:	7342      	strb	r2, [r0, #13]
    a7bc:	460a      	mov	r2, r1
    a7be:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7c2:	4294      	cmp	r4, r2
    a7c4:	bf18      	it	ne
    a7c6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    a7c8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a7ca:	b923      	cbnz	r3, a7d6 <ready_thread+0x36>
	node->prev = tail;
    a7cc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    a7d0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    a7d2:	6208      	str	r0, [r1, #32]
}
    a7d4:	e00c      	b.n	a7f0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    a7d6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a7da:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a7de:	42b5      	cmp	r5, r6
    a7e0:	d00a      	beq.n	a7f8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a7e2:	42ae      	cmp	r6, r5
    a7e4:	dd08      	ble.n	a7f8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    a7e6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a7e8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    a7ec:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    a7ee:	6058      	str	r0, [r3, #4]
}
    a7f0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    a7f2:	2000      	movs	r0, #0
    a7f4:	f7ff bf7c 	b.w	a6f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a7f8:	42a3      	cmp	r3, r4
    a7fa:	d0e7      	beq.n	a7cc <ready_thread+0x2c>
    a7fc:	681b      	ldr	r3, [r3, #0]
    a7fe:	e7e4      	b.n	a7ca <ready_thread+0x2a>
}
    a800:	bc70      	pop	{r4, r5, r6}
    a802:	4770      	bx	lr
    a804:	20001fa4 	.word	0x20001fa4

0000a808 <unready_thread>:
{
    a808:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    a80a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a80e:	7b43      	ldrb	r3, [r0, #13]
    a810:	2a00      	cmp	r2, #0
{
    a812:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a814:	da04      	bge.n	a820 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a81a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a81c:	f002 fd19 	bl	d252 <sys_dlist_remove>
	update_cache(thread == _current);
    a820:	4b04      	ldr	r3, [pc, #16]	; (a834 <unready_thread+0x2c>)
    a822:	6898      	ldr	r0, [r3, #8]
    a824:	1a43      	subs	r3, r0, r1
    a826:	4258      	negs	r0, r3
    a828:	4158      	adcs	r0, r3
}
    a82a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    a82e:	f7ff bf5f 	b.w	a6f0 <update_cache>
    a832:	bf00      	nop
    a834:	20001fa4 	.word	0x20001fa4

0000a838 <pend_locked>:
{
    a838:	b570      	push	{r4, r5, r6, lr}
    a83a:	4615      	mov	r5, r2
    a83c:	461c      	mov	r4, r3
    a83e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    a840:	f002 fd19 	bl	d276 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a844:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a848:	bf08      	it	eq
    a84a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    a84e:	d008      	beq.n	a862 <pend_locked+0x2a>
    a850:	462a      	mov	r2, r5
    a852:	4623      	mov	r3, r4
    a854:	f106 0018 	add.w	r0, r6, #24
    a858:	4902      	ldr	r1, [pc, #8]	; (a864 <pend_locked+0x2c>)
}
    a85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a85e:	f000 babf 	b.w	ade0 <z_add_timeout>
    a862:	bd70      	pop	{r4, r5, r6, pc}
    a864:	0000d34f 	.word	0x0000d34f

0000a868 <z_time_slice>:
{
    a868:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a86a:	f04f 0320 	mov.w	r3, #32
    a86e:	f3ef 8511 	mrs	r5, BASEPRI
    a872:	f383 8812 	msr	BASEPRI_MAX, r3
    a876:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    a87a:	4b10      	ldr	r3, [pc, #64]	; (a8bc <z_time_slice+0x54>)
	if (pending_current == curr) {
    a87c:	4a10      	ldr	r2, [pc, #64]	; (a8c0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    a87e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    a880:	6810      	ldr	r0, [r2, #0]
    a882:	42a0      	cmp	r0, r4
    a884:	d106      	bne.n	a894 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    a886:	f7ff ff0b 	bl	a6a0 <z_reset_time_slice>
	__asm__ volatile(
    a88a:	f385 8811 	msr	BASEPRI, r5
    a88e:	f3bf 8f6f 	isb	sy
}
    a892:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    a894:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a896:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    a898:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a89a:	4a0a      	ldr	r2, [pc, #40]	; (a8c4 <z_time_slice+0x5c>)
    a89c:	5cd3      	ldrb	r3, [r2, r3]
    a89e:	2b00      	cmp	r3, #0
    a8a0:	d0f3      	beq.n	a88a <z_time_slice+0x22>
    a8a2:	4620      	mov	r0, r4
    a8a4:	f7ff fece 	bl	a644 <sliceable>
    a8a8:	2800      	cmp	r0, #0
    a8aa:	d0ee      	beq.n	a88a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    a8ac:	7b63      	ldrb	r3, [r4, #13]
    a8ae:	06db      	lsls	r3, r3, #27
    a8b0:	d102      	bne.n	a8b8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    a8b2:	4620      	mov	r0, r4
    a8b4:	f7ff ff3a 	bl	a72c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    a8b8:	4620      	mov	r0, r4
    a8ba:	e7e4      	b.n	a886 <z_time_slice+0x1e>
    a8bc:	20001fa4 	.word	0x20001fa4
    a8c0:	20001fd0 	.word	0x20001fd0
    a8c4:	200021e9 	.word	0x200021e9

0000a8c8 <z_pend_curr>:
{
    a8c8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    a8ca:	480c      	ldr	r0, [pc, #48]	; (a8fc <z_pend_curr+0x34>)
    a8cc:	4d0c      	ldr	r5, [pc, #48]	; (a900 <z_pend_curr+0x38>)
    a8ce:	6886      	ldr	r6, [r0, #8]
    a8d0:	602e      	str	r6, [r5, #0]
{
    a8d2:	460c      	mov	r4, r1
    a8d4:	4611      	mov	r1, r2
    a8d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    a8da:	f04f 0620 	mov.w	r6, #32
    a8de:	f3ef 8511 	mrs	r5, BASEPRI
    a8e2:	f386 8812 	msr	BASEPRI_MAX, r6
    a8e6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    a8ea:	6880      	ldr	r0, [r0, #8]
    a8ec:	f7ff ffa4 	bl	a838 <pend_locked>
	ret = arch_swap(key);
    a8f0:	4620      	mov	r0, r4
}
    a8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a8f6:	f7fa ba17 	b.w	4d28 <arch_swap>
    a8fa:	bf00      	nop
    a8fc:	20001fa4 	.word	0x20001fa4
    a900:	20001fd0 	.word	0x20001fd0

0000a904 <z_set_prio>:
{
    a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a906:	4604      	mov	r4, r0
    a908:	f04f 0320 	mov.w	r3, #32
    a90c:	f3ef 8611 	mrs	r6, BASEPRI
    a910:	f383 8812 	msr	BASEPRI_MAX, r3
    a914:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    a918:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a91a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    a91c:	b249      	sxtb	r1, r1
    a91e:	d119      	bne.n	a954 <z_set_prio+0x50>
	return node->next != NULL;
    a920:	6985      	ldr	r5, [r0, #24]
    a922:	b9bd      	cbnz	r5, a954 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a928:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a92a:	f002 fc92 	bl	d252 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a92e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    a930:	4a16      	ldr	r2, [pc, #88]	; (a98c <z_set_prio+0x88>)
				thread->base.prio = prio;
    a932:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a934:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a938:	7343      	strb	r3, [r0, #13]
    a93a:	4613      	mov	r3, r2
    a93c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a940:	4298      	cmp	r0, r3
    a942:	bf18      	it	ne
    a944:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    a946:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a948:	b95d      	cbnz	r5, a962 <z_set_prio+0x5e>
	node->prev = tail;
    a94a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    a94e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    a950:	6214      	str	r4, [r2, #32]
}
    a952:	e011      	b.n	a978 <z_set_prio+0x74>
			thread->base.prio = prio;
    a954:	73a1      	strb	r1, [r4, #14]
    a956:	2000      	movs	r0, #0
	__asm__ volatile(
    a958:	f386 8811 	msr	BASEPRI, r6
    a95c:	f3bf 8f6f 	isb	sy
}
    a960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    a962:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    a966:	42b9      	cmp	r1, r7
    a968:	d00b      	beq.n	a982 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a96a:	428f      	cmp	r7, r1
    a96c:	dd09      	ble.n	a982 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    a96e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    a970:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    a974:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a976:	606c      	str	r4, [r5, #4]
			update_cache(1);
    a978:	2001      	movs	r0, #1
    a97a:	f7ff feb9 	bl	a6f0 <update_cache>
    a97e:	2001      	movs	r0, #1
    a980:	e7ea      	b.n	a958 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    a982:	42a8      	cmp	r0, r5
    a984:	d0e1      	beq.n	a94a <z_set_prio+0x46>
    a986:	682d      	ldr	r5, [r5, #0]
    a988:	e7de      	b.n	a948 <z_set_prio+0x44>
    a98a:	bf00      	nop
    a98c:	20001fa4 	.word	0x20001fa4

0000a990 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a990:	b949      	cbnz	r1, a9a6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a992:	f3ef 8005 	mrs	r0, IPSR
    a996:	b930      	cbnz	r0, a9a6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    a998:	4b05      	ldr	r3, [pc, #20]	; (a9b0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    a99a:	699a      	ldr	r2, [r3, #24]
    a99c:	689b      	ldr	r3, [r3, #8]
    a99e:	429a      	cmp	r2, r3
    a9a0:	d001      	beq.n	a9a6 <z_reschedule+0x16>
    a9a2:	f7fa b9c1 	b.w	4d28 <arch_swap>
    a9a6:	f381 8811 	msr	BASEPRI, r1
    a9aa:	f3bf 8f6f 	isb	sy
}
    a9ae:	4770      	bx	lr
    a9b0:	20001fa4 	.word	0x20001fa4

0000a9b4 <z_sched_start>:
{
    a9b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    a9b6:	f04f 0220 	mov.w	r2, #32
    a9ba:	f3ef 8411 	mrs	r4, BASEPRI
    a9be:	f382 8812 	msr	BASEPRI_MAX, r2
    a9c2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a9c6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    a9c8:	0751      	lsls	r1, r2, #29
    a9ca:	d404      	bmi.n	a9d6 <z_sched_start+0x22>
	__asm__ volatile(
    a9cc:	f384 8811 	msr	BASEPRI, r4
    a9d0:	f3bf 8f6f 	isb	sy
}
    a9d4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a9d6:	f022 0204 	bic.w	r2, r2, #4
    a9da:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    a9dc:	f7ff fee0 	bl	a7a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a9e0:	4621      	mov	r1, r4
    a9e2:	4802      	ldr	r0, [pc, #8]	; (a9ec <z_sched_start+0x38>)
}
    a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    a9e8:	f7ff bfd2 	b.w	a990 <z_reschedule>
    a9ec:	200021ea 	.word	0x200021ea

0000a9f0 <z_impl_k_thread_suspend>:
{
    a9f0:	b570      	push	{r4, r5, r6, lr}
    a9f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a9f4:	3018      	adds	r0, #24
    a9f6:	f002 fd42 	bl	d47e <z_abort_timeout>
	__asm__ volatile(
    a9fa:	f04f 0320 	mov.w	r3, #32
    a9fe:	f3ef 8611 	mrs	r6, BASEPRI
    aa02:	f383 8812 	msr	BASEPRI_MAX, r3
    aa06:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    aa0a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    aa0e:	7b63      	ldrb	r3, [r4, #13]
    aa10:	2a00      	cmp	r2, #0
    aa12:	da05      	bge.n	aa20 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aa14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aa18:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    aa1a:	4620      	mov	r0, r4
    aa1c:	f002 fc19 	bl	d252 <sys_dlist_remove>
		update_cache(thread == _current);
    aa20:	4d0b      	ldr	r5, [pc, #44]	; (aa50 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    aa22:	7b63      	ldrb	r3, [r4, #13]
    aa24:	68a8      	ldr	r0, [r5, #8]
    aa26:	f043 0310 	orr.w	r3, r3, #16
    aa2a:	7363      	strb	r3, [r4, #13]
    aa2c:	1b03      	subs	r3, r0, r4
    aa2e:	4258      	negs	r0, r3
    aa30:	4158      	adcs	r0, r3
    aa32:	f7ff fe5d 	bl	a6f0 <update_cache>
	__asm__ volatile(
    aa36:	f386 8811 	msr	BASEPRI, r6
    aa3a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    aa3e:	68ab      	ldr	r3, [r5, #8]
    aa40:	42a3      	cmp	r3, r4
    aa42:	d103      	bne.n	aa4c <z_impl_k_thread_suspend+0x5c>
}
    aa44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    aa48:	f002 bcdc 	b.w	d404 <z_reschedule_unlocked>
}
    aa4c:	bd70      	pop	{r4, r5, r6, pc}
    aa4e:	bf00      	nop
    aa50:	20001fa4 	.word	0x20001fa4

0000aa54 <k_sched_lock>:
	__asm__ volatile(
    aa54:	f04f 0320 	mov.w	r3, #32
    aa58:	f3ef 8111 	mrs	r1, BASEPRI
    aa5c:	f383 8812 	msr	BASEPRI_MAX, r3
    aa60:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    aa64:	4b04      	ldr	r3, [pc, #16]	; (aa78 <k_sched_lock+0x24>)
    aa66:	689a      	ldr	r2, [r3, #8]
    aa68:	7bd3      	ldrb	r3, [r2, #15]
    aa6a:	3b01      	subs	r3, #1
    aa6c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    aa6e:	f381 8811 	msr	BASEPRI, r1
    aa72:	f3bf 8f6f 	isb	sy
}
    aa76:	4770      	bx	lr
    aa78:	20001fa4 	.word	0x20001fa4

0000aa7c <k_sched_unlock>:
{
    aa7c:	b510      	push	{r4, lr}
	__asm__ volatile(
    aa7e:	f04f 0320 	mov.w	r3, #32
    aa82:	f3ef 8411 	mrs	r4, BASEPRI
    aa86:	f383 8812 	msr	BASEPRI_MAX, r3
    aa8a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    aa8e:	4b08      	ldr	r3, [pc, #32]	; (aab0 <k_sched_unlock+0x34>)
    aa90:	689a      	ldr	r2, [r3, #8]
    aa92:	7bd3      	ldrb	r3, [r2, #15]
    aa94:	3301      	adds	r3, #1
    aa96:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    aa98:	2000      	movs	r0, #0
    aa9a:	f7ff fe29 	bl	a6f0 <update_cache>
	__asm__ volatile(
    aa9e:	f384 8811 	msr	BASEPRI, r4
    aaa2:	f3bf 8f6f 	isb	sy
}
    aaa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    aaaa:	f002 bcab 	b.w	d404 <z_reschedule_unlocked>
    aaae:	bf00      	nop
    aab0:	20001fa4 	.word	0x20001fa4

0000aab4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    aab4:	4b02      	ldr	r3, [pc, #8]	; (aac0 <z_sched_init+0xc>)
    aab6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    aaba:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    aabe:	4770      	bx	lr
    aac0:	20001fa4 	.word	0x20001fa4

0000aac4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    aac6:	f04f 0320 	mov.w	r3, #32
    aaca:	f3ef 8511 	mrs	r5, BASEPRI
    aace:	f383 8812 	msr	BASEPRI_MAX, r3
    aad2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    aad6:	4919      	ldr	r1, [pc, #100]	; (ab3c <z_impl_k_yield+0x78>)
    aad8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aada:	7b43      	ldrb	r3, [r0, #13]
    aadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aae0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    aae2:	f002 fbb6 	bl	d252 <sys_dlist_remove>
	}
	queue_thread(_current);
    aae6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    aae8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    aaea:	4608      	mov	r0, r1
    aaec:	f062 027f 	orn	r2, r2, #127	; 0x7f
    aaf0:	735a      	strb	r2, [r3, #13]
    aaf2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    aaf6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aaf8:	4282      	cmp	r2, r0
    aafa:	bf08      	it	eq
    aafc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aafe:	b922      	cbnz	r2, ab0a <z_impl_k_yield+0x46>
	node->prev = tail;
    ab00:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    ab04:	6023      	str	r3, [r4, #0]
	list->tail = node;
    ab06:	620b      	str	r3, [r1, #32]
}
    ab08:	e00c      	b.n	ab24 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    ab0a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    ab0e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    ab12:	42be      	cmp	r6, r7
    ab14:	d00e      	beq.n	ab34 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ab16:	42b7      	cmp	r7, r6
    ab18:	dd0c      	ble.n	ab34 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    ab1a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    ab1c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    ab20:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    ab22:	6053      	str	r3, [r2, #4]
	update_cache(1);
    ab24:	2001      	movs	r0, #1
    ab26:	f7ff fde3 	bl	a6f0 <update_cache>
    ab2a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    ab2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab30:	f7fa b8fa 	b.w	4d28 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    ab34:	42a2      	cmp	r2, r4
    ab36:	d0e3      	beq.n	ab00 <z_impl_k_yield+0x3c>
    ab38:	6812      	ldr	r2, [r2, #0]
    ab3a:	e7e0      	b.n	aafe <z_impl_k_yield+0x3a>
    ab3c:	20001fa4 	.word	0x20001fa4

0000ab40 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    ab40:	ea50 0301 	orrs.w	r3, r0, r1
{
    ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab48:	4605      	mov	r5, r0
    ab4a:	460e      	mov	r6, r1
	if (ticks == 0) {
    ab4c:	d103      	bne.n	ab56 <z_tick_sleep+0x16>
	z_impl_k_yield();
    ab4e:	f7ff ffb9 	bl	aac4 <z_impl_k_yield>
		k_yield();
		return 0;
    ab52:	2000      	movs	r0, #0
    ab54:	e02c      	b.n	abb0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    ab56:	1c83      	adds	r3, r0, #2
    ab58:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    ab5c:	db2a      	blt.n	abb4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ab5e:	f002 fcb4 	bl	d4ca <sys_clock_tick_get_32>
    ab62:	182c      	adds	r4, r5, r0
    ab64:	f04f 0320 	mov.w	r3, #32
    ab68:	f3ef 8811 	mrs	r8, BASEPRI
    ab6c:	f383 8812 	msr	BASEPRI_MAX, r3
    ab70:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    ab74:	4f11      	ldr	r7, [pc, #68]	; (abbc <z_tick_sleep+0x7c>)
    ab76:	4b12      	ldr	r3, [pc, #72]	; (abc0 <z_tick_sleep+0x80>)
    ab78:	68b8      	ldr	r0, [r7, #8]
    ab7a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    ab7c:	f7ff fe44 	bl	a808 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ab80:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ab82:	4910      	ldr	r1, [pc, #64]	; (abc4 <z_tick_sleep+0x84>)
    ab84:	462a      	mov	r2, r5
    ab86:	4633      	mov	r3, r6
    ab88:	3018      	adds	r0, #24
    ab8a:	f000 f929 	bl	ade0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ab8e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ab90:	7b53      	ldrb	r3, [r2, #13]
    ab92:	f043 0310 	orr.w	r3, r3, #16
    ab96:	7353      	strb	r3, [r2, #13]
    ab98:	4640      	mov	r0, r8
    ab9a:	f7fa f8c5 	bl	4d28 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ab9e:	f002 fc94 	bl	d4ca <sys_clock_tick_get_32>
    aba2:	1a20      	subs	r0, r4, r0
    aba4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    aba8:	2801      	cmp	r0, #1
    abaa:	f173 0300 	sbcs.w	r3, r3, #0
    abae:	dbd0      	blt.n	ab52 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    abb4:	f06f 0401 	mvn.w	r4, #1
    abb8:	1a24      	subs	r4, r4, r0
    abba:	e7d3      	b.n	ab64 <z_tick_sleep+0x24>
    abbc:	20001fa4 	.word	0x20001fa4
    abc0:	20001fd0 	.word	0x20001fd0
    abc4:	0000d34f 	.word	0x0000d34f

0000abc8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    abc8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    abcc:	bf08      	it	eq
    abce:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    abd2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    abd4:	d106      	bne.n	abe4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    abd6:	4b08      	ldr	r3, [pc, #32]	; (abf8 <z_impl_k_sleep+0x30>)
    abd8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    abda:	f7ff ff09 	bl	a9f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    abde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    abe2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    abe4:	f7ff ffac 	bl	ab40 <z_tick_sleep>
    abe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    abec:	fb80 0303 	smull	r0, r3, r0, r3
    abf0:	0bc0      	lsrs	r0, r0, #15
    abf2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    abf6:	e7f4      	b.n	abe2 <z_impl_k_sleep+0x1a>
    abf8:	20001fa4 	.word	0x20001fa4

0000abfc <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    abfc:	b538      	push	{r3, r4, r5, lr}
    abfe:	4c0a      	ldr	r4, [pc, #40]	; (ac28 <z_impl_k_usleep+0x2c>)
    ac00:	4a0a      	ldr	r2, [pc, #40]	; (ac2c <z_impl_k_usleep+0x30>)
    ac02:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    ac06:	2100      	movs	r1, #0
    ac08:	fbc0 4105 	smlal	r4, r1, r0, r5
    ac0c:	2300      	movs	r3, #0
    ac0e:	4620      	mov	r0, r4
    ac10:	f7f6 fa76 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    ac14:	17c1      	asrs	r1, r0, #31
    ac16:	f7ff ff93 	bl	ab40 <z_tick_sleep>
    ac1a:	4b04      	ldr	r3, [pc, #16]	; (ac2c <z_impl_k_usleep+0x30>)
    ac1c:	fb80 0303 	smull	r0, r3, r0, r3
    ac20:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    ac22:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    ac26:	bd38      	pop	{r3, r4, r5, pc}
    ac28:	000f423f 	.word	0x000f423f
    ac2c:	000f4240 	.word	0x000f4240

0000ac30 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    ac30:	4b01      	ldr	r3, [pc, #4]	; (ac38 <z_impl_z_current_get+0x8>)
    ac32:	6898      	ldr	r0, [r3, #8]
    ac34:	4770      	bx	lr
    ac36:	bf00      	nop
    ac38:	20001fa4 	.word	0x20001fa4

0000ac3c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac40:	4604      	mov	r4, r0
    ac42:	f04f 0320 	mov.w	r3, #32
    ac46:	f3ef 8611 	mrs	r6, BASEPRI
    ac4a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    ac52:	7b03      	ldrb	r3, [r0, #12]
    ac54:	07d9      	lsls	r1, r3, #31
    ac56:	d50b      	bpl.n	ac70 <z_thread_abort+0x34>
	__asm__ volatile(
    ac58:	f386 8811 	msr	BASEPRI, r6
    ac5c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    ac60:	4040      	eors	r0, r0
    ac62:	f380 8811 	msr	BASEPRI, r0
    ac66:	f04f 0004 	mov.w	r0, #4
    ac6a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ac70:	7b43      	ldrb	r3, [r0, #13]
    ac72:	071a      	lsls	r2, r3, #28
    ac74:	d504      	bpl.n	ac80 <z_thread_abort+0x44>
    ac76:	f386 8811 	msr	BASEPRI, r6
    ac7a:	f3bf 8f6f 	isb	sy
    ac7e:	e7f5      	b.n	ac6c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    ac80:	f023 0220 	bic.w	r2, r3, #32
    ac84:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    ac88:	09d2      	lsrs	r2, r2, #7
    ac8a:	d120      	bne.n	acce <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    ac8c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    ac8e:	68a3      	ldr	r3, [r4, #8]
    ac90:	b113      	cbz	r3, ac98 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    ac92:	4620      	mov	r0, r4
    ac94:	f002 fae5 	bl	d262 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    ac98:	f104 0018 	add.w	r0, r4, #24
    ac9c:	f002 fbef 	bl	d47e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    aca0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    aca4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    aca8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    acaa:	42bd      	cmp	r5, r7
    acac:	d000      	beq.n	acb0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    acae:	b9b5      	cbnz	r5, acde <z_thread_abort+0xa2>
		update_cache(1);
    acb0:	2001      	movs	r0, #1
    acb2:	f7ff fd1d 	bl	a6f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    acb6:	4b10      	ldr	r3, [pc, #64]	; (acf8 <z_thread_abort+0xbc>)
    acb8:	689b      	ldr	r3, [r3, #8]
    acba:	42a3      	cmp	r3, r4
    acbc:	d1db      	bne.n	ac76 <z_thread_abort+0x3a>
    acbe:	f3ef 8305 	mrs	r3, IPSR
    acc2:	2b00      	cmp	r3, #0
    acc4:	d1d7      	bne.n	ac76 <z_thread_abort+0x3a>
    acc6:	4630      	mov	r0, r6
    acc8:	f7fa f82e 	bl	4d28 <arch_swap>
	return ret;
    accc:	e7d3      	b.n	ac76 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    acce:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    acd2:	f043 0308 	orr.w	r3, r3, #8
    acd6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    acd8:	f002 fabb 	bl	d252 <sys_dlist_remove>
}
    acdc:	e7d7      	b.n	ac8e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    acde:	4628      	mov	r0, r5
    ace0:	f002 fabf 	bl	d262 <unpend_thread_no_timeout>
    ace4:	f105 0018 	add.w	r0, r5, #24
    ace8:	f002 fbc9 	bl	d47e <z_abort_timeout>
    acec:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    acf0:	4628      	mov	r0, r5
    acf2:	f7ff fd55 	bl	a7a0 <ready_thread>
    acf6:	e7d7      	b.n	aca8 <z_thread_abort+0x6c>
    acf8:	20001fa4 	.word	0x20001fa4

0000acfc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    acfc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    acfe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    ad02:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    ad04:	e9cd 6700 	strd	r6, r7, [sp]
    ad08:	f7ff fdde 	bl	a8c8 <z_pend_curr>

	if (data != NULL) {
    ad0c:	b11c      	cbz	r4, ad16 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    ad0e:	4b03      	ldr	r3, [pc, #12]	; (ad1c <z_sched_wait+0x20>)
    ad10:	689b      	ldr	r3, [r3, #8]
    ad12:	695b      	ldr	r3, [r3, #20]
    ad14:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    ad16:	b002      	add	sp, #8
    ad18:	bdd0      	pop	{r4, r6, r7, pc}
    ad1a:	bf00      	nop
    ad1c:	20001fa4 	.word	0x20001fa4

0000ad20 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    ad20:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    ad22:	4806      	ldr	r0, [pc, #24]	; (ad3c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    ad24:	4a06      	ldr	r2, [pc, #24]	; (ad40 <z_data_copy+0x20>)
    ad26:	4907      	ldr	r1, [pc, #28]	; (ad44 <z_data_copy+0x24>)
    ad28:	1a12      	subs	r2, r2, r0
    ad2a:	f002 f930 	bl	cf8e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ad2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    ad32:	4a05      	ldr	r2, [pc, #20]	; (ad48 <z_data_copy+0x28>)
    ad34:	4905      	ldr	r1, [pc, #20]	; (ad4c <z_data_copy+0x2c>)
    ad36:	4806      	ldr	r0, [pc, #24]	; (ad50 <z_data_copy+0x30>)
    ad38:	f002 b929 	b.w	cf8e <z_early_memcpy>
    ad3c:	20000000 	.word	0x20000000
    ad40:	2000044c 	.word	0x2000044c
    ad44:	0000efc4 	.word	0x0000efc4
    ad48:	00000000 	.word	0x00000000
    ad4c:	0000efc4 	.word	0x0000efc4
    ad50:	20000000 	.word	0x20000000

0000ad54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ad54:	4b03      	ldr	r3, [pc, #12]	; (ad64 <elapsed+0x10>)
    ad56:	681b      	ldr	r3, [r3, #0]
    ad58:	b90b      	cbnz	r3, ad5e <elapsed+0xa>
    ad5a:	f7fc be4f 	b.w	79fc <sys_clock_elapsed>
}
    ad5e:	2000      	movs	r0, #0
    ad60:	4770      	bx	lr
    ad62:	bf00      	nop
    ad64:	20001fdc 	.word	0x20001fdc

0000ad68 <next_timeout>:

static int32_t next_timeout(void)
{
    ad68:	b510      	push	{r4, lr}
	return list->head == list;
    ad6a:	4b0e      	ldr	r3, [pc, #56]	; (ada4 <next_timeout+0x3c>)
    ad6c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ad6e:	429c      	cmp	r4, r3
    ad70:	d104      	bne.n	ad7c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    ad72:	f7ff ffef 	bl	ad54 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    ad76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    ad7a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    ad7c:	f7ff ffea 	bl	ad54 <elapsed>
	if ((to == NULL) ||
    ad80:	2c00      	cmp	r4, #0
    ad82:	d0f8      	beq.n	ad76 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    ad84:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    ad88:	1a1b      	subs	r3, r3, r0
    ad8a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    ad8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ad92:	f172 0100 	sbcs.w	r1, r2, #0
    ad96:	daee      	bge.n	ad76 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    ad98:	2a00      	cmp	r2, #0
    ad9a:	bfac      	ite	ge
    ad9c:	4618      	movge	r0, r3
    ad9e:	2000      	movlt	r0, #0
	return ret;
    ada0:	e7eb      	b.n	ad7a <next_timeout+0x12>
    ada2:	bf00      	nop
    ada4:	200001e4 	.word	0x200001e4

0000ada8 <remove_timeout>:
{
    ada8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    adaa:	b170      	cbz	r0, adca <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    adac:	4b0b      	ldr	r3, [pc, #44]	; (addc <remove_timeout+0x34>)
    adae:	685b      	ldr	r3, [r3, #4]
    adb0:	4298      	cmp	r0, r3
    adb2:	d00a      	beq.n	adca <remove_timeout+0x22>
    adb4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    adb6:	b143      	cbz	r3, adca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    adb8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    adbc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    adc0:	1912      	adds	r2, r2, r4
    adc2:	eb41 0105 	adc.w	r1, r1, r5
    adc6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    adca:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    adce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    add0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    add2:	2300      	movs	r3, #0
	node->prev = NULL;
    add4:	e9c0 3300 	strd	r3, r3, [r0]
}
    add8:	bd30      	pop	{r4, r5, pc}
    adda:	bf00      	nop
    addc:	200001e4 	.word	0x200001e4

0000ade0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ade0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ade4:	bf08      	it	eq
    ade6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    adea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adec:	4604      	mov	r4, r0
    adee:	461d      	mov	r5, r3
    adf0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    adf2:	d05c      	beq.n	aeae <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    adf4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    adf6:	f04f 0320 	mov.w	r3, #32
    adfa:	f3ef 8711 	mrs	r7, BASEPRI
    adfe:	f383 8812 	msr	BASEPRI_MAX, r3
    ae02:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ae06:	3201      	adds	r2, #1
    ae08:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    ae0c:	da24      	bge.n	ae58 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ae0e:	492d      	ldr	r1, [pc, #180]	; (aec4 <z_add_timeout+0xe4>)
    ae10:	e9d1 2000 	ldrd	r2, r0, [r1]
    ae14:	f06f 0301 	mvn.w	r3, #1
    ae18:	1a9b      	subs	r3, r3, r2
    ae1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ae1e:	eb62 0000 	sbc.w	r0, r2, r0
    ae22:	1b9e      	subs	r6, r3, r6
    ae24:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    ae28:	2e01      	cmp	r6, #1
    ae2a:	f170 0300 	sbcs.w	r3, r0, #0
    ae2e:	da01      	bge.n	ae34 <z_add_timeout+0x54>
    ae30:	2601      	movs	r6, #1
    ae32:	2000      	movs	r0, #0
    ae34:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    ae38:	4e23      	ldr	r6, [pc, #140]	; (aec8 <z_add_timeout+0xe8>)
    ae3a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    ae3e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae40:	45b4      	cmp	ip, r6
    ae42:	bf08      	it	eq
    ae44:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    ae48:	f1bc 0f00 	cmp.w	ip, #0
    ae4c:	d10d      	bne.n	ae6a <z_add_timeout+0x8a>
	node->prev = tail;
    ae4e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    ae52:	602c      	str	r4, [r5, #0]
	list->tail = node;
    ae54:	6074      	str	r4, [r6, #4]
}
    ae56:	e01c      	b.n	ae92 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    ae58:	f7ff ff7c 	bl	ad54 <elapsed>
    ae5c:	3601      	adds	r6, #1
    ae5e:	f145 0500 	adc.w	r5, r5, #0
    ae62:	1836      	adds	r6, r6, r0
    ae64:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    ae68:	e7e4      	b.n	ae34 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    ae6a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    ae6e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    ae72:	4293      	cmp	r3, r2
    ae74:	eb71 0e00 	sbcs.w	lr, r1, r0
    ae78:	da1a      	bge.n	aeb0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    ae7a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    ae7c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ae80:	eb60 0001 	sbc.w	r0, r0, r1
    ae84:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    ae88:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    ae8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ae8e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    ae92:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ae94:	42b3      	cmp	r3, r6
    ae96:	d006      	beq.n	aea6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ae98:	429c      	cmp	r4, r3
    ae9a:	d104      	bne.n	aea6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    ae9c:	f7ff ff64 	bl	ad68 <next_timeout>
    aea0:	2100      	movs	r1, #0
    aea2:	f7fc fd79 	bl	7998 <sys_clock_set_timeout>
	__asm__ volatile(
    aea6:	f387 8811 	msr	BASEPRI, r7
    aeaa:	f3bf 8f6f 	isb	sy
		}
	}
}
    aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    aeb0:	1a9b      	subs	r3, r3, r2
    aeb2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    aeb6:	45ac      	cmp	ip, r5
    aeb8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    aebc:	d0c7      	beq.n	ae4e <z_add_timeout+0x6e>
    aebe:	f8dc c000 	ldr.w	ip, [ip]
    aec2:	e7c1      	b.n	ae48 <z_add_timeout+0x68>
    aec4:	20000b88 	.word	0x20000b88
    aec8:	200001e4 	.word	0x200001e4

0000aecc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    aecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    aed0:	f04f 0320 	mov.w	r3, #32
    aed4:	f3ef 8c11 	mrs	ip, BASEPRI
    aed8:	f383 8812 	msr	BASEPRI_MAX, r3
    aedc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    aee0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; af94 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    aee4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; af98 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    aee8:	4f2c      	ldr	r7, [pc, #176]	; (af9c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    aeea:	f8c9 0000 	str.w	r0, [r9]
    aeee:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    aef2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aef4:	4550      	cmp	r0, sl
    aef6:	bf08      	it	eq
    aef8:	2000      	moveq	r0, #0
    aefa:	2500      	movs	r5, #0
		curr_tick += dt;
    aefc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    af00:	f8d9 3000 	ldr.w	r3, [r9]
    af04:	46e0      	mov	r8, ip
    af06:	b380      	cbz	r0, af6a <sys_clock_announce+0x9e>
    af08:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    af0c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    af10:	42b3      	cmp	r3, r6
    af12:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    af16:	da05      	bge.n	af24 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    af18:	1af6      	subs	r6, r6, r3
    af1a:	eb6c 040e 	sbc.w	r4, ip, lr
    af1e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    af22:	e022      	b.n	af6a <sys_clock_announce+0x9e>
		curr_tick += dt;
    af24:	18b2      	adds	r2, r6, r2
    af26:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    af2a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    af2e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    af32:	f7ff ff39 	bl	ada8 <remove_timeout>
	__asm__ volatile(
    af36:	f388 8811 	msr	BASEPRI, r8
    af3a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    af3e:	6883      	ldr	r3, [r0, #8]
    af40:	4798      	blx	r3
	__asm__ volatile(
    af42:	f04f 0320 	mov.w	r3, #32
    af46:	f3ef 8811 	mrs	r8, BASEPRI
    af4a:	f383 8812 	msr	BASEPRI_MAX, r3
    af4e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    af52:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    af56:	f8da 0000 	ldr.w	r0, [sl]
    af5a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    af5c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    af5e:	46c4      	mov	ip, r8
    af60:	f8c9 3000 	str.w	r3, [r9]
    af64:	d1ca      	bne.n	aefc <sys_clock_announce+0x30>
		curr_tick += dt;
    af66:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    af6a:	189a      	adds	r2, r3, r2
    af6c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    af70:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    af72:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    af76:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    af7a:	f7ff fef5 	bl	ad68 <next_timeout>
    af7e:	4621      	mov	r1, r4
    af80:	f7fc fd0a 	bl	7998 <sys_clock_set_timeout>
	__asm__ volatile(
    af84:	f388 8811 	msr	BASEPRI, r8
    af88:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    af8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    af90:	f7ff bc6a 	b.w	a868 <z_time_slice>
    af94:	200001e4 	.word	0x200001e4
    af98:	20001fdc 	.word	0x20001fdc
    af9c:	20000b88 	.word	0x20000b88

0000afa0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    afa0:	b510      	push	{r4, lr}
	__asm__ volatile(
    afa2:	f04f 0320 	mov.w	r3, #32
    afa6:	f3ef 8411 	mrs	r4, BASEPRI
    afaa:	f383 8812 	msr	BASEPRI_MAX, r3
    afae:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    afb2:	f7ff fecf 	bl	ad54 <elapsed>
    afb6:	4a06      	ldr	r2, [pc, #24]	; (afd0 <sys_clock_tick_get+0x30>)
    afb8:	4603      	mov	r3, r0
    afba:	e9d2 0100 	ldrd	r0, r1, [r2]
    afbe:	1818      	adds	r0, r3, r0
    afc0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    afc4:	f384 8811 	msr	BASEPRI, r4
    afc8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    afcc:	bd10      	pop	{r4, pc}
    afce:	bf00      	nop
    afd0:	20000b88 	.word	0x20000b88

0000afd4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afd6:	4604      	mov	r4, r0
	__asm__ volatile(
    afd8:	f04f 0320 	mov.w	r3, #32
    afdc:	f3ef 8711 	mrs	r7, BASEPRI
    afe0:	f383 8812 	msr	BASEPRI_MAX, r3
    afe4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    afe8:	6802      	ldr	r2, [r0, #0]
    afea:	b122      	cbz	r2, aff6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    afec:	f387 8811 	msr	BASEPRI, r7
    aff0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    aff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    aff6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    affa:	1c58      	adds	r0, r3, #1
    affc:	f146 0100 	adc.w	r1, r6, #0
    b000:	2802      	cmp	r0, #2
    b002:	f171 0100 	sbcs.w	r1, r1, #0
    b006:	d327      	bcc.n	b058 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    b008:	2b01      	cmp	r3, #1
    b00a:	f176 0100 	sbcs.w	r1, r6, #0
    b00e:	bfbc      	itt	lt
    b010:	2301      	movlt	r3, #1
    b012:	4616      	movlt	r6, r2
    b014:	1e5d      	subs	r5, r3, #1
    b016:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    b01a:	f002 fa5a 	bl	d4d2 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    b01e:	3001      	adds	r0, #1
    b020:	f141 0100 	adc.w	r1, r1, #0
    b024:	1940      	adds	r0, r0, r5
    b026:	eb46 0101 	adc.w	r1, r6, r1
    b02a:	2801      	cmp	r0, #1
    b02c:	f171 0100 	sbcs.w	r1, r1, #0
    b030:	db3a      	blt.n	b0a8 <z_timer_expiration_handler+0xd4>
    b032:	f002 fa4e 	bl	d4d2 <z_impl_k_uptime_ticks>
    b036:	3001      	adds	r0, #1
    b038:	f141 0100 	adc.w	r1, r1, #0
    b03c:	f06f 0201 	mvn.w	r2, #1
    b040:	1940      	adds	r0, r0, r5
    b042:	eb46 0301 	adc.w	r3, r6, r1
    b046:	1a12      	subs	r2, r2, r0
    b048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b04c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b050:	4918      	ldr	r1, [pc, #96]	; (b0b4 <z_timer_expiration_handler+0xe0>)
    b052:	4620      	mov	r0, r4
    b054:	f7ff fec4 	bl	ade0 <z_add_timeout>
	timer->status += 1U;
    b058:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b05a:	3301      	adds	r3, #1
    b05c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    b05e:	6a23      	ldr	r3, [r4, #32]
    b060:	b173      	cbz	r3, b080 <z_timer_expiration_handler+0xac>
    b062:	f387 8811 	msr	BASEPRI, r7
    b066:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    b06a:	6a23      	ldr	r3, [r4, #32]
    b06c:	4620      	mov	r0, r4
    b06e:	4798      	blx	r3
	__asm__ volatile(
    b070:	f04f 0320 	mov.w	r3, #32
    b074:	f3ef 8711 	mrs	r7, BASEPRI
    b078:	f383 8812 	msr	BASEPRI_MAX, r3
    b07c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b080:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b084:	42a5      	cmp	r5, r4
    b086:	d0b1      	beq.n	afec <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    b088:	2d00      	cmp	r5, #0
    b08a:	d0af      	beq.n	afec <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    b08c:	4628      	mov	r0, r5
    b08e:	f002 f92a 	bl	d2e6 <z_unpend_thread_no_timeout>
    b092:	2300      	movs	r3, #0
    b094:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    b096:	f387 8811 	msr	BASEPRI, r7
    b09a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    b09e:	4628      	mov	r0, r5
}
    b0a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    b0a4:	f002 b90f 	b.w	d2c6 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    b0a8:	f06f 0201 	mvn.w	r2, #1
    b0ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b0b0:	e7ce      	b.n	b050 <z_timer_expiration_handler+0x7c>
    b0b2:	bf00      	nop
    b0b4:	0000afd5 	.word	0x0000afd5

0000b0b8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b0c0:	bf08      	it	eq
    b0c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    b0c6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    b0ca:	4605      	mov	r5, r0
    b0cc:	461c      	mov	r4, r3
    b0ce:	4691      	mov	r9, r2
    b0d0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b0d2:	d01c      	beq.n	b10e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b0d4:	1c53      	adds	r3, r2, #1
    b0d6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    b0da:	db09      	blt.n	b0f0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b0dc:	2a01      	cmp	r2, #1
    b0de:	f174 0300 	sbcs.w	r3, r4, #0
    b0e2:	bfbc      	itt	lt
    b0e4:	2201      	movlt	r2, #1
    b0e6:	2400      	movlt	r4, #0
    b0e8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    b0ec:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    b0f0:	4628      	mov	r0, r5
    b0f2:	f002 f9c4 	bl	d47e <z_abort_timeout>
	timer->period = period;
    b0f6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    b0fa:	2300      	movs	r3, #0
    b0fc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b0fe:	464a      	mov	r2, r9
    b100:	4643      	mov	r3, r8
    b102:	4628      	mov	r0, r5
    b104:	4903      	ldr	r1, [pc, #12]	; (b114 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    b106:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b10a:	f7ff be69 	b.w	ade0 <z_add_timeout>
}
    b10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b112:	bf00      	nop
    b114:	0000afd5 	.word	0x0000afd5

0000b118 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b118:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b11a:	4606      	mov	r6, r0
    b11c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b11e:	f001 ff85 	bl	d02c <k_is_in_isr>
    b122:	b978      	cbnz	r0, b144 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b124:	4b0b      	ldr	r3, [pc, #44]	; (b154 <z_thread_aligned_alloc+0x3c>)
    b126:	689b      	ldr	r3, [r3, #8]
    b128:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    b12a:	b17c      	cbz	r4, b14c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    b12c:	1d2a      	adds	r2, r5, #4
    b12e:	d209      	bcs.n	b144 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    b130:	2000      	movs	r0, #0
    b132:	2100      	movs	r1, #0
    b134:	e9cd 0100 	strd	r0, r1, [sp]
    b138:	f046 0104 	orr.w	r1, r6, #4
    b13c:	4620      	mov	r0, r4
    b13e:	f002 fa28 	bl	d592 <k_heap_aligned_alloc>
	if (mem == NULL) {
    b142:	b908      	cbnz	r0, b148 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    b144:	2400      	movs	r4, #0
	}

	return ret;
    b146:	e001      	b.n	b14c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    b148:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    b14a:	1d04      	adds	r4, r0, #4
}
    b14c:	4620      	mov	r0, r4
    b14e:	b002      	add	sp, #8
    b150:	bd70      	pop	{r4, r5, r6, pc}
    b152:	bf00      	nop
    b154:	20001fa4 	.word	0x20001fa4

0000b158 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    b158:	4801      	ldr	r0, [pc, #4]	; (b160 <boot_banner+0x8>)
    b15a:	f000 ba8a 	b.w	b672 <printk>
    b15e:	bf00      	nop
    b160:	0000ef8b 	.word	0x0000ef8b

0000b164 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    b164:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b166:	4c06      	ldr	r4, [pc, #24]	; (b180 <statics_init+0x1c>)
    b168:	4d06      	ldr	r5, [pc, #24]	; (b184 <statics_init+0x20>)
    b16a:	42ac      	cmp	r4, r5
    b16c:	d301      	bcc.n	b172 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    b16e:	2000      	movs	r0, #0
    b170:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b172:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    b176:	4620      	mov	r0, r4
    b178:	f002 fa03 	bl	d582 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b17c:	3414      	adds	r4, #20
    b17e:	e7f4      	b.n	b16a <statics_init+0x6>
    b180:	200002b4 	.word	0x200002b4
    b184:	200002b4 	.word	0x200002b4

0000b188 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    b188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    b18a:	4b09      	ldr	r3, [pc, #36]	; (b1b0 <k_sys_work_q_init+0x28>)
    b18c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b18e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b190:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b192:	9300      	str	r3, [sp, #0]
    b194:	4907      	ldr	r1, [pc, #28]	; (b1b4 <k_sys_work_q_init+0x2c>)
    b196:	4808      	ldr	r0, [pc, #32]	; (b1b8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b198:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b1a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b1a4:	f7ff f9ec 	bl	a580 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b1a8:	4620      	mov	r0, r4
    b1aa:	b004      	add	sp, #16
    b1ac:	bd10      	pop	{r4, pc}
    b1ae:	bf00      	nop
    b1b0:	0000efb9 	.word	0x0000efb9
    b1b4:	20003bc0 	.word	0x20003bc0
    b1b8:	20000b90 	.word	0x20000b90

0000b1bc <nrf_cc3xx_platform_init_no_rng>:
    b1bc:	b510      	push	{r4, lr}
    b1be:	4c0a      	ldr	r4, [pc, #40]	; (b1e8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b1c0:	6823      	ldr	r3, [r4, #0]
    b1c2:	b11b      	cbz	r3, b1cc <nrf_cc3xx_platform_init_no_rng+0x10>
    b1c4:	2301      	movs	r3, #1
    b1c6:	6023      	str	r3, [r4, #0]
    b1c8:	2000      	movs	r0, #0
    b1ca:	bd10      	pop	{r4, pc}
    b1cc:	f000 f8ea 	bl	b3a4 <CC_LibInitNoRng>
    b1d0:	2800      	cmp	r0, #0
    b1d2:	d0f7      	beq.n	b1c4 <nrf_cc3xx_platform_init_no_rng+0x8>
    b1d4:	3801      	subs	r0, #1
    b1d6:	2806      	cmp	r0, #6
    b1d8:	d803      	bhi.n	b1e2 <nrf_cc3xx_platform_init_no_rng+0x26>
    b1da:	4b04      	ldr	r3, [pc, #16]	; (b1ec <nrf_cc3xx_platform_init_no_rng+0x30>)
    b1dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b1e0:	bd10      	pop	{r4, pc}
    b1e2:	4803      	ldr	r0, [pc, #12]	; (b1f0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b1e4:	bd10      	pop	{r4, pc}
    b1e6:	bf00      	nop
    b1e8:	20001fe0 	.word	0x20001fe0
    b1ec:	0000dd58 	.word	0x0000dd58
    b1f0:	ffff8ffe 	.word	0xffff8ffe

0000b1f4 <nrf_cc3xx_platform_abort>:
    b1f4:	f3bf 8f4f 	dsb	sy
    b1f8:	4905      	ldr	r1, [pc, #20]	; (b210 <nrf_cc3xx_platform_abort+0x1c>)
    b1fa:	4b06      	ldr	r3, [pc, #24]	; (b214 <nrf_cc3xx_platform_abort+0x20>)
    b1fc:	68ca      	ldr	r2, [r1, #12]
    b1fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b202:	4313      	orrs	r3, r2
    b204:	60cb      	str	r3, [r1, #12]
    b206:	f3bf 8f4f 	dsb	sy
    b20a:	bf00      	nop
    b20c:	e7fd      	b.n	b20a <nrf_cc3xx_platform_abort+0x16>
    b20e:	bf00      	nop
    b210:	e000ed00 	.word	0xe000ed00
    b214:	05fa0004 	.word	0x05fa0004

0000b218 <CC_PalAbort>:
    b218:	b410      	push	{r4}
    b21a:	4b09      	ldr	r3, [pc, #36]	; (b240 <CC_PalAbort+0x28>)
    b21c:	4909      	ldr	r1, [pc, #36]	; (b244 <CC_PalAbort+0x2c>)
    b21e:	4c0a      	ldr	r4, [pc, #40]	; (b248 <CC_PalAbort+0x30>)
    b220:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    b224:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    b228:	6849      	ldr	r1, [r1, #4]
    b22a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    b22e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    b232:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    b236:	2300      	movs	r3, #0
    b238:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    b23c:	bc10      	pop	{r4}
    b23e:	4708      	bx	r1
    b240:	5002b000 	.word	0x5002b000
    b244:	200001ec 	.word	0x200001ec
    b248:	5002a000 	.word	0x5002a000

0000b24c <nrf_cc3xx_platform_set_abort>:
    b24c:	e9d0 1200 	ldrd	r1, r2, [r0]
    b250:	4b01      	ldr	r3, [pc, #4]	; (b258 <nrf_cc3xx_platform_set_abort+0xc>)
    b252:	e9c3 1200 	strd	r1, r2, [r3]
    b256:	4770      	bx	lr
    b258:	200001ec 	.word	0x200001ec

0000b25c <mutex_free>:
    b25c:	b510      	push	{r4, lr}
    b25e:	4604      	mov	r4, r0
    b260:	b150      	cbz	r0, b278 <mutex_free+0x1c>
    b262:	6863      	ldr	r3, [r4, #4]
    b264:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    b268:	d005      	beq.n	b276 <mutex_free+0x1a>
    b26a:	4a06      	ldr	r2, [pc, #24]	; (b284 <mutex_free+0x28>)
    b26c:	4293      	cmp	r3, r2
    b26e:	d002      	beq.n	b276 <mutex_free+0x1a>
    b270:	2300      	movs	r3, #0
    b272:	6023      	str	r3, [r4, #0]
    b274:	6062      	str	r2, [r4, #4]
    b276:	bd10      	pop	{r4, pc}
    b278:	4b03      	ldr	r3, [pc, #12]	; (b288 <mutex_free+0x2c>)
    b27a:	4804      	ldr	r0, [pc, #16]	; (b28c <mutex_free+0x30>)
    b27c:	685b      	ldr	r3, [r3, #4]
    b27e:	4798      	blx	r3
    b280:	e7ef      	b.n	b262 <mutex_free+0x6>
    b282:	bf00      	nop
    b284:	a95c5f2c 	.word	0xa95c5f2c
    b288:	200001ec 	.word	0x200001ec
    b28c:	0000dd74 	.word	0x0000dd74

0000b290 <mutex_lock>:
    b290:	b1c8      	cbz	r0, b2c6 <mutex_lock+0x36>
    b292:	6843      	ldr	r3, [r0, #4]
    b294:	4a0d      	ldr	r2, [pc, #52]	; (b2cc <mutex_lock+0x3c>)
    b296:	4293      	cmp	r3, r2
    b298:	d013      	beq.n	b2c2 <mutex_lock+0x32>
    b29a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    b29e:	d00e      	beq.n	b2be <mutex_lock+0x2e>
    b2a0:	2301      	movs	r3, #1
    b2a2:	e850 2f00 	ldrex	r2, [r0]
    b2a6:	4619      	mov	r1, r3
    b2a8:	e840 1c00 	strex	ip, r1, [r0]
    b2ac:	f09c 0f00 	teq	ip, #0
    b2b0:	d1f7      	bne.n	b2a2 <mutex_lock+0x12>
    b2b2:	2a01      	cmp	r2, #1
    b2b4:	d0f5      	beq.n	b2a2 <mutex_lock+0x12>
    b2b6:	f3bf 8f5f 	dmb	sy
    b2ba:	2000      	movs	r0, #0
    b2bc:	4770      	bx	lr
    b2be:	4804      	ldr	r0, [pc, #16]	; (b2d0 <mutex_lock+0x40>)
    b2c0:	4770      	bx	lr
    b2c2:	4804      	ldr	r0, [pc, #16]	; (b2d4 <mutex_lock+0x44>)
    b2c4:	4770      	bx	lr
    b2c6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b2ca:	4770      	bx	lr
    b2cc:	a95c5f2c 	.word	0xa95c5f2c
    b2d0:	ffff8fe9 	.word	0xffff8fe9
    b2d4:	ffff8fea 	.word	0xffff8fea

0000b2d8 <mutex_unlock>:
    b2d8:	b180      	cbz	r0, b2fc <mutex_unlock+0x24>
    b2da:	6843      	ldr	r3, [r0, #4]
    b2dc:	4a09      	ldr	r2, [pc, #36]	; (b304 <mutex_unlock+0x2c>)
    b2de:	4293      	cmp	r3, r2
    b2e0:	d00a      	beq.n	b2f8 <mutex_unlock+0x20>
    b2e2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    b2e6:	d005      	beq.n	b2f4 <mutex_unlock+0x1c>
    b2e8:	f3bf 8f5f 	dmb	sy
    b2ec:	2300      	movs	r3, #0
    b2ee:	6003      	str	r3, [r0, #0]
    b2f0:	4618      	mov	r0, r3
    b2f2:	4770      	bx	lr
    b2f4:	4804      	ldr	r0, [pc, #16]	; (b308 <mutex_unlock+0x30>)
    b2f6:	4770      	bx	lr
    b2f8:	4804      	ldr	r0, [pc, #16]	; (b30c <mutex_unlock+0x34>)
    b2fa:	4770      	bx	lr
    b2fc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b300:	4770      	bx	lr
    b302:	bf00      	nop
    b304:	a95c5f2c 	.word	0xa95c5f2c
    b308:	ffff8fe9 	.word	0xffff8fe9
    b30c:	ffff8fea 	.word	0xffff8fea

0000b310 <mutex_init>:
    b310:	b510      	push	{r4, lr}
    b312:	4604      	mov	r4, r0
    b314:	b120      	cbz	r0, b320 <mutex_init+0x10>
    b316:	4b04      	ldr	r3, [pc, #16]	; (b328 <mutex_init+0x18>)
    b318:	6063      	str	r3, [r4, #4]
    b31a:	2200      	movs	r2, #0
    b31c:	6022      	str	r2, [r4, #0]
    b31e:	bd10      	pop	{r4, pc}
    b320:	4802      	ldr	r0, [pc, #8]	; (b32c <mutex_init+0x1c>)
    b322:	f7ff ff79 	bl	b218 <CC_PalAbort>
    b326:	e7f6      	b.n	b316 <mutex_init+0x6>
    b328:	3a00003a 	.word	0x3a00003a
    b32c:	0000dd9c 	.word	0x0000dd9c

0000b330 <nrf_cc3xx_platform_set_mutexes>:
    b330:	b570      	push	{r4, r5, r6, lr}
    b332:	e9d0 2300 	ldrd	r2, r3, [r0]
    b336:	4c17      	ldr	r4, [pc, #92]	; (b394 <nrf_cc3xx_platform_set_mutexes+0x64>)
    b338:	4d17      	ldr	r5, [pc, #92]	; (b398 <nrf_cc3xx_platform_set_mutexes+0x68>)
    b33a:	6063      	str	r3, [r4, #4]
    b33c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    b340:	e9c4 3002 	strd	r3, r0, [r4, #8]
    b344:	6022      	str	r2, [r4, #0]
    b346:	6848      	ldr	r0, [r1, #4]
    b348:	f8d1 c000 	ldr.w	ip, [r1]
    b34c:	4b13      	ldr	r3, [pc, #76]	; (b39c <nrf_cc3xx_platform_set_mutexes+0x6c>)
    b34e:	e9c3 c000 	strd	ip, r0, [r3]
    b352:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    b356:	f8d1 c008 	ldr.w	ip, [r1, #8]
    b35a:	f8c3 c008 	str.w	ip, [r3, #8]
    b35e:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    b362:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b366:	6909      	ldr	r1, [r1, #16]
    b368:	f8c3 c00c 	str.w	ip, [r3, #12]
    b36c:	6119      	str	r1, [r3, #16]
    b36e:	d010      	beq.n	b392 <nrf_cc3xx_platform_set_mutexes+0x62>
    b370:	490b      	ldr	r1, [pc, #44]	; (b3a0 <nrf_cc3xx_platform_set_mutexes+0x70>)
    b372:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    b376:	2300      	movs	r3, #0
    b378:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    b37c:	f505 708a 	add.w	r0, r5, #276	; 0x114
    b380:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    b384:	4790      	blx	r2
    b386:	6823      	ldr	r3, [r4, #0]
    b388:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    b38c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b390:	4718      	bx	r3
    b392:	bd70      	pop	{r4, r5, r6, pc}
    b394:	20000208 	.word	0x20000208
    b398:	20001ff8 	.word	0x20001ff8
    b39c:	200001f4 	.word	0x200001f4
    b3a0:	a95c5f2c 	.word	0xa95c5f2c

0000b3a4 <CC_LibInitNoRng>:
    b3a4:	b538      	push	{r3, r4, r5, lr}
    b3a6:	f000 f82f 	bl	b408 <CC_HalInit>
    b3aa:	b120      	cbz	r0, b3b6 <CC_LibInitNoRng+0x12>
    b3ac:	2403      	movs	r4, #3
    b3ae:	f000 f863 	bl	b478 <CC_PalTerminate>
    b3b2:	4620      	mov	r0, r4
    b3b4:	bd38      	pop	{r3, r4, r5, pc}
    b3b6:	f000 f831 	bl	b41c <CC_PalInit>
    b3ba:	b998      	cbnz	r0, b3e4 <CC_LibInitNoRng+0x40>
    b3bc:	f000 f8ac 	bl	b518 <CC_PalPowerSaveModeSelect>
    b3c0:	b998      	cbnz	r0, b3ea <CC_LibInitNoRng+0x46>
    b3c2:	4d0f      	ldr	r5, [pc, #60]	; (b400 <CC_LibInitNoRng+0x5c>)
    b3c4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    b3c8:	0e1b      	lsrs	r3, r3, #24
    b3ca:	2bf0      	cmp	r3, #240	; 0xf0
    b3cc:	d108      	bne.n	b3e0 <CC_LibInitNoRng+0x3c>
    b3ce:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    b3d2:	4b0c      	ldr	r3, [pc, #48]	; (b404 <CC_LibInitNoRng+0x60>)
    b3d4:	429a      	cmp	r2, r3
    b3d6:	d00a      	beq.n	b3ee <CC_LibInitNoRng+0x4a>
    b3d8:	2407      	movs	r4, #7
    b3da:	f000 f817 	bl	b40c <CC_HalTerminate>
    b3de:	e7e6      	b.n	b3ae <CC_LibInitNoRng+0xa>
    b3e0:	2406      	movs	r4, #6
    b3e2:	e7fa      	b.n	b3da <CC_LibInitNoRng+0x36>
    b3e4:	2404      	movs	r4, #4
    b3e6:	4620      	mov	r0, r4
    b3e8:	bd38      	pop	{r3, r4, r5, pc}
    b3ea:	2400      	movs	r4, #0
    b3ec:	e7f5      	b.n	b3da <CC_LibInitNoRng+0x36>
    b3ee:	2001      	movs	r0, #1
    b3f0:	f000 f892 	bl	b518 <CC_PalPowerSaveModeSelect>
    b3f4:	4604      	mov	r4, r0
    b3f6:	2800      	cmp	r0, #0
    b3f8:	d1f7      	bne.n	b3ea <CC_LibInitNoRng+0x46>
    b3fa:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    b3fe:	e7d8      	b.n	b3b2 <CC_LibInitNoRng+0xe>
    b400:	5002b000 	.word	0x5002b000
    b404:	20e00000 	.word	0x20e00000

0000b408 <CC_HalInit>:
    b408:	2000      	movs	r0, #0
    b40a:	4770      	bx	lr

0000b40c <CC_HalTerminate>:
    b40c:	2000      	movs	r0, #0
    b40e:	4770      	bx	lr

0000b410 <CC_HalMaskInterrupt>:
    b410:	4b01      	ldr	r3, [pc, #4]	; (b418 <CC_HalMaskInterrupt+0x8>)
    b412:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    b416:	4770      	bx	lr
    b418:	5002b000 	.word	0x5002b000

0000b41c <CC_PalInit>:
    b41c:	b510      	push	{r4, lr}
    b41e:	4811      	ldr	r0, [pc, #68]	; (b464 <CC_PalInit+0x48>)
    b420:	f000 f848 	bl	b4b4 <CC_PalMutexCreate>
    b424:	b100      	cbz	r0, b428 <CC_PalInit+0xc>
    b426:	bd10      	pop	{r4, pc}
    b428:	480f      	ldr	r0, [pc, #60]	; (b468 <CC_PalInit+0x4c>)
    b42a:	f000 f843 	bl	b4b4 <CC_PalMutexCreate>
    b42e:	2800      	cmp	r0, #0
    b430:	d1f9      	bne.n	b426 <CC_PalInit+0xa>
    b432:	4c0e      	ldr	r4, [pc, #56]	; (b46c <CC_PalInit+0x50>)
    b434:	4620      	mov	r0, r4
    b436:	f000 f83d 	bl	b4b4 <CC_PalMutexCreate>
    b43a:	2800      	cmp	r0, #0
    b43c:	d1f3      	bne.n	b426 <CC_PalInit+0xa>
    b43e:	4b0c      	ldr	r3, [pc, #48]	; (b470 <CC_PalInit+0x54>)
    b440:	480c      	ldr	r0, [pc, #48]	; (b474 <CC_PalInit+0x58>)
    b442:	601c      	str	r4, [r3, #0]
    b444:	f000 f836 	bl	b4b4 <CC_PalMutexCreate>
    b448:	4601      	mov	r1, r0
    b44a:	2800      	cmp	r0, #0
    b44c:	d1eb      	bne.n	b426 <CC_PalInit+0xa>
    b44e:	f000 f82d 	bl	b4ac <CC_PalDmaInit>
    b452:	4604      	mov	r4, r0
    b454:	b108      	cbz	r0, b45a <CC_PalInit+0x3e>
    b456:	4620      	mov	r0, r4
    b458:	bd10      	pop	{r4, pc}
    b45a:	f000 f83f 	bl	b4dc <CC_PalPowerSaveModeInit>
    b45e:	4620      	mov	r0, r4
    b460:	e7fa      	b.n	b458 <CC_PalInit+0x3c>
    b462:	bf00      	nop
    b464:	20000248 	.word	0x20000248
    b468:	20000244 	.word	0x20000244
    b46c:	20000240 	.word	0x20000240
    b470:	20000238 	.word	0x20000238
    b474:	2000023c 	.word	0x2000023c

0000b478 <CC_PalTerminate>:
    b478:	b508      	push	{r3, lr}
    b47a:	4808      	ldr	r0, [pc, #32]	; (b49c <CC_PalTerminate+0x24>)
    b47c:	f000 f824 	bl	b4c8 <CC_PalMutexDestroy>
    b480:	4807      	ldr	r0, [pc, #28]	; (b4a0 <CC_PalTerminate+0x28>)
    b482:	f000 f821 	bl	b4c8 <CC_PalMutexDestroy>
    b486:	4807      	ldr	r0, [pc, #28]	; (b4a4 <CC_PalTerminate+0x2c>)
    b488:	f000 f81e 	bl	b4c8 <CC_PalMutexDestroy>
    b48c:	4806      	ldr	r0, [pc, #24]	; (b4a8 <CC_PalTerminate+0x30>)
    b48e:	f000 f81b 	bl	b4c8 <CC_PalMutexDestroy>
    b492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b496:	f000 b80b 	b.w	b4b0 <CC_PalDmaTerminate>
    b49a:	bf00      	nop
    b49c:	20000248 	.word	0x20000248
    b4a0:	20000244 	.word	0x20000244
    b4a4:	20000240 	.word	0x20000240
    b4a8:	2000023c 	.word	0x2000023c

0000b4ac <CC_PalDmaInit>:
    b4ac:	2000      	movs	r0, #0
    b4ae:	4770      	bx	lr

0000b4b0 <CC_PalDmaTerminate>:
    b4b0:	4770      	bx	lr
    b4b2:	bf00      	nop

0000b4b4 <CC_PalMutexCreate>:
    b4b4:	b508      	push	{r3, lr}
    b4b6:	4b03      	ldr	r3, [pc, #12]	; (b4c4 <CC_PalMutexCreate+0x10>)
    b4b8:	6802      	ldr	r2, [r0, #0]
    b4ba:	681b      	ldr	r3, [r3, #0]
    b4bc:	6810      	ldr	r0, [r2, #0]
    b4be:	4798      	blx	r3
    b4c0:	2000      	movs	r0, #0
    b4c2:	bd08      	pop	{r3, pc}
    b4c4:	20000208 	.word	0x20000208

0000b4c8 <CC_PalMutexDestroy>:
    b4c8:	b508      	push	{r3, lr}
    b4ca:	4b03      	ldr	r3, [pc, #12]	; (b4d8 <CC_PalMutexDestroy+0x10>)
    b4cc:	6802      	ldr	r2, [r0, #0]
    b4ce:	685b      	ldr	r3, [r3, #4]
    b4d0:	6810      	ldr	r0, [r2, #0]
    b4d2:	4798      	blx	r3
    b4d4:	2000      	movs	r0, #0
    b4d6:	bd08      	pop	{r3, pc}
    b4d8:	20000208 	.word	0x20000208

0000b4dc <CC_PalPowerSaveModeInit>:
    b4dc:	b570      	push	{r4, r5, r6, lr}
    b4de:	4c09      	ldr	r4, [pc, #36]	; (b504 <CC_PalPowerSaveModeInit+0x28>)
    b4e0:	4d09      	ldr	r5, [pc, #36]	; (b508 <CC_PalPowerSaveModeInit+0x2c>)
    b4e2:	6920      	ldr	r0, [r4, #16]
    b4e4:	68ab      	ldr	r3, [r5, #8]
    b4e6:	4798      	blx	r3
    b4e8:	b118      	cbz	r0, b4f2 <CC_PalPowerSaveModeInit+0x16>
    b4ea:	4b08      	ldr	r3, [pc, #32]	; (b50c <CC_PalPowerSaveModeInit+0x30>)
    b4ec:	4808      	ldr	r0, [pc, #32]	; (b510 <CC_PalPowerSaveModeInit+0x34>)
    b4ee:	685b      	ldr	r3, [r3, #4]
    b4f0:	4798      	blx	r3
    b4f2:	4a08      	ldr	r2, [pc, #32]	; (b514 <CC_PalPowerSaveModeInit+0x38>)
    b4f4:	68eb      	ldr	r3, [r5, #12]
    b4f6:	6920      	ldr	r0, [r4, #16]
    b4f8:	2100      	movs	r1, #0
    b4fa:	6011      	str	r1, [r2, #0]
    b4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b500:	4718      	bx	r3
    b502:	bf00      	nop
    b504:	200001f4 	.word	0x200001f4
    b508:	20000208 	.word	0x20000208
    b50c:	200001ec 	.word	0x200001ec
    b510:	0000ddc0 	.word	0x0000ddc0
    b514:	20001ff4 	.word	0x20001ff4

0000b518 <CC_PalPowerSaveModeSelect>:
    b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b51a:	4d1a      	ldr	r5, [pc, #104]	; (b584 <CC_PalPowerSaveModeSelect+0x6c>)
    b51c:	4e1a      	ldr	r6, [pc, #104]	; (b588 <CC_PalPowerSaveModeSelect+0x70>)
    b51e:	4604      	mov	r4, r0
    b520:	68b2      	ldr	r2, [r6, #8]
    b522:	6928      	ldr	r0, [r5, #16]
    b524:	4790      	blx	r2
    b526:	b9e8      	cbnz	r0, b564 <CC_PalPowerSaveModeSelect+0x4c>
    b528:	4f18      	ldr	r7, [pc, #96]	; (b58c <CC_PalPowerSaveModeSelect+0x74>)
    b52a:	683b      	ldr	r3, [r7, #0]
    b52c:	b14c      	cbz	r4, b542 <CC_PalPowerSaveModeSelect+0x2a>
    b52e:	b1a3      	cbz	r3, b55a <CC_PalPowerSaveModeSelect+0x42>
    b530:	2b01      	cmp	r3, #1
    b532:	d019      	beq.n	b568 <CC_PalPowerSaveModeSelect+0x50>
    b534:	3b01      	subs	r3, #1
    b536:	603b      	str	r3, [r7, #0]
    b538:	6928      	ldr	r0, [r5, #16]
    b53a:	68f3      	ldr	r3, [r6, #12]
    b53c:	4798      	blx	r3
    b53e:	2000      	movs	r0, #0
    b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b542:	b943      	cbnz	r3, b556 <CC_PalPowerSaveModeSelect+0x3e>
    b544:	4a12      	ldr	r2, [pc, #72]	; (b590 <CC_PalPowerSaveModeSelect+0x78>)
    b546:	2101      	movs	r1, #1
    b548:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    b54c:	4911      	ldr	r1, [pc, #68]	; (b594 <CC_PalPowerSaveModeSelect+0x7c>)
    b54e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    b552:	2a00      	cmp	r2, #0
    b554:	d1fb      	bne.n	b54e <CC_PalPowerSaveModeSelect+0x36>
    b556:	3301      	adds	r3, #1
    b558:	603b      	str	r3, [r7, #0]
    b55a:	68f3      	ldr	r3, [r6, #12]
    b55c:	6928      	ldr	r0, [r5, #16]
    b55e:	4798      	blx	r3
    b560:	2000      	movs	r0, #0
    b562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b564:	480c      	ldr	r0, [pc, #48]	; (b598 <CC_PalPowerSaveModeSelect+0x80>)
    b566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b568:	4a0a      	ldr	r2, [pc, #40]	; (b594 <CC_PalPowerSaveModeSelect+0x7c>)
    b56a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    b56e:	2b00      	cmp	r3, #0
    b570:	d1fb      	bne.n	b56a <CC_PalPowerSaveModeSelect+0x52>
    b572:	4a07      	ldr	r2, [pc, #28]	; (b590 <CC_PalPowerSaveModeSelect+0x78>)
    b574:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    b578:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b57c:	f7ff ff48 	bl	b410 <CC_HalMaskInterrupt>
    b580:	683b      	ldr	r3, [r7, #0]
    b582:	e7d7      	b.n	b534 <CC_PalPowerSaveModeSelect+0x1c>
    b584:	200001f4 	.word	0x200001f4
    b588:	20000208 	.word	0x20000208
    b58c:	20001ff4 	.word	0x20001ff4
    b590:	5002a000 	.word	0x5002a000
    b594:	5002b000 	.word	0x5002b000
    b598:	ffff8fe9 	.word	0xffff8fe9

0000b59c <cbpprintf_external>:
{
    b59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5a0:	4606      	mov	r6, r0
    b5a2:	460d      	mov	r5, r1
    b5a4:	4617      	mov	r7, r2
	if (buf == NULL) {
    b5a6:	4698      	mov	r8, r3
    b5a8:	b32b      	cbz	r3, b5f6 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    b5aa:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    b5ae:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    b5b2:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    b5b4:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    b5b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    b5ba:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    b5be:	441c      	add	r4, r3
    b5c0:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    b5c2:	f04f 0a00 	mov.w	sl, #0
    b5c6:	45ca      	cmp	sl, r9
    b5c8:	d309      	bcc.n	b5de <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    b5ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b5ce:	f108 0308 	add.w	r3, r8, #8
    b5d2:	4639      	mov	r1, r7
    b5d4:	4630      	mov	r0, r6
    b5d6:	46ac      	mov	ip, r5
}
    b5d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    b5dc:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    b5de:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    b5e2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    b5e6:	4620      	mov	r0, r4
    b5e8:	f001 f8f2 	bl	c7d0 <strlen>
    b5ec:	3001      	adds	r0, #1
    b5ee:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    b5f0:	f10a 0a01 	add.w	sl, sl, #1
    b5f4:	e7e7      	b.n	b5c6 <cbpprintf_external+0x2a>
}
    b5f6:	f06f 0015 	mvn.w	r0, #21
    b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b5fe <is_ptr>:
{
    b5fe:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    b600:	2500      	movs	r5, #0
{
    b602:	4602      	mov	r2, r0
	bool mod = false;
    b604:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    b606:	4614      	mov	r4, r2
    b608:	f814 3b01 	ldrb.w	r3, [r4], #1
    b60c:	b90b      	cbnz	r3, b612 <is_ptr+0x14>
					return false;
    b60e:	4618      	mov	r0, r3
    b610:	e009      	b.n	b626 <is_ptr+0x28>
		if (mod) {
    b612:	b198      	cbz	r0, b63c <is_ptr+0x3e>
			if (cnt == n) {
    b614:	428d      	cmp	r5, r1
    b616:	d107      	bne.n	b628 <is_ptr+0x2a>
				if (c == 'p') {
    b618:	2b70      	cmp	r3, #112	; 0x70
    b61a:	d004      	beq.n	b626 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    b61c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    b620:	2a3a      	cmp	r2, #58	; 0x3a
    b622:	d80b      	bhi.n	b63c <is_ptr+0x3e>
					return false;
    b624:	2000      	movs	r0, #0
}
    b626:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    b628:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    b62c:	2e3a      	cmp	r6, #58	; 0x3a
    b62e:	d805      	bhi.n	b63c <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    b630:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    b632:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    b634:	1c94      	adds	r4, r2, #2
    b636:	2b00      	cmp	r3, #0
    b638:	d0e9      	beq.n	b60e <is_ptr+0x10>
    b63a:	2000      	movs	r0, #0
		if (c == '%') {
    b63c:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    b63e:	bf08      	it	eq
    b640:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    b644:	4622      	mov	r2, r4
    b646:	e7de      	b.n	b606 <is_ptr+0x8>

0000b648 <arch_printk_char_out>:
}
    b648:	2000      	movs	r0, #0
    b64a:	4770      	bx	lr

0000b64c <str_out>:
{
    b64c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b64e:	688a      	ldr	r2, [r1, #8]
    b650:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    b652:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b654:	b114      	cbz	r4, b65c <str_out+0x10>
    b656:	684b      	ldr	r3, [r1, #4]
    b658:	4293      	cmp	r3, r2
    b65a:	dc01      	bgt.n	b660 <str_out+0x14>
		ctx->count++;
    b65c:	608d      	str	r5, [r1, #8]
}
    b65e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    b660:	3b01      	subs	r3, #1
    b662:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    b664:	bf08      	it	eq
    b666:	2200      	moveq	r2, #0
    b668:	608d      	str	r5, [r1, #8]
    b66a:	bf0c      	ite	eq
    b66c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    b66e:	54a0      	strbne	r0, [r4, r2]
    b670:	e7f5      	b.n	b65e <str_out+0x12>

0000b672 <printk>:
{
    b672:	b40f      	push	{r0, r1, r2, r3}
    b674:	b507      	push	{r0, r1, r2, lr}
    b676:	a904      	add	r1, sp, #16
    b678:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    b67c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    b67e:	f000 fe91 	bl	c3a4 <z_log_vprintk>
}
    b682:	b003      	add	sp, #12
    b684:	f85d eb04 	ldr.w	lr, [sp], #4
    b688:	b004      	add	sp, #16
    b68a:	4770      	bx	lr

0000b68c <snprintk>:
{
    b68c:	b40c      	push	{r2, r3}
    b68e:	b507      	push	{r0, r1, r2, lr}
    b690:	ab04      	add	r3, sp, #16
    b692:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    b696:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    b698:	f7f6 fbb4 	bl	1e04 <vsnprintk>
}
    b69c:	b003      	add	sp, #12
    b69e:	f85d eb04 	ldr.w	lr, [sp], #4
    b6a2:	b002      	add	sp, #8
    b6a4:	4770      	bx	lr

0000b6a6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b6a6:	4604      	mov	r4, r0
    b6a8:	b508      	push	{r3, lr}
    b6aa:	4608      	mov	r0, r1
    b6ac:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b6ae:	461a      	mov	r2, r3
    b6b0:	47a0      	blx	r4
	return z_impl_z_current_get();
    b6b2:	f7ff fabd 	bl	ac30 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b6b6:	f7f9 ff81 	bl	55bc <z_impl_k_thread_abort>

0000b6ba <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    b6ba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    b6be:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    b6c0:	0840      	lsrs	r0, r0, #1
    b6c2:	4770      	bx	lr

0000b6c4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6c6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    b6c8:	f7ff fff7 	bl	b6ba <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    b6cc:	fab0 f080 	clz	r0, r0
    b6d0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    b6d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    b6d8:	00ca      	lsls	r2, r1, #3
    b6da:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    b6de:	1d17      	adds	r7, r2, #4
{
    b6e0:	460c      	mov	r4, r1
    b6e2:	3206      	adds	r2, #6
    b6e4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    b6e6:	b956      	cbnz	r6, b6fe <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    b6e8:	2101      	movs	r1, #1
    b6ea:	fa01 f000 	lsl.w	r0, r1, r0
    b6ee:	68d9      	ldr	r1, [r3, #12]
    b6f0:	4301      	orrs	r1, r0
    b6f2:	60d9      	str	r1, [r3, #12]
		b->next = c;
    b6f4:	f8cc 4010 	str.w	r4, [ip, #16]
    b6f8:	53dd      	strh	r5, [r3, r7]
    b6fa:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    b6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    b6fe:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    b700:	3104      	adds	r1, #4
    b702:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    b704:	53d8      	strh	r0, [r3, r7]
    b706:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    b70a:	529e      	strh	r6, [r3, r2]
    b70c:	80c5      	strh	r5, [r0, #6]
    b70e:	525d      	strh	r5, [r3, r1]
    b710:	e7f4      	b.n	b6fc <free_list_add+0x38>

0000b712 <free_list_remove_bidx>:
{
    b712:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    b714:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    b718:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    b71a:	4299      	cmp	r1, r3
    b71c:	f102 0104 	add.w	r1, r2, #4
    b720:	d10a      	bne.n	b738 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    b722:	2301      	movs	r3, #1
    b724:	fa03 f202 	lsl.w	r2, r3, r2
    b728:	68c3      	ldr	r3, [r0, #12]
    b72a:	ea23 0302 	bic.w	r3, r3, r2
    b72e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    b730:	2300      	movs	r3, #0
    b732:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    b736:	bd10      	pop	{r4, pc}
    b738:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    b73a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    b73e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    b742:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    b746:	80cb      	strh	r3, [r1, #6]
    b748:	8082      	strh	r2, [r0, #4]
}
    b74a:	e7f4      	b.n	b736 <free_list_remove_bidx+0x24>

0000b74c <free_list_remove>:
{
    b74c:	b508      	push	{r3, lr}
    b74e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    b750:	f7ff ffb3 	bl	b6ba <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    b754:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    b758:	f1c2 021f 	rsb	r2, r2, #31
    b75c:	4618      	mov	r0, r3
}
    b75e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    b762:	f7ff bfd6 	b.w	b712 <free_list_remove_bidx>

0000b766 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    b766:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b76a:	fab1 f581 	clz	r5, r1
    b76e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    b772:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    b776:	4603      	mov	r3, r0
	if (b->next) {
    b778:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    b77c:	460e      	mov	r6, r1
	if (b->next) {
    b77e:	b1c2      	cbz	r2, b7b2 <alloc_chunk+0x4c>
    b780:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    b782:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    b786:	4618      	mov	r0, r3
    b788:	4621      	mov	r1, r4
    b78a:	f7ff ff96 	bl	b6ba <chunk_size>
    b78e:	42b0      	cmp	r0, r6
    b790:	d306      	bcc.n	b7a0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    b792:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    b794:	4618      	mov	r0, r3
    b796:	f7ff ffbc 	bl	b712 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    b79a:	4620      	mov	r0, r4
    b79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    b7a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    b7a4:	3f01      	subs	r7, #1
    b7a6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    b7a8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    b7ac:	d001      	beq.n	b7b2 <alloc_chunk+0x4c>
    b7ae:	4282      	cmp	r2, r0
    b7b0:	d1e7      	bne.n	b782 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    b7b2:	f1c5 0220 	rsb	r2, r5, #32
    b7b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    b7ba:	4094      	lsls	r4, r2
    b7bc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    b7be:	4014      	ands	r4, r2
    b7c0:	d0eb      	beq.n	b79a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    b7c2:	fa94 f2a4 	rbit	r2, r4
    b7c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    b7ca:	1d11      	adds	r1, r2, #4
    b7cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    b7d0:	4621      	mov	r1, r4
    b7d2:	e7df      	b.n	b794 <alloc_chunk+0x2e>

0000b7d4 <merge_chunks>:
{
    b7d4:	b538      	push	{r3, r4, r5, lr}
    b7d6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b7d8:	f7ff ff6f 	bl	b6ba <chunk_size>
{
    b7dc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b7de:	4604      	mov	r4, r0
    b7e0:	4611      	mov	r1, r2
    b7e2:	4618      	mov	r0, r3
    b7e4:	f7ff ff69 	bl	b6ba <chunk_size>
		((uint16_t *)cmem)[f] = val;
    b7e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b7ec:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b7ee:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    b7f0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    b7f2:	4618      	mov	r0, r3
    b7f4:	f7ff ff61 	bl	b6ba <chunk_size>
	void *cmem = &buf[c];
    b7f8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b7fa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    b7fe:	bd38      	pop	{r3, r4, r5, pc}

0000b800 <split_chunks>:
{
    b800:	b538      	push	{r3, r4, r5, lr}
    b802:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    b804:	f7ff ff59 	bl	b6ba <chunk_size>
{
    b808:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    b80a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    b80c:	1a51      	subs	r1, r2, r1
    b80e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    b812:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b814:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    b816:	8060      	strh	r0, [r4, #2]
    b818:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b81c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    b81e:	8044      	strh	r4, [r0, #2]
    b820:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    b824:	4618      	mov	r0, r3
    b826:	4611      	mov	r1, r2
    b828:	f7ff ff47 	bl	b6ba <chunk_size>
	void *cmem = &buf[c];
    b82c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b82e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    b832:	bd38      	pop	{r3, r4, r5, pc}

0000b834 <free_chunk>:
{
    b834:	b538      	push	{r3, r4, r5, lr}
    b836:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    b838:	f7ff ff3f 	bl	b6ba <chunk_size>
    b83c:	460c      	mov	r4, r1
    b83e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    b840:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b844:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    b846:	07da      	lsls	r2, r3, #31
    b848:	d40a      	bmi.n	b860 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    b84a:	4628      	mov	r0, r5
    b84c:	f7ff ff7e 	bl	b74c <free_list_remove>
	return c + chunk_size(h, c);
    b850:	4621      	mov	r1, r4
    b852:	4628      	mov	r0, r5
    b854:	f7ff ff31 	bl	b6ba <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    b858:	1822      	adds	r2, r4, r0
    b85a:	4628      	mov	r0, r5
    b85c:	f7ff ffba 	bl	b7d4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    b860:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b864:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    b866:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b86a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    b86c:	07db      	lsls	r3, r3, #31
    b86e:	d40c      	bmi.n	b88a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    b870:	4628      	mov	r0, r5
    b872:	f7ff ff6b 	bl	b74c <free_list_remove>
		return ((uint16_t *)cmem)[f];
    b876:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    b87a:	4622      	mov	r2, r4
    b87c:	1a61      	subs	r1, r4, r1
    b87e:	4628      	mov	r0, r5
    b880:	f7ff ffa8 	bl	b7d4 <merge_chunks>
    b884:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b888:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    b88a:	4621      	mov	r1, r4
    b88c:	4628      	mov	r0, r5
}
    b88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    b892:	f7ff bf17 	b.w	b6c4 <free_list_add>

0000b896 <sys_heap_free>:
	if (mem == NULL) {
    b896:	b161      	cbz	r1, b8b2 <sys_heap_free+0x1c>
    b898:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b89a:	3904      	subs	r1, #4
    b89c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    b89e:	f021 0307 	bic.w	r3, r1, #7
    b8a2:	4403      	add	r3, r0
	free_chunk(h, c);
    b8a4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b8a6:	885a      	ldrh	r2, [r3, #2]
    b8a8:	f022 0201 	bic.w	r2, r2, #1
    b8ac:	805a      	strh	r2, [r3, #2]
    b8ae:	f7ff bfc1 	b.w	b834 <free_chunk>
}
    b8b2:	4770      	bx	lr

0000b8b4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    b8b4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    b8b6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    b8b8:	b909      	cbnz	r1, b8be <sys_heap_alloc+0xa>
		return NULL;
    b8ba:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b8bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    b8be:	68ab      	ldr	r3, [r5, #8]
    b8c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    b8c4:	d9f9      	bls.n	b8ba <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b8c6:	310b      	adds	r1, #11
    b8c8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    b8ca:	4621      	mov	r1, r4
    b8cc:	4628      	mov	r0, r5
    b8ce:	f7ff ff4a 	bl	b766 <alloc_chunk>
	if (c == 0U) {
    b8d2:	4606      	mov	r6, r0
    b8d4:	2800      	cmp	r0, #0
    b8d6:	d0f0      	beq.n	b8ba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    b8d8:	4601      	mov	r1, r0
    b8da:	4628      	mov	r0, r5
    b8dc:	f7ff feed 	bl	b6ba <chunk_size>
    b8e0:	42a0      	cmp	r0, r4
    b8e2:	d907      	bls.n	b8f4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    b8e4:	1932      	adds	r2, r6, r4
    b8e6:	4628      	mov	r0, r5
    b8e8:	f7ff ff8a 	bl	b800 <split_chunks>
		free_list_add(h, c + chunk_sz);
    b8ec:	4611      	mov	r1, r2
    b8ee:	4628      	mov	r0, r5
    b8f0:	f7ff fee8 	bl	b6c4 <free_list_add>
	void *cmem = &buf[c];
    b8f4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b8f8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b8fa:	8853      	ldrh	r3, [r2, #2]
    b8fc:	f043 0301 	orr.w	r3, r3, #1
    b900:	8053      	strh	r3, [r2, #2]
    b902:	3004      	adds	r0, #4
	return mem;
    b904:	e7da      	b.n	b8bc <sys_heap_alloc+0x8>

0000b906 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b906:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b90a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    b90e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    b912:	6806      	ldr	r6, [r0, #0]
{
    b914:	460f      	mov	r7, r1
    b916:	4614      	mov	r4, r2
	if (align != rew) {
    b918:	d00c      	beq.n	b934 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    b91a:	424b      	negs	r3, r1
    b91c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    b91e:	2b04      	cmp	r3, #4
    b920:	461a      	mov	r2, r3
    b922:	464f      	mov	r7, r9
    b924:	bf28      	it	cs
    b926:	2204      	movcs	r2, #4
	rew = align & -align;
    b928:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    b92a:	b964      	cbnz	r4, b946 <sys_heap_aligned_alloc+0x40>
		return NULL;
    b92c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b92e:	4628      	mov	r0, r5
    b930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    b934:	2904      	cmp	r1, #4
    b936:	d804      	bhi.n	b942 <sys_heap_aligned_alloc+0x3c>
}
    b938:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    b93c:	4611      	mov	r1, r2
    b93e:	f7ff bfb9 	b.w	b8b4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    b942:	2204      	movs	r2, #4
    b944:	e7f1      	b.n	b92a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    b946:	68b3      	ldr	r3, [r6, #8]
    b948:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    b94c:	d9ee      	bls.n	b92c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b94e:	f104 010b 	add.w	r1, r4, #11
    b952:	4439      	add	r1, r7
    b954:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b956:	08c9      	lsrs	r1, r1, #3
    b958:	4630      	mov	r0, r6
    b95a:	f7ff ff04 	bl	b766 <alloc_chunk>
	if (c0 == 0) {
    b95e:	4680      	mov	r8, r0
    b960:	2800      	cmp	r0, #0
    b962:	d0e3      	beq.n	b92c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    b964:	f109 0504 	add.w	r5, r9, #4
    b968:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    b96c:	1e7b      	subs	r3, r7, #1
    b96e:	4435      	add	r5, r6
    b970:	441d      	add	r5, r3
    b972:	427f      	negs	r7, r7
    b974:	403d      	ands	r5, r7
    b976:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b97a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b97c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b97e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b980:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b982:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b986:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    b988:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b98c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b990:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b994:	d208      	bcs.n	b9a8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    b996:	4601      	mov	r1, r0
    b998:	463a      	mov	r2, r7
    b99a:	4630      	mov	r0, r6
    b99c:	f7ff ff30 	bl	b800 <split_chunks>
		free_list_add(h, c0);
    b9a0:	4641      	mov	r1, r8
    b9a2:	4630      	mov	r0, r6
    b9a4:	f7ff fe8e 	bl	b6c4 <free_list_add>
	return c + chunk_size(h, c);
    b9a8:	4639      	mov	r1, r7
    b9aa:	4630      	mov	r0, r6
    b9ac:	f7ff fe85 	bl	b6ba <chunk_size>
    b9b0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b9b2:	4284      	cmp	r4, r0
    b9b4:	d207      	bcs.n	b9c6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    b9b6:	4630      	mov	r0, r6
    b9b8:	4622      	mov	r2, r4
    b9ba:	f7ff ff21 	bl	b800 <split_chunks>
		free_list_add(h, c_end);
    b9be:	4621      	mov	r1, r4
    b9c0:	4630      	mov	r0, r6
    b9c2:	f7ff fe7f 	bl	b6c4 <free_list_add>
	void *cmem = &buf[c];
    b9c6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b9ca:	8873      	ldrh	r3, [r6, #2]
    b9cc:	f043 0301 	orr.w	r3, r3, #1
    b9d0:	8073      	strh	r3, [r6, #2]
    b9d2:	e7ac      	b.n	b92e <sys_heap_aligned_alloc+0x28>

0000b9d4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    b9d4:	3a04      	subs	r2, #4
{
    b9d6:	b4f0      	push	{r4, r5, r6, r7}
    b9d8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b9da:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b9dc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b9de:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b9e2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b9e6:	1a0e      	subs	r6, r1, r0
    b9e8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    b9ea:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    b9ec:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    b9f0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b9f2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    b9f6:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    b9f8:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b9fa:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    b9fc:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ba00:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ba02:	f1c2 0220 	rsb	r2, r2, #32
    ba06:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    ba08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    ba0c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    ba10:	4294      	cmp	r4, r2
    ba12:	d1fb      	bne.n	ba0c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ba14:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ba16:	f042 0201 	orr.w	r2, r2, #1
    ba1a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    ba1c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ba20:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ba22:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    ba24:	8007      	strh	r7, [r0, #0]
    ba26:	8065      	strh	r5, [r4, #2]
    ba28:	1984      	adds	r4, r0, r6
    ba2a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    ba2e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    ba32:	8067      	strh	r7, [r4, #2]
    ba34:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ba36:	885a      	ldrh	r2, [r3, #2]
    ba38:	f042 0201 	orr.w	r2, r2, #1
    ba3c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    ba3e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    ba40:	f7ff be40 	b.w	b6c4 <free_list_add>

0000ba44 <sys_slist_find_and_remove>:
	return list->head;
    ba44:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba46:	2200      	movs	r2, #0
    ba48:	b90b      	cbnz	r3, ba4e <sys_slist_find_and_remove+0xa>
    ba4a:	4618      	mov	r0, r3
    ba4c:	4770      	bx	lr
    ba4e:	428b      	cmp	r3, r1
    ba50:	d110      	bne.n	ba74 <sys_slist_find_and_remove+0x30>
	return node->next;
    ba52:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    ba54:	b942      	cbnz	r2, ba68 <sys_slist_find_and_remove+0x24>
    ba56:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    ba58:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    ba5a:	4291      	cmp	r1, r2
    ba5c:	d100      	bne.n	ba60 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    ba5e:	6043      	str	r3, [r0, #4]
	parent->next = child;
    ba60:	2300      	movs	r3, #0
    ba62:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba64:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    ba66:	4770      	bx	lr
	parent->next = child;
    ba68:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ba6a:	6843      	ldr	r3, [r0, #4]
    ba6c:	4299      	cmp	r1, r3
	list->tail = node;
    ba6e:	bf08      	it	eq
    ba70:	6042      	streq	r2, [r0, #4]
}
    ba72:	e7f5      	b.n	ba60 <sys_slist_find_and_remove+0x1c>
	return node->next;
    ba74:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ba76:	681b      	ldr	r3, [r3, #0]
    ba78:	e7e6      	b.n	ba48 <sys_slist_find_and_remove+0x4>

0000ba7a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ba7a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    ba7c:	f013 0307 	ands.w	r3, r3, #7
    ba80:	d105      	bne.n	ba8e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    ba82:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    ba84:	2b00      	cmp	r3, #0
    ba86:	bf0c      	ite	eq
    ba88:	2000      	moveq	r0, #0
    ba8a:	2003      	movne	r0, #3
    ba8c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ba8e:	2b02      	cmp	r3, #2
    ba90:	d105      	bne.n	ba9e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    ba92:	8b40      	ldrh	r0, [r0, #26]
    ba94:	fab0 f080 	clz	r0, r0
    ba98:	0940      	lsrs	r0, r0, #5
    ba9a:	0080      	lsls	r0, r0, #2
    ba9c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    ba9e:	2b01      	cmp	r3, #1
    baa0:	d105      	bne.n	baae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    baa2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    baa4:	2b00      	cmp	r3, #0
    baa6:	bf0c      	ite	eq
    baa8:	2000      	moveq	r0, #0
    baaa:	2005      	movne	r0, #5
    baac:	4770      	bx	lr
	int evt = EVT_NOP;
    baae:	2000      	movs	r0, #0
}
    bab0:	4770      	bx	lr

0000bab2 <validate_args>:
{
    bab2:	b510      	push	{r4, lr}
    bab4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bab6:	b100      	cbz	r0, baba <validate_args+0x8>
    bab8:	b911      	cbnz	r1, bac0 <validate_args+0xe>
		return -EINVAL;
    baba:	f06f 0015 	mvn.w	r0, #21
}
    babe:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    bac0:	1d08      	adds	r0, r1, #4
    bac2:	f000 f8d6 	bl	bc72 <sys_notify_validate>
	if ((rv == 0)
    bac6:	2800      	cmp	r0, #0
    bac8:	d1f9      	bne.n	babe <validate_args+0xc>
	    && ((cli->notify.flags
    baca:	68a3      	ldr	r3, [r4, #8]
    bacc:	2b03      	cmp	r3, #3
    bace:	d9f6      	bls.n	babe <validate_args+0xc>
    bad0:	e7f3      	b.n	baba <validate_args+0x8>

0000bad2 <notify_one>:
{
    bad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bad6:	460d      	mov	r5, r1
    bad8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bada:	4619      	mov	r1, r3
    badc:	1d28      	adds	r0, r5, #4
{
    bade:	4690      	mov	r8, r2
    bae0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    bae2:	f000 f8d7 	bl	bc94 <sys_notify_finalize>
	if (cb) {
    bae6:	4604      	mov	r4, r0
    bae8:	b138      	cbz	r0, bafa <notify_one+0x28>
		cb(mgr, cli, state, res);
    baea:	4633      	mov	r3, r6
    baec:	4642      	mov	r2, r8
    baee:	4629      	mov	r1, r5
    baf0:	4638      	mov	r0, r7
    baf2:	46a4      	mov	ip, r4
}
    baf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    baf8:	4760      	bx	ip
}
    bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bafe <transition_complete>:
{
    bafe:	b410      	push	{r4}
	__asm__ volatile(
    bb00:	f04f 0420 	mov.w	r4, #32
    bb04:	f3ef 8211 	mrs	r2, BASEPRI
    bb08:	f384 8812 	msr	BASEPRI_MAX, r4
    bb0c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    bb10:	6141      	str	r1, [r0, #20]
}
    bb12:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    bb14:	2101      	movs	r1, #1
    bb16:	f7f6 b98b 	b.w	1e30 <process_event>

0000bb1a <onoff_manager_init>:
{
    bb1a:	b538      	push	{r3, r4, r5, lr}
    bb1c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    bb1e:	4605      	mov	r5, r0
    bb20:	b158      	cbz	r0, bb3a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    bb22:	b151      	cbz	r1, bb3a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    bb24:	680b      	ldr	r3, [r1, #0]
    bb26:	b143      	cbz	r3, bb3a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    bb28:	684b      	ldr	r3, [r1, #4]
    bb2a:	b133      	cbz	r3, bb3a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    bb2c:	221c      	movs	r2, #28
    bb2e:	2100      	movs	r1, #0
    bb30:	f000 fe75 	bl	c81e <memset>
    bb34:	612c      	str	r4, [r5, #16]
	return 0;
    bb36:	2000      	movs	r0, #0
}
    bb38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bb3a:	f06f 0015 	mvn.w	r0, #21
    bb3e:	e7fb      	b.n	bb38 <onoff_manager_init+0x1e>

0000bb40 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    bb40:	b570      	push	{r4, r5, r6, lr}
    bb42:	4605      	mov	r5, r0
    bb44:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    bb46:	f7ff ffb4 	bl	bab2 <validate_args>

	if (rv < 0) {
    bb4a:	1e04      	subs	r4, r0, #0
    bb4c:	db15      	blt.n	bb7a <onoff_request+0x3a>
    bb4e:	f04f 0320 	mov.w	r3, #32
    bb52:	f3ef 8211 	mrs	r2, BASEPRI
    bb56:	f383 8812 	msr	BASEPRI_MAX, r3
    bb5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bb5e:	8b6b      	ldrh	r3, [r5, #26]
    bb60:	8b2c      	ldrh	r4, [r5, #24]
    bb62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bb66:	428b      	cmp	r3, r1
    bb68:	f004 0407 	and.w	r4, r4, #7
    bb6c:	d107      	bne.n	bb7e <onoff_request+0x3e>
	__asm__ volatile(
    bb6e:	f382 8811 	msr	BASEPRI, r2
    bb72:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    bb76:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    bb7a:	4620      	mov	r0, r4
    bb7c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    bb7e:	2c02      	cmp	r4, #2
    bb80:	d10c      	bne.n	bb9c <onoff_request+0x5c>
		mgr->refs += 1U;
    bb82:	3301      	adds	r3, #1
    bb84:	836b      	strh	r3, [r5, #26]
    bb86:	f382 8811 	msr	BASEPRI, r2
    bb8a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    bb8e:	2300      	movs	r3, #0
    bb90:	4622      	mov	r2, r4
    bb92:	4631      	mov	r1, r6
    bb94:	4628      	mov	r0, r5
    bb96:	f7ff ff9c 	bl	bad2 <notify_one>
    bb9a:	e7ee      	b.n	bb7a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    bb9c:	2c06      	cmp	r4, #6
    bb9e:	d814      	bhi.n	bbca <onoff_request+0x8a>
    bba0:	e8df f004 	tbb	[pc, r4]
    bba4:	13131304 	.word	0x13131304
    bba8:	1a04      	.short	0x1a04
    bbaa:	04          	.byte	0x04
    bbab:	00          	.byte	0x00
	parent->next = child;
    bbac:	2300      	movs	r3, #0
    bbae:	6033      	str	r3, [r6, #0]
	return list->tail;
    bbb0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    bbb2:	b93b      	cbnz	r3, bbc4 <onoff_request+0x84>
	list->head = node;
    bbb4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    bbb8:	b9ac      	cbnz	r4, bbe6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    bbba:	2102      	movs	r1, #2
    bbbc:	4628      	mov	r0, r5
    bbbe:	f7f6 f937 	bl	1e30 <process_event>
    bbc2:	e7da      	b.n	bb7a <onoff_request+0x3a>
	parent->next = child;
    bbc4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    bbc6:	606e      	str	r6, [r5, #4]
}
    bbc8:	e7f6      	b.n	bbb8 <onoff_request+0x78>
    bbca:	f382 8811 	msr	BASEPRI, r2
    bbce:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    bbd2:	f06f 0404 	mvn.w	r4, #4
    bbd6:	e7d0      	b.n	bb7a <onoff_request+0x3a>
    bbd8:	f382 8811 	msr	BASEPRI, r2
    bbdc:	f3bf 8f6f 	isb	sy
    bbe0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    bbe4:	e7c9      	b.n	bb7a <onoff_request+0x3a>
    bbe6:	f382 8811 	msr	BASEPRI, r2
    bbea:	f3bf 8f6f 	isb	sy
		if (notify) {
    bbee:	e7c4      	b.n	bb7a <onoff_request+0x3a>

0000bbf0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    bbf0:	b510      	push	{r4, lr}
	__asm__ volatile(
    bbf2:	f04f 0320 	mov.w	r3, #32
    bbf6:	f3ef 8211 	mrs	r2, BASEPRI
    bbfa:	f383 8812 	msr	BASEPRI_MAX, r3
    bbfe:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bc02:	8b04      	ldrh	r4, [r0, #24]
    bc04:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bc08:	2c02      	cmp	r4, #2
    bc0a:	d00a      	beq.n	bc22 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bc0c:	2c01      	cmp	r4, #1
    bc0e:	bf0c      	ite	eq
    bc10:	f06f 0004 	mvneq.w	r0, #4
    bc14:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    bc18:	f382 8811 	msr	BASEPRI, r2
    bc1c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    bc20:	e008      	b.n	bc34 <onoff_release+0x44>
	mgr->refs -= 1U;
    bc22:	8b43      	ldrh	r3, [r0, #26]
    bc24:	3b01      	subs	r3, #1
    bc26:	b29b      	uxth	r3, r3
    bc28:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bc2a:	b923      	cbnz	r3, bc36 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    bc2c:	4621      	mov	r1, r4
    bc2e:	f7f6 f8ff 	bl	1e30 <process_event>
	int rv = state;
    bc32:	4620      	mov	r0, r4
}
    bc34:	bd10      	pop	{r4, pc}
	int rv = state;
    bc36:	4620      	mov	r0, r4
    bc38:	e7ee      	b.n	bc18 <onoff_release+0x28>

0000bc3a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    bc3a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    bc3c:	b1b0      	cbz	r0, bc6c <onoff_cancel+0x32>
    bc3e:	b1a9      	cbz	r1, bc6c <onoff_cancel+0x32>
	__asm__ volatile(
    bc40:	f04f 0220 	mov.w	r2, #32
    bc44:	f3ef 8511 	mrs	r5, BASEPRI
    bc48:	f382 8812 	msr	BASEPRI_MAX, r2
    bc4c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bc50:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bc52:	f7ff fef7 	bl	ba44 <sys_slist_find_and_remove>
    bc56:	b130      	cbz	r0, bc66 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bc58:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    bc5c:	f385 8811 	msr	BASEPRI, r5
    bc60:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    bc64:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    bc66:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bc6a:	e7f7      	b.n	bc5c <onoff_cancel+0x22>
		return -EINVAL;
    bc6c:	f06f 0015 	mvn.w	r0, #21
    bc70:	e7f8      	b.n	bc64 <onoff_cancel+0x2a>

0000bc72 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    bc72:	4603      	mov	r3, r0
    bc74:	b158      	cbz	r0, bc8e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc76:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bc78:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    bc7c:	2a01      	cmp	r2, #1
    bc7e:	d003      	beq.n	bc88 <sys_notify_validate+0x16>
    bc80:	2a03      	cmp	r2, #3
    bc82:	d104      	bne.n	bc8e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    bc84:	6802      	ldr	r2, [r0, #0]
    bc86:	b112      	cbz	r2, bc8e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    bc88:	2000      	movs	r0, #0
    bc8a:	6098      	str	r0, [r3, #8]
    bc8c:	4770      	bx	lr
    bc8e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    bc92:	4770      	bx	lr

0000bc94 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc94:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    bc96:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    bc98:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    bc9c:	2a03      	cmp	r2, #3
    bc9e:	f04f 0200 	mov.w	r2, #0
{
    bca2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    bca4:	bf0c      	ite	eq
    bca6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    bca8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    bcaa:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    bcac:	4770      	bx	lr

0000bcae <encode_uint>:
{
    bcae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcb2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    bcb4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    bcb6:	2b6f      	cmp	r3, #111	; 0x6f
{
    bcb8:	4680      	mov	r8, r0
    bcba:	460f      	mov	r7, r1
    bcbc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    bcbe:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    bcc2:	d029      	beq.n	bd18 <encode_uint+0x6a>
    bcc4:	d824      	bhi.n	bd10 <encode_uint+0x62>
		return 10;
    bcc6:	2b58      	cmp	r3, #88	; 0x58
    bcc8:	bf0c      	ite	eq
    bcca:	2610      	moveq	r6, #16
    bccc:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    bcce:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    bcd2:	4632      	mov	r2, r6
    bcd4:	2300      	movs	r3, #0
    bcd6:	4640      	mov	r0, r8
    bcd8:	4639      	mov	r1, r7
    bcda:	f7f5 fa11 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bcde:	2a09      	cmp	r2, #9
    bce0:	b2d4      	uxtb	r4, r2
    bce2:	d81e      	bhi.n	bd22 <encode_uint+0x74>
    bce4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    bce6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bce8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    bcea:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bcee:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    bcf2:	d301      	bcc.n	bcf8 <encode_uint+0x4a>
    bcf4:	45d1      	cmp	r9, sl
    bcf6:	d811      	bhi.n	bd1c <encode_uint+0x6e>
	if (conv->flag_hash) {
    bcf8:	782b      	ldrb	r3, [r5, #0]
    bcfa:	069b      	lsls	r3, r3, #26
    bcfc:	d505      	bpl.n	bd0a <encode_uint+0x5c>
		if (radix == 8) {
    bcfe:	2e08      	cmp	r6, #8
    bd00:	d115      	bne.n	bd2e <encode_uint+0x80>
			conv->altform_0 = true;
    bd02:	78ab      	ldrb	r3, [r5, #2]
    bd04:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    bd08:	70ab      	strb	r3, [r5, #2]
}
    bd0a:	4648      	mov	r0, r9
    bd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    bd10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    bd14:	2b70      	cmp	r3, #112	; 0x70
    bd16:	e7d7      	b.n	bcc8 <encode_uint+0x1a>
	switch (specifier) {
    bd18:	2608      	movs	r6, #8
    bd1a:	e7d8      	b.n	bcce <encode_uint+0x20>
		value /= radix;
    bd1c:	4680      	mov	r8, r0
    bd1e:	460f      	mov	r7, r1
    bd20:	e7d7      	b.n	bcd2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    bd22:	f1bb 0f19 	cmp.w	fp, #25
    bd26:	bf94      	ite	ls
    bd28:	3437      	addls	r4, #55	; 0x37
    bd2a:	3457      	addhi	r4, #87	; 0x57
    bd2c:	e7db      	b.n	bce6 <encode_uint+0x38>
		} else if (radix == 16) {
    bd2e:	2e10      	cmp	r6, #16
    bd30:	d1eb      	bne.n	bd0a <encode_uint+0x5c>
			conv->altform_0c = true;
    bd32:	78ab      	ldrb	r3, [r5, #2]
    bd34:	f043 0310 	orr.w	r3, r3, #16
    bd38:	e7e6      	b.n	bd08 <encode_uint+0x5a>

0000bd3a <outs>:
{
    bd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd3e:	4607      	mov	r7, r0
    bd40:	4688      	mov	r8, r1
    bd42:	4615      	mov	r5, r2
    bd44:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    bd46:	4614      	mov	r4, r2
    bd48:	42b4      	cmp	r4, r6
    bd4a:	d305      	bcc.n	bd58 <outs+0x1e>
    bd4c:	b10e      	cbz	r6, bd52 <outs+0x18>
	return (int)count;
    bd4e:	1b60      	subs	r0, r4, r5
    bd50:	e008      	b.n	bd64 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    bd52:	7823      	ldrb	r3, [r4, #0]
    bd54:	2b00      	cmp	r3, #0
    bd56:	d0fa      	beq.n	bd4e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    bd58:	f814 0b01 	ldrb.w	r0, [r4], #1
    bd5c:	4641      	mov	r1, r8
    bd5e:	47b8      	blx	r7
		if (rc < 0) {
    bd60:	2800      	cmp	r0, #0
    bd62:	daf1      	bge.n	bd48 <outs+0xe>
}
    bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bd68 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    bd6a:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    bd6c:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    bd6e:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    bd70:	1baf      	subs	r7, r5, r6
{
    bd72:	4604      	mov	r4, r0
    bd74:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    bd76:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    bd78:	bf98      	it	ls
    bd7a:	1aff      	subls	r7, r7, r3
    bd7c:	eba5 0000 	sub.w	r0, r5, r0
{
    bd80:	4694      	mov	ip, r2
		base += buf->size;
    bd82:	bf98      	it	ls
    bd84:	18f6      	addls	r6, r6, r3
    bd86:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    bd88:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    bd8a:	6823      	ldr	r3, [r4, #0]
    bd8c:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    bd8e:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    bd90:	442b      	add	r3, r5
	size = MIN(size, free_space);
    bd92:	bf28      	it	cs
    bd94:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    bd96:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    bd98:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    bd9a:	4290      	cmp	r0, r2
    bd9c:	bf28      	it	cs
    bd9e:	4610      	movcs	r0, r2
	buf->put_head += size;
    bda0:	4403      	add	r3, r0
    bda2:	6063      	str	r3, [r4, #4]

	return size;
}
    bda4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bda6 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    bda6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    bdaa:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    bdac:	428a      	cmp	r2, r1
    bdae:	d30c      	bcc.n	bdca <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    bdb0:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    bdb2:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    bdb4:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    bdb6:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    bdba:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    bdbc:	428a      	cmp	r2, r1
    bdbe:	d901      	bls.n	bdc4 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    bdc0:	2000      	movs	r0, #0
    bdc2:	4770      	bx	lr
		buf->put_base += buf->size;
    bdc4:	4413      	add	r3, r2
    bdc6:	60c3      	str	r3, [r0, #12]
    bdc8:	e7fa      	b.n	bdc0 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    bdca:	f06f 0015 	mvn.w	r0, #21
}
    bdce:	4770      	bx	lr

0000bdd0 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    bdd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bdd4:	4680      	mov	r8, r0
    bdd6:	460e      	mov	r6, r1
    bdd8:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    bdda:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    bddc:	462a      	mov	r2, r5
    bdde:	a901      	add	r1, sp, #4
    bde0:	4640      	mov	r0, r8
    bde2:	f7ff ffc1 	bl	bd68 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    bde6:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    bde8:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    bdea:	4602      	mov	r2, r0
    bdec:	9801      	ldr	r0, [sp, #4]
    bdee:	f000 fd0b 	bl	c808 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    bdf2:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    bdf4:	4427      	add	r7, r4
		data += partial_size;
    bdf6:	4426      	add	r6, r4
	} while (size && partial_size);
    bdf8:	d001      	beq.n	bdfe <ring_buf_put+0x2e>
    bdfa:	2c00      	cmp	r4, #0
    bdfc:	d1ee      	bne.n	bddc <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    bdfe:	4639      	mov	r1, r7
    be00:	4640      	mov	r0, r8
    be02:	f7ff ffd0 	bl	bda6 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    be06:	4638      	mov	r0, r7
    be08:	b002      	add	sp, #8
    be0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be0e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    be0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    be10:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    be12:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    be14:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    be16:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    be18:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    be1a:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    be1c:	42b8      	cmp	r0, r7
{
    be1e:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    be20:	bf98      	it	ls
    be22:	1836      	addls	r6, r6, r0
    be24:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    be28:	6823      	ldr	r3, [r4, #0]
    be2a:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    be2e:	bf98      	it	ls
    be30:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    be32:	442b      	add	r3, r5
	size = MIN(size, available_size);
    be34:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    be36:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    be3a:	bf28      	it	cs
    be3c:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    be3e:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    be40:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    be42:	4290      	cmp	r0, r2
    be44:	bf28      	it	cs
    be46:	4610      	movcs	r0, r2
	buf->get_head += size;
    be48:	4403      	add	r3, r0
    be4a:	6123      	str	r3, [r4, #16]

	return size;
}
    be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000be4e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    be4e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    be52:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    be54:	428a      	cmp	r2, r1
    be56:	d30c      	bcc.n	be72 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    be58:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    be5a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    be5e:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    be62:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    be64:	428a      	cmp	r2, r1
    be66:	d901      	bls.n	be6c <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    be68:	2000      	movs	r0, #0
    be6a:	4770      	bx	lr
		buf->get_base += buf->size;
    be6c:	4413      	add	r3, r2
    be6e:	6183      	str	r3, [r0, #24]
    be70:	e7fa      	b.n	be68 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    be72:	f06f 0015 	mvn.w	r0, #21
}
    be76:	4770      	bx	lr

0000be78 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    be78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    be7c:	4680      	mov	r8, r0
    be7e:	460d      	mov	r5, r1
    be80:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    be82:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    be84:	4632      	mov	r2, r6
    be86:	a901      	add	r1, sp, #4
    be88:	4640      	mov	r0, r8
    be8a:	f7ff ffc0 	bl	be0e <ring_buf_get_claim>
    be8e:	4604      	mov	r4, r0
		if (data) {
    be90:	b12d      	cbz	r5, be9e <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    be92:	4602      	mov	r2, r0
    be94:	9901      	ldr	r1, [sp, #4]
    be96:	4628      	mov	r0, r5
    be98:	f000 fcb6 	bl	c808 <memcpy>
			data += partial_size;
    be9c:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    be9e:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    bea0:	4427      	add	r7, r4
	} while (size && partial_size);
    bea2:	d001      	beq.n	bea8 <ring_buf_get+0x30>
    bea4:	2c00      	cmp	r4, #0
    bea6:	d1ed      	bne.n	be84 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    bea8:	4639      	mov	r1, r7
    beaa:	4640      	mov	r0, r8
    beac:	f7ff ffcf 	bl	be4e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    beb0:	4638      	mov	r0, r7
    beb2:	b002      	add	sp, #8
    beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000beb8 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    beb8:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    beba:	6903      	ldr	r3, [r0, #16]
{
    bebc:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    bebe:	f013 0008 	ands.w	r0, r3, #8
    bec2:	d109      	bne.n	bed8 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    bec4:	6813      	ldr	r3, [r2, #0]
    bec6:	68d4      	ldr	r4, [r2, #12]
    bec8:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    beca:	bf97      	itett	ls
    becc:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    bece:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    bed0:	1ad3      	subls	r3, r2, r3

	return true;
    bed2:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    bed4:	600b      	str	r3, [r1, #0]
}
    bed6:	bd10      	pop	{r4, pc}
    bed8:	2300      	movs	r3, #0
		return false;
    beda:	4618      	mov	r0, r3
    bedc:	e7fa      	b.n	bed4 <free_space+0x1c>

0000bede <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    bede:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    bee0:	a901      	add	r1, sp, #4
{
    bee2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    bee4:	f7ff ffe8 	bl	beb8 <free_space>
    bee8:	b120      	cbz	r0, bef4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    beea:	9b01      	ldr	r3, [sp, #4]
    beec:	68e2      	ldr	r2, [r4, #12]
    beee:	3b01      	subs	r3, #1
    bef0:	4413      	add	r3, r2
    bef2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    bef4:	6a20      	ldr	r0, [r4, #32]
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	1ac0      	subs	r0, r0, r3
}
    befa:	3801      	subs	r0, #1
    befc:	b002      	add	sp, #8
    befe:	bd10      	pop	{r4, pc}

0000bf00 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    bf00:	b510      	push	{r4, lr}
    bf02:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    bf04:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bf06:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    bf08:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    bf0a:	07d2      	lsls	r2, r2, #31
    bf0c:	d502      	bpl.n	bf14 <idx_inc+0x14>
		return i & (buffer->size - 1);
    bf0e:	3b01      	subs	r3, #1
    bf10:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    bf12:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    bf14:	4298      	cmp	r0, r3
    bf16:	bf28      	it	cs
    bf18:	1ac0      	subcs	r0, r0, r3
    bf1a:	e7fa      	b.n	bf12 <idx_inc+0x12>

0000bf1c <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    bf1c:	b510      	push	{r4, lr}
    bf1e:	4604      	mov	r4, r0
    bf20:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    bf22:	68c1      	ldr	r1, [r0, #12]
    bf24:	f7ff ffec 	bl	bf00 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    bf28:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    bf2a:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    bf2c:	f023 0308 	bic.w	r3, r3, #8
    bf30:	6123      	str	r3, [r4, #16]
}
    bf32:	bd10      	pop	{r4, pc}

0000bf34 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    bf34:	b538      	push	{r3, r4, r5, lr}
    bf36:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    bf38:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    bf3a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    bf3c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    bf3e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    bf42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    bf46:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    bf48:	6801      	ldr	r1, [r0, #0]
    bf4a:	462a      	mov	r2, r5
    bf4c:	f7ff ffd8 	bl	bf00 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    bf50:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    bf52:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    bf54:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    bf56:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    bf58:	bf02      	ittt	eq
    bf5a:	6923      	ldreq	r3, [r4, #16]
    bf5c:	f043 0308 	orreq.w	r3, r3, #8
    bf60:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    bf62:	462a      	mov	r2, r5
    bf64:	4620      	mov	r0, r4
    bf66:	f7ff ffcb 	bl	bf00 <idx_inc>
    bf6a:	6060      	str	r0, [r4, #4]
}
    bf6c:	bd38      	pop	{r3, r4, r5, pc}

0000bf6e <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    bf6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    bf72:	68c7      	ldr	r7, [r0, #12]
    bf74:	69c6      	ldr	r6, [r0, #28]
{
    bf76:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    bf78:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    bf7c:	f003 0303 	and.w	r3, r3, #3
    bf80:	2b02      	cmp	r3, #2
{
    bf82:	4604      	mov	r4, r0
    bf84:	4688      	mov	r8, r1
    bf86:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    bf88:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    bf8c:	f04f 0300 	mov.w	r3, #0
    bf90:	d009      	beq.n	bfa6 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    bf92:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    bf94:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    bf98:	6923      	ldr	r3, [r4, #16]
    bf9a:	0799      	lsls	r1, r3, #30
    bf9c:	d410      	bmi.n	bfc0 <drop_item_locked+0x52>
		return false;
    bf9e:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    bfa0:	b003      	add	sp, #12
    bfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    bfa6:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    bfaa:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    bfac:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    bfae:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    bfb2:	d0f1      	beq.n	bf98 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    bfb4:	f7ff ffb2 	bl	bf1c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    bfb8:	68e3      	ldr	r3, [r4, #12]
    bfba:	60a3      	str	r3, [r4, #8]
		return true;
    bfbc:	2001      	movs	r0, #1
    bfbe:	e7ef      	b.n	bfa0 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    bfc0:	69a3      	ldr	r3, [r4, #24]
    bfc2:	4650      	mov	r0, sl
    bfc4:	4798      	blx	r3
	return item->hdr.valid;
    bfc6:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    bfca:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    bfcc:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    bfce:	d5e6      	bpl.n	bf9e <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    bfd0:	f013 0302 	ands.w	r3, r3, #2
    bfd4:	d01d      	beq.n	c012 <drop_item_locked+0xa4>
		if (free_wlen) {
    bfd6:	f1b8 0f00 	cmp.w	r8, #0
    bfda:	d003      	beq.n	bfe4 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    bfdc:	4641      	mov	r1, r8
    bfde:	4620      	mov	r0, r4
    bfe0:	f7ff ffa8 	bl	bf34 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    bfe4:	6861      	ldr	r1, [r4, #4]
    bfe6:	462a      	mov	r2, r5
    bfe8:	4620      	mov	r0, r4
    bfea:	f7ff ff89 	bl	bf00 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    bfee:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    bff2:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    bff4:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    bff6:	d104      	bne.n	c002 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    bff8:	462a      	mov	r2, r5
    bffa:	4620      	mov	r0, r4
    bffc:	f7ff ff80 	bl	bf00 <idx_inc>
    c000:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    c002:	68a3      	ldr	r3, [r4, #8]
    c004:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    c006:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    c008:	6923      	ldr	r3, [r4, #16]
    c00a:	f043 0308 	orr.w	r3, r3, #8
    c00e:	6123      	str	r3, [r4, #16]
    c010:	e7d4      	b.n	bfbc <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    c012:	4601      	mov	r1, r0
    c014:	4620      	mov	r0, r4
    c016:	9301      	str	r3, [sp, #4]
    c018:	f7ff ff80 	bl	bf1c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    c01c:	68e2      	ldr	r2, [r4, #12]
    c01e:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    c020:	f1b8 0f00 	cmp.w	r8, #0
    c024:	d004      	beq.n	c030 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    c026:	6821      	ldr	r1, [r4, #0]
    c028:	69e2      	ldr	r2, [r4, #28]
    c02a:	9b01      	ldr	r3, [sp, #4]
    c02c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    c030:	eb05 0208 	add.w	r2, r5, r8
    c034:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    c038:	6821      	ldr	r1, [r4, #0]
    c03a:	4620      	mov	r0, r4
    c03c:	f7ff ff60 	bl	bf00 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    c040:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    c042:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    c044:	f043 0308 	orr.w	r3, r3, #8
    c048:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    c04a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    c04e:	f36f 0300 	bfc	r3, #0, #1
    c052:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    c056:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    c05a:	e7af      	b.n	bfbc <drop_item_locked+0x4e>

0000c05c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    c05c:	b570      	push	{r4, r5, r6, lr}
    c05e:	4604      	mov	r4, r0
    c060:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    c062:	f7ff ff4d 	bl	bf00 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    c066:	6823      	ldr	r3, [r4, #0]
    c068:	4283      	cmp	r3, r0
    c06a:	d105      	bne.n	c078 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    c06c:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    c06e:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    c070:	f023 0308 	bic.w	r3, r3, #8
    c074:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    c076:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    c078:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    c07a:	00ab      	lsls	r3, r5, #2
    c07c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    c080:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    c084:	4620      	mov	r0, r4
    c086:	6861      	ldr	r1, [r4, #4]
    c088:	462a      	mov	r2, r5
    c08a:	f7ff ff39 	bl	bf00 <idx_inc>
    c08e:	6060      	str	r0, [r4, #4]
    c090:	e7f1      	b.n	c076 <post_drop_action+0x1a>

0000c092 <max_utilization_update>:
{
    c092:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    c094:	6903      	ldr	r3, [r0, #16]
    c096:	075b      	lsls	r3, r3, #29
{
    c098:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    c09a:	d506      	bpl.n	c0aa <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    c09c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c09e:	f7ff ff1e 	bl	bede <get_usage>
    c0a2:	4285      	cmp	r5, r0
    c0a4:	bf2c      	ite	cs
    c0a6:	6265      	strcs	r5, [r4, #36]	; 0x24
    c0a8:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    c0aa:	bd38      	pop	{r3, r4, r5, pc}

0000c0ac <mpsc_pbuf_init>:
{
    c0ac:	b538      	push	{r3, r4, r5, lr}
    c0ae:	460d      	mov	r5, r1
    c0b0:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    c0b2:	221c      	movs	r2, #28
    c0b4:	2100      	movs	r1, #0
    c0b6:	f000 fbb2 	bl	c81e <memset>
	buffer->get_wlen = cfg->get_wlen;
    c0ba:	68eb      	ldr	r3, [r5, #12]
    c0bc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    c0be:	68ab      	ldr	r3, [r5, #8]
    c0c0:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    c0c2:	682b      	ldr	r3, [r5, #0]
    c0c4:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    c0c6:	686b      	ldr	r3, [r5, #4]
    c0c8:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    c0ca:	2200      	movs	r2, #0
    c0cc:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    c0ce:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    c0d0:	b123      	cbz	r3, c0dc <mpsc_pbuf_init+0x30>
    c0d2:	1e59      	subs	r1, r3, #1
    c0d4:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    c0d6:	bf08      	it	eq
    c0d8:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    c0dc:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c0de:	2201      	movs	r2, #1
    c0e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c0e4:	2100      	movs	r1, #0
}
    c0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c0ea:	f001 b83b 	b.w	d164 <z_impl_k_sem_init>

0000c0ee <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    c0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0f2:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    c0f4:	2500      	movs	r5, #0
{
    c0f6:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    c0f8:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    c0fa:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    c0fc:	428b      	cmp	r3, r1
{
    c0fe:	4604      	mov	r4, r0
    c100:	460e      	mov	r6, r1
    c102:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    c104:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    c106:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    c108:	d33a      	bcc.n	c180 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    c10a:	f04f 0320 	mov.w	r3, #32
    c10e:	f3ef 8b11 	mrs	fp, BASEPRI
    c112:	f383 8812 	msr	BASEPRI_MAX, r3
    c116:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    c11a:	9a05      	ldr	r2, [sp, #20]
    c11c:	46d8      	mov	r8, fp
    c11e:	b12a      	cbz	r2, c12c <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    c120:	4629      	mov	r1, r5
    c122:	4620      	mov	r0, r4
    c124:	f7ff ff9a 	bl	c05c <post_drop_action>
			tmp_wr_idx_shift = 0;
    c128:	2300      	movs	r3, #0
    c12a:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    c12c:	a904      	add	r1, sp, #16
    c12e:	4620      	mov	r0, r4
    c130:	f7ff fec2 	bl	beb8 <free_space>

		if (free_wlen >= wlen) {
    c134:	9904      	ldr	r1, [sp, #16]
    c136:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    c138:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    c13a:	d32a      	bcc.n	c192 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    c13c:	6822      	ldr	r2, [r4, #0]
			item =
    c13e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    c140:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    c144:	f021 0103 	bic.w	r1, r1, #3
    c148:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    c14c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c150:	6821      	ldr	r1, [r4, #0]
    c152:	4632      	mov	r2, r6
    c154:	4620      	mov	r0, r4
    c156:	f7ff fed3 	bl	bf00 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c15a:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c15c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c15e:	4298      	cmp	r0, r3
    c160:	d012      	beq.n	c188 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    c162:	2700      	movs	r7, #0
	__asm__ volatile(
    c164:	f388 8811 	msr	BASEPRI, r8
    c168:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    c16c:	9903      	ldr	r1, [sp, #12]
    c16e:	b129      	cbz	r1, c17c <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    c170:	6962      	ldr	r2, [r4, #20]
    c172:	b10a      	cbz	r2, c178 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    c174:	4620      	mov	r0, r4
    c176:	4790      	blx	r2
			}
			dropped_item = NULL;
    c178:	2300      	movs	r3, #0
    c17a:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    c17c:	2f00      	cmp	r7, #0
    c17e:	d1c4      	bne.n	c10a <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    c180:	4648      	mov	r0, r9
    c182:	b007      	add	sp, #28
    c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    c188:	6923      	ldr	r3, [r4, #16]
    c18a:	f043 0308 	orr.w	r3, r3, #8
    c18e:	6123      	str	r3, [r4, #16]
    c190:	e7e7      	b.n	c162 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    c192:	b118      	cbz	r0, c19c <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    c194:	4620      	mov	r0, r4
    c196:	f7ff fecd 	bl	bf34 <add_skip_item>
			cont = true;
    c19a:	e7e3      	b.n	c164 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    c19c:	9b00      	ldr	r3, [sp, #0]
    c19e:	ea5a 0303 	orrs.w	r3, sl, r3
    c1a2:	d01a      	beq.n	c1da <mpsc_pbuf_alloc+0xec>
    c1a4:	9101      	str	r1, [sp, #4]
    c1a6:	f000 ff41 	bl	d02c <k_is_in_isr>
    c1aa:	9901      	ldr	r1, [sp, #4]
    c1ac:	b9a8      	cbnz	r0, c1da <mpsc_pbuf_alloc+0xec>
    c1ae:	f38b 8811 	msr	BASEPRI, fp
    c1b2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    c1b6:	9b00      	ldr	r3, [sp, #0]
    c1b8:	4652      	mov	r2, sl
    c1ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c1be:	f7fe f8bb 	bl	a338 <z_impl_k_sem_take>
	__asm__ volatile(
    c1c2:	f04f 0320 	mov.w	r3, #32
    c1c6:	f3ef 8811 	mrs	r8, BASEPRI
    c1ca:	f383 8812 	msr	BASEPRI_MAX, r3
    c1ce:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    c1d2:	fab0 f780 	clz	r7, r0
    c1d6:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    c1d8:	e7c4      	b.n	c164 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    c1da:	ab05      	add	r3, sp, #20
    c1dc:	aa03      	add	r2, sp, #12
    c1de:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    c1e0:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    c1e2:	f7ff fec4 	bl	bf6e <drop_item_locked>
    c1e6:	4607      	mov	r7, r0
    c1e8:	e7bc      	b.n	c164 <mpsc_pbuf_alloc+0x76>

0000c1ea <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    c1ea:	b570      	push	{r4, r5, r6, lr}
    c1ec:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c1ee:	6983      	ldr	r3, [r0, #24]
    c1f0:	4608      	mov	r0, r1
{
    c1f2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c1f4:	4798      	blx	r3
    c1f6:	4602      	mov	r2, r0
    c1f8:	f04f 0320 	mov.w	r3, #32
    c1fc:	f3ef 8611 	mrs	r6, BASEPRI
    c200:	f383 8812 	msr	BASEPRI_MAX, r3
    c204:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    c208:	782b      	ldrb	r3, [r5, #0]
    c20a:	f043 0301 	orr.w	r3, r3, #1
    c20e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c210:	6861      	ldr	r1, [r4, #4]
    c212:	4620      	mov	r0, r4
    c214:	f7ff fe74 	bl	bf00 <idx_inc>
    c218:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    c21a:	4620      	mov	r0, r4
    c21c:	f7ff ff39 	bl	c092 <max_utilization_update>
	__asm__ volatile(
    c220:	f386 8811 	msr	BASEPRI, r6
    c224:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    c228:	bd70      	pop	{r4, r5, r6, pc}

0000c22a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    c22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22c:	4604      	mov	r4, r0
	__asm__ volatile(
    c22e:	f04f 0320 	mov.w	r3, #32
    c232:	f3ef 8611 	mrs	r6, BASEPRI
    c236:	f383 8812 	msr	BASEPRI_MAX, r3
    c23a:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    c23e:	6923      	ldr	r3, [r4, #16]
    c240:	f013 0f08 	tst.w	r3, #8
    c244:	68a3      	ldr	r3, [r4, #8]
    c246:	d102      	bne.n	c24e <mpsc_pbuf_claim+0x24>
    c248:	6862      	ldr	r2, [r4, #4]
    c24a:	4293      	cmp	r3, r2
    c24c:	d900      	bls.n	c250 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    c24e:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    c250:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c252:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    c254:	b92a      	cbnz	r2, c262 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    c256:	f386 8811 	msr	BASEPRI, r6
    c25a:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    c25e:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    c260:	e033      	b.n	c2ca <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    c262:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    c266:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    c26a:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    c26e:	d0f2      	beq.n	c256 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    c270:	2802      	cmp	r0, #2
    c272:	d103      	bne.n	c27c <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    c274:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    c278:	08ad      	lsrs	r5, r5, #2
    c27a:	d105      	bne.n	c288 <mpsc_pbuf_claim+0x5e>
    c27c:	07d0      	lsls	r0, r2, #31
    c27e:	d412      	bmi.n	c2a6 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    c280:	69a3      	ldr	r3, [r4, #24]
    c282:	4638      	mov	r0, r7
    c284:	4798      	blx	r3
    c286:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    c288:	68a1      	ldr	r1, [r4, #8]
    c28a:	462a      	mov	r2, r5
    c28c:	4620      	mov	r0, r4
    c28e:	f7ff fe37 	bl	bf00 <idx_inc>
				rd_idx_inc(buffer, inc);
    c292:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    c294:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    c296:	4620      	mov	r0, r4
    c298:	f7ff fe40 	bl	bf1c <rd_idx_inc>
    c29c:	f386 8811 	msr	BASEPRI, r6
    c2a0:	f3bf 8f6f 	isb	sy
	} while (cont);
    c2a4:	e7c3      	b.n	c22e <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    c2a6:	f042 0202 	orr.w	r2, r2, #2
    c2aa:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    c2ae:	4638      	mov	r0, r7
    c2b0:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    c2b2:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    c2b4:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    c2b6:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    c2b8:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    c2ba:	4620      	mov	r0, r4
    c2bc:	f7ff fe20 	bl	bf00 <idx_inc>
				buffer->tmp_rd_idx =
    c2c0:	60a0      	str	r0, [r4, #8]
    c2c2:	f386 8811 	msr	BASEPRI, r6
    c2c6:	f3bf 8f6f 	isb	sy
}
    c2ca:	4638      	mov	r0, r7
    c2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c2ce <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    c2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2d0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c2d2:	6983      	ldr	r3, [r0, #24]
    c2d4:	4608      	mov	r0, r1
{
    c2d6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c2d8:	4798      	blx	r3
    c2da:	4606      	mov	r6, r0
	__asm__ volatile(
    c2dc:	f04f 0320 	mov.w	r3, #32
    c2e0:	f3ef 8711 	mrs	r7, BASEPRI
    c2e4:	f383 8812 	msr	BASEPRI_MAX, r3
    c2e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    c2ec:	782b      	ldrb	r3, [r5, #0]
    c2ee:	f36f 0300 	bfc	r3, #0, #1
    c2f2:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c2f4:	6923      	ldr	r3, [r4, #16]
    c2f6:	079b      	lsls	r3, r3, #30
    c2f8:	d505      	bpl.n	c306 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    c2fa:	68e2      	ldr	r2, [r4, #12]
    c2fc:	69e3      	ldr	r3, [r4, #28]
    c2fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c302:	429d      	cmp	r5, r3
    c304:	d11a      	bne.n	c33c <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    c306:	782b      	ldrb	r3, [r5, #0]
    c308:	f36f 0341 	bfc	r3, #1, #1
    c30c:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    c30e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    c312:	4299      	cmp	r1, r3
    c314:	d104      	bne.n	c320 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    c316:	4632      	mov	r2, r6
    c318:	4620      	mov	r0, r4
    c31a:	f7ff fdf1 	bl	bf00 <idx_inc>
    c31e:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    c320:	4631      	mov	r1, r6
    c322:	4620      	mov	r0, r4
    c324:	f7ff fdfa 	bl	bf1c <rd_idx_inc>
	__asm__ volatile(
    c328:	f387 8811 	msr	BASEPRI, r7
    c32c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    c330:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    c334:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c338:	f7fd bfde 	b.w	a2f8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    c33c:	682b      	ldr	r3, [r5, #0]
    c33e:	f360 039f 	bfi	r3, r0, #2, #30
    c342:	602b      	str	r3, [r5, #0]
    c344:	e7f0      	b.n	c328 <mpsc_pbuf_free+0x5a>

0000c346 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    c346:	6902      	ldr	r2, [r0, #16]
    c348:	6883      	ldr	r3, [r0, #8]
    c34a:	0712      	lsls	r2, r2, #28
    c34c:	d402      	bmi.n	c354 <mpsc_pbuf_is_pending+0xe>
    c34e:	6842      	ldr	r2, [r0, #4]
    c350:	429a      	cmp	r2, r3
    c352:	d200      	bcs.n	c356 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    c354:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c356:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    c358:	1e18      	subs	r0, r3, #0
    c35a:	bf18      	it	ne
    c35c:	2001      	movne	r0, #1
    c35e:	4770      	bx	lr

0000c360 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c360:	4770      	bx	lr

0000c362 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    c362:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    c364:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c366:	bf5f      	itttt	pl
    c368:	6803      	ldrpl	r3, [r0, #0]
    c36a:	8842      	ldrhpl	r2, [r0, #2]
    c36c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    c370:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    c374:	bf5d      	ittte	pl
    c376:	3017      	addpl	r0, #23
    c378:	f020 0007 	bicpl.w	r0, r0, #7
    c37c:	0880      	lsrpl	r0, r0, #2
	return 0;
    c37e:	2000      	movmi	r0, #0
}
    c380:	4770      	bx	lr

0000c382 <dummy_timestamp>:
}
    c382:	2000      	movs	r0, #0
    c384:	4770      	bx	lr

0000c386 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c386:	f000 bc45 	b.w	cc14 <sys_clock_cycle_get_32>

0000c38a <atomic_inc>:
{
    c38a:	4603      	mov	r3, r0
}
    c38c:	f3bf 8f5b 	dmb	ish
    c390:	e853 0f00 	ldrex	r0, [r3]
    c394:	1c42      	adds	r2, r0, #1
    c396:	e843 2100 	strex	r1, r2, [r3]
    c39a:	2900      	cmp	r1, #0
    c39c:	d1f8      	bne.n	c390 <atomic_inc+0x6>
    c39e:	f3bf 8f5b 	dmb	ish
    c3a2:	4770      	bx	lr

0000c3a4 <z_log_vprintk>:
{
    c3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c3a6:	2300      	movs	r3, #0
    c3a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c3ac:	e9cd 3300 	strd	r3, r3, [sp]
    c3b0:	461a      	mov	r2, r3
    c3b2:	4619      	mov	r1, r3
    c3b4:	4618      	mov	r0, r3
    c3b6:	f7f6 fd2f 	bl	2e18 <z_impl_z_log_msg_runtime_vcreate>
}
    c3ba:	b005      	add	sp, #20
    c3bc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3c0 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    c3c0:	2001      	movs	r0, #1
    c3c2:	f7f6 bae1 	b.w	2988 <z_log_dropped>

0000c3c6 <z_log_get_tag>:
}
    c3c6:	2000      	movs	r0, #0
    c3c8:	4770      	bx	lr

0000c3ca <z_cbprintf_cpy>:
{
    c3ca:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    c3cc:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    c3d0:	1b9b      	subs	r3, r3, r6
    c3d2:	428b      	cmp	r3, r1
{
    c3d4:	460c      	mov	r4, r1
    c3d6:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    c3d8:	d30a      	bcc.n	c3f0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    c3da:	6813      	ldr	r3, [r2, #0]
    c3dc:	460a      	mov	r2, r1
    c3de:	4601      	mov	r1, r0
    c3e0:	1998      	adds	r0, r3, r6
    c3e2:	f000 fa11 	bl	c808 <memcpy>
	desc->off += len;
    c3e6:	68ab      	ldr	r3, [r5, #8]
    c3e8:	4423      	add	r3, r4
    c3ea:	60ab      	str	r3, [r5, #8]
	return len;
    c3ec:	4620      	mov	r0, r4
}
    c3ee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    c3f0:	f06f 001b 	mvn.w	r0, #27
    c3f4:	e7fb      	b.n	c3ee <z_cbprintf_cpy+0x24>

0000c3f6 <z_log_msg_finalize>:
{
    c3f6:	b570      	push	{r4, r5, r6, lr}
    c3f8:	460e      	mov	r6, r1
    c3fa:	4615      	mov	r5, r2
    c3fc:	4619      	mov	r1, r3
	if (!msg) {
    c3fe:	4604      	mov	r4, r0
    c400:	b918      	cbnz	r0, c40a <z_log_msg_finalize+0x14>
}
    c402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    c406:	f7f6 babf 	b.w	2988 <z_log_dropped>
	if (data) {
    c40a:	b133      	cbz	r3, c41a <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    c40c:	f3c2 234a 	ubfx	r3, r2, #9, #11
    c410:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    c412:	0d12      	lsrs	r2, r2, #20
    c414:	4418      	add	r0, r3
    c416:	f000 f9f7 	bl	c808 <memcpy>
	msg->hdr.source = source;
    c41a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    c41e:	4620      	mov	r0, r4
}
    c420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    c424:	f7f6 bc40 	b.w	2ca8 <z_log_msg_commit>

0000c428 <buffer_write>:
{
    c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c42a:	4606      	mov	r6, r0
    c42c:	460d      	mov	r5, r1
    c42e:	4614      	mov	r4, r2
    c430:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    c432:	4621      	mov	r1, r4
    c434:	4628      	mov	r0, r5
    c436:	463a      	mov	r2, r7
    c438:	47b0      	blx	r6
	} while (len != 0);
    c43a:	1a24      	subs	r4, r4, r0
		buf += processed;
    c43c:	4405      	add	r5, r0
	} while (len != 0);
    c43e:	d1f8      	bne.n	c432 <buffer_write+0xa>
}
    c440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c442 <cbvprintf>:
{
    c442:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c444:	2400      	movs	r4, #0
    c446:	9400      	str	r4, [sp, #0]
    c448:	f7f5 fe00 	bl	204c <z_cbvprintf_impl>
}
    c44c:	b002      	add	sp, #8
    c44e:	bd10      	pop	{r4, pc}

0000c450 <log_output_flush>:
{
    c450:	b510      	push	{r4, lr}
		     output->control_block->offset,
    c452:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c454:	6881      	ldr	r1, [r0, #8]
{
    c456:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    c458:	e9d2 2300 	ldrd	r2, r3, [r2]
    c45c:	6800      	ldr	r0, [r0, #0]
    c45e:	f7ff ffe3 	bl	c428 <buffer_write>
	output->control_block->offset = 0;
    c462:	6863      	ldr	r3, [r4, #4]
    c464:	2200      	movs	r2, #0
    c466:	601a      	str	r2, [r3, #0]
}
    c468:	bd10      	pop	{r4, pc}

0000c46a <out_func>:
{
    c46a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    c46c:	684b      	ldr	r3, [r1, #4]
    c46e:	681a      	ldr	r2, [r3, #0]
    c470:	68cb      	ldr	r3, [r1, #12]
    c472:	429a      	cmp	r2, r3
{
    c474:	4605      	mov	r5, r0
    c476:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c478:	d102      	bne.n	c480 <out_func+0x16>
		log_output_flush(out_ctx);
    c47a:	4608      	mov	r0, r1
    c47c:	f7ff ffe8 	bl	c450 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c480:	6863      	ldr	r3, [r4, #4]
    c482:	f3bf 8f5b 	dmb	ish
    c486:	e853 2f00 	ldrex	r2, [r3]
    c48a:	1c51      	adds	r1, r2, #1
    c48c:	e843 1000 	strex	r0, r1, [r3]
    c490:	2800      	cmp	r0, #0
    c492:	d1f8      	bne.n	c486 <out_func+0x1c>
    c494:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    c498:	68a3      	ldr	r3, [r4, #8]
    c49a:	549d      	strb	r5, [r3, r2]
}
    c49c:	2000      	movs	r0, #0
    c49e:	bd38      	pop	{r3, r4, r5, pc}

0000c4a0 <cr_out_func>:
	if (c == '\n') {
    c4a0:	280a      	cmp	r0, #10
{
    c4a2:	b538      	push	{r3, r4, r5, lr}
    c4a4:	4604      	mov	r4, r0
    c4a6:	460d      	mov	r5, r1
	if (c == '\n') {
    c4a8:	d102      	bne.n	c4b0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    c4aa:	200d      	movs	r0, #13
    c4ac:	f7ff ffdd 	bl	c46a <out_func>
	out_func(c, ctx);
    c4b0:	4629      	mov	r1, r5
    c4b2:	4620      	mov	r0, r4
    c4b4:	f7ff ffd9 	bl	c46a <out_func>
}
    c4b8:	2000      	movs	r0, #0
    c4ba:	bd38      	pop	{r3, r4, r5, pc}

0000c4bc <log_backend_uart_init>:
}
    c4bc:	4770      	bx	lr

0000c4be <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    c4be:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    c4c2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    c4c6:	d001      	beq.n	c4cc <get_ep_bm_from_addr+0xe>
    c4c8:	f7f7 b92e 	b.w	3728 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    c4cc:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    c4d0:	bf18      	it	ne
    c4d2:	3210      	addne	r2, #16
    c4d4:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    c4d6:	4090      	lsls	r0, r2
}
    c4d8:	4770      	bx	lr

0000c4da <usb_write>:
{
    c4da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4de:	4606      	mov	r6, r0
    c4e0:	460f      	mov	r7, r1
    c4e2:	4690      	mov	r8, r2
    c4e4:	4699      	mov	r9, r3
    c4e6:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    c4e8:	464b      	mov	r3, r9
    c4ea:	4642      	mov	r2, r8
    c4ec:	4639      	mov	r1, r7
    c4ee:	4630      	mov	r0, r6
    c4f0:	f7fa f95c 	bl	67ac <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    c4f4:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    c4f8:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    c4fa:	d103      	bne.n	c504 <usb_write+0x2a>
	z_impl_k_yield();
    c4fc:	f7fe fae2 	bl	aac4 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    c500:	3d01      	subs	r5, #1
    c502:	d1f1      	bne.n	c4e8 <usb_write+0xe>
}
    c504:	4620      	mov	r0, r4
    c506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c50a <usb_get_dev_data_by_cfg>:
	return list->head;
    c50a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c50c:	b140      	cbz	r0, c520 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    c50e:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    c512:	685b      	ldr	r3, [r3, #4]
    c514:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c516:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    c51a:	d001      	beq.n	c520 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    c51c:	6840      	ldr	r0, [r0, #4]
    c51e:	e7f5      	b.n	c50c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    c520:	4770      	bx	lr

0000c522 <usb_get_dev_data_by_iface>:
	return list->head;
    c522:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c524:	b150      	cbz	r0, c53c <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    c526:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    c52a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    c52c:	685b      	ldr	r3, [r3, #4]
    c52e:	789b      	ldrb	r3, [r3, #2]
    c530:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c532:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    c536:	d001      	beq.n	c53c <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    c538:	6840      	ldr	r0, [r0, #4]
    c53a:	e7f3      	b.n	c524 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    c53c:	4770      	bx	lr

0000c53e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    c53e:	b530      	push	{r4, r5, lr}
	return list->head;
    c540:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c542:	b188      	cbz	r0, c568 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    c544:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c548:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    c54a:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c54c:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    c54e:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c550:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    c552:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    c554:	b2dc      	uxtb	r4, r3
    c556:	42a5      	cmp	r5, r4
    c558:	d801      	bhi.n	c55e <usb_get_dev_data_by_ep+0x20>
	return node->next;
    c55a:	6840      	ldr	r0, [r0, #4]
    c55c:	e7f1      	b.n	c542 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    c55e:	3301      	adds	r3, #1
    c560:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    c564:	428c      	cmp	r4, r1
    c566:	d1f5      	bne.n	c554 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    c568:	bd30      	pop	{r4, r5, pc}

0000c56a <usb_transfer_is_busy>:
{
    c56a:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    c56c:	f7f7 fe16 	bl	419c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    c570:	b128      	cbz	r0, c57e <usb_transfer_is_busy+0x14>
    c572:	6840      	ldr	r0, [r0, #4]
    c574:	f110 0f10 	cmn.w	r0, #16
    c578:	bf14      	ite	ne
    c57a:	2000      	movne	r0, #0
    c57c:	2001      	moveq	r0, #1
}
    c57e:	bd08      	pop	{r3, pc}

0000c580 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    c580:	1c4b      	adds	r3, r1, #1
    c582:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    c584:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    c586:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    c588:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    c58c:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    c58e:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    c592:	4770      	bx	lr

0000c594 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    c594:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    c598:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    c59c:	4718      	bx	r3

0000c59e <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c59e:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    c5a0:	2200      	movs	r2, #0
    c5a2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    c5a6:	4770      	bx	lr

0000c5a8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c5a8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    c5aa:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    c5ae:	b108      	cbz	r0, c5b4 <cdc_acm_irq_tx_ready+0xc>
    c5b0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    c5b4:	4770      	bx	lr

0000c5b6 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c5b6:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    c5b8:	2200      	movs	r2, #0
    c5ba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    c5be:	4770      	bx	lr

0000c5c0 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    c5c0:	6903      	ldr	r3, [r0, #16]
}
    c5c2:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    c5c6:	4770      	bx	lr

0000c5c8 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c5c8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    c5ca:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    c5ce:	b112      	cbz	r2, c5d6 <cdc_acm_irq_is_pending+0xe>
    c5d0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    c5d4:	b92a      	cbnz	r2, c5e2 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    c5d6:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    c5da:	b118      	cbz	r0, c5e4 <cdc_acm_irq_is_pending+0x1c>
    c5dc:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    c5e0:	4770      	bx	lr
		return 1;
    c5e2:	2001      	movs	r0, #1
}
    c5e4:	4770      	bx	lr

0000c5e6 <cdc_acm_irq_update>:
}
    c5e6:	2001      	movs	r0, #1
    c5e8:	4770      	bx	lr

0000c5ea <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c5ea:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    c5ec:	e9c3 1200 	strd	r1, r2, [r3]
}
    c5f0:	4770      	bx	lr

0000c5f2 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    c5f2:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c5f4:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    c5f6:	d008      	beq.n	c60a <cdc_acm_line_ctrl_get+0x18>
    c5f8:	2904      	cmp	r1, #4
    c5fa:	d00b      	beq.n	c614 <cdc_acm_line_ctrl_get+0x22>
    c5fc:	2901      	cmp	r1, #1
    c5fe:	d10e      	bne.n	c61e <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    c600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    c604:	6013      	str	r3, [r2, #0]
		return 0;
    c606:	2000      	movs	r0, #0
    c608:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    c60a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    c60e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    c612:	e7f7      	b.n	c604 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    c614:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    c618:	f003 0301 	and.w	r3, r3, #1
		return 0;
    c61c:	e7f2      	b.n	c604 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    c61e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    c622:	4770      	bx	lr

0000c624 <cdc_acm_configure>:
}
    c624:	2000      	movs	r0, #0
    c626:	4770      	bx	lr

0000c628 <cdc_acm_config_get>:
{
    c628:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c62a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    c62c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c630:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    c632:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    c636:	b16a      	cbz	r2, c654 <cdc_acm_config_get+0x2c>
    c638:	2a01      	cmp	r2, #1
    c63a:	bf0c      	ite	eq
    c63c:	2202      	moveq	r2, #2
    c63e:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    c640:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    c642:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    c646:	1e50      	subs	r0, r2, #1
    c648:	2803      	cmp	r0, #3
    c64a:	d805      	bhi.n	c658 <cdc_acm_config_get+0x30>
    c64c:	e8df f000 	tbb	[pc, r0]
    c650:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    c654:	2201      	movs	r2, #1
    c656:	e7f3      	b.n	c640 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    c658:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    c65a:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    c65c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    c660:	2b06      	cmp	r3, #6
    c662:	d009      	beq.n	c678 <cdc_acm_config_get+0x50>
    c664:	2b07      	cmp	r3, #7
    c666:	d009      	beq.n	c67c <cdc_acm_config_get+0x54>
    c668:	2b05      	cmp	r3, #5
    c66a:	bf0c      	ite	eq
    c66c:	2300      	moveq	r3, #0
    c66e:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    c670:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    c672:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    c674:	71c8      	strb	r0, [r1, #7]
}
    c676:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    c678:	2301      	movs	r3, #1
    c67a:	e7f9      	b.n	c670 <cdc_acm_config_get+0x48>
    c67c:	2302      	movs	r3, #2
    c67e:	e7f7      	b.n	c670 <cdc_acm_config_get+0x48>

0000c680 <cdc_acm_line_ctrl_set>:
{
    c680:	b508      	push	{r3, lr}
	switch (ctrl) {
    c682:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c684:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    c686:	d03f      	beq.n	c708 <cdc_acm_line_ctrl_set+0x88>
    c688:	d813      	bhi.n	c6b2 <cdc_acm_line_ctrl_set+0x32>
    c68a:	2910      	cmp	r1, #16
    c68c:	d032      	beq.n	c6f4 <cdc_acm_line_ctrl_set+0x74>
    c68e:	d806      	bhi.n	c69e <cdc_acm_line_ctrl_set+0x1e>
    c690:	2901      	cmp	r1, #1
    c692:	d01e      	beq.n	c6d2 <cdc_acm_line_ctrl_set+0x52>
    c694:	2908      	cmp	r1, #8
    c696:	d020      	beq.n	c6da <cdc_acm_line_ctrl_set+0x5a>
    c698:	f06f 0012 	mvn.w	r0, #18
}
    c69c:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    c69e:	2920      	cmp	r1, #32
    c6a0:	d1fa      	bne.n	c698 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    c6a2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c6a6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    c6aa:	b352      	cbz	r2, c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    c6ac:	f041 0104 	orr.w	r1, r1, #4
    c6b0:	e027      	b.n	c702 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    c6b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    c6b6:	d030      	beq.n	c71a <cdc_acm_line_ctrl_set+0x9a>
    c6b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c6bc:	d036      	beq.n	c72c <cdc_acm_line_ctrl_set+0xac>
    c6be:	2980      	cmp	r1, #128	; 0x80
    c6c0:	d1ea      	bne.n	c698 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    c6c2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c6c6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    c6ca:	b1d2      	cbz	r2, c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    c6cc:	f041 0110 	orr.w	r1, r1, #16
    c6d0:	e017      	b.n	c702 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    c6d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    c6d6:	2000      	movs	r0, #0
    c6d8:	e7e0      	b.n	c69c <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    c6da:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c6de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    c6e2:	b10a      	cbz	r2, c6e8 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    c6e4:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    c6e8:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    c6ec:	2101      	movs	r1, #1
    c6ee:	f7f8 f88b 	bl	4808 <cdc_acm_send_notification.isra.0>
		return 0;
    c6f2:	e7f0      	b.n	c6d6 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    c6f4:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c6f8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    c6fc:	b10a      	cbz	r2, c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    c6fe:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    c702:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    c706:	e7f2      	b.n	c6ee <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    c708:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c70c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    c710:	2a00      	cmp	r2, #0
    c712:	d0f6      	beq.n	c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    c714:	f041 0108 	orr.w	r1, r1, #8
    c718:	e7f3      	b.n	c702 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    c71a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c71e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    c722:	2a00      	cmp	r2, #0
    c724:	d0ed      	beq.n	c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    c726:	f041 0120 	orr.w	r1, r1, #32
    c72a:	e7ea      	b.n	c702 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    c72c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c730:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    c734:	2a00      	cmp	r2, #0
    c736:	d0e4      	beq.n	c702 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    c738:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    c73c:	e7e1      	b.n	c702 <cdc_acm_line_ctrl_set+0x82>

0000c73e <cdc_acm_fifo_read>:
{
    c73e:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c740:	6904      	ldr	r4, [r0, #16]
{
    c742:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c744:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c748:	f7ff fb96 	bl	be78 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    c74c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c750:	691a      	ldr	r2, [r3, #16]
    c752:	6899      	ldr	r1, [r3, #8]
    c754:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    c756:	bf04      	itt	eq
    c758:	2200      	moveq	r2, #0
    c75a:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    c75e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c762:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    c764:	b19a      	cbz	r2, c78e <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    c766:	685a      	ldr	r2, [r3, #4]
    c768:	6959      	ldr	r1, [r3, #20]
    c76a:	69db      	ldr	r3, [r3, #28]
    c76c:	1a52      	subs	r2, r2, r1
    c76e:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    c770:	2b3f      	cmp	r3, #63	; 0x3f
    c772:	d90c      	bls.n	c78e <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    c774:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    c778:	b133      	cbz	r3, c788 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    c77a:	686b      	ldr	r3, [r5, #4]
    c77c:	6a1b      	ldr	r3, [r3, #32]
    c77e:	4622      	mov	r2, r4
    c780:	7b18      	ldrb	r0, [r3, #12]
    c782:	2100      	movs	r1, #0
    c784:	f7f8 f862 	bl	484c <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    c788:	2300      	movs	r3, #0
    c78a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    c78e:	4630      	mov	r0, r6
    c790:	bd70      	pop	{r4, r5, r6, pc}

0000c792 <cdc_acm_poll_in>:
{
    c792:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    c794:	2201      	movs	r2, #1
    c796:	f7ff ffd2 	bl	c73e <cdc_acm_fifo_read>
}
    c79a:	3801      	subs	r0, #1
    c79c:	bf18      	it	ne
    c79e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c7a2:	bd08      	pop	{r3, pc}

0000c7a4 <abort_function>:
{
    c7a4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c7a6:	2000      	movs	r0, #0
    c7a8:	f7f6 f802 	bl	27b0 <sys_reboot>

0000c7ac <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    c7ac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c7ae:	6800      	ldr	r0, [r0, #0]
    c7b0:	f7f8 b9ec 	b.w	4b8c <z_arm_fatal_error>

0000c7b4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c7b4:	2100      	movs	r1, #0
    c7b6:	2001      	movs	r0, #1
    c7b8:	f7f8 b9e8 	b.w	4b8c <z_arm_fatal_error>

0000c7bc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c7bc:	b508      	push	{r3, lr}
	handler();
    c7be:	f7f8 fa93 	bl	4ce8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    c7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    c7c6:	f7f8 bb6b 	b.w	4ea0 <z_arm_exc_exit>

0000c7ca <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c7ca:	2300      	movs	r3, #0
    c7cc:	f7f6 baa0 	b.w	2d10 <z_impl_z_log_msg_static_create>

0000c7d0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c7d0:	4603      	mov	r3, r0
	size_t n = 0;
    c7d2:	2000      	movs	r0, #0

	while (*s != '\0') {
    c7d4:	5c1a      	ldrb	r2, [r3, r0]
    c7d6:	b902      	cbnz	r2, c7da <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    c7d8:	4770      	bx	lr
		n++;
    c7da:	3001      	adds	r0, #1
    c7dc:	e7fa      	b.n	c7d4 <strlen+0x4>

0000c7de <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c7de:	4603      	mov	r3, r0
	size_t n = 0;
    c7e0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c7e2:	5c1a      	ldrb	r2, [r3, r0]
    c7e4:	b10a      	cbz	r2, c7ea <strnlen+0xc>
    c7e6:	4288      	cmp	r0, r1
    c7e8:	d100      	bne.n	c7ec <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    c7ea:	4770      	bx	lr
		n++;
    c7ec:	3001      	adds	r0, #1
    c7ee:	e7f8      	b.n	c7e2 <strnlen+0x4>

0000c7f0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    c7f0:	1e43      	subs	r3, r0, #1
    c7f2:	3901      	subs	r1, #1
    c7f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c7f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    c7fc:	4282      	cmp	r2, r0
    c7fe:	d101      	bne.n	c804 <strcmp+0x14>
    c800:	2a00      	cmp	r2, #0
    c802:	d1f7      	bne.n	c7f4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    c804:	1a10      	subs	r0, r2, r0
    c806:	4770      	bx	lr

0000c808 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    c808:	b510      	push	{r4, lr}
    c80a:	1e43      	subs	r3, r0, #1
    c80c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    c80e:	4291      	cmp	r1, r2
    c810:	d100      	bne.n	c814 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    c812:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    c814:	f811 4b01 	ldrb.w	r4, [r1], #1
    c818:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    c81c:	e7f7      	b.n	c80e <memcpy+0x6>

0000c81e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c81e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    c820:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    c822:	4603      	mov	r3, r0
	while (n > 0) {
    c824:	4293      	cmp	r3, r2
    c826:	d100      	bne.n	c82a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    c828:	4770      	bx	lr
		*(d_byte++) = c_byte;
    c82a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c82e:	e7f9      	b.n	c824 <memset+0x6>

0000c830 <_stdout_hook_default>:
}
    c830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c834:	4770      	bx	lr

0000c836 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c836:	2806      	cmp	r0, #6
    c838:	d108      	bne.n	c84c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c83a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c83e:	2201      	movs	r2, #1
    c840:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c844:	f3bf 8f4f 	dsb	sy
        __WFE();
    c848:	bf20      	wfe
    while (true)
    c84a:	e7fd      	b.n	c848 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c84c:	4770      	bx	lr

0000c84e <pm_state_exit_post_ops>:
    c84e:	2300      	movs	r3, #0
    c850:	f383 8811 	msr	BASEPRI, r3
    c854:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c858:	4770      	bx	lr

0000c85a <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    c85a:	7081      	strb	r1, [r0, #2]
}
    c85c:	4770      	bx	lr

0000c85e <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    c85e:	2000      	movs	r0, #0
    c860:	4770      	bx	lr

0000c862 <z_log_msg_static_create.constprop.0>:
    c862:	2300      	movs	r3, #0
    c864:	f7f6 ba54 	b.w	2d10 <z_impl_z_log_msg_static_create>

0000c868 <hid_clear_idle_ctx>:
		dev_data->sof_cnt[i] = 0U;
    c868:	2300      	movs	r3, #0
    c86a:	60c3      	str	r3, [r0, #12]
	dev_data->idle_on = false;
    c86c:	8203      	strh	r3, [r0, #16]
}
    c86e:	4770      	bx	lr

0000c870 <hid_sof_handler>:
{
    c870:	b410      	push	{r4}
	if (dev_data->ops == NULL || dev_data->ops->on_idle == NULL) {
    c872:	6884      	ldr	r4, [r0, #8]
{
    c874:	4603      	mov	r3, r0
	if (dev_data->ops == NULL || dev_data->ops->on_idle == NULL) {
    c876:	b174      	cbz	r4, c896 <hid_sof_handler+0x26>
    c878:	68e2      	ldr	r2, [r4, #12]
    c87a:	b162      	cbz	r2, c896 <hid_sof_handler+0x26>
		if (dev_data->idle_rate[i]) {
    c87c:	7c5a      	ldrb	r2, [r3, #17]
	const struct device *dev = dev_data->common.dev;
    c87e:	6980      	ldr	r0, [r0, #24]
		if (dev_data->idle_rate[i]) {
    c880:	b14a      	cbz	r2, c896 <hid_sof_handler+0x26>
			dev_data->sof_cnt[i]++;
    c882:	68d9      	ldr	r1, [r3, #12]
    c884:	3101      	adds	r1, #1
		int32_t diff = abs((int32_t) ((uint32_t) dev_data->idle_rate[i] * 4U -
    c886:	ebc1 0282 	rsb	r2, r1, r2, lsl #2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    c88a:	2a00      	cmp	r2, #0
    c88c:	bfb8      	it	lt
    c88e:	4252      	neglt	r2, r2
		if (diff < 2 && reported == false) {
    c890:	2a01      	cmp	r2, #1
    c892:	dd02      	ble.n	c89a <hid_sof_handler+0x2a>
			dev_data->sof_cnt[i]++;
    c894:	60d9      	str	r1, [r3, #12]
}
    c896:	bc10      	pop	{r4}
    c898:	4770      	bx	lr
			dev_data->sof_cnt[i] = 0U;
    c89a:	2200      	movs	r2, #0
    c89c:	60da      	str	r2, [r3, #12]
			dev_data->ops->on_idle(dev, i + 1);
    c89e:	68e3      	ldr	r3, [r4, #12]
}
    c8a0:	bc10      	pop	{r4}
			dev_data->ops->on_idle(dev, i + 1);
    c8a2:	2101      	movs	r1, #1
    c8a4:	4718      	bx	r3

0000c8a6 <usb_hid_set_proto_code>:
	struct usb_if_descriptor *if_desc = cfg->interface_descriptor;
    c8a6:	6843      	ldr	r3, [r0, #4]
    c8a8:	685b      	ldr	r3, [r3, #4]
}
    c8aa:	2000      	movs	r0, #0
		if_desc->bInterfaceProtocol = proto_code;
    c8ac:	71d9      	strb	r1, [r3, #7]
}
    c8ae:	4770      	bx	lr

0000c8b0 <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    c8b0:	6903      	ldr	r3, [r0, #16]
    c8b2:	6842      	ldr	r2, [r0, #4]
    c8b4:	685b      	ldr	r3, [r3, #4]
    c8b6:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    c8b8:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    c8ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c8be:	7453      	strb	r3, [r2, #17]
}
    c8c0:	2000      	movs	r0, #0
    c8c2:	4770      	bx	lr

0000c8c4 <ep_ctx_reset>:
{
    c8c4:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    c8c6:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    c8c8:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    c8cc:	2300      	movs	r3, #0
    c8ce:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    c8d0:	7f83      	ldrb	r3, [r0, #30]
{
    c8d2:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    c8d4:	b113      	cbz	r3, c8dc <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    c8d6:	7a40      	ldrb	r0, [r0, #9]
    c8d8:	f000 fb3c 	bl	cf54 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    c8dc:	2301      	movs	r3, #1
    c8de:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    c8e0:	2300      	movs	r3, #0
    c8e2:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    c8e4:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    c8e6:	77a3      	strb	r3, [r4, #30]
}
    c8e8:	bd10      	pop	{r4, pc}

0000c8ea <z_log_msg_static_create.constprop.0>:
    c8ea:	2300      	movs	r3, #0
    c8ec:	f7f6 ba10 	b.w	2d10 <z_impl_z_log_msg_static_create>

0000c8f0 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    c8f0:	f7fd bc18 	b.w	a124 <z_impl_k_mutex_lock>

0000c8f4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    c8f4:	f7fd bc90 	b.w	a218 <z_impl_k_mutex_unlock>

0000c8f8 <usb_dc_ep_disable>:
{
    c8f8:	b538      	push	{r3, r4, r5, lr}
    c8fa:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    c8fc:	f7f9 f9ce 	bl	5c9c <endpoint_ctx>
	if (!ep_ctx) {
    c900:	4605      	mov	r5, r0
    c902:	b160      	cbz	r0, c91e <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    c904:	7a03      	ldrb	r3, [r0, #8]
    c906:	b16b      	cbz	r3, c924 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c908:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    c90a:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c90c:	f7fd f858 	bl	99c0 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    c910:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    c912:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    c914:	f7ff ffd6 	bl	c8c4 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    c918:	722c      	strb	r4, [r5, #8]
	return 0;
    c91a:	4620      	mov	r0, r4
}
    c91c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c91e:	f06f 0015 	mvn.w	r0, #21
    c922:	e7fb      	b.n	c91c <usb_dc_ep_disable+0x24>
		return -EALREADY;
    c924:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c928:	e7f8      	b.n	c91c <usb_dc_ep_disable+0x24>

0000c92a <usb_dc_ep_read>:
{
    c92a:	b570      	push	{r4, r5, r6, lr}
    c92c:	4604      	mov	r4, r0
    c92e:	460e      	mov	r6, r1
    c930:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    c932:	f7f9 ffdd 	bl	68f0 <usb_dc_ep_read_wait>
	if (ret) {
    c936:	b930      	cbnz	r0, c946 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    c938:	b906      	cbnz	r6, c93c <usb_dc_ep_read+0x12>
    c93a:	b125      	cbz	r5, c946 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    c93c:	4620      	mov	r0, r4
}
    c93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    c942:	f7fa b83b 	b.w	69bc <usb_dc_ep_read_continue>
}
    c946:	bd70      	pop	{r4, r5, r6, pc}

0000c948 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    c948:	6903      	ldr	r3, [r0, #16]
    c94a:	b2c9      	uxtb	r1, r1
    c94c:	220c      	movs	r2, #12
    c94e:	fb01 3302 	mla	r3, r1, r2, r3
    c952:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    c954:	f000 0007 	and.w	r0, r0, #7
    c958:	4770      	bx	lr

0000c95a <set_on_state>:
	__asm__ volatile(
    c95a:	f04f 0320 	mov.w	r3, #32
    c95e:	f3ef 8211 	mrs	r2, BASEPRI
    c962:	f383 8812 	msr	BASEPRI_MAX, r3
    c966:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c96a:	6803      	ldr	r3, [r0, #0]
    c96c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c970:	f043 0302 	orr.w	r3, r3, #2
    c974:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c976:	f382 8811 	msr	BASEPRI, r2
    c97a:	f3bf 8f6f 	isb	sy
}
    c97e:	4770      	bx	lr

0000c980 <stop>:
{
    c980:	b570      	push	{r4, r5, r6, lr}
    c982:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    c984:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    c986:	f04f 0420 	mov.w	r4, #32
    c98a:	f3ef 8511 	mrs	r5, BASEPRI
    c98e:	f384 8812 	msr	BASEPRI_MAX, r4
    c992:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c996:	260c      	movs	r6, #12
    c998:	fb06 3401 	mla	r4, r6, r1, r3
    c99c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c99e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    c9a2:	d008      	beq.n	c9b6 <stop+0x36>
    c9a4:	42a2      	cmp	r2, r4
    c9a6:	d006      	beq.n	c9b6 <stop+0x36>
	__asm__ volatile(
    c9a8:	f385 8811 	msr	BASEPRI, r5
    c9ac:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    c9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c9b4:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c9b6:	4371      	muls	r1, r6
    c9b8:	440b      	add	r3, r1
    c9ba:	2201      	movs	r2, #1
    c9bc:	641a      	str	r2, [r3, #64]	; 0x40
    c9be:	f385 8811 	msr	BASEPRI, r5
    c9c2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    c9c6:	6843      	ldr	r3, [r0, #4]
    c9c8:	440b      	add	r3, r1
    c9ca:	685b      	ldr	r3, [r3, #4]
    c9cc:	4798      	blx	r3
	return 0;
    c9ce:	2000      	movs	r0, #0
    c9d0:	e7f0      	b.n	c9b4 <stop+0x34>

0000c9d2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    c9d2:	2280      	movs	r2, #128	; 0x80
    c9d4:	f7ff bfd4 	b.w	c980 <stop>

0000c9d8 <async_start>:
{
    c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9da:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    c9dc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    c9de:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    c9e0:	f04f 0520 	mov.w	r5, #32
    c9e4:	f3ef 8611 	mrs	r6, BASEPRI
    c9e8:	f385 8812 	msr	BASEPRI_MAX, r5
    c9ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c9f0:	250c      	movs	r5, #12
    c9f2:	4369      	muls	r1, r5
    c9f4:	440c      	add	r4, r1
    c9f6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c9f8:	f005 0c07 	and.w	ip, r5, #7
    c9fc:	f1bc 0f01 	cmp.w	ip, #1
    ca00:	d10b      	bne.n	ca1a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ca02:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    ca04:	f386 8811 	msr	BASEPRI, r6
    ca08:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    ca0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    ca10:	6843      	ldr	r3, [r0, #4]
    ca12:	585b      	ldr	r3, [r3, r1]
    ca14:	4798      	blx	r3
	return 0;
    ca16:	2000      	movs	r0, #0
}
    ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ca1a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ca1e:	42af      	cmp	r7, r5
    ca20:	f386 8811 	msr	BASEPRI, r6
    ca24:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    ca28:	bf0c      	ite	eq
    ca2a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    ca2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ca32:	e7f1      	b.n	ca18 <async_start+0x40>

0000ca34 <api_start>:
{
    ca34:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ca36:	2480      	movs	r4, #128	; 0x80
    ca38:	9400      	str	r4, [sp, #0]
    ca3a:	f7ff ffcd 	bl	c9d8 <async_start>
}
    ca3e:	b002      	add	sp, #8
    ca40:	bd10      	pop	{r4, pc}

0000ca42 <onoff_started_callback>:
{
    ca42:	b410      	push	{r4}
	return &data->mgr[type];
    ca44:	6900      	ldr	r0, [r0, #16]
    ca46:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    ca48:	241c      	movs	r4, #28
    ca4a:	fb03 0004 	mla	r0, r3, r4, r0
    ca4e:	2100      	movs	r1, #0
}
    ca50:	bc10      	pop	{r4}
	notify(mgr, 0);
    ca52:	4710      	bx	r2

0000ca54 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ca54:	2000      	movs	r0, #0
    ca56:	f000 b8ef 	b.w	cc38 <nrfx_clock_start>

0000ca5a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ca5a:	2000      	movs	r0, #0
    ca5c:	f000 b928 	b.w	ccb0 <nrfx_clock_stop>

0000ca60 <blocking_start_callback>:
{
    ca60:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    ca62:	f7fd bc49 	b.w	a2f8 <z_impl_k_sem_give>

0000ca66 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ca66:	6843      	ldr	r3, [r0, #4]
    ca68:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ca6a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ca6e:	600b      	str	r3, [r1, #0]
}
    ca70:	2000      	movs	r0, #0
    ca72:	4770      	bx	lr

0000ca74 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ca74:	6843      	ldr	r3, [r0, #4]
    ca76:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    ca78:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    ca7c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    ca80:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    ca84:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    ca88:	2000      	movs	r0, #0
    ca8a:	4770      	bx	lr

0000ca8c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ca8c:	6843      	ldr	r3, [r0, #4]
    ca8e:	685b      	ldr	r3, [r3, #4]
}
    ca90:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    ca92:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    ca96:	4770      	bx	lr

0000ca98 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ca98:	6843      	ldr	r3, [r0, #4]
    ca9a:	685b      	ldr	r3, [r3, #4]
}
    ca9c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    ca9e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    caa2:	4770      	bx	lr

0000caa4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    caa4:	6843      	ldr	r3, [r0, #4]
    caa6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    caa8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    caac:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    cab0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    cab2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    cab6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    caba:	2000      	movs	r0, #0
    cabc:	4770      	bx	lr

0000cabe <gpio_nrfx_manage_callback>:
{
    cabe:	b510      	push	{r4, lr}
	return port->data;
    cac0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    cac2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    cac4:	b1f8      	cbz	r0, cb06 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cac6:	4288      	cmp	r0, r1
    cac8:	d119      	bne.n	cafe <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    caca:	689c      	ldr	r4, [r3, #8]
	return node->next;
    cacc:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    cace:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    cad0:	42a1      	cmp	r1, r4
    cad2:	d100      	bne.n	cad6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cad4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    cad6:	2000      	movs	r0, #0
    cad8:	6008      	str	r0, [r1, #0]
	if (set) {
    cada:	b12a      	cbz	r2, cae8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    cadc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    cade:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    cae0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    cae2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    cae4:	b902      	cbnz	r2, cae8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    cae6:	6099      	str	r1, [r3, #8]
	return 0;
    cae8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    caea:	e010      	b.n	cb0e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    caec:	4281      	cmp	r1, r0
    caee:	d106      	bne.n	cafe <gpio_nrfx_manage_callback+0x40>
	return node->next;
    caf0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    caf2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    caf4:	6898      	ldr	r0, [r3, #8]
    caf6:	4281      	cmp	r1, r0
    caf8:	d1ed      	bne.n	cad6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cafa:	609c      	str	r4, [r3, #8]
}
    cafc:	e7eb      	b.n	cad6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    cafe:	4604      	mov	r4, r0
    cb00:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cb02:	2800      	cmp	r0, #0
    cb04:	d1f2      	bne.n	caec <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    cb06:	2a00      	cmp	r2, #0
    cb08:	d1e8      	bne.n	cadc <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    cb0a:	f06f 0015 	mvn.w	r0, #21
}
    cb0e:	bd10      	pop	{r4, pc}

0000cb10 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    cb10:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    cb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    cb16:	2908      	cmp	r1, #8
    cb18:	6e13      	ldr	r3, [r2, #96]	; 0x60
    cb1a:	6e52      	ldr	r2, [r2, #100]	; 0x64
    cb1c:	bf28      	it	cs
    cb1e:	2108      	movcs	r1, #8
    cb20:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    cb22:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    cb24:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    cb26:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    cb28:	460a      	mov	r2, r1
    cb2a:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    cb2c:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    cb2e:	f7ff fe6b 	bl	c808 <memcpy>

	return length;
}
    cb32:	4620      	mov	r0, r4
    cb34:	b002      	add	sp, #8
    cb36:	bd10      	pop	{r4, pc}

0000cb38 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    cb38:	2200      	movs	r2, #0
    cb3a:	2101      	movs	r1, #1
    cb3c:	2003      	movs	r0, #3
    cb3e:	f7f8 b8bb 	b.w	4cb8 <z_arm_irq_priority_set>

0000cb42 <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    cb42:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    cb44:	2100      	movs	r1, #0
    cb46:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    cb48:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    cb4a:	f000 f80a 	bl	cb62 <pinctrl_lookup_state>
	if (ret < 0) {
    cb4e:	2800      	cmp	r0, #0
    cb50:	db05      	blt.n	cb5e <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    cb52:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    cb54:	6822      	ldr	r2, [r4, #0]
    cb56:	7919      	ldrb	r1, [r3, #4]
    cb58:	6818      	ldr	r0, [r3, #0]
    cb5a:	f7fa fc67 	bl	742c <pinctrl_configure_pins>
}
    cb5e:	b002      	add	sp, #8
    cb60:	bd10      	pop	{r4, pc}

0000cb62 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    cb62:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    cb64:	6843      	ldr	r3, [r0, #4]
    cb66:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    cb68:	7a05      	ldrb	r5, [r0, #8]
    cb6a:	6844      	ldr	r4, [r0, #4]
    cb6c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    cb70:	42a3      	cmp	r3, r4
    cb72:	d302      	bcc.n	cb7a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    cb74:	f06f 0001 	mvn.w	r0, #1
}
    cb78:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    cb7a:	795c      	ldrb	r4, [r3, #5]
    cb7c:	428c      	cmp	r4, r1
    cb7e:	d001      	beq.n	cb84 <pinctrl_lookup_state+0x22>
		(*state)++;
    cb80:	3308      	adds	r3, #8
    cb82:	e7f0      	b.n	cb66 <pinctrl_lookup_state+0x4>
			return 0;
    cb84:	2000      	movs	r0, #0
    cb86:	e7f7      	b.n	cb78 <pinctrl_lookup_state+0x16>

0000cb88 <as5600_get>:
{
    cb88:	b510      	push	{r4, lr}
	if (chan == SENSOR_CHAN_ROTATION) {
    cb8a:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    cb8c:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    cb8e:	d10c      	bne.n	cbaa <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    cb90:	8823      	ldrh	r3, [r4, #0]
    cb92:	f44f 70b4 	mov.w	r0, #360	; 0x168
    cb96:	4343      	muls	r3, r0
    cb98:	131b      	asrs	r3, r3, #12
    cb9a:	6013      	str	r3, [r2, #0]
		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    cb9c:	8821      	ldrh	r1, [r4, #0]
    cb9e:	4341      	muls	r1, r0
    cba0:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    cba4:	6053      	str	r3, [r2, #4]
	return 0;
    cba6:	2000      	movs	r0, #0
}
    cba8:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    cbaa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    cbae:	e7fb      	b.n	cba8 <as5600_get+0x20>

0000cbb0 <as5600_fetch>:
{
    cbb0:	b530      	push	{r4, r5, lr}
    cbb2:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    cbb4:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    cbb6:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    cbb8:	6818      	ldr	r0, [r3, #0]
    cbba:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    cbbc:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    cbbe:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    cbc0:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    cbc4:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    cbc8:	f8ad 2004 	strh.w	r2, [sp, #4]
    cbcc:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    cbce:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    cbd2:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    cbd4:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    cbd6:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    cbd8:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    cbda:	2107      	movs	r1, #7
	msg[1].len = num_read;
    cbdc:	2202      	movs	r2, #2
    cbde:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    cbe0:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    cbe4:	6881      	ldr	r1, [r0, #8]
    cbe6:	688d      	ldr	r5, [r1, #8]
    cbe8:	a902      	add	r1, sp, #8
    cbea:	47a8      	blx	r5
	if (!err) {
    cbec:	b918      	cbnz	r0, cbf6 <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    cbee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cbf2:	ba5b      	rev16	r3, r3
    cbf4:	8023      	strh	r3, [r4, #0]
}
    cbf6:	b009      	add	sp, #36	; 0x24
    cbf8:	bd30      	pop	{r4, r5, pc}

0000cbfa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    cbfa:	4770      	bx	lr

0000cbfc <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    cbfc:	f100 0350 	add.w	r3, r0, #80	; 0x50
    cc00:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cc02:	b29b      	uxth	r3, r3
    cc04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cc08:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    cc0c:	2200      	movs	r2, #0
    cc0e:	601a      	str	r2, [r3, #0]
    cc10:	681b      	ldr	r3, [r3, #0]
}
    cc12:	4770      	bx	lr

0000cc14 <sys_clock_cycle_get_32>:
{
    cc14:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    cc16:	f7fa fd5f 	bl	76d8 <z_nrf_rtc_timer_read>
}
    cc1a:	bd08      	pop	{r3, pc}

0000cc1c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    cc1c:	f7fe bace 	b.w	b1bc <nrf_cc3xx_platform_init_no_rng>

0000cc20 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    cc20:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    cc22:	f7f7 fea7 	bl	4974 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    cc26:	f7f7 ff7b 	bl	4b20 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    cc2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    cc2e:	f7fe bac5 	b.w	b1bc <nrf_cc3xx_platform_init_no_rng>

0000cc32 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    cc32:	4700      	bx	r0

0000cc34 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    cc34:	f000 bc4f 	b.w	d4d6 <z_impl_k_busy_wait>

0000cc38 <nrfx_clock_start>:
{
    cc38:	b508      	push	{r3, lr}
    switch (domain)
    cc3a:	b110      	cbz	r0, cc42 <nrfx_clock_start+0xa>
    cc3c:	2801      	cmp	r0, #1
    cc3e:	d02c      	beq.n	cc9a <nrfx_clock_start+0x62>
}
    cc40:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cc42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cc46:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cc4a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    cc4e:	03c8      	lsls	r0, r1, #15
    cc50:	d40b      	bmi.n	cc6a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    cc52:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    cc56:	07d9      	lsls	r1, r3, #31
    cc58:	d50f      	bpl.n	cc7a <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    cc5a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cc5e:	079b      	lsls	r3, r3, #30
    cc60:	d408      	bmi.n	cc74 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    cc62:	2302      	movs	r3, #2
    cc64:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    cc68:	e7ea      	b.n	cc40 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    cc6a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    cc6e:	2b01      	cmp	r3, #1
    cc70:	d004      	beq.n	cc7c <nrfx_clock_start+0x44>
    cc72:	b113      	cbz	r3, cc7a <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cc74:	2000      	movs	r0, #0
    cc76:	f7fb f831 	bl	7cdc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    cc7a:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    cc7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    cc80:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc84:	2300      	movs	r3, #0
    cc86:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    cc8a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    cc8e:	2302      	movs	r3, #2
    cc90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cc94:	2301      	movs	r3, #1
    cc96:	6093      	str	r3, [r2, #8]
}
    cc98:	e7d2      	b.n	cc40 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cc9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cc9e:	2200      	movs	r2, #0
    cca0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cca4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    cca8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ccac:	6018      	str	r0, [r3, #0]
}
    ccae:	e7c7      	b.n	cc40 <nrfx_clock_start+0x8>

0000ccb0 <nrfx_clock_stop>:
    clock_stop(domain);
    ccb0:	f7fb b814 	b.w	7cdc <clock_stop>

0000ccb4 <nrf_gpio_reconfigure>:
{
    ccb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ccb6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ccb8:	a801      	add	r0, sp, #4
{
    ccba:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    ccbe:	4616      	mov	r6, r2
    ccc0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ccc2:	f7fb f8c5 	bl	7e50 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ccc6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    ccc8:	f1b6 0c00 	subs.w	ip, r6, #0
    cccc:	bf18      	it	ne
    ccce:	f04f 0c01 	movne.w	ip, #1
    ccd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ccd6:	1e0b      	subs	r3, r1, #0
    ccd8:	bf18      	it	ne
    ccda:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ccdc:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ccde:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    cce2:	bf14      	ite	ne
    cce4:	f04f 0c0c 	movne.w	ip, #12
    cce8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    ccec:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    ccee:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    ccf2:	bf14      	ite	ne
    ccf4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    ccf8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ccfc:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    ccfe:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    cd02:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    cd06:	bf14      	ite	ne
    cd08:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    cd0c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    cd10:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    cd14:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cd18:	b101      	cbz	r1, cd1c <nrf_gpio_reconfigure+0x68>
    cd1a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    cd1c:	b10e      	cbz	r6, cd22 <nrf_gpio_reconfigure+0x6e>
    cd1e:	7836      	ldrb	r6, [r6, #0]
    cd20:	0076      	lsls	r6, r6, #1
    cd22:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    cd24:	b10d      	cbz	r5, cd2a <nrf_gpio_reconfigure+0x76>
    cd26:	782d      	ldrb	r5, [r5, #0]
    cd28:	00ad      	lsls	r5, r5, #2
    cd2a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    cd2c:	b10c      	cbz	r4, cd32 <nrf_gpio_reconfigure+0x7e>
    cd2e:	7824      	ldrb	r4, [r4, #0]
    cd30:	0224      	lsls	r4, r4, #8
    cd32:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    cd34:	b10f      	cbz	r7, cd3a <nrf_gpio_reconfigure+0x86>
    cd36:	783f      	ldrb	r7, [r7, #0]
    cd38:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    cd3a:	430c      	orrs	r4, r1
    cd3c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    cd3e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    cd42:	b003      	add	sp, #12
    cd44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cd46 <nrf_gpio_cfg_sense_set>:
{
    cd46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    cd48:	f10d 030f 	add.w	r3, sp, #15
    cd4c:	9301      	str	r3, [sp, #4]
    cd4e:	2300      	movs	r3, #0
{
    cd50:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    cd54:	9300      	str	r3, [sp, #0]
    cd56:	461a      	mov	r2, r3
    cd58:	4619      	mov	r1, r3
    cd5a:	f7ff ffab 	bl	ccb4 <nrf_gpio_reconfigure>
}
    cd5e:	b005      	add	sp, #20
    cd60:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd64 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cd64:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    cd68:	681a      	ldr	r2, [r3, #0]
    cd6a:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cd6c:	bf1f      	itttt	ne
    cd6e:	2200      	movne	r2, #0
    cd70:	601a      	strne	r2, [r3, #0]
    cd72:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    cd74:	2001      	movne	r0, #1
    cd76:	bf08      	it	eq
    cd78:	2000      	moveq	r0, #0
}
    cd7a:	4770      	bx	lr

0000cd7c <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    cd7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cd80:	f44f 7260 	mov.w	r2, #896	; 0x380
    cd84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    cd88:	4770      	bx	lr

0000cd8a <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    cd8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cd8e:	f44f 7260 	mov.w	r2, #896	; 0x380
    cd92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    cd96:	4770      	bx	lr

0000cd98 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    cd98:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    cd9a:	f7fb fc11 	bl	85c0 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    cd9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    cda2:	f7fb b821 	b.w	7de8 <nrfx_clock_irq_handler>

0000cda6 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    cda6:	7b0a      	ldrb	r2, [r1, #12]
{
    cda8:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    cdaa:	2a03      	cmp	r2, #3
    cdac:	d829      	bhi.n	ce02 <xfer_completeness_check+0x5c>
    cdae:	e8df f002 	tbb	[pc, r2]
    cdb2:	2521      	.short	0x2521
    cdb4:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    cdb6:	688a      	ldr	r2, [r1, #8]
    cdb8:	0350      	lsls	r0, r2, #13
    cdba:	d504      	bpl.n	cdc6 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    cdbc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    cdc0:	6908      	ldr	r0, [r1, #16]
    cdc2:	4290      	cmp	r0, r2
    cdc4:	d107      	bne.n	cdd6 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    cdc6:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    cdc8:	0352      	lsls	r2, r2, #13
    cdca:	d41a      	bmi.n	ce02 <xfer_completeness_check+0x5c>
    cdcc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    cdd0:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    cdd2:	4291      	cmp	r1, r2
    cdd4:	d015      	beq.n	ce02 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    cdd6:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    cdd8:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    cdda:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    cdde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    cde2:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    cde4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    cde8:	6908      	ldr	r0, [r1, #16]
    cdea:	4290      	cmp	r0, r2
    cdec:	d1f3      	bne.n	cdd6 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    cdee:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    cdf2:	e7ed      	b.n	cdd0 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    cdf4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    cdf8:	6909      	ldr	r1, [r1, #16]
    cdfa:	e7ea      	b.n	cdd2 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    cdfc:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    ce00:	e7fa      	b.n	cdf8 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    ce02:	2001      	movs	r0, #1
}
    ce04:	4770      	bx	lr

0000ce06 <nrfx_usbd_consumer>:
{
    ce06:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    ce08:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    ce0a:	429c      	cmp	r4, r3
    ce0c:	d209      	bcs.n	ce22 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    ce0e:	2500      	movs	r5, #0
    ce10:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    ce12:	6809      	ldr	r1, [r1, #0]
    ce14:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    ce16:	429a      	cmp	r2, r3
    ce18:	d10c      	bne.n	ce34 <nrfx_usbd_consumer+0x2e>
    ce1a:	1e20      	subs	r0, r4, #0
    ce1c:	bf18      	it	ne
    ce1e:	2001      	movne	r0, #1
}
    ce20:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    ce22:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    ce24:	680d      	ldr	r5, [r1, #0]
    ce26:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    ce28:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    ce2a:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    ce2c:	4418      	add	r0, r3
        p_transfer->size = size;
    ce2e:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    ce30:	6008      	str	r0, [r1, #0]
    ce32:	e7f0      	b.n	ce16 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    ce34:	2000      	movs	r0, #0
    ce36:	e7f3      	b.n	ce20 <nrfx_usbd_consumer+0x1a>

0000ce38 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    ce38:	684b      	ldr	r3, [r1, #4]
    ce3a:	429a      	cmp	r2, r3
    ce3c:	bf28      	it	cs
    ce3e:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    ce40:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    ce42:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    ce46:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ce48:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    ce4a:	1a80      	subs	r0, r0, r2
    ce4c:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ce4e:	4413      	add	r3, r2
}
    ce50:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    ce52:	600b      	str	r3, [r1, #0]
}
    ce54:	bf18      	it	ne
    ce56:	2001      	movne	r0, #1
    ce58:	4770      	bx	lr

0000ce5a <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    ce5a:	684b      	ldr	r3, [r1, #4]
    ce5c:	429a      	cmp	r2, r3
    ce5e:	bf28      	it	cs
    ce60:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ce62:	b162      	cbz	r2, ce7e <nrfx_usbd_feeder_ram_zlp+0x24>
    ce64:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    ce66:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    ce6a:	684b      	ldr	r3, [r1, #4]
    ce6c:	1a9b      	subs	r3, r3, r2
    ce6e:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    ce70:	680b      	ldr	r3, [r1, #0]
}
    ce72:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    ce74:	4413      	add	r3, r2
    ce76:	600b      	str	r3, [r1, #0]
}
    ce78:	bf18      	it	ne
    ce7a:	2001      	movne	r0, #1
    ce7c:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    ce7e:	4613      	mov	r3, r2
    ce80:	e7f1      	b.n	ce66 <nrfx_usbd_feeder_ram_zlp+0xc>

0000ce82 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    ce82:	43c3      	mvns	r3, r0
    ce84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    ce88:	f000 000f 	and.w	r0, r0, #15
}
    ce8c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    ce90:	4770      	bx	lr

0000ce92 <ev_started_handler>:
}
    ce92:	4770      	bx	lr

0000ce94 <nrf_usbd_epin_dma_handler>:
{
    ce94:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    ce96:	f7fb ffdb 	bl	8e50 <usbd_dma_pending_clear>
{
    ce9a:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    ce9c:	f7fb fece 	bl	8c3c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    cea0:	7b83      	ldrb	r3, [r0, #14]
    cea2:	2b03      	cmp	r3, #3
    cea4:	d10a      	bne.n	cebc <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    cea6:	4608      	mov	r0, r1
    cea8:	f7ff ffeb 	bl	ce82 <ep2bit>
    ceac:	2301      	movs	r3, #1
    ceae:	fa03 f000 	lsl.w	r0, r3, r0
    ceb2:	43c0      	mvns	r0, r0
}
    ceb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    ceb8:	f7fb bfba 	b.w	8e30 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    cebc:	6803      	ldr	r3, [r0, #0]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d0f1      	beq.n	cea6 <nrf_usbd_epin_dma_handler+0x12>
}
    cec2:	bd08      	pop	{r3, pc}

0000cec4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    cec4:	2087      	movs	r0, #135	; 0x87
    cec6:	f7ff bfe5 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000ceca <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    ceca:	2086      	movs	r0, #134	; 0x86
    cecc:	f7ff bfe2 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000ced0 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    ced0:	2085      	movs	r0, #133	; 0x85
    ced2:	f7ff bfdf 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000ced6 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    ced6:	2084      	movs	r0, #132	; 0x84
    ced8:	f7ff bfdc 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000cedc <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    cedc:	2083      	movs	r0, #131	; 0x83
    cede:	f7ff bfd9 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000cee2 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    cee2:	2082      	movs	r0, #130	; 0x82
    cee4:	f7ff bfd6 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000cee8 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    cee8:	2081      	movs	r0, #129	; 0x81
    ceea:	f7ff bfd3 	b.w	ce94 <nrf_usbd_epin_dma_handler>

0000ceee <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    ceee:	f7fb bfc1 	b.w	8e74 <nrf_usbd_ep0in_dma_handler>

0000cef2 <nrfx_usbd_ep_max_packet_size_set>:
{
    cef2:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    cef4:	f7fb fea2 	bl	8c3c <ep_state_access>
    p_state->max_packet_size = size;
    cef8:	8181      	strh	r1, [r0, #12]
}
    cefa:	bd08      	pop	{r3, pc}

0000cefc <nrfx_usbd_ep_status_get>:
{
    cefc:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    cefe:	f7fb fe9d 	bl	8c3c <ep_state_access>
	__asm__ volatile(
    cf02:	f04f 0220 	mov.w	r2, #32
    cf06:	f3ef 8311 	mrs	r3, BASEPRI
    cf0a:	f382 8812 	msr	BASEPRI_MAX, r2
    cf0e:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    cf12:	6882      	ldr	r2, [r0, #8]
    cf14:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    cf16:	6802      	ldr	r2, [r0, #0]
    cf18:	b92a      	cbnz	r2, cf26 <nrfx_usbd_ep_status_get+0x2a>
    cf1a:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    cf1c:	f383 8811 	msr	BASEPRI, r3
    cf20:	f3bf 8f6f 	isb	sy
}
    cf24:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    cf26:	2004      	movs	r0, #4
    cf28:	e7f8      	b.n	cf1c <nrfx_usbd_ep_status_get+0x20>

0000cf2a <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    cf2a:	2007      	movs	r0, #7
    cf2c:	f7fc bb0e 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf30 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    cf30:	2006      	movs	r0, #6
    cf32:	f7fc bb0b 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf36 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    cf36:	2005      	movs	r0, #5
    cf38:	f7fc bb08 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf3c <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    cf3c:	2004      	movs	r0, #4
    cf3e:	f7fc bb05 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf42 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    cf42:	2003      	movs	r0, #3
    cf44:	f7fc bb02 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf48 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    cf48:	2002      	movs	r0, #2
    cf4a:	f7fc baff 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf4e <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    cf4e:	2001      	movs	r0, #1
    cf50:	f7fc bafc 	b.w	954c <nrf_usbd_epout_dma_handler>

0000cf54 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    cf54:	f7fc bbf0 	b.w	9738 <usbd_ep_abort>

0000cf58 <nrf_gpio_pin_set>:
{
    cf58:	b507      	push	{r0, r1, r2, lr}
    cf5a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    cf5c:	a801      	add	r0, sp, #4
    cf5e:	f7fc fdbf 	bl	9ae0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    cf62:	9a01      	ldr	r2, [sp, #4]
    cf64:	2301      	movs	r3, #1
    cf66:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    cf68:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    cf6c:	b003      	add	sp, #12
    cf6e:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf72 <z_device_state_init>:
}
    cf72:	4770      	bx	lr

0000cf74 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    cf74:	b140      	cbz	r0, cf88 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    cf76:	68c3      	ldr	r3, [r0, #12]
    cf78:	7858      	ldrb	r0, [r3, #1]
    cf7a:	f010 0001 	ands.w	r0, r0, #1
    cf7e:	bf1e      	ittt	ne
    cf80:	7818      	ldrbne	r0, [r3, #0]
    cf82:	fab0 f080 	clzne	r0, r0
    cf86:	0940      	lsrne	r0, r0, #5
}
    cf88:	4770      	bx	lr

0000cf8a <z_early_memset>:
	(void) memset(dst, c, n);
    cf8a:	f7ff bc48 	b.w	c81e <memset>

0000cf8e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    cf8e:	f7ff bc3b 	b.w	c808 <memcpy>

0000cf92 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    cf92:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    cf96:	4313      	orrs	r3, r2
    cf98:	f013 0303 	ands.w	r3, r3, #3
    cf9c:	d10c      	bne.n	cfb8 <create_free_list+0x26>
	slab->free_list = NULL;
    cf9e:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    cfa0:	6881      	ldr	r1, [r0, #8]
    cfa2:	4299      	cmp	r1, r3
    cfa4:	d801      	bhi.n	cfaa <create_free_list+0x18>
	return 0;
    cfa6:	2000      	movs	r0, #0
    cfa8:	4770      	bx	lr
		*(char **)p = slab->free_list;
    cfaa:	6941      	ldr	r1, [r0, #20]
    cfac:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    cfae:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    cfb0:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    cfb2:	3301      	adds	r3, #1
		p += slab->block_size;
    cfb4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    cfb6:	e7f3      	b.n	cfa0 <create_free_list+0xe>
		return -EINVAL;
    cfb8:	f06f 0015 	mvn.w	r0, #21
}
    cfbc:	4770      	bx	lr

0000cfbe <k_mem_slab_init>:
{
    cfbe:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    cfc0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    cfc4:	2300      	movs	r3, #0
	slab->buffer = buffer;
    cfc6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    cfc8:	6183      	str	r3, [r0, #24]
{
    cfca:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    cfcc:	f7ff ffe1 	bl	cf92 <create_free_list>
	if (rc < 0) {
    cfd0:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    cfd2:	bfa8      	it	ge
    cfd4:	e9c4 4400 	strdge	r4, r4, [r4]
}
    cfd8:	bd10      	pop	{r4, pc}

0000cfda <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    cfda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfdc:	4604      	mov	r4, r0
    cfde:	460d      	mov	r5, r1
	__asm__ volatile(
    cfe0:	f04f 0320 	mov.w	r3, #32
    cfe4:	f3ef 8611 	mrs	r6, BASEPRI
    cfe8:	f383 8812 	msr	BASEPRI_MAX, r3
    cfec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    cff0:	6947      	ldr	r7, [r0, #20]
    cff2:	b977      	cbnz	r7, d012 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    cff4:	f000 f9c6 	bl	d384 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    cff8:	b158      	cbz	r0, d012 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    cffa:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    cffc:	6142      	str	r2, [r0, #20]
    cffe:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    d000:	f000 f961 	bl	d2c6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    d004:	4631      	mov	r1, r6
    d006:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    d00a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    d00e:	f7fd bcbf 	b.w	a990 <z_reschedule>
	**(char ***) mem = slab->free_list;
    d012:	682b      	ldr	r3, [r5, #0]
    d014:	6962      	ldr	r2, [r4, #20]
    d016:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    d018:	682b      	ldr	r3, [r5, #0]
    d01a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    d01c:	69a3      	ldr	r3, [r4, #24]
    d01e:	3b01      	subs	r3, #1
    d020:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    d022:	f386 8811 	msr	BASEPRI, r6
    d026:	f3bf 8f6f 	isb	sy
}
    d02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d02c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d02c:	f3ef 8005 	mrs	r0, IPSR
}
    d030:	3800      	subs	r0, #0
    d032:	bf18      	it	ne
    d034:	2001      	movne	r0, #1
    d036:	4770      	bx	lr

0000d038 <z_impl_k_thread_name_set>:
}
    d038:	f06f 0057 	mvn.w	r0, #87	; 0x57
    d03c:	4770      	bx	lr

0000d03e <k_thread_name_get>:
}
    d03e:	2000      	movs	r0, #0
    d040:	4770      	bx	lr

0000d042 <z_impl_k_thread_start>:
	z_sched_start(thread);
    d042:	f7fd bcb7 	b.w	a9b4 <z_sched_start>

0000d046 <z_pm_save_idle_exit>:
{
    d046:	b508      	push	{r3, lr}
	pm_system_resume();
    d048:	f7f6 f97e 	bl	3348 <pm_system_resume>
}
    d04c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    d050:	f7ff bdd3 	b.w	cbfa <sys_clock_idle_exit>

0000d054 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    d054:	f990 300e 	ldrsb.w	r3, [r0, #14]
    d058:	428b      	cmp	r3, r1
    d05a:	d001      	beq.n	d060 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    d05c:	f7fd bc52 	b.w	a904 <z_set_prio>
}
    d060:	2000      	movs	r0, #0
    d062:	4770      	bx	lr

0000d064 <z_impl_k_mutex_init>:
{
    d064:	4603      	mov	r3, r0
	mutex->owner = NULL;
    d066:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    d068:	e9c3 0002 	strd	r0, r0, [r3, #8]
    d06c:	e9c3 3300 	strd	r3, r3, [r3]
}
    d070:	4770      	bx	lr

0000d072 <queue_insert>:
{
    d072:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d076:	4699      	mov	r9, r3
    d078:	4604      	mov	r4, r0
    d07a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d07e:	460d      	mov	r5, r1
    d080:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    d082:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    d086:	f04f 0220 	mov.w	r2, #32
    d08a:	f3ef 8711 	mrs	r7, BASEPRI
    d08e:	f382 8812 	msr	BASEPRI_MAX, r2
    d092:	f3bf 8f6f 	isb	sy
	if (is_append) {
    d096:	b103      	cbz	r3, d09a <queue_insert+0x28>
	return list->tail;
    d098:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    d09a:	4630      	mov	r0, r6
    d09c:	f000 f972 	bl	d384 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    d0a0:	b158      	cbz	r0, d0ba <queue_insert+0x48>
    d0a2:	2300      	movs	r3, #0
    d0a4:	6783      	str	r3, [r0, #120]	; 0x78
    d0a6:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    d0aa:	f000 f90c 	bl	d2c6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    d0ae:	4630      	mov	r0, r6
    d0b0:	4639      	mov	r1, r7
    d0b2:	f7fd fc6d 	bl	a990 <z_reschedule>
		return 0;
    d0b6:	2000      	movs	r0, #0
    d0b8:	e00c      	b.n	d0d4 <queue_insert+0x62>
	if (alloc) {
    d0ba:	f1b9 0f00 	cmp.w	r9, #0
    d0be:	d01c      	beq.n	d0fa <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    d0c0:	2108      	movs	r1, #8
    d0c2:	f7fe f829 	bl	b118 <z_thread_aligned_alloc>
		if (anode == NULL) {
    d0c6:	b938      	cbnz	r0, d0d8 <queue_insert+0x66>
	__asm__ volatile(
    d0c8:	f387 8811 	msr	BASEPRI, r7
    d0cc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    d0d0:	f06f 000b 	mvn.w	r0, #11
}
    d0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    d0d8:	2201      	movs	r2, #1
		anode->data = data;
    d0da:	f8c0 8004 	str.w	r8, [r0, #4]
    d0de:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d0e0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d0e2:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    d0e6:	b965      	cbnz	r5, d102 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d0e8:	6822      	ldr	r2, [r4, #0]
    d0ea:	430a      	orrs	r2, r1
    d0ec:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d0ee:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    d0f0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d0f2:	2a00      	cmp	r2, #0
    d0f4:	d1db      	bne.n	d0ae <queue_insert+0x3c>
	list->tail = node;
    d0f6:	6060      	str	r0, [r4, #4]
}
    d0f8:	e7d9      	b.n	d0ae <queue_insert+0x3c>
	node->next_and_flags = flags;
    d0fa:	f8c8 9000 	str.w	r9, [r8]
}
    d0fe:	4640      	mov	r0, r8
    d100:	e7ee      	b.n	d0e0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d102:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    d104:	2a03      	cmp	r2, #3
    d106:	d80b      	bhi.n	d120 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d108:	6001      	str	r1, [r0, #0]
	return list->tail;
    d10a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    d10c:	b911      	cbnz	r1, d114 <queue_insert+0xa2>
	list->head = node;
    d10e:	e9c4 0000 	strd	r0, r0, [r4]
}
    d112:	e7cc      	b.n	d0ae <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d114:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d116:	f002 0203 	and.w	r2, r2, #3
    d11a:	4302      	orrs	r2, r0
    d11c:	600a      	str	r2, [r1, #0]
    d11e:	e7ea      	b.n	d0f6 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d120:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    d124:	430a      	orrs	r2, r1
    d126:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d128:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d12a:	f002 0203 	and.w	r2, r2, #3
    d12e:	ea40 0302 	orr.w	r3, r0, r2
    d132:	602b      	str	r3, [r5, #0]
}
    d134:	e7bb      	b.n	d0ae <queue_insert+0x3c>

0000d136 <z_queue_node_peek>:
{
    d136:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    d138:	4604      	mov	r4, r0
    d13a:	b130      	cbz	r0, d14a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d13c:	6802      	ldr	r2, [r0, #0]
    d13e:	0793      	lsls	r3, r2, #30
    d140:	d003      	beq.n	d14a <z_queue_node_peek+0x14>
		ret = anode->data;
    d142:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    d144:	b109      	cbz	r1, d14a <z_queue_node_peek+0x14>
			k_free(anode);
    d146:	f000 fa15 	bl	d574 <k_free>
}
    d14a:	4620      	mov	r0, r4
    d14c:	bd10      	pop	{r4, pc}

0000d14e <k_queue_append>:
{
    d14e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    d150:	2301      	movs	r3, #1
    d152:	9300      	str	r3, [sp, #0]
    d154:	2300      	movs	r3, #0
{
    d156:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    d158:	4619      	mov	r1, r3
    d15a:	f7ff ff8a 	bl	d072 <queue_insert>
}
    d15e:	b003      	add	sp, #12
    d160:	f85d fb04 	ldr.w	pc, [sp], #4

0000d164 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    d164:	b13a      	cbz	r2, d176 <z_impl_k_sem_init+0x12>
    d166:	428a      	cmp	r2, r1
    d168:	d305      	bcc.n	d176 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    d16a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    d16e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    d172:	2000      	movs	r0, #0
    d174:	4770      	bx	lr
		return -EINVAL;
    d176:	f06f 0015 	mvn.w	r0, #21
}
    d17a:	4770      	bx	lr

0000d17c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    d17c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    d17e:	2301      	movs	r3, #1
    d180:	408b      	lsls	r3, r1
    d182:	ea22 0303 	bic.w	r3, r2, r3
    d186:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    d188:	fa22 f001 	lsr.w	r0, r2, r1
}
    d18c:	f000 0001 	and.w	r0, r0, #1
    d190:	4770      	bx	lr

0000d192 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    d192:	b120      	cbz	r0, d19e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    d194:	2200      	movs	r2, #0
    d196:	4611      	mov	r1, r2
    d198:	3088      	adds	r0, #136	; 0x88
    d19a:	f000 b94d 	b.w	d438 <z_sched_wake>
}
    d19e:	4770      	bx	lr

0000d1a0 <work_timeout>:
{
    d1a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d1a2:	4604      	mov	r4, r0
	__asm__ volatile(
    d1a4:	f04f 0320 	mov.w	r3, #32
    d1a8:	f3ef 8511 	mrs	r5, BASEPRI
    d1ac:	f383 8812 	msr	BASEPRI_MAX, r3
    d1b0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    d1b4:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    d1b6:	f1a0 0610 	sub.w	r6, r0, #16
    d1ba:	2103      	movs	r1, #3
    d1bc:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    d1be:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    d1c0:	f7ff ffdc 	bl	d17c <flag_test_and_clear>
    d1c4:	b128      	cbz	r0, d1d2 <work_timeout+0x32>
		queue = dw->queue;
    d1c6:	69a3      	ldr	r3, [r4, #24]
    d1c8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    d1ca:	a901      	add	r1, sp, #4
    d1cc:	4630      	mov	r0, r6
    d1ce:	f7fd f977 	bl	a4c0 <submit_to_queue_locked>
	__asm__ volatile(
    d1d2:	f385 8811 	msr	BASEPRI, r5
    d1d6:	f3bf 8f6f 	isb	sy
}
    d1da:	b002      	add	sp, #8
    d1dc:	bd70      	pop	{r4, r5, r6, pc}

0000d1de <k_work_init>:
{
    d1de:	b538      	push	{r3, r4, r5, lr}
    d1e0:	4604      	mov	r4, r0
    d1e2:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d1e4:	2210      	movs	r2, #16
    d1e6:	2100      	movs	r1, #0
    d1e8:	f7ff fb19 	bl	c81e <memset>
    d1ec:	6065      	str	r5, [r4, #4]
}
    d1ee:	bd38      	pop	{r3, r4, r5, pc}

0000d1f0 <z_work_submit_to_queue>:
{
    d1f0:	b513      	push	{r0, r1, r4, lr}
    d1f2:	9001      	str	r0, [sp, #4]
    d1f4:	4608      	mov	r0, r1
	__asm__ volatile(
    d1f6:	f04f 0320 	mov.w	r3, #32
    d1fa:	f3ef 8411 	mrs	r4, BASEPRI
    d1fe:	f383 8812 	msr	BASEPRI_MAX, r3
    d202:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    d206:	a901      	add	r1, sp, #4
    d208:	f7fd f95a 	bl	a4c0 <submit_to_queue_locked>
	__asm__ volatile(
    d20c:	f384 8811 	msr	BASEPRI, r4
    d210:	f3bf 8f6f 	isb	sy
}
    d214:	b002      	add	sp, #8
    d216:	bd10      	pop	{r4, pc}

0000d218 <k_work_submit_to_queue>:
{
    d218:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    d21a:	f7ff ffe9 	bl	d1f0 <z_work_submit_to_queue>
	if (ret > 0) {
    d21e:	1e04      	subs	r4, r0, #0
    d220:	dd09      	ble.n	d236 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    d222:	f04f 0320 	mov.w	r3, #32
    d226:	f3ef 8011 	mrs	r0, BASEPRI
    d22a:	f383 8812 	msr	BASEPRI_MAX, r3
    d22e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d232:	f000 f8db 	bl	d3ec <z_reschedule_irqlock>
}
    d236:	4620      	mov	r0, r4
    d238:	bd10      	pop	{r4, pc}

0000d23a <k_work_init_delayable>:
{
    d23a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    d23c:	2230      	movs	r2, #48	; 0x30
{
    d23e:	4604      	mov	r4, r0
    d240:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    d242:	2100      	movs	r1, #0
    d244:	f7ff faeb 	bl	c81e <memset>
    d248:	f44f 7380 	mov.w	r3, #256	; 0x100
    d24c:	6065      	str	r5, [r4, #4]
    d24e:	60e3      	str	r3, [r4, #12]
}
    d250:	bd38      	pop	{r3, r4, r5, pc}

0000d252 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    d252:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    d256:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d258:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d25a:	2300      	movs	r3, #0
	node->prev = NULL;
    d25c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    d260:	4770      	bx	lr

0000d262 <unpend_thread_no_timeout>:
{
    d262:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    d264:	f7ff fff5 	bl	d252 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d268:	7b43      	ldrb	r3, [r0, #13]
    d26a:	f023 0302 	bic.w	r3, r3, #2
    d26e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    d270:	2300      	movs	r3, #0
    d272:	6083      	str	r3, [r0, #8]
}
    d274:	bd08      	pop	{r3, pc}

0000d276 <add_to_waitq_locked>:
{
    d276:	b538      	push	{r3, r4, r5, lr}
    d278:	4604      	mov	r4, r0
    d27a:	460d      	mov	r5, r1
	unready_thread(thread);
    d27c:	f7fd fac4 	bl	a808 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    d280:	7b63      	ldrb	r3, [r4, #13]
    d282:	f043 0302 	orr.w	r3, r3, #2
    d286:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    d288:	b1e5      	cbz	r5, d2c4 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    d28a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    d28c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d28e:	429d      	cmp	r5, r3
    d290:	d109      	bne.n	d2a6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    d292:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    d294:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    d298:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d29a:	606c      	str	r4, [r5, #4]
}
    d29c:	e012      	b.n	d2c4 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    d29e:	686a      	ldr	r2, [r5, #4]
    d2a0:	4293      	cmp	r3, r2
    d2a2:	d0f6      	beq.n	d292 <add_to_waitq_locked+0x1c>
    d2a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d0f3      	beq.n	d292 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    d2aa:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d2ae:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    d2b2:	428a      	cmp	r2, r1
    d2b4:	d0f3      	beq.n	d29e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d2b6:	4291      	cmp	r1, r2
    d2b8:	ddf1      	ble.n	d29e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    d2ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d2bc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d2c0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d2c2:	605c      	str	r4, [r3, #4]
}
    d2c4:	bd38      	pop	{r3, r4, r5, pc}

0000d2c6 <z_ready_thread>:
{
    d2c6:	b510      	push	{r4, lr}
    d2c8:	f04f 0320 	mov.w	r3, #32
    d2cc:	f3ef 8411 	mrs	r4, BASEPRI
    d2d0:	f383 8812 	msr	BASEPRI_MAX, r3
    d2d4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    d2d8:	f7fd fa62 	bl	a7a0 <ready_thread>
	__asm__ volatile(
    d2dc:	f384 8811 	msr	BASEPRI, r4
    d2e0:	f3bf 8f6f 	isb	sy
}
    d2e4:	bd10      	pop	{r4, pc}

0000d2e6 <z_unpend_thread_no_timeout>:
{
    d2e6:	b508      	push	{r3, lr}
	__asm__ volatile(
    d2e8:	f04f 0220 	mov.w	r2, #32
    d2ec:	f3ef 8111 	mrs	r1, BASEPRI
    d2f0:	f382 8812 	msr	BASEPRI_MAX, r2
    d2f4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    d2f8:	6883      	ldr	r3, [r0, #8]
    d2fa:	b10b      	cbz	r3, d300 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    d2fc:	f7ff ffb1 	bl	d262 <unpend_thread_no_timeout>
	__asm__ volatile(
    d300:	f381 8811 	msr	BASEPRI, r1
    d304:	f3bf 8f6f 	isb	sy
}
    d308:	bd08      	pop	{r3, pc}

0000d30a <z_sched_wake_thread>:
{
    d30a:	b538      	push	{r3, r4, r5, lr}
    d30c:	4604      	mov	r4, r0
	__asm__ volatile(
    d30e:	f04f 0320 	mov.w	r3, #32
    d312:	f3ef 8511 	mrs	r5, BASEPRI
    d316:	f383 8812 	msr	BASEPRI_MAX, r3
    d31a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    d31e:	7b43      	ldrb	r3, [r0, #13]
    d320:	f013 0f28 	tst.w	r3, #40	; 0x28
    d324:	d10b      	bne.n	d33e <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    d326:	6883      	ldr	r3, [r0, #8]
    d328:	b10b      	cbz	r3, d32e <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    d32a:	f7ff ff9a 	bl	d262 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d32e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    d330:	b951      	cbnz	r1, d348 <z_sched_wake_thread+0x3e>
    d332:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d336:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    d338:	4620      	mov	r0, r4
    d33a:	f7fd fa31 	bl	a7a0 <ready_thread>
	__asm__ volatile(
    d33e:	f385 8811 	msr	BASEPRI, r5
    d342:	f3bf 8f6f 	isb	sy
}
    d346:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    d348:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    d34c:	e7f3      	b.n	d336 <z_sched_wake_thread+0x2c>

0000d34e <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    d34e:	2101      	movs	r1, #1
    d350:	3818      	subs	r0, #24
    d352:	f7ff bfda 	b.w	d30a <z_sched_wake_thread>

0000d356 <z_unpend1_no_timeout>:
{
    d356:	b508      	push	{r3, lr}
    d358:	4603      	mov	r3, r0
	__asm__ volatile(
    d35a:	f04f 0220 	mov.w	r2, #32
    d35e:	f3ef 8111 	mrs	r1, BASEPRI
    d362:	f382 8812 	msr	BASEPRI_MAX, r2
    d366:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d36a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d36c:	4283      	cmp	r3, r0
    d36e:	d007      	beq.n	d380 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    d370:	b108      	cbz	r0, d376 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    d372:	f7ff ff76 	bl	d262 <unpend_thread_no_timeout>
	__asm__ volatile(
    d376:	f381 8811 	msr	BASEPRI, r1
    d37a:	f3bf 8f6f 	isb	sy
}
    d37e:	bd08      	pop	{r3, pc}
    d380:	2000      	movs	r0, #0
    d382:	e7f8      	b.n	d376 <z_unpend1_no_timeout+0x20>

0000d384 <z_unpend_first_thread>:
{
    d384:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d386:	f04f 0320 	mov.w	r3, #32
    d38a:	f3ef 8511 	mrs	r5, BASEPRI
    d38e:	f383 8812 	msr	BASEPRI_MAX, r3
    d392:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d396:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d398:	42a0      	cmp	r0, r4
    d39a:	d00d      	beq.n	d3b8 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    d39c:	b134      	cbz	r4, d3ac <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    d39e:	4620      	mov	r0, r4
    d3a0:	f7ff ff5f 	bl	d262 <unpend_thread_no_timeout>
    d3a4:	f104 0018 	add.w	r0, r4, #24
    d3a8:	f000 f869 	bl	d47e <z_abort_timeout>
	__asm__ volatile(
    d3ac:	f385 8811 	msr	BASEPRI, r5
    d3b0:	f3bf 8f6f 	isb	sy
}
    d3b4:	4620      	mov	r0, r4
    d3b6:	bd38      	pop	{r3, r4, r5, pc}
    d3b8:	2400      	movs	r4, #0
    d3ba:	e7f7      	b.n	d3ac <z_unpend_first_thread+0x28>

0000d3bc <z_unpend_thread>:
{
    d3bc:	b510      	push	{r4, lr}
    d3be:	4601      	mov	r1, r0
	__asm__ volatile(
    d3c0:	f04f 0320 	mov.w	r3, #32
    d3c4:	f3ef 8411 	mrs	r4, BASEPRI
    d3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    d3cc:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    d3d0:	6883      	ldr	r3, [r0, #8]
    d3d2:	b10b      	cbz	r3, d3d8 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    d3d4:	f7ff ff45 	bl	d262 <unpend_thread_no_timeout>
	__asm__ volatile(
    d3d8:	f384 8811 	msr	BASEPRI, r4
    d3dc:	f3bf 8f6f 	isb	sy
}
    d3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d3e4:	f101 0018 	add.w	r0, r1, #24
    d3e8:	f000 b849 	b.w	d47e <z_abort_timeout>

0000d3ec <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d3ec:	4603      	mov	r3, r0
    d3ee:	b920      	cbnz	r0, d3fa <z_reschedule_irqlock+0xe>
    d3f0:	f3ef 8205 	mrs	r2, IPSR
    d3f4:	b90a      	cbnz	r2, d3fa <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    d3f6:	f7f7 bc97 	b.w	4d28 <arch_swap>
    d3fa:	f383 8811 	msr	BASEPRI, r3
    d3fe:	f3bf 8f6f 	isb	sy
}
    d402:	4770      	bx	lr

0000d404 <z_reschedule_unlocked>:
	__asm__ volatile(
    d404:	f04f 0320 	mov.w	r3, #32
    d408:	f3ef 8011 	mrs	r0, BASEPRI
    d40c:	f383 8812 	msr	BASEPRI_MAX, r3
    d410:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d414:	f7ff bfea 	b.w	d3ec <z_reschedule_irqlock>

0000d418 <z_unpend_all>:
{
    d418:	b538      	push	{r3, r4, r5, lr}
    d41a:	4605      	mov	r5, r0
	int need_sched = 0;
    d41c:	2000      	movs	r0, #0
	return list->head == list;
    d41e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d420:	42a5      	cmp	r5, r4
    d422:	d000      	beq.n	d426 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d424:	b904      	cbnz	r4, d428 <z_unpend_all+0x10>
}
    d426:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    d428:	4620      	mov	r0, r4
    d42a:	f7ff ffc7 	bl	d3bc <z_unpend_thread>
		z_ready_thread(thread);
    d42e:	4620      	mov	r0, r4
    d430:	f7ff ff49 	bl	d2c6 <z_ready_thread>
		need_sched = 1;
    d434:	2001      	movs	r0, #1
    d436:	e7f2      	b.n	d41e <z_unpend_all+0x6>

0000d438 <z_sched_wake>:
{
    d438:	b538      	push	{r3, r4, r5, lr}
    d43a:	f04f 0320 	mov.w	r3, #32
    d43e:	f3ef 8511 	mrs	r5, BASEPRI
    d442:	f383 8812 	msr	BASEPRI_MAX, r3
    d446:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d44a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d44c:	42a0      	cmp	r0, r4
    d44e:	d012      	beq.n	d476 <z_sched_wake+0x3e>
		if (thread != NULL) {
    d450:	b19c      	cbz	r4, d47a <z_sched_wake+0x42>
    d452:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    d454:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    d456:	4620      	mov	r0, r4
    d458:	f7ff ff03 	bl	d262 <unpend_thread_no_timeout>
    d45c:	f104 0018 	add.w	r0, r4, #24
    d460:	f000 f80d 	bl	d47e <z_abort_timeout>
			ready_thread(thread);
    d464:	4620      	mov	r0, r4
    d466:	f7fd f99b 	bl	a7a0 <ready_thread>
			ret = true;
    d46a:	2001      	movs	r0, #1
	__asm__ volatile(
    d46c:	f385 8811 	msr	BASEPRI, r5
    d470:	f3bf 8f6f 	isb	sy
}
    d474:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    d476:	2000      	movs	r0, #0
    d478:	e7f8      	b.n	d46c <z_sched_wake+0x34>
    d47a:	4620      	mov	r0, r4
    d47c:	e7f6      	b.n	d46c <z_sched_wake+0x34>

0000d47e <z_abort_timeout>:
{
    d47e:	b510      	push	{r4, lr}
	__asm__ volatile(
    d480:	f04f 0220 	mov.w	r2, #32
    d484:	f3ef 8411 	mrs	r4, BASEPRI
    d488:	f382 8812 	msr	BASEPRI_MAX, r2
    d48c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    d490:	6803      	ldr	r3, [r0, #0]
    d492:	b13b      	cbz	r3, d4a4 <z_abort_timeout+0x26>
			remove_timeout(to);
    d494:	f7fd fc88 	bl	ada8 <remove_timeout>
			ret = 0;
    d498:	2000      	movs	r0, #0
	__asm__ volatile(
    d49a:	f384 8811 	msr	BASEPRI, r4
    d49e:	f3bf 8f6f 	isb	sy
}
    d4a2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    d4a4:	f06f 0015 	mvn.w	r0, #21
    d4a8:	e7f7      	b.n	d49a <z_abort_timeout+0x1c>

0000d4aa <z_get_next_timeout_expiry>:
{
    d4aa:	b510      	push	{r4, lr}
	__asm__ volatile(
    d4ac:	f04f 0320 	mov.w	r3, #32
    d4b0:	f3ef 8411 	mrs	r4, BASEPRI
    d4b4:	f383 8812 	msr	BASEPRI_MAX, r3
    d4b8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    d4bc:	f7fd fc54 	bl	ad68 <next_timeout>
	__asm__ volatile(
    d4c0:	f384 8811 	msr	BASEPRI, r4
    d4c4:	f3bf 8f6f 	isb	sy
}
    d4c8:	bd10      	pop	{r4, pc}

0000d4ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d4ca:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d4cc:	f7fd fd68 	bl	afa0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d4d0:	bd08      	pop	{r3, pc}

0000d4d2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    d4d2:	f7fd bd65 	b.w	afa0 <sys_clock_tick_get>

0000d4d6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d4d6:	b108      	cbz	r0, d4dc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d4d8:	f7f8 b9a4 	b.w	5824 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d4dc:	4770      	bx	lr

0000d4de <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d4de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    d4e2:	bf08      	it	eq
    d4e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    d4e8:	b538      	push	{r3, r4, r5, lr}
    d4ea:	460c      	mov	r4, r1
    d4ec:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d4ee:	d014      	beq.n	d51a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d4f0:	4308      	orrs	r0, r1
    d4f2:	d103      	bne.n	d4fc <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    d4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    d4f8:	f7fd bd52 	b.w	afa0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    d4fc:	f06f 0001 	mvn.w	r0, #1
    d500:	1b40      	subs	r0, r0, r5
    d502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d506:	eb63 0101 	sbc.w	r1, r3, r1
    d50a:	2900      	cmp	r1, #0
    d50c:	da04      	bge.n	d518 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    d50e:	f7fd fd47 	bl	afa0 <sys_clock_tick_get>
    d512:	1940      	adds	r0, r0, r5
    d514:	eb41 0104 	adc.w	r1, r1, r4
}
    d518:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    d51a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d51e:	4601      	mov	r1, r0
    d520:	e7fa      	b.n	d518 <sys_clock_timeout_end_calc+0x3a>

0000d522 <k_timer_init>:
	timer->status = 0U;
    d522:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    d524:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    d528:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    d52c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    d530:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    d534:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    d536:	6343      	str	r3, [r0, #52]	; 0x34
}
    d538:	4770      	bx	lr

0000d53a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d53a:	b510      	push	{r4, lr}
    d53c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    d53e:	f7ff ff9e 	bl	d47e <z_abort_timeout>

	if (inactive) {
    d542:	b9b0      	cbnz	r0, d572 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    d544:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d546:	b10b      	cbz	r3, d54c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d548:	4620      	mov	r0, r4
    d54a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d54c:	f104 0018 	add.w	r0, r4, #24
    d550:	f7ff ff01 	bl	d356 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d554:	b168      	cbz	r0, d572 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    d556:	f7ff feb6 	bl	d2c6 <z_ready_thread>
	__asm__ volatile(
    d55a:	f04f 0320 	mov.w	r3, #32
    d55e:	f3ef 8011 	mrs	r0, BASEPRI
    d562:	f383 8812 	msr	BASEPRI_MAX, r3
    d566:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    d56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d56e:	f7ff bf3d 	b.w	d3ec <z_reschedule_irqlock>
    d572:	bd10      	pop	{r4, pc}

0000d574 <k_free>:
	if (ptr != NULL) {
    d574:	b120      	cbz	r0, d580 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    d576:	1f01      	subs	r1, r0, #4
    d578:	f850 0c04 	ldr.w	r0, [r0, #-4]
    d57c:	f000 b856 	b.w	d62c <k_heap_free>
}
    d580:	4770      	bx	lr

0000d582 <k_heap_init>:
{
    d582:	b410      	push	{r4}
    d584:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    d588:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    d58c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    d58e:	f7fe ba21 	b.w	b9d4 <sys_heap_init>

0000d592 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    d592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d596:	b085      	sub	sp, #20
    d598:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    d59c:	4607      	mov	r7, r0
    d59e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d5a0:	4650      	mov	r0, sl
    d5a2:	4621      	mov	r1, r4
{
    d5a4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d5a6:	f7ff ff9a 	bl	d4de <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    d5aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    d5ae:	bf08      	it	eq
    d5b0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d5b4:	4605      	mov	r5, r0
    d5b6:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    d5b8:	bf04      	itt	eq
    d5ba:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    d5be:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    d5c2:	f107 0a14 	add.w	sl, r7, #20
    d5c6:	f04f 0320 	mov.w	r3, #32
    d5ca:	f3ef 8411 	mrs	r4, BASEPRI
    d5ce:	f383 8812 	msr	BASEPRI_MAX, r3
    d5d2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d5d6:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    d5da:	464a      	mov	r2, r9
    d5dc:	4641      	mov	r1, r8
    d5de:	4638      	mov	r0, r7
    d5e0:	f7fe f991 	bl	b906 <sys_heap_aligned_alloc>
    d5e4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    d5e6:	f7fd fcdb 	bl	afa0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    d5ea:	9b03      	ldr	r3, [sp, #12]
    d5ec:	b13b      	cbz	r3, d5fe <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    d5ee:	f384 8811 	msr	BASEPRI, r4
    d5f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    d5f6:	4618      	mov	r0, r3
    d5f8:	b005      	add	sp, #20
    d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    d5fe:	1a28      	subs	r0, r5, r0
    d600:	eb66 0101 	sbc.w	r1, r6, r1
    d604:	2801      	cmp	r0, #1
    d606:	f171 0200 	sbcs.w	r2, r1, #0
    d60a:	dbf0      	blt.n	d5ee <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d60c:	e9cd 0100 	strd	r0, r1, [sp]
    d610:	465a      	mov	r2, fp
    d612:	4621      	mov	r1, r4
    d614:	4650      	mov	r0, sl
    d616:	f7fd f957 	bl	a8c8 <z_pend_curr>
	__asm__ volatile(
    d61a:	f04f 0320 	mov.w	r3, #32
    d61e:	f3ef 8411 	mrs	r4, BASEPRI
    d622:	f383 8812 	msr	BASEPRI_MAX, r3
    d626:	f3bf 8f6f 	isb	sy
	return k;
    d62a:	e7d6      	b.n	d5da <k_heap_aligned_alloc+0x48>

0000d62c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    d62c:	b538      	push	{r3, r4, r5, lr}
    d62e:	4604      	mov	r4, r0
    d630:	f04f 0320 	mov.w	r3, #32
    d634:	f3ef 8511 	mrs	r5, BASEPRI
    d638:	f383 8812 	msr	BASEPRI_MAX, r3
    d63c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    d640:	f7fe f929 	bl	b896 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    d644:	f104 000c 	add.w	r0, r4, #12
    d648:	f7ff fee6 	bl	d418 <z_unpend_all>
    d64c:	b130      	cbz	r0, d65c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    d64e:	4629      	mov	r1, r5
    d650:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    d654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    d658:	f7fd b99a 	b.w	a990 <z_reschedule>
	__asm__ volatile(
    d65c:	f385 8811 	msr	BASEPRI, r5
    d660:	f3bf 8f6f 	isb	sy
}
    d664:	bd38      	pop	{r3, r4, r5, pc}

0000d666 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    d666:	4770      	bx	lr
