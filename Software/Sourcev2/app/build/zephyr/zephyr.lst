
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	00 3b 00 20 e5 52 00 00 fd c0 00 00 b9 52 00 00     .;. .R.......R..
    1010:	b9 52 00 00 b9 52 00 00 b9 52 00 00 00 00 00 00     .R...R...R......
	...
    102c:	b5 4b 00 00 b9 52 00 00 00 00 00 00 61 4b 00 00     .K...R......aK..
    103c:	b9 52 00 00                                         .R..

00001040 <_irq_vector_table>:
    1040:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    1050:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    1060:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    1070:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    1080:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    1090:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10a0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10b0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10c0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10d0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10e0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..
    10f0:	65 4c 00 00 65 4c 00 00 65 4c 00 00 65 4c 00 00     eL..eL..eL..eL..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <print_as5600_value>:
	return 0;
}
#endif /* IS_ENABLED(CONFIG_USB_DEVICE_STACK_NEXT) */

void print_as5600_value(const struct device *dev)
{
    13d4:	b513      	push	{r0, r1, r4, lr}
    13d6:	4604      	mov	r4, r0
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
    13d8:	6883      	ldr	r3, [r0, #8]
    13da:	2122      	movs	r1, #34	; 0x22
    13dc:	68db      	ldr	r3, [r3, #12]
    13de:	4798      	blx	r3
	int ret;
    struct sensor_value rot_raw;
    
	
    ret = sensor_sample_fetch_chan(dev,SENSOR_CHAN_ROTATION);
	if (ret != 0){
    13e0:	4601      	mov	r1, r0
    13e2:	b110      	cbz	r0, 13ea <print_as5600_value+0x16>
			printk("ono dis not good, ur err code is :,%d\n", ret);
    13e4:	4807      	ldr	r0, [pc, #28]	; (1404 <print_as5600_value+0x30>)
    13e6:	f009 fde4 	bl	afb2 <printk>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    13ea:	68a3      	ldr	r3, [r4, #8]
    13ec:	466a      	mov	r2, sp
    13ee:	691b      	ldr	r3, [r3, #16]
    13f0:	2122      	movs	r1, #34	; 0x22
    13f2:	4620      	mov	r0, r4
    13f4:	4798      	blx	r3
		}
    sensor_channel_get(dev,SENSOR_CHAN_ROTATION, &rot_raw);
	
    printk("angle: %d %d\n ", rot_raw.val1, rot_raw.val2);
    13f6:	e9dd 1200 	ldrd	r1, r2, [sp]
    13fa:	4803      	ldr	r0, [pc, #12]	; (1408 <print_as5600_value+0x34>)
    13fc:	f009 fdd9 	bl	afb2 <printk>
	// printk("%d",rot_raw.val1)
}
    1400:	b002      	add	sp, #8
    1402:	bd10      	pop	{r4, pc}
    1404:	0000d67c 	.word	0x0000d67c
    1408:	0000d6a3 	.word	0x0000d6a3

0000140c <main>:



int main(void)
{
    140c:	b573      	push	{r0, r1, r4, r5, r6, lr}
const struct device *const as = DEVICE_DT_GET(DT_INST(0,ams_as5600));

//AS5600_INIT(0);

	const struct device *const dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
    140e:	2400      	movs	r4, #0
#if defined(CONFIG_USB_DEVICE_STACK_NEXT)
	if (enable_usb_device_next()) {
		return 0;
	}
#else
	if (usb_enable(NULL)) {
    1410:	4620      	mov	r0, r4
	uint32_t dtr = 0;
    1412:	9401      	str	r4, [sp, #4]
	if (usb_enable(NULL)) {
    1414:	f002 fbd8 	bl	3bc8 <usb_enable>
    1418:	b958      	cbnz	r0, 1432 <main+0x26>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    141a:	4c18      	ldr	r4, [pc, #96]	; (147c <main+0x70>)
		return 0;
	}
#endif

	/* Poll if the DTR flag was set */
	while (!dtr) {
    141c:	9b01      	ldr	r3, [sp, #4]
    141e:	b15b      	cbz	r3, 1438 <main+0x2c>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1420:	4c17      	ldr	r4, [pc, #92]	; (1480 <main+0x74>)
    1422:	4620      	mov	r0, r4
    1424:	f00b fa05 	bl	c832 <z_device_is_ready>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		/* Give CPU resources to low priority threads. */
		k_sleep(K_MSEC(100));
	}

	if (as == NULL || !device_is_ready(as)) {
    1428:	b998      	cbnz	r0, 1452 <main+0x46>
		printk("\nono bad stuff sad no device tree\n");
    142a:	4816      	ldr	r0, [pc, #88]	; (1484 <main+0x78>)
    142c:	f009 fdc1 	bl	afb2 <printk>
		return;
    1430:	e000      	b.n	1434 <main+0x28>
		return 0;
    1432:	4620      	mov	r0, r4
		


	
	}
    1434:	b002      	add	sp, #8
    1436:	bd70      	pop	{r4, r5, r6, pc}
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1438:	68a3      	ldr	r3, [r4, #8]
    143a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    143c:	b11b      	cbz	r3, 1446 <main+0x3a>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    143e:	aa01      	add	r2, sp, #4
    1440:	2104      	movs	r1, #4
    1442:	4620      	mov	r0, r4
    1444:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    1446:	2100      	movs	r1, #0
    1448:	f640 40cd 	movw	r0, #3277	; 0xccd
    144c:	f009 f85c 	bl	a508 <z_impl_k_sleep>
    1450:	e7e4      	b.n	141c <main+0x10>
	printk("device is %p, name is %s\n", as, as->name);
    1452:	6822      	ldr	r2, [r4, #0]
    1454:	480c      	ldr	r0, [pc, #48]	; (1488 <main+0x7c>)
		printk("Hello World! %s\n", CONFIG_ARCH);
    1456:	4e0d      	ldr	r6, [pc, #52]	; (148c <main+0x80>)
    1458:	4d0d      	ldr	r5, [pc, #52]	; (1490 <main+0x84>)
	printk("device is %p, name is %s\n", as, as->name);
    145a:	4621      	mov	r1, r4
    145c:	f009 fda9 	bl	afb2 <printk>
		printk("Hello World! %s\n", CONFIG_ARCH);
    1460:	4631      	mov	r1, r6
    1462:	4628      	mov	r0, r5
    1464:	f009 fda5 	bl	afb2 <printk>
    1468:	2100      	movs	r1, #0
    146a:	f640 40cd 	movw	r0, #3277	; 0xccd
    146e:	f009 f84b 	bl	a508 <z_impl_k_sleep>
		print_as5600_value(as);
    1472:	4620      	mov	r0, r4
    1474:	f7ff ffae 	bl	13d4 <print_as5600_value>
	while (1) {
    1478:	e7f2      	b.n	1460 <main+0x54>
    147a:	bf00      	nop
    147c:	0000d010 	.word	0x0000d010
    1480:	0000d040 	.word	0x0000d040
    1484:	0000d6b2 	.word	0x0000d6b2
    1488:	0000d6d5 	.word	0x0000d6d5
    148c:	0000d6ef 	.word	0x0000d6ef
    1490:	0000d6f3 	.word	0x0000d6f3

00001494 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1498:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    149a:	0784      	lsls	r4, r0, #30
{
    149c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    149e:	f002 0304 	and.w	r3, r2, #4
    14a2:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    14a4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    14a8:	f103 0301 	add.w	r3, r3, #1
    14ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    14b0:	9203      	str	r2, [sp, #12]
    14b2:	4605      	mov	r5, r0
    14b4:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    14b6:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    14b8:	f040 81be 	bne.w	1838 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    14bc:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    14be:	b130      	cbz	r0, 14ce <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    14c0:	2907      	cmp	r1, #7
    14c2:	d809      	bhi.n	14d8 <cbvprintf_package+0x44>
		return -ENOSPC;
    14c4:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    14c8:	b011      	add	sp, #68	; 0x44
    14ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    14ce:	f001 0607 	and.w	r6, r1, #7
    14d2:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    14d4:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    14d8:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    14da:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    14de:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    14e0:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    14e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14e8:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    14ea:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    14ee:	464f      	mov	r7, r9
	bool parsing = false;
    14f0:	46cb      	mov	fp, r9
	size = sizeof(char *);
    14f2:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    14f4:	b10d      	cbz	r5, 14fa <cbvprintf_package+0x66>
				*(const char **)buf = s;
    14f6:	9a00      	ldr	r2, [sp, #0]
    14f8:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    14fa:	9805      	ldr	r0, [sp, #20]
    14fc:	2800      	cmp	r0, #0
    14fe:	f300 80eb 	bgt.w	16d8 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1502:	489a      	ldr	r0, [pc, #616]	; (176c <cbvprintf_package+0x2d8>)
    1504:	9a00      	ldr	r2, [sp, #0]
    1506:	4282      	cmp	r2, r0
    1508:	d303      	bcc.n	1512 <cbvprintf_package+0x7e>
    150a:	4899      	ldr	r0, [pc, #612]	; (1770 <cbvprintf_package+0x2dc>)
    150c:	4282      	cmp	r2, r0
    150e:	f0c0 80e3 	bcc.w	16d8 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1512:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1514:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1518:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    151a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    151e:	f100 8106 	bmi.w	172e <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1522:	2f0f      	cmp	r7, #15
    1524:	f200 80b4 	bhi.w	1690 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1528:	2d00      	cmp	r5, #0
    152a:	f000 8108 	beq.w	173e <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    152e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1532:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    1536:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1538:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    153c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    1540:	9804      	ldr	r0, [sp, #16]
    1542:	3001      	adds	r0, #1
    1544:	9004      	str	r0, [sp, #16]
    1546:	e0ea      	b.n	171e <cbvprintf_package+0x28a>
			switch (*fmt) {
    1548:	287a      	cmp	r0, #122	; 0x7a
    154a:	d860      	bhi.n	160e <cbvprintf_package+0x17a>
    154c:	284b      	cmp	r0, #75	; 0x4b
    154e:	d80e      	bhi.n	156e <cbvprintf_package+0xda>
    1550:	2847      	cmp	r0, #71	; 0x47
    1552:	d85c      	bhi.n	160e <cbvprintf_package+0x17a>
    1554:	2829      	cmp	r0, #41	; 0x29
    1556:	d82f      	bhi.n	15b8 <cbvprintf_package+0x124>
    1558:	2825      	cmp	r0, #37	; 0x25
    155a:	d055      	beq.n	1608 <cbvprintf_package+0x174>
    155c:	d857      	bhi.n	160e <cbvprintf_package+0x17a>
    155e:	2820      	cmp	r0, #32
    1560:	d07d      	beq.n	165e <cbvprintf_package+0x1ca>
    1562:	3823      	subs	r0, #35	; 0x23
    1564:	f1d0 0b00 	rsbs	fp, r0, #0
    1568:	eb4b 0b00 	adc.w	fp, fp, r0
    156c:	e077      	b.n	165e <cbvprintf_package+0x1ca>
    156e:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1572:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    1576:	d84a      	bhi.n	160e <cbvprintf_package+0x17a>
    1578:	e8df f00c 	tbb	[pc, ip]
    157c:	49494971 	.word	0x49494971
    1580:	49494949 	.word	0x49494949
    1584:	49494949 	.word	0x49494949
    1588:	4949494c 	.word	0x4949494c
    158c:	49494949 	.word	0x49494949
    1590:	4c495a49 	.word	0x4c495a49
    1594:	5a5a5a4c 	.word	0x5a5a5a4c
    1598:	496e4c71 	.word	0x496e4c71
    159c:	4c184971 	.word	0x4c184971
    15a0:	83494918 	.word	0x83494918
    15a4:	49494c80 	.word	0x49494c80
    15a8:	494c      	.short	0x494c
    15aa:	80          	.byte	0x80
    15ab:	00          	.byte	0x00
    15ac:	2000      	movs	r0, #0
    15ae:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    15b2:	f04f 0a04 	mov.w	sl, #4
    15b6:	e039      	b.n	162c <cbvprintf_package+0x198>
			switch (*fmt) {
    15b8:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    15bc:	fa5f fc8c 	uxtb.w	ip, ip
    15c0:	2201      	movs	r2, #1
    15c2:	fa02 fc0c 	lsl.w	ip, r2, ip
    15c6:	ea1c 0f0e 	tst.w	ip, lr
    15ca:	d148      	bne.n	165e <cbvprintf_package+0x1ca>
    15cc:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    15d0:	d12e      	bne.n	1630 <cbvprintf_package+0x19c>
    15d2:	ea1c 0b02 	ands.w	fp, ip, r2
    15d6:	d042      	beq.n	165e <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    15d8:	3c01      	subs	r4, #1
    15da:	4454      	add	r4, sl
    15dc:	f1ca 0c00 	rsb	ip, sl, #0
    15e0:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    15e4:	2d00      	cmp	r5, #0
    15e6:	d061      	beq.n	16ac <cbvprintf_package+0x218>
    15e8:	eba3 0c05 	sub.w	ip, r3, r5
    15ec:	44a4      	add	ip, r4
    15ee:	45b4      	cmp	ip, r6
    15f0:	f63f af68 	bhi.w	14c4 <cbvprintf_package+0x30>
		if (is_str_arg) {
    15f4:	2800      	cmp	r0, #0
    15f6:	d168      	bne.n	16ca <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    15f8:	2b04      	cmp	r3, #4
    15fa:	d147      	bne.n	168c <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    15fc:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1600:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    1602:	3404      	adds	r4, #4
    1604:	2304      	movs	r3, #4
    1606:	e02a      	b.n	165e <cbvprintf_package+0x1ca>
				arg_idx--;
    1608:	9a01      	ldr	r2, [sp, #4]
    160a:	3a01      	subs	r2, #1
    160c:	9201      	str	r2, [sp, #4]
				parsing = false;
    160e:	f04f 0b00 	mov.w	fp, #0
				continue;
    1612:	e024      	b.n	165e <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    1614:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1618:	286c      	cmp	r0, #108	; 0x6c
    161a:	d134      	bne.n	1686 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    161c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1620:	2000      	movs	r0, #0
    1622:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    1624:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    1626:	d1c4      	bne.n	15b2 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1628:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    162c:	4653      	mov	r3, sl
    162e:	e7d3      	b.n	15d8 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1630:	f108 0807 	add.w	r8, r8, #7
    1634:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    1638:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    163a:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    163e:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    1642:	b135      	cbz	r5, 1652 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    1644:	9806      	ldr	r0, [sp, #24]
    1646:	4420      	add	r0, r4
    1648:	42b0      	cmp	r0, r6
    164a:	f63f af3b 	bhi.w	14c4 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    164e:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    1652:	3408      	adds	r4, #8
				parsing = false;
    1654:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    1658:	f04f 0a08 	mov.w	sl, #8
    165c:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    165e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1662:	2800      	cmp	r0, #0
    1664:	d078      	beq.n	1758 <cbvprintf_package+0x2c4>
			if (!parsing) {
    1666:	f1bb 0f00 	cmp.w	fp, #0
    166a:	f47f af6d 	bne.w	1548 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    166e:	2825      	cmp	r0, #37	; 0x25
    1670:	d1f5      	bne.n	165e <cbvprintf_package+0x1ca>
					arg_idx++;
    1672:	9b01      	ldr	r3, [sp, #4]
    1674:	3301      	adds	r3, #1
    1676:	9301      	str	r3, [sp, #4]
					parsing = true;
    1678:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    167c:	f04f 0a04 	mov.w	sl, #4
    1680:	e7ec      	b.n	165c <cbvprintf_package+0x1c8>
			switch (*fmt) {
    1682:	4658      	mov	r0, fp
    1684:	e793      	b.n	15ae <cbvprintf_package+0x11a>
    1686:	2000      	movs	r0, #0
				parsing = false;
    1688:	4683      	mov	fp, r0
    168a:	e7a5      	b.n	15d8 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    168c:	2b08      	cmp	r3, #8
    168e:	d002      	beq.n	1696 <cbvprintf_package+0x202>
					return -EINVAL;
    1690:	f06f 0015 	mvn.w	r0, #21
    1694:	e718      	b.n	14c8 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    1696:	f108 0807 	add.w	r8, r8, #7
    169a:	f028 0807 	bic.w	r8, r8, #7
    169e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    16a2:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    16a6:	3408      	adds	r4, #8
    16a8:	2308      	movs	r3, #8
    16aa:	e7d8      	b.n	165e <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    16ac:	b968      	cbnz	r0, 16ca <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    16ae:	2b04      	cmp	r3, #4
    16b0:	d102      	bne.n	16b8 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    16b2:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    16b6:	e7a4      	b.n	1602 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    16b8:	2b08      	cmp	r3, #8
    16ba:	d1e9      	bne.n	1690 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    16bc:	f108 0807 	add.w	r8, r8, #7
    16c0:	f028 0807 	bic.w	r8, r8, #7
    16c4:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    16c8:	e7ed      	b.n	16a6 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    16ca:	9a05      	ldr	r2, [sp, #20]
    16cc:	3a01      	subs	r2, #1
    16ce:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    16d0:	f858 2b04 	ldr.w	r2, [r8], #4
    16d4:	9200      	str	r2, [sp, #0]
    16d6:	e70d      	b.n	14f4 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    16d8:	9a03      	ldr	r2, [sp, #12]
    16da:	0790      	lsls	r0, r2, #30
    16dc:	d520      	bpl.n	1720 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    16de:	eba4 0e05 	sub.w	lr, r4, r5
    16e2:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    16e6:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    16ea:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    16ee:	d2cf      	bcs.n	1690 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    16f0:	2f0f      	cmp	r7, #15
    16f2:	d8cd      	bhi.n	1690 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    16f4:	b1f5      	cbz	r5, 1734 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    16f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
    16fa:	eb0d 0e02 	add.w	lr, sp, r2
    16fe:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1700:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1702:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1706:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    170a:	f1bc 0f00 	cmp.w	ip, #0
    170e:	f43f af17 	beq.w	1540 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1712:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1716:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    171a:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    171e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1720:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    1724:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    1726:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1728:	f64f 7eda 	movw	lr, #65498	; 0xffda
    172c:	e797      	b.n	165e <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    172e:	f04f 0c00 	mov.w	ip, #0
    1732:	e7da      	b.n	16ea <cbvprintf_package+0x256>
				} else if (is_ro) {
    1734:	f1bc 0f00 	cmp.w	ip, #0
    1738:	d001      	beq.n	173e <cbvprintf_package+0x2aa>
					len += 1;
    173a:	3601      	adds	r6, #1
    173c:	e7ef      	b.n	171e <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    173e:	9802      	ldr	r0, [sp, #8]
					len += 2;
    1740:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    1742:	2800      	cmp	r0, #0
    1744:	d1eb      	bne.n	171e <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    1746:	9800      	ldr	r0, [sp, #0]
    1748:	e9cd 3106 	strd	r3, r1, [sp, #24]
    174c:	f00a fce0 	bl	c110 <strlen>
    1750:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    1754:	4406      	add	r6, r0
    1756:	e7e2      	b.n	171e <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1758:	1b63      	subs	r3, r4, r5
    175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    175e:	d297      	bcs.n	1690 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    1760:	b945      	cbnz	r5, 1774 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1762:	f1a6 0408 	sub.w	r4, r6, #8
    1766:	18e0      	adds	r0, r4, r3
    1768:	e6ae      	b.n	14c8 <cbvprintf_package+0x34>
    176a:	bf00      	nop
    176c:	0000cf30 	.word	0x0000cf30
    1770:	0000e5b0 	.word	0x0000e5b0
	if (rws_pos_en) {
    1774:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    1776:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1778:	089b      	lsrs	r3, r3, #2
    177a:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    177c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1780:	b1c2      	cbz	r2, 17b4 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1782:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1784:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1788:	f1b9 0f00 	cmp.w	r9, #0
    178c:	d005      	beq.n	179a <cbvprintf_package+0x306>
    178e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1790:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    1792:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    1796:	4297      	cmp	r7, r2
    1798:	d10e      	bne.n	17b8 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    179a:	f1c5 0301 	rsb	r3, r5, #1
    179e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    17a2:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    17a6:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    17a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    17ac:	4557      	cmp	r7, sl
    17ae:	d112      	bne.n	17d6 <cbvprintf_package+0x342>
	return BUF_OFFSET;
    17b0:	1b60      	subs	r0, r4, r5
    17b2:	e689      	b.n	14c8 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    17b4:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    17b6:	e7e5      	b.n	1784 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    17b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    17bc:	0619      	lsls	r1, r3, #24
    17be:	d508      	bpl.n	17d2 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    17c0:	eb04 0e0c 	add.w	lr, r4, ip
    17c4:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    17c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    17ca:	f63f ae7b 	bhi.w	14c4 <cbvprintf_package+0x30>
			*buf++ = pos;
    17ce:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    17d2:	3201      	adds	r2, #1
    17d4:	e7df      	b.n	1796 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    17d6:	f1b9 0f00 	cmp.w	r9, #0
    17da:	d003      	beq.n	17e4 <cbvprintf_package+0x350>
    17dc:	f998 2000 	ldrsb.w	r2, [r8]
    17e0:	2a00      	cmp	r2, #0
    17e2:	db17      	blt.n	1814 <cbvprintf_package+0x380>
		if (rws_pos_en) {
    17e4:	9b02      	ldr	r3, [sp, #8]
    17e6:	b1d3      	cbz	r3, 181e <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    17e8:	f81a 200b 	ldrb.w	r2, [sl, fp]
    17ec:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    17f0:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    17f2:	9b01      	ldr	r3, [sp, #4]
    17f4:	1898      	adds	r0, r3, r2
    17f6:	4420      	add	r0, r4
    17f8:	42b0      	cmp	r0, r6
    17fa:	f63f ae63 	bhi.w	14c4 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    17fe:	f898 0000 	ldrb.w	r0, [r8]
    1802:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    1806:	9900      	ldr	r1, [sp, #0]
    1808:	9203      	str	r2, [sp, #12]
    180a:	4620      	mov	r0, r4
    180c:	f00a fc90 	bl	c130 <memcpy>
		buf += size;
    1810:	9a03      	ldr	r2, [sp, #12]
    1812:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1814:	f10a 0a01 	add.w	sl, sl, #1
    1818:	f108 0801 	add.w	r8, r8, #1
    181c:	e7c6      	b.n	17ac <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    181e:	f898 2000 	ldrb.w	r2, [r8]
    1822:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    1826:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1828:	9b02      	ldr	r3, [sp, #8]
    182a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    182e:	9800      	ldr	r0, [sp, #0]
    1830:	f00a fc6e 	bl	c110 <strlen>
    1834:	1c42      	adds	r2, r0, #1
    1836:	e7dc      	b.n	17f2 <cbvprintf_package+0x35e>
		return -EFAULT;
    1838:	f06f 000d 	mvn.w	r0, #13
    183c:	e644      	b.n	14c8 <cbvprintf_package+0x34>
    183e:	bf00      	nop

00001840 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1844:	b095      	sub	sp, #84	; 0x54
    1846:	af00      	add	r7, sp, #0
    1848:	4604      	mov	r4, r0
    184a:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    184e:	61bb      	str	r3, [r7, #24]
    1850:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    1854:	627a      	str	r2, [r7, #36]	; 0x24
    1856:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1858:	6239      	str	r1, [r7, #32]
    185a:	b951      	cbnz	r1, 1872 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    185c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    185e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    1860:	7880      	ldrb	r0, [r0, #2]
    1862:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1866:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    1868:	6a3b      	ldr	r3, [r7, #32]
    186a:	429e      	cmp	r6, r3
    186c:	d81a      	bhi.n	18a4 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    186e:	1b03      	subs	r3, r0, r4
    1870:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    1872:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    1876:	78e3      	ldrb	r3, [r4, #3]
    1878:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    187a:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    187c:	f1ba 0f00 	cmp.w	sl, #0
    1880:	d002      	beq.n	1888 <cbprintf_package_convert+0x48>
    1882:	f01b 0f01 	tst.w	fp, #1
    1886:	d117      	bne.n	18b8 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    1888:	697b      	ldr	r3, [r7, #20]
    188a:	bb5b      	cbnz	r3, 18e4 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    188e:	b11b      	cbz	r3, 1898 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    1890:	69ba      	ldr	r2, [r7, #24]
    1892:	6a39      	ldr	r1, [r7, #32]
    1894:	4620      	mov	r0, r4
    1896:	4798      	blx	r3
		}

		return in_len;
    1898:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    189a:	4628      	mov	r0, r5
    189c:	3754      	adds	r7, #84	; 0x54
    189e:	46bd      	mov	sp, r7
    18a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    18a4:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    18a6:	4628      	mov	r0, r5
    18a8:	f00a fc32 	bl	c110 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    18ac:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    18ae:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    18b0:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    18b2:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    18b4:	623b      	str	r3, [r7, #32]
    18b6:	e7d7      	b.n	1868 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    18b8:	f894 8000 	ldrb.w	r8, [r4]
    18bc:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    18be:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    18c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    18c2:	ea4f 0288 	mov.w	r2, r8, lsl #2
    18c6:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    18c8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    18cc:	2b00      	cmp	r3, #0
    18ce:	f040 8101 	bne.w	1ad4 <CONFIG_USB_DEVICE_VID+0x1bf>
		out_len = (int)in_len;
    18d2:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    18d4:	46c1      	mov	r9, r8
    18d6:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    18da:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    18dc:	454b      	cmp	r3, r9
    18de:	d14e      	bne.n	197e <CONFIG_USB_DEVICE_VID+0x69>
    18e0:	44d0      	add	r8, sl
    18e2:	e013      	b.n	190c <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    18e4:	f01b 0f02 	tst.w	fp, #2
    18e8:	d0d0      	beq.n	188c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    18ea:	f894 8000 	ldrb.w	r8, [r4]
    18ee:	ea4f 0388 	mov.w	r3, r8, lsl #2
    18f2:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    18f4:	6863      	ldr	r3, [r4, #4]
    18f6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    18f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    18fa:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    18fe:	2b00      	cmp	r3, #0
    1900:	d178      	bne.n	19f4 <CONFIG_USB_DEVICE_VID+0xdf>
		out_len = (int)in_len;
    1902:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1904:	f1ba 0f00 	cmp.w	sl, #0
    1908:	d14e      	bne.n	19a8 <CONFIG_USB_DEVICE_VID+0x93>
	size_t strl_cnt = 0;
    190a:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    190c:	f01b 0f05 	tst.w	fp, #5
    1910:	bf0c      	ite	eq
    1912:	2302      	moveq	r3, #2
    1914:	2301      	movne	r3, #1
    1916:	627b      	str	r3, [r7, #36]	; 0x24
    1918:	697b      	ldr	r3, [r7, #20]
    191a:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    191e:	f00b 0302 	and.w	r3, fp, #2
    1922:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1924:	45d0      	cmp	r8, sl
    1926:	d0b8      	beq.n	189a <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1928:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    192c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1930:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1934:	4bac      	ldr	r3, [pc, #688]	; (1be8 <CONFIG_USB_DEVICE_VID+0x2d3>)
    1936:	4599      	cmp	r9, r3
    1938:	d302      	bcc.n	1940 <CONFIG_USB_DEVICE_VID+0x2b>
    193a:	4bac      	ldr	r3, [pc, #688]	; (1bec <CONFIG_USB_DEVICE_VID+0x2d7>)
    193c:	4599      	cmp	r9, r3
    193e:	d339      	bcc.n	19b4 <CONFIG_USB_DEVICE_VID+0x9f>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1940:	693b      	ldr	r3, [r7, #16]
    1942:	2b00      	cmp	r3, #0
    1944:	d043      	beq.n	19ce <CONFIG_USB_DEVICE_VID+0xb9>
    1946:	69f8      	ldr	r0, [r7, #28]
    1948:	f009 faf9 	bl	af3e <is_ptr>
    194c:	2800      	cmp	r0, #0
    194e:	d03e      	beq.n	19ce <CONFIG_USB_DEVICE_VID+0xb9>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1950:	46e9      	mov	r9, sp
    1952:	b08a      	sub	sp, #40	; 0x28
    1954:	466a      	mov	r2, sp
    1956:	4ba6      	ldr	r3, [pc, #664]	; (1bf0 <CONFIG_USB_DEVICE_VID+0x2db>)
    1958:	6153      	str	r3, [r2, #20]
    195a:	69fb      	ldr	r3, [r7, #28]
    195c:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1960:	f44f 7300 	mov.w	r3, #512	; 0x200
    1964:	8413      	strh	r3, [r2, #32]
    1966:	4ba3      	ldr	r3, [pc, #652]	; (1bf4 <CONFIG_USB_DEVICE_VID+0x2df>)
    1968:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    196c:	48a2      	ldr	r0, [pc, #648]	; (1bf8 <CONFIG_USB_DEVICE_VID+0x2e3>)
    196e:	2300      	movs	r3, #0
    1970:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1974:	f001 f8ce 	bl	2b14 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    1978:	3d02      	subs	r5, #2
    197a:	46cd      	mov	sp, r9
				continue;
    197c:	e7d2      	b.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
				const char *str = *(const char **)&buf32[*str_pos];
    197e:	f819 2b01 	ldrb.w	r2, [r9], #1
    1982:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1984:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    1988:	f00a fbc2 	bl	c110 <strlen>
				if (strl && strl_cnt < strl_len) {
    198c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1990:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    1992:	b13a      	cbz	r2, 19a4 <CONFIG_USB_DEVICE_VID+0x8f>
    1994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    1998:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    199a:	bf3e      	ittt	cc
    199c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    199e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    19a2:	3601      	addcc	r6, #1
				out_len += len;
    19a4:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    19a6:	e799      	b.n	18dc <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    19a8:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    19ac:	bf1c      	itt	ne
    19ae:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    19b0:	44d0      	addne	r8, sl
    19b2:	e7ab      	b.n	190c <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    19b4:	693b      	ldr	r3, [r7, #16]
    19b6:	b123      	cbz	r3, 19c2 <CONFIG_USB_DEVICE_VID+0xad>
    19b8:	69f8      	ldr	r0, [r7, #28]
    19ba:	f009 fac0 	bl	af3e <is_ptr>
    19be:	2800      	cmp	r0, #0
    19c0:	d1c6      	bne.n	1950 <CONFIG_USB_DEVICE_VID+0x3b>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    19c2:	f01b 0f01 	tst.w	fp, #1
    19c6:	d105      	bne.n	19d4 <CONFIG_USB_DEVICE_VID+0xbf>
					out_len -= drop_ro_str_pos ? 2 : 1;
    19c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19ca:	1aed      	subs	r5, r5, r3
    19cc:	e7aa      	b.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    19ce:	6a3b      	ldr	r3, [r7, #32]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d0a7      	beq.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
		return 1 + strlen(str);
    19d4:	4648      	mov	r0, r9
    19d6:	f00a fb9b 	bl	c110 <strlen>
				if (strl && strl_cnt < strl_len) {
    19da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    19dc:	b143      	cbz	r3, 19f0 <CONFIG_USB_DEVICE_VID+0xdb>
    19de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    19e2:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    19e4:	bf3f      	itttt	cc
    19e6:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    19e8:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    19ea:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    19ee:	3601      	addcc	r6, #1
				out_len += (len - 1);
    19f0:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    19f2:	e797      	b.n	1924 <CONFIG_USB_DEVICE_VID+0xf>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    19f4:	f1ba 0f00 	cmp.w	sl, #0
    19f8:	d071      	beq.n	1ade <CONFIG_USB_DEVICE_VID+0x1c9>
    19fa:	f01b 0604 	ands.w	r6, fp, #4
    19fe:	d071      	beq.n	1ae4 <CONFIG_USB_DEVICE_VID+0x1cf>
		keep_cnt = ros_nbr;
    1a00:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1a02:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1a04:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1a08:	4652      	mov	r2, sl
    1a0a:	4641      	mov	r1, r8
    1a0c:	f00a fb90 	bl	c130 <memcpy>
	str_pos += ros_nbr;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	005b      	lsls	r3, r3, #1
    1a14:	60bb      	str	r3, [r7, #8]
    1a16:	697b      	ldr	r3, [r7, #20]
    1a18:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1a1a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1a1e:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1a20:	f00b 0302 	and.w	r3, fp, #2
    1a24:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1a26:	697b      	ldr	r3, [r7, #20]
    1a28:	4598      	cmp	r8, r3
    1a2a:	d15d      	bne.n	1ae8 <CONFIG_USB_DEVICE_VID+0x1d3>
	out_desc.len = in_desc->len;
    1a2c:	7823      	ldrb	r3, [r4, #0]
    1a2e:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1a30:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1a32:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1a36:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1a3a:	bf0c      	ite	eq
    1a3c:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1a40:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1a42:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1a46:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1a48:	f040 809d 	bne.w	1b86 <CONFIG_USB_DEVICE_VID+0x271>
    1a4c:	f01b 0f04 	tst.w	fp, #4
    1a50:	bf14      	ite	ne
    1a52:	4648      	movne	r0, r9
    1a54:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1a56:	f894 b002 	ldrb.w	fp, [r4, #2]
    1a5a:	f894 8003 	ldrb.w	r8, [r4, #3]
    1a5e:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1a60:	7062      	strb	r2, [r4, #1]
    1a62:	70a0      	strb	r0, [r4, #2]
    1a64:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    1a66:	69ba      	ldr	r2, [r7, #24]
    1a68:	68f9      	ldr	r1, [r7, #12]
    1a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a6c:	4620      	mov	r0, r4
    1a6e:	4798      	blx	r3
	if (rv < 0) {
    1a70:	1e05      	subs	r5, r0, #0
    1a72:	f6ff af12 	blt.w	189a <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    1a76:	69fb      	ldr	r3, [r7, #28]
    1a78:	7023      	strb	r3, [r4, #0]
    1a7a:	693b      	ldr	r3, [r7, #16]
    1a7c:	7063      	strb	r3, [r4, #1]
    1a7e:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1a82:	69ba      	ldr	r2, [r7, #24]
    1a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    1a86:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1a8a:	4649      	mov	r1, r9
    1a8c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1a90:	4798      	blx	r3
	if (rv < 0) {
    1a92:	f1b0 0800 	subs.w	r8, r0, #0
    1a96:	f2c0 80a3 	blt.w	1be0 <CONFIG_USB_DEVICE_VID+0x2cb>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1a9a:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    1a9c:	69ba      	ldr	r2, [r7, #24]
    1a9e:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1aa0:	eba3 010a 	sub.w	r1, r3, sl
    1aa4:	68fb      	ldr	r3, [r7, #12]
    1aa6:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    1aa8:	68bb      	ldr	r3, [r7, #8]
    1aaa:	1ac9      	subs	r1, r1, r3
    1aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aae:	4798      	blx	r3
	if (rv < 0) {
    1ab0:	2800      	cmp	r0, #0
    1ab2:	f2c0 8097 	blt.w	1be4 <CONFIG_USB_DEVICE_VID+0x2cf>
	out_len += rv;
    1ab6:	44a8      	add	r8, r5
	out_len += rv;
    1ab8:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1abc:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    1ac0:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1ac4:	45b3      	cmp	fp, r6
    1ac6:	d360      	bcc.n	1b8a <CONFIG_USB_DEVICE_VID+0x275>
	(void)cb(NULL, 0, ctx);
    1ac8:	2100      	movs	r1, #0
    1aca:	69ba      	ldr	r2, [r7, #24]
    1acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ace:	4608      	mov	r0, r1
    1ad0:	4798      	blx	r3
	return out_len;
    1ad2:	e6e2      	b.n	189a <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1ad4:	f04f 0900 	mov.w	r9, #0
    1ad8:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1adc:	e794      	b.n	1a08 <CONFIG_USB_DEVICE_VID+0xf3>
		scpy_cnt = 0;
    1ade:	4656      	mov	r6, sl
		keep_cnt = 0;
    1ae0:	46d1      	mov	r9, sl
    1ae2:	e795      	b.n	1a10 <CONFIG_USB_DEVICE_VID+0xfb>
    1ae4:	46b1      	mov	r9, r6
    1ae6:	e793      	b.n	1a10 <CONFIG_USB_DEVICE_VID+0xfb>
		uint8_t arg_idx = *str_pos++;
    1ae8:	f818 1b02 	ldrb.w	r1, [r8], #2
    1aec:	4a3e      	ldr	r2, [pc, #248]	; (1be8 <CONFIG_USB_DEVICE_VID+0x2d3>)
		uint8_t arg_pos = *str_pos++;
    1aee:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1af2:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    1af6:	4293      	cmp	r3, r2
    1af8:	d302      	bcc.n	1b00 <CONFIG_USB_DEVICE_VID+0x1eb>
    1afa:	4a3c      	ldr	r2, [pc, #240]	; (1bec <CONFIG_USB_DEVICE_VID+0x2d7>)
    1afc:	4293      	cmp	r3, r2
    1afe:	d31c      	bcc.n	1b3a <CONFIG_USB_DEVICE_VID+0x225>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1b00:	693b      	ldr	r3, [r7, #16]
    1b02:	b123      	cbz	r3, 1b0e <CONFIG_USB_DEVICE_VID+0x1f9>
    1b04:	69f8      	ldr	r0, [r7, #28]
    1b06:	f009 fa1a 	bl	af3e <is_ptr>
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d18b      	bne.n	1a26 <CONFIG_USB_DEVICE_VID+0x111>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	b9f3      	cbnz	r3, 1b50 <CONFIG_USB_DEVICE_VID+0x23b>
				keep_str_pos[keep_cnt++] = arg_idx;
    1b12:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1b16:	f107 0028 	add.w	r0, r7, #40	; 0x28
    1b1a:	4402      	add	r2, r0
    1b1c:	f109 0301 	add.w	r3, r9, #1
    1b20:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1b24:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1b28:	fa52 f383 	uxtab	r3, r2, r3
    1b2c:	f109 0902 	add.w	r9, r9, #2
    1b30:	fa5f f989 	uxtb.w	r9, r9
    1b34:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1b38:	e775      	b.n	1a26 <CONFIG_USB_DEVICE_VID+0x111>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1b3a:	693b      	ldr	r3, [r7, #16]
    1b3c:	b12b      	cbz	r3, 1b4a <CONFIG_USB_DEVICE_VID+0x235>
    1b3e:	69f8      	ldr	r0, [r7, #28]
    1b40:	f009 f9fd 	bl	af3e <is_ptr>
    1b44:	2800      	cmp	r0, #0
    1b46:	f47f af6e 	bne.w	1a26 <CONFIG_USB_DEVICE_VID+0x111>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1b4a:	f01b 0f01 	tst.w	fp, #1
    1b4e:	d009      	beq.n	1b64 <CONFIG_USB_DEVICE_VID+0x24f>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1b50:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1b54:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1b58:	1c73      	adds	r3, r6, #1
    1b5a:	1856      	adds	r6, r2, r1
    1b5c:	f806 5c20 	strb.w	r5, [r6, #-32]
    1b60:	b2de      	uxtb	r6, r3
    1b62:	e760      	b.n	1a26 <CONFIG_USB_DEVICE_VID+0x111>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1b64:	f01b 0f04 	tst.w	fp, #4
    1b68:	f43f af5d 	beq.w	1a26 <CONFIG_USB_DEVICE_VID+0x111>
				keep_str_pos[keep_cnt++] = arg_pos;
    1b6c:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1b70:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1b74:	f109 0301 	add.w	r3, r9, #1
    1b78:	eb02 0901 	add.w	r9, r2, r1
    1b7c:	f809 5c10 	strb.w	r5, [r9, #-16]
    1b80:	fa5f f983 	uxtb.w	r9, r3
    1b84:	e74f      	b.n	1a26 <CONFIG_USB_DEVICE_VID+0x111>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1b86:	2000      	movs	r0, #0
    1b88:	e765      	b.n	1a56 <CONFIG_USB_DEVICE_VID+0x141>
		uint8_t loc = cpy_str_pos[i];
    1b8a:	f81b 300a 	ldrb.w	r3, [fp, sl]
    1b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    1b92:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b98:	b1fb      	cbz	r3, 1bda <CONFIG_USB_DEVICE_VID+0x2c5>
    1b9a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    1b9e:	69ba      	ldr	r2, [r7, #24]
    1ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ba2:	2101      	movs	r1, #1
    1ba4:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    1ba8:	4798      	blx	r3
		if (rv < 0) {
    1baa:	2800      	cmp	r0, #0
    1bac:	db1a      	blt.n	1be4 <CONFIG_USB_DEVICE_VID+0x2cf>
		out_len += rv;
    1bae:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    1bb0:	f1b8 0f00 	cmp.w	r8, #0
    1bb4:	d106      	bne.n	1bc4 <CONFIG_USB_DEVICE_VID+0x2af>
    1bb6:	4648      	mov	r0, r9
    1bb8:	f00a faaa 	bl	c110 <strlen>
    1bbc:	f100 0801 	add.w	r8, r0, #1
    1bc0:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1bc4:	69ba      	ldr	r2, [r7, #24]
    1bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bc8:	4641      	mov	r1, r8
    1bca:	4648      	mov	r0, r9
    1bcc:	4798      	blx	r3
		if (rv < 0) {
    1bce:	2800      	cmp	r0, #0
    1bd0:	db08      	blt.n	1be4 <CONFIG_USB_DEVICE_VID+0x2cf>
		out_len += rv;
    1bd2:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1bd4:	f10b 0b01 	add.w	fp, fp, #1
    1bd8:	e774      	b.n	1ac4 <CONFIG_USB_DEVICE_VID+0x1af>
		uint16_t str_len = strl ? strl[i] : 0;
    1bda:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    1bde:	e7de      	b.n	1b9e <CONFIG_USB_DEVICE_VID+0x289>
    1be0:	4645      	mov	r5, r8
    1be2:	e65a      	b.n	189a <cbprintf_package_convert+0x5a>
    1be4:	4605      	mov	r5, r0
    1be6:	e658      	b.n	189a <cbprintf_package_convert+0x5a>
    1be8:	0000cf30 	.word	0x0000cf30
    1bec:	0000e5b0 	.word	0x0000e5b0
    1bf0:	0000d704 	.word	0x0000d704
    1bf4:	01000004 	.word	0x01000004
    1bf8:	0000d248 	.word	0x0000d248

00001bfc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1bfc:	4b01      	ldr	r3, [pc, #4]	; (1c04 <__printk_hook_install+0x8>)
    1bfe:	6018      	str	r0, [r3, #0]
}
    1c00:	4770      	bx	lr
    1c02:	bf00      	nop
    1c04:	200000b0 	.word	0x200000b0

00001c08 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1c08:	b530      	push	{r4, r5, lr}
    1c0a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1c0c:	2500      	movs	r5, #0
    1c0e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1c12:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1c14:	9500      	str	r5, [sp, #0]
    1c16:	a903      	add	r1, sp, #12
    1c18:	4805      	ldr	r0, [pc, #20]	; (1c30 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    1c1a:	9505      	str	r5, [sp, #20]
    1c1c:	f000 f918 	bl	1e50 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1c20:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1c24:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1c26:	bfb8      	it	lt
    1c28:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1c2a:	b007      	add	sp, #28
    1c2c:	bd30      	pop	{r4, r5, pc}
    1c2e:	bf00      	nop
    1c30:	0000af8d 	.word	0x0000af8d

00001c34 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c38:	8b05      	ldrh	r5, [r0, #24]
{
    1c3a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1c3c:	0728      	lsls	r0, r5, #28
{
    1c3e:	4690      	mov	r8, r2
	if (processing) {
    1c40:	d411      	bmi.n	1c66 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1c42:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c44:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1c48:	f040 80cd 	bne.w	1de6 <process_event+0x1b2>
			evt = process_recheck(mgr);
    1c4c:	4620      	mov	r0, r4
    1c4e:	f009 fbb4 	bl	b3ba <process_recheck>
		}

		if (evt == EVT_NOP) {
    1c52:	b178      	cbz	r0, 1c74 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1c54:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c56:	8b21      	ldrh	r1, [r4, #24]
    1c58:	2804      	cmp	r0, #4
    1c5a:	d811      	bhi.n	1c80 <process_event+0x4c>
    1c5c:	e8df f000 	tbb	[pc, r0]
    1c60:	856d10c3 	.word	0x856d10c3
    1c64:	95          	.byte	0x95
    1c65:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1c66:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c68:	bf0c      	ite	eq
    1c6a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c6e:	f045 0520 	orrne.w	r5, r5, #32
    1c72:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c74:	f388 8811 	msr	BASEPRI, r8
    1c78:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c80:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c84:	45aa      	cmp	sl, r5
    1c86:	f000 80a6 	beq.w	1dd6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1c8a:	2700      	movs	r7, #0
    1c8c:	46b9      	mov	r9, r7
    1c8e:	463e      	mov	r6, r7
    1c90:	68a3      	ldr	r3, [r4, #8]
    1c92:	2b00      	cmp	r3, #0
    1c94:	f000 80bd 	beq.w	1e12 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1c98:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1c9c:	8321      	strh	r1, [r4, #24]
    1c9e:	f388 8811 	msr	BASEPRI, r8
    1ca2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1ca6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ca8:	2900      	cmp	r1, #0
    1caa:	f000 80bb 	beq.w	1e24 <process_event+0x1f0>
	return node->next;
    1cae:	680d      	ldr	r5, [r1, #0]
    1cb0:	2900      	cmp	r1, #0
    1cb2:	f000 80b7 	beq.w	1e24 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1cb6:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1cba:	4633      	mov	r3, r6
    1cbc:	4652      	mov	r2, sl
    1cbe:	4620      	mov	r0, r4
    1cc0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1cc2:	2d00      	cmp	r5, #0
    1cc4:	d076      	beq.n	1db4 <process_event+0x180>
    1cc6:	682b      	ldr	r3, [r5, #0]
    1cc8:	4629      	mov	r1, r5
    1cca:	461d      	mov	r5, r3
    1ccc:	e7f0      	b.n	1cb0 <process_event+0x7c>
    1cce:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1cd2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1cd4:	2a01      	cmp	r2, #1
    1cd6:	d81b      	bhi.n	1d10 <process_event+0xdc>
	list->head = NULL;
    1cd8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cda:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1cde:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1ce0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ce2:	b289      	uxth	r1, r1
	list->tail = NULL;
    1ce4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1ce8:	d109      	bne.n	1cfe <process_event+0xca>
    1cea:	463b      	mov	r3, r7
    1cec:	e003      	b.n	1cf6 <process_event+0xc2>
				mgr->refs += 1U;
    1cee:	8b62      	ldrh	r2, [r4, #26]
    1cf0:	3201      	adds	r2, #1
    1cf2:	8362      	strh	r2, [r4, #26]
	return node->next;
    1cf4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d1f9      	bne.n	1cee <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cfa:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cfe:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1d00:	4620      	mov	r0, r4
    1d02:	f009 fb5a 	bl	b3ba <process_recheck>
    1d06:	2800      	cmp	r0, #0
    1d08:	d07b      	beq.n	1e02 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d0a:	f041 0120 	orr.w	r1, r1, #32
    1d0e:	e077      	b.n	1e00 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1d10:	2b04      	cmp	r3, #4
    1d12:	d10a      	bne.n	1d2a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d14:	f021 0107 	bic.w	r1, r1, #7
    1d18:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d1a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1d1c:	4620      	mov	r0, r4
    1d1e:	f009 fb4c 	bl	b3ba <process_recheck>
    1d22:	b110      	cbz	r0, 1d2a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d24:	f041 0120 	orr.w	r1, r1, #32
    1d28:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d2a:	8b21      	ldrh	r1, [r4, #24]
    1d2c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1d30:	45aa      	cmp	sl, r5
    1d32:	d050      	beq.n	1dd6 <process_event+0x1a2>
    1d34:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1d36:	46b9      	mov	r9, r7
    1d38:	e7aa      	b.n	1c90 <process_event+0x5c>
			transit = mgr->transitions->start;
    1d3a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d3c:	f021 0107 	bic.w	r1, r1, #7
    1d40:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1d44:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1d46:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d4a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1d4c:	d12d      	bne.n	1daa <process_event+0x176>
		    || (transit != NULL)) {
    1d4e:	f1b9 0f00 	cmp.w	r9, #0
    1d52:	d040      	beq.n	1dd6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1d54:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1d58:	8321      	strh	r1, [r4, #24]
    1d5a:	f388 8811 	msr	BASEPRI, r8
    1d5e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1d62:	493a      	ldr	r1, [pc, #232]	; (1e4c <process_event+0x218>)
    1d64:	4620      	mov	r0, r4
    1d66:	47c8      	blx	r9
    1d68:	e029      	b.n	1dbe <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d6a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1d6e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d70:	f041 0104 	orr.w	r1, r1, #4
    1d74:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1d76:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1d78:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d7c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1d7e:	d0e6      	beq.n	1d4e <process_event+0x11a>
    1d80:	2700      	movs	r7, #0
		res = 0;
    1d82:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d84:	f04f 0a04 	mov.w	sl, #4
    1d88:	e782      	b.n	1c90 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d8a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1d8e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d90:	f041 0105 	orr.w	r1, r1, #5
    1d94:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1d96:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1d98:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d9c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1d9e:	d0d6      	beq.n	1d4e <process_event+0x11a>
    1da0:	2700      	movs	r7, #0
		res = 0;
    1da2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1da4:	f04f 0a05 	mov.w	sl, #5
    1da8:	e772      	b.n	1c90 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1daa:	2700      	movs	r7, #0
		res = 0;
    1dac:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1dae:	f04f 0a06 	mov.w	sl, #6
    1db2:	e76d      	b.n	1c90 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1db4:	462b      	mov	r3, r5
    1db6:	e787      	b.n	1cc8 <process_event+0x94>
			if (transit != NULL) {
    1db8:	f1b9 0f00 	cmp.w	r9, #0
    1dbc:	d1d1      	bne.n	1d62 <process_event+0x12e>
	__asm__ volatile(
    1dbe:	f04f 0320 	mov.w	r3, #32
    1dc2:	f3ef 8811 	mrs	r8, BASEPRI
    1dc6:	f383 8812 	msr	BASEPRI_MAX, r3
    1dca:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1dce:	8b23      	ldrh	r3, [r4, #24]
    1dd0:	f023 0308 	bic.w	r3, r3, #8
    1dd4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1dd6:	8b25      	ldrh	r5, [r4, #24]
    1dd8:	06ea      	lsls	r2, r5, #27
    1dda:	d52e      	bpl.n	1e3a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1ddc:	f025 0310 	bic.w	r3, r5, #16
    1de0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1de2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1de6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1de8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1dea:	2e00      	cmp	r6, #0
    1dec:	f6bf af6f 	bge.w	1cce <process_event+0x9a>
	list->head = NULL;
    1df0:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1df2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1df4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1df8:	f021 0107 	bic.w	r1, r1, #7
    1dfc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e00:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e02:	8b21      	ldrh	r1, [r4, #24]
    1e04:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e08:	45aa      	cmp	sl, r5
    1e0a:	f04f 0900 	mov.w	r9, #0
    1e0e:	f47f af3f 	bne.w	1c90 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1e12:	2f00      	cmp	r7, #0
    1e14:	d09b      	beq.n	1d4e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1e16:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1e1a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1e1c:	f388 8811 	msr	BASEPRI, r8
    1e20:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1e24:	2f00      	cmp	r7, #0
    1e26:	d0c7      	beq.n	1db8 <process_event+0x184>
	return node->next;
    1e28:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1e2a:	4639      	mov	r1, r7
    1e2c:	4633      	mov	r3, r6
    1e2e:	4652      	mov	r2, sl
    1e30:	4620      	mov	r0, r4
    1e32:	f009 faee 	bl	b412 <notify_one>
	list->head = node;
    1e36:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1e38:	e7f4      	b.n	1e24 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1e3a:	06ab      	lsls	r3, r5, #26
    1e3c:	f57f af1a 	bpl.w	1c74 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1e40:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1e44:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1e46:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1e4a:	e6ff      	b.n	1c4c <process_event+0x18>
    1e4c:	0000b43f 	.word	0x0000b43f

00001e50 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e54:	4681      	mov	r9, r0
    1e56:	b095      	sub	sp, #84	; 0x54
    1e58:	468b      	mov	fp, r1
    1e5a:	4617      	mov	r7, r2
    1e5c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1e5e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1e60:	7838      	ldrb	r0, [r7, #0]
    1e62:	b908      	cbnz	r0, 1e68 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1e64:	4628      	mov	r0, r5
    1e66:	e358      	b.n	251a <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    1e68:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    1e6a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1e6c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1e6e:	d006      	beq.n	1e7e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1e70:	4659      	mov	r1, fp
    1e72:	47c8      	blx	r9
    1e74:	2800      	cmp	r0, #0
    1e76:	f2c0 8350 	blt.w	251a <z_cbvprintf_impl+0x6ca>
    1e7a:	3501      	adds	r5, #1
		if (bps == NULL) {
    1e7c:	e1fb      	b.n	2276 <z_cbvprintf_impl+0x426>
		} state = {
    1e7e:	2218      	movs	r2, #24
    1e80:	2100      	movs	r1, #0
    1e82:	a80e      	add	r0, sp, #56	; 0x38
    1e84:	f00a f95f 	bl	c146 <memset>
	if (*sp == '%') {
    1e88:	787b      	ldrb	r3, [r7, #1]
    1e8a:	2b25      	cmp	r3, #37	; 0x25
    1e8c:	d07d      	beq.n	1f8a <z_cbvprintf_impl+0x13a>
    1e8e:	2300      	movs	r3, #0
    1e90:	1c78      	adds	r0, r7, #1
    1e92:	4698      	mov	r8, r3
    1e94:	469e      	mov	lr, r3
    1e96:	469c      	mov	ip, r3
    1e98:	461e      	mov	r6, r3
    1e9a:	4601      	mov	r1, r0
		switch (*sp) {
    1e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1ea0:	2a2b      	cmp	r2, #43	; 0x2b
    1ea2:	f000 80a1 	beq.w	1fe8 <z_cbvprintf_impl+0x198>
    1ea6:	f200 8098 	bhi.w	1fda <z_cbvprintf_impl+0x18a>
    1eaa:	2a20      	cmp	r2, #32
    1eac:	f000 809f 	beq.w	1fee <z_cbvprintf_impl+0x19e>
    1eb0:	2a23      	cmp	r2, #35	; 0x23
    1eb2:	f000 809f 	beq.w	1ff4 <z_cbvprintf_impl+0x1a4>
    1eb6:	b12b      	cbz	r3, 1ec4 <z_cbvprintf_impl+0x74>
    1eb8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ec0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1ec4:	f1b8 0f00 	cmp.w	r8, #0
    1ec8:	d005      	beq.n	1ed6 <z_cbvprintf_impl+0x86>
    1eca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ece:	f043 0320 	orr.w	r3, r3, #32
    1ed2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1ed6:	f1be 0f00 	cmp.w	lr, #0
    1eda:	d005      	beq.n	1ee8 <z_cbvprintf_impl+0x98>
    1edc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ee0:	f043 0310 	orr.w	r3, r3, #16
    1ee4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1ee8:	f1bc 0f00 	cmp.w	ip, #0
    1eec:	d005      	beq.n	1efa <z_cbvprintf_impl+0xaa>
    1eee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ef2:	f043 0308 	orr.w	r3, r3, #8
    1ef6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1efa:	b12e      	cbz	r6, 1f08 <z_cbvprintf_impl+0xb8>
    1efc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1f00:	f043 0304 	orr.w	r3, r3, #4
    1f04:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1f08:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1f0c:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1f10:	2844      	cmp	r0, #68	; 0x44
    1f12:	d103      	bne.n	1f1c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1f14:	f36f 1386 	bfc	r3, #6, #1
    1f18:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1f1c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1f20:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1f2a:	d17f      	bne.n	202c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1f2c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1f30:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1f34:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1f36:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1f3a:	781a      	ldrb	r2, [r3, #0]
    1f3c:	2a2e      	cmp	r2, #46	; 0x2e
    1f3e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1f42:	bf0c      	ite	eq
    1f44:	2101      	moveq	r1, #1
    1f46:	2100      	movne	r1, #0
    1f48:	f361 0241 	bfi	r2, r1, #1, #1
    1f4c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1f50:	d178      	bne.n	2044 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    1f52:	785a      	ldrb	r2, [r3, #1]
    1f54:	2a2a      	cmp	r2, #42	; 0x2a
    1f56:	d06e      	beq.n	2036 <z_cbvprintf_impl+0x1e6>
	++sp;
    1f58:	3301      	adds	r3, #1
	size_t val = 0;
    1f5a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1f5c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1f60:	4619      	mov	r1, r3
    1f62:	f811 0b01 	ldrb.w	r0, [r1], #1
    1f66:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1f6a:	2e09      	cmp	r6, #9
    1f6c:	f240 8095 	bls.w	209a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    1f70:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1f74:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1f76:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1f7a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1f7e:	460a      	mov	r2, r1
    1f80:	f360 0241 	bfi	r2, r0, #1, #1
    1f84:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1f88:	e05c      	b.n	2044 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    1f8a:	1cba      	adds	r2, r7, #2
    1f8c:	9203      	str	r2, [sp, #12]
    1f8e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1f92:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1f96:	07da      	lsls	r2, r3, #31
    1f98:	f140 812e 	bpl.w	21f8 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    1f9c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1fa0:	f1b8 0f00 	cmp.w	r8, #0
    1fa4:	da07      	bge.n	1fb6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    1fa6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1faa:	f042 0204 	orr.w	r2, r2, #4
    1fae:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1fb2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1fb6:	075e      	lsls	r6, r3, #29
    1fb8:	f140 8127 	bpl.w	220a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1fbc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1fc0:	f1ba 0f00 	cmp.w	sl, #0
    1fc4:	f280 8126 	bge.w	2214 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    1fc8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1fcc:	f36f 0341 	bfc	r3, #1, #1
    1fd0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1fd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1fd8:	e11c      	b.n	2214 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    1fda:	2a2d      	cmp	r2, #45	; 0x2d
    1fdc:	d00d      	beq.n	1ffa <z_cbvprintf_impl+0x1aa>
    1fde:	2a30      	cmp	r2, #48	; 0x30
    1fe0:	f47f af69 	bne.w	1eb6 <z_cbvprintf_impl+0x66>
    1fe4:	2301      	movs	r3, #1
	} while (loop);
    1fe6:	e758      	b.n	1e9a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1fe8:	f04f 0c01 	mov.w	ip, #1
    1fec:	e755      	b.n	1e9a <z_cbvprintf_impl+0x4a>
    1fee:	f04f 0e01 	mov.w	lr, #1
    1ff2:	e752      	b.n	1e9a <z_cbvprintf_impl+0x4a>
    1ff4:	f04f 0801 	mov.w	r8, #1
    1ff8:	e74f      	b.n	1e9a <z_cbvprintf_impl+0x4a>
    1ffa:	2601      	movs	r6, #1
    1ffc:	e74d      	b.n	1e9a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1ffe:	fb0e 6202 	mla	r2, lr, r2, r6
    2002:	3a30      	subs	r2, #48	; 0x30
    2004:	4603      	mov	r3, r0
    2006:	4618      	mov	r0, r3
    2008:	f810 6b01 	ldrb.w	r6, [r0], #1
    200c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    2010:	f1bc 0f09 	cmp.w	ip, #9
    2014:	d9f3      	bls.n	1ffe <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    2016:	4299      	cmp	r1, r3
    2018:	d08f      	beq.n	1f3a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    201a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    201e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    2020:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2022:	f362 0141 	bfi	r1, r2, #1, #1
    2026:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    202a:	e786      	b.n	1f3a <z_cbvprintf_impl+0xea>
    202c:	460b      	mov	r3, r1
	size_t val = 0;
    202e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2030:	f04f 0e0a 	mov.w	lr, #10
    2034:	e7e7      	b.n	2006 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    2036:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    203a:	f042 0204 	orr.w	r2, r2, #4
    203e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    2042:	3302      	adds	r3, #2
	switch (*sp) {
    2044:	781a      	ldrb	r2, [r3, #0]
    2046:	2a6c      	cmp	r2, #108	; 0x6c
    2048:	d047      	beq.n	20da <z_cbvprintf_impl+0x28a>
    204a:	d82b      	bhi.n	20a4 <z_cbvprintf_impl+0x254>
    204c:	2a68      	cmp	r2, #104	; 0x68
    204e:	d031      	beq.n	20b4 <z_cbvprintf_impl+0x264>
    2050:	2a6a      	cmp	r2, #106	; 0x6a
    2052:	d04b      	beq.n	20ec <z_cbvprintf_impl+0x29c>
    2054:	2a4c      	cmp	r2, #76	; 0x4c
    2056:	d051      	beq.n	20fc <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    2058:	461a      	mov	r2, r3
    205a:	f812 3b01 	ldrb.w	r3, [r2], #1
    205e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    2060:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    2062:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    2066:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    206a:	f200 80be 	bhi.w	21ea <z_cbvprintf_impl+0x39a>
    206e:	2b6d      	cmp	r3, #109	; 0x6d
    2070:	d851      	bhi.n	2116 <z_cbvprintf_impl+0x2c6>
    2072:	2b69      	cmp	r3, #105	; 0x69
    2074:	f200 80b9 	bhi.w	21ea <z_cbvprintf_impl+0x39a>
    2078:	2b57      	cmp	r3, #87	; 0x57
    207a:	d867      	bhi.n	214c <z_cbvprintf_impl+0x2fc>
    207c:	2b41      	cmp	r3, #65	; 0x41
    207e:	d003      	beq.n	2088 <z_cbvprintf_impl+0x238>
    2080:	3b45      	subs	r3, #69	; 0x45
    2082:	2b02      	cmp	r3, #2
    2084:	f200 80b1 	bhi.w	21ea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    2088:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    208c:	2204      	movs	r2, #4
    208e:	f362 0302 	bfi	r3, r2, #0, #3
    2092:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    2096:	2301      	movs	r3, #1
			break;
    2098:	e073      	b.n	2182 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    209a:	fb0c 0202 	mla	r2, ip, r2, r0
    209e:	3a30      	subs	r2, #48	; 0x30
    20a0:	460b      	mov	r3, r1
    20a2:	e75d      	b.n	1f60 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    20a4:	2a74      	cmp	r2, #116	; 0x74
    20a6:	d025      	beq.n	20f4 <z_cbvprintf_impl+0x2a4>
    20a8:	2a7a      	cmp	r2, #122	; 0x7a
    20aa:	d1d5      	bne.n	2058 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    20ac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    20b0:	2106      	movs	r1, #6
    20b2:	e00c      	b.n	20ce <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    20b4:	785a      	ldrb	r2, [r3, #1]
    20b6:	2a68      	cmp	r2, #104	; 0x68
    20b8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    20bc:	d106      	bne.n	20cc <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    20be:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    20c0:	f361 02c6 	bfi	r2, r1, #3, #4
    20c4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    20c8:	3302      	adds	r3, #2
    20ca:	e7c5      	b.n	2058 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    20cc:	2102      	movs	r1, #2
    20ce:	f361 02c6 	bfi	r2, r1, #3, #4
    20d2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    20d6:	3301      	adds	r3, #1
    20d8:	e7be      	b.n	2058 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    20da:	785a      	ldrb	r2, [r3, #1]
    20dc:	2a6c      	cmp	r2, #108	; 0x6c
    20de:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    20e2:	d101      	bne.n	20e8 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    20e4:	2104      	movs	r1, #4
    20e6:	e7eb      	b.n	20c0 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    20e8:	2103      	movs	r1, #3
    20ea:	e7f0      	b.n	20ce <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    20ec:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    20f0:	2105      	movs	r1, #5
    20f2:	e7ec      	b.n	20ce <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    20f4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    20f8:	2107      	movs	r1, #7
    20fa:	e7e8      	b.n	20ce <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    20fc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    2100:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2104:	f022 0202 	bic.w	r2, r2, #2
    2108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    210c:	f042 0202 	orr.w	r2, r2, #2
    2110:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    2114:	e7df      	b.n	20d6 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    2116:	3b6e      	subs	r3, #110	; 0x6e
    2118:	b2d9      	uxtb	r1, r3
    211a:	2301      	movs	r3, #1
    211c:	408b      	lsls	r3, r1
    211e:	f240 4182 	movw	r1, #1154	; 0x482
    2122:	420b      	tst	r3, r1
    2124:	d137      	bne.n	2196 <z_cbvprintf_impl+0x346>
    2126:	f013 0f24 	tst.w	r3, #36	; 0x24
    212a:	d151      	bne.n	21d0 <z_cbvprintf_impl+0x380>
    212c:	07d8      	lsls	r0, r3, #31
    212e:	d55c      	bpl.n	21ea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    2130:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2134:	2103      	movs	r1, #3
    2136:	f361 0302 	bfi	r3, r1, #0, #3
    213a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    213e:	f002 0378 	and.w	r3, r2, #120	; 0x78
    2142:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    2146:	424b      	negs	r3, r1
    2148:	414b      	adcs	r3, r1
    214a:	e01a      	b.n	2182 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    214c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    2150:	b2c9      	uxtb	r1, r1
    2152:	2001      	movs	r0, #1
    2154:	fa00 f101 	lsl.w	r1, r0, r1
    2158:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    215c:	d194      	bne.n	2088 <z_cbvprintf_impl+0x238>
    215e:	f640 0601 	movw	r6, #2049	; 0x801
    2162:	4231      	tst	r1, r6
    2164:	d11d      	bne.n	21a2 <z_cbvprintf_impl+0x352>
    2166:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    216a:	d03e      	beq.n	21ea <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    216c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2170:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2174:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2178:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    217a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    217e:	d034      	beq.n	21ea <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    2180:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    2182:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    2186:	f3c2 0140 	ubfx	r1, r2, #1, #1
    218a:	430b      	orrs	r3, r1
    218c:	f363 0241 	bfi	r2, r3, #1, #1
    2190:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    2194:	e6fd      	b.n	1f92 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    2196:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    219a:	2102      	movs	r1, #2
    219c:	f361 0302 	bfi	r3, r1, #0, #3
    21a0:	e7e8      	b.n	2174 <z_cbvprintf_impl+0x324>
    21a2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    21a6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    21a8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    21ac:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    21b0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    21b2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    21b6:	bf02      	ittt	eq
    21b8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    21bc:	f041 0101 	orreq.w	r1, r1, #1
    21c0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    21c4:	2b63      	cmp	r3, #99	; 0x63
    21c6:	d1db      	bne.n	2180 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    21c8:	1e13      	subs	r3, r2, #0
    21ca:	bf18      	it	ne
    21cc:	2301      	movne	r3, #1
    21ce:	e7d8      	b.n	2182 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    21d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    21d4:	2103      	movs	r1, #3
    21d6:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    21da:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    21de:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    21e2:	bf14      	ite	ne
    21e4:	2301      	movne	r3, #1
    21e6:	2300      	moveq	r3, #0
    21e8:	e7cb      	b.n	2182 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    21ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    21ee:	f043 0301 	orr.w	r3, r3, #1
    21f2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    21f6:	e7c3      	b.n	2180 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    21f8:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    21fc:	2a00      	cmp	r2, #0
			width = conv->width_value;
    21fe:	bfb4      	ite	lt
    2200:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    2204:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    2208:	e6d5      	b.n	1fb6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    220a:	0798      	lsls	r0, r3, #30
    220c:	f57f aee2 	bpl.w	1fd4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    2210:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    2214:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    2218:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    221a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    221e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    2222:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2226:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2228:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    222c:	d133      	bne.n	2296 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    222e:	1ecb      	subs	r3, r1, #3
    2230:	2b04      	cmp	r3, #4
    2232:	d804      	bhi.n	223e <z_cbvprintf_impl+0x3ee>
    2234:	e8df f003 	tbb	[pc, r3]
    2238:	21464621 	.word	0x21464621
    223c:	21          	.byte	0x21
    223d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    223e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2240:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2242:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2246:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    224a:	d11c      	bne.n	2286 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    224c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    2250:	17da      	asrs	r2, r3, #31
    2252:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    2256:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2258:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    225c:	f013 0603 	ands.w	r6, r3, #3
    2260:	d050      	beq.n	2304 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    2262:	9b03      	ldr	r3, [sp, #12]
    2264:	463a      	mov	r2, r7
    2266:	4659      	mov	r1, fp
    2268:	4648      	mov	r0, r9
    226a:	f009 fa06 	bl	b67a <outs>
    226e:	2800      	cmp	r0, #0
    2270:	f2c0 8153 	blt.w	251a <z_cbvprintf_impl+0x6ca>
    2274:	4405      	add	r5, r0
			continue;
    2276:	9f03      	ldr	r7, [sp, #12]
    2278:	e5f2      	b.n	1e60 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    227a:	f854 3b04 	ldr.w	r3, [r4], #4
    227e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    2280:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    2284:	e7e8      	b.n	2258 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    2286:	2902      	cmp	r1, #2
    2288:	d1e5      	bne.n	2256 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    228a:	b21a      	sxth	r2, r3
    228c:	f343 33c0 	sbfx	r3, r3, #15, #1
    2290:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    2294:	e7df      	b.n	2256 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2296:	2b02      	cmp	r3, #2
    2298:	d124      	bne.n	22e4 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    229a:	1ecb      	subs	r3, r1, #3
    229c:	2b04      	cmp	r3, #4
    229e:	d804      	bhi.n	22aa <z_cbvprintf_impl+0x45a>
    22a0:	e8df f003 	tbb	[pc, r3]
    22a4:	18101018 	.word	0x18101018
    22a8:	18          	.byte	0x18
    22a9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    22aa:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    22ac:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    22b0:	f04f 0200 	mov.w	r2, #0
    22b4:	d014      	beq.n	22e0 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    22b6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    22b8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    22bc:	d1cc      	bne.n	2258 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    22be:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    22c0:	930e      	str	r3, [sp, #56]	; 0x38
    22c2:	e7c9      	b.n	2258 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    22c4:	3407      	adds	r4, #7
    22c6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    22ca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    22ce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    22d2:	e7c1      	b.n	2258 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    22d4:	f854 3b04 	ldr.w	r3, [r4], #4
    22d8:	930e      	str	r3, [sp, #56]	; 0x38
    22da:	2300      	movs	r3, #0
    22dc:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    22de:	e7bb      	b.n	2258 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    22e0:	b2db      	uxtb	r3, r3
    22e2:	e7cd      	b.n	2280 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    22e4:	2b04      	cmp	r3, #4
    22e6:	d108      	bne.n	22fa <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    22e8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    22ea:	f024 0407 	bic.w	r4, r4, #7
    22ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    22f2:	3408      	adds	r4, #8
    22f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    22f8:	e7ae      	b.n	2258 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    22fa:	2b03      	cmp	r3, #3
    22fc:	d1ac      	bne.n	2258 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    22fe:	f854 3b04 	ldr.w	r3, [r4], #4
    2302:	e7dd      	b.n	22c0 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    2304:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    2308:	2878      	cmp	r0, #120	; 0x78
    230a:	d8b4      	bhi.n	2276 <z_cbvprintf_impl+0x426>
    230c:	2862      	cmp	r0, #98	; 0x62
    230e:	d81c      	bhi.n	234a <z_cbvprintf_impl+0x4fa>
    2310:	2825      	cmp	r0, #37	; 0x25
    2312:	f43f adad 	beq.w	1e70 <z_cbvprintf_impl+0x20>
    2316:	2858      	cmp	r0, #88	; 0x58
    2318:	d1ad      	bne.n	2276 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    231a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    231e:	9300      	str	r3, [sp, #0]
    2320:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    2324:	ab08      	add	r3, sp, #32
    2326:	aa10      	add	r2, sp, #64	; 0x40
    2328:	f009 f961 	bl	b5ee <encode_uint>
			if (precision >= 0) {
    232c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    2330:	4607      	mov	r7, r0
			if (precision >= 0) {
    2332:	f280 809a 	bge.w	246a <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    2336:	2f00      	cmp	r7, #0
    2338:	d09d      	beq.n	2276 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    233a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    233e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    2340:	2e00      	cmp	r6, #0
    2342:	f000 80c1 	beq.w	24c8 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    2346:	3001      	adds	r0, #1
    2348:	e0be      	b.n	24c8 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    234a:	3863      	subs	r0, #99	; 0x63
    234c:	2815      	cmp	r0, #21
    234e:	d892      	bhi.n	2276 <z_cbvprintf_impl+0x426>
    2350:	a201      	add	r2, pc, #4	; (adr r2, 2358 <z_cbvprintf_impl+0x508>)
    2352:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2356:	bf00      	nop
    2358:	0000242d 	.word	0x0000242d
    235c:	0000243f 	.word	0x0000243f
    2360:	00002277 	.word	0x00002277
    2364:	00002277 	.word	0x00002277
    2368:	00002277 	.word	0x00002277
    236c:	00002277 	.word	0x00002277
    2370:	0000243f 	.word	0x0000243f
    2374:	00002277 	.word	0x00002277
    2378:	00002277 	.word	0x00002277
    237c:	00002277 	.word	0x00002277
    2380:	00002277 	.word	0x00002277
    2384:	000024cd 	.word	0x000024cd
    2388:	00002465 	.word	0x00002465
    238c:	0000248b 	.word	0x0000248b
    2390:	00002277 	.word	0x00002277
    2394:	00002277 	.word	0x00002277
    2398:	000023b1 	.word	0x000023b1
    239c:	00002277 	.word	0x00002277
    23a0:	00002465 	.word	0x00002465
    23a4:	00002277 	.word	0x00002277
    23a8:	00002277 	.word	0x00002277
    23ac:	00002465 	.word	0x00002465
			if (precision >= 0) {
    23b0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    23b4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    23b6:	db35      	blt.n	2424 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    23b8:	4651      	mov	r1, sl
    23ba:	4638      	mov	r0, r7
    23bc:	f009 feaf 	bl	c11e <strnlen>
			bpe = bps + len;
    23c0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    23c4:	2f00      	cmp	r7, #0
    23c6:	f43f af56 	beq.w	2276 <z_cbvprintf_impl+0x426>
		char sign = 0;
    23ca:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    23cc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    23d0:	f013 0210 	ands.w	r2, r3, #16
    23d4:	9205      	str	r2, [sp, #20]
    23d6:	f000 8093 	beq.w	2500 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    23da:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    23dc:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    23de:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    23e0:	bf48      	it	mi
    23e2:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    23e4:	9204      	str	r2, [sp, #16]
    23e6:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    23e8:	bf48      	it	mi
    23ea:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    23ec:	f1b8 0f00 	cmp.w	r8, #0
    23f0:	f340 80a0 	ble.w	2534 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    23f4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    23f8:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    23fc:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2400:	0750      	lsls	r0, r2, #29
    2402:	9306      	str	r3, [sp, #24]
    2404:	f100 8096 	bmi.w	2534 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    2408:	0651      	lsls	r1, r2, #25
    240a:	f140 8089 	bpl.w	2520 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    240e:	b13e      	cbz	r6, 2420 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    2410:	4659      	mov	r1, fp
    2412:	4630      	mov	r0, r6
    2414:	47c8      	blx	r9
    2416:	2800      	cmp	r0, #0
    2418:	db7f      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    241a:	9b06      	ldr	r3, [sp, #24]
    241c:	3501      	adds	r5, #1
    241e:	461e      	mov	r6, r3
					pad = '0';
    2420:	2230      	movs	r2, #48	; 0x30
    2422:	e07e      	b.n	2522 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    2424:	4638      	mov	r0, r7
    2426:	f009 fe73 	bl	c110 <strlen>
    242a:	e7c9      	b.n	23c0 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    242c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    242e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    2432:	2600      	movs	r6, #0
			bps = buf;
    2434:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    2436:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    243a:	2001      	movs	r0, #1
    243c:	e7c6      	b.n	23cc <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    243e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    2440:	bf5c      	itt	pl
    2442:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    2446:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    2448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    244c:	bf48      	it	mi
    244e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    2450:	2b00      	cmp	r3, #0
    2452:	f6bf af62 	bge.w	231a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    2456:	4252      	negs	r2, r2
    2458:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    245c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    2460:	262d      	movs	r6, #45	; 0x2d
    2462:	e75a      	b.n	231a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    2464:	2600      	movs	r6, #0
    2466:	e758      	b.n	231a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    2468:	2600      	movs	r6, #0
				conv->flag_zero = false;
    246a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    246e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2472:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2474:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2478:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    247a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    247e:	f67f af5a 	bls.w	2336 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    2482:	ebaa 0303 	sub.w	r3, sl, r3
    2486:	9311      	str	r3, [sp, #68]	; 0x44
    2488:	e755      	b.n	2336 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    248a:	980e      	ldr	r0, [sp, #56]	; 0x38
    248c:	b390      	cbz	r0, 24f4 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    248e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2492:	9300      	str	r3, [sp, #0]
    2494:	aa10      	add	r2, sp, #64	; 0x40
    2496:	ab08      	add	r3, sp, #32
    2498:	2100      	movs	r1, #0
    249a:	f009 f8a8 	bl	b5ee <encode_uint>
				conv->altform_0c = true;
    249e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    24a2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    24a6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    24aa:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    24ae:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    24b2:	4607      	mov	r7, r0
				conv->altform_0c = true;
    24b4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    24b8:	dad6      	bge.n	2468 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    24ba:	2800      	cmp	r0, #0
    24bc:	f43f aedb 	beq.w	2276 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    24c0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    24c4:	1a18      	subs	r0, r3, r0
		char sign = 0;
    24c6:	2600      	movs	r6, #0
    24c8:	469a      	mov	sl, r3
    24ca:	e77f      	b.n	23cc <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    24cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    24ce:	2907      	cmp	r1, #7
    24d0:	f63f aed1 	bhi.w	2276 <z_cbvprintf_impl+0x426>
    24d4:	e8df f001 	tbb	[pc, r1]
    24d8:	0c06040c 	.word	0x0c06040c
    24dc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    24e0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    24e2:	e6c8      	b.n	2276 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    24e4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    24e6:	e6c6      	b.n	2276 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    24e8:	17ea      	asrs	r2, r5, #31
    24ea:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    24ee:	e6c2      	b.n	2276 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    24f0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    24f2:	e6c0      	b.n	2276 <z_cbvprintf_impl+0x426>
    24f4:	4f2e      	ldr	r7, [pc, #184]	; (25b0 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    24f6:	4606      	mov	r6, r0
			bpe = bps + 5;
    24f8:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    24fc:	2005      	movs	r0, #5
    24fe:	e765      	b.n	23cc <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    2500:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2502:	bf48      	it	mi
    2504:	3001      	addmi	r0, #1
    2506:	e769      	b.n	23dc <z_cbvprintf_impl+0x58c>
    2508:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    250a:	4610      	mov	r0, r2
    250c:	9206      	str	r2, [sp, #24]
    250e:	4659      	mov	r1, fp
    2510:	47c8      	blx	r9
    2512:	2800      	cmp	r0, #0
    2514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2518:	da04      	bge.n	2524 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    251a:	b015      	add	sp, #84	; 0x54
    251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2520:	2220      	movs	r2, #32
					pad = '0';
    2522:	4643      	mov	r3, r8
				while (width-- > 0) {
    2524:	4619      	mov	r1, r3
    2526:	2900      	cmp	r1, #0
    2528:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    252c:	dcec      	bgt.n	2508 <z_cbvprintf_impl+0x6b8>
    252e:	4445      	add	r5, r8
    2530:	1a6d      	subs	r5, r5, r1
    2532:	4698      	mov	r8, r3
		if (sign != 0) {
    2534:	b12e      	cbz	r6, 2542 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    2536:	4659      	mov	r1, fp
    2538:	4630      	mov	r0, r6
    253a:	47c8      	blx	r9
    253c:	2800      	cmp	r0, #0
    253e:	dbec      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    2540:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2542:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2546:	06da      	lsls	r2, r3, #27
    2548:	d401      	bmi.n	254e <z_cbvprintf_impl+0x6fe>
    254a:	071b      	lsls	r3, r3, #28
    254c:	d505      	bpl.n	255a <z_cbvprintf_impl+0x70a>
				OUTC('0');
    254e:	4659      	mov	r1, fp
    2550:	2030      	movs	r0, #48	; 0x30
    2552:	47c8      	blx	r9
    2554:	2800      	cmp	r0, #0
    2556:	dbe0      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    2558:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    255a:	9b05      	ldr	r3, [sp, #20]
    255c:	b133      	cbz	r3, 256c <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    255e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    2562:	4659      	mov	r1, fp
    2564:	47c8      	blx	r9
    2566:	2800      	cmp	r0, #0
    2568:	dbd7      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    256a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    256c:	9e04      	ldr	r6, [sp, #16]
    256e:	442e      	add	r6, r5
    2570:	e005      	b.n	257e <z_cbvprintf_impl+0x72e>
				OUTC('0');
    2572:	4659      	mov	r1, fp
    2574:	2030      	movs	r0, #48	; 0x30
    2576:	47c8      	blx	r9
    2578:	2800      	cmp	r0, #0
    257a:	dbce      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    257c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    257e:	1b73      	subs	r3, r6, r5
    2580:	2b00      	cmp	r3, #0
    2582:	dcf6      	bgt.n	2572 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    2584:	4653      	mov	r3, sl
    2586:	463a      	mov	r2, r7
    2588:	4659      	mov	r1, fp
    258a:	4648      	mov	r0, r9
    258c:	f009 f875 	bl	b67a <outs>
    2590:	2800      	cmp	r0, #0
    2592:	dbc2      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    2594:	4405      	add	r5, r0
		while (width > 0) {
    2596:	44a8      	add	r8, r5
    2598:	eba8 0305 	sub.w	r3, r8, r5
    259c:	2b00      	cmp	r3, #0
    259e:	f77f ae6a 	ble.w	2276 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    25a2:	4659      	mov	r1, fp
    25a4:	2020      	movs	r0, #32
    25a6:	47c8      	blx	r9
    25a8:	2800      	cmp	r0, #0
    25aa:	dbb6      	blt.n	251a <z_cbvprintf_impl+0x6ca>
    25ac:	3501      	adds	r5, #1
			--width;
    25ae:	e7f3      	b.n	2598 <z_cbvprintf_impl+0x748>
    25b0:	0000d7b8 	.word	0x0000d7b8

000025b4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    25b4:	b508      	push	{r3, lr}
    25b6:	4604      	mov	r4, r0
	__asm__ volatile(
    25b8:	f04f 0220 	mov.w	r2, #32
    25bc:	f3ef 8311 	mrs	r3, BASEPRI
    25c0:	f382 8812 	msr	BASEPRI_MAX, r2
    25c4:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    25c8:	f004 fef2 	bl	73b0 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    25cc:	4620      	mov	r0, r4
    25ce:	f003 f815 	bl	55fc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    25d2:	4803      	ldr	r0, [pc, #12]	; (25e0 <sys_reboot+0x2c>)
    25d4:	f008 fced 	bl	afb2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    25d8:	f002 f9c0 	bl	495c <arch_cpu_idle>
    25dc:	e7fc      	b.n	25d8 <sys_reboot+0x24>
    25de:	bf00      	nop
    25e0:	0000d7be 	.word	0x0000d7be

000025e4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    25e4:	f004 bf2c 	b.w	7440 <SystemInit>

000025e8 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    25e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    25ec:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2648 <activate_foreach_backend+0x60>
{
    25f0:	4604      	mov	r4, r0
	while (mask_cpy) {
    25f2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    25f4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    25f8:	b914      	cbnz	r4, 2600 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    25fa:	4638      	mov	r0, r7
    25fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    2600:	fa94 f5a4 	rbit	r5, r4
    2604:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    2608:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    260c:	012e      	lsls	r6, r5, #4
    260e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    2612:	ea6f 0a03 	mvn.w	sl, r3
    2616:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    261a:	7b2b      	ldrb	r3, [r5, #12]
    261c:	2b00      	cmp	r3, #0
    261e:	d0eb      	beq.n	25f8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    2620:	f858 3006 	ldr.w	r3, [r8, r6]
    2624:	691b      	ldr	r3, [r3, #16]
    2626:	b94b      	cbnz	r3, 263c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    2628:	4446      	add	r6, r8
			log_backend_enable(backend,
    262a:	2204      	movs	r2, #4
    262c:	6873      	ldr	r3, [r6, #4]
    262e:	4628      	mov	r0, r5
    2630:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    2632:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    2636:	f000 fa59 	bl	2aec <log_backend_enable>
    263a:	e7dd      	b.n	25f8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    263c:	4628      	mov	r0, r5
    263e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2640:	2800      	cmp	r0, #0
    2642:	d1d9      	bne.n	25f8 <activate_foreach_backend+0x10>
    2644:	e7f0      	b.n	2628 <activate_foreach_backend+0x40>
    2646:	bf00      	nop
    2648:	0000d2d8 	.word	0x0000d2d8

0000264c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    264c:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    264e:	4910      	ldr	r1, [pc, #64]	; (2690 <enable_logger+0x44>)
    2650:	4810      	ldr	r0, [pc, #64]	; (2694 <enable_logger+0x48>)
{
    2652:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2654:	2200      	movs	r2, #0
    2656:	f00a fbc3 	bl	cde0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    265a:	4d0f      	ldr	r5, [pc, #60]	; (2698 <enable_logger+0x4c>)
    265c:	490f      	ldr	r1, [pc, #60]	; (269c <enable_logger+0x50>)
    265e:	2200      	movs	r2, #0
    2660:	2300      	movs	r3, #0
    2662:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2666:	2400      	movs	r4, #0
    2668:	230e      	movs	r3, #14
    266a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    266e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2672:	4b0b      	ldr	r3, [pc, #44]	; (26a0 <enable_logger+0x54>)
    2674:	9400      	str	r4, [sp, #0]
    2676:	f44f 7240 	mov.w	r2, #768	; 0x300
    267a:	4628      	mov	r0, r5
    267c:	f007 f954 	bl	9928 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    2680:	4908      	ldr	r1, [pc, #32]	; (26a4 <enable_logger+0x58>)
    2682:	4628      	mov	r0, r5
    2684:	f00a f937 	bl	c8f6 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2688:	4620      	mov	r0, r4
    268a:	b009      	add	sp, #36	; 0x24
    268c:	bd30      	pop	{r4, r5, pc}
    268e:	bf00      	nop
    2690:	000026a9 	.word	0x000026a9
    2694:	20000890 	.word	0x20000890
    2698:	20000408 	.word	0x20000408
    269c:	20002180 	.word	0x20002180
    26a0:	00002999 	.word	0x00002999
    26a4:	0000d7e7 	.word	0x0000d7e7

000026a8 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    26a8:	4801      	ldr	r0, [pc, #4]	; (26b0 <log_process_thread_timer_expiry_fn+0x8>)
    26aa:	f007 bacb 	b.w	9c44 <z_impl_k_sem_give>
    26ae:	bf00      	nop
    26b0:	20000310 	.word	0x20000310

000026b4 <z_log_init>:
{
    26b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26b8:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    26ba:	481f      	ldr	r0, [pc, #124]	; (2738 <z_log_init+0x84>)
{
    26bc:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    26be:	f009 fb04 	bl	bcca <atomic_inc>
    26c2:	4606      	mov	r6, r0
    26c4:	2800      	cmp	r0, #0
    26c6:	d030      	beq.n	272a <z_log_init+0x76>
	uint32_t mask = 0;
    26c8:	2500      	movs	r5, #0
}
    26ca:	4628      	mov	r0, r5
    26cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    26d0:	7b23      	ldrb	r3, [r4, #12]
    26d2:	b173      	cbz	r3, 26f2 <z_log_init+0x3e>
	if (backend->api->init) {
    26d4:	6823      	ldr	r3, [r4, #0]
    26d6:	68db      	ldr	r3, [r3, #12]
    26d8:	b10b      	cbz	r3, 26de <z_log_init+0x2a>
		backend->api->init(backend);
    26da:	4620      	mov	r0, r4
    26dc:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    26de:	6823      	ldr	r3, [r4, #0]
    26e0:	691b      	ldr	r3, [r3, #16]
    26e2:	b9d3      	cbnz	r3, 271a <z_log_init+0x66>
				log_backend_enable(backend,
    26e4:	6863      	ldr	r3, [r4, #4]
    26e6:	2204      	movs	r2, #4
    26e8:	6819      	ldr	r1, [r3, #0]
    26ea:	4620      	mov	r0, r4
    26ec:	f000 f9fe 	bl	2aec <log_backend_enable>
			i++;
    26f0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26f2:	3410      	adds	r4, #16
    26f4:	454c      	cmp	r4, r9
    26f6:	d3eb      	bcc.n	26d0 <z_log_init+0x1c>
	if (blocking) {
    26f8:	f1b8 0f00 	cmp.w	r8, #0
    26fc:	d0e5      	beq.n	26ca <z_log_init+0x16>
		while (mask) {
    26fe:	2d00      	cmp	r5, #0
    2700:	d0e2      	beq.n	26c8 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    2702:	4628      	mov	r0, r5
    2704:	f7ff ff70 	bl	25e8 <activate_foreach_backend>
    2708:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    270a:	2f00      	cmp	r7, #0
    270c:	d0f7      	beq.n	26fe <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    270e:	2100      	movs	r1, #0
    2710:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2714:	f007 fef8 	bl	a508 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2718:	e7f1      	b.n	26fe <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    271a:	4620      	mov	r0, r4
    271c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    271e:	2800      	cmp	r0, #0
    2720:	d0e0      	beq.n	26e4 <z_log_init+0x30>
				mask |= BIT(i);
    2722:	fa0a f306 	lsl.w	r3, sl, r6
    2726:	431d      	orrs	r5, r3
    2728:	e7e2      	b.n	26f0 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    272a:	4c04      	ldr	r4, [pc, #16]	; (273c <z_log_init+0x88>)
    272c:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2740 <z_log_init+0x8c>
	uint32_t mask = 0;
    2730:	4605      	mov	r5, r0
				mask |= BIT(i);
    2732:	f04f 0a01 	mov.w	sl, #1
    2736:	e7dd      	b.n	26f4 <z_log_init+0x40>
    2738:	20000bf8 	.word	0x20000bf8
    273c:	0000d2d8 	.word	0x0000d2d8
    2740:	0000d2e8 	.word	0x0000d2e8

00002744 <log_format_func_t_get>:
}
    2744:	4b01      	ldr	r3, [pc, #4]	; (274c <log_format_func_t_get+0x8>)
    2746:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    274a:	4770      	bx	lr
    274c:	0000d31c 	.word	0x0000d31c

00002750 <log_set_timestamp_func>:
{
    2750:	b508      	push	{r3, lr}
    2752:	4603      	mov	r3, r0
    2754:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    2756:	b12b      	cbz	r3, 2764 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    2758:	4a04      	ldr	r2, [pc, #16]	; (276c <log_set_timestamp_func+0x1c>)
    275a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    275c:	f000 fc78 	bl	3050 <log_output_timestamp_freq_set>
	return 0;
    2760:	2000      	movs	r0, #0
}
    2762:	bd08      	pop	{r3, pc}
		return -EINVAL;
    2764:	f06f 0015 	mvn.w	r0, #21
    2768:	e7fb      	b.n	2762 <log_set_timestamp_func+0x12>
    276a:	bf00      	nop
    276c:	200000b4 	.word	0x200000b4

00002770 <z_log_notify_backend_enabled>:
{
    2770:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2772:	4c04      	ldr	r4, [pc, #16]	; (2784 <z_log_notify_backend_enabled+0x14>)
    2774:	7823      	ldrb	r3, [r4, #0]
    2776:	b913      	cbnz	r3, 277e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2778:	4803      	ldr	r0, [pc, #12]	; (2788 <z_log_notify_backend_enabled+0x18>)
    277a:	f007 fa63 	bl	9c44 <z_impl_k_sem_give>
	backend_attached = true;
    277e:	2301      	movs	r3, #1
    2780:	7023      	strb	r3, [r4, #0]
}
    2782:	bd10      	pop	{r4, pc}
    2784:	20002122 	.word	0x20002122
    2788:	20000310 	.word	0x20000310

0000278c <z_log_dropped>:
{
    278c:	b510      	push	{r4, lr}
    278e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2790:	4808      	ldr	r0, [pc, #32]	; (27b4 <z_log_dropped+0x28>)
    2792:	f009 fa9a 	bl	bcca <atomic_inc>
	if (buffered) {
    2796:	b15c      	cbz	r4, 27b0 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2798:	f3bf 8f5b 	dmb	ish
    279c:	4b06      	ldr	r3, [pc, #24]	; (27b8 <z_log_dropped+0x2c>)
    279e:	e853 1f00 	ldrex	r1, [r3]
    27a2:	3901      	subs	r1, #1
    27a4:	e843 1200 	strex	r2, r1, [r3]
    27a8:	2a00      	cmp	r2, #0
    27aa:	d1f8      	bne.n	279e <z_log_dropped+0x12>
    27ac:	f3bf 8f5b 	dmb	ish
}
    27b0:	bd10      	pop	{r4, pc}
    27b2:	bf00      	nop
    27b4:	20000bf0 	.word	0x20000bf0
    27b8:	20000bf4 	.word	0x20000bf4

000027bc <z_log_dropped_read_and_clear>:
}
    27bc:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    27be:	4b06      	ldr	r3, [pc, #24]	; (27d8 <z_log_dropped_read_and_clear+0x1c>)
    27c0:	f3bf 8f5b 	dmb	ish
    27c4:	4601      	mov	r1, r0
    27c6:	e853 0f00 	ldrex	r0, [r3]
    27ca:	e843 1200 	strex	r2, r1, [r3]
    27ce:	2a00      	cmp	r2, #0
    27d0:	d1f9      	bne.n	27c6 <z_log_dropped_read_and_clear+0xa>
    27d2:	f3bf 8f5b 	dmb	ish
    27d6:	4770      	bx	lr
    27d8:	20000bf0 	.word	0x20000bf0

000027dc <dropped_notify>:
{
    27dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    27de:	f7ff ffed 	bl	27bc <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    27e2:	4c08      	ldr	r4, [pc, #32]	; (2804 <dropped_notify+0x28>)
    27e4:	4e08      	ldr	r6, [pc, #32]	; (2808 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    27e6:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    27e8:	42b4      	cmp	r4, r6
    27ea:	d300      	bcc.n	27ee <dropped_notify+0x12>
}
    27ec:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    27ee:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    27f0:	795b      	ldrb	r3, [r3, #5]
    27f2:	b12b      	cbz	r3, 2800 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    27f4:	6823      	ldr	r3, [r4, #0]
    27f6:	685b      	ldr	r3, [r3, #4]
    27f8:	b113      	cbz	r3, 2800 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    27fa:	4629      	mov	r1, r5
    27fc:	4620      	mov	r0, r4
    27fe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2800:	3410      	adds	r4, #16
    2802:	e7f1      	b.n	27e8 <dropped_notify+0xc>
    2804:	0000d2d8 	.word	0x0000d2d8
    2808:	0000d2e8 	.word	0x0000d2e8

0000280c <z_log_msg_init>:
{
    280c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    280e:	4c04      	ldr	r4, [pc, #16]	; (2820 <z_log_msg_init+0x14>)
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <z_log_msg_init+0x18>)
    2812:	4620      	mov	r0, r4
    2814:	f009 f8ea 	bl	b9ec <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2818:	4b03      	ldr	r3, [pc, #12]	; (2828 <z_log_msg_init+0x1c>)
    281a:	601c      	str	r4, [r3, #0]
}
    281c:	bd10      	pop	{r4, pc}
    281e:	bf00      	nop
    2820:	20000254 	.word	0x20000254
    2824:	0000d308 	.word	0x0000d308
    2828:	20000be8 	.word	0x20000be8

0000282c <log_core_init>:
	panic_mode = false;
    282c:	4a08      	ldr	r2, [pc, #32]	; (2850 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    282e:	4809      	ldr	r0, [pc, #36]	; (2854 <log_core_init+0x28>)
{
    2830:	b508      	push	{r3, lr}
	panic_mode = false;
    2832:	2300      	movs	r3, #0
    2834:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2836:	4a08      	ldr	r2, [pc, #32]	; (2858 <log_core_init+0x2c>)
    2838:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    283a:	4a08      	ldr	r2, [pc, #32]	; (285c <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    283c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2840:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2842:	f7ff ff85 	bl	2750 <log_set_timestamp_func>
}
    2846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    284a:	f7ff bfdf 	b.w	280c <z_log_msg_init>
    284e:	bf00      	nop
    2850:	20002123 	.word	0x20002123
    2854:	0000bcc7 	.word	0x0000bcc7
    2858:	20000bf0 	.word	0x20000bf0
    285c:	20000bf4 	.word	0x20000bf4

00002860 <z_log_msg_alloc>:
{
    2860:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2862:	2200      	movs	r2, #0
    2864:	4801      	ldr	r0, [pc, #4]	; (286c <z_log_msg_alloc+0xc>)
    2866:	2300      	movs	r3, #0
    2868:	f009 b8e1 	b.w	ba2e <mpsc_pbuf_alloc>
    286c:	20000254 	.word	0x20000254

00002870 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2870:	4801      	ldr	r0, [pc, #4]	; (2878 <z_log_msg_local_claim+0x8>)
    2872:	f009 b97a 	b.w	bb6a <mpsc_pbuf_claim>
    2876:	bf00      	nop
    2878:	20000254 	.word	0x20000254

0000287c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    287c:	4b02      	ldr	r3, [pc, #8]	; (2888 <z_log_msg_free+0xc>)
{
    287e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2880:	6818      	ldr	r0, [r3, #0]
    2882:	f009 b9c4 	b.w	bc0e <mpsc_pbuf_free>
    2886:	bf00      	nop
    2888:	20000be8 	.word	0x20000be8

0000288c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    288c:	4801      	ldr	r0, [pc, #4]	; (2894 <z_log_msg_pending+0x8>)
    288e:	f009 b9fa 	b.w	bc86 <mpsc_pbuf_is_pending>
    2892:	bf00      	nop
    2894:	20000254 	.word	0x20000254

00002898 <z_impl_log_process>:
{
    2898:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    289a:	4b28      	ldr	r3, [pc, #160]	; (293c <z_impl_log_process+0xa4>)
    289c:	7818      	ldrb	r0, [r3, #0]
    289e:	2800      	cmp	r0, #0
    28a0:	d04b      	beq.n	293a <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    28a2:	f7ff ffe5 	bl	2870 <z_log_msg_local_claim>
	if (msg) {
    28a6:	4605      	mov	r5, r0
    28a8:	b190      	cbz	r0, 28d0 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    28aa:	f3bf 8f5b 	dmb	ish
    28ae:	4b24      	ldr	r3, [pc, #144]	; (2940 <z_impl_log_process+0xa8>)
    28b0:	e853 1f00 	ldrex	r1, [r3]
    28b4:	3901      	subs	r1, #1
    28b6:	e843 1200 	strex	r2, r1, [r3]
    28ba:	2a00      	cmp	r2, #0
    28bc:	d1f8      	bne.n	28b0 <z_impl_log_process+0x18>
    28be:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    28c2:	4c20      	ldr	r4, [pc, #128]	; (2944 <z_impl_log_process+0xac>)
    28c4:	4e20      	ldr	r6, [pc, #128]	; (2948 <z_impl_log_process+0xb0>)
    28c6:	42b4      	cmp	r4, r6
    28c8:	d32d      	bcc.n	2926 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    28ca:	4628      	mov	r0, r5
    28cc:	f7ff ffd6 	bl	287c <z_log_msg_free>
	return dropped_cnt > 0;
    28d0:	4b1e      	ldr	r3, [pc, #120]	; (294c <z_impl_log_process+0xb4>)
    28d2:	4c1f      	ldr	r4, [pc, #124]	; (2950 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	dd19      	ble.n	290e <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    28da:	f00a fa59 	bl	cd90 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    28de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28e2:	fba0 0302 	umull	r0, r3, r0, r2
    28e6:	fb02 3101 	mla	r1, r2, r1, r3
    28ea:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    28ec:	e9d4 2000 	ldrd	r2, r0, [r4]
    28f0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    28f4:	1a9b      	subs	r3, r3, r2
    28f6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    28fa:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    28fe:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    2902:	4293      	cmp	r3, r2
    2904:	f171 0100 	sbcs.w	r1, r1, #0
    2908:	d301      	bcc.n	290e <z_impl_log_process+0x76>
				dropped_notify();
    290a:	f7ff ff67 	bl	27dc <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    290e:	e9d4 3200 	ldrd	r3, r2, [r4]
    2912:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    2916:	f142 0200 	adc.w	r2, r2, #0
    291a:	e9c4 3200 	strd	r3, r2, [r4]
}
    291e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    2922:	f7ff bfb3 	b.w	288c <z_log_msg_pending>
	return backend->cb->active;
    2926:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    2928:	795b      	ldrb	r3, [r3, #5]
    292a:	b123      	cbz	r3, 2936 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    292c:	6823      	ldr	r3, [r4, #0]
    292e:	4629      	mov	r1, r5
    2930:	681b      	ldr	r3, [r3, #0]
    2932:	4620      	mov	r0, r4
    2934:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2936:	3410      	adds	r4, #16
    2938:	e7c5      	b.n	28c6 <z_impl_log_process+0x2e>
}
    293a:	bd70      	pop	{r4, r5, r6, pc}
    293c:	20002122 	.word	0x20002122
    2940:	20000bf4 	.word	0x20000bf4
    2944:	0000d2d8 	.word	0x0000d2d8
    2948:	0000d2e8 	.word	0x0000d2e8
    294c:	20000bf0 	.word	0x20000bf0
    2950:	20000888 	.word	0x20000888

00002954 <z_impl_log_panic>:
{
    2954:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    2956:	4d0d      	ldr	r5, [pc, #52]	; (298c <z_impl_log_panic+0x38>)
    2958:	7829      	ldrb	r1, [r5, #0]
    295a:	b961      	cbnz	r1, 2976 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    295c:	2001      	movs	r0, #1
    295e:	f7ff fea9 	bl	26b4 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2962:	4c0b      	ldr	r4, [pc, #44]	; (2990 <z_impl_log_panic+0x3c>)
    2964:	4e0b      	ldr	r6, [pc, #44]	; (2994 <z_impl_log_panic+0x40>)
    2966:	42b4      	cmp	r4, r6
    2968:	d306      	bcc.n	2978 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    296a:	f7ff ff95 	bl	2898 <z_impl_log_process>
		while (log_process() == true) {
    296e:	2800      	cmp	r0, #0
    2970:	d1fb      	bne.n	296a <z_impl_log_panic+0x16>
	panic_mode = true;
    2972:	2301      	movs	r3, #1
    2974:	702b      	strb	r3, [r5, #0]
}
    2976:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2978:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    297a:	795b      	ldrb	r3, [r3, #5]
    297c:	b11b      	cbz	r3, 2986 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    297e:	6823      	ldr	r3, [r4, #0]
    2980:	4620      	mov	r0, r4
    2982:	689b      	ldr	r3, [r3, #8]
    2984:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2986:	3410      	adds	r4, #16
    2988:	e7ed      	b.n	2966 <z_impl_log_panic+0x12>
    298a:	bf00      	nop
    298c:	20002123 	.word	0x20002123
    2990:	0000d2d8 	.word	0x0000d2d8
    2994:	0000d2e8 	.word	0x0000d2e8

00002998 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2998:	2100      	movs	r1, #0
{
    299a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    299e:	4608      	mov	r0, r1
    29a0:	f7ff fe88 	bl	26b4 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    29a4:	4604      	mov	r4, r0
    29a6:	b348      	cbz	r0, 29fc <log_process_thread_func+0x64>
    29a8:	f240 6867 	movw	r8, #1639	; 0x667
    29ac:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    29b0:	f007 fdde 	bl	a570 <z_impl_z_current_get>
	proc_tid = process_tid;
    29b4:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <log_process_thread_func+0x88>)
    29b6:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    29b8:	b130      	cbz	r0, 29c8 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    29ba:	4b1a      	ldr	r3, [pc, #104]	; (2a24 <log_process_thread_func+0x8c>)
	    process_tid &&
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	2b09      	cmp	r3, #9
    29c0:	dd02      	ble.n	29c8 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    29c2:	4819      	ldr	r0, [pc, #100]	; (2a28 <log_process_thread_func+0x90>)
    29c4:	f007 f93e 	bl	9c44 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    29c8:	4f18      	ldr	r7, [pc, #96]	; (2a2c <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    29ca:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2a28 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    29ce:	2500      	movs	r5, #0
		if (activate_mask) {
    29d0:	b144      	cbz	r4, 29e4 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    29d2:	4620      	mov	r0, r4
    29d4:	f7ff fe08 	bl	25e8 <activate_foreach_backend>
			if (!activate_mask) {
    29d8:	4604      	mov	r4, r0
    29da:	b918      	cbnz	r0, 29e4 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    29dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    29e0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    29e4:	f7ff ff58 	bl	2898 <z_impl_log_process>
		if (log_process() == false) {
    29e8:	4606      	mov	r6, r0
    29ea:	b928      	cbnz	r0, 29f8 <log_process_thread_func+0x60>
			if (processed_any) {
    29ec:	b9b5      	cbnz	r5, 2a1c <log_process_thread_func+0x84>
    29ee:	4642      	mov	r2, r8
    29f0:	464b      	mov	r3, r9
    29f2:	4650      	mov	r0, sl
    29f4:	f007 f946 	bl	9c84 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    29f8:	4635      	mov	r5, r6
    29fa:	e7e9      	b.n	29d0 <log_process_thread_func+0x38>
    29fc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2a00:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2a04:	e7d4      	b.n	29b0 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    2a06:	682b      	ldr	r3, [r5, #0]
    2a08:	699b      	ldr	r3, [r3, #24]
    2a0a:	b11b      	cbz	r3, 2a14 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    2a0c:	2200      	movs	r2, #0
    2a0e:	4611      	mov	r1, r2
    2a10:	4628      	mov	r0, r5
    2a12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2a14:	3510      	adds	r5, #16
    2a16:	42bd      	cmp	r5, r7
    2a18:	d3f5      	bcc.n	2a06 <log_process_thread_func+0x6e>
    2a1a:	e7e8      	b.n	29ee <log_process_thread_func+0x56>
    2a1c:	4d04      	ldr	r5, [pc, #16]	; (2a30 <log_process_thread_func+0x98>)
    2a1e:	e7fa      	b.n	2a16 <log_process_thread_func+0x7e>
    2a20:	20000bec 	.word	0x20000bec
    2a24:	20000bf4 	.word	0x20000bf4
    2a28:	20000310 	.word	0x20000310
    2a2c:	0000d2e8 	.word	0x0000d2e8
    2a30:	0000d2d8 	.word	0x0000d2d8

00002a34 <z_log_msg_post_finalize>:
{
    2a34:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    2a36:	4818      	ldr	r0, [pc, #96]	; (2a98 <z_log_msg_post_finalize+0x64>)
    2a38:	f009 f947 	bl	bcca <atomic_inc>
	if (panic_mode) {
    2a3c:	4b17      	ldr	r3, [pc, #92]	; (2a9c <z_log_msg_post_finalize+0x68>)
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	b17b      	cbz	r3, 2a62 <z_log_msg_post_finalize+0x2e>
    2a42:	f04f 0320 	mov.w	r3, #32
    2a46:	f3ef 8411 	mrs	r4, BASEPRI
    2a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    2a4e:	f3bf 8f6f 	isb	sy
    2a52:	f7ff ff21 	bl	2898 <z_impl_log_process>
	__asm__ volatile(
    2a56:	f384 8811 	msr	BASEPRI, r4
    2a5a:	f3bf 8f6f 	isb	sy
}
    2a5e:	b002      	add	sp, #8
    2a60:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2a62:	4b0f      	ldr	r3, [pc, #60]	; (2aa0 <z_log_msg_post_finalize+0x6c>)
    2a64:	681b      	ldr	r3, [r3, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d0f9      	beq.n	2a5e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    2a6a:	b950      	cbnz	r0, 2a82 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2a6c:	2200      	movs	r2, #0
    2a6e:	2300      	movs	r3, #0
    2a70:	e9cd 2300 	strd	r2, r3, [sp]
    2a74:	480b      	ldr	r0, [pc, #44]	; (2aa4 <z_log_msg_post_finalize+0x70>)
    2a76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2a7a:	2300      	movs	r3, #0
    2a7c:	f007 ffbc 	bl	a9f8 <z_impl_k_timer_start>
    2a80:	e7ed      	b.n	2a5e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2a82:	280a      	cmp	r0, #10
    2a84:	d1eb      	bne.n	2a5e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    2a86:	4807      	ldr	r0, [pc, #28]	; (2aa4 <z_log_msg_post_finalize+0x70>)
    2a88:	f00a f9b6 	bl	cdf8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2a8c:	4806      	ldr	r0, [pc, #24]	; (2aa8 <z_log_msg_post_finalize+0x74>)
}
    2a8e:	b002      	add	sp, #8
    2a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a94:	f007 b8d6 	b.w	9c44 <z_impl_k_sem_give>
    2a98:	20000bf4 	.word	0x20000bf4
    2a9c:	20002123 	.word	0x20002123
    2aa0:	20000bec 	.word	0x20000bec
    2aa4:	20000890 	.word	0x20000890
    2aa8:	20000310 	.word	0x20000310

00002aac <z_log_msg_commit>:
{
    2aac:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2aae:	4b06      	ldr	r3, [pc, #24]	; (2ac8 <z_log_msg_commit+0x1c>)
    2ab0:	681b      	ldr	r3, [r3, #0]
{
    2ab2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2ab4:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    2ab6:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    2ab8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    2aba:	4804      	ldr	r0, [pc, #16]	; (2acc <z_log_msg_commit+0x20>)
    2abc:	f009 f835 	bl	bb2a <mpsc_pbuf_commit>
}
    2ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2ac4:	f7ff bfb6 	b.w	2a34 <z_log_msg_post_finalize>
    2ac8:	200000b4 	.word	0x200000b4
    2acc:	20000254 	.word	0x20000254

00002ad0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2ad0:	4a04      	ldr	r2, [pc, #16]	; (2ae4 <log_source_name_get+0x14>)
    2ad2:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <log_source_name_get+0x18>)
    2ad4:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    2ad6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    2ada:	bf34      	ite	cc
    2adc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    2ae0:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    2ae2:	4770      	bx	lr
    2ae4:	0000d220 	.word	0x0000d220
    2ae8:	0000d2d8 	.word	0x0000d2d8

00002aec <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <log_backend_enable+0x24>)
    2aee:	1ac3      	subs	r3, r0, r3
{
    2af0:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2af2:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    2af4:	6844      	ldr	r4, [r0, #4]
    2af6:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    2af8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    2afa:	6843      	ldr	r3, [r0, #4]
    2afc:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2afe:	6843      	ldr	r3, [r0, #4]
    2b00:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2b02:	6843      	ldr	r3, [r0, #4]
    2b04:	2201      	movs	r2, #1
    2b06:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2b08:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    2b0a:	f7ff be31 	b.w	2770 <z_log_notify_backend_enabled>
    2b0e:	bf00      	nop
    2b10:	0000d2d8 	.word	0x0000d2d8

00002b14 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b18:	b08f      	sub	sp, #60	; 0x3c
    2b1a:	af04      	add	r7, sp, #16
    2b1c:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2b20:	60b8      	str	r0, [r7, #8]
    2b22:	460d      	mov	r5, r1
    2b24:	4691      	mov	r9, r2
    2b26:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    2b28:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    2b2a:	f1b8 0f00 	cmp.w	r8, #0
    2b2e:	d063      	beq.n	2bf8 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    2b30:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    2b32:	f107 0314 	add.w	r3, r7, #20
    2b36:	f04f 0b04 	mov.w	fp, #4
    2b3a:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2b3e:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    2b42:	e9c7 6607 	strd	r6, r6, [r7, #28]
    2b46:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    2b48:	9301      	str	r3, [sp, #4]
    2b4a:	f8cd b008 	str.w	fp, [sp, #8]
    2b4e:	f8cd a000 	str.w	sl, [sp]
    2b52:	f107 031c 	add.w	r3, r7, #28
    2b56:	68f9      	ldr	r1, [r7, #12]
    2b58:	4632      	mov	r2, r6
    2b5a:	4648      	mov	r0, r9
    2b5c:	f7fe fe70 	bl	1840 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2b60:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2b64:	4603      	mov	r3, r0
    2b66:	d31c      	bcc.n	2ba2 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2b68:	466c      	mov	r4, sp
    2b6a:	b08a      	sub	sp, #40	; 0x28
    2b6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2b70:	ab04      	add	r3, sp, #16
    2b72:	4826      	ldr	r0, [pc, #152]	; (2c0c <z_impl_z_log_msg_static_create+0xf8>)
    2b74:	e9c3 0105 	strd	r0, r1, [r3, #20]
    2b78:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2b7c:	61d9      	str	r1, [r3, #28]
    2b7e:	461a      	mov	r2, r3
    2b80:	f44f 7100 	mov.w	r1, #512	; 0x200
    2b84:	8419      	strh	r1, [r3, #32]
    2b86:	4b22      	ldr	r3, [pc, #136]	; (2c10 <z_impl_z_log_msg_static_create+0xfc>)
    2b88:	f842 3f10 	str.w	r3, [r2, #16]!
    2b8c:	4821      	ldr	r0, [pc, #132]	; (2c14 <z_impl_z_log_msg_static_create+0x100>)
    2b8e:	4633      	mov	r3, r6
    2b90:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    2b94:	f7ff ffbe 	bl	2b14 <z_impl_z_log_msg_static_create>
    2b98:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    2b9a:	372c      	adds	r7, #44	; 0x2c
    2b9c:	46bd      	mov	sp, r7
    2b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    2ba2:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    2ba6:	f104 0017 	add.w	r0, r4, #23
    2baa:	4418      	add	r0, r3
    2bac:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2bb0:	0880      	lsrs	r0, r0, #2
    2bb2:	603b      	str	r3, [r7, #0]
    2bb4:	f7ff fe54 	bl	2860 <z_log_msg_alloc>
    2bb8:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    2bbc:	4604      	mov	r4, r0
    2bbe:	b190      	cbz	r0, 2be6 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    2bc0:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    2bc2:	4a15      	ldr	r2, [pc, #84]	; (2c18 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    2bc4:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    2bc8:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    2bcc:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    2bd0:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    2bd2:	e9cd a300 	strd	sl, r3, [sp]
    2bd6:	f8cd b008 	str.w	fp, [sp, #8]
    2bda:	68f9      	ldr	r1, [r7, #12]
    2bdc:	f107 031c 	add.w	r3, r7, #28
    2be0:	4648      	mov	r0, r9
    2be2:	f7fe fe2d 	bl	1840 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    2be6:	f368 2553 	bfi	r5, r8, #9, #11
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	68b9      	ldr	r1, [r7, #8]
    2bee:	462a      	mov	r2, r5
    2bf0:	4620      	mov	r0, r4
    2bf2:	f009 f8a0 	bl	bd36 <z_log_msg_finalize>
    2bf6:	e7d0      	b.n	2b9a <z_impl_z_log_msg_static_create+0x86>
    2bf8:	f104 0017 	add.w	r0, r4, #23
    2bfc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2c00:	0880      	lsrs	r0, r0, #2
    2c02:	f7ff fe2d 	bl	2860 <z_log_msg_alloc>
    2c06:	4604      	mov	r4, r0
    2c08:	e7ed      	b.n	2be6 <z_impl_z_log_msg_static_create+0xd2>
    2c0a:	bf00      	nop
    2c0c:	0000d7fc 	.word	0x0000d7fc
    2c10:	01000004 	.word	0x01000004
    2c14:	0000d270 	.word	0x0000d270
    2c18:	0000bd0b 	.word	0x0000bd0b

00002c1c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c20:	b087      	sub	sp, #28
    2c22:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    2c26:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    2c2a:	4604      	mov	r4, r0
    2c2c:	460f      	mov	r7, r1
    2c2e:	4693      	mov	fp, r2
    2c30:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2c32:	b3a6      	cbz	r6, 2c9e <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2c34:	2110      	movs	r1, #16
    2c36:	f8cd 9000 	str.w	r9, [sp]
    2c3a:	4633      	mov	r3, r6
    2c3c:	4652      	mov	r2, sl
    2c3e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2c40:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2c44:	f7fe fc26 	bl	1494 <cbvprintf_package>
    2c48:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2c4a:	f105 0017 	add.w	r0, r5, #23
    2c4e:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2c50:	4b14      	ldr	r3, [pc, #80]	; (2ca4 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2c52:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    2c54:	f004 0407 	and.w	r4, r4, #7
    2c58:	f00b 0b07 	and.w	fp, fp, #7
    2c5c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2c5e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2c62:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    2c66:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    2c6a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2c6c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2c6e:	f7ff fdf7 	bl	2860 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2c72:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    2c76:	4605      	mov	r5, r0
    2c78:	b140      	cbz	r0, 2c8c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2c7a:	b13e      	cbz	r6, 2c8c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2c7c:	9903      	ldr	r1, [sp, #12]
    2c7e:	f8cd 9000 	str.w	r9, [sp]
    2c82:	4633      	mov	r3, r6
    2c84:	4652      	mov	r2, sl
    2c86:	3010      	adds	r0, #16
    2c88:	f7fe fc04 	bl	1494 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2c8c:	4643      	mov	r3, r8
    2c8e:	4622      	mov	r2, r4
    2c90:	4639      	mov	r1, r7
    2c92:	4628      	mov	r0, r5
	}
}
    2c94:	b007      	add	sp, #28
    2c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    2c9a:	f009 b84c 	b.w	bd36 <z_log_msg_finalize>
		plen = 0;
    2c9e:	4631      	mov	r1, r6
    2ca0:	e7d3      	b.n	2c4a <z_impl_z_log_msg_runtime_vcreate+0x2e>
    2ca2:	bf00      	nop
    2ca4:	000ffe00 	.word	0x000ffe00

00002ca8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2ca8:	b40e      	push	{r1, r2, r3}
    2caa:	b503      	push	{r0, r1, lr}
    2cac:	ab03      	add	r3, sp, #12
    2cae:	4601      	mov	r1, r0
    2cb0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2cb4:	4804      	ldr	r0, [pc, #16]	; (2cc8 <print_formatted+0x20>)
	va_start(args, fmt);
    2cb6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2cb8:	f009 f863 	bl	bd82 <cbvprintf>
	va_end(args);

	return length;
}
    2cbc:	b002      	add	sp, #8
    2cbe:	f85d eb04 	ldr.w	lr, [sp], #4
    2cc2:	b003      	add	sp, #12
    2cc4:	4770      	bx	lr
    2cc6:	bf00      	nop
    2cc8:	0000bdab 	.word	0x0000bdab

00002ccc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2ccc:	06ca      	lsls	r2, r1, #27
    2cce:	d405      	bmi.n	2cdc <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2cd0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2cd2:	bf4c      	ite	mi
    2cd4:	4902      	ldrmi	r1, [pc, #8]	; (2ce0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    2cd6:	4903      	ldrpl	r1, [pc, #12]	; (2ce4 <newline_print+0x18>)
    2cd8:	f7ff bfe6 	b.w	2ca8 <print_formatted>
	}
}
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop
    2ce0:	0000d83c 	.word	0x0000d83c
    2ce4:	0000d83b 	.word	0x0000d83b

00002ce8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cec:	b089      	sub	sp, #36	; 0x24
    2cee:	469b      	mov	fp, r3
    2cf0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2cf4:	9304      	str	r3, [sp, #16]
    2cf6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    2cfa:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2cfc:	9b04      	ldr	r3, [sp, #16]
{
    2cfe:	9206      	str	r2, [sp, #24]
    2d00:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    2d04:	4604      	mov	r4, r0
    2d06:	460d      	mov	r5, r1
	if (!raw_string) {
    2d08:	2b00      	cmp	r3, #0
    2d0a:	f000 8087 	beq.w	2e1c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2d0e:	f006 0308 	and.w	r3, r6, #8
    2d12:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2d14:	f008 fff7 	bl	bd06 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2d18:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    2d1c:	4602      	mov	r2, r0
    2d1e:	2800      	cmp	r0, #0
    2d20:	d04b      	beq.n	2dba <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    2d22:	4986      	ldr	r1, [pc, #536]	; (2f3c <log_output_process+0x254>)
    2d24:	4620      	mov	r0, r4
    2d26:	f7ff ffbf 	bl	2ca8 <print_formatted>
    2d2a:	4680      	mov	r8, r0
	if (stamp) {
    2d2c:	f1ba 0f00 	cmp.w	sl, #0
    2d30:	d008      	beq.n	2d44 <log_output_process+0x5c>
	if (!format) {
    2d32:	f016 0f44 	tst.w	r6, #68	; 0x44
    2d36:	d142      	bne.n	2dbe <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2d38:	4981      	ldr	r1, [pc, #516]	; (2f40 <log_output_process+0x258>)
    2d3a:	462a      	mov	r2, r5
    2d3c:	4620      	mov	r0, r4
    2d3e:	f7ff ffb3 	bl	2ca8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2d42:	4480      	add	r8, r0
	if (color) {
    2d44:	f006 0301 	and.w	r3, r6, #1
    2d48:	b15b      	cbz	r3, 2d62 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    2d4a:	4b7e      	ldr	r3, [pc, #504]	; (2f44 <log_output_process+0x25c>)
    2d4c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2d4e:	497e      	ldr	r1, [pc, #504]	; (2f48 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2d54:	4b7d      	ldr	r3, [pc, #500]	; (2f4c <log_output_process+0x264>)
    2d56:	4620      	mov	r0, r4
    2d58:	2a00      	cmp	r2, #0
    2d5a:	bf08      	it	eq
    2d5c:	461a      	moveq	r2, r3
    2d5e:	f7ff ffa3 	bl	2ca8 <print_formatted>
	if (level_on) {
    2d62:	f006 0308 	and.w	r3, r6, #8
    2d66:	2b00      	cmp	r3, #0
    2d68:	d055      	beq.n	2e16 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2d6a:	4b79      	ldr	r3, [pc, #484]	; (2f50 <log_output_process+0x268>)
    2d6c:	9a04      	ldr	r2, [sp, #16]
    2d6e:	4979      	ldr	r1, [pc, #484]	; (2f54 <log_output_process+0x26c>)
    2d70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2d74:	4620      	mov	r0, r4
    2d76:	f7ff ff97 	bl	2ca8 <print_formatted>
    2d7a:	4605      	mov	r5, r0
	if (domain) {
    2d7c:	9b06      	ldr	r3, [sp, #24]
    2d7e:	b12b      	cbz	r3, 2d8c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2d80:	4975      	ldr	r1, [pc, #468]	; (2f58 <log_output_process+0x270>)
    2d82:	461a      	mov	r2, r3
    2d84:	4620      	mov	r0, r4
    2d86:	f7ff ff8f 	bl	2ca8 <print_formatted>
    2d8a:	4405      	add	r5, r0
	if (source) {
    2d8c:	f1bb 0f00 	cmp.w	fp, #0
    2d90:	d005      	beq.n	2d9e <log_output_process+0xb6>
		total += print_formatted(output,
    2d92:	4972      	ldr	r1, [pc, #456]	; (2f5c <log_output_process+0x274>)
    2d94:	465a      	mov	r2, fp
    2d96:	4620      	mov	r0, r4
    2d98:	f7ff ff86 	bl	2ca8 <print_formatted>
    2d9c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2d9e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2da0:	f1b9 0f00 	cmp.w	r9, #0
    2da4:	d149      	bne.n	2e3a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2da6:	2f00      	cmp	r7, #0
    2da8:	d14f      	bne.n	2e4a <log_output_process+0x162>
	if (color) {
    2daa:	07f3      	lsls	r3, r6, #31
    2dac:	f100 80c0 	bmi.w	2f30 <log_output_process+0x248>
	newline_print(output, flags);
    2db0:	4631      	mov	r1, r6
    2db2:	4620      	mov	r0, r4
    2db4:	f7ff ff8a 	bl	2ccc <newline_print>
}
    2db8:	e0b4      	b.n	2f24 <log_output_process+0x23c>
	uint32_t length = 0U;
    2dba:	4680      	mov	r8, r0
    2dbc:	e7b6      	b.n	2d2c <log_output_process+0x44>
	} else if (freq != 0U) {
    2dbe:	4b68      	ldr	r3, [pc, #416]	; (2f60 <log_output_process+0x278>)
    2dc0:	6818      	ldr	r0, [r3, #0]
    2dc2:	2800      	cmp	r0, #0
    2dc4:	d0bd      	beq.n	2d42 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    2dc6:	4b67      	ldr	r3, [pc, #412]	; (2f64 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    2dc8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2dcc:	681b      	ldr	r3, [r3, #0]
    2dce:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2dd2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    2dd6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    2dda:	fb00 5513 	mls	r5, r0, r3, r5
    2dde:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2de2:	fb0e f505 	mul.w	r5, lr, r5
    2de6:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    2dea:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2dec:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2df0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2df4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    2df8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2dfc:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    2e00:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2e02:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    2e06:	4958      	ldr	r1, [pc, #352]	; (2f68 <log_output_process+0x280>)
    2e08:	e9cd c501 	strd	ip, r5, [sp, #4]
    2e0c:	4652      	mov	r2, sl
    2e0e:	4620      	mov	r0, r4
    2e10:	f7ff ff4a 	bl	2ca8 <print_formatted>
    2e14:	e795      	b.n	2d42 <log_output_process+0x5a>
	int total = 0;
    2e16:	f006 0508 	and.w	r5, r6, #8
    2e1a:	e7af      	b.n	2d7c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2e1c:	f1bb 0f01 	cmp.w	fp, #1
    2e20:	d106      	bne.n	2e30 <log_output_process+0x148>
	if (package) {
    2e22:	f1b9 0f00 	cmp.w	r9, #0
    2e26:	d164      	bne.n	2ef2 <log_output_process+0x20a>
	if (data_len) {
    2e28:	2f00      	cmp	r7, #0
    2e2a:	d07b      	beq.n	2f24 <log_output_process+0x23c>
		prefix_offset = 0;
    2e2c:	2500      	movs	r5, #0
    2e2e:	e00c      	b.n	2e4a <log_output_process+0x162>
	if (package) {
    2e30:	f1b9 0f00 	cmp.w	r9, #0
    2e34:	d0f8      	beq.n	2e28 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2e36:	484d      	ldr	r0, [pc, #308]	; (2f6c <log_output_process+0x284>)
    2e38:	e05c      	b.n	2ef4 <log_output_process+0x20c>
		cb = out_func;
    2e3a:	484d      	ldr	r0, [pc, #308]	; (2f70 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2e3c:	494d      	ldr	r1, [pc, #308]	; (2f74 <log_output_process+0x28c>)
    2e3e:	464b      	mov	r3, r9
    2e40:	4622      	mov	r2, r4
    2e42:	f008 f84b 	bl	aedc <cbpprintf_external>
	if (data_len) {
    2e46:	2f00      	cmp	r7, #0
    2e48:	d068      	beq.n	2f1c <log_output_process+0x234>
		print_formatted(output, " ");
    2e4a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2f78 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2e4e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2f7c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2e52:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2e54:	4631      	mov	r1, r6
    2e56:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2e58:	46b8      	mov	r8, r7
    2e5a:	bf28      	it	cs
    2e5c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2e60:	f7ff ff34 	bl	2ccc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2e64:	f04f 0b00 	mov.w	fp, #0
    2e68:	455d      	cmp	r5, fp
    2e6a:	dc45      	bgt.n	2ef8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2e6c:	9b05      	ldr	r3, [sp, #20]
    2e6e:	4651      	mov	r1, sl
    2e70:	781a      	ldrb	r2, [r3, #0]
    2e72:	4620      	mov	r0, r4
    2e74:	f7ff ff18 	bl	2ca8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2e78:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2e7c:	f01b 0f07 	tst.w	fp, #7
    2e80:	d103      	bne.n	2e8a <log_output_process+0x1a2>
			print_formatted(output, " ");
    2e82:	4649      	mov	r1, r9
    2e84:	4620      	mov	r0, r4
    2e86:	f7ff ff0f 	bl	2ca8 <print_formatted>
		if (i < length) {
    2e8a:	45d8      	cmp	r8, fp
    2e8c:	d93b      	bls.n	2f06 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2e8e:	9b05      	ldr	r3, [sp, #20]
    2e90:	4651      	mov	r1, sl
    2e92:	f813 200b 	ldrb.w	r2, [r3, fp]
    2e96:	4620      	mov	r0, r4
    2e98:	f7ff ff06 	bl	2ca8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2e9c:	f10b 0b01 	add.w	fp, fp, #1
    2ea0:	f1bb 0f10 	cmp.w	fp, #16
    2ea4:	d1ea      	bne.n	2e7c <log_output_process+0x194>
	print_formatted(output, "|");
    2ea6:	4936      	ldr	r1, [pc, #216]	; (2f80 <log_output_process+0x298>)
    2ea8:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2eaa:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    2eae:	f7ff fefb 	bl	2ca8 <print_formatted>
		if (i < length) {
    2eb2:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    2eb4:	9b05      	ldr	r3, [sp, #20]
    2eb6:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    2eb8:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2ebc:	295f      	cmp	r1, #95	; 0x5f
    2ebe:	bf28      	it	cs
    2ec0:	222e      	movcs	r2, #46	; 0x2e
    2ec2:	4930      	ldr	r1, [pc, #192]	; (2f84 <log_output_process+0x29c>)
    2ec4:	4620      	mov	r0, r4
    2ec6:	f7ff feef 	bl	2ca8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2eca:	f10b 0b01 	add.w	fp, fp, #1
    2ece:	f1bb 0f10 	cmp.w	fp, #16
    2ed2:	d01d      	beq.n	2f10 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    2ed4:	f01b 0f07 	tst.w	fp, #7
    2ed8:	d103      	bne.n	2ee2 <log_output_process+0x1fa>
			print_formatted(output, " ");
    2eda:	4649      	mov	r1, r9
    2edc:	4620      	mov	r0, r4
    2ede:	f7ff fee3 	bl	2ca8 <print_formatted>
		if (i < length) {
    2ee2:	45d8      	cmp	r8, fp
    2ee4:	465a      	mov	r2, fp
    2ee6:	d8e5      	bhi.n	2eb4 <log_output_process+0x1cc>
			print_formatted(output, " ");
    2ee8:	4649      	mov	r1, r9
    2eea:	4620      	mov	r0, r4
    2eec:	f7ff fedc 	bl	2ca8 <print_formatted>
    2ef0:	e7eb      	b.n	2eca <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2ef2:	481f      	ldr	r0, [pc, #124]	; (2f70 <log_output_process+0x288>)
		prefix_offset = 0;
    2ef4:	9d04      	ldr	r5, [sp, #16]
    2ef6:	e7a1      	b.n	2e3c <log_output_process+0x154>
		print_formatted(output, " ");
    2ef8:	4649      	mov	r1, r9
    2efa:	4620      	mov	r0, r4
    2efc:	f7ff fed4 	bl	2ca8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2f00:	f10b 0b01 	add.w	fp, fp, #1
    2f04:	e7b0      	b.n	2e68 <log_output_process+0x180>
			print_formatted(output, "   ");
    2f06:	4920      	ldr	r1, [pc, #128]	; (2f88 <log_output_process+0x2a0>)
    2f08:	4620      	mov	r0, r4
    2f0a:	f7ff fecd 	bl	2ca8 <print_formatted>
    2f0e:	e7c5      	b.n	2e9c <log_output_process+0x1b4>
		data += length;
    2f10:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    2f12:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    2f16:	4443      	add	r3, r8
    2f18:	9305      	str	r3, [sp, #20]
	} while (len);
    2f1a:	d19a      	bne.n	2e52 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2f1c:	9b04      	ldr	r3, [sp, #16]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	f47f af43 	bne.w	2daa <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2f24:	4620      	mov	r0, r4
}
    2f26:	b009      	add	sp, #36	; 0x24
    2f28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2f2c:	f008 bf30 	b.w	bd90 <log_output_flush>
		print_formatted(output, "%s", log_color);
    2f30:	4a06      	ldr	r2, [pc, #24]	; (2f4c <log_output_process+0x264>)
    2f32:	4905      	ldr	r1, [pc, #20]	; (2f48 <log_output_process+0x260>)
    2f34:	4620      	mov	r0, r4
    2f36:	f7ff feb7 	bl	2ca8 <print_formatted>
}
    2f3a:	e739      	b.n	2db0 <log_output_process+0xc8>
    2f3c:	0000d843 	.word	0x0000d843
    2f40:	0000d847 	.word	0x0000d847
    2f44:	0000d32c 	.word	0x0000d32c
    2f48:	0000e283 	.word	0x0000e283
    2f4c:	0000d83e 	.word	0x0000d83e
    2f50:	0000d340 	.word	0x0000d340
    2f54:	0000d86c 	.word	0x0000d86c
    2f58:	0000d872 	.word	0x0000d872
    2f5c:	0000d876 	.word	0x0000d876
    2f60:	20000c00 	.word	0x20000c00
    2f64:	20000bfc 	.word	0x20000bfc
    2f68:	0000d850 	.word	0x0000d850
    2f6c:	0000bde1 	.word	0x0000bde1
    2f70:	0000bdab 	.word	0x0000bdab
    2f74:	0000bd83 	.word	0x0000bd83
    2f78:	0000d6b0 	.word	0x0000d6b0
    2f7c:	0000d87b 	.word	0x0000d87b
    2f80:	0000d885 	.word	0x0000d885
    2f84:	0000d887 	.word	0x0000d887
    2f88:	0000d881 	.word	0x0000d881

00002f8c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2f90:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2f92:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2f94:	688e      	ldr	r6, [r1, #8]
    2f96:	b086      	sub	sp, #24
    2f98:	4605      	mov	r5, r0
    2f9a:	460c      	mov	r4, r1
    2f9c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2f9e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2fa2:	b15b      	cbz	r3, 2fbc <log_output_msg_process+0x30>
    2fa4:	4a13      	ldr	r2, [pc, #76]	; (2ff4 <log_output_msg_process+0x68>)
    2fa6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2fa8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2fac:	2900      	cmp	r1, #0
    2fae:	db1f      	blt.n	2ff0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2fb0:	7820      	ldrb	r0, [r4, #0]
    2fb2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    2fb6:	f7ff fd8b 	bl	2ad0 <log_source_name_get>
    2fba:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2fbc:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2fbe:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2fc0:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2fc4:	9700      	str	r7, [sp, #0]
    2fc6:	f3c2 224a 	ubfx	r2, r2, #9, #11
    2fca:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2fcc:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2fd0:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2fd4:	bf08      	it	eq
    2fd6:	2100      	moveq	r1, #0
    2fd8:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2fdc:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2fe0:	2200      	movs	r2, #0
    2fe2:	4631      	mov	r1, r6
    2fe4:	4628      	mov	r0, r5
    2fe6:	f7ff fe7f 	bl	2ce8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2fea:	b006      	add	sp, #24
    2fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2ff0:	2300      	movs	r3, #0
    2ff2:	e7e3      	b.n	2fbc <log_output_msg_process+0x30>
    2ff4:	0000d220 	.word	0x0000d220

00002ff8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ffa:	f242 730f 	movw	r3, #9999	; 0x270f
    2ffe:	428b      	cmp	r3, r1
    3000:	bf28      	it	cs
    3002:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    3004:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3006:	4a0f      	ldr	r2, [pc, #60]	; (3044 <log_output_dropped_process+0x4c>)
{
    3008:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    300a:	2105      	movs	r1, #5
    300c:	4668      	mov	r0, sp
    300e:	f007 ffdd 	bl	afcc <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3012:	6863      	ldr	r3, [r4, #4]
    3014:	490c      	ldr	r1, [pc, #48]	; (3048 <log_output_dropped_process+0x50>)
    3016:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3018:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    301a:	220b      	movs	r2, #11
    301c:	4628      	mov	r0, r5
    301e:	f008 fea3 	bl	bd68 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    3022:	6863      	ldr	r3, [r4, #4]
    3024:	4632      	mov	r2, r6
    3026:	4669      	mov	r1, sp
    3028:	4628      	mov	r0, r5
    302a:	685b      	ldr	r3, [r3, #4]
    302c:	f008 fe9c 	bl	bd68 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3030:	6863      	ldr	r3, [r4, #4]
    3032:	4906      	ldr	r1, [pc, #24]	; (304c <log_output_dropped_process+0x54>)
    3034:	685b      	ldr	r3, [r3, #4]
    3036:	221b      	movs	r2, #27
    3038:	4628      	mov	r0, r5
    303a:	f008 fe95 	bl	bd68 <buffer_write>
		     output->control_block->ctx);
}
    303e:	b002      	add	sp, #8
    3040:	bd70      	pop	{r4, r5, r6, pc}
    3042:	bf00      	nop
    3044:	0000e0bf 	.word	0x0000e0bf
    3048:	0000d8a6 	.word	0x0000d8a6
    304c:	0000d88a 	.word	0x0000d88a

00003050 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3050:	4a07      	ldr	r2, [pc, #28]	; (3070 <log_output_timestamp_freq_set+0x20>)
    3052:	2100      	movs	r1, #0
    3054:	2301      	movs	r3, #1
    3056:	4290      	cmp	r0, r2
    3058:	d806      	bhi.n	3068 <log_output_timestamp_freq_set+0x18>
    305a:	4a06      	ldr	r2, [pc, #24]	; (3074 <log_output_timestamp_freq_set+0x24>)
    305c:	b901      	cbnz	r1, 3060 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    305e:	2301      	movs	r3, #1
    3060:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3062:	4b05      	ldr	r3, [pc, #20]	; (3078 <log_output_timestamp_freq_set+0x28>)
    3064:	6018      	str	r0, [r3, #0]
}
    3066:	4770      	bx	lr
		frequency /= 2U;
    3068:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    306a:	005b      	lsls	r3, r3, #1
    306c:	2101      	movs	r1, #1
    306e:	e7f2      	b.n	3056 <log_output_timestamp_freq_set+0x6>
    3070:	000f4240 	.word	0x000f4240
    3074:	20000bfc 	.word	0x20000bfc
    3078:	20000c00 	.word	0x20000c00

0000307c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    307c:	4b01      	ldr	r3, [pc, #4]	; (3084 <format_set+0x8>)
	return 0;
}
    307e:	2000      	movs	r0, #0
	log_format_current = log_type;
    3080:	6019      	str	r1, [r3, #0]
}
    3082:	4770      	bx	lr
    3084:	20000c18 	.word	0x20000c18

00003088 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    3088:	4b02      	ldr	r3, [pc, #8]	; (3094 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    308a:	4803      	ldr	r0, [pc, #12]	; (3098 <panic+0x10>)
    308c:	2201      	movs	r2, #1
    308e:	701a      	strb	r2, [r3, #0]
    3090:	f008 be7e 	b.w	bd90 <log_output_flush>
    3094:	20002125 	.word	0x20002125
    3098:	0000d370 	.word	0x0000d370

0000309c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    309c:	4801      	ldr	r0, [pc, #4]	; (30a4 <dropped+0x8>)
    309e:	f7ff bfab 	b.w	2ff8 <log_output_dropped_process>
    30a2:	bf00      	nop
    30a4:	0000d370 	.word	0x0000d370

000030a8 <process>:
{
    30a8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    30aa:	4b06      	ldr	r3, [pc, #24]	; (30c4 <process+0x1c>)
    30ac:	6818      	ldr	r0, [r3, #0]
{
    30ae:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    30b0:	f7ff fb48 	bl	2744 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    30b4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    30b6:	4603      	mov	r3, r0
}
    30b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    30bc:	4802      	ldr	r0, [pc, #8]	; (30c8 <process+0x20>)
    30be:	220f      	movs	r2, #15
    30c0:	4718      	bx	r3
    30c2:	bf00      	nop
    30c4:	20000c18 	.word	0x20000c18
    30c8:	0000d370 	.word	0x0000d370

000030cc <char_out>:
{
    30cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
    30ce:	4f07      	ldr	r7, [pc, #28]	; (30ec <char_out+0x20>)
    30d0:	460d      	mov	r5, r1
    30d2:	4604      	mov	r4, r0
    30d4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    30d6:	42b4      	cmp	r4, r6
    30d8:	d101      	bne.n	30de <char_out+0x12>
}
    30da:	4628      	mov	r0, r5
    30dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    30de:	f814 1b01 	ldrb.w	r1, [r4], #1
    30e2:	68bb      	ldr	r3, [r7, #8]
    30e4:	4801      	ldr	r0, [pc, #4]	; (30ec <char_out+0x20>)
    30e6:	685b      	ldr	r3, [r3, #4]
    30e8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    30ea:	e7f4      	b.n	30d6 <char_out+0xa>
    30ec:	0000d010 	.word	0x0000d010

000030f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    30f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30f4:	4605      	mov	r5, r0
	__asm__ volatile(
    30f6:	f04f 0320 	mov.w	r3, #32
    30fa:	f3ef 8611 	mrs	r6, BASEPRI
    30fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3102:	f3bf 8f6f 	isb	sy
	return list->head;
    3106:	4b0e      	ldr	r3, [pc, #56]	; (3140 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3108:	4f0e      	ldr	r7, [pc, #56]	; (3144 <pm_state_notify+0x54>)
    310a:	681c      	ldr	r4, [r3, #0]
    310c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3148 <pm_state_notify+0x58>
    3110:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3114:	b92c      	cbnz	r4, 3122 <pm_state_notify+0x32>
	__asm__ volatile(
    3116:	f386 8811 	msr	BASEPRI, r6
    311a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3122:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3126:	2d00      	cmp	r5, #0
    3128:	bf18      	it	ne
    312a:	4613      	movne	r3, r2
		if (callback) {
    312c:	b12b      	cbz	r3, 313a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    312e:	f898 2010 	ldrb.w	r2, [r8, #16]
    3132:	fb09 f202 	mul.w	r2, r9, r2
    3136:	5cb8      	ldrb	r0, [r7, r2]
    3138:	4798      	blx	r3
	return node->next;
    313a:	6824      	ldr	r4, [r4, #0]
    313c:	e7ea      	b.n	3114 <pm_state_notify+0x24>
    313e:	bf00      	nop
    3140:	20000c34 	.word	0x20000c34
    3144:	20000c28 	.word	0x20000c28
    3148:	20001f0c 	.word	0x20001f0c

0000314c <pm_system_resume>:

void pm_system_resume(void)
{
    314c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    314e:	4b19      	ldr	r3, [pc, #100]	; (31b4 <pm_system_resume+0x68>)
    3150:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3152:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3156:	f004 031f 	and.w	r3, r4, #31
    315a:	2201      	movs	r2, #1
    315c:	409a      	lsls	r2, r3
    315e:	4b16      	ldr	r3, [pc, #88]	; (31b8 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3160:	0961      	lsrs	r1, r4, #5
    3162:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3166:	43d0      	mvns	r0, r2
    3168:	e853 1f00 	ldrex	r1, [r3]
    316c:	ea01 0500 	and.w	r5, r1, r0
    3170:	e843 5600 	strex	r6, r5, [r3]
    3174:	2e00      	cmp	r6, #0
    3176:	d1f7      	bne.n	3168 <pm_system_resume+0x1c>
    3178:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    317c:	420a      	tst	r2, r1
    317e:	d013      	beq.n	31a8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    3180:	4b0e      	ldr	r3, [pc, #56]	; (31bc <pm_system_resume+0x70>)
    3182:	4d0f      	ldr	r5, [pc, #60]	; (31c0 <pm_system_resume+0x74>)
    3184:	b18b      	cbz	r3, 31aa <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3186:	230c      	movs	r3, #12
    3188:	4363      	muls	r3, r4
    318a:	18ea      	adds	r2, r5, r3
    318c:	5ce8      	ldrb	r0, [r5, r3]
    318e:	7851      	ldrb	r1, [r2, #1]
    3190:	f008 fff1 	bl	c176 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3194:	2000      	movs	r0, #0
    3196:	f7ff ffab 	bl	30f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    319a:	230c      	movs	r3, #12
    319c:	435c      	muls	r4, r3
    319e:	192a      	adds	r2, r5, r4
    31a0:	2300      	movs	r3, #0
    31a2:	512b      	str	r3, [r5, r4]
    31a4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    31a8:	bd70      	pop	{r4, r5, r6, pc}
    31aa:	f383 8811 	msr	BASEPRI, r3
    31ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    31b2:	e7ef      	b.n	3194 <pm_system_resume+0x48>
    31b4:	20001f0c 	.word	0x20001f0c
    31b8:	20000c3c 	.word	0x20000c3c
    31bc:	0000c177 	.word	0x0000c177
    31c0:	20000c28 	.word	0x20000c28

000031c4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    31c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    31c8:	4b35      	ldr	r3, [pc, #212]	; (32a0 <pm_system_suspend+0xdc>)
{
    31ca:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    31cc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    31ce:	f04f 0320 	mov.w	r3, #32
    31d2:	f3ef 8811 	mrs	r8, BASEPRI
    31d6:	f383 8812 	msr	BASEPRI_MAX, r3
    31da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    31de:	240c      	movs	r4, #12
    31e0:	4b30      	ldr	r3, [pc, #192]	; (32a4 <pm_system_suspend+0xe0>)
    31e2:	4e31      	ldr	r6, [pc, #196]	; (32a8 <pm_system_suspend+0xe4>)
    31e4:	436c      	muls	r4, r5
    31e6:	191a      	adds	r2, r3, r4
    31e8:	5d19      	ldrb	r1, [r3, r4]
    31ea:	2900      	cmp	r1, #0
    31ec:	d04c      	beq.n	3288 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    31ee:	ca07      	ldmia	r2, {r0, r1, r2}
    31f0:	eb06 0c04 	add.w	ip, r6, r4
    31f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    31f8:	2200      	movs	r2, #0
    31fa:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    31fc:	f388 8811 	msr	BASEPRI, r8
    3200:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3204:	230c      	movs	r3, #12
    3206:	436b      	muls	r3, r5
    3208:	18f2      	adds	r2, r6, r3
    320a:	5cf0      	ldrb	r0, [r6, r3]
    320c:	2800      	cmp	r0, #0
    320e:	d039      	beq.n	3284 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    3210:	1c7b      	adds	r3, r7, #1
    3212:	d010      	beq.n	3236 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3214:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3218:	4c24      	ldr	r4, [pc, #144]	; (32ac <pm_system_suspend+0xe8>)
    321a:	4a25      	ldr	r2, [pc, #148]	; (32b0 <pm_system_suspend+0xec>)
    321c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3220:	2100      	movs	r1, #0
    3222:	fbec 4100 	umlal	r4, r1, ip, r0
    3226:	2300      	movs	r3, #0
    3228:	4620      	mov	r0, r4
    322a:	f7fd ff69 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    322e:	2101      	movs	r1, #1
    3230:	1a38      	subs	r0, r7, r0
    3232:	f004 f881 	bl	7338 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3236:	f007 f8ad 	bl	a394 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    323a:	2001      	movs	r0, #1
    323c:	f7ff ff58 	bl	30f0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3240:	f3bf 8f5b 	dmb	ish
    3244:	4b1b      	ldr	r3, [pc, #108]	; (32b4 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3246:	096a      	lsrs	r2, r5, #5
    3248:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    324c:	f005 011f 	and.w	r1, r5, #31
    3250:	2201      	movs	r2, #1
    3252:	408a      	lsls	r2, r1
    3254:	e853 0f00 	ldrex	r0, [r3]
    3258:	4310      	orrs	r0, r2
    325a:	e843 0100 	strex	r1, r0, [r3]
    325e:	2900      	cmp	r1, #0
    3260:	d1f8      	bne.n	3254 <pm_system_suspend+0x90>
    3262:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3266:	4b14      	ldr	r3, [pc, #80]	; (32b8 <pm_system_suspend+0xf4>)
    3268:	b13b      	cbz	r3, 327a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    326a:	230c      	movs	r3, #12
    326c:	fb03 f005 	mul.w	r0, r3, r5
    3270:	1833      	adds	r3, r6, r0
    3272:	5c30      	ldrb	r0, [r6, r0]
    3274:	7859      	ldrb	r1, [r3, #1]
    3276:	f008 ff72 	bl	c15e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    327a:	f7ff ff67 	bl	314c <pm_system_resume>
	k_sched_unlock();
    327e:	f007 f89d 	bl	a3bc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3282:	2001      	movs	r0, #1
}
    3284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3288:	4601      	mov	r1, r0
    328a:	4628      	mov	r0, r5
    328c:	f000 f816 	bl	32bc <pm_policy_next_state>
		if (info != NULL) {
    3290:	2800      	cmp	r0, #0
    3292:	d0b3      	beq.n	31fc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3294:	c807      	ldmia	r0, {r0, r1, r2}
    3296:	4434      	add	r4, r6
    3298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    329c:	e7ae      	b.n	31fc <pm_system_suspend+0x38>
    329e:	bf00      	nop
    32a0:	20001f0c 	.word	0x20001f0c
    32a4:	20000c1c 	.word	0x20000c1c
    32a8:	20000c28 	.word	0x20000c28
    32ac:	000f423f 	.word	0x000f423f
    32b0:	000f4240 	.word	0x000f4240
    32b4:	20000c3c 	.word	0x20000c3c
    32b8:	0000c15f 	.word	0x0000c15f

000032bc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    32bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c0:	b085      	sub	sp, #20
    32c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    32c4:	a903      	add	r1, sp, #12
    32c6:	f000 f843 	bl	3350 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    32ca:	4b1e      	ldr	r3, [pc, #120]	; (3344 <pm_policy_next_state+0x88>)
    32cc:	9d03      	ldr	r5, [sp, #12]
    32ce:	f8d3 a000 	ldr.w	sl, [r3]
    32d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3348 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    32d6:	1e43      	subs	r3, r0, #1
    32d8:	b21b      	sxth	r3, r3
    32da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    32de:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    32e0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    32e4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    32e8:	f04f 0b00 	mov.w	fp, #0
    32ec:	b924      	cbnz	r4, 32f8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    32ee:	46a1      	mov	r9, r4
}
    32f0:	4648      	mov	r0, r9
    32f2:	b005      	add	sp, #20
    32f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32f8:	6868      	ldr	r0, [r5, #4]
    32fa:	4a14      	ldr	r2, [pc, #80]	; (334c <pm_policy_next_state+0x90>)
    32fc:	46c4      	mov	ip, r8
    32fe:	4659      	mov	r1, fp
    3300:	fbe0 c107 	umlal	ip, r1, r0, r7
    3304:	2300      	movs	r3, #0
    3306:	4660      	mov	r0, ip
    3308:	f7fd fefa 	bl	1100 <__aeabi_uldivmod>
    330c:	9001      	str	r0, [sp, #4]
    330e:	68a8      	ldr	r0, [r5, #8]
    3310:	4a0e      	ldr	r2, [pc, #56]	; (334c <pm_policy_next_state+0x90>)
    3312:	46c4      	mov	ip, r8
    3314:	4659      	mov	r1, fp
    3316:	fbe0 c107 	umlal	ip, r1, r0, r7
    331a:	2300      	movs	r3, #0
    331c:	4660      	mov	r0, ip
    331e:	f7fd feef 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3322:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    3326:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3328:	d001      	beq.n	332e <pm_policy_next_state+0x72>
    332a:	4582      	cmp	sl, r0
    332c:	d905      	bls.n	333a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    332e:	1c73      	adds	r3, r6, #1
    3330:	d0de      	beq.n	32f0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    3336:	42b0      	cmp	r0, r6
    3338:	d9da      	bls.n	32f0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    333a:	3c01      	subs	r4, #1
    333c:	b2a4      	uxth	r4, r4
    333e:	3d0c      	subs	r5, #12
    3340:	e7d4      	b.n	32ec <pm_policy_next_state+0x30>
    3342:	bf00      	nop
    3344:	200000b8 	.word	0x200000b8
    3348:	000f423f 	.word	0x000f423f
    334c:	000f4240 	.word	0x000f4240

00003350 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3350:	b908      	cbnz	r0, 3356 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3352:	4b02      	ldr	r3, [pc, #8]	; (335c <pm_state_cpu_get_all+0xc>)
    3354:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3356:	2000      	movs	r0, #0
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	0000d380 	.word	0x0000d380

00003360 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    3360:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3364:	4e0c      	ldr	r6, [pc, #48]	; (3398 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3366:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3368:	4b0c      	ldr	r3, [pc, #48]	; (339c <class_handler+0x3c>)
    336a:	42b3      	cmp	r3, r6
    336c:	d303      	bcc.n	3376 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    336e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3372:	bcf0      	pop	{r4, r5, r6, r7}
    3374:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3376:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3378:	42bd      	cmp	r5, r7
    337a:	d309      	bcc.n	3390 <class_handler+0x30>
		if (iface->class_handler &&
    337c:	691c      	ldr	r4, [r3, #16]
    337e:	b13c      	cbz	r4, 3390 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3380:	f895 c002 	ldrb.w	ip, [r5, #2]
    3384:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3386:	45ac      	cmp	ip, r5
    3388:	d102      	bne.n	3390 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    338a:	4623      	mov	r3, r4
}
    338c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    338e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3390:	3324      	adds	r3, #36	; 0x24
    3392:	e7ea      	b.n	336a <class_handler+0xa>
    3394:	20000c40 	.word	0x20000c40
    3398:	20000408 	.word	0x20000408
    339c:	200003e4 	.word	0x200003e4

000033a0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    33a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    33a4:	4c13      	ldr	r4, [pc, #76]	; (33f4 <custom_handler+0x54>)
    33a6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 33f8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    33aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 33fc <custom_handler+0x5c>
{
    33ae:	4605      	mov	r5, r0
    33b0:	460e      	mov	r6, r1
    33b2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    33b4:	4544      	cmp	r4, r8
    33b6:	d303      	bcc.n	33c0 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    33b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    33bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    33c0:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    33c2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    33c6:	429a      	cmp	r2, r3
    33c8:	d312      	bcc.n	33f0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    33ca:	69a3      	ldr	r3, [r4, #24]
    33cc:	b183      	cbz	r3, 33f0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    33ce:	7890      	ldrb	r0, [r2, #2]
    33d0:	7929      	ldrb	r1, [r5, #4]
    33d2:	4288      	cmp	r0, r1
    33d4:	d105      	bne.n	33e2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    33d6:	463a      	mov	r2, r7
    33d8:	4631      	mov	r1, r6
    33da:	4628      	mov	r0, r5
}
    33dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    33e0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    33e2:	7952      	ldrb	r2, [r2, #5]
    33e4:	2a01      	cmp	r2, #1
    33e6:	d103      	bne.n	33f0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    33e8:	463a      	mov	r2, r7
    33ea:	4631      	mov	r1, r6
    33ec:	4628      	mov	r0, r5
    33ee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    33f0:	3424      	adds	r4, #36	; 0x24
    33f2:	e7df      	b.n	33b4 <custom_handler+0x14>
    33f4:	200003e4 	.word	0x200003e4
    33f8:	20000408 	.word	0x20000408
    33fc:	20000c40 	.word	0x20000c40

00003400 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3404:	4c0b      	ldr	r4, [pc, #44]	; (3434 <vendor_handler+0x34>)
    3406:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3438 <vendor_handler+0x38>
{
    340a:	4605      	mov	r5, r0
    340c:	460e      	mov	r6, r1
    340e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3410:	4544      	cmp	r4, r8
    3412:	d302      	bcc.n	341a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3414:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3418:	e009      	b.n	342e <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    341a:	6963      	ldr	r3, [r4, #20]
    341c:	b90b      	cbnz	r3, 3422 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    341e:	3424      	adds	r4, #36	; 0x24
    3420:	e7f6      	b.n	3410 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    3422:	463a      	mov	r2, r7
    3424:	4631      	mov	r1, r6
    3426:	4628      	mov	r0, r5
    3428:	4798      	blx	r3
    342a:	2800      	cmp	r0, #0
    342c:	d1f7      	bne.n	341e <vendor_handler+0x1e>
}
    342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3432:	bf00      	nop
    3434:	200003e4 	.word	0x200003e4
    3438:	20000408 	.word	0x20000408

0000343c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    343c:	4802      	ldr	r0, [pc, #8]	; (3448 <usb_reset_alt_setting+0xc>)
    343e:	2208      	movs	r2, #8
    3440:	2100      	movs	r1, #0
    3442:	f008 be80 	b.w	c146 <memset>
    3446:	bf00      	nop
    3448:	20000cfb 	.word	0x20000cfb

0000344c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    344c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    344e:	4b0b      	ldr	r3, [pc, #44]	; (347c <is_ep_valid.part.0+0x30>)
    3450:	4c0b      	ldr	r4, [pc, #44]	; (3480 <is_ep_valid.part.0+0x34>)
    3452:	42a3      	cmp	r3, r4
    3454:	d301      	bcc.n	345a <is_ep_valid.part.0+0xe>
	return false;
    3456:	2000      	movs	r0, #0
}
    3458:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    345a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    345c:	7f1e      	ldrb	r6, [r3, #28]
    345e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    3460:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3462:	b2d5      	uxtb	r5, r2
    3464:	42ae      	cmp	r6, r5
    3466:	d801      	bhi.n	346c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3468:	3324      	adds	r3, #36	; 0x24
    346a:	e7f2      	b.n	3452 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    346c:	3201      	adds	r2, #1
    346e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    3472:	4285      	cmp	r5, r0
    3474:	d1f5      	bne.n	3462 <is_ep_valid.part.0+0x16>
		return true;
    3476:	2001      	movs	r0, #1
    3478:	e7ee      	b.n	3458 <is_ep_valid.part.0+0xc>
    347a:	bf00      	nop
    347c:	200003e4 	.word	0x200003e4
    3480:	20000408 	.word	0x20000408

00003484 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    3484:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    3486:	4809      	ldr	r0, [pc, #36]	; (34ac <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    3488:	7803      	ldrb	r3, [r0, #0]
    348a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    348e:	330a      	adds	r3, #10
    3490:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3494:	b13b      	cbz	r3, 34a6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3496:	f100 0208 	add.w	r2, r0, #8
    349a:	f100 0110 	add.w	r1, r0, #16
    349e:	4798      	blx	r3
    34a0:	43c0      	mvns	r0, r0
    34a2:	0fc0      	lsrs	r0, r0, #31
}
    34a4:	bd08      	pop	{r3, pc}
		return false;
    34a6:	4618      	mov	r0, r3
    34a8:	e7fc      	b.n	34a4 <usb_handle_request.constprop.0+0x20>
    34aa:	bf00      	nop
    34ac:	20000c40 	.word	0x20000c40

000034b0 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    34b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    34b2:	4b08      	ldr	r3, [pc, #32]	; (34d4 <usb_device_init.part.0+0x24>)
    34b4:	9305      	str	r3, [sp, #20]
    34b6:	2302      	movs	r3, #2
    34b8:	9304      	str	r3, [sp, #16]
    34ba:	4807      	ldr	r0, [pc, #28]	; (34d8 <usb_device_init.part.0+0x28>)
    34bc:	2300      	movs	r3, #0
    34be:	aa04      	add	r2, sp, #16
    34c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    34c4:	f7ff fb26 	bl	2b14 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    34c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34cc:	b007      	add	sp, #28
    34ce:	f85d fb04 	ldr.w	pc, [sp], #4
    34d2:	bf00      	nop
    34d4:	0000d8ef 	.word	0x0000d8ef
    34d8:	0000d2c0 	.word	0x0000d2c0

000034dc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    34dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    34de:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    34e0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    34e2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    34e4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    34e8:	d007      	beq.n	34fa <usb_halt_endpoint_req.isra.0+0x1e>
    34ea:	4620      	mov	r0, r4
    34ec:	f7ff ffae 	bl	344c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    34f0:	b178      	cbz	r0, 3512 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    34f2:	4b0d      	ldr	r3, [pc, #52]	; (3528 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    34f4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    34f8:	b158      	cbz	r0, 3512 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    34fa:	4e0b      	ldr	r6, [pc, #44]	; (3528 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    34fc:	4620      	mov	r0, r4
		if (halt) {
    34fe:	b155      	cbz	r5, 3516 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    3500:	f002 fd84 	bl	600c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3504:	69f3      	ldr	r3, [r6, #28]
    3506:	b11b      	cbz	r3, 3510 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3508:	f10d 0107 	add.w	r1, sp, #7
    350c:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    350e:	4798      	blx	r3
		return true;
    3510:	2001      	movs	r0, #1
}
    3512:	b002      	add	sp, #8
    3514:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    3516:	f002 fdb3 	bl	6080 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    351a:	69f3      	ldr	r3, [r6, #28]
    351c:	2b00      	cmp	r3, #0
    351e:	d0f7      	beq.n	3510 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3520:	f10d 0107 	add.w	r1, sp, #7
    3524:	2009      	movs	r0, #9
    3526:	e7f2      	b.n	350e <usb_halt_endpoint_req.isra.0+0x32>
    3528:	20000c40 	.word	0x20000c40

0000352c <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    352c:	b580      	push	{r7, lr}
    352e:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    3530:	b088      	sub	sp, #32
    3532:	466a      	mov	r2, sp
    3534:	4b07      	ldr	r3, [pc, #28]	; (3554 <get_ep_bm_from_addr.part.0+0x28>)
    3536:	e9c2 3005 	strd	r3, r0, [r2, #20]
    353a:	2303      	movs	r3, #3
    353c:	f842 3f10 	str.w	r3, [r2, #16]!
    3540:	4805      	ldr	r0, [pc, #20]	; (3558 <get_ep_bm_from_addr.part.0+0x2c>)
    3542:	2300      	movs	r3, #0
    3544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3548:	f7ff fae4 	bl	2b14 <z_impl_z_log_msg_static_create>
}
    354c:	2000      	movs	r0, #0
    354e:	46bd      	mov	sp, r7
    3550:	bd80      	pop	{r7, pc}
    3552:	bf00      	nop
    3554:	0000d914 	.word	0x0000d914
    3558:	0000d2c0 	.word	0x0000d2c0

0000355c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    355c:	2804      	cmp	r0, #4
{
    355e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3562:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3600 <forward_status_cb+0xa4>
    3566:	4604      	mov	r4, r0
    3568:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    356a:	d015      	beq.n	3598 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    356c:	2801      	cmp	r0, #1
    356e:	d12f      	bne.n	35d0 <forward_status_cb+0x74>
		if (usb_dev.configured) {
    3570:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3604 <forward_status_cb+0xa8>
    3574:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    3578:	b353      	cbz	r3, 35d0 <forward_status_cb+0x74>
			usb_cancel_transfers();
    357a:	f000 fed1 	bl	4320 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    357e:	4d22      	ldr	r5, [pc, #136]	; (3608 <forward_status_cb+0xac>)
    3580:	454d      	cmp	r5, r9
    3582:	d222      	bcs.n	35ca <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    3584:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3586:	f04f 0a00 	mov.w	sl, #0
    358a:	7f2b      	ldrb	r3, [r5, #28]
    358c:	fa5f f68a 	uxtb.w	r6, sl
    3590:	42b3      	cmp	r3, r6
    3592:	d804      	bhi.n	359e <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3594:	3524      	adds	r5, #36	; 0x24
    3596:	e7f3      	b.n	3580 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    3598:	f7ff ff50 	bl	343c <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    359c:	e7e8      	b.n	3570 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    359e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    35a2:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    35a4:	7930      	ldrb	r0, [r6, #4]
    35a6:	f008 fe06 	bl	c1b6 <usb_dc_ep_disable>
    35aa:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    35ac:	7930      	ldrb	r0, [r6, #4]
    35ae:	f008 fc26 	bl	bdfe <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    35b2:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    35b6:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    35b8:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    35bc:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    35c0:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    35c4:	f10a 0a01 	add.w	sl, sl, #1
    35c8:	dadf      	bge.n	358a <forward_status_cb+0x2e>
			usb_dev.configured = false;
    35ca:	2300      	movs	r3, #0
    35cc:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35d0:	4d0d      	ldr	r5, [pc, #52]	; (3608 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35d2:	454d      	cmp	r5, r9
    35d4:	d308      	bcc.n	35e8 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    35d6:	4b0b      	ldr	r3, [pc, #44]	; (3604 <forward_status_cb+0xa8>)
    35d8:	6a1b      	ldr	r3, [r3, #32]
    35da:	b16b      	cbz	r3, 35f8 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    35dc:	4639      	mov	r1, r7
    35de:	4620      	mov	r0, r4
}
    35e0:	b003      	add	sp, #12
    35e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    35e6:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    35e8:	68eb      	ldr	r3, [r5, #12]
    35ea:	b11b      	cbz	r3, 35f4 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    35ec:	463a      	mov	r2, r7
    35ee:	4621      	mov	r1, r4
    35f0:	4628      	mov	r0, r5
    35f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    35f4:	3524      	adds	r5, #36	; 0x24
    35f6:	e7ec      	b.n	35d2 <forward_status_cb+0x76>
}
    35f8:	b003      	add	sp, #12
    35fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35fe:	bf00      	nop
    3600:	20000408 	.word	0x20000408
    3604:	20000c40 	.word	0x20000c40
    3608:	200003e4 	.word	0x200003e4

0000360c <disable_endpoint>:
{
    360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    360e:	af00      	add	r7, sp, #0
    3610:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    3612:	f008 fdd0 	bl	c1b6 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    3616:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    361a:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    361c:	d013      	beq.n	3646 <disable_endpoint+0x3a>
	} else if (ret) {
    361e:	b190      	cbz	r0, 3646 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    3620:	466e      	mov	r6, sp
    3622:	b088      	sub	sp, #32
    3624:	466a      	mov	r2, sp
    3626:	4b0e      	ldr	r3, [pc, #56]	; (3660 <disable_endpoint+0x54>)
    3628:	e9c2 3505 	strd	r3, r5, [r2, #20]
    362c:	2303      	movs	r3, #3
    362e:	f842 3f10 	str.w	r3, [r2, #16]!
    3632:	480c      	ldr	r0, [pc, #48]	; (3664 <disable_endpoint+0x58>)
    3634:	2300      	movs	r3, #0
    3636:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    363a:	f7ff fa6b 	bl	2b14 <z_impl_z_log_msg_static_create>
    363e:	46b5      	mov	sp, r6
}
    3640:	4620      	mov	r0, r4
    3642:	46bd      	mov	sp, r7
    3644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    3646:	4628      	mov	r0, r5
    3648:	f008 fbd9 	bl	bdfe <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    364c:	4a06      	ldr	r2, [pc, #24]	; (3668 <disable_endpoint+0x5c>)
    364e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    3652:	ea23 0300 	bic.w	r3, r3, r0
    3656:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    365a:	2400      	movs	r4, #0
    365c:	e7f0      	b.n	3640 <disable_endpoint+0x34>
    365e:	bf00      	nop
    3660:	0000d92f 	.word	0x0000d92f
    3664:	0000d2c0 	.word	0x0000d2c0
    3668:	20000c40 	.word	0x20000c40

0000366c <set_endpoint>:
{
    366c:	b5f0      	push	{r4, r5, r6, r7, lr}
    366e:	b083      	sub	sp, #12
    3670:	af00      	add	r7, sp, #0
    3672:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3674:	7880      	ldrb	r0, [r0, #2]
    3676:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3678:	7923      	ldrb	r3, [r4, #4]
    367a:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    367c:	4d27      	ldr	r5, [pc, #156]	; (371c <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    367e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3682:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3684:	78e3      	ldrb	r3, [r4, #3]
    3686:	f003 0303 	and.w	r3, r3, #3
    368a:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    368c:	f008 fbb7 	bl	bdfe <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    3690:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3694:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3696:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    3698:	d00c      	beq.n	36b4 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    369a:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    369c:	4620      	mov	r0, r4
    369e:	f000 fe21 	bl	42e4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    36a2:	4620      	mov	r0, r4
    36a4:	f7ff ffb2 	bl	360c <disable_endpoint>
		if (!k_is_in_isr()) {
    36a8:	f009 f91f 	bl	c8ea <k_is_in_isr>
    36ac:	b910      	cbnz	r0, 36b4 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    36ae:	2096      	movs	r0, #150	; 0x96
    36b0:	f006 ff44 	bl	a53c <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    36b4:	4638      	mov	r0, r7
    36b6:	f002 fc75 	bl	5fa4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    36ba:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    36be:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    36c0:	7838      	ldrb	r0, [r7, #0]
    36c2:	d014      	beq.n	36ee <set_endpoint+0x82>
	} else if (ret) {
    36c4:	b19b      	cbz	r3, 36ee <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    36c6:	466c      	mov	r4, sp
    36c8:	b088      	sub	sp, #32
    36ca:	466a      	mov	r2, sp
    36cc:	4b14      	ldr	r3, [pc, #80]	; (3720 <set_endpoint+0xb4>)
    36ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    36d2:	2303      	movs	r3, #3
    36d4:	f842 3f10 	str.w	r3, [r2, #16]!
    36d8:	4812      	ldr	r0, [pc, #72]	; (3724 <set_endpoint+0xb8>)
    36da:	2300      	movs	r3, #0
    36dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    36e0:	f7ff fa18 	bl	2b14 <z_impl_z_log_msg_static_create>
		return false;
    36e4:	2000      	movs	r0, #0
    36e6:	46a5      	mov	sp, r4
}
    36e8:	370c      	adds	r7, #12
    36ea:	46bd      	mov	sp, r7
    36ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    36ee:	f002 fd03 	bl	60f8 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    36f2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    36f6:	d008      	beq.n	370a <set_endpoint+0x9e>
	} else if (ret) {
    36f8:	b138      	cbz	r0, 370a <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    36fa:	466c      	mov	r4, sp
    36fc:	b088      	sub	sp, #32
    36fe:	783b      	ldrb	r3, [r7, #0]
    3700:	466a      	mov	r2, sp
    3702:	4909      	ldr	r1, [pc, #36]	; (3728 <set_endpoint+0xbc>)
    3704:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3708:	e7e3      	b.n	36d2 <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    370a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    370e:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    3710:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    3712:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    3716:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    371a:	e7e5      	b.n	36e8 <set_endpoint+0x7c>
    371c:	20000c40 	.word	0x20000c40
    3720:	0000d951 	.word	0x0000d951
    3724:	0000d2c0 	.word	0x0000d2c0
    3728:	0000d975 	.word	0x0000d975

0000372c <usb_handle_standard_request>:
{
    372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    3730:	4ea3      	ldr	r6, [pc, #652]	; (39c0 <usb_handle_standard_request+0x294>)
    3732:	69b3      	ldr	r3, [r6, #24]
{
    3734:	4604      	mov	r4, r0
    3736:	460f      	mov	r7, r1
    3738:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    373a:	b9fb      	cbnz	r3, 377c <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    373c:	7823      	ldrb	r3, [r4, #0]
    373e:	f003 031f 	and.w	r3, r3, #31
    3742:	2b01      	cmp	r3, #1
    3744:	f000 809d 	beq.w	3882 <usb_handle_standard_request+0x156>
    3748:	2b02      	cmp	r3, #2
    374a:	f000 8104 	beq.w	3956 <usb_handle_standard_request+0x22a>
    374e:	bb33      	cbnz	r3, 379e <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    3750:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    3754:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    3756:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3758:	2800      	cmp	r0, #0
    375a:	da34      	bge.n	37c6 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    375c:	2906      	cmp	r1, #6
    375e:	d012      	beq.n	3786 <usb_handle_standard_request+0x5a>
    3760:	2908      	cmp	r1, #8
    3762:	d02b      	beq.n	37bc <usb_handle_standard_request+0x90>
    3764:	b9d9      	cbnz	r1, 379e <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    3766:	2301      	movs	r3, #1
    3768:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    376a:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    376c:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    3770:	005b      	lsls	r3, r3, #1
    3772:	f043 0301 	orr.w	r3, r3, #1
    3776:	7013      	strb	r3, [r2, #0]
		*len = 2;
    3778:	2302      	movs	r3, #2
    377a:	e12a      	b.n	39d2 <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    377c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    377e:	2800      	cmp	r0, #0
    3780:	d1dc      	bne.n	373c <usb_handle_standard_request+0x10>
		return 0;
    3782:	2000      	movs	r0, #0
    3784:	e00d      	b.n	37a2 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    3786:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3788:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    378a:	1f01      	subs	r1, r0, #4
    378c:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    378e:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3790:	d905      	bls.n	379e <usb_handle_standard_request+0x72>
    3792:	2807      	cmp	r0, #7
    3794:	d803      	bhi.n	379e <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    3796:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3798:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    379a:	780c      	ldrb	r4, [r1, #0]
    379c:	b91c      	cbnz	r4, 37a6 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    379e:	f06f 0015 	mvn.w	r0, #21
}
    37a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    37a6:	784e      	ldrb	r6, [r1, #1]
    37a8:	4566      	cmp	r6, ip
    37aa:	d103      	bne.n	37b4 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    37ac:	429a      	cmp	r2, r3
    37ae:	f000 810b 	beq.w	39c8 <usb_handle_standard_request+0x29c>
			cur_index++;
    37b2:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    37b4:	4421      	add	r1, r4
    37b6:	e7f0      	b.n	379a <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    37b8:	780b      	ldrb	r3, [r1, #0]
    37ba:	e10a      	b.n	39d2 <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    37bc:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    37c0:	7013      	strb	r3, [r2, #0]
				*len = 1;
    37c2:	2301      	movs	r3, #1
    37c4:	e105      	b.n	39d2 <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    37c6:	3901      	subs	r1, #1
    37c8:	2908      	cmp	r1, #8
    37ca:	d8e8      	bhi.n	379e <usb_handle_standard_request+0x72>
    37cc:	a301      	add	r3, pc, #4	; (adr r3, 37d4 <usb_handle_standard_request+0xa8>)
    37ce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    37d2:	bf00      	nop
    37d4:	0000386d 	.word	0x0000386d
    37d8:	0000379f 	.word	0x0000379f
    37dc:	0000387b 	.word	0x0000387b
    37e0:	0000379f 	.word	0x0000379f
    37e4:	000037f9 	.word	0x000037f9
    37e8:	0000379f 	.word	0x0000379f
    37ec:	0000379f 	.word	0x0000379f
    37f0:	0000379f 	.word	0x0000379f
    37f4:	00003805 	.word	0x00003805
			return !usb_dc_set_address(setup->wValue);
    37f8:	78a0      	ldrb	r0, [r4, #2]
    37fa:	f002 fb97 	bl	5f2c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    37fe:	2800      	cmp	r0, #0
    3800:	d0bf      	beq.n	3782 <usb_handle_standard_request+0x56>
    3802:	e7cc      	b.n	379e <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    3804:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3806:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    3808:	bb63      	cbnz	r3, 3864 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    380a:	f7ff fe17 	bl	343c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    380e:	8863      	ldrh	r3, [r4, #2]
    3810:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    3814:	69f3      	ldr	r3, [r6, #28]
    3816:	2b00      	cmp	r3, #0
    3818:	d0b3      	beq.n	3782 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    381a:	496a      	ldr	r1, [pc, #424]	; (39c4 <usb_handle_standard_request+0x298>)
    381c:	2003      	movs	r0, #3
    381e:	4798      	blx	r3
    3820:	e7af      	b.n	3782 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    3822:	786b      	ldrb	r3, [r5, #1]
    3824:	2b04      	cmp	r3, #4
    3826:	d010      	beq.n	384a <usb_handle_standard_request+0x11e>
    3828:	2b05      	cmp	r3, #5
    382a:	d011      	beq.n	3850 <usb_handle_standard_request+0x124>
    382c:	2b02      	cmp	r3, #2
    382e:	d104      	bne.n	383a <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    3830:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    3832:	8863      	ldrh	r3, [r4, #2]
				found = true;
    3834:	42bb      	cmp	r3, r7
    3836:	bf08      	it	eq
    3838:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    383a:	782b      	ldrb	r3, [r5, #0]
    383c:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    383e:	782b      	ldrb	r3, [r5, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d1ee      	bne.n	3822 <usb_handle_standard_request+0xf6>
	if (found) {
    3844:	2800      	cmp	r0, #0
    3846:	d0aa      	beq.n	379e <usb_handle_standard_request+0x72>
    3848:	e7df      	b.n	380a <usb_handle_standard_request+0xde>
			cur_alt_setting =
    384a:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    384e:	e7f4      	b.n	383a <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    3850:	8863      	ldrh	r3, [r4, #2]
    3852:	42bb      	cmp	r3, r7
    3854:	d1f1      	bne.n	383a <usb_handle_standard_request+0x10e>
    3856:	f1b8 0f00 	cmp.w	r8, #0
    385a:	d1ee      	bne.n	383a <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    385c:	4628      	mov	r0, r5
    385e:	f7ff ff05 	bl	366c <set_endpoint>
			break;
    3862:	e7ea      	b.n	383a <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    3864:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    3866:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    3868:	46b8      	mov	r8, r7
    386a:	e7e8      	b.n	383e <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    386c:	8863      	ldrh	r3, [r4, #2]
    386e:	2b01      	cmp	r3, #1
    3870:	d195      	bne.n	379e <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    3872:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    3874:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    3878:	e783      	b.n	3782 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    387a:	8863      	ldrh	r3, [r4, #2]
    387c:	2b01      	cmp	r3, #1
    387e:	d18e      	bne.n	379e <usb_handle_standard_request+0x72>
    3880:	e7f8      	b.n	3874 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    3882:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3886:	f8d5 c000 	ldr.w	ip, [r5]
    388a:	2b00      	cmp	r3, #0
    388c:	d087      	beq.n	379e <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    388e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    3890:	88a3      	ldrh	r3, [r4, #4]
    3892:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3896:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    3898:	7810      	ldrb	r0, [r2, #0]
    389a:	2800      	cmp	r0, #0
    389c:	f43f af7f 	beq.w	379e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    38a0:	7851      	ldrb	r1, [r2, #1]
    38a2:	2902      	cmp	r1, #2
    38a4:	d104      	bne.n	38b0 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    38a6:	f892 8004 	ldrb.w	r8, [r2, #4]
    38aa:	45f0      	cmp	r8, lr
    38ac:	f200 8093 	bhi.w	39d6 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    38b0:	4402      	add	r2, r0
    38b2:	e7f1      	b.n	3898 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    38b4:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    38b8:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    38bc:	6039      	str	r1, [r7, #0]
			return true;
    38be:	e760      	b.n	3782 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    38c0:	4415      	add	r5, r2
    38c2:	e094      	b.n	39ee <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    38c4:	2a0b      	cmp	r2, #11
    38c6:	f47f af6a 	bne.w	379e <usb_handle_standard_request+0x72>
	bool ret = false;
    38ca:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    38cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    38d0:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    38d2:	46ba      	mov	sl, r7
    38d4:	e006      	b.n	38e4 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    38d6:	786b      	ldrb	r3, [r5, #1]
    38d8:	2b04      	cmp	r3, #4
    38da:	d00f      	beq.n	38fc <usb_handle_standard_request+0x1d0>
    38dc:	2b05      	cmp	r3, #5
    38de:	d021      	beq.n	3924 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    38e0:	782b      	ldrb	r3, [r5, #0]
    38e2:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    38e4:	782b      	ldrb	r3, [r5, #0]
    38e6:	2b00      	cmp	r3, #0
    38e8:	d1f5      	bne.n	38d6 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    38ea:	69f3      	ldr	r3, [r6, #28]
    38ec:	b113      	cbz	r3, 38f4 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    38ee:	4651      	mov	r1, sl
    38f0:	2007      	movs	r0, #7
    38f2:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    38f4:	2f00      	cmp	r7, #0
    38f6:	f47f af44 	bne.w	3782 <usb_handle_standard_request+0x56>
    38fa:	e750      	b.n	379e <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    38fc:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    3900:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    3902:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    3906:	4598      	cmp	r8, r3
    3908:	d1ea      	bne.n	38e0 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    390a:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    390c:	4599      	cmp	r9, r3
    390e:	d1e7      	bne.n	38e0 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3910:	f1b8 0f07 	cmp.w	r8, #7
    3914:	d81c      	bhi.n	3950 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    3916:	eb06 0308 	add.w	r3, r6, r8
		return true;
    391a:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    391c:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    3920:	2701      	movs	r7, #1
    3922:	e7dd      	b.n	38e0 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    3924:	88a3      	ldrh	r3, [r4, #4]
    3926:	4543      	cmp	r3, r8
    3928:	d1da      	bne.n	38e0 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    392a:	78a3      	ldrb	r3, [r4, #2]
    392c:	454b      	cmp	r3, r9
    392e:	d00a      	beq.n	3946 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    3930:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3932:	4638      	mov	r0, r7
    3934:	f000 fcd6 	bl	42e4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3938:	4638      	mov	r0, r7
    393a:	f7ff fe67 	bl	360c <disable_endpoint>
    393e:	fab0 f780 	clz	r7, r0
    3942:	097f      	lsrs	r7, r7, #5
    3944:	e7cc      	b.n	38e0 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    3946:	4628      	mov	r0, r5
    3948:	f7ff fe90 	bl	366c <set_endpoint>
    394c:	4607      	mov	r7, r0
    394e:	e7c7      	b.n	38e0 <usb_handle_standard_request+0x1b4>
    3950:	46aa      	mov	sl, r5
	return false;
    3952:	2700      	movs	r7, #0
    3954:	e7c4      	b.n	38e0 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    3956:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    395a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    395c:	2a00      	cmp	r2, #0
    395e:	da18      	bge.n	3992 <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    3960:	2b00      	cmp	r3, #0
    3962:	f47f af1c 	bne.w	379e <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    3966:	7924      	ldrb	r4, [r4, #4]
    3968:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    396a:	0663      	lsls	r3, r4, #25
    396c:	d00a      	beq.n	3984 <usb_handle_standard_request+0x258>
    396e:	4620      	mov	r0, r4
    3970:	f7ff fd6c 	bl	344c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3974:	2800      	cmp	r0, #0
    3976:	f43f af12 	beq.w	379e <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    397a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    397e:	2b00      	cmp	r3, #0
    3980:	f43f af0d 	beq.w	379e <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    3984:	4629      	mov	r1, r5
    3986:	4620      	mov	r0, r4
    3988:	f002 fb9a 	bl	60c0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    398c:	2300      	movs	r3, #0
    398e:	706b      	strb	r3, [r5, #1]
    3990:	e6f2      	b.n	3778 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    3992:	2b01      	cmp	r3, #1
    3994:	d008      	beq.n	39a8 <usb_handle_standard_request+0x27c>
    3996:	2b03      	cmp	r3, #3
    3998:	f47f af01 	bne.w	379e <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    399c:	8863      	ldrh	r3, [r4, #2]
    399e:	2b00      	cmp	r3, #0
    39a0:	f47f aefd 	bne.w	379e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    39a4:	2101      	movs	r1, #1
    39a6:	e003      	b.n	39b0 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    39a8:	8861      	ldrh	r1, [r4, #2]
    39aa:	2900      	cmp	r1, #0
    39ac:	f47f aef7 	bne.w	379e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    39b0:	88a0      	ldrh	r0, [r4, #4]
    39b2:	f7ff fd93 	bl	34dc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    39b6:	2800      	cmp	r0, #0
    39b8:	f47f aee3 	bne.w	3782 <usb_handle_standard_request+0x56>
    39bc:	e6ef      	b.n	379e <usb_handle_standard_request+0x72>
    39be:	bf00      	nop
    39c0:	20000c40 	.word	0x20000c40
    39c4:	20000cfa 	.word	0x20000cfa
		if (type == USB_DESC_CONFIGURATION) {
    39c8:	2802      	cmp	r0, #2
		*data = p;
    39ca:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    39cc:	f47f aef4 	bne.w	37b8 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    39d0:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    39d2:	603b      	str	r3, [r7, #0]
		return true;
    39d4:	e6d5      	b.n	3782 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    39d6:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    39da:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    39dc:	2800      	cmp	r0, #0
    39de:	f6bf af71 	bge.w	38c4 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    39e2:	2a00      	cmp	r2, #0
    39e4:	f43f af66 	beq.w	38b4 <usb_handle_standard_request+0x188>
    39e8:	2a0a      	cmp	r2, #10
    39ea:	f47f aed8 	bne.w	379e <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    39ee:	782a      	ldrb	r2, [r5, #0]
    39f0:	2a00      	cmp	r2, #0
    39f2:	f43f aed4 	beq.w	379e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    39f6:	7869      	ldrb	r1, [r5, #1]
    39f8:	2904      	cmp	r1, #4
    39fa:	f47f af61 	bne.w	38c0 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    39fe:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    3a00:	428b      	cmp	r3, r1
    3a02:	f47f af5d 	bne.w	38c0 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3a06:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    3a08:	bf96      	itet	ls
    3a0a:	199b      	addls	r3, r3, r6
	return 0;
    3a0c:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    3a0e:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    3a12:	f88c 3000 	strb.w	r3, [ip]
    3a16:	e6d4      	b.n	37c2 <usb_handle_standard_request+0x96>

00003a18 <usb_data_to_host>:
{
    3a18:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    3a1a:	4c13      	ldr	r4, [pc, #76]	; (3a68 <usb_data_to_host+0x50>)
    3a1c:	7d23      	ldrb	r3, [r4, #20]
    3a1e:	b9cb      	cbnz	r3, 3a54 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    3a20:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3a22:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    3a24:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3a26:	ab01      	add	r3, sp, #4
    3a28:	2080      	movs	r0, #128	; 0x80
    3a2a:	f008 f9f6 	bl	be1a <usb_write>
		usb_dev.data_buf += chunk;
    3a2e:	9a01      	ldr	r2, [sp, #4]
    3a30:	68a3      	ldr	r3, [r4, #8]
    3a32:	4413      	add	r3, r2
    3a34:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3a36:	68e3      	ldr	r3, [r4, #12]
    3a38:	1a9b      	subs	r3, r3, r2
    3a3a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    3a3c:	b943      	cbnz	r3, 3a50 <usb_data_to_host+0x38>
    3a3e:	b13a      	cbz	r2, 3a50 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    3a40:	6923      	ldr	r3, [r4, #16]
    3a42:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    3a44:	429a      	cmp	r2, r3
    3a46:	dd03      	ble.n	3a50 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    3a48:	069b      	lsls	r3, r3, #26
    3a4a:	d101      	bne.n	3a50 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    3a4c:	2301      	movs	r3, #1
    3a4e:	7523      	strb	r3, [r4, #20]
}
    3a50:	b002      	add	sp, #8
    3a52:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    3a54:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3a56:	461a      	mov	r2, r3
    3a58:	4619      	mov	r1, r3
    3a5a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    3a5c:	7523      	strb	r3, [r4, #20]
}
    3a5e:	b002      	add	sp, #8
    3a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3a64:	f002 bb72 	b.w	614c <usb_dc_ep_write>
    3a68:	20000c40 	.word	0x20000c40

00003a6c <usb_handle_control_transfer>:
{
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    3a70:	2300      	movs	r3, #0
{
    3a72:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    3a74:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    3a76:	4606      	mov	r6, r0
    3a78:	2800      	cmp	r0, #0
    3a7a:	d168      	bne.n	3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
    3a7c:	2900      	cmp	r1, #0
    3a7e:	d140      	bne.n	3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3a80:	2208      	movs	r2, #8
    3a82:	460b      	mov	r3, r1
    3a84:	eb0d 0102 	add.w	r1, sp, r2
    3a88:	f008 fbae 	bl	c1e8 <usb_dc_ep_read>
    3a8c:	2800      	cmp	r0, #0
    3a8e:	da04      	bge.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3a90:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3a92:	f002 fabb 	bl	600c <usb_dc_ep_set_stall>
}
    3a96:	b00a      	add	sp, #40	; 0x28
    3a98:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    3a9a:	4c32      	ldr	r4, [pc, #200]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3a9c:	9a02      	ldr	r2, [sp, #8]
    3a9e:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3aa0:	9a03      	ldr	r2, [sp, #12]
    3aa2:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    3aa4:	f104 0238 	add.w	r2, r4, #56	; 0x38
    3aa8:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    3aaa:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3aae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    3ab2:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    3ab4:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    3ab6:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3aba:	db15      	blt.n	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3abc:	2b80      	cmp	r3, #128	; 0x80
    3abe:	d90f      	bls.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
				LOG_ERR("Request buffer too small");
    3ac0:	4b29      	ldr	r3, [pc, #164]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3ac2:	9309      	str	r3, [sp, #36]	; 0x24
    3ac4:	2302      	movs	r3, #2
    3ac6:	9308      	str	r3, [sp, #32]
    3ac8:	4828      	ldr	r0, [pc, #160]	; (3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>)
    3aca:	462b      	mov	r3, r5
    3acc:	aa08      	add	r2, sp, #32
    3ace:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ad2:	f7ff f81f 	bl	2b14 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3ad6:	2080      	movs	r0, #128	; 0x80
    3ad8:	f002 fa98 	bl	600c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3adc:	4628      	mov	r0, r5
    3ade:	e7d8      	b.n	3a92 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    3ae0:	b113      	cbz	r3, 3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
				usb_dev.data_buf_residue = setup->wLength;
    3ae2:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    3ae6:	e7d6      	b.n	3a96 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    3ae8:	f7ff fccc 	bl	3484 <usb_handle_request.constprop.0>
    3aec:	2800      	cmp	r0, #0
    3aee:	d0cf      	beq.n	3a90 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    3af0:	88e2      	ldrh	r2, [r4, #6]
    3af2:	6923      	ldr	r3, [r4, #16]
    3af4:	429a      	cmp	r2, r3
    3af6:	bfd4      	ite	le
    3af8:	60e2      	strle	r2, [r4, #12]
    3afa:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    3afc:	f7ff ff8c 	bl	3a18 <usb_data_to_host>
    3b00:	e7c9      	b.n	3a96 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    3b02:	4c18      	ldr	r4, [pc, #96]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3b04:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    3b08:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3b0a:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    3b0c:	dc05      	bgt.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3b0e:	4602      	mov	r2, r0
    3b10:	f008 fb6a 	bl	c1e8 <usb_dc_ep_read>
    3b14:	2800      	cmp	r0, #0
    3b16:	dabe      	bge.n	3a96 <usb_handle_control_transfer+0x2a>
    3b18:	e7ba      	b.n	3a90 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3b1a:	f008 fb65 	bl	c1e8 <usb_dc_ep_read>
    3b1e:	2800      	cmp	r0, #0
    3b20:	da04      	bge.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3b22:	2080      	movs	r0, #128	; 0x80
    3b24:	f002 fa72 	bl	600c <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3b28:	4630      	mov	r0, r6
    3b2a:	e7b2      	b.n	3a92 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    3b2c:	9a01      	ldr	r2, [sp, #4]
    3b2e:	68a3      	ldr	r3, [r4, #8]
    3b30:	4413      	add	r3, r2
    3b32:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3b34:	68e3      	ldr	r3, [r4, #12]
    3b36:	1a9b      	subs	r3, r3, r2
    3b38:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d1ab      	bne.n	3a96 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    3b3e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    3b42:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    3b44:	f7ff fc9e 	bl	3484 <usb_handle_request.constprop.0>
    3b48:	2800      	cmp	r0, #0
    3b4a:	d1d7      	bne.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3b4c:	e7a0      	b.n	3a90 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    3b4e:	2880      	cmp	r0, #128	; 0x80
    3b50:	d1a1      	bne.n	3a96 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    3b52:	4b04      	ldr	r3, [pc, #16]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3b54:	68da      	ldr	r2, [r3, #12]
    3b56:	2a00      	cmp	r2, #0
    3b58:	d1d0      	bne.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3b5a:	7d1b      	ldrb	r3, [r3, #20]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d1cd      	bne.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3b60:	e799      	b.n	3a96 <usb_handle_control_transfer+0x2a>
    3b62:	bf00      	nop
    3b64:	20000c40 	.word	0x20000c40
    3b68:	0000d996 	.word	0x0000d996
    3b6c:	0000d2c0 	.word	0x0000d2c0

00003b70 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    3b70:	4b05      	ldr	r3, [pc, #20]	; (3b88 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    3b72:	4a06      	ldr	r2, [pc, #24]	; (3b8c <usb_set_config+0x1c>)
    3b74:	629a      	str	r2, [r3, #40]	; 0x28
    3b76:	4a06      	ldr	r2, [pc, #24]	; (3b90 <usb_set_config+0x20>)
    3b78:	62da      	str	r2, [r3, #44]	; 0x2c
    3b7a:	4a06      	ldr	r2, [pc, #24]	; (3b94 <usb_set_config+0x24>)
    3b7c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    3b7e:	4a06      	ldr	r2, [pc, #24]	; (3b98 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    3b80:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    3b82:	619a      	str	r2, [r3, #24]
}
    3b84:	2000      	movs	r0, #0
    3b86:	4770      	bx	lr
    3b88:	20000c40 	.word	0x20000c40
    3b8c:	0000372d 	.word	0x0000372d
    3b90:	00003361 	.word	0x00003361
    3b94:	00003401 	.word	0x00003401
    3b98:	000033a1 	.word	0x000033a1

00003b9c <usb_device_init>:
{
    3b9c:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    3b9e:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <usb_device_init+0x28>)
    3ba0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    3ba4:	b954      	cbnz	r4, 3bbc <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    3ba6:	f000 f8d9 	bl	3d5c <usb_get_device_descriptor>
	if (!device_descriptor) {
    3baa:	b918      	cbnz	r0, 3bb4 <usb_device_init+0x18>
}
    3bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bb0:	f7ff bc7e 	b.w	34b0 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    3bb4:	f7ff ffdc 	bl	3b70 <usb_set_config>
	return 0;
    3bb8:	4620      	mov	r0, r4
}
    3bba:	bd10      	pop	{r4, pc}
		return -EALREADY;
    3bbc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3bc0:	e7fb      	b.n	3bba <usb_device_init+0x1e>
    3bc2:	bf00      	nop
    3bc4:	20000c40 	.word	0x20000c40

00003bc8 <usb_enable>:
{
    3bc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3bcc:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    3bce:	4d3b      	ldr	r5, [pc, #236]	; (3cbc <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    3bd0:	483b      	ldr	r0, [pc, #236]	; (3cc0 <usb_enable+0xf8>)
    3bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bda:	f005 ff49 	bl	9a70 <z_impl_k_mutex_lock>
    3bde:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    3be2:	2e00      	cmp	r6, #0
    3be4:	d167      	bne.n	3cb6 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    3be6:	4837      	ldr	r0, [pc, #220]	; (3cc4 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    3be8:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    3bea:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    3bec:	f002 fc22 	bl	6434 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    3bf0:	f002 f96a 	bl	5ec8 <usb_dc_attach>
	if (ret < 0) {
    3bf4:	1e04      	subs	r4, r0, #0
    3bf6:	db42      	blt.n	3c7e <usb_enable+0xb6>
	ret = usb_transfer_init();
    3bf8:	f000 fbb6 	bl	4368 <usb_transfer_init>
	if (ret < 0) {
    3bfc:	1e04      	subs	r4, r0, #0
    3bfe:	db3e      	blt.n	3c7e <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3c00:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    3c02:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3c04:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    3c08:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3c0c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3c10:	f002 f9c8 	bl	5fa4 <usb_dc_ep_configure>
	if (ret < 0) {
    3c14:	1e04      	subs	r4, r0, #0
    3c16:	db32      	blt.n	3c7e <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3c18:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    3c1a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3c1c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3c20:	f002 f9c0 	bl	5fa4 <usb_dc_ep_configure>
	if (ret < 0) {
    3c24:	1e04      	subs	r4, r0, #0
    3c26:	db2a      	blt.n	3c7e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    3c28:	4927      	ldr	r1, [pc, #156]	; (3cc8 <usb_enable+0x100>)
    3c2a:	4630      	mov	r0, r6
    3c2c:	f002 fbee 	bl	640c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3c30:	1e04      	subs	r4, r0, #0
    3c32:	db24      	blt.n	3c7e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    3c34:	4924      	ldr	r1, [pc, #144]	; (3cc8 <usb_enable+0x100>)
    3c36:	4638      	mov	r0, r7
    3c38:	f002 fbe8 	bl	640c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3c3c:	1e04      	subs	r4, r0, #0
    3c3e:	db1e      	blt.n	3c7e <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3c40:	4c22      	ldr	r4, [pc, #136]	; (3ccc <usb_enable+0x104>)
    3c42:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3cd0 <usb_enable+0x108>
    3c46:	4544      	cmp	r4, r8
    3c48:	d320      	bcc.n	3c8c <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3c4a:	2000      	movs	r0, #0
    3c4c:	f002 fa54 	bl	60f8 <usb_dc_ep_enable>
	if (ret < 0) {
    3c50:	1e04      	subs	r4, r0, #0
    3c52:	db14      	blt.n	3c7e <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    3c54:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3c58:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    3c5a:	f043 0301 	orr.w	r3, r3, #1
    3c5e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3c62:	f002 fa49 	bl	60f8 <usb_dc_ep_enable>
	if (ret < 0) {
    3c66:	1e04      	subs	r4, r0, #0
    3c68:	db09      	blt.n	3c7e <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    3c6a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3c72:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    3c76:	2301      	movs	r3, #1
    3c78:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    3c7c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    3c7e:	4810      	ldr	r0, [pc, #64]	; (3cc0 <usb_enable+0xf8>)
    3c80:	f005 ff70 	bl	9b64 <z_impl_k_mutex_unlock>
}
    3c84:	4620      	mov	r0, r4
    3c86:	b002      	add	sp, #8
    3c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    3c8c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3c8e:	2600      	movs	r6, #0
    3c90:	7f22      	ldrb	r2, [r4, #28]
    3c92:	b2f3      	uxtb	r3, r6
    3c94:	429a      	cmp	r2, r3
    3c96:	d801      	bhi.n	3c9c <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3c98:	3424      	adds	r4, #36	; 0x24
    3c9a:	e7d4      	b.n	3c46 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    3c9c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    3ca0:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    3ca4:	7910      	ldrb	r0, [r2, #4]
    3ca6:	f002 fbb1 	bl	640c <usb_dc_ep_set_callback>
    3caa:	3601      	adds	r6, #1
    3cac:	2800      	cmp	r0, #0
    3cae:	d0ef      	beq.n	3c90 <usb_enable+0xc8>
    3cb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3cb4:	e7e3      	b.n	3c7e <usb_enable+0xb6>
		ret = -EALREADY;
    3cb6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3cba:	e7e0      	b.n	3c7e <usb_enable+0xb6>
    3cbc:	20000c40 	.word	0x20000c40
    3cc0:	200002fc 	.word	0x200002fc
    3cc4:	0000355d 	.word	0x0000355d
    3cc8:	00003a6d 	.word	0x00003a6d
    3ccc:	200003e4 	.word	0x200003e4
    3cd0:	20000408 	.word	0x20000408

00003cd4 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3cd4:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3cd6:	4b1f      	ldr	r3, [pc, #124]	; (3d54 <usb_update_sn_string_descriptor+0x80>)
{
    3cd8:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    3cda:	aa05      	add	r2, sp, #20
    3cdc:	f103 0510 	add.w	r5, r3, #16
    3ce0:	6818      	ldr	r0, [r3, #0]
    3ce2:	6859      	ldr	r1, [r3, #4]
    3ce4:	4614      	mov	r4, r2
    3ce6:	c403      	stmia	r4!, {r0, r1}
    3ce8:	3308      	adds	r3, #8
    3cea:	42ab      	cmp	r3, r5
    3cec:	4622      	mov	r2, r4
    3cee:	d1f7      	bne.n	3ce0 <usb_update_sn_string_descriptor+0xc>
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3cf4:	2210      	movs	r2, #16
    3cf6:	2100      	movs	r1, #0
    3cf8:	a801      	add	r0, sp, #4
    3cfa:	f008 fa24 	bl	c146 <memset>
	memset(sn, 0, sizeof(sn));
    3cfe:	2212      	movs	r2, #18
    3d00:	2100      	movs	r1, #0
    3d02:	4815      	ldr	r0, [pc, #84]	; (3d58 <usb_update_sn_string_descriptor+0x84>)
    3d04:	f008 fa1f 	bl	c146 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3d08:	2110      	movs	r1, #16
    3d0a:	a801      	add	r0, sp, #4
    3d0c:	f008 fb5f 	bl	c3ce <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    3d10:	2800      	cmp	r0, #0
    3d12:	dd1b      	ble.n	3d4c <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    3d14:	2808      	cmp	r0, #8
    3d16:	bfb8      	it	lt
    3d18:	2008      	movlt	r0, #8
    3d1a:	3809      	subs	r0, #9
    3d1c:	ab01      	add	r3, sp, #4
    3d1e:	490e      	ldr	r1, [pc, #56]	; (3d58 <usb_update_sn_string_descriptor+0x84>)
    3d20:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3d22:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3d24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3d28:	ac0a      	add	r4, sp, #40	; 0x28
    3d2a:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3d2e:	f003 030f 	and.w	r3, r3, #15
    3d32:	3328      	adds	r3, #40	; 0x28
    3d34:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    3d36:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3d38:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3d3c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3d40:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    3d42:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3d44:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    3d46:	f101 0102 	add.w	r1, r1, #2
    3d4a:	d1eb      	bne.n	3d24 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    3d4c:	4802      	ldr	r0, [pc, #8]	; (3d58 <usb_update_sn_string_descriptor+0x84>)
    3d4e:	b00b      	add	sp, #44	; 0x2c
    3d50:	bd30      	pop	{r4, r5, pc}
    3d52:	bf00      	nop
    3d54:	0000d9ba 	.word	0x0000d9ba
    3d58:	20002126 	.word	0x20002126

00003d5c <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    3d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d60:	4c83      	ldr	r4, [pc, #524]	; (3f70 <usb_get_device_descriptor+0x214>)
    3d62:	b08b      	sub	sp, #44	; 0x2c
    3d64:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    3d66:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    3d68:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    3d6c:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    3d6e:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3d70:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    3d72:	7823      	ldrb	r3, [r4, #0]
    3d74:	b943      	cbnz	r3, 3d88 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    3d76:	4b7f      	ldr	r3, [pc, #508]	; (3f74 <usb_get_device_descriptor+0x218>)
    3d78:	3402      	adds	r4, #2
    3d7a:	429c      	cmp	r4, r3
    3d7c:	d1f3      	bne.n	3d66 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3d7e:	487c      	ldr	r0, [pc, #496]	; (3f70 <usb_get_device_descriptor+0x214>)
}
    3d80:	372c      	adds	r7, #44	; 0x2c
    3d82:	46bd      	mov	sp, r7
    3d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    3d88:	7863      	ldrb	r3, [r4, #1]
    3d8a:	2b05      	cmp	r3, #5
    3d8c:	d805      	bhi.n	3d9a <usb_get_device_descriptor+0x3e>
    3d8e:	e8df f003 	tbb	[pc, r3]
    3d92:	04a6      	.short	0x04a6
    3d94:	3f07a603 	.word	0x3f07a603
    3d98:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3d9a:	7823      	ldrb	r3, [r4, #0]
    3d9c:	441c      	add	r4, r3
    3d9e:	e7e8      	b.n	3d72 <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    3da0:	78e3      	ldrb	r3, [r4, #3]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d1f9      	bne.n	3d9a <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    3da6:	78a3      	ldrb	r3, [r4, #2]
    3da8:	b343      	cbz	r3, 3dfc <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    3daa:	f10a 0a01 	add.w	sl, sl, #1
    3dae:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    3db2:	e7f2      	b.n	3d9a <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    3db4:	686a      	ldr	r2, [r5, #4]
    3db6:	4294      	cmp	r4, r2
    3db8:	d023      	beq.n	3e02 <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3dba:	3524      	adds	r5, #36	; 0x24
    3dbc:	429d      	cmp	r5, r3
    3dbe:	d3f9      	bcc.n	3db4 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    3dc0:	466d      	mov	r5, sp
    3dc2:	b088      	sub	sp, #32
    3dc4:	466a      	mov	r2, sp
    3dc6:	4b6c      	ldr	r3, [pc, #432]	; (3f78 <usb_get_device_descriptor+0x21c>)
    3dc8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3dcc:	2303      	movs	r3, #3
    3dce:	f842 3f10 	str.w	r3, [r2, #16]!
    3dd2:	486a      	ldr	r0, [pc, #424]	; (3f7c <usb_get_device_descriptor+0x220>)
    3dd4:	2300      	movs	r3, #0
    3dd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3dda:	f7fe fe9b 	bl	2b14 <z_impl_z_log_msg_static_create>
    3dde:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    3de0:	4b67      	ldr	r3, [pc, #412]	; (3f80 <usb_get_device_descriptor+0x224>)
    3de2:	627b      	str	r3, [r7, #36]	; 0x24
    3de4:	2302      	movs	r3, #2
    3de6:	623b      	str	r3, [r7, #32]
    3de8:	4864      	ldr	r0, [pc, #400]	; (3f7c <usb_get_device_descriptor+0x220>)
    3dea:	2300      	movs	r3, #0
    3dec:	f107 0220 	add.w	r2, r7, #32
    3df0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3df4:	f7fe fe8e 	bl	2b14 <z_impl_z_log_msg_static_create>
		return NULL;
    3df8:	2000      	movs	r0, #0
    3dfa:	e7c1      	b.n	3d80 <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3dfc:	4d61      	ldr	r5, [pc, #388]	; (3f84 <usb_get_device_descriptor+0x228>)
    3dfe:	4b62      	ldr	r3, [pc, #392]	; (3f88 <usb_get_device_descriptor+0x22c>)
    3e00:	e7dc      	b.n	3dbc <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    3e02:	68ab      	ldr	r3, [r5, #8]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d0d0      	beq.n	3daa <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    3e08:	4651      	mov	r1, sl
    3e0a:	4620      	mov	r0, r4
    3e0c:	4798      	blx	r3
    3e0e:	e7cc      	b.n	3daa <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    3e10:	2d00      	cmp	r5, #0
    3e12:	d162      	bne.n	3eda <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    3e14:	4b5d      	ldr	r3, [pc, #372]	; (3f8c <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    3e16:	627b      	str	r3, [r7, #36]	; 0x24
    3e18:	2302      	movs	r3, #2
    3e1a:	623b      	str	r3, [r7, #32]
    3e1c:	4857      	ldr	r0, [pc, #348]	; (3f7c <usb_get_device_descriptor+0x220>)
    3e1e:	2300      	movs	r3, #0
    3e20:	f107 0220 	add.w	r2, r7, #32
    3e24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e28:	f7fe fe74 	bl	2b14 <z_impl_z_log_msg_static_create>
				return -1;
    3e2c:	e7d8      	b.n	3de0 <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    3e2e:	6a29      	ldr	r1, [r5, #32]
    3e30:	78a0      	ldrb	r0, [r4, #2]
    3e32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3e36:	790b      	ldrb	r3, [r1, #4]
    3e38:	4298      	cmp	r0, r3
    3e3a:	d005      	beq.n	3e48 <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3e3c:	3201      	adds	r2, #1
    3e3e:	7f2b      	ldrb	r3, [r5, #28]
    3e40:	429a      	cmp	r2, r3
    3e42:	d3f4      	bcc.n	3e2e <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    3e44:	4b52      	ldr	r3, [pc, #328]	; (3f90 <usb_get_device_descriptor+0x234>)
    3e46:	e7e6      	b.n	3e16 <usb_get_device_descriptor+0xba>
    3e48:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3e4c:	78e0      	ldrb	r0, [r4, #3]
    3e4e:	f000 0003 	and.w	r0, r0, #3
    3e52:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    3e54:	7920      	ldrb	r0, [r4, #4]
    3e56:	f894 c005 	ldrb.w	ip, [r4, #5]
    3e5a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    3e5e:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3e60:	f994 0002 	ldrsb.w	r0, [r4, #2]
    3e64:	2800      	cmp	r0, #0
    3e66:	fa5f f389 	uxtb.w	r3, r9
    3e6a:	da28      	bge.n	3ebe <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    3e6c:	f109 0010 	add.w	r0, r9, #16
    3e70:	f04f 0c01 	mov.w	ip, #1
    3e74:	fa0c f000 	lsl.w	r0, ip, r0
    3e78:	ea10 0f0b 	tst.w	r0, fp
    3e7c:	d127      	bne.n	3ece <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    3e7e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    3e82:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    3e84:	f107 0010 	add.w	r0, r7, #16
    3e88:	e9c7 3101 	strd	r3, r1, [r7, #4]
    3e8c:	60fa      	str	r2, [r7, #12]
    3e8e:	f002 f85f 	bl	5f50 <usb_dc_ep_check_cap>
    3e92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    3e96:	687b      	ldr	r3, [r7, #4]
    3e98:	b9c8      	cbnz	r0, 3ece <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    3e9a:	7c3a      	ldrb	r2, [r7, #16]
    3e9c:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3e9e:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    3ea2:	bf18      	it	ne
    3ea4:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    3ea6:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    3ea8:	bf18      	it	ne
    3eaa:	b2db      	uxtbne	r3, r3
    3eac:	f04f 0201 	mov.w	r2, #1
    3eb0:	bf14      	ite	ne
    3eb2:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    3eb4:	fa02 f209 	lsleq.w	r2, r2, r9
    3eb8:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    3ebc:	e76d      	b.n	3d9a <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    3ebe:	2001      	movs	r0, #1
    3ec0:	fa00 f009 	lsl.w	r0, r0, r9
    3ec4:	ea10 0f0b 	tst.w	r0, fp
    3ec8:	d101      	bne.n	3ece <usb_get_device_descriptor+0x172>
    3eca:	4618      	mov	r0, r3
    3ecc:	e7d9      	b.n	3e82 <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    3ece:	f109 0901 	add.w	r9, r9, #1
    3ed2:	f1b9 0f10 	cmp.w	r9, #16
    3ed6:	d1b9      	bne.n	3e4c <usb_get_device_descriptor+0xf0>
    3ed8:	e7b0      	b.n	3e3c <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3eda:	2200      	movs	r2, #0
    3edc:	e7af      	b.n	3e3e <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    3ede:	2e03      	cmp	r6, #3
    3ee0:	d12a      	bne.n	3f38 <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    3ee2:	f7ff fef7 	bl	3cd4 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    3ee6:	4681      	mov	r9, r0
    3ee8:	b1a8      	cbz	r0, 3f16 <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    3eea:	f008 f911 	bl	c110 <strlen>
	if (!runtime_sn_len) {
    3eee:	60f8      	str	r0, [r7, #12]
    3ef0:	b188      	cbz	r0, 3f16 <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    3ef2:	4828      	ldr	r0, [pc, #160]	; (3f94 <usb_get_device_descriptor+0x238>)
    3ef4:	f008 f90c 	bl	c110 <strlen>
	if (runtime_sn_len != default_sn_len) {
    3ef8:	68fa      	ldr	r2, [r7, #12]
    3efa:	4282      	cmp	r2, r0
    3efc:	d017      	beq.n	3f2e <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    3efe:	4b26      	ldr	r3, [pc, #152]	; (3f98 <usb_get_device_descriptor+0x23c>)
    3f00:	627b      	str	r3, [r7, #36]	; 0x24
    3f02:	2302      	movs	r3, #2
    3f04:	623b      	str	r3, [r7, #32]
    3f06:	481d      	ldr	r0, [pc, #116]	; (3f7c <usb_get_device_descriptor+0x220>)
    3f08:	2300      	movs	r3, #0
    3f0a:	f107 0220 	add.w	r2, r7, #32
    3f0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f12:	f7fe fdff 	bl	2b14 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    3f16:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    3f18:	f06f 0102 	mvn.w	r1, #2
    3f1c:	18e2      	adds	r2, r4, r3
    3f1e:	1b09      	subs	r1, r1, r4
    3f20:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    3f24:	42d1      	cmn	r1, r2
    3f26:	d50e      	bpl.n	3f46 <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    3f28:	3601      	adds	r6, #1
    3f2a:	b2f6      	uxtb	r6, r6
			break;
    3f2c:	e735      	b.n	3d9a <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    3f2e:	4649      	mov	r1, r9
    3f30:	1ca0      	adds	r0, r4, #2
    3f32:	f008 f8fd 	bl	c130 <memcpy>
			if (str_descr_idx) {
    3f36:	e7ee      	b.n	3f16 <usb_get_device_descriptor+0x1ba>
    3f38:	2e00      	cmp	r6, #0
    3f3a:	d1ec      	bne.n	3f16 <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    3f3c:	f1b8 0f00 	cmp.w	r8, #0
    3f40:	d10a      	bne.n	3f58 <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    3f42:	4b16      	ldr	r3, [pc, #88]	; (3f9c <usb_get_device_descriptor+0x240>)
    3f44:	e767      	b.n	3e16 <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    3f46:	f04f 0000 	mov.w	r0, #0
    3f4a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    3f4e:	f813 0901 	ldrb.w	r0, [r3], #-1
    3f52:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    3f56:	e7e5      	b.n	3f24 <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    3f58:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    3f5c:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    3f60:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3f64:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    3f68:	f888 a004 	strb.w	sl, [r8, #4]
    3f6c:	e7dc      	b.n	3f28 <usb_get_device_descriptor+0x1cc>
    3f6e:	bf00      	nop
    3f70:	20000330 	.word	0x20000330
    3f74:	200003e1 	.word	0x200003e1
    3f78:	0000d9cb 	.word	0x0000d9cb
    3f7c:	0000d2b8 	.word	0x0000d2b8
    3f80:	0000dab1 	.word	0x0000dab1
    3f84:	200003e4 	.word	0x200003e4
    3f88:	20000408 	.word	0x20000408
    3f8c:	0000d9eb 	.word	0x0000d9eb
    3f90:	0000da2c 	.word	0x0000da2c
    3f94:	0000d9ba 	.word	0x0000d9ba
    3f98:	0000da49 	.word	0x0000da49
    3f9c:	0000da94 	.word	0x0000da94

00003fa0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    3fa0:	b510      	push	{r4, lr}
    3fa2:	4b09      	ldr	r3, [pc, #36]	; (3fc8 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3fa4:	2100      	movs	r1, #0
    3fa6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    3fa8:	781c      	ldrb	r4, [r3, #0]
    3faa:	4284      	cmp	r4, r0
    3fac:	d104      	bne.n	3fb8 <usb_ep_get_transfer+0x18>
    3fae:	685c      	ldr	r4, [r3, #4]
    3fb0:	b114      	cbz	r4, 3fb8 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    3fb2:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    3fb6:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3fb8:	3101      	adds	r1, #1
    3fba:	2904      	cmp	r1, #4
    3fbc:	f103 0340 	add.w	r3, r3, #64	; 0x40
    3fc0:	d1f2      	bne.n	3fa8 <usb_ep_get_transfer+0x8>
	return NULL;
    3fc2:	2000      	movs	r0, #0
    3fc4:	e7f7      	b.n	3fb6 <usb_ep_get_transfer+0x16>
    3fc6:	bf00      	nop
    3fc8:	20000d08 	.word	0x20000d08

00003fcc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    3fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3fd0:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    3fd2:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    3fd6:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    3fda:	3310      	adds	r3, #16
{
    3fdc:	af00      	add	r7, sp, #0
    3fde:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    3fe0:	d111      	bne.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    3fe2:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    3fe4:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    3fe8:	f013 0602 	ands.w	r6, r3, #2
    3fec:	d04e      	beq.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
		if (!trans->bsize) {
    3fee:	bb0a      	cbnz	r2, 4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    3ff0:	f013 0304 	ands.w	r3, r3, #4
    3ff4:	d104      	bne.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    3ff6:	461a      	mov	r2, r3
    3ff8:	4619      	mov	r1, r3
    3ffa:	4628      	mov	r0, r5
    3ffc:	f007 ff0d 	bl	be1a <usb_write>
			}
			trans->status = 0;
    4000:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4002:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4006:	f854 3c28 	ldr.w	r3, [r4, #-40]
    400a:	3310      	adds	r3, #16
    400c:	d00e      	beq.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    400e:	f854 6c18 	ldr.w	r6, [r4, #-24]
    4012:	b15e      	cbz	r6, 402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4014:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    4018:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    401c:	f008 fc65 	bl	c8ea <k_is_in_isr>
    4020:	2800      	cmp	r0, #0
    4022:	d06f      	beq.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4024:	483d      	ldr	r0, [pc, #244]	; (411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>)
    4026:	4621      	mov	r1, r4
    4028:	f008 fd55 	bl	cad6 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    402c:	370c      	adds	r7, #12
    402e:	46bd      	mov	sp, r7
    4030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4034:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4038:	1d3b      	adds	r3, r7, #4
    403a:	4628      	mov	r0, r5
    403c:	f007 feed 	bl	be1a <usb_write>
		if (ret) {
    4040:	b198      	cbz	r0, 406a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6a>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4042:	466e      	mov	r6, sp
    4044:	b088      	sub	sp, #32
    4046:	466a      	mov	r2, sp
    4048:	4b35      	ldr	r3, [pc, #212]	; (4120 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x120>)
    404a:	61d5      	str	r5, [r2, #28]
    404c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4050:	2304      	movs	r3, #4
    4052:	f842 3f10 	str.w	r3, [r2, #16]!
    4056:	4833      	ldr	r0, [pc, #204]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    4058:	2300      	movs	r3, #0
    405a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    405e:	f7fe fd59 	bl	2b14 <z_impl_z_log_msg_static_create>
    4062:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    4064:	f06f 0315 	mvn.w	r3, #21
    4068:	e7cb      	b.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
		trans->buffer += bytes;
    406a:	687a      	ldr	r2, [r7, #4]
    406c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4070:	4413      	add	r3, r2
    4072:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4076:	f854 3c20 	ldr.w	r3, [r4, #-32]
    407a:	1a9b      	subs	r3, r3, r2
    407c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    4080:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4084:	4413      	add	r3, r2
    4086:	f844 3c1c 	str.w	r3, [r4, #-28]
    408a:	e7bc      	b.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    408c:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4090:	1d3b      	adds	r3, r7, #4
    4092:	4628      	mov	r0, r5
    4094:	f002 f8fc 	bl	6290 <usb_dc_ep_read_wait>
		if (ret) {
    4098:	b188      	cbz	r0, 40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    409a:	46e8      	mov	r8, sp
    409c:	b088      	sub	sp, #32
    409e:	466a      	mov	r2, sp
    40a0:	4b1f      	ldr	r3, [pc, #124]	; (4120 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x120>)
    40a2:	61d5      	str	r5, [r2, #28]
    40a4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    40a8:	2304      	movs	r3, #4
    40aa:	f842 3f10 	str.w	r3, [r2, #16]!
    40ae:	481d      	ldr	r0, [pc, #116]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    40b0:	4633      	mov	r3, r6
    40b2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    40b6:	f7fe fd2d 	bl	2b14 <z_impl_z_log_msg_static_create>
    40ba:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    40bc:	e7d2      	b.n	4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
		trans->buffer += bytes;
    40be:	687e      	ldr	r6, [r7, #4]
    40c0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    40c4:	4433      	add	r3, r6
    40c6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    40ca:	f854 3c20 	ldr.w	r3, [r4, #-32]
    40ce:	1b9b      	subs	r3, r3, r6
    40d0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    40d4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    40d8:	4433      	add	r3, r6
    40da:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    40de:	2e00      	cmp	r6, #0
    40e0:	d08e      	beq.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
    40e2:	4628      	mov	r0, r5
    40e4:	f002 f9ac 	bl	6440 <usb_dc_ep_mps>
    40e8:	fbb6 f3f0 	udiv	r3, r6, r0
    40ec:	fb03 6610 	mls	r6, r3, r0, r6
    40f0:	2e00      	cmp	r6, #0
    40f2:	d185      	bne.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
    40f4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d081      	beq.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
		usb_dc_ep_read_continue(ep);
    40fc:	4628      	mov	r0, r5
    40fe:	f002 f92d 	bl	635c <usb_dc_ep_read_continue>
    4102:	e780      	b.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
		trans->cb = NULL;
    4104:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    4108:	f1a4 0010 	sub.w	r0, r4, #16
    410c:	f005 fd9a 	bl	9c44 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    4110:	464a      	mov	r2, r9
    4112:	4641      	mov	r1, r8
    4114:	4628      	mov	r0, r5
    4116:	47b0      	blx	r6
    4118:	e788      	b.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    411a:	bf00      	nop
    411c:	200008c8 	.word	0x200008c8
    4120:	0000dadf 	.word	0x0000dadf
    4124:	0000d2d0 	.word	0x0000d2d0

00004128 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    4128:	b570      	push	{r4, r5, r6, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    412a:	1e4b      	subs	r3, r1, #1
    412c:	2b01      	cmp	r3, #1
{
    412e:	b088      	sub	sp, #32
    4130:	4606      	mov	r6, r0
    4132:	460d      	mov	r5, r1
	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4134:	d818      	bhi.n	4168 <usb_transfer_ep_callback+0x40>
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4136:	f7ff ff33 	bl	3fa0 <usb_ep_get_transfer>
		return;
	}

	if (!trans) {
    413a:	4604      	mov	r4, r0
    413c:	b9b0      	cbnz	r0, 416c <usb_transfer_ep_callback+0x44>
		if (status == USB_DC_EP_DATA_OUT) {
    413e:	2d01      	cmp	r5, #1
    4140:	d112      	bne.n	4168 <usb_transfer_ep_callback+0x40>
			 * so drain it).
			 */
			do {
				uint8_t data;

				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4142:	ab01      	add	r3, sp, #4
    4144:	2201      	movs	r2, #1
    4146:	a902      	add	r1, sp, #8
    4148:	4630      	mov	r0, r6
    414a:	f002 f8a1 	bl	6290 <usb_dc_ep_read_wait>
			} while (bytes);
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	2b00      	cmp	r3, #0
    4152:	d1f6      	bne.n	4142 <usb_transfer_ep_callback+0x1a>

			LOG_ERR("RX data lost, no transfer");
    4154:	4a0f      	ldr	r2, [pc, #60]	; (4194 <usb_transfer_ep_callback+0x6c>)
    4156:	9207      	str	r2, [sp, #28]
    4158:	2202      	movs	r2, #2
    415a:	9206      	str	r2, [sp, #24]
    415c:	480e      	ldr	r0, [pc, #56]	; (4198 <usb_transfer_ep_callback+0x70>)
    415e:	aa06      	add	r2, sp, #24
    4160:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4164:	f7fe fcd6 	bl	2b14 <z_impl_z_log_msg_static_create>
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4168:	b008      	add	sp, #32
    416a:	bd70      	pop	{r4, r5, r6, pc}
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    416c:	f008 fbbd 	bl	c8ea <k_is_in_isr>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4170:	f104 012c 	add.w	r1, r4, #44	; 0x2c
	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4174:	b108      	cbz	r0, 417a <usb_transfer_ep_callback+0x52>
    4176:	2d01      	cmp	r5, #1
    4178:	d105      	bne.n	4186 <usb_transfer_ep_callback+0x5e>
		usb_transfer_work(&trans->work);
    417a:	4608      	mov	r0, r1
}
    417c:	b008      	add	sp, #32
    417e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_transfer_work(&trans->work);
    4182:	f7ff bf23 	b.w	3fcc <usb_transfer_work>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4186:	4805      	ldr	r0, [pc, #20]	; (419c <usb_transfer_ep_callback+0x74>)
}
    4188:	b008      	add	sp, #32
    418a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    418e:	f008 bca2 	b.w	cad6 <k_work_submit_to_queue>
    4192:	bf00      	nop
    4194:	0000dafc 	.word	0x0000dafc
    4198:	0000d2d0 	.word	0x0000d2d0
    419c:	200008c8 	.word	0x200008c8

000041a0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    41a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41a4:	b08b      	sub	sp, #44	; 0x2c
    41a6:	af00      	add	r7, sp, #0
    41a8:	4605      	mov	r5, r0
    41aa:	60b9      	str	r1, [r7, #8]
    41ac:	4616      	mov	r6, r2
    41ae:	60fb      	str	r3, [r7, #12]
	struct usb_transfer_data *trans = NULL;
	int key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    41b0:	f007 fe7b 	bl	beaa <usb_transfer_is_busy>
    41b4:	2800      	cmp	r0, #0
    41b6:	f040 8086 	bne.w	42c6 <usb_transfer+0x126>
	__asm__ volatile(
    41ba:	f04f 0320 	mov.w	r3, #32
    41be:	f3ef 8211 	mrs	r2, BASEPRI
    41c2:	f383 8812 	msr	BASEPRI_MAX, r3
    41c6:	f3bf 8f6f 	isb	sy
    41ca:	f8df a100 	ldr.w	sl, [pc, #256]	; 42cc <usb_transfer+0x12c>
    41ce:	607a      	str	r2, [r7, #4]
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    41d0:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
    41d2:	2300      	movs	r3, #0
    41d4:	2200      	movs	r2, #0
    41d6:	4650      	mov	r0, sl
    41d8:	f005 fd54 	bl	9c84 <z_impl_k_sem_take>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    41dc:	4603      	mov	r3, r0
    41de:	b9e8      	cbnz	r0, 421c <usb_transfer+0x7c>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    41e0:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 42d0 <usb_transfer+0x130>
    41e4:	ea4f 1889 	mov.w	r8, r9, lsl #6
    41e8:	eb0b 1989 	add.w	r9, fp, r9, lsl #6
    41ec:	f8d9 4004 	ldr.w	r4, [r9, #4]
    41f0:	f114 0f10 	cmn.w	r4, #16
    41f4:	d131      	bne.n	425a <usb_transfer+0xba>
		/* A transfer is already ongoing and not completed */
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    41f6:	466e      	mov	r6, sp
    41f8:	b088      	sub	sp, #32
    41fa:	466a      	mov	r2, sp
    41fc:	4935      	ldr	r1, [pc, #212]	; (42d4 <usb_transfer+0x134>)
    41fe:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4202:	2103      	movs	r1, #3
    4204:	f842 1f10 	str.w	r1, [r2, #16]!
    4208:	4833      	ldr	r0, [pc, #204]	; (42d8 <usb_transfer+0x138>)
    420a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    420e:	f7fe fc81 	bl	2b14 <z_impl_z_log_msg_static_create>
    4212:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
    4214:	4650      	mov	r0, sl
    4216:	f005 fd15 	bl	9c44 <z_impl_k_sem_give>
		k_sem_give(&trans->sem);
		ret = -EBUSY;
		goto done;
    421a:	e014      	b.n	4246 <usb_transfer+0xa6>
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    421c:	f109 0901 	add.w	r9, r9, #1
    4220:	f1b9 0f04 	cmp.w	r9, #4
    4224:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
    4228:	d1d3      	bne.n	41d2 <usb_transfer+0x32>
		LOG_ERR("No transfer slot available");
    422a:	4b2c      	ldr	r3, [pc, #176]	; (42dc <usb_transfer+0x13c>)
    422c:	627b      	str	r3, [r7, #36]	; 0x24
    422e:	2302      	movs	r3, #2
    4230:	623b      	str	r3, [r7, #32]
    4232:	4829      	ldr	r0, [pc, #164]	; (42d8 <usb_transfer+0x138>)
    4234:	2300      	movs	r3, #0
    4236:	f107 0220 	add.w	r2, r7, #32
    423a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		ret = -ENOMEM;
    423e:	f06f 040b 	mvn.w	r4, #11
    4242:	f7fe fc67 	bl	2b14 <z_impl_z_log_msg_static_create>
	__asm__ volatile(
    4246:	687b      	ldr	r3, [r7, #4]
    4248:	f383 8811 	msr	BASEPRI, r3
    424c:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    4250:	4620      	mov	r0, r4
    4252:	372c      	adds	r7, #44	; 0x2c
    4254:	46bd      	mov	sp, r7
    4256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	trans->cb = cb;
    425a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    425c:	f8c9 3014 	str.w	r3, [r9, #20]
	trans->flags = flags;
    4260:	68fb      	ldr	r3, [r7, #12]
	trans->buffer = data;
    4262:	68ba      	ldr	r2, [r7, #8]
	trans->flags = flags;
    4264:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	trans->priv = cb_data;
    4268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	trans->tsize = 0;
    426a:	f8c9 0010 	str.w	r0, [r9, #16]
	trans->priv = cb_data;
    426e:	f8c9 3018 	str.w	r3, [r9, #24]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4272:	4628      	mov	r0, r5
	trans->status = -EBUSY;
    4274:	f06f 030f 	mvn.w	r3, #15
	trans->bsize = dlen;
    4278:	e9c9 2602 	strd	r2, r6, [r9, #8]
	trans->ep = ep;
    427c:	f80b 5008 	strb.w	r5, [fp, r8]
	trans->status = -EBUSY;
    4280:	f8c9 3004 	str.w	r3, [r9, #4]
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4284:	f002 f8dc 	bl	6440 <usb_dc_ep_mps>
    4288:	b168      	cbz	r0, 42a6 <usb_transfer+0x106>
    428a:	4628      	mov	r0, r5
    428c:	f002 f8d8 	bl	6440 <usb_dc_ep_mps>
    4290:	fbb6 f3f0 	udiv	r3, r6, r0
    4294:	fb03 6610 	mls	r6, r3, r0, r6
    4298:	b12e      	cbz	r6, 42a6 <usb_transfer+0x106>
		trans->flags |= USB_TRANS_NO_ZLP;
    429a:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    429e:	f043 0304 	orr.w	r3, r3, #4
    42a2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	if (flags & USB_TRANS_WRITE) {
    42a6:	68fb      	ldr	r3, [r7, #12]
    42a8:	079b      	lsls	r3, r3, #30
    42aa:	d507      	bpl.n	42bc <usb_transfer+0x11c>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    42ac:	f108 012c 	add.w	r1, r8, #44	; 0x2c
    42b0:	480b      	ldr	r0, [pc, #44]	; (42e0 <usb_transfer+0x140>)
    42b2:	4459      	add	r1, fp
    42b4:	f008 fc0f 	bl	cad6 <k_work_submit_to_queue>
	int key, ret = 0;
    42b8:	2400      	movs	r4, #0
    42ba:	e7c4      	b.n	4246 <usb_transfer+0xa6>
		ret = usb_dc_ep_read_continue(ep);
    42bc:	4628      	mov	r0, r5
    42be:	f002 f84d 	bl	635c <usb_dc_ep_read_continue>
    42c2:	4604      	mov	r4, r0
    42c4:	e7bf      	b.n	4246 <usb_transfer+0xa6>
		return -EBUSY;
    42c6:	f06f 040f 	mvn.w	r4, #15
    42ca:	e7c1      	b.n	4250 <usb_transfer+0xb0>
    42cc:	20000d24 	.word	0x20000d24
    42d0:	20000d08 	.word	0x20000d08
    42d4:	0000db31 	.word	0x0000db31
    42d8:	0000d2d0 	.word	0x0000d2d0
    42dc:	0000db16 	.word	0x0000db16
    42e0:	200008c8 	.word	0x200008c8

000042e4 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    42e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    42e6:	f04f 0320 	mov.w	r3, #32
    42ea:	f3ef 8411 	mrs	r4, BASEPRI
    42ee:	f383 8812 	msr	BASEPRI_MAX, r3
    42f2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    42f6:	f7ff fe53 	bl	3fa0 <usb_ep_get_transfer>
	if (!trans) {
    42fa:	b150      	cbz	r0, 4312 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    42fc:	6843      	ldr	r3, [r0, #4]
    42fe:	3310      	adds	r3, #16
    4300:	d107      	bne.n	4312 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4302:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4306:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4308:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    430c:	4803      	ldr	r0, [pc, #12]	; (431c <usb_cancel_transfer+0x38>)
    430e:	f008 fbe2 	bl	cad6 <k_work_submit_to_queue>
	__asm__ volatile(
    4312:	f384 8811 	msr	BASEPRI, r4
    4316:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    431a:	bd10      	pop	{r4, pc}
    431c:	200008c8 	.word	0x200008c8

00004320 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4320:	b570      	push	{r4, r5, r6, lr}
    4322:	4c0f      	ldr	r4, [pc, #60]	; (4360 <usb_cancel_transfers+0x40>)
    4324:	2504      	movs	r5, #4
	__asm__ volatile(
    4326:	f04f 0320 	mov.w	r3, #32
    432a:	f3ef 8611 	mrs	r6, BASEPRI
    432e:	f383 8812 	msr	BASEPRI_MAX, r3
    4332:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    4336:	6863      	ldr	r3, [r4, #4]
    4338:	3310      	adds	r3, #16
    433a:	d107      	bne.n	434c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    433c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4340:	4808      	ldr	r0, [pc, #32]	; (4364 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    4342:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4344:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4348:	f008 fbc5 	bl	cad6 <k_work_submit_to_queue>
	__asm__ volatile(
    434c:	f386 8811 	msr	BASEPRI, r6
    4350:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4354:	3d01      	subs	r5, #1
    4356:	f104 0440 	add.w	r4, r4, #64	; 0x40
    435a:	d1e4      	bne.n	4326 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    435c:	bd70      	pop	{r4, r5, r6, pc}
    435e:	bf00      	nop
    4360:	20000d08 	.word	0x20000d08
    4364:	200008c8 	.word	0x200008c8

00004368 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4368:	b570      	push	{r4, r5, r6, lr}
    436a:	4c0a      	ldr	r4, [pc, #40]	; (4394 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    436c:	4e0a      	ldr	r6, [pc, #40]	; (4398 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    436e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4370:	4631      	mov	r1, r6
    4372:	4620      	mov	r0, r4
    4374:	f008 fb92 	bl	ca9c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4378:	2201      	movs	r2, #1
    437a:	f1a4 0010 	sub.w	r0, r4, #16
    437e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4380:	3501      	adds	r5, #1
    4382:	f008 fb4e 	bl	ca22 <z_impl_k_sem_init>
    4386:	2d04      	cmp	r5, #4
    4388:	f104 0440 	add.w	r4, r4, #64	; 0x40
    438c:	d1f0      	bne.n	4370 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    438e:	2000      	movs	r0, #0
    4390:	bd70      	pop	{r4, r5, r6, pc}
    4392:	bf00      	nop
    4394:	20000d34 	.word	0x20000d34
    4398:	00003fcd 	.word	0x00003fcd

0000439c <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	4604      	mov	r4, r0
    43a0:	460e      	mov	r6, r1
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    43a2:	7901      	ldrb	r1, [r0, #4]
    43a4:	4812      	ldr	r0, [pc, #72]	; (43f0 <cdc_acm_class_handle_req+0x54>)
{
    43a6:	4615      	mov	r5, r2
	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    43a8:	f007 fd5b 	bl	be62 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    43ac:	b1e8      	cbz	r0, 43ea <cdc_acm_class_handle_req+0x4e>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    43ae:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    43b2:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_device(setup)) {
    43b4:	2a00      	cmp	r2, #0
    43b6:	db11      	blt.n	43dc <cdc_acm_class_handle_req+0x40>
		switch (setup->bRequest) {
    43b8:	2b20      	cmp	r3, #32
    43ba:	d004      	beq.n	43c6 <cdc_acm_class_handle_req+0x2a>
    43bc:	2b22      	cmp	r3, #34	; 0x22
    43be:	d009      	beq.n	43d4 <cdc_acm_class_handle_req+0x38>
		}
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
    43c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    43c4:	e005      	b.n	43d2 <cdc_acm_class_handle_req+0x36>
			memcpy(&dev_data->line_coding, *data,
    43c6:	6829      	ldr	r1, [r5, #0]
    43c8:	2207      	movs	r2, #7
    43ca:	3810      	subs	r0, #16
    43cc:	f007 feb0 	bl	c130 <memcpy>
			return 0;
    43d0:	2000      	movs	r0, #0
}
    43d2:	bd70      	pop	{r4, r5, r6, pc}
			dev_data->line_state = (uint8_t)setup->wValue;
    43d4:	8863      	ldrh	r3, [r4, #2]
    43d6:	f800 3c09 	strb.w	r3, [r0, #-9]
			return 0;
    43da:	e7f9      	b.n	43d0 <cdc_acm_class_handle_req+0x34>
		if (setup->bRequest == GET_LINE_CODING) {
    43dc:	2b21      	cmp	r3, #33	; 0x21
    43de:	d1ef      	bne.n	43c0 <cdc_acm_class_handle_req+0x24>
			*data = (uint8_t *)(&dev_data->line_coding);
    43e0:	3810      	subs	r0, #16
			*len = sizeof(dev_data->line_coding);
    43e2:	2307      	movs	r3, #7
			*data = (uint8_t *)(&dev_data->line_coding);
    43e4:	6028      	str	r0, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    43e6:	6033      	str	r3, [r6, #0]
			return 0;
    43e8:	e7f2      	b.n	43d0 <cdc_acm_class_handle_req+0x34>
		return -ENODEV;
    43ea:	f06f 0012 	mvn.w	r0, #18
    43ee:	e7f0      	b.n	43d2 <cdc_acm_class_handle_req+0x36>
    43f0:	20000e08 	.word	0x20000e08

000043f4 <cdc_acm_int_in>:
 *
 * @param ep        Endpoint address.
 * @param ep_status Endpoint status code.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    43f4:	b508      	push	{r3, lr}
    43f6:	4601      	mov	r1, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    43f8:	4803      	ldr	r0, [pc, #12]	; (4408 <cdc_acm_int_in+0x14>)
    43fa:	f007 fd40 	bl	be7e <usb_get_dev_data_by_ep>
	if (common == NULL) {
    43fe:	b110      	cbz	r0, 4406 <cdc_acm_int_in+0x12>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    4400:	2301      	movs	r3, #1
    4402:	f800 3c07 	strb.w	r3, [r0, #-7]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    4406:	bd08      	pop	{r3, pc}
    4408:	20000e08 	.word	0x20000e08

0000440c <cdc_acm_irq_rx_enable>:
 *
 * @param dev CDC ACM device struct.
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    440c:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    440e:	2301      	movs	r3, #1
    4410:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b

	if (dev_data->cb && dev_data->rx_ready) {
    4414:	680b      	ldr	r3, [r1, #0]
    4416:	b133      	cbz	r3, 4426 <cdc_acm_irq_rx_enable+0x1a>
    4418:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    441c:	b11b      	cbz	r3, 4426 <cdc_acm_irq_rx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    441e:	4802      	ldr	r0, [pc, #8]	; (4428 <cdc_acm_irq_rx_enable+0x1c>)
    4420:	3108      	adds	r1, #8
    4422:	f008 bb58 	b.w	cad6 <k_work_submit_to_queue>
	}
}
    4426:	4770      	bx	lr
    4428:	200008c8 	.word	0x200008c8

0000442c <cdc_acm_irq_tx_enable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    442c:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    442e:	2301      	movs	r3, #1
    4430:	f881 304a 	strb.w	r3, [r1, #74]	; 0x4a
	if (dev_data->cb && dev_data->tx_ready) {
    4434:	680b      	ldr	r3, [r1, #0]
    4436:	b133      	cbz	r3, 4446 <cdc_acm_irq_tx_enable+0x1a>
    4438:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    443c:	b11b      	cbz	r3, 4446 <cdc_acm_irq_tx_enable+0x1a>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    443e:	4802      	ldr	r0, [pc, #8]	; (4448 <cdc_acm_irq_tx_enable+0x1c>)
    4440:	3108      	adds	r1, #8
    4442:	f008 bb48 	b.w	cad6 <k_work_submit_to_queue>
}
    4446:	4770      	bx	lr
    4448:	200008c8 	.word	0x200008c8

0000444c <cdc_acm_reset_port>:
	dev_data->line_coding = (struct cdc_acm_line_coding)
    444c:	4a0d      	ldr	r2, [pc, #52]	; (4484 <cdc_acm_reset_port+0x38>)
{
    444e:	4603      	mov	r3, r0
	dev_data->tx_ready = false;
    4450:	2100      	movs	r1, #0
    4452:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4456:	6810      	ldr	r0, [r2, #0]
    4458:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    445c:	8890      	ldrh	r0, [r2, #4]
    445e:	7992      	ldrb	r2, [r2, #6]
    4460:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
    4464:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	dev_data->serial_state = 0;
    4468:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
	dev_data->line_state = 0;
    446c:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
	dev_data->configured = false;
    4470:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
	dev_data->rx_paused = false;
    4474:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4478:	2240      	movs	r2, #64	; 0x40
    447a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
    447e:	f007 be62 	b.w	c146 <memset>
    4482:	bf00      	nop
    4484:	0000d2f0 	.word	0x0000d2f0

00004488 <cdc_acm_fifo_fill>:
{
    4488:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    448a:	6905      	ldr	r5, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    448c:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    4490:	b188      	cbz	r0, 44b6 <cdc_acm_fifo_fill+0x2e>
    4492:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    4496:	b97b      	cbnz	r3, 44b8 <cdc_acm_fifo_fill+0x30>
	dev_data->tx_ready = false;
    4498:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    449c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    44a0:	f007 f936 	bl	b710 <ring_buf_put>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    44a4:	2200      	movs	r2, #0
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    44a6:	4604      	mov	r4, r0
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    44a8:	2300      	movs	r3, #0
    44aa:	4804      	ldr	r0, [pc, #16]	; (44bc <cdc_acm_fifo_fill+0x34>)
    44ac:	f105 0118 	add.w	r1, r5, #24
    44b0:	f005 fd3e 	bl	9f30 <k_work_schedule_for_queue>
	return wrote;
    44b4:	4620      	mov	r0, r4
}
    44b6:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    44b8:	2000      	movs	r0, #0
    44ba:	e7fc      	b.n	44b6 <cdc_acm_fifo_fill+0x2e>
    44bc:	200008c8 	.word	0x200008c8

000044c0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    44c0:	b513      	push	{r0, r1, r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    44c2:	6904      	ldr	r4, [r0, #16]
{
    44c4:	f88d 1007 	strb.w	r1, [sp, #7]

	if (!dev_data->configured || dev_data->suspended) {
    44c8:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    44cc:	b1a3      	cbz	r3, 44f8 <cdc_acm_poll_out+0x38>
    44ce:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
    44d2:	b98b      	cbnz	r3, 44f8 <cdc_acm_poll_out+0x38>
		return;
	}

	dev_data->tx_ready = false;

	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    44d4:	f10d 0107 	add.w	r1, sp, #7
    44d8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	dev_data->tx_ready = false;
    44dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    44e0:	2201      	movs	r2, #1
    44e2:	f007 f915 	bl	b710 <ring_buf_put>
    44e6:	4601      	mov	r1, r0
    44e8:	b140      	cbz	r0, 44fc <cdc_acm_poll_out+0x3c>

	/* Schedule with minimal timeout to make it possible to send more than
	 * one byte per USB transfer. The latency increase is negligible while
	 * the increased throughput and reduced CPU usage is easily observable.
	 */
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_MSEC(1));
    44ea:	480d      	ldr	r0, [pc, #52]	; (4520 <cdc_acm_poll_out+0x60>)
    44ec:	2221      	movs	r2, #33	; 0x21
    44ee:	2300      	movs	r3, #0
    44f0:	f104 0118 	add.w	r1, r4, #24
    44f4:	f005 fd1c 	bl	9f30 <k_work_schedule_for_queue>
}
    44f8:	b002      	add	sp, #8
    44fa:	bd10      	pop	{r4, pc}
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    44fc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    4500:	2201      	movs	r2, #1
    4502:	f007 f959 	bl	b7b8 <ring_buf_get>
    4506:	2800      	cmp	r0, #0
    4508:	d0f6      	beq.n	44f8 <cdc_acm_poll_out+0x38>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    450a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    450e:	2201      	movs	r2, #1
    4510:	f10d 0107 	add.w	r1, sp, #7
    4514:	f007 f8fc 	bl	b710 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4518:	2800      	cmp	r0, #0
    451a:	d1e6      	bne.n	44ea <cdc_acm_poll_out+0x2a>
    451c:	e7ec      	b.n	44f8 <cdc_acm_poll_out+0x38>
    451e:	bf00      	nop
    4520:	200008c8 	.word	0x200008c8

00004524 <tx_work_handler>:
{
    4524:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_cfg_data *cfg = (void *)dev->config;
    4526:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    452a:	685b      	ldr	r3, [r3, #4]
    452c:	6a1b      	ldr	r3, [r3, #32]
    452e:	7d1f      	ldrb	r7, [r3, #20]
{
    4530:	b085      	sub	sp, #20
    4532:	4605      	mov	r5, r0
	if (usb_transfer_is_busy(ep)) {
    4534:	4638      	mov	r0, r7
    4536:	f007 fcb8 	bl	beaa <usb_transfer_is_busy>
    453a:	4606      	mov	r6, r0
    453c:	b9e0      	cbnz	r0, 4578 <tx_work_handler+0x54>
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    453e:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    4540:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4544:	a903      	add	r1, sp, #12
    4546:	f007 f902 	bl	b74e <ring_buf_get_claim>
	if (!len) {
    454a:	4604      	mov	r4, r0
    454c:	b1a0      	cbz	r0, 4578 <tx_work_handler+0x54>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    454e:	0683      	lsls	r3, r0, #26
	struct cdc_acm_dev_data_t *dev_data =
    4550:	f1a5 0318 	sub.w	r3, r5, #24
		len -= 1;
    4554:	bf08      	it	eq
    4556:	f100 34ff 	addeq.w	r4, r0, #4294967295	; 0xffffffff
	dev_data->tx_ready = false;
    455a:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    455e:	9301      	str	r3, [sp, #4]
    4560:	4b06      	ldr	r3, [pc, #24]	; (457c <tx_work_handler+0x58>)
    4562:	9903      	ldr	r1, [sp, #12]
    4564:	9300      	str	r3, [sp, #0]
    4566:	4622      	mov	r2, r4
    4568:	2302      	movs	r3, #2
    456a:	4638      	mov	r0, r7
    456c:	f7ff fe18 	bl	41a0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    4570:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    4572:	4621      	mov	r1, r4
    4574:	f007 f90b 	bl	b78e <ring_buf_get_finish>
}
    4578:	b005      	add	sp, #20
    457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    457c:	00004581 	.word	0x00004581

00004580 <cdc_acm_write_cb>:
{
    4580:	b510      	push	{r4, lr}
	dev_data->tx_ready = true;
    4582:	2301      	movs	r3, #1
    4584:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4588:	6813      	ldr	r3, [r2, #0]
{
    458a:	4614      	mov	r4, r2
	if (dev_data->cb && dev_data->tx_irq_ena) {
    458c:	b13b      	cbz	r3, 459e <cdc_acm_write_cb+0x1e>
    458e:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
    4592:	b123      	cbz	r3, 459e <cdc_acm_write_cb+0x1e>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4594:	480a      	ldr	r0, [pc, #40]	; (45c0 <cdc_acm_write_cb+0x40>)
    4596:	f102 0108 	add.w	r1, r2, #8
    459a:	f008 fa9c 	bl	cad6 <k_work_submit_to_queue>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    459e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    45a2:	689a      	ldr	r2, [r3, #8]
    45a4:	691b      	ldr	r3, [r3, #16]
    45a6:	429a      	cmp	r2, r3
    45a8:	d008      	beq.n	45bc <cdc_acm_write_cb+0x3c>
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    45aa:	f104 0118 	add.w	r1, r4, #24
    45ae:	4804      	ldr	r0, [pc, #16]	; (45c0 <cdc_acm_write_cb+0x40>)
}
    45b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule_for_queue(&USB_WORK_Q, &dev_data->tx_work, K_NO_WAIT);
    45b4:	2200      	movs	r2, #0
    45b6:	2300      	movs	r3, #0
    45b8:	f005 bcba 	b.w	9f30 <k_work_schedule_for_queue>
}
    45bc:	bd10      	pop	{r4, pc}
    45be:	bf00      	nop
    45c0:	200008c8 	.word	0x200008c8

000045c4 <cdc_acm_init>:
{
    45c4:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    45c6:	6904      	ldr	r4, [r0, #16]
	parent->next = child;
    45c8:	2300      	movs	r3, #0
    45ca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    45ce:	4b0c      	ldr	r3, [pc, #48]	; (4600 <cdc_acm_init+0x3c>)
	dev_data->common.dev = dev;
    45d0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    45d4:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    45d6:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    45da:	b969      	cbnz	r1, 45f8 <cdc_acm_init+0x34>
	list->head = node;
    45dc:	e9c3 2200 	strd	r2, r2, [r3]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    45e0:	f104 0008 	add.w	r0, r4, #8
    45e4:	4907      	ldr	r1, [pc, #28]	; (4604 <cdc_acm_init+0x40>)
    45e6:	f008 fa59 	bl	ca9c <k_work_init>
	k_work_init_delayable(&dev_data->tx_work, tx_work_handler);
    45ea:	f104 0018 	add.w	r0, r4, #24
    45ee:	4906      	ldr	r1, [pc, #24]	; (4608 <cdc_acm_init+0x44>)
    45f0:	f008 fa82 	bl	caf8 <k_work_init_delayable>
}
    45f4:	2000      	movs	r0, #0
    45f6:	bd10      	pop	{r4, pc}
	parent->next = child;
    45f8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    45fa:	605a      	str	r2, [r3, #4]
}
    45fc:	e7f0      	b.n	45e0 <cdc_acm_init+0x1c>
    45fe:	bf00      	nop
    4600:	20000e08 	.word	0x20000e08
    4604:	0000bed5 	.word	0x0000bed5
    4608:	00004525 	.word	0x00004525

0000460c <cdc_acm_send_notification.isra.0>:
static int cdc_acm_send_notification(const struct device *dev,
    460c:	b530      	push	{r4, r5, lr}
	notification.wIndex = 0U;
    460e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	struct usb_cfg_data * const cfg = (void *)dev->config;
    4612:	6842      	ldr	r2, [r0, #4]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4614:	6905      	ldr	r5, [r0, #16]
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4616:	4c0d      	ldr	r4, [pc, #52]	; (464c <cdc_acm_send_notification.isra.0+0x40>)
static int cdc_acm_send_notification(const struct device *dev,
    4618:	b085      	sub	sp, #20
	notification.wIndex = 0U;
    461a:	f242 00a1 	movw	r0, #8353	; 0x20a1
    461e:	e9cd 0301 	strd	r0, r3, [sp, #4]
	dev_data->notification_sent = 0U;
    4622:	2300      	movs	r3, #0
    4624:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    4628:	6a10      	ldr	r0, [r2, #32]
	notification.data = sys_cpu_to_le16(serial_state);
    462a:	f8ad 100c 	strh.w	r1, [sp, #12]
	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    462e:	7900      	ldrb	r0, [r0, #4]
    4630:	220a      	movs	r2, #10
    4632:	a901      	add	r1, sp, #4
    4634:	f007 fbf1 	bl	be1a <usb_write>
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4638:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
    463c:	b923      	cbnz	r3, 4648 <cdc_acm_send_notification.isra.0+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
    463e:	2001      	movs	r0, #1
    4640:	f008 fba8 	bl	cd94 <z_impl_k_busy_wait>
		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    4644:	3c01      	subs	r4, #1
    4646:	d1f7      	bne.n	4638 <cdc_acm_send_notification.isra.0+0x2c>
}
    4648:	b005      	add	sp, #20
    464a:	bd30      	pop	{r4, r5, pc}
    464c:	000186a1 	.word	0x000186a1

00004650 <cdc_acm_read_cb>:
{
    4650:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4652:	4614      	mov	r4, r2
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4654:	f102 064c 	add.w	r6, r2, #76	; 0x4c
	if (size <= 0) {
    4658:	1e0a      	subs	r2, r1, #0
{
    465a:	4605      	mov	r5, r0
	if (size <= 0) {
    465c:	dd1f      	ble.n	469e <cdc_acm_read_cb+0x4e>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    465e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    4662:	4631      	mov	r1, r6
    4664:	f007 f854 	bl	b710 <ring_buf_put>
	dev_data->rx_ready = true;
    4668:	2301      	movs	r3, #1
    466a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (dev_data->cb && dev_data->rx_irq_ena) {
    466e:	6823      	ldr	r3, [r4, #0]
    4670:	b13b      	cbz	r3, 4682 <cdc_acm_read_cb+0x32>
    4672:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    4676:	b123      	cbz	r3, 4682 <cdc_acm_read_cb+0x32>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4678:	480e      	ldr	r0, [pc, #56]	; (46b4 <cdc_acm_read_cb+0x64>)
    467a:	f104 0108 	add.w	r1, r4, #8
    467e:	f008 fa2a 	bl	cad6 <k_work_submit_to_queue>
	if (ring_buf_space_get(dev_data->rx_ringbuf) < sizeof(dev_data->rx_buf)) {
    4682:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 *
 * @return Ring buffer free space (in bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->put_head - buf->get_tail);
    4686:	684b      	ldr	r3, [r1, #4]
    4688:	694a      	ldr	r2, [r1, #20]
    468a:	1a9a      	subs	r2, r3, r2
    468c:	69cb      	ldr	r3, [r1, #28]
    468e:	1a9b      	subs	r3, r3, r2
    4690:	2b3f      	cmp	r3, #63	; 0x3f
    4692:	d804      	bhi.n	469e <cdc_acm_read_cb+0x4e>
		dev_data->rx_paused = true;
    4694:	2301      	movs	r3, #1
    4696:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    469a:	b002      	add	sp, #8
    469c:	bd70      	pop	{r4, r5, r6, pc}
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    469e:	4b06      	ldr	r3, [pc, #24]	; (46b8 <cdc_acm_read_cb+0x68>)
    46a0:	9300      	str	r3, [sp, #0]
    46a2:	9401      	str	r4, [sp, #4]
    46a4:	2301      	movs	r3, #1
    46a6:	2240      	movs	r2, #64	; 0x40
    46a8:	4631      	mov	r1, r6
    46aa:	4628      	mov	r0, r5
    46ac:	f7ff fd78 	bl	41a0 <usb_transfer>
    46b0:	e7f3      	b.n	469a <cdc_acm_read_cb+0x4a>
    46b2:	bf00      	nop
    46b4:	200008c8 	.word	0x200008c8
    46b8:	00004651 	.word	0x00004651

000046bc <cdc_acm_dev_status_cb>:
{
    46bc:	b538      	push	{r3, r4, r5, lr}
    46be:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    46c0:	4601      	mov	r1, r0
    46c2:	481e      	ldr	r0, [pc, #120]	; (473c <cdc_acm_dev_status_cb+0x80>)
    46c4:	f007 fbc1 	bl	be4a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    46c8:	4604      	mov	r4, r0
    46ca:	b380      	cbz	r0, 472e <cdc_acm_dev_status_cb+0x72>
	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);
    46cc:	4602      	mov	r2, r0
	switch (status) {
    46ce:	1e69      	subs	r1, r5, #1
	struct usb_cfg_data *cfg = (void *)dev->config;
    46d0:	f852 39a4 	ldr.w	r3, [r2], #-164
    46d4:	685b      	ldr	r3, [r3, #4]
	switch (status) {
    46d6:	2905      	cmp	r1, #5
    46d8:	d829      	bhi.n	472e <cdc_acm_dev_status_cb+0x72>
    46da:	e8df f001 	tbb	[pc, r1]
    46de:	2820      	.short	0x2820
    46e0:	29252003 	.word	0x29252003
		if (!dev_data->configured) {
    46e4:	f814 1c06 	ldrb.w	r1, [r4, #-6]
    46e8:	b931      	cbnz	r1, 46f8 <cdc_acm_dev_status_cb+0x3c>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    46ea:	6a1b      	ldr	r3, [r3, #32]
    46ec:	7b18      	ldrb	r0, [r3, #12]
    46ee:	f7ff ffaf 	bl	4650 <cdc_acm_read_cb>
			dev_data->configured = true;
    46f2:	2301      	movs	r3, #1
    46f4:	f804 3c06 	strb.w	r3, [r4, #-6]
		if (!dev_data->tx_ready) {
    46f8:	f814 3c5c 	ldrb.w	r3, [r4, #-92]
    46fc:	b9bb      	cbnz	r3, 472e <cdc_acm_dev_status_cb+0x72>
			dev_data->tx_ready = true;
    46fe:	2301      	movs	r3, #1
    4700:	f804 3c5c 	strb.w	r3, [r4, #-92]
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    4704:	f854 3ca4 	ldr.w	r3, [r4, #-164]
    4708:	b18b      	cbz	r3, 472e <cdc_acm_dev_status_cb+0x72>
    470a:	f814 3c5a 	ldrb.w	r3, [r4, #-90]
    470e:	b173      	cbz	r3, 472e <cdc_acm_dev_status_cb+0x72>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4710:	f1a4 019c 	sub.w	r1, r4, #156	; 0x9c
    4714:	480a      	ldr	r0, [pc, #40]	; (4740 <cdc_acm_dev_status_cb+0x84>)
}
    4716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    471a:	f008 b9dc 	b.w	cad6 <k_work_submit_to_queue>
}
    471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		cdc_acm_reset_port(dev_data);
    4722:	4610      	mov	r0, r2
    4724:	f7ff be92 	b.w	444c <cdc_acm_reset_port>
		dev_data->suspended = true;
    4728:	2301      	movs	r3, #1
			dev_data->suspended = false;
    472a:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    472e:	bd38      	pop	{r3, r4, r5, pc}
		if (dev_data->suspended) {
    4730:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    4734:	2b00      	cmp	r3, #0
    4736:	d0fa      	beq.n	472e <cdc_acm_dev_status_cb+0x72>
			dev_data->suspended = false;
    4738:	2300      	movs	r3, #0
    473a:	e7f6      	b.n	472a <cdc_acm_dev_status_cb+0x6e>
    473c:	20000e08 	.word	0x20000e08
    4740:	200008c8 	.word	0x200008c8

00004744 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(void)
{
    4744:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&z_usb_work_q,
    4746:	4d09      	ldr	r5, [pc, #36]	; (476c <z_usb_work_q_init+0x28>)
    4748:	4909      	ldr	r1, [pc, #36]	; (4770 <z_usb_work_q_init+0x2c>)
    474a:	2400      	movs	r4, #0
    474c:	9400      	str	r4, [sp, #0]
    474e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4752:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4756:	4628      	mov	r0, r5
    4758:	f005 fbb2 	bl	9ec0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    475c:	4905      	ldr	r1, [pc, #20]	; (4774 <z_usb_work_q_init+0x30>)
    475e:	4628      	mov	r0, r5
    4760:	f008 f8c9 	bl	c8f6 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    4764:	4620      	mov	r0, r4
    4766:	b003      	add	sp, #12
    4768:	bd30      	pop	{r4, r5, pc}
    476a:	bf00      	nop
    476c:	200008c8 	.word	0x200008c8
    4770:	200024c0 	.word	0x200024c0
    4774:	0000db81 	.word	0x0000db81

00004778 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    4778:	4801      	ldr	r0, [pc, #4]	; (4780 <nrf_cc3xx_platform_abort_init+0x8>)
    477a:	f006 ba07 	b.w	ab8c <nrf_cc3xx_platform_set_abort>
    477e:	bf00      	nop
    4780:	0000d3d4 	.word	0x0000d3d4

00004784 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4784:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    4786:	4604      	mov	r4, r0
    4788:	b918      	cbnz	r0, 4792 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    478a:	4b0f      	ldr	r3, [pc, #60]	; (47c8 <mutex_free_platform+0x44>)
    478c:	480f      	ldr	r0, [pc, #60]	; (47cc <mutex_free_platform+0x48>)
    478e:	685b      	ldr	r3, [r3, #4]
    4790:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4792:	6861      	ldr	r1, [r4, #4]
    4794:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    4798:	d00f      	beq.n	47ba <mutex_free_platform+0x36>
    479a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    479e:	d00c      	beq.n	47ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    47a0:	4d0b      	ldr	r5, [pc, #44]	; (47d0 <mutex_free_platform+0x4c>)
    47a2:	42a9      	cmp	r1, r5
    47a4:	d009      	beq.n	47ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    47a6:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    47aa:	d007      	beq.n	47bc <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    47ac:	4809      	ldr	r0, [pc, #36]	; (47d4 <mutex_free_platform+0x50>)
    47ae:	4621      	mov	r1, r4
    47b0:	f008 f872 	bl	c898 <k_mem_slab_free>
        mutex->mutex = NULL;
    47b4:	2300      	movs	r3, #0
    47b6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    47b8:	6065      	str	r5, [r4, #4]
}
    47ba:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    47bc:	6820      	ldr	r0, [r4, #0]
    47be:	2214      	movs	r2, #20
    47c0:	f007 fcc1 	bl	c146 <memset>
    47c4:	e7f8      	b.n	47b8 <mutex_free_platform+0x34>
    47c6:	bf00      	nop
    47c8:	200001e4 	.word	0x200001e4
    47cc:	0000db8a 	.word	0x0000db8a
    47d0:	a95c5f2c 	.word	0xa95c5f2c
    47d4:	20001310 	.word	0x20001310

000047d8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    47d8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    47da:	b320      	cbz	r0, 4826 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    47dc:	6843      	ldr	r3, [r0, #4]
    47de:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    47e2:	d110      	bne.n	4806 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    47e4:	2201      	movs	r2, #1
    47e6:	6803      	ldr	r3, [r0, #0]
    47e8:	f3bf 8f5b 	dmb	ish
    47ec:	e853 1f00 	ldrex	r1, [r3]
    47f0:	2900      	cmp	r1, #0
    47f2:	d103      	bne.n	47fc <mutex_lock_platform+0x24>
    47f4:	e843 2000 	strex	r0, r2, [r3]
    47f8:	2800      	cmp	r0, #0
    47fa:	d1f7      	bne.n	47ec <mutex_lock_platform+0x14>
    47fc:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4800:	d10d      	bne.n	481e <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    4802:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    4804:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4806:	4a09      	ldr	r2, [pc, #36]	; (482c <mutex_lock_platform+0x54>)
    4808:	4293      	cmp	r3, r2
    480a:	d00a      	beq.n	4822 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    480c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    480e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4816:	f005 f92b 	bl	9a70 <z_impl_k_mutex_lock>
        if (ret == 0) {
    481a:	2800      	cmp	r0, #0
    481c:	d0f1      	beq.n	4802 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    481e:	4804      	ldr	r0, [pc, #16]	; (4830 <mutex_lock_platform+0x58>)
    4820:	e7f0      	b.n	4804 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4822:	4804      	ldr	r0, [pc, #16]	; (4834 <mutex_lock_platform+0x5c>)
    4824:	e7ee      	b.n	4804 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4826:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    482a:	e7eb      	b.n	4804 <mutex_lock_platform+0x2c>
    482c:	a95c5f2c 	.word	0xa95c5f2c
    4830:	ffff8fe9 	.word	0xffff8fe9
    4834:	ffff8fea 	.word	0xffff8fea

00004838 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4838:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    483a:	b1d8      	cbz	r0, 4874 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    483c:	6843      	ldr	r3, [r0, #4]
    483e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    4842:	d110      	bne.n	4866 <mutex_unlock_platform+0x2e>
    4844:	2200      	movs	r2, #0
    4846:	6803      	ldr	r3, [r0, #0]
    4848:	f3bf 8f5b 	dmb	ish
    484c:	e853 1f00 	ldrex	r1, [r3]
    4850:	2901      	cmp	r1, #1
    4852:	d103      	bne.n	485c <mutex_unlock_platform+0x24>
    4854:	e843 2000 	strex	r0, r2, [r3]
    4858:	2800      	cmp	r0, #0
    485a:	d1f7      	bne.n	484c <mutex_unlock_platform+0x14>
    485c:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4860:	d10b      	bne.n	487a <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4862:	2000      	movs	r0, #0
    }
}
    4864:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4866:	4a07      	ldr	r2, [pc, #28]	; (4884 <mutex_unlock_platform+0x4c>)
    4868:	4293      	cmp	r3, r2
    486a:	d008      	beq.n	487e <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    486c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    486e:	f005 f979 	bl	9b64 <z_impl_k_mutex_unlock>
    4872:	e7f6      	b.n	4862 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4874:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4878:	e7f4      	b.n	4864 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    487a:	4803      	ldr	r0, [pc, #12]	; (4888 <mutex_unlock_platform+0x50>)
    487c:	e7f2      	b.n	4864 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    487e:	4803      	ldr	r0, [pc, #12]	; (488c <mutex_unlock_platform+0x54>)
    4880:	e7f0      	b.n	4864 <mutex_unlock_platform+0x2c>
    4882:	bf00      	nop
    4884:	a95c5f2c 	.word	0xa95c5f2c
    4888:	ffff8fe9 	.word	0xffff8fe9
    488c:	ffff8fea 	.word	0xffff8fea

00004890 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4890:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4892:	4604      	mov	r4, r0
    4894:	b918      	cbnz	r0, 489e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    4896:	4b1d      	ldr	r3, [pc, #116]	; (490c <mutex_init_platform+0x7c>)
    4898:	481d      	ldr	r0, [pc, #116]	; (4910 <mutex_init_platform+0x80>)
    489a:	685b      	ldr	r3, [r3, #4]
    489c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    489e:	6863      	ldr	r3, [r4, #4]
    48a0:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    48a4:	d02f      	beq.n	4906 <mutex_init_platform+0x76>
    48a6:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    48aa:	d02c      	beq.n	4906 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    48ac:	4a19      	ldr	r2, [pc, #100]	; (4914 <mutex_init_platform+0x84>)
    48ae:	4293      	cmp	r3, r2
    48b0:	d119      	bne.n	48e6 <mutex_init_platform+0x56>
    48b2:	6823      	ldr	r3, [r4, #0]
    48b4:	bb03      	cbnz	r3, 48f8 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    48b6:	4818      	ldr	r0, [pc, #96]	; (4918 <mutex_init_platform+0x88>)
    48b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    48bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    48c0:	4621      	mov	r1, r4
    48c2:	f004 ffd1 	bl	9868 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    48c6:	b908      	cbnz	r0, 48cc <mutex_init_platform+0x3c>
    48c8:	6823      	ldr	r3, [r4, #0]
    48ca:	b91b      	cbnz	r3, 48d4 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    48cc:	4b0f      	ldr	r3, [pc, #60]	; (490c <mutex_init_platform+0x7c>)
    48ce:	4813      	ldr	r0, [pc, #76]	; (491c <mutex_init_platform+0x8c>)
    48d0:	685b      	ldr	r3, [r3, #4]
    48d2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    48d4:	6820      	ldr	r0, [r4, #0]
    48d6:	2214      	movs	r2, #20
    48d8:	2100      	movs	r1, #0
    48da:	f007 fc34 	bl	c146 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    48de:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    48e2:	6063      	str	r3, [r4, #4]
    48e4:	e008      	b.n	48f8 <mutex_init_platform+0x68>
    switch(flags){
    48e6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    48ea:	d80d      	bhi.n	4908 <mutex_init_platform+0x78>
    48ec:	2b3a      	cmp	r3, #58	; 0x3a
    48ee:	d003      	beq.n	48f8 <mutex_init_platform+0x68>
    48f0:	f640 62ba 	movw	r2, #3770	; 0xeba
    48f4:	4293      	cmp	r3, r2
    48f6:	d1de      	bne.n	48b6 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    48f8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    48fa:	f008 f812 	bl	c922 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    48fe:	6863      	ldr	r3, [r4, #4]
    4900:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    4904:	6063      	str	r3, [r4, #4]
}
    4906:	bd10      	pop	{r4, pc}
    switch(flags){
    4908:	4a05      	ldr	r2, [pc, #20]	; (4920 <mutex_init_platform+0x90>)
    490a:	e7f3      	b.n	48f4 <mutex_init_platform+0x64>
    490c:	200001e4 	.word	0x200001e4
    4910:	0000db8a 	.word	0x0000db8a
    4914:	a95c5f2c 	.word	0xa95c5f2c
    4918:	20001310 	.word	0x20001310
    491c:	0000dbb0 	.word	0x0000dbb0
    4920:	3a00003a 	.word	0x3a00003a

00004924 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4924:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4926:	4906      	ldr	r1, [pc, #24]	; (4940 <nrf_cc3xx_platform_mutex_init+0x1c>)
    4928:	4806      	ldr	r0, [pc, #24]	; (4944 <nrf_cc3xx_platform_mutex_init+0x20>)
    492a:	2340      	movs	r3, #64	; 0x40
    492c:	2214      	movs	r2, #20
    492e:	f007 ffa5 	bl	c87c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    4932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    4936:	4904      	ldr	r1, [pc, #16]	; (4948 <nrf_cc3xx_platform_mutex_init+0x24>)
    4938:	4804      	ldr	r0, [pc, #16]	; (494c <nrf_cc3xx_platform_mutex_init+0x28>)
    493a:	f006 b999 	b.w	ac70 <nrf_cc3xx_platform_set_mutexes>
    493e:	bf00      	nop
    4940:	20000e10 	.word	0x20000e10
    4944:	20001310 	.word	0x20001310
    4948:	0000d3dc 	.word	0x0000d3dc
    494c:	0000d3f0 	.word	0x0000d3f0

00004950 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4950:	4901      	ldr	r1, [pc, #4]	; (4958 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4952:	2210      	movs	r2, #16
	str	r2, [r1]
    4954:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4956:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4958:	e000ed10 	.word	0xe000ed10

0000495c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    495c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    495e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4960:	f380 8811 	msr	BASEPRI, r0
	isb
    4964:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    4968:	f3bf 8f4f 	dsb	sy
    496c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    496e:	b662      	cpsie	i
	isb
    4970:	f3bf 8f6f 	isb	sy

	bx	lr
    4974:	4770      	bx	lr
    4976:	bf00      	nop

00004978 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4978:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    497a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    497c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    4980:	f3bf 8f4f 	dsb	sy
    4984:	bf20      	wfe

	msr	BASEPRI, r0
    4986:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    498a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    498c:	4770      	bx	lr
    498e:	bf00      	nop

00004990 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4994:	4681      	mov	r9, r0
    4996:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    4998:	460c      	mov	r4, r1
    499a:	2900      	cmp	r1, #0
    499c:	d04c      	beq.n	4a38 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    499e:	466e      	mov	r6, sp
    49a0:	b08a      	sub	sp, #40	; 0x28
    49a2:	e9d1 1200 	ldrd	r1, r2, [r1]
    49a6:	68a3      	ldr	r3, [r4, #8]
    49a8:	466d      	mov	r5, sp
    49aa:	4827      	ldr	r0, [pc, #156]	; (4a48 <z_arm_fatal_error+0xb8>)
    49ac:	46a8      	mov	r8, r5
    49ae:	f04f 0a05 	mov.w	sl, #5
    49b2:	e9c5 0105 	strd	r0, r1, [r5, #20]
    49b6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    49ba:	f848 af10 	str.w	sl, [r8, #16]!
    49be:	4823      	ldr	r0, [pc, #140]	; (4a4c <z_arm_fatal_error+0xbc>)
    49c0:	4642      	mov	r2, r8
    49c2:	2300      	movs	r3, #0
    49c4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    49c8:	f7fe f8a4 	bl	2b14 <z_impl_z_log_msg_static_create>
    49cc:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    49ce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    49d2:	6963      	ldr	r3, [r4, #20]
    49d4:	46ad      	mov	sp, r5
    49d6:	481e      	ldr	r0, [pc, #120]	; (4a50 <z_arm_fatal_error+0xc0>)
    49d8:	f8c5 a010 	str.w	sl, [r5, #16]
    49dc:	e9c5 0105 	strd	r0, r1, [r5, #20]
    49e0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    49e4:	4819      	ldr	r0, [pc, #100]	; (4a4c <z_arm_fatal_error+0xbc>)
    49e6:	2300      	movs	r3, #0
    49e8:	4642      	mov	r2, r8
    49ea:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    49ee:	f7fe f891 	bl	2b14 <z_impl_z_log_msg_static_create>
    49f2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    49f4:	b088      	sub	sp, #32
    49f6:	69e3      	ldr	r3, [r4, #28]
    49f8:	466d      	mov	r5, sp
    49fa:	4a16      	ldr	r2, [pc, #88]	; (4a54 <z_arm_fatal_error+0xc4>)
    49fc:	46a8      	mov	r8, r5
    49fe:	f04f 0a03 	mov.w	sl, #3
    4a02:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4a06:	f848 af10 	str.w	sl, [r8, #16]!
    4a0a:	4810      	ldr	r0, [pc, #64]	; (4a4c <z_arm_fatal_error+0xbc>)
    4a0c:	2300      	movs	r3, #0
    4a0e:	4642      	mov	r2, r8
    4a10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4a14:	f7fe f87e 	bl	2b14 <z_impl_z_log_msg_static_create>
    4a18:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4a1a:	69a3      	ldr	r3, [r4, #24]
    4a1c:	46ad      	mov	sp, r5
    4a1e:	4a0e      	ldr	r2, [pc, #56]	; (4a58 <z_arm_fatal_error+0xc8>)
    4a20:	f8c5 a010 	str.w	sl, [r5, #16]
    4a24:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4a28:	4808      	ldr	r0, [pc, #32]	; (4a4c <z_arm_fatal_error+0xbc>)
    4a2a:	2300      	movs	r3, #0
    4a2c:	4642      	mov	r2, r8
    4a2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4a32:	f7fe f86f 	bl	2b14 <z_impl_z_log_msg_static_create>
    4a36:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4a38:	4621      	mov	r1, r4
    4a3a:	4648      	mov	r0, r9
    4a3c:	f004 fd92 	bl	9564 <z_fatal_error>
}
    4a40:	46bd      	mov	sp, r7
    4a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a46:	bf00      	nop
    4a48:	0000dbdd 	.word	0x0000dbdd
    4a4c:	0000d290 	.word	0x0000d290
    4a50:	0000dc0c 	.word	0x0000dc0c
    4a54:	0000dc3b 	.word	0x0000dc3b
    4a58:	0000dc4a 	.word	0x0000dc4a

00004a5c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4a5c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4a5e:	2800      	cmp	r0, #0
    4a60:	db07      	blt.n	4a72 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a62:	4a04      	ldr	r2, [pc, #16]	; (4a74 <arch_irq_enable+0x18>)
    4a64:	0941      	lsrs	r1, r0, #5
    4a66:	2301      	movs	r3, #1
    4a68:	f000 001f 	and.w	r0, r0, #31
    4a6c:	4083      	lsls	r3, r0
    4a6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4a72:	4770      	bx	lr
    4a74:	e000e100 	.word	0xe000e100

00004a78 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4a78:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4a7a:	2800      	cmp	r0, #0
    4a7c:	db0c      	blt.n	4a98 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a7e:	0943      	lsrs	r3, r0, #5
    4a80:	4906      	ldr	r1, [pc, #24]	; (4a9c <arch_irq_disable+0x24>)
    4a82:	f000 001f 	and.w	r0, r0, #31
    4a86:	3320      	adds	r3, #32
    4a88:	2201      	movs	r2, #1
    4a8a:	4082      	lsls	r2, r0
    4a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4a90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a94:	f3bf 8f6f 	isb	sy
}
    4a98:	4770      	bx	lr
    4a9a:	bf00      	nop
    4a9c:	e000e100 	.word	0xe000e100

00004aa0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4aa0:	4b05      	ldr	r3, [pc, #20]	; (4ab8 <arch_irq_is_enabled+0x18>)
    4aa2:	0942      	lsrs	r2, r0, #5
    4aa4:	f000 001f 	and.w	r0, r0, #31
    4aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4aac:	2301      	movs	r3, #1
    4aae:	fa03 f000 	lsl.w	r0, r3, r0
}
    4ab2:	4010      	ands	r0, r2
    4ab4:	4770      	bx	lr
    4ab6:	bf00      	nop
    4ab8:	e000e100 	.word	0xe000e100

00004abc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4abc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4abe:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ac0:	bfa8      	it	ge
    4ac2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4ac6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4aca:	bfb8      	it	lt
    4acc:	4b06      	ldrlt	r3, [pc, #24]	; (4ae8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ace:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4ad2:	bfac      	ite	ge
    4ad4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ad8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4adc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ade:	bfb4      	ite	lt
    4ae0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4ae2:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    4ae6:	4770      	bx	lr
    4ae8:	e000ed14 	.word	0xe000ed14

00004aec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4aec:	bf30      	wfi
    b z_SysNmiOnReset
    4aee:	f7ff bffd 	b.w	4aec <z_SysNmiOnReset>
    4af2:	bf00      	nop

00004af4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4af4:	4a0b      	ldr	r2, [pc, #44]	; (4b24 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4af6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4af8:	4b0b      	ldr	r3, [pc, #44]	; (4b28 <z_arm_prep_c+0x34>)
    4afa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4afe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4b00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b04:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4b08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4b0c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4b14:	f004 fde2 	bl	96dc <z_bss_zero>
	z_data_copy();
    4b18:	f005 fda2 	bl	a660 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4b1c:	f000 fbd6 	bl	52cc <z_arm_interrupt_init>
	z_cstart();
    4b20:	f004 fe20 	bl	9764 <z_cstart>
    4b24:	00001000 	.word	0x00001000
    4b28:	e000ed00 	.word	0xe000ed00

00004b2c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4b2c:	4a09      	ldr	r2, [pc, #36]	; (4b54 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4b2e:	490a      	ldr	r1, [pc, #40]	; (4b58 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4b30:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4b32:	6809      	ldr	r1, [r1, #0]
    4b34:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4b36:	4909      	ldr	r1, [pc, #36]	; (4b5c <arch_swap+0x30>)
	_current->arch.basepri = key;
    4b38:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4b3a:	684b      	ldr	r3, [r1, #4]
    4b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4b40:	604b      	str	r3, [r1, #4]
    4b42:	2300      	movs	r3, #0
    4b44:	f383 8811 	msr	BASEPRI, r3
    4b48:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4b4c:	6893      	ldr	r3, [r2, #8]
}
    4b4e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4b50:	4770      	bx	lr
    4b52:	bf00      	nop
    4b54:	20001f0c 	.word	0x20001f0c
    4b58:	0000d5a0 	.word	0x0000d5a0
    4b5c:	e000ed00 	.word	0xe000ed00

00004b60 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4b60:	4912      	ldr	r1, [pc, #72]	; (4bac <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4b62:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4b64:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4b68:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4b6a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4b6e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4b72:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4b74:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4b78:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4b7c:	4f0c      	ldr	r7, [pc, #48]	; (4bb0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4b7e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4b82:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    4b84:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4b86:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4b88:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4b8a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4b8c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4b8e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4b92:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4b94:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4b96:	f000 fc35 	bl	5404 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4b9a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4b9e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4ba2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4ba6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4baa:	4770      	bx	lr
    ldr r1, =_kernel
    4bac:	20001f0c 	.word	0x20001f0c
    ldr v4, =_SCS_ICSR
    4bb0:	e000ed04 	.word	0xe000ed04

00004bb4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4bb4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4bb8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4bba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4bbe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4bc2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4bc4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4bc8:	2902      	cmp	r1, #2
    beq _oops
    4bca:	d0ff      	beq.n	4bcc <_oops>

00004bcc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4bcc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4bce:	f007 fa8d 	bl	c0ec <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4bd2:	bd01      	pop	{r0, pc}

00004bd4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4bd4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4bd8:	9b00      	ldr	r3, [sp, #0]
    4bda:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4bde:	490a      	ldr	r1, [pc, #40]	; (4c08 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4be0:	9b01      	ldr	r3, [sp, #4]
    4be2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4be6:	9b02      	ldr	r3, [sp, #8]
    4be8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4bec:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4bf4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4bf8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4bfc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4bfe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4c00:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4c02:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4c04:	4770      	bx	lr
    4c06:	bf00      	nop
    4c08:	0000afe7 	.word	0x0000afe7

00004c0c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4c0c:	4a09      	ldr	r2, [pc, #36]	; (4c34 <z_check_thread_stack_fail+0x28>)
{
    4c0e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4c10:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4c12:	b170      	cbz	r0, 4c32 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4c14:	f113 0f16 	cmn.w	r3, #22
    4c18:	6e40      	ldr	r0, [r0, #100]	; 0x64
    4c1a:	d005      	beq.n	4c28 <z_check_thread_stack_fail+0x1c>
    4c1c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4c20:	429a      	cmp	r2, r3
    4c22:	d805      	bhi.n	4c30 <z_check_thread_stack_fail+0x24>
    4c24:	4283      	cmp	r3, r0
    4c26:	d203      	bcs.n	4c30 <z_check_thread_stack_fail+0x24>
		return 0;
    4c28:	4281      	cmp	r1, r0
    4c2a:	bf28      	it	cs
    4c2c:	2000      	movcs	r0, #0
    4c2e:	4770      	bx	lr
    4c30:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    4c32:	4770      	bx	lr
    4c34:	20001f0c 	.word	0x20001f0c

00004c38 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4c38:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4c3a:	4b09      	ldr	r3, [pc, #36]	; (4c60 <arch_switch_to_main_thread+0x28>)
{
    4c3c:	460d      	mov	r5, r1
    4c3e:	4614      	mov	r4, r2
	_current = main_thread;
    4c40:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4c42:	f000 fbdf 	bl	5404 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4c46:	4620      	mov	r0, r4
    4c48:	f385 8809 	msr	PSP, r5
    4c4c:	2100      	movs	r1, #0
    4c4e:	b663      	cpsie	if
    4c50:	f381 8811 	msr	BASEPRI, r1
    4c54:	f3bf 8f6f 	isb	sy
    4c58:	2200      	movs	r2, #0
    4c5a:	2300      	movs	r3, #0
    4c5c:	f006 f9c3 	bl	afe6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4c60:	20001f0c 	.word	0x20001f0c

00004c64 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4c64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4c66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4c68:	4a0b      	ldr	r2, [pc, #44]	; (4c98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4c6a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    4c6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4c6e:	bf1e      	ittt	ne
	movne	r1, #0
    4c70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4c72:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4c74:	f007 fe46 	blne	c904 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4c78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4c7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4c7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4c82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4c86:	4905      	ldr	r1, [pc, #20]	; (4c9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4c88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4c8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4c8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4c8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4c92:	4903      	ldr	r1, [pc, #12]	; (4ca0 <_isr_wrapper+0x3c>)
	bx r1
    4c94:	4708      	bx	r1
    4c96:	0000      	.short	0x0000
	ldr r2, =_kernel
    4c98:	20001f0c 	.word	0x20001f0c
	ldr r1, =_sw_isr_table
    4c9c:	0000d070 	.word	0x0000d070
	ldr r1, =z_arm_int_exit
    4ca0:	00004ca5 	.word	0x00004ca5

00004ca4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4ca4:	4b04      	ldr	r3, [pc, #16]	; (4cb8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4ca6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4ca8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    4caa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4cac:	d003      	beq.n	4cb6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4cae:	4903      	ldr	r1, [pc, #12]	; (4cbc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4cb4:	600a      	str	r2, [r1, #0]

00004cb6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4cb6:	4770      	bx	lr
	ldr r3, =_kernel
    4cb8:	20001f0c 	.word	0x20001f0c
	ldr r1, =_SCS_ICSR
    4cbc:	e000ed04 	.word	0xe000ed04

00004cc0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc4:	b086      	sub	sp, #24
    4cc6:	4606      	mov	r6, r0
    4cc8:	af00      	add	r7, sp, #0
    4cca:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4ccc:	4b47      	ldr	r3, [pc, #284]	; (4dec <bus_fault.constprop.0+0x12c>)
    4cce:	617b      	str	r3, [r7, #20]
    4cd0:	2402      	movs	r4, #2
    4cd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cd6:	4846      	ldr	r0, [pc, #280]	; (4df0 <bus_fault.constprop.0+0x130>)
    4cd8:	613c      	str	r4, [r7, #16]
    4cda:	f107 0210 	add.w	r2, r7, #16
    4cde:	f007 fa14 	bl	c10a <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4ce2:	4b44      	ldr	r3, [pc, #272]	; (4df4 <bus_fault.constprop.0+0x134>)
    4ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce6:	04d9      	lsls	r1, r3, #19
    4ce8:	d56d      	bpl.n	4dc6 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    4cea:	4b43      	ldr	r3, [pc, #268]	; (4df8 <bus_fault.constprop.0+0x138>)
    4cec:	4840      	ldr	r0, [pc, #256]	; (4df0 <bus_fault.constprop.0+0x130>)
    4cee:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4cf2:	f107 0210 	add.w	r2, r7, #16
    4cf6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cfa:	f007 fa06 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    4cfe:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4d00:	4b3c      	ldr	r3, [pc, #240]	; (4df4 <bus_fault.constprop.0+0x134>)
    4d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d04:	051a      	lsls	r2, r3, #20
    4d06:	d50b      	bpl.n	4d20 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    4d08:	4b3c      	ldr	r3, [pc, #240]	; (4dfc <bus_fault.constprop.0+0x13c>)
    4d0a:	617b      	str	r3, [r7, #20]
    4d0c:	2302      	movs	r3, #2
    4d0e:	4838      	ldr	r0, [pc, #224]	; (4df0 <bus_fault.constprop.0+0x130>)
    4d10:	613b      	str	r3, [r7, #16]
    4d12:	f107 0210 	add.w	r2, r7, #16
    4d16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d1a:	f007 f9f6 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    4d1e:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4d20:	4c34      	ldr	r4, [pc, #208]	; (4df4 <bus_fault.constprop.0+0x134>)
    4d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4d24:	059b      	lsls	r3, r3, #22
    4d26:	d523      	bpl.n	4d70 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    4d28:	46e8      	mov	r8, sp
    4d2a:	4b35      	ldr	r3, [pc, #212]	; (4e00 <bus_fault.constprop.0+0x140>)
    4d2c:	617b      	str	r3, [r7, #20]
    4d2e:	2302      	movs	r3, #2
    4d30:	482f      	ldr	r0, [pc, #188]	; (4df0 <bus_fault.constprop.0+0x130>)
    4d32:	613b      	str	r3, [r7, #16]
    4d34:	f107 0210 	add.w	r2, r7, #16
    4d38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d3c:	f007 f9e5 	bl	c10a <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4d42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4d44:	0410      	lsls	r0, r2, #16
    4d46:	d512      	bpl.n	4d6e <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4d48:	b088      	sub	sp, #32
    4d4a:	466a      	mov	r2, sp
    4d4c:	492d      	ldr	r1, [pc, #180]	; (4e04 <bus_fault.constprop.0+0x144>)
    4d4e:	4828      	ldr	r0, [pc, #160]	; (4df0 <bus_fault.constprop.0+0x130>)
    4d50:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4d54:	2303      	movs	r3, #3
    4d56:	f842 3f10 	str.w	r3, [r2, #16]!
    4d5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4d5e:	f007 f9d4 	bl	c10a <z_log_msg_static_create.constprop.0>
    4d62:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4d64:	b11e      	cbz	r6, 4d6e <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4d6c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    4d6e:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4d70:	4b20      	ldr	r3, [pc, #128]	; (4df4 <bus_fault.constprop.0+0x134>)
    4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d74:	0559      	lsls	r1, r3, #21
    4d76:	d50b      	bpl.n	4d90 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    4d78:	4b23      	ldr	r3, [pc, #140]	; (4e08 <bus_fault.constprop.0+0x148>)
    4d7a:	617b      	str	r3, [r7, #20]
    4d7c:	2302      	movs	r3, #2
    4d7e:	481c      	ldr	r0, [pc, #112]	; (4df0 <bus_fault.constprop.0+0x130>)
    4d80:	613b      	str	r3, [r7, #16]
    4d82:	f107 0210 	add.w	r2, r7, #16
    4d86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d8a:	f007 f9be 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    4d8e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4d90:	4b18      	ldr	r3, [pc, #96]	; (4df4 <bus_fault.constprop.0+0x134>)
    4d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d94:	05d2      	lsls	r2, r2, #23
    4d96:	d518      	bpl.n	4dca <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    4d98:	4b1c      	ldr	r3, [pc, #112]	; (4e0c <bus_fault.constprop.0+0x14c>)
    4d9a:	617b      	str	r3, [r7, #20]
    4d9c:	2302      	movs	r3, #2
    4d9e:	4814      	ldr	r0, [pc, #80]	; (4df0 <bus_fault.constprop.0+0x130>)
    4da0:	613b      	str	r3, [r7, #16]
    4da2:	f107 0210 	add.w	r2, r7, #16
    4da6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4daa:	f007 f9ae 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    4dae:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4db0:	4a10      	ldr	r2, [pc, #64]	; (4df4 <bus_fault.constprop.0+0x134>)
    4db2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4db4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4db8:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    4dba:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4dbc:	2300      	movs	r3, #0
    4dbe:	702b      	strb	r3, [r5, #0]
}
    4dc0:	46bd      	mov	sp, r7
    4dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    4dc6:	2016      	movs	r0, #22
    4dc8:	e79a      	b.n	4d00 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dcc:	049b      	lsls	r3, r3, #18
    4dce:	d5ef      	bpl.n	4db0 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4dd0:	4b0f      	ldr	r3, [pc, #60]	; (4e10 <bus_fault.constprop.0+0x150>)
    4dd2:	617b      	str	r3, [r7, #20]
    4dd4:	2302      	movs	r3, #2
    4dd6:	4806      	ldr	r0, [pc, #24]	; (4df0 <bus_fault.constprop.0+0x130>)
    4dd8:	613b      	str	r3, [r7, #16]
    4dda:	f107 0210 	add.w	r2, r7, #16
    4dde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4de2:	f007 f992 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    4de6:	201c      	movs	r0, #28
    4de8:	e7e2      	b.n	4db0 <bus_fault.constprop.0+0xf0>
    4dea:	bf00      	nop
    4dec:	0000dc78 	.word	0x0000dc78
    4df0:	0000d290 	.word	0x0000d290
    4df4:	e000ed00 	.word	0xe000ed00
    4df8:	0000dc8e 	.word	0x0000dc8e
    4dfc:	0000dc9f 	.word	0x0000dc9f
    4e00:	0000dcb2 	.word	0x0000dcb2
    4e04:	0000dccb 	.word	0x0000dccb
    4e08:	0000dce0 	.word	0x0000dce0
    4e0c:	0000dcfb 	.word	0x0000dcfb
    4e10:	0000dd13 	.word	0x0000dd13

00004e14 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4e14:	b510      	push	{r4, lr}
    4e16:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4e18:	4b36      	ldr	r3, [pc, #216]	; (4ef4 <usage_fault.constprop.0+0xe0>)
    4e1a:	4837      	ldr	r0, [pc, #220]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4e1c:	9305      	str	r3, [sp, #20]
    4e1e:	aa04      	add	r2, sp, #16
    4e20:	2402      	movs	r4, #2
    4e22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e26:	9404      	str	r4, [sp, #16]
    4e28:	f007 f96f 	bl	c10a <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4e2c:	4b33      	ldr	r3, [pc, #204]	; (4efc <usage_fault.constprop.0+0xe8>)
    4e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e30:	019a      	lsls	r2, r3, #6
    4e32:	d55d      	bpl.n	4ef0 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    4e34:	4b32      	ldr	r3, [pc, #200]	; (4f00 <usage_fault.constprop.0+0xec>)
    4e36:	4830      	ldr	r0, [pc, #192]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4e38:	aa04      	add	r2, sp, #16
    4e3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e3e:	e9cd 4304 	strd	r4, r3, [sp, #16]
    4e42:	f007 f962 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    4e46:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4e48:	4b2c      	ldr	r3, [pc, #176]	; (4efc <usage_fault.constprop.0+0xe8>)
    4e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e4c:	01db      	lsls	r3, r3, #7
    4e4e:	d50a      	bpl.n	4e66 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    4e50:	4b2c      	ldr	r3, [pc, #176]	; (4f04 <usage_fault.constprop.0+0xf0>)
    4e52:	4829      	ldr	r0, [pc, #164]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4e54:	9305      	str	r3, [sp, #20]
    4e56:	aa04      	add	r2, sp, #16
    4e58:	2302      	movs	r3, #2
    4e5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e5e:	9304      	str	r3, [sp, #16]
    4e60:	f007 f953 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    4e64:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4e66:	4b25      	ldr	r3, [pc, #148]	; (4efc <usage_fault.constprop.0+0xe8>)
    4e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e6a:	031c      	lsls	r4, r3, #12
    4e6c:	d50a      	bpl.n	4e84 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    4e6e:	4b26      	ldr	r3, [pc, #152]	; (4f08 <usage_fault.constprop.0+0xf4>)
    4e70:	4821      	ldr	r0, [pc, #132]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4e72:	9305      	str	r3, [sp, #20]
    4e74:	aa04      	add	r2, sp, #16
    4e76:	2302      	movs	r3, #2
    4e78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e7c:	9304      	str	r3, [sp, #16]
    4e7e:	f007 f944 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    4e82:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4e84:	4b1d      	ldr	r3, [pc, #116]	; (4efc <usage_fault.constprop.0+0xe8>)
    4e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e88:	0359      	lsls	r1, r3, #13
    4e8a:	d50a      	bpl.n	4ea2 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4e8c:	4b1f      	ldr	r3, [pc, #124]	; (4f0c <usage_fault.constprop.0+0xf8>)
    4e8e:	481a      	ldr	r0, [pc, #104]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4e90:	9305      	str	r3, [sp, #20]
    4e92:	aa04      	add	r2, sp, #16
    4e94:	2302      	movs	r3, #2
    4e96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e9a:	9304      	str	r3, [sp, #16]
    4e9c:	f007 f935 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    4ea0:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4ea2:	4b16      	ldr	r3, [pc, #88]	; (4efc <usage_fault.constprop.0+0xe8>)
    4ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ea6:	039a      	lsls	r2, r3, #14
    4ea8:	d50a      	bpl.n	4ec0 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4eaa:	4b19      	ldr	r3, [pc, #100]	; (4f10 <usage_fault.constprop.0+0xfc>)
    4eac:	4812      	ldr	r0, [pc, #72]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4eae:	9305      	str	r3, [sp, #20]
    4eb0:	aa04      	add	r2, sp, #16
    4eb2:	2302      	movs	r3, #2
    4eb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4eb8:	9304      	str	r3, [sp, #16]
    4eba:	f007 f926 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    4ebe:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4ec0:	4b0e      	ldr	r3, [pc, #56]	; (4efc <usage_fault.constprop.0+0xe8>)
    4ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ec4:	03db      	lsls	r3, r3, #15
    4ec6:	d50a      	bpl.n	4ede <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4ec8:	4b12      	ldr	r3, [pc, #72]	; (4f14 <usage_fault.constprop.0+0x100>)
    4eca:	480b      	ldr	r0, [pc, #44]	; (4ef8 <usage_fault.constprop.0+0xe4>)
    4ecc:	9305      	str	r3, [sp, #20]
    4ece:	aa04      	add	r2, sp, #16
    4ed0:	2302      	movs	r3, #2
    4ed2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ed6:	9304      	str	r3, [sp, #16]
    4ed8:	f007 f917 	bl	c10a <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    4edc:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4ede:	4a07      	ldr	r2, [pc, #28]	; (4efc <usage_fault.constprop.0+0xe8>)
    4ee0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ee2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4ee6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4eea:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4eec:	b006      	add	sp, #24
    4eee:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    4ef0:	201d      	movs	r0, #29
    4ef2:	e7a9      	b.n	4e48 <usage_fault.constprop.0+0x34>
    4ef4:	0000dd42 	.word	0x0000dd42
    4ef8:	0000d290 	.word	0x0000d290
    4efc:	e000ed00 	.word	0xe000ed00
    4f00:	0000dd5a 	.word	0x0000dd5a
    4f04:	0000dd6d 	.word	0x0000dd6d
    4f08:	0000dd87 	.word	0x0000dd87
    4f0c:	0000dda5 	.word	0x0000dda5
    4f10:	0000ddca 	.word	0x0000ddca
    4f14:	0000dde4 	.word	0x0000dde4

00004f18 <mem_manage_fault>:
{
    4f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f1c:	b086      	sub	sp, #24
    4f1e:	4681      	mov	r9, r0
    4f20:	af00      	add	r7, sp, #0
    4f22:	468a      	mov	sl, r1
    4f24:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4f26:	4b51      	ldr	r3, [pc, #324]	; (506c <mem_manage_fault+0x154>)
    4f28:	617b      	str	r3, [r7, #20]
    4f2a:	2402      	movs	r4, #2
    4f2c:	4850      	ldr	r0, [pc, #320]	; (5070 <mem_manage_fault+0x158>)
    4f2e:	613c      	str	r4, [r7, #16]
    4f30:	f107 0210 	add.w	r2, r7, #16
    4f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f38:	f007 f8e7 	bl	c10a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4f3c:	4b4d      	ldr	r3, [pc, #308]	; (5074 <mem_manage_fault+0x15c>)
    4f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f40:	06de      	lsls	r6, r3, #27
    4f42:	d545      	bpl.n	4fd0 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4f44:	4b4c      	ldr	r3, [pc, #304]	; (5078 <mem_manage_fault+0x160>)
    4f46:	484a      	ldr	r0, [pc, #296]	; (5070 <mem_manage_fault+0x158>)
    4f48:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4f4c:	f107 0210 	add.w	r2, r7, #16
    4f50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    4f54:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    4f56:	f007 f8d8 	bl	c10a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4f5a:	4b46      	ldr	r3, [pc, #280]	; (5074 <mem_manage_fault+0x15c>)
    4f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f5e:	071d      	lsls	r5, r3, #28
    4f60:	d50b      	bpl.n	4f7a <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    4f62:	4b46      	ldr	r3, [pc, #280]	; (507c <mem_manage_fault+0x164>)
    4f64:	617b      	str	r3, [r7, #20]
    4f66:	2302      	movs	r3, #2
    4f68:	4841      	ldr	r0, [pc, #260]	; (5070 <mem_manage_fault+0x158>)
    4f6a:	613b      	str	r3, [r7, #16]
    4f6c:	f107 0210 	add.w	r2, r7, #16
    4f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    4f74:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    4f76:	f007 f8c8 	bl	c10a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4f7a:	4d3e      	ldr	r5, [pc, #248]	; (5074 <mem_manage_fault+0x15c>)
    4f7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4f7e:	0798      	lsls	r0, r3, #30
    4f80:	d528      	bpl.n	4fd4 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    4f82:	466c      	mov	r4, sp
    4f84:	4b3e      	ldr	r3, [pc, #248]	; (5080 <mem_manage_fault+0x168>)
    4f86:	617b      	str	r3, [r7, #20]
    4f88:	2302      	movs	r3, #2
    4f8a:	613b      	str	r3, [r7, #16]
    4f8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f90:	4837      	ldr	r0, [pc, #220]	; (5070 <mem_manage_fault+0x158>)
    4f92:	f107 0210 	add.w	r2, r7, #16
    4f96:	f007 f8b8 	bl	c10a <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4f9a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4f9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4f9e:	0619      	lsls	r1, r3, #24
    4fa0:	d560      	bpl.n	5064 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4fa2:	b088      	sub	sp, #32
    4fa4:	466a      	mov	r2, sp
    4fa6:	4b37      	ldr	r3, [pc, #220]	; (5084 <mem_manage_fault+0x16c>)
    4fa8:	4831      	ldr	r0, [pc, #196]	; (5070 <mem_manage_fault+0x158>)
    4faa:	e9c2 3605 	strd	r3, r6, [r2, #20]
    4fae:	2303      	movs	r3, #3
    4fb0:	f842 3f10 	str.w	r3, [r2, #16]!
    4fb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fb8:	f007 f8a7 	bl	c10a <z_log_msg_static_create.constprop.0>
    4fbc:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    4fbe:	f1ba 0f00 	cmp.w	sl, #0
    4fc2:	d003      	beq.n	4fcc <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4fc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4fca:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    4fcc:	2413      	movs	r4, #19
    4fce:	e003      	b.n	4fd8 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    4fd0:	2410      	movs	r4, #16
    4fd2:	e7c2      	b.n	4f5a <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    4fd4:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4fd8:	4b26      	ldr	r3, [pc, #152]	; (5074 <mem_manage_fault+0x15c>)
    4fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fdc:	07da      	lsls	r2, r3, #31
    4fde:	d50b      	bpl.n	4ff8 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    4fe0:	4b29      	ldr	r3, [pc, #164]	; (5088 <mem_manage_fault+0x170>)
    4fe2:	617b      	str	r3, [r7, #20]
    4fe4:	2302      	movs	r3, #2
    4fe6:	4822      	ldr	r0, [pc, #136]	; (5070 <mem_manage_fault+0x158>)
    4fe8:	613b      	str	r3, [r7, #16]
    4fea:	f107 0210 	add.w	r2, r7, #16
    4fee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    4ff2:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    4ff4:	f007 f889 	bl	c10a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4ff8:	4b1e      	ldr	r3, [pc, #120]	; (5074 <mem_manage_fault+0x15c>)
    4ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ffc:	069b      	lsls	r3, r3, #26
    4ffe:	d50b      	bpl.n	5018 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    5000:	4b22      	ldr	r3, [pc, #136]	; (508c <mem_manage_fault+0x174>)
    5002:	617b      	str	r3, [r7, #20]
    5004:	2302      	movs	r3, #2
    5006:	481a      	ldr	r0, [pc, #104]	; (5070 <mem_manage_fault+0x158>)
    5008:	613b      	str	r3, [r7, #16]
    500a:	f107 0210 	add.w	r2, r7, #16
    500e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    5012:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    5014:	f007 f879 	bl	c10a <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5018:	4b16      	ldr	r3, [pc, #88]	; (5074 <mem_manage_fault+0x15c>)
    501a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    501c:	06d5      	lsls	r5, r2, #27
    501e:	d402      	bmi.n	5026 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5022:	0790      	lsls	r0, r2, #30
    5024:	d50a      	bpl.n	503c <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5026:	685b      	ldr	r3, [r3, #4]
    5028:	0519      	lsls	r1, r3, #20
    502a:	d507      	bpl.n	503c <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    502c:	4649      	mov	r1, r9
    502e:	4630      	mov	r0, r6
    5030:	f7ff fdec 	bl	4c0c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5034:	b110      	cbz	r0, 503c <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5036:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    503a:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    503c:	4b0d      	ldr	r3, [pc, #52]	; (5074 <mem_manage_fault+0x15c>)
    503e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5040:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    5042:	bf42      	ittt	mi
    5044:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    5046:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    504a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    504c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    504e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5052:	629a      	str	r2, [r3, #40]	; 0x28
}
    5054:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    5056:	2300      	movs	r3, #0
}
    5058:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    505a:	f888 3000 	strb.w	r3, [r8]
}
    505e:	46bd      	mov	sp, r7
    5060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    5064:	f06f 0615 	mvn.w	r6, #21
    5068:	e7b0      	b.n	4fcc <mem_manage_fault+0xb4>
    506a:	bf00      	nop
    506c:	0000de0f 	.word	0x0000de0f
    5070:	0000d290 	.word	0x0000d290
    5074:	e000ed00 	.word	0xe000ed00
    5078:	0000de25 	.word	0x0000de25
    507c:	0000dc9f 	.word	0x0000dc9f
    5080:	0000de58 	.word	0x0000de58
    5084:	0000de70 	.word	0x0000de70
    5088:	0000de86 	.word	0x0000de86
    508c:	0000dd13 	.word	0x0000dd13

00005090 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5094:	4b77      	ldr	r3, [pc, #476]	; (5274 <z_arm_fault+0x1e4>)
{
    5096:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5098:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    509c:	af00      	add	r7, sp, #0
    509e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    50a0:	f3c8 0408 	ubfx	r4, r8, #0, #9
    50a4:	2600      	movs	r6, #0
    50a6:	f386 8811 	msr	BASEPRI, r6
    50aa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    50ae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    50b2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    50b6:	d10e      	bne.n	50d6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    50b8:	f002 030c 	and.w	r3, r2, #12
    50bc:	2b08      	cmp	r3, #8
    50be:	d119      	bne.n	50f4 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    50c0:	4b6d      	ldr	r3, [pc, #436]	; (5278 <z_arm_fault+0x1e8>)
    50c2:	61fb      	str	r3, [r7, #28]
    50c4:	2302      	movs	r3, #2
    50c6:	486d      	ldr	r0, [pc, #436]	; (527c <z_arm_fault+0x1ec>)
    50c8:	61bb      	str	r3, [r7, #24]
    50ca:	f107 0218 	add.w	r2, r7, #24
    50ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    50d2:	f007 f81a 	bl	c10a <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    50d6:	2600      	movs	r6, #0
		return NULL;
    50d8:	4635      	mov	r5, r6
	*recoverable = false;
    50da:	2300      	movs	r3, #0
    50dc:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    50de:	1ee3      	subs	r3, r4, #3
    50e0:	2b09      	cmp	r3, #9
    50e2:	f200 80a6 	bhi.w	5232 <z_arm_fault+0x1a2>
    50e6:	e8df f003 	tbb	[pc, r3]
    50ea:	990a      	.short	0x990a
    50ec:	a4a4959c 	.word	0xa4a4959c
    50f0:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    50f4:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    50f6:	bf4c      	ite	mi
    50f8:	460d      	movmi	r5, r1
			*nested_exc = true;
    50fa:	2601      	movpl	r6, #1
    50fc:	e7ed      	b.n	50da <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    50fe:	46e9      	mov	r9, sp
    5100:	4b5f      	ldr	r3, [pc, #380]	; (5280 <z_arm_fault+0x1f0>)
    5102:	61fb      	str	r3, [r7, #28]
    5104:	f04f 0802 	mov.w	r8, #2
    5108:	f107 0218 	add.w	r2, r7, #24
    510c:	485b      	ldr	r0, [pc, #364]	; (527c <z_arm_fault+0x1ec>)
    510e:	f8c7 8018 	str.w	r8, [r7, #24]
    5112:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5116:	f006 fff8 	bl	c10a <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    511a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    511c:	4c55      	ldr	r4, [pc, #340]	; (5274 <z_arm_fault+0x1e4>)
	*recoverable = false;
    511e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5120:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5122:	079a      	lsls	r2, r3, #30
    5124:	d50b      	bpl.n	513e <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    5126:	4b57      	ldr	r3, [pc, #348]	; (5284 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    5128:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    512c:	4853      	ldr	r0, [pc, #332]	; (527c <z_arm_fault+0x1ec>)
    512e:	f107 0218 	add.w	r2, r7, #24
    5132:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5136:	f006 ffe8 	bl	c10a <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    513a:	2400      	movs	r4, #0
    513c:	e041      	b.n	51c2 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    513e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5140:	2b00      	cmp	r3, #0
    5142:	da01      	bge.n	5148 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    5144:	4b50      	ldr	r3, [pc, #320]	; (5288 <z_arm_fault+0x1f8>)
    5146:	e7ef      	b.n	5128 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    514a:	005b      	lsls	r3, r3, #1
    514c:	d5f5      	bpl.n	513a <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    514e:	4b4f      	ldr	r3, [pc, #316]	; (528c <z_arm_fault+0x1fc>)
    5150:	484a      	ldr	r0, [pc, #296]	; (527c <z_arm_fault+0x1ec>)
    5152:	e9c7 8306 	strd	r8, r3, [r7, #24]
    5156:	f107 0218 	add.w	r2, r7, #24
    515a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    515e:	f006 ffd4 	bl	c10a <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    5162:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    5164:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    5166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    516a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    516c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5170:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5174:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    5176:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    517a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    517e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5184:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5188:	f64d 7302 	movw	r3, #57090	; 0xdf02
    518c:	429a      	cmp	r2, r3
    518e:	d008      	beq.n	51a2 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5192:	b2db      	uxtb	r3, r3
    5194:	b38b      	cbz	r3, 51fa <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    5196:	1dfa      	adds	r2, r7, #7
    5198:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    519a:	4628      	mov	r0, r5
    519c:	f7ff febc 	bl	4f18 <mem_manage_fault>
    51a0:	e03a      	b.n	5218 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    51a2:	b088      	sub	sp, #32
    51a4:	682b      	ldr	r3, [r5, #0]
    51a6:	466a      	mov	r2, sp
    51a8:	4939      	ldr	r1, [pc, #228]	; (5290 <z_arm_fault+0x200>)
    51aa:	4834      	ldr	r0, [pc, #208]	; (527c <z_arm_fault+0x1ec>)
    51ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
    51b0:	2303      	movs	r3, #3
    51b2:	f842 3f10 	str.w	r3, [r2, #16]!
    51b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    51ba:	f006 ffa6 	bl	c10a <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    51be:	682c      	ldr	r4, [r5, #0]
    51c0:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    51c2:	79fb      	ldrb	r3, [r7, #7]
    51c4:	b9ab      	cbnz	r3, 51f2 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    51c6:	2220      	movs	r2, #32
    51c8:	4629      	mov	r1, r5
    51ca:	f107 0008 	add.w	r0, r7, #8
    51ce:	f006 ffaf 	bl	c130 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    51d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51d4:	2e00      	cmp	r6, #0
    51d6:	d047      	beq.n	5268 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    51d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    51dc:	b922      	cbnz	r2, 51e8 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    51de:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    51e2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    51e6:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    51e8:	f107 0108 	add.w	r1, r7, #8
    51ec:	4620      	mov	r0, r4
    51ee:	f7ff fbcf 	bl	4990 <z_arm_fatal_error>
}
    51f2:	372c      	adds	r7, #44	; 0x2c
    51f4:	46bd      	mov	sp, r7
    51f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    51fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51fc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    5200:	d004      	beq.n	520c <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    5202:	1df9      	adds	r1, r7, #7
    5204:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5206:	f7ff fd5b 	bl	4cc0 <bus_fault.constprop.0>
    520a:	e005      	b.n	5218 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    520c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5212:	d392      	bcc.n	513a <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    5214:	f7ff fdfe 	bl	4e14 <usage_fault.constprop.0>
    5218:	4604      	mov	r4, r0
    521a:	e7d2      	b.n	51c2 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    521c:	1dfa      	adds	r2, r7, #7
    521e:	2100      	movs	r1, #0
    5220:	e7bb      	b.n	519a <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    5222:	1df9      	adds	r1, r7, #7
    5224:	2000      	movs	r0, #0
    5226:	e7ee      	b.n	5206 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    5228:	4b1a      	ldr	r3, [pc, #104]	; (5294 <z_arm_fault+0x204>)
    522a:	61fb      	str	r3, [r7, #28]
    522c:	2302      	movs	r3, #2
    522e:	61bb      	str	r3, [r7, #24]
    5230:	e77c      	b.n	512c <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    5232:	4a19      	ldr	r2, [pc, #100]	; (5298 <z_arm_fault+0x208>)
    5234:	4b19      	ldr	r3, [pc, #100]	; (529c <z_arm_fault+0x20c>)
    5236:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    523a:	46e8      	mov	r8, sp
    523c:	b08a      	sub	sp, #40	; 0x28
    523e:	bf18      	it	ne
    5240:	4613      	movne	r3, r2
    5242:	466a      	mov	r2, sp
    5244:	4916      	ldr	r1, [pc, #88]	; (52a0 <z_arm_fault+0x210>)
    5246:	480d      	ldr	r0, [pc, #52]	; (527c <z_arm_fault+0x1ec>)
    5248:	e9c2 1305 	strd	r1, r3, [r2, #20]
    524c:	f44f 7300 	mov.w	r3, #512	; 0x200
    5250:	8413      	strh	r3, [r2, #32]
    5252:	3c10      	subs	r4, #16
    5254:	4b13      	ldr	r3, [pc, #76]	; (52a4 <z_arm_fault+0x214>)
    5256:	61d4      	str	r4, [r2, #28]
    5258:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    525c:	f842 3f10 	str.w	r3, [r2, #16]!
    5260:	f006 ff53 	bl	c10a <z_log_msg_static_create.constprop.0>
    5264:	46c5      	mov	sp, r8
}
    5266:	e768      	b.n	513a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5268:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    526c:	f023 0301 	bic.w	r3, r3, #1
    5270:	e7b9      	b.n	51e6 <z_arm_fault+0x156>
    5272:	bf00      	nop
    5274:	e000ed00 	.word	0xe000ed00
    5278:	0000ded3 	.word	0x0000ded3
    527c:	0000d290 	.word	0x0000d290
    5280:	0000defe 	.word	0x0000defe
    5284:	0000df15 	.word	0x0000df15
    5288:	0000df36 	.word	0x0000df36
    528c:	0000df44 	.word	0x0000df44
    5290:	0000df63 	.word	0x0000df63
    5294:	0000df7f 	.word	0x0000df7f
    5298:	0000deba 	.word	0x0000deba
    529c:	0000dea5 	.word	0x0000dea5
    52a0:	0000dfa3 	.word	0x0000dfa3
    52a4:	01000004 	.word	0x01000004

000052a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    52a8:	4a02      	ldr	r2, [pc, #8]	; (52b4 <z_arm_fault_init+0xc>)
    52aa:	6953      	ldr	r3, [r2, #20]
    52ac:	f043 0310 	orr.w	r3, r3, #16
    52b0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    52b2:	4770      	bx	lr
    52b4:	e000ed00 	.word	0xe000ed00

000052b8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    52b8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    52bc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    52c0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    52c2:	4672      	mov	r2, lr
	bl z_arm_fault
    52c4:	f7ff fee4 	bl	5090 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    52c8:	bd01      	pop	{r0, pc}
    52ca:	bf00      	nop

000052cc <z_arm_interrupt_init>:
    52cc:	4804      	ldr	r0, [pc, #16]	; (52e0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    52ce:	2300      	movs	r3, #0
    52d0:	2120      	movs	r1, #32
    52d2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    52d4:	3301      	adds	r3, #1
    52d6:	2b30      	cmp	r3, #48	; 0x30
    52d8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    52dc:	d1f9      	bne.n	52d2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    52de:	4770      	bx	lr
    52e0:	e000e100 	.word	0xe000e100

000052e4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    52e4:	2000      	movs	r0, #0
    msr CONTROL, r0
    52e6:	f380 8814 	msr	CONTROL, r0
    isb
    52ea:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    52ee:	f7fd f979 	bl	25e4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    52f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    52f4:	490d      	ldr	r1, [pc, #52]	; (532c <__start+0x48>)
    str r0, [r1]
    52f6:	6008      	str	r0, [r1, #0]
    dsb
    52f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    52fc:	480c      	ldr	r0, [pc, #48]	; (5330 <__start+0x4c>)
    msr msp, r0
    52fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5302:	f000 f82b 	bl	535c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5306:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5308:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    530c:	4809      	ldr	r0, [pc, #36]	; (5334 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    530e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    5312:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5314:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5318:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    531c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    531e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5320:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5324:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5328:	f7ff fbe4 	bl	4af4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    532c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5330:	20003b00 	.word	0x20003b00
    ldr r0, =z_interrupt_stacks
    5334:	20002d40 	.word	0x20002d40

00005338 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5338:	4907      	ldr	r1, [pc, #28]	; (5358 <z_arm_clear_arm_mpu_config+0x20>)
    533a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    533e:	2300      	movs	r3, #0
	int num_regions =
    5340:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    5344:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    5346:	4293      	cmp	r3, r2
    5348:	db00      	blt.n	534c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    534a:	4770      	bx	lr
  MPU->RNR = rnr;
    534c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    5350:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    5354:	3301      	adds	r3, #1
    5356:	e7f6      	b.n	5346 <z_arm_clear_arm_mpu_config+0xe>
    5358:	e000ed00 	.word	0xe000ed00

0000535c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    535c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    535e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5360:	2300      	movs	r3, #0
    5362:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5366:	f7ff ffe7 	bl	5338 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    536a:	4b14      	ldr	r3, [pc, #80]	; (53bc <z_arm_init_arch_hw_at_boot+0x60>)
    536c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    5374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    5378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    537c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    5380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5388:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    538c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5390:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5394:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    5398:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    539c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    53a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    53a4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    53a8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    53ac:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    53b0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    53b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    53b6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    53ba:	bd08      	pop	{r3, pc}
    53bc:	e000e100 	.word	0xe000e100

000053c0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    53c0:	4b08      	ldr	r3, [pc, #32]	; (53e4 <z_impl_k_thread_abort+0x24>)
    53c2:	689b      	ldr	r3, [r3, #8]
    53c4:	4283      	cmp	r3, r0
    53c6:	d10b      	bne.n	53e0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    53c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    53cc:	b143      	cbz	r3, 53e0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    53ce:	4b06      	ldr	r3, [pc, #24]	; (53e8 <z_impl_k_thread_abort+0x28>)
    53d0:	685a      	ldr	r2, [r3, #4]
    53d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    53d6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    53d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    53da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    53de:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    53e0:	f005 b8cc 	b.w	a57c <z_thread_abort>
    53e4:	20001f0c 	.word	0x20001f0c
    53e8:	e000ed00 	.word	0xe000ed00

000053ec <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    53ec:	4b02      	ldr	r3, [pc, #8]	; (53f8 <z_arm_configure_static_mpu_regions+0xc>)
    53ee:	4a03      	ldr	r2, [pc, #12]	; (53fc <z_arm_configure_static_mpu_regions+0x10>)
    53f0:	4803      	ldr	r0, [pc, #12]	; (5400 <z_arm_configure_static_mpu_regions+0x14>)
    53f2:	2101      	movs	r1, #1
    53f4:	f000 b892 	b.w	551c <arm_core_mpu_configure_static_mpu_regions>
    53f8:	20040000 	.word	0x20040000
    53fc:	20000000 	.word	0x20000000
    5400:	0000d400 	.word	0x0000d400

00005404 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5404:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5406:	4b05      	ldr	r3, [pc, #20]	; (541c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    5408:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    540a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    540c:	4a04      	ldr	r2, [pc, #16]	; (5420 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    540e:	2140      	movs	r1, #64	; 0x40
    5410:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5414:	4618      	mov	r0, r3
    5416:	2101      	movs	r1, #1
    5418:	f000 b88a 	b.w	5530 <arm_core_mpu_configure_dynamic_mpu_regions>
    541c:	2000132c 	.word	0x2000132c
    5420:	150b0000 	.word	0x150b0000

00005424 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5428:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 54e0 <mpu_configure_regions+0xbc>
    542c:	469c      	mov	ip, r3
    542e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    5430:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    5432:	2300      	movs	r3, #0
    5434:	428b      	cmp	r3, r1
    5436:	da1a      	bge.n	546e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    5438:	6844      	ldr	r4, [r0, #4]
    543a:	2c00      	cmp	r4, #0
    543c:	d04d      	beq.n	54da <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    543e:	f1bc 0f00 	cmp.w	ip, #0
    5442:	d01d      	beq.n	5480 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5444:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    5446:	4234      	tst	r4, r6
    5448:	d015      	beq.n	5476 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    544a:	466c      	mov	r4, sp
    544c:	b088      	sub	sp, #32
    544e:	466a      	mov	r2, sp
    5450:	4924      	ldr	r1, [pc, #144]	; (54e4 <mpu_configure_regions+0xc0>)
    5452:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5456:	2303      	movs	r3, #3
    5458:	f842 3f10 	str.w	r3, [r2, #16]!
    545c:	4822      	ldr	r0, [pc, #136]	; (54e8 <mpu_configure_regions+0xc4>)
    545e:	2300      	movs	r3, #0
    5460:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5464:	f7fd fb56 	bl	2b14 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    5468:	f06f 0515 	mvn.w	r5, #21
    546c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    546e:	4628      	mov	r0, r5
    5470:	46bd      	mov	sp, r7
    5472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    5476:	2c1f      	cmp	r4, #31
    5478:	d9e7      	bls.n	544a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    547a:	6802      	ldr	r2, [r0, #0]
		&&
    547c:	4216      	tst	r6, r2
    547e:	d1e4      	bne.n	544a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    5480:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    5482:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5484:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5486:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    548a:	d914      	bls.n	54b6 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    548c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    5490:	d813      	bhi.n	54ba <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    5492:	3c01      	subs	r4, #1
    5494:	fab4 f484 	clz	r4, r4
    5498:	f1c4 041f 	rsb	r4, r4, #31
    549c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    549e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    54a2:	ea46 0604 	orr.w	r6, r6, r4
    54a6:	d90a      	bls.n	54be <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    54a8:	466c      	mov	r4, sp
    54aa:	b088      	sub	sp, #32
    54ac:	466a      	mov	r2, sp
    54ae:	4b0f      	ldr	r3, [pc, #60]	; (54ec <mpu_configure_regions+0xc8>)
    54b0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    54b4:	e7cf      	b.n	5456 <mpu_configure_regions+0x32>
		return REGION_32B;
    54b6:	2408      	movs	r4, #8
    54b8:	e7f1      	b.n	549e <mpu_configure_regions+0x7a>
		return REGION_4G;
    54ba:	243e      	movs	r4, #62	; 0x3e
    54bc:	e7ef      	b.n	549e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54be:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    54c2:	432a      	orrs	r2, r5
    54c4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54c8:	f046 0601 	orr.w	r6, r6, #1
    54cc:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    54d0:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    54d4:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    54d6:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    54da:	3301      	adds	r3, #1
    54dc:	300c      	adds	r0, #12
    54de:	e7a9      	b.n	5434 <mpu_configure_regions+0x10>
    54e0:	e000ed00 	.word	0xe000ed00
    54e4:	0000dfba 	.word	0x0000dfba
    54e8:	0000d288 	.word	0x0000d288
    54ec:	0000dfdd 	.word	0x0000dfdd

000054f0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    54f0:	4b04      	ldr	r3, [pc, #16]	; (5504 <arm_core_mpu_enable+0x14>)
    54f2:	2205      	movs	r2, #5
    54f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    54f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    54fc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5500:	4770      	bx	lr
    5502:	bf00      	nop
    5504:	e000ed00 	.word	0xe000ed00

00005508 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5508:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    550c:	4b02      	ldr	r3, [pc, #8]	; (5518 <arm_core_mpu_disable+0x10>)
    550e:	2200      	movs	r2, #0
    5510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5514:	4770      	bx	lr
    5516:	bf00      	nop
    5518:	e000ed00 	.word	0xe000ed00

0000551c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    551c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    551e:	4c03      	ldr	r4, [pc, #12]	; (552c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5520:	2301      	movs	r3, #1
    5522:	7822      	ldrb	r2, [r4, #0]
    5524:	f7ff ff7e 	bl	5424 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5528:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    552a:	bd10      	pop	{r4, pc}
    552c:	20002138 	.word	0x20002138

00005530 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    5530:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5532:	4a09      	ldr	r2, [pc, #36]	; (5558 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5534:	2300      	movs	r3, #0
    5536:	7812      	ldrb	r2, [r2, #0]
    5538:	f7ff ff74 	bl	5424 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    553c:	f110 0f16 	cmn.w	r0, #22
    5540:	d003      	beq.n	554a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    5542:	4b06      	ldr	r3, [pc, #24]	; (555c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    5544:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5546:	2807      	cmp	r0, #7
    5548:	dd00      	ble.n	554c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    554a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    554c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    5550:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5554:	3001      	adds	r0, #1
    5556:	e7f6      	b.n	5546 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5558:	20002138 	.word	0x20002138
    555c:	e000ed00 	.word	0xe000ed00

00005560 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5560:	4914      	ldr	r1, [pc, #80]	; (55b4 <z_arm_mpu_init+0x54>)
    5562:	6808      	ldr	r0, [r1, #0]
    5564:	2808      	cmp	r0, #8
{
    5566:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5568:	d821      	bhi.n	55ae <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    556a:	f7ff ffcd 	bl	5508 <arm_core_mpu_disable>
    556e:	4c12      	ldr	r4, [pc, #72]	; (55b8 <z_arm_mpu_init+0x58>)
    5570:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5572:	2200      	movs	r2, #0
    5574:	4290      	cmp	r0, r2
    5576:	f101 010c 	add.w	r1, r1, #12
    557a:	d105      	bne.n	5588 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    557c:	4b0f      	ldr	r3, [pc, #60]	; (55bc <z_arm_mpu_init+0x5c>)
    557e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5580:	f7ff ffb6 	bl	54f0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5584:	2000      	movs	r0, #0
}
    5586:	bd10      	pop	{r4, pc}
    5588:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    558c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5590:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5594:	4313      	orrs	r3, r2
    5596:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    559a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    559e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    55a2:	f043 0301 	orr.w	r3, r3, #1
    55a6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    55aa:	3201      	adds	r2, #1
    55ac:	e7e2      	b.n	5574 <z_arm_mpu_init+0x14>
		return -1;
    55ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55b2:	e7e8      	b.n	5586 <z_arm_mpu_init+0x26>
    55b4:	0000d40c 	.word	0x0000d40c
    55b8:	e000ed00 	.word	0xe000ed00
    55bc:	20002138 	.word	0x20002138

000055c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    55c0:	4b01      	ldr	r3, [pc, #4]	; (55c8 <__stdout_hook_install+0x8>)
    55c2:	6018      	str	r0, [r3, #0]
}
    55c4:	4770      	bx	lr
    55c6:	bf00      	nop
    55c8:	20000134 	.word	0x20000134

000055cc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    55cc:	f04f 0320 	mov.w	r3, #32
    55d0:	f3ef 8211 	mrs	r2, BASEPRI
    55d4:	f383 8812 	msr	BASEPRI_MAX, r3
    55d8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    55dc:	4906      	ldr	r1, [pc, #24]	; (55f8 <nordicsemi_nrf52_init+0x2c>)
    55de:	2301      	movs	r3, #1
    55e0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    55e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    55e8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    55ec:	f382 8811 	msr	BASEPRI, r2
    55f0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    55f4:	2000      	movs	r0, #0
    55f6:	4770      	bx	lr
    55f8:	4001e000 	.word	0x4001e000

000055fc <sys_arch_reboot>:
    *p_gpregret = val;
    55fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5600:	b2c0      	uxtb	r0, r0
    5602:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5606:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    560a:	4905      	ldr	r1, [pc, #20]	; (5620 <sys_arch_reboot+0x24>)
    560c:	4b05      	ldr	r3, [pc, #20]	; (5624 <sys_arch_reboot+0x28>)
    560e:	68ca      	ldr	r2, [r1, #12]
    5610:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5614:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5616:	60cb      	str	r3, [r1, #12]
    5618:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    561c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    561e:	e7fd      	b.n	561c <sys_arch_reboot+0x20>
    5620:	e000ed00 	.word	0xe000ed00
    5624:	05fa0004 	.word	0x05fa0004

00005628 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5628:	b120      	cbz	r0, 5634 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    562a:	4b03      	ldr	r3, [pc, #12]	; (5638 <arch_busy_wait+0x10>)
    562c:	0180      	lsls	r0, r0, #6
    562e:	f043 0301 	orr.w	r3, r3, #1
    5632:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5634:	4770      	bx	lr
    5636:	bf00      	nop
    5638:	0000d300 	.word	0x0000d300

0000563c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    563c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    563e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5642:	d512      	bpl.n	566a <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5644:	2b08      	cmp	r3, #8
    5646:	d105      	bne.n	5654 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5648:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    564a:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    564e:	d506      	bpl.n	565e <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5650:	480e      	ldr	r0, [pc, #56]	; (568c <endpoint_ctx+0x50>)
    5652:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    5654:	f010 0f78 	tst.w	r0, #120	; 0x78
    5658:	d112      	bne.n	5680 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    565a:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    565e:	204c      	movs	r0, #76	; 0x4c
    5660:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5664:	4b0a      	ldr	r3, [pc, #40]	; (5690 <endpoint_ctx+0x54>)
    5666:	4418      	add	r0, r3
    5668:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    566a:	2b08      	cmp	r3, #8
    566c:	d105      	bne.n	567a <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    566e:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5670:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5674:	d506      	bpl.n	5684 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5676:	4807      	ldr	r0, [pc, #28]	; (5694 <endpoint_ctx+0x58>)
    5678:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    567a:	f010 0f78 	tst.w	r0, #120	; 0x78
    567e:	d0f6      	beq.n	566e <endpoint_ctx+0x32>
		return NULL;
    5680:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    5682:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5684:	4804      	ldr	r0, [pc, #16]	; (5698 <endpoint_ctx+0x5c>)
    5686:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    568a:	4770      	bx	lr
    568c:	20001484 	.word	0x20001484
    5690:	20001338 	.word	0x20001338
    5694:	200015a4 	.word	0x200015a4
    5698:	200014a4 	.word	0x200014a4

0000569c <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    569c:	4901      	ldr	r1, [pc, #4]	; (56a4 <usbd_work_schedule+0x8>)
    569e:	4802      	ldr	r0, [pc, #8]	; (56a8 <usbd_work_schedule+0xc>)
    56a0:	f007 ba19 	b.w	cad6 <k_work_submit_to_queue>
    56a4:	20001360 	.word	0x20001360
    56a8:	20000968 	.word	0x20000968

000056ac <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    56ac:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    56ae:	4801      	ldr	r0, [pc, #4]	; (56b4 <usbd_evt_put+0x8>)
    56b0:	f007 b9ac 	b.w	ca0c <k_queue_append>
    56b4:	20000320 	.word	0x20000320

000056b8 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    56b8:	4802      	ldr	r0, [pc, #8]	; (56c4 <usbd_evt_get+0xc>)
    56ba:	2200      	movs	r2, #0
    56bc:	2300      	movs	r3, #0
    56be:	f004 ba8d 	b.w	9bdc <z_impl_k_queue_get>
    56c2:	bf00      	nop
    56c4:	20000320 	.word	0x20000320

000056c8 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    56c8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    56ca:	4c05      	ldr	r4, [pc, #20]	; (56e0 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    56cc:	f7ff fff4 	bl	56b8 <usbd_evt_get>
		if (ev) {
    56d0:	b120      	cbz	r0, 56dc <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    56d2:	1d01      	adds	r1, r0, #4
    56d4:	4620      	mov	r0, r4
    56d6:	f007 f8df 	bl	c898 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    56da:	e7f7      	b.n	56cc <usbd_evt_flush+0x4>
}
    56dc:	bd10      	pop	{r4, pc}
    56de:	bf00      	nop
    56e0:	20000290 	.word	0x20000290

000056e4 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    56e4:	b510      	push	{r4, lr}
    56e6:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    56e8:	4818      	ldr	r0, [pc, #96]	; (574c <usbd_evt_alloc+0x68>)
    56ea:	2200      	movs	r2, #0
    56ec:	2300      	movs	r3, #0
    56ee:	a901      	add	r1, sp, #4
    56f0:	f004 f8ba 	bl	9868 <k_mem_slab_alloc>
    56f4:	b330      	cbz	r0, 5744 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    56f6:	4b16      	ldr	r3, [pc, #88]	; (5750 <usbd_evt_alloc+0x6c>)
    56f8:	4816      	ldr	r0, [pc, #88]	; (5754 <usbd_evt_alloc+0x70>)
    56fa:	9307      	str	r3, [sp, #28]
    56fc:	aa06      	add	r2, sp, #24
    56fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5702:	2402      	movs	r4, #2
    5704:	9406      	str	r4, [sp, #24]
    5706:	f006 fd4f 	bl	c1a8 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    570a:	f7ff ffdd 	bl	56c8 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    570e:	480f      	ldr	r0, [pc, #60]	; (574c <usbd_evt_alloc+0x68>)
    5710:	2200      	movs	r2, #0
    5712:	2300      	movs	r3, #0
    5714:	a901      	add	r1, sp, #4
    5716:	f004 f8a7 	bl	9868 <k_mem_slab_alloc>
    571a:	b150      	cbz	r0, 5732 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    571c:	4b0e      	ldr	r3, [pc, #56]	; (5758 <usbd_evt_alloc+0x74>)
    571e:	480d      	ldr	r0, [pc, #52]	; (5754 <usbd_evt_alloc+0x70>)
    5720:	aa06      	add	r2, sp, #24
    5722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5726:	e9cd 4306 	strd	r4, r3, [sp, #24]
    572a:	f006 fd3d 	bl	c1a8 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    572e:	2000      	movs	r0, #0
    5730:	e00a      	b.n	5748 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    5732:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    5734:	2304      	movs	r3, #4
		ev->block = block;
    5736:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5738:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    573a:	f7ff ffb7 	bl	56ac <usbd_evt_put>
		usbd_work_schedule();
    573e:	f7ff ffad 	bl	569c <usbd_work_schedule>

		return NULL;
    5742:	e7f4      	b.n	572e <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    5744:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    5746:	6040      	str	r0, [r0, #4]

	return ev;
}
    5748:	b008      	add	sp, #32
    574a:	bd10      	pop	{r4, pc}
    574c:	20000290 	.word	0x20000290
    5750:	0000e016 	.word	0x0000e016
    5754:	0000d2c8 	.word	0x0000d2c8
    5758:	0000e034 	.word	0x0000e034

0000575c <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    575c:	b598      	push	{r3, r4, r7, lr}
    575e:	2802      	cmp	r0, #2
    5760:	af00      	add	r7, sp, #0
    5762:	d811      	bhi.n	5788 <usb_dc_power_event_handler+0x2c>
    5764:	4b10      	ldr	r3, [pc, #64]	; (57a8 <usb_dc_power_event_handler+0x4c>)
    5766:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    5768:	f7ff ffbc 	bl	56e4 <usbd_evt_alloc>
	if (!ev) {
    576c:	b150      	cbz	r0, 5784 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    576e:	2200      	movs	r2, #0
    5770:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    5772:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    5774:	f7ff ff9a 	bl	56ac <usbd_evt_put>
	if (usbd_ctx.attached) {
    5778:	4b0c      	ldr	r3, [pc, #48]	; (57ac <usb_dc_power_event_handler+0x50>)
    577a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    577e:	b10b      	cbz	r3, 5784 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    5780:	f7ff ff8c 	bl	569c <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    5784:	46bd      	mov	sp, r7
    5786:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    5788:	466c      	mov	r4, sp
    578a:	b088      	sub	sp, #32
    578c:	466a      	mov	r2, sp
    578e:	4b08      	ldr	r3, [pc, #32]	; (57b0 <usb_dc_power_event_handler+0x54>)
	switch (event) {
    5790:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    5794:	2303      	movs	r3, #3
    5796:	f842 3f10 	str.w	r3, [r2, #16]!
    579a:	4806      	ldr	r0, [pc, #24]	; (57b4 <usb_dc_power_event_handler+0x58>)
    579c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    57a0:	f006 fd02 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    57a4:	46a5      	mov	sp, r4
    57a6:	e7ed      	b.n	5784 <usb_dc_power_event_handler+0x28>
    57a8:	0000e210 	.word	0x0000e210
    57ac:	20001338 	.word	0x20001338
    57b0:	0000e050 	.word	0x0000e050
    57b4:	0000d2c8 	.word	0x0000d2c8

000057b8 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    57b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    57bc:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    57c0:	4606      	mov	r6, r0
    57c2:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    57c4:	4640      	mov	r0, r8
    57c6:	f7ff ff39 	bl	563c <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    57ca:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    57ce:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    57d0:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    57d2:	d025      	beq.n	5820 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    57d4:	b19c      	cbz	r4, 57fe <usbd_event_transfer_data+0x46>
    57d6:	2c03      	cmp	r4, #3
    57d8:	d01f      	beq.n	581a <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    57da:	466d      	mov	r5, sp
    57dc:	b088      	sub	sp, #32
    57de:	466a      	mov	r2, sp
    57e0:	4b2a      	ldr	r3, [pc, #168]	; (588c <usbd_event_transfer_data+0xd4>)
    57e2:	f8c2 801c 	str.w	r8, [r2, #28]
    57e6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    57ea:	2304      	movs	r3, #4
    57ec:	f842 3f10 	str.w	r3, [r2, #16]!
    57f0:	4827      	ldr	r0, [pc, #156]	; (5890 <usbd_event_transfer_data+0xd8>)
    57f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    57f6:	f006 fcd7 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    57fa:	46ad      	mov	sp, r5
    57fc:	e00d      	b.n	581a <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    57fe:	f7ff ff71 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    5802:	4603      	mov	r3, r0
    5804:	b148      	cbz	r0, 581a <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    5806:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5808:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    580a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    580c:	2203      	movs	r2, #3
    580e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5810:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    5812:	f7ff ff4b 	bl	56ac <usbd_evt_put>
			usbd_work_schedule();
    5816:	f7ff ff41 	bl	569c <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    581a:	46bd      	mov	sp, r7
    581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    5820:	b154      	cbz	r4, 5838 <usbd_event_transfer_data+0x80>
    5822:	2c01      	cmp	r4, #1
    5824:	d1d9      	bne.n	57da <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    5826:	f7ff ff5d 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    582a:	4603      	mov	r3, r0
    582c:	2800      	cmp	r0, #0
    582e:	d0f4      	beq.n	581a <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    5830:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5832:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5834:	7304      	strb	r4, [r0, #12]
    5836:	e7eb      	b.n	5810 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    5838:	f7ff ff54 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    583c:	2800      	cmp	r0, #0
    583e:	d0ec      	beq.n	581a <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    5840:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5842:	4b14      	ldr	r3, [pc, #80]	; (5894 <usbd_event_transfer_data+0xdc>)
    5844:	f012 0f80 	tst.w	r2, #128	; 0x80
    5848:	f002 0108 	and.w	r1, r2, #8
    584c:	d011      	beq.n	5872 <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    584e:	b141      	cbz	r1, 5862 <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    5850:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5854:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    5856:	2301      	movs	r3, #1
    5858:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    585a:	2302      	movs	r3, #2
    585c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    585e:	6085      	str	r5, [r0, #8]
    5860:	e7d7      	b.n	5812 <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    5862:	f002 020f 	and.w	r2, r2, #15
    5866:	2114      	movs	r1, #20
    5868:	fb01 3302 	mla	r3, r1, r2, r3
    586c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5870:	e7f0      	b.n	5854 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5872:	b111      	cbz	r1, 587a <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5874:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    5878:	e7ec      	b.n	5854 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    587a:	f002 020f 	and.w	r2, r2, #15
    587e:	2114      	movs	r1, #20
    5880:	fb01 3302 	mla	r3, r1, r2, r3
    5884:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5888:	e7e4      	b.n	5854 <usbd_event_transfer_data+0x9c>
    588a:	bf00      	nop
    588c:	0000e06b 	.word	0x0000e06b
    5890:	0000d2c8 	.word	0x0000d2c8
    5894:	40027000 	.word	0x40027000

00005898 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    5898:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    589a:	4812      	ldr	r0, [pc, #72]	; (58e4 <usb_init+0x4c>)
    589c:	f003 f970 	bl	8b80 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    58a0:	4b11      	ldr	r3, [pc, #68]	; (58e8 <usb_init+0x50>)
    58a2:	4298      	cmp	r0, r3
    58a4:	d11a      	bne.n	58dc <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    58a6:	4811      	ldr	r0, [pc, #68]	; (58ec <usb_init+0x54>)
    58a8:	f002 fb0a 	bl	7ec0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    58ac:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    58ae:	4810      	ldr	r0, [pc, #64]	; (58f0 <usb_init+0x58>)
    58b0:	f002 fb4c 	bl	7f4c <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    58b4:	490f      	ldr	r1, [pc, #60]	; (58f4 <usb_init+0x5c>)
    58b6:	4810      	ldr	r0, [pc, #64]	; (58f8 <usb_init+0x60>)
    58b8:	9400      	str	r4, [sp, #0]
    58ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    58be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    58c2:	f004 fafd 	bl	9ec0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    58c6:	490d      	ldr	r1, [pc, #52]	; (58fc <usb_init+0x64>)
    58c8:	480b      	ldr	r0, [pc, #44]	; (58f8 <usb_init+0x60>)
    58ca:	f007 f814 	bl	c8f6 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    58ce:	480c      	ldr	r0, [pc, #48]	; (5900 <usb_init+0x68>)
    58d0:	490c      	ldr	r1, [pc, #48]	; (5904 <usb_init+0x6c>)
    58d2:	f007 f8e3 	bl	ca9c <k_work_init>

	return 0;
    58d6:	4620      	mov	r0, r4
}
    58d8:	b002      	add	sp, #8
    58da:	bd10      	pop	{r4, pc}
		return -EIO;
    58dc:	f06f 0004 	mvn.w	r0, #4
    58e0:	e7fa      	b.n	58d8 <usb_init+0x40>
    58e2:	bf00      	nop
    58e4:	00005949 	.word	0x00005949
    58e8:	0bad0000 	.word	0x0bad0000
    58ec:	0000e213 	.word	0x0000e213
    58f0:	0000d42c 	.word	0x0000d42c
    58f4:	20002900 	.word	0x20002900
    58f8:	20000968 	.word	0x20000968
    58fc:	0000e097 	.word	0x0000e097
    5900:	20001360 	.word	0x20001360
    5904:	00005b25 	.word	0x00005b25

00005908 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    5908:	b510      	push	{r4, lr}
    590a:	490e      	ldr	r1, [pc, #56]	; (5944 <hfxo_stop.constprop.0.isra.0+0x3c>)
    590c:	f3bf 8f5b 	dmb	ish
    5910:	2300      	movs	r3, #0
    5912:	e851 2f00 	ldrex	r2, [r1]
    5916:	2a01      	cmp	r2, #1
    5918:	d103      	bne.n	5922 <hfxo_stop.constprop.0.isra.0+0x1a>
    591a:	e841 3000 	strex	r0, r3, [r1]
    591e:	2800      	cmp	r0, #0
    5920:	d1f7      	bne.n	5912 <hfxo_stop.constprop.0.isra.0+0xa>
    5922:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    5926:	d10c      	bne.n	5942 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5928:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    592c:	3914      	subs	r1, #20
    592e:	4620      	mov	r0, r4
    5930:	f005 fe23 	bl	b57a <onoff_cancel>

	if (rv == -EALREADY) {
    5934:	3078      	adds	r0, #120	; 0x78
    5936:	d104      	bne.n	5942 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    5938:	4620      	mov	r0, r4
}
    593a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    593e:	f005 bdf7 	b.w	b530 <onoff_release>
    5942:	bd10      	pop	{r4, pc}
    5944:	20001358 	.word	0x20001358

00005948 <usbd_event_handler>:
{
    5948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    594c:	b088      	sub	sp, #32
    594e:	4606      	mov	r6, r0
    5950:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    5952:	2214      	movs	r2, #20
    5954:	2100      	movs	r1, #0
    5956:	f107 000c 	add.w	r0, r7, #12
    595a:	f006 fbf4 	bl	c146 <memset>
	switch (p_event->type) {
    595e:	7833      	ldrb	r3, [r6, #0]
    5960:	2b06      	cmp	r3, #6
    5962:	d824      	bhi.n	59ae <usbd_event_handler+0x66>
    5964:	e8df f003 	tbb	[pc, r3]
    5968:	1612049e 	.word	0x1612049e
    596c:	9016      	.short	0x9016
    596e:	18          	.byte	0x18
    596f:	00          	.byte	0x00
		evt.evt_type = USBD_EVT_RESET;
    5970:	2402      	movs	r4, #2
		ev = usbd_evt_alloc();
    5972:	f7ff feb7 	bl	56e4 <usbd_evt_alloc>
		if (!ev) {
    5976:	4603      	mov	r3, r0
    5978:	b1c8      	cbz	r0, 59ae <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    597a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    597c:	f100 0208 	add.w	r2, r0, #8
    5980:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    5984:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    5988:	4618      	mov	r0, r3
    598a:	e038      	b.n	59fe <usbd_event_handler+0xb6>
	switch (p_event->type) {
    598c:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    598e:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    5990:	2400      	movs	r4, #0
    5992:	e7ee      	b.n	5972 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    5994:	2304      	movs	r3, #4
    5996:	e7fa      	b.n	598e <usbd_event_handler+0x46>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5998:	f896 8002 	ldrb.w	r8, [r6, #2]
    599c:	4640      	mov	r0, r8
    599e:	f7ff fe4d 	bl	563c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    59a2:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    59a4:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    59a6:	b133      	cbz	r3, 59b6 <usbd_event_handler+0x6e>
    59a8:	3b01      	subs	r3, #1
    59aa:	2b02      	cmp	r3, #2
    59ac:	d968      	bls.n	5a80 <usbd_event_handler+0x138>
}
    59ae:	3720      	adds	r7, #32
    59b0:	46bd      	mov	sp, r7
    59b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    59b6:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    59ba:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    59bc:	d024      	beq.n	5a08 <usbd_event_handler+0xc0>
		switch (p_event->data.eptransfer.status) {
    59be:	b19c      	cbz	r4, 59e8 <usbd_event_handler+0xa0>
    59c0:	2c03      	cmp	r4, #3
    59c2:	d0f4      	beq.n	59ae <usbd_event_handler+0x66>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    59c4:	466d      	mov	r5, sp
    59c6:	b088      	sub	sp, #32
    59c8:	466a      	mov	r2, sp
    59ca:	4b37      	ldr	r3, [pc, #220]	; (5aa8 <usbd_event_handler+0x160>)
    59cc:	f8c2 801c 	str.w	r8, [r2, #28]
    59d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    59d4:	2304      	movs	r3, #4
    59d6:	f842 3f10 	str.w	r3, [r2, #16]!
    59da:	4834      	ldr	r0, [pc, #208]	; (5aac <usbd_event_handler+0x164>)
    59dc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    59e0:	f006 fbe2 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    59e4:	46ad      	mov	sp, r5
    59e6:	e7e2      	b.n	59ae <usbd_event_handler+0x66>
			struct usbd_event *ev = usbd_evt_alloc();
    59e8:	f7ff fe7c 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    59ec:	4603      	mov	r3, r0
    59ee:	2800      	cmp	r0, #0
    59f0:	d0dd      	beq.n	59ae <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    59f2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    59f4:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    59f6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    59f8:	2203      	movs	r2, #3
    59fa:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    59fc:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    59fe:	f7ff fe55 	bl	56ac <usbd_evt_put>
		usbd_work_schedule();
    5a02:	f7ff fe4b 	bl	569c <usbd_work_schedule>
    5a06:	e7d2      	b.n	59ae <usbd_event_handler+0x66>
		switch (p_event->data.eptransfer.status) {
    5a08:	b154      	cbz	r4, 5a20 <usbd_event_handler+0xd8>
    5a0a:	2c01      	cmp	r4, #1
    5a0c:	d1da      	bne.n	59c4 <usbd_event_handler+0x7c>
			struct usbd_event *ev = usbd_evt_alloc();
    5a0e:	f7ff fe69 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    5a12:	4603      	mov	r3, r0
    5a14:	2800      	cmp	r0, #0
    5a16:	d0ca      	beq.n	59ae <usbd_event_handler+0x66>
			ep_ctx->read_pending = true;
    5a18:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5a1a:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5a1c:	7304      	strb	r4, [r0, #12]
    5a1e:	e7ed      	b.n	59fc <usbd_event_handler+0xb4>
			struct usbd_event *ev = usbd_evt_alloc();
    5a20:	f7ff fe60 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    5a24:	4604      	mov	r4, r0
    5a26:	2800      	cmp	r0, #0
    5a28:	d0c1      	beq.n	59ae <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    5a2a:	2301      	movs	r3, #1
    5a2c:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5a2e:	2302      	movs	r3, #2
    5a30:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5a32:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    5a34:	78b0      	ldrb	r0, [r6, #2]
    5a36:	f105 010c 	add.w	r1, r5, #12
    5a3a:	f006 febe 	bl	c7ba <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    5a3e:	b170      	cbz	r0, 5a5e <usbd_event_handler+0x116>
				LOG_ERR("_ep_status_get failed! Code: %d",
    5a40:	466e      	mov	r6, sp
    5a42:	b088      	sub	sp, #32
    5a44:	466a      	mov	r2, sp
    5a46:	4b1a      	ldr	r3, [pc, #104]	; (5ab0 <usbd_event_handler+0x168>)
    5a48:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5a4c:	2303      	movs	r3, #3
    5a4e:	f842 3f10 	str.w	r3, [r2, #16]!
    5a52:	4816      	ldr	r0, [pc, #88]	; (5aac <usbd_event_handler+0x164>)
    5a54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5a58:	f006 fba6 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    5a5c:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    5a5e:	4a15      	ldr	r2, [pc, #84]	; (5ab4 <usbd_event_handler+0x16c>)
    5a60:	68e9      	ldr	r1, [r5, #12]
    5a62:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    5a66:	428b      	cmp	r3, r1
    5a68:	d906      	bls.n	5a78 <usbd_event_handler+0x130>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    5a6a:	1a5b      	subs	r3, r3, r1
    5a6c:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5a70:	f003 fac2 	bl	8ff8 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    5a74:	4620      	mov	r0, r4
    5a76:	e7c2      	b.n	59fe <usbd_event_handler+0xb6>
				ctx->ctrl_read_len = 0U;
    5a78:	2300      	movs	r3, #0
    5a7a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    5a7e:	e7f9      	b.n	5a74 <usbd_event_handler+0x12c>
			usbd_event_transfer_data(p_event);
    5a80:	4630      	mov	r0, r6
    5a82:	f7ff fe99 	bl	57b8 <usbd_event_transfer_data>
	if (put_evt) {
    5a86:	e792      	b.n	59ae <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    5a88:	1d38      	adds	r0, r7, #4
    5a8a:	f003 fa8f 	bl	8fac <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5a8e:	797b      	ldrb	r3, [r7, #5]
    5a90:	2b05      	cmp	r3, #5
    5a92:	d103      	bne.n	5a9c <usbd_event_handler+0x154>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    5a94:	793b      	ldrb	r3, [r7, #4]
    5a96:	f013 0f60 	tst.w	r3, #96	; 0x60
    5a9a:	d088      	beq.n	59ae <usbd_event_handler+0x66>
			evt.evt.ep_evt.ep = ep_ctx;
    5a9c:	4b06      	ldr	r3, [pc, #24]	; (5ab8 <usbd_event_handler+0x170>)
    5a9e:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    5aa0:	2401      	movs	r4, #1
    5aa2:	e766      	b.n	5972 <usbd_event_handler+0x2a>
	switch (p_event->type) {
    5aa4:	2403      	movs	r4, #3
    5aa6:	e764      	b.n	5972 <usbd_event_handler+0x2a>
    5aa8:	0000e06b 	.word	0x0000e06b
    5aac:	0000d2c8 	.word	0x0000d2c8
    5ab0:	0000e0a2 	.word	0x0000e0a2
    5ab4:	20001338 	.word	0x20001338
    5ab8:	200014a4 	.word	0x200014a4

00005abc <eps_ctx_init>:
{
    5abc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5abe:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5ac0:	f064 007f 	orn	r0, r4, #127	; 0x7f
    5ac4:	b2c0      	uxtb	r0, r0
    5ac6:	f7ff fdb9 	bl	563c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5aca:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5acc:	f006 fb59 	bl	c182 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5ad0:	2c08      	cmp	r4, #8
    5ad2:	d1f5      	bne.n	5ac0 <eps_ctx_init+0x4>
    5ad4:	4d0e      	ldr	r5, [pc, #56]	; (5b10 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5ad6:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5ad8:	b2e0      	uxtb	r0, r4
    5ada:	f7ff fdaf 	bl	563c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5ade:	6903      	ldr	r3, [r0, #16]
    5ae0:	b903      	cbnz	r3, 5ae4 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5ae2:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5ae4:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5ae6:	f006 fb4c 	bl	c182 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5aea:	2c08      	cmp	r4, #8
    5aec:	f105 0540 	add.w	r5, r5, #64	; 0x40
    5af0:	d1f2      	bne.n	5ad8 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    5af2:	4808      	ldr	r0, [pc, #32]	; (5b14 <eps_ctx_init+0x58>)
    5af4:	f006 fb45 	bl	c182 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    5af8:	4b07      	ldr	r3, [pc, #28]	; (5b18 <eps_ctx_init+0x5c>)
    5afa:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    5afe:	b912      	cbnz	r2, 5b06 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5b00:	4a06      	ldr	r2, [pc, #24]	; (5b1c <eps_ctx_init+0x60>)
    5b02:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    5b06:	4806      	ldr	r0, [pc, #24]	; (5b20 <eps_ctx_init+0x64>)
    5b08:	f006 fb3b 	bl	c182 <ep_ctx_reset>
}
    5b0c:	2000      	movs	r0, #0
    5b0e:	bd38      	pop	{r3, r4, r5, pc}
    5b10:	200019c8 	.word	0x200019c8
    5b14:	20001484 	.word	0x20001484
    5b18:	20001338 	.word	0x20001338
    5b1c:	200015c8 	.word	0x200015c8
    5b20:	200015a4 	.word	0x200015a4

00005b24 <usbd_work_handler>:
{
    5b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    5b28:	4ca3      	ldr	r4, [pc, #652]	; (5db8 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5b2a:	f8df a290 	ldr.w	sl, [pc, #656]	; 5dbc <usbd_work_handler+0x298>
{
    5b2e:	b086      	sub	sp, #24
    5b30:	4680      	mov	r8, r0
    5b32:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    5b34:	f7ff fdc0 	bl	56b8 <usbd_evt_get>
    5b38:	4606      	mov	r6, r0
    5b3a:	b918      	cbnz	r0, 5b44 <usbd_work_handler+0x20>
}
    5b3c:	3718      	adds	r7, #24
    5b3e:	46bd      	mov	sp, r7
    5b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    5b44:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5b48:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5b4a:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5b4e:	b93a      	cbnz	r2, 5b60 <usbd_work_handler+0x3c>
    5b50:	2b00      	cmp	r3, #0
    5b52:	f000 80af 	beq.w	5cb4 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5b56:	4899      	ldr	r0, [pc, #612]	; (5dbc <usbd_work_handler+0x298>)
    5b58:	4649      	mov	r1, r9
    5b5a:	f006 fe9d 	bl	c898 <k_mem_slab_free>
}
    5b5e:	e7e9      	b.n	5b34 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    5b60:	2b04      	cmp	r3, #4
    5b62:	f200 8195 	bhi.w	5e90 <usbd_work_handler+0x36c>
    5b66:	e8df f013 	tbh	[pc, r3, lsl #1]
    5b6a:	00a5      	.short	0x00a5
    5b6c:	013b0005 	.word	0x013b0005
    5b70:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    5b74:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    5b78:	b983      	cbnz	r3, 5b9c <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    5b7a:	68b3      	ldr	r3, [r6, #8]
    5b7c:	466d      	mov	r5, sp
    5b7e:	b088      	sub	sp, #32
    5b80:	7a5b      	ldrb	r3, [r3, #9]
    5b82:	466a      	mov	r2, sp
    5b84:	498e      	ldr	r1, [pc, #568]	; (5dc0 <usbd_work_handler+0x29c>)
    5b86:	488f      	ldr	r0, [pc, #572]	; (5dc4 <usbd_work_handler+0x2a0>)
    5b88:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5b8c:	2303      	movs	r3, #3
    5b8e:	f842 3f10 	str.w	r3, [r2, #16]!
    5b92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5b96:	f006 fb07 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    5b9a:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    5b9c:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    5b9e:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    5ba0:	2b03      	cmp	r3, #3
    5ba2:	d839      	bhi.n	5c18 <usbd_work_handler+0xf4>
    5ba4:	e8df f003 	tbb	[pc, r3]
    5ba8:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    5bac:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    5bae:	2208      	movs	r2, #8
    5bb0:	2100      	movs	r1, #0
    5bb2:	4630      	mov	r0, r6
    5bb4:	f006 fac7 	bl	c146 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    5bb8:	4b83      	ldr	r3, [pc, #524]	; (5dc8 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5bba:	4884      	ldr	r0, [pc, #528]	; (5dcc <usbd_work_handler+0x2a8>)
    5bbc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5bc0:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    5bc2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    5bc6:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    5bc8:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5bcc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    5bd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5bd4:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    5bd6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    5bda:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5bde:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5be2:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    5be4:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    5be8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5bec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5bf0:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    5bf2:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5bf4:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5bf6:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5bf8:	f006 fa9a 	bl	c130 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5bfc:	682b      	ldr	r3, [r5, #0]
    5bfe:	7a68      	ldrb	r0, [r5, #9]
    5c00:	2100      	movs	r1, #0
    5c02:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5c04:	f996 3000 	ldrsb.w	r3, [r6]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	db08      	blt.n	5c1e <usbd_work_handler+0xfa>
    5c0c:	88f3      	ldrh	r3, [r6, #6]
    5c0e:	b133      	cbz	r3, 5c1e <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5c10:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5c14:	f003 f9f0 	bl	8ff8 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5c18:	4649      	mov	r1, r9
    5c1a:	4650      	mov	r0, sl
    5c1c:	e79d      	b.n	5b5a <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    5c1e:	2300      	movs	r3, #0
    5c20:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    5c24:	e7f8      	b.n	5c18 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    5c26:	7f6b      	ldrb	r3, [r5, #29]
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d0f5      	beq.n	5c18 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    5c2c:	7f2b      	ldrb	r3, [r5, #28]
    5c2e:	2b00      	cmp	r3, #0
    5c30:	d0f2      	beq.n	5c18 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    5c32:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5c34:	4866      	ldr	r0, [pc, #408]	; (5dd0 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    5c36:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    5c40:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5c42:	f006 fab4 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    5c46:	696b      	ldr	r3, [r5, #20]
    5c48:	603b      	str	r3, [r7, #0]
    5c4a:	686b      	ldr	r3, [r5, #4]
    5c4c:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5c50:	4639      	mov	r1, r7
    5c52:	7a68      	ldrb	r0, [r5, #9]
    5c54:	f002 ffd6 	bl	8c04 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5c58:	4b5e      	ldr	r3, [pc, #376]	; (5dd4 <usbd_work_handler+0x2b0>)
    5c5a:	4298      	cmp	r0, r3
    5c5c:	d00e      	beq.n	5c7c <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    5c5e:	466d      	mov	r5, sp
    5c60:	b088      	sub	sp, #32
    5c62:	466a      	mov	r2, sp
    5c64:	4b5c      	ldr	r3, [pc, #368]	; (5dd8 <usbd_work_handler+0x2b4>)
    5c66:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5c6a:	2303      	movs	r3, #3
    5c6c:	f842 3f10 	str.w	r3, [r2, #16]!
    5c70:	4854      	ldr	r0, [pc, #336]	; (5dc4 <usbd_work_handler+0x2a0>)
    5c72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5c76:	f006 fa97 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    5c7a:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    5c7c:	4854      	ldr	r0, [pc, #336]	; (5dd0 <usbd_work_handler+0x2ac>)
    5c7e:	f006 fa98 	bl	c1b2 <k_mutex_unlock.isra.0>
    5c82:	e7c9      	b.n	5c18 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5c84:	682b      	ldr	r3, [r5, #0]
    5c86:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5c88:	7a68      	ldrb	r0, [r5, #9]
    5c8a:	4798      	blx	r3
		break;
    5c8c:	e7c4      	b.n	5c18 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5c8e:	7aab      	ldrb	r3, [r5, #10]
    5c90:	b96b      	cbnz	r3, 5cae <usbd_work_handler+0x18a>
    5c92:	7feb      	ldrb	r3, [r5, #31]
    5c94:	b95b      	cbnz	r3, 5cae <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5c96:	484e      	ldr	r0, [pc, #312]	; (5dd0 <usbd_work_handler+0x2ac>)
    5c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ca0:	f006 fa85 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    5ca4:	f003 f9d8 	bl	9058 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    5ca8:	4849      	ldr	r0, [pc, #292]	; (5dd0 <usbd_work_handler+0x2ac>)
    5caa:	f006 fa82 	bl	c1b2 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5cae:	682b      	ldr	r3, [r5, #0]
    5cb0:	2102      	movs	r1, #2
    5cb2:	e7e9      	b.n	5c88 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    5cb4:	7a33      	ldrb	r3, [r6, #8]
    5cb6:	2b04      	cmp	r3, #4
    5cb8:	d8ae      	bhi.n	5c18 <usbd_work_handler+0xf4>
    5cba:	e8df f003 	tbb	[pc, r3]
    5cbe:	0359      	.short	0x0359
    5cc0:	6723      	.short	0x6723
    5cc2:	73          	.byte	0x73
    5cc3:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    5cc4:	f002 ff26 	bl	8b14 <nrfx_usbd_is_enabled>
    5cc8:	4605      	mov	r5, r0
    5cca:	2800      	cmp	r0, #0
    5ccc:	d1a4      	bne.n	5c18 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    5cce:	f002 fe5d 	bl	898c <nrfx_usbd_enable>
    5cd2:	f3bf 8f5b 	dmb	ish
    5cd6:	4941      	ldr	r1, [pc, #260]	; (5ddc <usbd_work_handler+0x2b8>)
    5cd8:	2301      	movs	r3, #1
    5cda:	e851 2f00 	ldrex	r2, [r1]
    5cde:	2a00      	cmp	r2, #0
    5ce0:	d103      	bne.n	5cea <usbd_work_handler+0x1c6>
    5ce2:	e841 3000 	strex	r0, r3, [r1]
    5ce6:	2800      	cmp	r0, #0
    5ce8:	d1f7      	bne.n	5cda <usbd_work_handler+0x1b6>
    5cea:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    5cee:	d193      	bne.n	5c18 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5cf0:	f841 5c08 	str.w	r5, [r1, #-8]
    5cf4:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5cf8:	69e0      	ldr	r0, [r4, #28]
    5cfa:	6163      	str	r3, [r4, #20]
    5cfc:	3914      	subs	r1, #20
    5cfe:	f005 fbbf 	bl	b480 <onoff_request>
    5d02:	e789      	b.n	5c18 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    5d04:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5d06:	f065 007f 	orn	r0, r5, #127	; 0x7f
    5d0a:	b2c0      	uxtb	r0, r0
    5d0c:	f7ff fc96 	bl	563c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5d10:	7a03      	ldrb	r3, [r0, #8]
    5d12:	b113      	cbz	r3, 5d1a <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5d14:	7a40      	ldrb	r0, [r0, #9]
    5d16:	f003 fb4f 	bl	93b8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    5d1a:	3501      	adds	r5, #1
    5d1c:	2d08      	cmp	r5, #8
    5d1e:	d1f2      	bne.n	5d06 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    5d20:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    5d24:	b11b      	cbz	r3, 5d2e <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5d26:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    5d2a:	f003 fb45 	bl	93b8 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    5d2e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5d30:	b2e8      	uxtb	r0, r5
    5d32:	f7ff fc83 	bl	563c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5d36:	7a03      	ldrb	r3, [r0, #8]
    5d38:	b113      	cbz	r3, 5d40 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5d3a:	7a40      	ldrb	r0, [r0, #9]
    5d3c:	f003 fb3c 	bl	93b8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    5d40:	3501      	adds	r5, #1
    5d42:	2d08      	cmp	r5, #8
    5d44:	d1f4      	bne.n	5d30 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    5d46:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5d4a:	b11b      	cbz	r3, 5d54 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5d4c:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    5d50:	f003 fb32 	bl	93b8 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    5d54:	2001      	movs	r0, #1
    5d56:	f002 febf 	bl	8ad8 <nrfx_usbd_start>
		ctx->ready = true;
    5d5a:	2301      	movs	r3, #1
    5d5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    5d60:	6823      	ldr	r3, [r4, #0]
    5d62:	2b00      	cmp	r3, #0
    5d64:	f43f af58 	beq.w	5c18 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5d68:	2100      	movs	r1, #0
    5d6a:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    5d6c:	4798      	blx	r3
    5d6e:	e753      	b.n	5c18 <usbd_work_handler+0xf4>
		ctx->ready = false;
    5d70:	2500      	movs	r5, #0
    5d72:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    5d76:	f003 fadb 	bl	9330 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5d7a:	f7ff fdc5 	bl	5908 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    5d7e:	6823      	ldr	r3, [r4, #0]
    5d80:	2b00      	cmp	r3, #0
    5d82:	f43f af49 	beq.w	5c18 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    5d86:	4629      	mov	r1, r5
    5d88:	2004      	movs	r0, #4
    5d8a:	e7ef      	b.n	5d6c <usbd_work_handler+0x248>
		if (dev_ready()) {
    5d8c:	2a00      	cmp	r2, #0
    5d8e:	f43f af43 	beq.w	5c18 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    5d92:	f002 fec9 	bl	8b28 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    5d96:	6823      	ldr	r3, [r4, #0]
    5d98:	2b00      	cmp	r3, #0
    5d9a:	f43f af3d 	beq.w	5c18 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    5d9e:	2100      	movs	r1, #0
    5da0:	2005      	movs	r0, #5
    5da2:	e7e3      	b.n	5d6c <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    5da4:	6823      	ldr	r3, [r4, #0]
    5da6:	2b00      	cmp	r3, #0
    5da8:	f43f af36 	beq.w	5c18 <usbd_work_handler+0xf4>
    5dac:	2a00      	cmp	r2, #0
    5dae:	f43f af33 	beq.w	5c18 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    5db2:	2100      	movs	r1, #0
    5db4:	2006      	movs	r0, #6
    5db6:	e7d9      	b.n	5d6c <usbd_work_handler+0x248>
    5db8:	20001338 	.word	0x20001338
    5dbc:	20000290 	.word	0x20000290
    5dc0:	0000e0c2 	.word	0x0000e0c2
    5dc4:	0000d2c8 	.word	0x0000d2c8
    5dc8:	40027000 	.word	0x40027000
    5dcc:	2000133c 	.word	0x2000133c
    5dd0:	20001370 	.word	0x20001370
    5dd4:	0bad0000 	.word	0x0bad0000
    5dd8:	0000e0e8 	.word	0x0000e0e8
    5ddc:	20001358 	.word	0x20001358
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5de0:	f108 0510 	add.w	r5, r8, #16
    5de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5dec:	4628      	mov	r0, r5
    5dee:	f006 f9de 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    5df2:	f7ff fe63 	bl	5abc <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    5df6:	4628      	mov	r0, r5
    5df8:	f006 f9db 	bl	c1b2 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5dfc:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5e00:	2b00      	cmp	r3, #0
    5e02:	f43f af09 	beq.w	5c18 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    5e06:	2100      	movs	r1, #0
    5e08:	2001      	movs	r0, #1
    5e0a:	e7af      	b.n	5d6c <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    5e0c:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5e10:	b193      	cbz	r3, 5e38 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    5e12:	2501      	movs	r5, #1
    5e14:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    5e18:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    5e1c:	f7ff fc62 	bl	56e4 <usbd_evt_alloc>
		if (!ev) {
    5e20:	b990      	cbnz	r0, 5e48 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    5e22:	4b23      	ldr	r3, [pc, #140]	; (5eb0 <usbd_work_handler+0x38c>)
    5e24:	617b      	str	r3, [r7, #20]
    5e26:	2302      	movs	r3, #2
    5e28:	4822      	ldr	r0, [pc, #136]	; (5eb4 <usbd_work_handler+0x390>)
    5e2a:	613b      	str	r3, [r7, #16]
    5e2c:	f107 0210 	add.w	r2, r7, #16
    5e30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e34:	f006 f9b8 	bl	c1a8 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    5e38:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	f43f aeeb 	beq.w	5c18 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    5e42:	2100      	movs	r1, #0
    5e44:	200a      	movs	r0, #10
    5e46:	e791      	b.n	5d6c <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    5e48:	4a1b      	ldr	r2, [pc, #108]	; (5eb8 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    5e4a:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5e4c:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    5e4e:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    5e50:	f7ff fc2c 	bl	56ac <usbd_evt_put>
		usbd_work_schedule();
    5e54:	f7ff fc22 	bl	569c <usbd_work_schedule>
    5e58:	e7ee      	b.n	5e38 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    5e5a:	4b18      	ldr	r3, [pc, #96]	; (5ebc <usbd_work_handler+0x398>)
    5e5c:	617b      	str	r3, [r7, #20]
    5e5e:	2302      	movs	r3, #2
    5e60:	613b      	str	r3, [r7, #16]
    5e62:	f107 0210 	add.w	r2, r7, #16
    5e66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e6a:	4812      	ldr	r0, [pc, #72]	; (5eb4 <usbd_work_handler+0x390>)
    5e6c:	f006 f99c 	bl	c1a8 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    5e70:	f006 fbea 	bl	c648 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    5e74:	f003 fa5c 	bl	9330 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    5e78:	f002 fd7e 	bl	8978 <nrfx_usbd_uninit>
	usbd_evt_flush();
    5e7c:	f7ff fc24 	bl	56c8 <usbd_evt_flush>
	ret = eps_ctx_init();
    5e80:	f7ff fe1c 	bl	5abc <eps_ctx_init>
	nrfx_power_usbevt_enable();
    5e84:	f006 fbd9 	bl	c63a <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    5e88:	480d      	ldr	r0, [pc, #52]	; (5ec0 <usbd_work_handler+0x39c>)
    5e8a:	f002 fe79 	bl	8b80 <nrfx_usbd_init>
}
    5e8e:	e6c3      	b.n	5c18 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    5e90:	466d      	mov	r5, sp
    5e92:	b088      	sub	sp, #32
    5e94:	466a      	mov	r2, sp
    5e96:	490b      	ldr	r1, [pc, #44]	; (5ec4 <usbd_work_handler+0x3a0>)
    5e98:	4806      	ldr	r0, [pc, #24]	; (5eb4 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    5e9a:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    5e9e:	2303      	movs	r3, #3
    5ea0:	f842 3f10 	str.w	r3, [r2, #16]!
    5ea4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5ea8:	f006 f97e 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    5eac:	46ad      	mov	sp, r5
    5eae:	e6b3      	b.n	5c18 <usbd_work_handler+0xf4>
    5eb0:	0000e10e 	.word	0x0000e10e
    5eb4:	0000d2c8 	.word	0x0000d2c8
    5eb8:	200015a4 	.word	0x200015a4
    5ebc:	0000e122 	.word	0x0000e122
    5ec0:	00005949 	.word	0x00005949
    5ec4:	0000e139 	.word	0x0000e139

00005ec8 <usb_dc_attach>:
{
    5ec8:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    5eca:	4d16      	ldr	r5, [pc, #88]	; (5f24 <usb_dc_attach+0x5c>)
    5ecc:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    5ed0:	bb2c      	cbnz	r4, 5f1e <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    5ed2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5ed6:	f006 fd24 	bl	c922 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    5eda:	4620      	mov	r0, r4
    5edc:	f000 fbb6 	bl	664c <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ee0:	4622      	mov	r2, r4
    5ee2:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    5ee4:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ee6:	2027      	movs	r0, #39	; 0x27
    5ee8:	f7fe fde8 	bl	4abc <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    5eec:	f006 fba5 	bl	c63a <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    5ef0:	f7ff fde4 	bl	5abc <eps_ctx_init>
	if (ret == 0) {
    5ef4:	4604      	mov	r4, r0
    5ef6:	b910      	cbnz	r0, 5efe <usb_dc_attach+0x36>
		ctx->attached = true;
    5ef8:	2301      	movs	r3, #1
    5efa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    5efe:	4b0a      	ldr	r3, [pc, #40]	; (5f28 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    5f00:	681b      	ldr	r3, [r3, #0]
    5f02:	b10b      	cbz	r3, 5f08 <usb_dc_attach+0x40>
		usbd_work_schedule();
    5f04:	f7ff fbca 	bl	569c <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    5f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f0c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    5f10:	07db      	lsls	r3, r3, #31
    5f12:	d502      	bpl.n	5f1a <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    5f14:	2000      	movs	r0, #0
    5f16:	f7ff fc21 	bl	575c <usb_dc_power_event_handler>
}
    5f1a:	4620      	mov	r0, r4
    5f1c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    5f1e:	2400      	movs	r4, #0
    5f20:	e7fb      	b.n	5f1a <usb_dc_attach+0x52>
    5f22:	bf00      	nop
    5f24:	20001338 	.word	0x20001338
    5f28:	20000320 	.word	0x20000320

00005f2c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5f2c:	4b07      	ldr	r3, [pc, #28]	; (5f4c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    5f2e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    5f32:	b13a      	cbz	r2, 5f44 <usb_dc_set_address+0x18>
    5f34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    5f38:	2b00      	cmp	r3, #0
    5f3a:	bf14      	ite	ne
    5f3c:	2000      	movne	r0, #0
    5f3e:	f06f 0012 	mvneq.w	r0, #18
    5f42:	4770      	bx	lr
    5f44:	f06f 0012 	mvn.w	r0, #18
}
    5f48:	4770      	bx	lr
    5f4a:	bf00      	nop
    5f4c:	20001338 	.word	0x20001338

00005f50 <usb_dc_ep_check_cap>:
{
    5f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5f52:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5f54:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5f56:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5f58:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5f5c:	b97a      	cbnz	r2, 5f7e <usb_dc_ep_check_cap+0x2e>
    5f5e:	b158      	cbz	r0, 5f78 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    5f60:	4b0d      	ldr	r3, [pc, #52]	; (5f98 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    5f62:	480e      	ldr	r0, [pc, #56]	; (5f9c <usb_dc_ep_check_cap+0x4c>)
    5f64:	9305      	str	r3, [sp, #20]
    5f66:	aa04      	add	r2, sp, #16
    5f68:	2302      	movs	r3, #2
    5f6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f6e:	9304      	str	r3, [sp, #16]
    5f70:	f006 f91a 	bl	c1a8 <z_log_msg_static_create.constprop.0>
		return -1;
    5f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5f78:	b007      	add	sp, #28
    5f7a:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    5f7e:	2808      	cmp	r0, #8
    5f80:	d901      	bls.n	5f86 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    5f82:	4b07      	ldr	r3, [pc, #28]	; (5fa0 <usb_dc_ep_check_cap+0x50>)
    5f84:	e7ed      	b.n	5f62 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5f86:	2a01      	cmp	r2, #1
    5f88:	bf06      	itte	eq
    5f8a:	f083 0308 	eoreq.w	r3, r3, #8
    5f8e:	f343 00c0 	sbfxeq	r0, r3, #3, #1
	return 0;
    5f92:	2000      	movne	r0, #0
    5f94:	e7f0      	b.n	5f78 <usb_dc_ep_check_cap+0x28>
    5f96:	bf00      	nop
    5f98:	0000e150 	.word	0x0000e150
    5f9c:	0000d2c8 	.word	0x0000d2c8
    5fa0:	0000e16f 	.word	0x0000e16f

00005fa4 <usb_dc_ep_configure>:
{
    5fa4:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    5fa6:	4b16      	ldr	r3, [pc, #88]	; (6000 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    5fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5fac:	b087      	sub	sp, #28
    5fae:	4604      	mov	r4, r0
	if (!dev_attached()) {
    5fb0:	b31b      	cbz	r3, 5ffa <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    5fb2:	7805      	ldrb	r5, [r0, #0]
    5fb4:	4628      	mov	r0, r5
    5fb6:	f7ff fb41 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    5fba:	b1b0      	cbz	r0, 5fea <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    5fbc:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    5fbe:	7923      	ldrb	r3, [r4, #4]
    5fc0:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    5fc2:	8863      	ldrh	r3, [r4, #2]
    5fc4:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    5fc6:	7820      	ldrb	r0, [r4, #0]
    5fc8:	8861      	ldrh	r1, [r4, #2]
    5fca:	f010 0f08 	tst.w	r0, #8
    5fce:	d110      	bne.n	5ff2 <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    5fd0:	1e4b      	subs	r3, r1, #1
    5fd2:	420b      	tst	r3, r1
    5fd4:	d00d      	beq.n	5ff2 <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    5fd6:	4b0b      	ldr	r3, [pc, #44]	; (6004 <usb_dc_ep_configure+0x60>)
    5fd8:	9305      	str	r3, [sp, #20]
    5fda:	480b      	ldr	r0, [pc, #44]	; (6008 <usb_dc_ep_configure+0x64>)
    5fdc:	2302      	movs	r3, #2
    5fde:	aa04      	add	r2, sp, #16
    5fe0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5fe4:	9304      	str	r3, [sp, #16]
    5fe6:	f006 f8df 	bl	c1a8 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5fea:	f06f 0015 	mvn.w	r0, #21
}
    5fee:	b007      	add	sp, #28
    5ff0:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    5ff2:	f006 fbdd 	bl	c7b0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    5ff6:	2000      	movs	r0, #0
    5ff8:	e7f9      	b.n	5fee <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    5ffa:	f06f 0012 	mvn.w	r0, #18
    5ffe:	e7f6      	b.n	5fee <usb_dc_ep_configure+0x4a>
    6000:	20001338 	.word	0x20001338
    6004:	0000e18e 	.word	0x0000e18e
    6008:	0000d2c8 	.word	0x0000d2c8

0000600c <usb_dc_ep_set_stall>:
{
    600c:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    600e:	4b19      	ldr	r3, [pc, #100]	; (6074 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    6010:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6014:	b087      	sub	sp, #28
    6016:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    6018:	b342      	cbz	r2, 606c <usb_dc_ep_set_stall+0x60>
    601a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    601e:	b32b      	cbz	r3, 606c <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    6020:	f7ff fb0c 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    6024:	4604      	mov	r4, r0
    6026:	b918      	cbnz	r0, 6030 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    6028:	f06f 0015 	mvn.w	r0, #21
}
    602c:	b007      	add	sp, #28
    602e:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    6030:	7a83      	ldrb	r3, [r0, #10]
    6032:	2b01      	cmp	r3, #1
    6034:	d00f      	beq.n	6056 <usb_dc_ep_set_stall+0x4a>
    6036:	d907      	bls.n	6048 <usb_dc_ep_set_stall+0x3c>
    6038:	3b02      	subs	r3, #2
    603a:	2b01      	cmp	r3, #1
    603c:	d907      	bls.n	604e <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    603e:	6963      	ldr	r3, [r4, #20]
    6040:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    6042:	2000      	movs	r0, #0
    6044:	60e0      	str	r0, [r4, #12]
	return 0;
    6046:	e7f1      	b.n	602c <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    6048:	f003 f80e 	bl	9068 <nrfx_usbd_setup_stall>
		break;
    604c:	e7f7      	b.n	603e <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    604e:	4628      	mov	r0, r5
    6050:	f002 ff7e 	bl	8f50 <nrfx_usbd_ep_stall>
		break;
    6054:	e7f3      	b.n	603e <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    6056:	4b08      	ldr	r3, [pc, #32]	; (6078 <usb_dc_ep_set_stall+0x6c>)
    6058:	9305      	str	r3, [sp, #20]
    605a:	4808      	ldr	r0, [pc, #32]	; (607c <usb_dc_ep_set_stall+0x70>)
    605c:	2302      	movs	r3, #2
    605e:	aa04      	add	r2, sp, #16
    6060:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6064:	9304      	str	r3, [sp, #16]
    6066:	f006 f89f 	bl	c1a8 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    606a:	e7dd      	b.n	6028 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    606c:	f06f 0012 	mvn.w	r0, #18
    6070:	e7dc      	b.n	602c <usb_dc_ep_set_stall+0x20>
    6072:	bf00      	nop
    6074:	20001338 	.word	0x20001338
    6078:	0000e1b6 	.word	0x0000e1b6
    607c:	0000d2c8 	.word	0x0000d2c8

00006080 <usb_dc_ep_clear_stall>:
{
    6080:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6082:	4b0e      	ldr	r3, [pc, #56]	; (60bc <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6084:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6088:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    608a:	b182      	cbz	r2, 60ae <usb_dc_ep_clear_stall+0x2e>
    608c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6090:	b16b      	cbz	r3, 60ae <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    6092:	f7ff fad3 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    6096:	b168      	cbz	r0, 60b4 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6098:	f015 0408 	ands.w	r4, r5, #8
    609c:	d10a      	bne.n	60b4 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    609e:	4628      	mov	r0, r5
    60a0:	f002 ff78 	bl	8f94 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    60a4:	4628      	mov	r0, r5
    60a6:	f003 f9db 	bl	9460 <nrfx_usbd_ep_stall_clear>
	return 0;
    60aa:	4620      	mov	r0, r4
}
    60ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    60ae:	f06f 0012 	mvn.w	r0, #18
    60b2:	e7fb      	b.n	60ac <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    60b4:	f06f 0015 	mvn.w	r0, #21
    60b8:	e7f8      	b.n	60ac <usb_dc_ep_clear_stall+0x2c>
    60ba:	bf00      	nop
    60bc:	20001338 	.word	0x20001338

000060c0 <usb_dc_ep_is_stalled>:
{
    60c0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    60c2:	4b0c      	ldr	r3, [pc, #48]	; (60f4 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    60c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    60c8:	4605      	mov	r5, r0
    60ca:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    60cc:	b162      	cbz	r2, 60e8 <usb_dc_ep_is_stalled+0x28>
    60ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    60d2:	b14b      	cbz	r3, 60e8 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    60d4:	f7ff fab2 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    60d8:	b148      	cbz	r0, 60ee <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    60da:	b144      	cbz	r4, 60ee <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    60dc:	4628      	mov	r0, r5
    60de:	f002 ff3f 	bl	8f60 <nrfx_usbd_ep_stall_check>
    60e2:	7020      	strb	r0, [r4, #0]
	return 0;
    60e4:	2000      	movs	r0, #0
}
    60e6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    60e8:	f06f 0012 	mvn.w	r0, #18
    60ec:	e7fb      	b.n	60e6 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    60ee:	f06f 0015 	mvn.w	r0, #21
    60f2:	e7f8      	b.n	60e6 <usb_dc_ep_is_stalled+0x26>
    60f4:	20001338 	.word	0x20001338

000060f8 <usb_dc_ep_enable>:
{
    60f8:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    60fa:	4e13      	ldr	r6, [pc, #76]	; (6148 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    60fc:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    6100:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6102:	b1c3      	cbz	r3, 6136 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    6104:	f7ff fa9a 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    6108:	4605      	mov	r5, r0
    610a:	b1b8      	cbz	r0, 613c <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    610c:	0723      	lsls	r3, r4, #28
    610e:	d405      	bmi.n	611c <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6110:	4620      	mov	r0, r4
    6112:	f002 ff3f 	bl	8f94 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6116:	4620      	mov	r0, r4
    6118:	f003 f9a2 	bl	9460 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    611c:	7a2b      	ldrb	r3, [r5, #8]
    611e:	b983      	cbnz	r3, 6142 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    6120:	2301      	movs	r3, #1
    6122:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    6124:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    6128:	b90b      	cbnz	r3, 612e <usb_dc_ep_enable+0x36>
	return 0;
    612a:	2000      	movs	r0, #0
}
    612c:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    612e:	4620      	mov	r0, r4
    6130:	f003 f942 	bl	93b8 <nrfx_usbd_ep_enable>
    6134:	e7f9      	b.n	612a <usb_dc_ep_enable+0x32>
		return -ENODEV;
    6136:	f06f 0012 	mvn.w	r0, #18
    613a:	e7f7      	b.n	612c <usb_dc_ep_enable+0x34>
		return -EINVAL;
    613c:	f06f 0015 	mvn.w	r0, #21
    6140:	e7f4      	b.n	612c <usb_dc_ep_enable+0x34>
		return -EALREADY;
    6142:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6146:	e7f1      	b.n	612c <usb_dc_ep_enable+0x34>
    6148:	20001338 	.word	0x20001338

0000614c <usb_dc_ep_write>:
{
    614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    6150:	f8df 9124 	ldr.w	r9, [pc, #292]	; 6278 <usb_dc_ep_write+0x12c>
{
    6154:	b084      	sub	sp, #16
    6156:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    6158:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    615c:	af00      	add	r7, sp, #0
    615e:	4680      	mov	r8, r0
    6160:	468a      	mov	sl, r1
    6162:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    6164:	2b00      	cmp	r3, #0
    6166:	f000 8083 	beq.w	6270 <usb_dc_ep_write+0x124>
    616a:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    616e:	2b00      	cmp	r3, #0
    6170:	d07e      	beq.n	6270 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6172:	f010 0f80 	tst.w	r0, #128	; 0x80
    6176:	d014      	beq.n	61a2 <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    6178:	f7ff fa60 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    617c:	4604      	mov	r4, r0
    617e:	b180      	cbz	r0, 61a2 <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    6180:	7a03      	ldrb	r3, [r0, #8]
    6182:	b9ab      	cbnz	r3, 61b0 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6184:	466c      	mov	r4, sp
    6186:	b088      	sub	sp, #32
    6188:	466a      	mov	r2, sp
    618a:	4b3c      	ldr	r3, [pc, #240]	; (627c <usb_dc_ep_write+0x130>)
    618c:	483c      	ldr	r0, [pc, #240]	; (6280 <usb_dc_ep_write+0x134>)
    618e:	e9c2 3805 	strd	r3, r8, [r2, #20]
    6192:	2303      	movs	r3, #3
    6194:	f842 3f10 	str.w	r3, [r2, #16]!
    6198:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    619c:	f006 f804 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    61a0:	46a5      	mov	sp, r4
		return -EINVAL;
    61a2:	f06f 0415 	mvn.w	r4, #21
}
    61a6:	4620      	mov	r0, r4
    61a8:	3710      	adds	r7, #16
    61aa:	46bd      	mov	sp, r7
    61ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    61b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    61b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    61b8:	f109 0038 	add.w	r0, r9, #56	; 0x38
    61bc:	f005 fff7 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    61c0:	7fa3      	ldrb	r3, [r4, #30]
    61c2:	b133      	cbz	r3, 61d2 <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    61c4:	f109 0038 	add.w	r0, r9, #56	; 0x38
    61c8:	f005 fff3 	bl	c1b2 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    61cc:	f06f 040a 	mvn.w	r4, #10
    61d0:	e7e9      	b.n	61a6 <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    61d2:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    61d4:	b355      	cbz	r5, 622c <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    61d6:	2b00      	cmp	r3, #0
    61d8:	d038      	beq.n	624c <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    61da:	2301      	movs	r3, #1
    61dc:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    61de:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    61e2:	1d39      	adds	r1, r7, #4
    61e4:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    61e6:	e9c7 a501 	strd	sl, r5, [r7, #4]
    61ea:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    61ee:	f002 fd09 	bl	8c04 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    61f2:	4b24      	ldr	r3, [pc, #144]	; (6284 <usb_dc_ep_write+0x138>)
    61f4:	4298      	cmp	r0, r3
    61f6:	d037      	beq.n	6268 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    61f8:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    61fc:	b10e      	cbz	r6, 6202 <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    61fe:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    6202:	466c      	mov	r4, sp
    6204:	b088      	sub	sp, #32
    6206:	466a      	mov	r2, sp
    6208:	4b1f      	ldr	r3, [pc, #124]	; (6288 <usb_dc_ep_write+0x13c>)
    620a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    620e:	2303      	movs	r3, #3
    6210:	f842 3f10 	str.w	r3, [r2, #16]!
    6214:	481a      	ldr	r0, [pc, #104]	; (6280 <usb_dc_ep_write+0x134>)
    6216:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    621a:	f005 ffc5 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    621e:	46a5      	mov	sp, r4
		result = -EIO;
    6220:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    6224:	4819      	ldr	r0, [pc, #100]	; (628c <usb_dc_ep_write+0x140>)
    6226:	f005 ffc4 	bl	c1b2 <k_mutex_unlock.isra.0>
	return result;
    622a:	e7bc      	b.n	61a6 <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    622c:	7fe2      	ldrb	r2, [r4, #31]
    622e:	b102      	cbz	r2, 6232 <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    6230:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6232:	2b00      	cmp	r3, #0
    6234:	d1d1      	bne.n	61da <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6236:	f002 ff1f 	bl	9078 <nrfx_usbd_last_setup_dir_get>
    623a:	4580      	cmp	r8, r0
    623c:	d0cd      	beq.n	61da <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    623e:	f002 ff0b 	bl	9058 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    6242:	4812      	ldr	r0, [pc, #72]	; (628c <usb_dc_ep_write+0x140>)
    6244:	f005 ffb5 	bl	c1b2 <k_mutex_unlock.isra.0>
		return 0;
    6248:	2400      	movs	r4, #0
    624a:	e7ac      	b.n	61a6 <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    624c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    6250:	429d      	cmp	r5, r3
    6252:	d2f0      	bcs.n	6236 <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    6254:	6862      	ldr	r2, [r4, #4]
    6256:	fbb5 f3f2 	udiv	r3, r5, r2
    625a:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    625e:	2b00      	cmp	r3, #0
    6260:	d1e9      	bne.n	6236 <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    6262:	2301      	movs	r3, #1
    6264:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6266:	e7e6      	b.n	6236 <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    6268:	b106      	cbz	r6, 626c <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    626a:	6035      	str	r5, [r6, #0]
	int result = 0;
    626c:	2400      	movs	r4, #0
    626e:	e7d9      	b.n	6224 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    6270:	f06f 0412 	mvn.w	r4, #18
    6274:	e797      	b.n	61a6 <usb_dc_ep_write+0x5a>
    6276:	bf00      	nop
    6278:	20001338 	.word	0x20001338
    627c:	0000e1d8 	.word	0x0000e1d8
    6280:	0000d2c8 	.word	0x0000d2c8
    6284:	0bad0000 	.word	0x0bad0000
    6288:	0000e1f7 	.word	0x0000e1f7
    628c:	20001370 	.word	0x20001370

00006290 <usb_dc_ep_read_wait>:
{
    6290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6294:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    6296:	4b2d      	ldr	r3, [pc, #180]	; (634c <usb_dc_ep_read_wait+0xbc>)
{
    6298:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    629a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    629e:	af00      	add	r7, sp, #0
    62a0:	4681      	mov	r9, r0
    62a2:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    62a4:	2a00      	cmp	r2, #0
    62a6:	d04d      	beq.n	6344 <usb_dc_ep_read_wait+0xb4>
    62a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    62ac:	2b00      	cmp	r3, #0
    62ae:	d049      	beq.n	6344 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    62b0:	f010 0f80 	tst.w	r0, #128	; 0x80
    62b4:	d119      	bne.n	62ea <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    62b6:	b911      	cbnz	r1, 62be <usb_dc_ep_read_wait+0x2e>
    62b8:	f1b8 0f00 	cmp.w	r8, #0
    62bc:	d115      	bne.n	62ea <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    62be:	4648      	mov	r0, r9
    62c0:	f7ff f9bc 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    62c4:	4604      	mov	r4, r0
    62c6:	b180      	cbz	r0, 62ea <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    62c8:	7a03      	ldrb	r3, [r0, #8]
    62ca:	b98b      	cbnz	r3, 62f0 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    62cc:	466c      	mov	r4, sp
    62ce:	b088      	sub	sp, #32
    62d0:	466a      	mov	r2, sp
    62d2:	4b1f      	ldr	r3, [pc, #124]	; (6350 <usb_dc_ep_read_wait+0xc0>)
    62d4:	481f      	ldr	r0, [pc, #124]	; (6354 <usb_dc_ep_read_wait+0xc4>)
    62d6:	e9c2 3905 	strd	r3, r9, [r2, #20]
    62da:	2303      	movs	r3, #3
    62dc:	f842 3f10 	str.w	r3, [r2, #16]!
    62e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    62e4:	f005 ff60 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    62e8:	46a5      	mov	sp, r4
		return -EINVAL;
    62ea:	f06f 0015 	mvn.w	r0, #21
    62ee:	e015      	b.n	631c <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    62f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62f4:	4818      	ldr	r0, [pc, #96]	; (6358 <usb_dc_ep_read_wait+0xc8>)
    62f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62fa:	f005 ff58 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    62fe:	68e3      	ldr	r3, [r4, #12]
    6300:	4598      	cmp	r8, r3
    6302:	46c1      	mov	r9, r8
    6304:	bf28      	it	cs
    6306:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    6308:	b95e      	cbnz	r6, 6322 <usb_dc_ep_read_wait+0x92>
    630a:	f1b8 0f00 	cmp.w	r8, #0
    630e:	d108      	bne.n	6322 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    6310:	b105      	cbz	r5, 6314 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    6312:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    6314:	4810      	ldr	r0, [pc, #64]	; (6358 <usb_dc_ep_read_wait+0xc8>)
    6316:	f005 ff4c 	bl	c1b2 <k_mutex_unlock.isra.0>
		return 0;
    631a:	2000      	movs	r0, #0
}
    631c:	46bd      	mov	sp, r7
    631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    6322:	69a1      	ldr	r1, [r4, #24]
    6324:	464a      	mov	r2, r9
    6326:	4630      	mov	r0, r6
    6328:	f005 ff02 	bl	c130 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    632c:	69a3      	ldr	r3, [r4, #24]
    632e:	444b      	add	r3, r9
    6330:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    6332:	68e3      	ldr	r3, [r4, #12]
    6334:	eba3 0309 	sub.w	r3, r3, r9
    6338:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    633a:	2d00      	cmp	r5, #0
    633c:	d0ea      	beq.n	6314 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    633e:	f8c5 9000 	str.w	r9, [r5]
    6342:	e7e7      	b.n	6314 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    6344:	f06f 0012 	mvn.w	r0, #18
    6348:	e7e8      	b.n	631c <usb_dc_ep_read_wait+0x8c>
    634a:	bf00      	nop
    634c:	20001338 	.word	0x20001338
    6350:	0000e1d8 	.word	0x0000e1d8
    6354:	0000d2c8 	.word	0x0000d2c8
    6358:	20001370 	.word	0x20001370

0000635c <usb_dc_ep_read_continue>:
{
    635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    635e:	4d27      	ldr	r5, [pc, #156]	; (63fc <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    6360:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    6364:	af00      	add	r7, sp, #0
    6366:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    6368:	2b00      	cmp	r3, #0
    636a:	d044      	beq.n	63f6 <usb_dc_ep_read_continue+0x9a>
    636c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    6370:	2b00      	cmp	r3, #0
    6372:	d040      	beq.n	63f6 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6374:	0603      	lsls	r3, r0, #24
    6376:	d414      	bmi.n	63a2 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    6378:	f7ff f960 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    637c:	4604      	mov	r4, r0
    637e:	b180      	cbz	r0, 63a2 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    6380:	7a03      	ldrb	r3, [r0, #8]
    6382:	b993      	cbnz	r3, 63aa <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6384:	466c      	mov	r4, sp
    6386:	b088      	sub	sp, #32
    6388:	466a      	mov	r2, sp
    638a:	4b1d      	ldr	r3, [pc, #116]	; (6400 <usb_dc_ep_read_continue+0xa4>)
    638c:	481d      	ldr	r0, [pc, #116]	; (6404 <usb_dc_ep_read_continue+0xa8>)
    638e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    6392:	2303      	movs	r3, #3
    6394:	f842 3f10 	str.w	r3, [r2, #16]!
    6398:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    639c:	f005 ff04 	bl	c1a8 <z_log_msg_static_create.constprop.0>
    63a0:	46a5      	mov	sp, r4
		return -EINVAL;
    63a2:	f06f 0015 	mvn.w	r0, #21
}
    63a6:	46bd      	mov	sp, r7
    63a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    63aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63b2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    63b6:	f005 fefa 	bl	c1ae <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    63ba:	68e3      	ldr	r3, [r4, #12]
    63bc:	b9b3      	cbnz	r3, 63ec <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    63be:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    63c0:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    63c2:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    63c4:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    63c6:	7f63      	ldrb	r3, [r4, #29]
    63c8:	b183      	cbz	r3, 63ec <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    63ca:	f7ff f98b 	bl	56e4 <usbd_evt_alloc>
			if (!ev) {
    63ce:	b930      	cbnz	r0, 63de <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    63d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
    63d4:	f005 feed 	bl	c1b2 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    63d8:	f06f 000b 	mvn.w	r0, #11
    63dc:	e7e3      	b.n	63a6 <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    63de:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    63e0:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    63e2:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    63e4:	f7ff f962 	bl	56ac <usbd_evt_put>
			usbd_work_schedule();
    63e8:	f7ff f958 	bl	569c <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    63ec:	4806      	ldr	r0, [pc, #24]	; (6408 <usb_dc_ep_read_continue+0xac>)
    63ee:	f005 fee0 	bl	c1b2 <k_mutex_unlock.isra.0>
	return 0;
    63f2:	2000      	movs	r0, #0
    63f4:	e7d7      	b.n	63a6 <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    63f6:	f06f 0012 	mvn.w	r0, #18
    63fa:	e7d4      	b.n	63a6 <usb_dc_ep_read_continue+0x4a>
    63fc:	20001338 	.word	0x20001338
    6400:	0000e1d8 	.word	0x0000e1d8
    6404:	0000d2c8 	.word	0x0000d2c8
    6408:	20001370 	.word	0x20001370

0000640c <usb_dc_ep_set_callback>:
{
    640c:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    640e:	4b08      	ldr	r3, [pc, #32]	; (6430 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    6410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6414:	460c      	mov	r4, r1
	if (!dev_attached()) {
    6416:	b12b      	cbz	r3, 6424 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    6418:	f7ff f910 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    641c:	b128      	cbz	r0, 642a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    641e:	6004      	str	r4, [r0, #0]
	return 0;
    6420:	2000      	movs	r0, #0
}
    6422:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6424:	f06f 0012 	mvn.w	r0, #18
    6428:	e7fb      	b.n	6422 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    642a:	f06f 0015 	mvn.w	r0, #21
    642e:	e7f8      	b.n	6422 <usb_dc_ep_set_callback+0x16>
    6430:	20001338 	.word	0x20001338

00006434 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    6434:	4b01      	ldr	r3, [pc, #4]	; (643c <usb_dc_set_status_callback+0x8>)
    6436:	6018      	str	r0, [r3, #0]
}
    6438:	4770      	bx	lr
    643a:	bf00      	nop
    643c:	20001338 	.word	0x20001338

00006440 <usb_dc_ep_mps>:
{
    6440:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    6442:	4b07      	ldr	r3, [pc, #28]	; (6460 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    6444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6448:	b123      	cbz	r3, 6454 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    644a:	f7ff f8f7 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    644e:	b120      	cbz	r0, 645a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    6450:	6840      	ldr	r0, [r0, #4]
}
    6452:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6454:	f06f 0012 	mvn.w	r0, #18
    6458:	e7fb      	b.n	6452 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    645a:	f06f 0015 	mvn.w	r0, #21
    645e:	e7f8      	b.n	6452 <usb_dc_ep_mps+0x12>
    6460:	20001338 	.word	0x20001338

00006464 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6464:	4b08      	ldr	r3, [pc, #32]	; (6488 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6466:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6468:	1ac3      	subs	r3, r0, r3
{
    646a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    646c:	4907      	ldr	r1, [pc, #28]	; (648c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    646e:	109b      	asrs	r3, r3, #2
{
    6470:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6472:	4359      	muls	r1, r3
    6474:	4806      	ldr	r0, [pc, #24]	; (6490 <onoff_stop+0x2c>)
    6476:	2240      	movs	r2, #64	; 0x40
    6478:	f005 fee1 	bl	c23e <stop>
	notify(mgr, res);
    647c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    647e:	4601      	mov	r1, r0
	notify(mgr, res);
    6480:	4620      	mov	r0, r4
}
    6482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6486:	4718      	bx	r3
    6488:	20001bdc 	.word	0x20001bdc
    648c:	b6db6db7 	.word	0xb6db6db7
    6490:	0000cfc8 	.word	0x0000cfc8

00006494 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6494:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6496:	4c0c      	ldr	r4, [pc, #48]	; (64c8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6498:	4a0c      	ldr	r2, [pc, #48]	; (64cc <onoff_start+0x38>)
    649a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    649c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    649e:	9300      	str	r3, [sp, #0]
{
    64a0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64a2:	460b      	mov	r3, r1
    64a4:	490a      	ldr	r1, [pc, #40]	; (64d0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    64a6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64a8:	4361      	muls	r1, r4
{
    64aa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    64ac:	4809      	ldr	r0, [pc, #36]	; (64d4 <onoff_start+0x40>)
    64ae:	f005 fef2 	bl	c296 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    64b2:	1e01      	subs	r1, r0, #0
    64b4:	da05      	bge.n	64c2 <onoff_start+0x2e>
		notify(mgr, err);
    64b6:	4630      	mov	r0, r6
    64b8:	462b      	mov	r3, r5
	}
}
    64ba:	b002      	add	sp, #8
    64bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    64c0:	4718      	bx	r3
}
    64c2:	b002      	add	sp, #8
    64c4:	bd70      	pop	{r4, r5, r6, pc}
    64c6:	bf00      	nop
    64c8:	20001bdc 	.word	0x20001bdc
    64cc:	0000c301 	.word	0x0000c301
    64d0:	b6db6db7 	.word	0xb6db6db7
    64d4:	0000cfc8 	.word	0x0000cfc8

000064d8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    64d8:	2200      	movs	r2, #0
{
    64da:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    64dc:	2101      	movs	r1, #1
{
    64de:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    64e0:	4610      	mov	r0, r2
    64e2:	f7fe faeb 	bl	4abc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    64e6:	480f      	ldr	r0, [pc, #60]	; (6524 <clk_init+0x4c>)
    64e8:	f001 f92c 	bl	7744 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    64ec:	4b0e      	ldr	r3, [pc, #56]	; (6528 <clk_init+0x50>)
    64ee:	4298      	cmp	r0, r3
    64f0:	d115      	bne.n	651e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    64f2:	f001 f937 	bl	7764 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    64f6:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    64f8:	490c      	ldr	r1, [pc, #48]	; (652c <clk_init+0x54>)
    64fa:	4630      	mov	r0, r6
    64fc:	f004 ffad 	bl	b45a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6500:	2800      	cmp	r0, #0
    6502:	db0b      	blt.n	651c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6504:	2501      	movs	r5, #1
    6506:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    6508:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    650a:	4908      	ldr	r1, [pc, #32]	; (652c <clk_init+0x54>)
    650c:	f104 001c 	add.w	r0, r4, #28
    6510:	f004 ffa3 	bl	b45a <onoff_manager_init>
		if (err < 0) {
    6514:	2800      	cmp	r0, #0
    6516:	db01      	blt.n	651c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6518:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    651a:	2000      	movs	r0, #0
}
    651c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    651e:	f06f 0004 	mvn.w	r0, #4
    6522:	e7fb      	b.n	651c <clk_init+0x44>
    6524:	00006565 	.word	0x00006565
    6528:	0bad0000 	.word	0x0bad0000
    652c:	0000d430 	.word	0x0000d430

00006530 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6530:	b570      	push	{r4, r5, r6, lr}
    6532:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6534:	230c      	movs	r3, #12
    6536:	4809      	ldr	r0, [pc, #36]	; (655c <clkstarted_handle.constprop.0+0x2c>)
    6538:	434b      	muls	r3, r1
    653a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    653c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6540:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6542:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6544:	4418      	add	r0, r3
	sub_data->cb = NULL;
    6546:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6548:	f005 fe66 	bl	c218 <set_on_state>
	if (callback) {
    654c:	b12d      	cbz	r5, 655a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    654e:	4632      	mov	r2, r6
    6550:	462b      	mov	r3, r5
    6552:	4803      	ldr	r0, [pc, #12]	; (6560 <clkstarted_handle.constprop.0+0x30>)
}
    6554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6558:	4718      	bx	r3
}
    655a:	bd70      	pop	{r4, r5, r6, pc}
    655c:	20001bdc 	.word	0x20001bdc
    6560:	0000cfc8 	.word	0x0000cfc8

00006564 <clock_event_handler>:
	switch (event) {
    6564:	b110      	cbz	r0, 656c <clock_event_handler+0x8>
    6566:	2801      	cmp	r0, #1
    6568:	d004      	beq.n	6574 <clock_event_handler+0x10>
    656a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    656c:	4b03      	ldr	r3, [pc, #12]	; (657c <clock_event_handler+0x18>)
    656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6570:	075b      	lsls	r3, r3, #29
    6572:	d101      	bne.n	6578 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6574:	f7ff bfdc 	b.w	6530 <clkstarted_handle.constprop.0>
}
    6578:	4770      	bx	lr
    657a:	bf00      	nop
    657c:	20001bdc 	.word	0x20001bdc

00006580 <generic_hfclk_start>:
{
    6580:	b508      	push	{r3, lr}
	__asm__ volatile(
    6582:	f04f 0320 	mov.w	r3, #32
    6586:	f3ef 8111 	mrs	r1, BASEPRI
    658a:	f383 8812 	msr	BASEPRI_MAX, r3
    658e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6592:	4a12      	ldr	r2, [pc, #72]	; (65dc <generic_hfclk_start+0x5c>)
    6594:	6813      	ldr	r3, [r2, #0]
    6596:	f043 0002 	orr.w	r0, r3, #2
    659a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    659c:	07da      	lsls	r2, r3, #31
    659e:	d408      	bmi.n	65b2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    65a0:	f381 8811 	msr	BASEPRI, r1
    65a4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    65a8:	2001      	movs	r0, #1
}
    65aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    65ae:	f005 bfa2 	b.w	c4f6 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    65b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65b6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    65ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    65be:	07d3      	lsls	r3, r2, #31
    65c0:	d5ee      	bpl.n	65a0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    65c2:	4807      	ldr	r0, [pc, #28]	; (65e0 <generic_hfclk_start+0x60>)
    65c4:	f005 fe28 	bl	c218 <set_on_state>
    65c8:	f381 8811 	msr	BASEPRI, r1
    65cc:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    65d0:	2000      	movs	r0, #0
}
    65d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    65d6:	f7ff bfab 	b.w	6530 <clkstarted_handle.constprop.0>
    65da:	bf00      	nop
    65dc:	20001c2c 	.word	0x20001c2c
    65e0:	20001c1c 	.word	0x20001c1c

000065e4 <api_blocking_start>:
{
    65e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    65e6:	2200      	movs	r2, #0
    65e8:	2301      	movs	r3, #1
    65ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    65ee:	4a09      	ldr	r2, [pc, #36]	; (6614 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    65f0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    65f4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    65f6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    65fa:	f005 fe7a 	bl	c2f2 <api_start>
	if (err < 0) {
    65fe:	2800      	cmp	r0, #0
    6600:	db05      	blt.n	660e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    6602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6606:	2300      	movs	r3, #0
    6608:	4668      	mov	r0, sp
    660a:	f003 fb3b 	bl	9c84 <z_impl_k_sem_take>
}
    660e:	b005      	add	sp, #20
    6610:	f85d fb04 	ldr.w	pc, [sp], #4
    6614:	0000c31f 	.word	0x0000c31f

00006618 <generic_hfclk_stop>:
{
    6618:	b510      	push	{r4, lr}
	__asm__ volatile(
    661a:	f04f 0320 	mov.w	r3, #32
    661e:	f3ef 8411 	mrs	r4, BASEPRI
    6622:	f383 8812 	msr	BASEPRI_MAX, r3
    6626:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    662a:	4a07      	ldr	r2, [pc, #28]	; (6648 <generic_hfclk_stop+0x30>)
    662c:	6813      	ldr	r3, [r2, #0]
    662e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    6632:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    6634:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    6636:	d402      	bmi.n	663e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6638:	2001      	movs	r0, #1
    663a:	f005 ff98 	bl	c56e <nrfx_clock_stop>
	__asm__ volatile(
    663e:	f384 8811 	msr	BASEPRI, r4
    6642:	f3bf 8f6f 	isb	sy
}
    6646:	bd10      	pop	{r4, pc}
    6648:	20001c2c 	.word	0x20001c2c

0000664c <z_nrf_clock_control_get_onoff>:
}
    664c:	4a02      	ldr	r2, [pc, #8]	; (6658 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    664e:	b2c3      	uxtb	r3, r0
}
    6650:	201c      	movs	r0, #28
    6652:	fb03 2000 	mla	r0, r3, r0, r2
    6656:	4770      	bx	lr
    6658:	20001bdc 	.word	0x20001bdc

0000665c <z_nrf_clock_control_lf_on>:
{
    665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6660:	4938      	ldr	r1, [pc, #224]	; (6744 <z_nrf_clock_control_lf_on+0xe8>)
    6662:	f3bf 8f5b 	dmb	ish
    6666:	4607      	mov	r7, r0
    6668:	2201      	movs	r2, #1
    666a:	e851 3f00 	ldrex	r3, [r1]
    666e:	e841 2000 	strex	r0, r2, [r1]
    6672:	2800      	cmp	r0, #0
    6674:	d1f9      	bne.n	666a <z_nrf_clock_control_lf_on+0xe>
    6676:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    667a:	b933      	cbnz	r3, 668a <z_nrf_clock_control_lf_on+0x2e>
    667c:	4932      	ldr	r1, [pc, #200]	; (6748 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    667e:	4833      	ldr	r0, [pc, #204]	; (674c <z_nrf_clock_control_lf_on+0xf0>)
    6680:	604b      	str	r3, [r1, #4]
    6682:	60cb      	str	r3, [r1, #12]
    6684:	608a      	str	r2, [r1, #8]
    6686:	f004 fefb 	bl	b480 <onoff_request>
	switch (start_mode) {
    668a:	1e7b      	subs	r3, r7, #1
    668c:	2b01      	cmp	r3, #1
    668e:	d82b      	bhi.n	66e8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6690:	2f01      	cmp	r7, #1
    6692:	d107      	bne.n	66a4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6698:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    669c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    66a0:	2b01      	cmp	r3, #1
    66a2:	d021      	beq.n	66e8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    66a4:	f006 f921 	bl	c8ea <k_is_in_isr>
    66a8:	4605      	mov	r5, r0
    66aa:	b9f8      	cbnz	r0, 66ec <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    66ac:	4b28      	ldr	r3, [pc, #160]	; (6750 <z_nrf_clock_control_lf_on+0xf4>)
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	b1e3      	cbz	r3, 66ec <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    66b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    66b6:	2202      	movs	r2, #2
    66b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    66bc:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66be:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6754 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    66c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    66c6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    66ca:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    66ce:	03d2      	lsls	r2, r2, #15
    66d0:	d516      	bpl.n	6700 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    66d2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    66d6:	2b01      	cmp	r3, #1
    66d8:	d001      	beq.n	66de <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    66da:	2f01      	cmp	r7, #1
    66dc:	d110      	bne.n	6700 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    66de:	b35d      	cbz	r5, 6738 <z_nrf_clock_control_lf_on+0xdc>
    66e0:	f386 8811 	msr	BASEPRI, r6
    66e4:	f3bf 8f6f 	isb	sy
}
    66e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    66ec:	f04f 0320 	mov.w	r3, #32
    66f0:	f3ef 8611 	mrs	r6, BASEPRI
    66f4:	f383 8812 	msr	BASEPRI_MAX, r3
    66f8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    66fc:	2501      	movs	r5, #1
    66fe:	e7de      	b.n	66be <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6700:	b1ad      	cbz	r5, 672e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6702:	4630      	mov	r0, r6
    6704:	f7fe f938 	bl	4978 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6708:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    670c:	2b00      	cmp	r3, #0
    670e:	d1da      	bne.n	66c6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6710:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6714:	2a00      	cmp	r2, #0
    6716:	d0d6      	beq.n	66c6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6718:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    671c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    6720:	2301      	movs	r3, #1
    6722:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    6726:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    672a:	60a3      	str	r3, [r4, #8]
}
    672c:	e7cb      	b.n	66c6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    672e:	2100      	movs	r1, #0
    6730:	2021      	movs	r0, #33	; 0x21
    6732:	f003 fee9 	bl	a508 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6736:	e7e7      	b.n	6708 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    6738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    673c:	2202      	movs	r2, #2
    673e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6742:	e7d1      	b.n	66e8 <z_nrf_clock_control_lf_on+0x8c>
    6744:	20001bd8 	.word	0x20001bd8
    6748:	20001bc8 	.word	0x20001bc8
    674c:	20001bf8 	.word	0x20001bf8
    6750:	2000214f 	.word	0x2000214f
    6754:	e000e100 	.word	0xe000e100

00006758 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    6758:	b508      	push	{r3, lr}
    675a:	4807      	ldr	r0, [pc, #28]	; (6778 <uart_console_init+0x20>)
    675c:	f006 f869 	bl	c832 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    6760:	b138      	cbz	r0, 6772 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    6762:	4806      	ldr	r0, [pc, #24]	; (677c <uart_console_init+0x24>)
    6764:	f7fe ff2c 	bl	55c0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6768:	4804      	ldr	r0, [pc, #16]	; (677c <uart_console_init+0x24>)
    676a:	f7fb fa47 	bl	1bfc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    676e:	2000      	movs	r0, #0
}
    6770:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6772:	f06f 0012 	mvn.w	r0, #18
    6776:	e7fb      	b.n	6770 <uart_console_init+0x18>
    6778:	0000d010 	.word	0x0000d010
    677c:	00006781 	.word	0x00006781

00006780 <console_out>:
	if ('\n' == c) {
    6780:	280a      	cmp	r0, #10
{
    6782:	b538      	push	{r3, r4, r5, lr}
    6784:	4d07      	ldr	r5, [pc, #28]	; (67a4 <console_out+0x24>)
    6786:	4604      	mov	r4, r0
	if ('\n' == c) {
    6788:	d104      	bne.n	6794 <console_out+0x14>
    678a:	68ab      	ldr	r3, [r5, #8]
    678c:	210d      	movs	r1, #13
    678e:	685b      	ldr	r3, [r3, #4]
    6790:	4628      	mov	r0, r5
    6792:	4798      	blx	r3
    6794:	68ab      	ldr	r3, [r5, #8]
    6796:	4803      	ldr	r0, [pc, #12]	; (67a4 <console_out+0x24>)
    6798:	685b      	ldr	r3, [r3, #4]
    679a:	b2e1      	uxtb	r1, r4
    679c:	4798      	blx	r3
}
    679e:	4620      	mov	r0, r4
    67a0:	bd38      	pop	{r3, r4, r5, pc}
    67a2:	bf00      	nop
    67a4:	0000d010 	.word	0x0000d010

000067a8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    67a8:	b530      	push	{r4, r5, lr}
	return port->config;
    67aa:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    67ac:	7b05      	ldrb	r5, [r0, #12]
    67ae:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    67b2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    67b6:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    67b8:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    67bc:	d105      	bne.n	67ca <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    67be:	4620      	mov	r0, r4
    67c0:	f001 fa54 	bl	7c6c <nrfx_gpiote_trigger_disable>

		return 0;
    67c4:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    67c6:	b005      	add	sp, #20
    67c8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    67ca:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    67cc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    67d0:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    67d4:	d114      	bne.n	6800 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    67d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    67da:	bf0c      	ite	eq
    67dc:	2304      	moveq	r3, #4
    67de:	2305      	movne	r3, #5
    67e0:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    67e4:	2300      	movs	r3, #0
    67e6:	4619      	mov	r1, r3
    67e8:	aa02      	add	r2, sp, #8
    67ea:	4620      	mov	r0, r4
    67ec:	f001 f87c 	bl	78e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    67f0:	4b1f      	ldr	r3, [pc, #124]	; (6870 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    67f2:	4298      	cmp	r0, r3
    67f4:	d139      	bne.n	686a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    67f6:	2101      	movs	r1, #1
    67f8:	4620      	mov	r0, r4
    67fa:	f001 f9ef 	bl	7bdc <nrfx_gpiote_trigger_enable>
	return 0;
    67fe:	e7e1      	b.n	67c4 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6800:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    6804:	d026      	beq.n	6854 <gpio_nrfx_pin_interrupt_configure+0xac>
    6806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    680a:	bf14      	ite	ne
    680c:	2301      	movne	r3, #1
    680e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6810:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6814:	6883      	ldr	r3, [r0, #8]
    6816:	40cb      	lsrs	r3, r1
    6818:	07d9      	lsls	r1, r3, #31
    681a:	d4e3      	bmi.n	67e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
    681c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    6820:	d1e0      	bne.n	67e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    6822:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    6824:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    6826:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    682a:	4a12      	ldr	r2, [pc, #72]	; (6874 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    682c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    6830:	bf18      	it	ne
    6832:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    6836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    683a:	07db      	lsls	r3, r3, #31
    683c:	d4d2      	bmi.n	67e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    683e:	f10d 0507 	add.w	r5, sp, #7
    6842:	4629      	mov	r1, r5
    6844:	4620      	mov	r0, r4
    6846:	f001 f975 	bl	7b34 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    684a:	4b0b      	ldr	r3, [pc, #44]	; (6878 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    684c:	4298      	cmp	r0, r3
    684e:	d003      	beq.n	6858 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    6850:	9503      	str	r5, [sp, #12]
    6852:	e7c7      	b.n	67e4 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6854:	2303      	movs	r3, #3
    6856:	e7db      	b.n	6810 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    6858:	4628      	mov	r0, r5
    685a:	f001 f9b9 	bl	7bd0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    685e:	4b04      	ldr	r3, [pc, #16]	; (6870 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    6860:	4298      	cmp	r0, r3
    6862:	d0f5      	beq.n	6850 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    6864:	f06f 000b 	mvn.w	r0, #11
    6868:	e7ad      	b.n	67c6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    686a:	f06f 0015 	mvn.w	r0, #21
    686e:	e7aa      	b.n	67c6 <gpio_nrfx_pin_interrupt_configure+0x1e>
    6870:	0bad0000 	.word	0x0bad0000
    6874:	50000300 	.word	0x50000300
    6878:	0bad0004 	.word	0x0bad0004

0000687c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    687c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    687e:	f001 f997 	bl	7bb0 <nrfx_gpiote_is_init>
    6882:	4604      	mov	r4, r0
    6884:	b968      	cbnz	r0, 68a2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    6886:	f001 f96b 	bl	7b60 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    688a:	4b08      	ldr	r3, [pc, #32]	; (68ac <gpio_nrfx_init+0x30>)
    688c:	4298      	cmp	r0, r3
    688e:	d10a      	bne.n	68a6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    6890:	4807      	ldr	r0, [pc, #28]	; (68b0 <gpio_nrfx_init+0x34>)
    6892:	4621      	mov	r1, r4
    6894:	f001 f948 	bl	7b28 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6898:	4622      	mov	r2, r4
    689a:	2105      	movs	r1, #5
    689c:	2006      	movs	r0, #6
    689e:	f7fe f90d 	bl	4abc <z_arm_irq_priority_set>
		return 0;
    68a2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    68a4:	bd10      	pop	{r4, pc}
		return -EIO;
    68a6:	f06f 0004 	mvn.w	r0, #4
    68aa:	e7fb      	b.n	68a4 <gpio_nrfx_init+0x28>
    68ac:	0bad0000 	.word	0x0bad0000
    68b0:	000068b5 	.word	0x000068b5

000068b4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    68b4:	0942      	lsrs	r2, r0, #5
{
    68b6:	b570      	push	{r4, r5, r6, lr}
    68b8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    68ba:	d002      	beq.n	68c2 <nrfx_gpio_handler+0xe>
    68bc:	2a01      	cmp	r2, #1
    68be:	d017      	beq.n	68f0 <nrfx_gpio_handler+0x3c>
}
    68c0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    68c2:	4e0d      	ldr	r6, [pc, #52]	; (68f8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    68c4:	6932      	ldr	r2, [r6, #16]
    68c6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    68c8:	2900      	cmp	r1, #0
    68ca:	d0f9      	beq.n	68c0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    68cc:	f003 031f 	and.w	r3, r3, #31
    68d0:	2501      	movs	r5, #1
	return node->next;
    68d2:	680c      	ldr	r4, [r1, #0]
    68d4:	409d      	lsls	r5, r3
    68d6:	2900      	cmp	r1, #0
    68d8:	d0f2      	beq.n	68c0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    68da:	688a      	ldr	r2, [r1, #8]
    68dc:	402a      	ands	r2, r5
    68de:	d002      	beq.n	68e6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    68e0:	684b      	ldr	r3, [r1, #4]
    68e2:	4630      	mov	r0, r6
    68e4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    68e6:	b12c      	cbz	r4, 68f4 <nrfx_gpio_handler+0x40>
    68e8:	6823      	ldr	r3, [r4, #0]
    68ea:	4621      	mov	r1, r4
    68ec:	461c      	mov	r4, r3
    68ee:	e7f2      	b.n	68d6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    68f0:	4e02      	ldr	r6, [pc, #8]	; (68fc <nrfx_gpio_handler+0x48>)
    68f2:	e7e7      	b.n	68c4 <nrfx_gpio_handler+0x10>
    68f4:	4623      	mov	r3, r4
    68f6:	e7f8      	b.n	68ea <nrfx_gpio_handler+0x36>
    68f8:	0000cff8 	.word	0x0000cff8
    68fc:	0000cfe0 	.word	0x0000cfe0

00006900 <gpio_nrfx_pin_configure>:
{
    6900:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6904:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6906:	7b3b      	ldrb	r3, [r7, #12]
    6908:	f001 051f 	and.w	r5, r1, #31
    690c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    6910:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6912:	4628      	mov	r0, r5
    6914:	f10d 0103 	add.w	r1, sp, #3
{
    6918:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    691a:	f001 f90b 	bl	7b34 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    691e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6922:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6924:	d10b      	bne.n	693e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6926:	4628      	mov	r0, r5
    6928:	f001 f9c8 	bl	7cbc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    692c:	4b3d      	ldr	r3, [pc, #244]	; (6a24 <gpio_nrfx_pin_configure+0x124>)
    692e:	4598      	cmp	r8, r3
    6930:	d103      	bne.n	693a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    6932:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6936:	f001 f945 	bl	7bc4 <nrfx_gpiote_channel_free>
		return 0;
    693a:	2000      	movs	r0, #0
    693c:	e00c      	b.n	6958 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    693e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6940:	4619      	mov	r1, r3
    6942:	aa02      	add	r2, sp, #8
    6944:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    6946:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    694a:	f000 ffcd 	bl	78e8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    694e:	4b35      	ldr	r3, [pc, #212]	; (6a24 <gpio_nrfx_pin_configure+0x124>)
    6950:	4298      	cmp	r0, r3
    6952:	d004      	beq.n	695e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    6954:	f06f 0015 	mvn.w	r0, #21
}
    6958:	b004      	add	sp, #16
    695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    695e:	4580      	cmp	r8, r0
    6960:	d103      	bne.n	696a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    6962:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6966:	f001 f92d 	bl	7bc4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    696a:	03a3      	lsls	r3, r4, #14
    696c:	d54b      	bpl.n	6a06 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    696e:	f240 3306 	movw	r3, #774	; 0x306
    6972:	4023      	ands	r3, r4
    6974:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    6978:	d019      	beq.n	69ae <gpio_nrfx_pin_configure+0xae>
    697a:	d80c      	bhi.n	6996 <gpio_nrfx_pin_configure+0x96>
    697c:	2b06      	cmp	r3, #6
    697e:	d017      	beq.n	69b0 <gpio_nrfx_pin_configure+0xb0>
    6980:	d804      	bhi.n	698c <gpio_nrfx_pin_configure+0x8c>
    6982:	b1ab      	cbz	r3, 69b0 <gpio_nrfx_pin_configure+0xb0>
    6984:	2b02      	cmp	r3, #2
    6986:	d1e5      	bne.n	6954 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    6988:	2304      	movs	r3, #4
    698a:	e011      	b.n	69b0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    698c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6990:	d1e0      	bne.n	6954 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    6992:	2301      	movs	r3, #1
    6994:	e00c      	b.n	69b0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6996:	f240 2202 	movw	r2, #514	; 0x202
    699a:	4293      	cmp	r3, r2
    699c:	d027      	beq.n	69ee <gpio_nrfx_pin_configure+0xee>
    699e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    69a2:	d026      	beq.n	69f2 <gpio_nrfx_pin_configure+0xf2>
    69a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    69a8:	d1d4      	bne.n	6954 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    69aa:	2302      	movs	r3, #2
    69ac:	e000      	b.n	69b0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    69ae:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    69b0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    69b4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    69b8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    69bc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    69be:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    69c2:	bf54      	ite	pl
    69c4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    69c8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    69ca:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    69cc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    69d0:	d511      	bpl.n	69f6 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    69d2:	687a      	ldr	r2, [r7, #4]
    69d4:	2301      	movs	r3, #1
    69d6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    69d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    69dc:	2200      	movs	r2, #0
    69de:	a901      	add	r1, sp, #4
    69e0:	4628      	mov	r0, r5
    69e2:	f001 f82f 	bl	7a44 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    69e6:	4b0f      	ldr	r3, [pc, #60]	; (6a24 <gpio_nrfx_pin_configure+0x124>)
    69e8:	4298      	cmp	r0, r3
    69ea:	d0a6      	beq.n	693a <gpio_nrfx_pin_configure+0x3a>
    69ec:	e7b2      	b.n	6954 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    69ee:	2305      	movs	r3, #5
    69f0:	e7de      	b.n	69b0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    69f2:	2303      	movs	r3, #3
    69f4:	e7dc      	b.n	69b0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    69f6:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    69f8:	bf41      	itttt	mi
    69fa:	2301      	movmi	r3, #1
    69fc:	687a      	ldrmi	r2, [r7, #4]
    69fe:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    6a00:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    6a04:	e7ea      	b.n	69dc <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    6a06:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6a08:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    6a0c:	bf54      	ite	pl
    6a0e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6a12:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6a14:	461a      	mov	r2, r3
    6a16:	a901      	add	r1, sp, #4
    6a18:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    6a1a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6a1e:	f000 ff63 	bl	78e8 <nrfx_gpiote_input_configure>
    6a22:	e7e0      	b.n	69e6 <gpio_nrfx_pin_configure+0xe6>
    6a24:	0bad0000 	.word	0x0bad0000

00006a28 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    6a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6a2a:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    6a2c:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    6a2e:	69e3      	ldr	r3, [r4, #28]
{
    6a30:	af00      	add	r7, sp, #0
    6a32:	4605      	mov	r5, r0
	dev_config->irq_connect();
    6a34:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    6a36:	6a20      	ldr	r0, [r4, #32]
    6a38:	f005 fce2 	bl	c400 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    6a3c:	2800      	cmp	r0, #0
    6a3e:	db1f      	blt.n	6a80 <i2c_nrfx_twim_init+0x58>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    6a40:	4633      	mov	r3, r6
    6a42:	4a13      	ldr	r2, [pc, #76]	; (6a90 <i2c_nrfx_twim_init+0x68>)
    6a44:	f104 0108 	add.w	r1, r4, #8
    6a48:	4620      	mov	r0, r4
    6a4a:	f001 fad9 	bl	8000 <nrfx_twim_init>
    6a4e:	4b11      	ldr	r3, [pc, #68]	; (6a94 <i2c_nrfx_twim_init+0x6c>)
    6a50:	4298      	cmp	r0, r3
    6a52:	d017      	beq.n	6a84 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
    6a54:	466c      	mov	r4, sp
    6a56:	b088      	sub	sp, #32
    6a58:	682b      	ldr	r3, [r5, #0]
    6a5a:	466a      	mov	r2, sp
    6a5c:	490e      	ldr	r1, [pc, #56]	; (6a98 <i2c_nrfx_twim_init+0x70>)
    6a5e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6a62:	f44f 7300 	mov.w	r3, #512	; 0x200
    6a66:	8393      	strh	r3, [r2, #28]
    6a68:	4b0c      	ldr	r3, [pc, #48]	; (6a9c <i2c_nrfx_twim_init+0x74>)
    6a6a:	f842 3f10 	str.w	r3, [r2, #16]!
    6a6e:	480c      	ldr	r0, [pc, #48]	; (6aa0 <i2c_nrfx_twim_init+0x78>)
    6a70:	2300      	movs	r3, #0
    6a72:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    6a76:	f7fc f84d 	bl	2b14 <z_impl_z_log_msg_static_create>
		return -EIO;
    6a7a:	f06f 0004 	mvn.w	r0, #4
    6a7e:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
    6a80:	46bd      	mov	sp, r7
    6a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
    6a84:	4620      	mov	r0, r4
    6a86:	f001 fb1d 	bl	80c4 <nrfx_twim_enable>
	return 0;
    6a8a:	2000      	movs	r0, #0
    6a8c:	e7f8      	b.n	6a80 <i2c_nrfx_twim_init+0x58>
    6a8e:	bf00      	nop
    6a90:	00006ae1 	.word	0x00006ae1
    6a94:	0bad0000 	.word	0x0bad0000
    6a98:	0000e266 	.word	0x0000e266
    6a9c:	01000003 	.word	0x01000003
    6aa0:	0000d268 	.word	0x0000d268

00006aa4 <i2c_nrfx_twim_recover_bus>:
{
    6aa4:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6aa6:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    6aa8:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    6aaa:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    6aae:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    6ab2:	4620      	mov	r0, r4
    6ab4:	f001 fb16 	bl	80e4 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    6ab8:	4631      	mov	r1, r6
    6aba:	4628      	mov	r0, r5
    6abc:	f002 fcee 	bl	949c <nrfx_twi_twim_bus_recover>
    6ac0:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    6ac2:	6a20      	ldr	r0, [r4, #32]
    6ac4:	f005 fc9c 	bl	c400 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    6ac8:	4620      	mov	r0, r4
    6aca:	f001 fafb 	bl	80c4 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    6ace:	4b03      	ldr	r3, [pc, #12]	; (6adc <i2c_nrfx_twim_recover_bus+0x38>)
    6ad0:	429d      	cmp	r5, r3
}
    6ad2:	bf14      	ite	ne
    6ad4:	f06f 000f 	mvnne.w	r0, #15
    6ad8:	2000      	moveq	r0, #0
    6ada:	bd70      	pop	{r4, r5, r6, pc}
    6adc:	0bad0000 	.word	0x0bad0000

00006ae0 <event_handler>:
	switch (p_event->type) {
    6ae0:	7803      	ldrb	r3, [r0, #0]
    6ae2:	2b01      	cmp	r3, #1
    6ae4:	d008      	beq.n	6af8 <event_handler+0x18>
    6ae6:	2b02      	cmp	r3, #2
    6ae8:	d008      	beq.n	6afc <event_handler+0x1c>
    6aea:	b94b      	cbnz	r3, 6b00 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    6aec:	4b05      	ldr	r3, [pc, #20]	; (6b04 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    6aee:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    6af0:	f101 0010 	add.w	r0, r1, #16
    6af4:	f003 b8a6 	b.w	9c44 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6af8:	4b03      	ldr	r3, [pc, #12]	; (6b08 <event_handler+0x28>)
    6afa:	e7f8      	b.n	6aee <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6afc:	4b03      	ldr	r3, [pc, #12]	; (6b0c <event_handler+0x2c>)
    6afe:	e7f6      	b.n	6aee <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    6b00:	4b03      	ldr	r3, [pc, #12]	; (6b10 <event_handler+0x30>)
    6b02:	e7f4      	b.n	6aee <event_handler+0xe>
    6b04:	0bad0000 	.word	0x0bad0000
    6b08:	0bae0001 	.word	0x0bae0001
    6b0c:	0bae0002 	.word	0x0bae0002
    6b10:	0bad0001 	.word	0x0bad0001

00006b14 <i2c_nrfx_twim_configure>:
{
    6b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    6b16:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6b1a:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    6b1c:	d10f      	bne.n	6b3e <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
    6b1e:	f3c1 0142 	ubfx	r1, r1, #1, #3
    6b22:	2901      	cmp	r1, #1
    6b24:	d00e      	beq.n	6b44 <i2c_nrfx_twim_configure+0x30>
    6b26:	2902      	cmp	r1, #2
    6b28:	d015      	beq.n	6b56 <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
    6b2a:	4a0d      	ldr	r2, [pc, #52]	; (6b60 <i2c_nrfx_twim_configure+0x4c>)
    6b2c:	9205      	str	r2, [sp, #20]
    6b2e:	2202      	movs	r2, #2
    6b30:	9204      	str	r2, [sp, #16]
    6b32:	480c      	ldr	r0, [pc, #48]	; (6b64 <i2c_nrfx_twim_configure+0x50>)
    6b34:	aa04      	add	r2, sp, #16
    6b36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6b3a:	f7fb ffeb 	bl	2b14 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    6b3e:	f06f 0015 	mvn.w	r0, #21
    6b42:	e005      	b.n	6b50 <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6b44:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    6b46:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6b4a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    6b4e:	2000      	movs	r0, #0
}
    6b50:	b007      	add	sp, #28
    6b52:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    6b56:	6813      	ldr	r3, [r2, #0]
    6b58:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    6b5c:	e7f5      	b.n	6b4a <i2c_nrfx_twim_configure+0x36>
    6b5e:	bf00      	nop
    6b60:	0000e286 	.word	0x0000e286
    6b64:	0000d268 	.word	0x0000d268

00006b68 <i2c_nrfx_twim_transfer>:
{
    6b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b6c:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    6b6e:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    6b72:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
    6b76:	af00      	add	r7, sp, #0
    6b78:	461d      	mov	r5, r3
    6b7a:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    6b7c:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    6b80:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    6b84:	617b      	str	r3, [r7, #20]
{
    6b86:	4606      	mov	r6, r0
    6b88:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    6b8a:	2214      	movs	r2, #20
    6b8c:	2100      	movs	r1, #0
    6b8e:	f107 001c 	add.w	r0, r7, #28
    6b92:	f005 fad8 	bl	c146 <memset>
    6b96:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
    6b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ba0:	4648      	mov	r0, r9
    6ba2:	f003 f86f 	bl	9c84 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    6ba6:	f109 0310 	add.w	r3, r9, #16
    6baa:	60fb      	str	r3, [r7, #12]
    6bac:	2200      	movs	r2, #0
    6bae:	2300      	movs	r3, #0
    6bb0:	f109 0010 	add.w	r0, r9, #16
    6bb4:	f003 f866 	bl	9c84 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    6bb8:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    6bbc:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    6bbe:	693b      	ldr	r3, [r7, #16]
    6bc0:	4598      	cmp	r8, r3
    6bc2:	d301      	bcc.n	6bc8 <i2c_nrfx_twim_transfer+0x60>
    6bc4:	2400      	movs	r4, #0
    6bc6:	e038      	b.n	6c3a <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    6bc8:	7a20      	ldrb	r0, [r4, #8]
    6bca:	0702      	lsls	r2, r0, #28
    6bcc:	f100 80eb 	bmi.w	6da6 <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    6bd0:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
    6bd2:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    6bd6:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
    6bd8:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
    6bda:	d20a      	bcs.n	6bf2 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    6bdc:	0783      	lsls	r3, r0, #30
    6bde:	d408      	bmi.n	6bf2 <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    6be0:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    6be2:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    6be6:	f002 0201 	and.w	r2, r2, #1
    6bea:	f003 0304 	and.w	r3, r3, #4
    6bee:	431a      	orrs	r2, r3
    6bf0:	d02b      	beq.n	6c4a <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
    6bf2:	2d00      	cmp	r5, #0
    6bf4:	d03f      	beq.n	6c76 <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
    6bf6:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    6bf8:	6862      	ldr	r2, [r4, #4]
    6bfa:	f8d7 c014 	ldr.w	ip, [r7, #20]
    6bfe:	18a9      	adds	r1, r5, r2
    6c00:	4561      	cmp	r1, ip
    6c02:	d924      	bls.n	6c4e <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
    6c04:	466c      	mov	r4, sp
    6c06:	b08c      	sub	sp, #48	; 0x30
    6c08:	6831      	ldr	r1, [r6, #0]
    6c0a:	466b      	mov	r3, sp
    6c0c:	61da      	str	r2, [r3, #28]
    6c0e:	697a      	ldr	r2, [r7, #20]
    6c10:	4866      	ldr	r0, [pc, #408]	; (6dac <i2c_nrfx_twim_transfer+0x244>)
    6c12:	e9c3 2108 	strd	r2, r1, [r3, #32]
    6c16:	f240 5203 	movw	r2, #1283	; 0x503
    6c1a:	851a      	strh	r2, [r3, #40]	; 0x28
    6c1c:	461a      	mov	r2, r3
    6c1e:	e9c3 0505 	strd	r0, r5, [r3, #20]
    6c22:	4b63      	ldr	r3, [pc, #396]	; (6db0 <i2c_nrfx_twim_transfer+0x248>)
    6c24:	f842 3f10 	str.w	r3, [r2, #16]!
    6c28:	4862      	ldr	r0, [pc, #392]	; (6db4 <i2c_nrfx_twim_transfer+0x24c>)
    6c2a:	2300      	movs	r3, #0
    6c2c:	f44f 5151 	mov.w	r1, #13376	; 0x3440
    6c30:	f7fb ff70 	bl	2b14 <z_impl_z_log_msg_static_create>
    6c34:	46a5      	mov	sp, r4
				ret = -ENOSPC;
    6c36:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
    6c3a:	4648      	mov	r0, r9
    6c3c:	f003 f802 	bl	9c44 <z_impl_k_sem_give>
}
    6c40:	4620      	mov	r0, r4
    6c42:	3734      	adds	r7, #52	; 0x34
    6c44:	46bd      	mov	sp, r7
    6c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
    6c4a:	2301      	movs	r3, #1
    6c4c:	e7d4      	b.n	6bf8 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    6c4e:	07c1      	lsls	r1, r0, #31
    6c50:	d406      	bmi.n	6c60 <i2c_nrfx_twim_transfer+0xf8>
				memcpy(msg_buf + msg_buf_used,
    6c52:	6821      	ldr	r1, [r4, #0]
    6c54:	607b      	str	r3, [r7, #4]
    6c56:	eb0a 0005 	add.w	r0, sl, r5
    6c5a:	f005 fa69 	bl	c130 <memcpy>
    6c5e:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
    6c60:	6862      	ldr	r2, [r4, #4]
    6c62:	442a      	add	r2, r5
    6c64:	b295      	uxth	r5, r2
		if (concat_next) {
    6c66:	2b00      	cmp	r3, #0
    6c68:	f040 8085 	bne.w	6d76 <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
    6c6c:	b13d      	cbz	r5, 6c7e <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msg_buf;
    6c6e:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    6c72:	462b      	mov	r3, r5
    6c74:	e007      	b.n	6c86 <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6c76:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    6c78:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6c7c:	d51b      	bpl.n	6cb6 <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    6c7e:	6823      	ldr	r3, [r4, #0]
    6c80:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    6c82:	6863      	ldr	r3, [r4, #4]
    6c84:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    6c86:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    6c88:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    6c8a:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    6c8e:	f082 0202 	eor.w	r2, r2, #2
    6c92:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6c96:	0152      	lsls	r2, r2, #5
    6c98:	f107 011c 	add.w	r1, r7, #28
    6c9c:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    6c9e:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    6ca0:	f001 fa3e 	bl	8120 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    6ca4:	4b44      	ldr	r3, [pc, #272]	; (6db8 <i2c_nrfx_twim_transfer+0x250>)
    6ca6:	4298      	cmp	r0, r3
    6ca8:	d02c      	beq.n	6d04 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
    6caa:	330b      	adds	r3, #11
    6cac:	4298      	cmp	r0, r3
    6cae:	d144      	bne.n	6d3a <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
    6cb0:	f06f 040f 	mvn.w	r4, #15
    6cb4:	e7c1      	b.n	6c3a <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6cb6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6cbe:	d0de      	beq.n	6c7e <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    6cc0:	f8bb 301a 	ldrh.w	r3, [fp, #26]
    6cc4:	4293      	cmp	r3, r2
    6cc6:	d218      	bcs.n	6cfa <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    6cc8:	466c      	mov	r4, sp
    6cca:	b08a      	sub	sp, #40	; 0x28
    6ccc:	6831      	ldr	r1, [r6, #0]
    6cce:	466b      	mov	r3, sp
    6cd0:	483a      	ldr	r0, [pc, #232]	; (6dbc <i2c_nrfx_twim_transfer+0x254>)
    6cd2:	61d9      	str	r1, [r3, #28]
    6cd4:	e9c3 0205 	strd	r0, r2, [r3, #20]
    6cd8:	f240 3201 	movw	r2, #769	; 0x301
    6cdc:	841a      	strh	r2, [r3, #32]
    6cde:	461a      	mov	r2, r3
    6ce0:	4b37      	ldr	r3, [pc, #220]	; (6dc0 <i2c_nrfx_twim_transfer+0x258>)
    6ce2:	f842 3f10 	str.w	r3, [r2, #16]!
    6ce6:	4833      	ldr	r0, [pc, #204]	; (6db4 <i2c_nrfx_twim_transfer+0x24c>)
    6ce8:	462b      	mov	r3, r5
    6cea:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    6cee:	f7fb ff11 	bl	2b14 <z_impl_z_log_msg_static_create>
    6cf2:	46a5      	mov	sp, r4
				ret = -EINVAL;
    6cf4:	f06f 0415 	mvn.w	r4, #21
				break;
    6cf8:	e79f      	b.n	6c3a <i2c_nrfx_twim_transfer+0xd2>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    6cfa:	4650      	mov	r0, sl
    6cfc:	f005 fa18 	bl	c130 <memcpy>
			msg_buf_used = msgs[i].len;
    6d00:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    6d02:	e7b3      	b.n	6c6c <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
    6d04:	2300      	movs	r3, #0
    6d06:	68f8      	ldr	r0, [r7, #12]
    6d08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6d0c:	f002 ffba 	bl	9c84 <z_impl_k_sem_take>
		if (ret != 0) {
    6d10:	4603      	mov	r3, r0
    6d12:	b1a8      	cbz	r0, 6d40 <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    6d14:	466c      	mov	r4, sp
    6d16:	b088      	sub	sp, #32
    6d18:	466a      	mov	r2, sp
    6d1a:	4b2a      	ldr	r3, [pc, #168]	; (6dc4 <i2c_nrfx_twim_transfer+0x25c>)
    6d1c:	e9c2 3805 	strd	r3, r8, [r2, #20]
    6d20:	2303      	movs	r3, #3
    6d22:	f842 3f10 	str.w	r3, [r2, #16]!
    6d26:	4823      	ldr	r0, [pc, #140]	; (6db4 <i2c_nrfx_twim_transfer+0x24c>)
    6d28:	2300      	movs	r3, #0
    6d2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6d2e:	f7fb fef1 	bl	2b14 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
    6d32:	4630      	mov	r0, r6
    6d34:	46a5      	mov	sp, r4
    6d36:	f7ff feb5 	bl	6aa4 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    6d3a:	f06f 0404 	mvn.w	r4, #4
    6d3e:	e77c      	b.n	6c3a <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
    6d40:	f8d9 1020 	ldr.w	r1, [r9, #32]
		if (res != NRFX_SUCCESS) {
    6d44:	4a1c      	ldr	r2, [pc, #112]	; (6db8 <i2c_nrfx_twim_transfer+0x250>)
    6d46:	4291      	cmp	r1, r2
    6d48:	d011      	beq.n	6d6e <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    6d4a:	466c      	mov	r4, sp
    6d4c:	b088      	sub	sp, #32
    6d4e:	466a      	mov	r2, sp
    6d50:	481d      	ldr	r0, [pc, #116]	; (6dc8 <i2c_nrfx_twim_transfer+0x260>)
    6d52:	f8c2 801c 	str.w	r8, [r2, #28]
    6d56:	e9c2 0105 	strd	r0, r1, [r2, #20]
    6d5a:	2104      	movs	r1, #4
    6d5c:	f842 1f10 	str.w	r1, [r2, #16]!
    6d60:	4814      	ldr	r0, [pc, #80]	; (6db4 <i2c_nrfx_twim_transfer+0x24c>)
    6d62:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6d66:	f7fb fed5 	bl	2b14 <z_impl_z_log_msg_static_create>
    6d6a:	46a5      	mov	sp, r4
			break;
    6d6c:	e7e5      	b.n	6d3a <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
    6d6e:	7a23      	ldrb	r3, [r4, #8]
    6d70:	07db      	lsls	r3, r3, #31
    6d72:	d404      	bmi.n	6d7e <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
    6d74:	2500      	movs	r5, #0
    6d76:	f8d7 8008 	ldr.w	r8, [r7, #8]
    6d7a:	340c      	adds	r4, #12
    6d7c:	e71f      	b.n	6bbe <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
    6d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6d80:	459a      	cmp	sl, r3
    6d82:	d1f7      	bne.n	6d74 <i2c_nrfx_twim_transfer+0x20c>
    6d84:	46a0      	mov	r8, r4
    6d86:	e007      	b.n	6d98 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
    6d88:	1aa9      	subs	r1, r5, r2
    6d8a:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    6d8c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6d90:	fa1a f181 	uxtah	r1, sl, r1
    6d94:	f005 f9cc 	bl	c130 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    6d98:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6d9c:	4295      	cmp	r5, r2
    6d9e:	f1a8 080c 	sub.w	r8, r8, #12
    6da2:	d2f1      	bcs.n	6d88 <i2c_nrfx_twim_transfer+0x220>
    6da4:	e7e6      	b.n	6d74 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
    6da6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6daa:	e746      	b.n	6c3a <i2c_nrfx_twim_transfer+0xd2>
    6dac:	0000e298 	.word	0x0000e298
    6db0:	01000006 	.word	0x01000006
    6db4:	0000d268 	.word	0x0000d268
    6db8:	0bad0000 	.word	0x0bad0000
    6dbc:	0000e328 	.word	0x0000e328
    6dc0:	01000004 	.word	0x01000004
    6dc4:	0000e38e 	.word	0x0000e38e
    6dc8:	0000e3b8 	.word	0x0000e3b8

00006dcc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    6dce:	4e1c      	ldr	r6, [pc, #112]	; (6e40 <pinctrl_configure_pins+0x74>)
    6dd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6dd4:	4281      	cmp	r1, r0
    6dd6:	d101      	bne.n	6ddc <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    6dd8:	2000      	movs	r0, #0
    6dda:	e010      	b.n	6dfe <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    6ddc:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    6dde:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    6de2:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    6de4:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    6de8:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    6dec:	bf08      	it	eq
    6dee:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    6df2:	2b0b      	cmp	r3, #11
    6df4:	d004      	beq.n	6e00 <pinctrl_configure_pins+0x34>
    6df6:	2b0c      	cmp	r3, #12
    6df8:	d01f      	beq.n	6e3a <pinctrl_configure_pins+0x6e>
    6dfa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    6e00:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    6e04:	b905      	cbnz	r5, 6e08 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    6e06:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    6e08:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    6e0c:	f004 071f 	and.w	r7, r4, #31
    6e10:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    6e14:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    6e16:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    6e1a:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    6e20:	bf0c      	ite	eq
    6e22:	46b4      	moveq	ip, r6
    6e24:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    6e28:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    6e2c:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6e30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    6e34:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6e38:	e7cc      	b.n	6dd4 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    6e3a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    6e3e:	e7e1      	b.n	6e04 <pinctrl_configure_pins+0x38>
    6e40:	50000300 	.word	0x50000300

00006e44 <as5600_initialize>:

	return 0;
}

static int as5600_initialize(const struct device *dev)
{
    6e44:	b598      	push	{r3, r4, r7, lr}
	struct as5600_dev_data *const dev_data = dev->data;
    6e46:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    6e48:	2400      	movs	r4, #0
{
    6e4a:	af00      	add	r7, sp, #0
	dev_data->position = 0;
    6e4c:	801c      	strh	r4, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);
    6e4e:	b088      	sub	sp, #32
    6e50:	6803      	ldr	r3, [r0, #0]
    6e52:	466a      	mov	r2, sp
    6e54:	4908      	ldr	r1, [pc, #32]	; (6e78 <as5600_initialize+0x34>)
    6e56:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
    6e5e:	8393      	strh	r3, [r2, #28]
    6e60:	4b06      	ldr	r3, [pc, #24]	; (6e7c <as5600_initialize+0x38>)
    6e62:	f842 3f10 	str.w	r3, [r2, #16]!
    6e66:	4806      	ldr	r0, [pc, #24]	; (6e80 <as5600_initialize+0x3c>)
    6e68:	4623      	mov	r3, r4
    6e6a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    6e6e:	f7fb fe51 	bl	2b14 <z_impl_z_log_msg_static_create>

	return 0;
}
    6e72:	4620      	mov	r0, r4
    6e74:	46bd      	mov	sp, r7
    6e76:	bd98      	pop	{r3, r4, r7, pc}
    6e78:	0000e3f8 	.word	0x0000e3f8
    6e7c:	01000003 	.word	0x01000003
    6e80:	0000d240 	.word	0x0000d240

00006e84 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6e84:	4b01      	ldr	r3, [pc, #4]	; (6e8c <hfclk_on_callback+0x8>)
    6e86:	2201      	movs	r2, #1
    6e88:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    6e8a:	4770      	bx	lr
    6e8c:	4000c000 	.word	0x4000c000

00006e90 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    6e90:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    6e92:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    6e94:	d10b      	bne.n	6eae <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e98:	4906      	ldr	r1, [pc, #24]	; (6eb4 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    6e9a:	4807      	ldr	r0, [pc, #28]	; (6eb8 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6e9c:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    6e9e:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    6ea2:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    6ea6:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    6ea8:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    6eaa:	2000      	movs	r0, #0
    6eac:	4770      	bx	lr
		return -ENOTSUP;
    6eae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6eb2:	4770      	bx	lr
    6eb4:	0003d090 	.word	0x0003d090
    6eb8:	000f4240 	.word	0x000f4240

00006ebc <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6ebc:	4b04      	ldr	r3, [pc, #16]	; (6ed0 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    6ebe:	6900      	ldr	r0, [r0, #16]
    6ec0:	2200      	movs	r2, #0
    6ec2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6ec6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    6eca:	f002 bebb 	b.w	9c44 <z_impl_k_sem_give>
    6ece:	bf00      	nop
    6ed0:	4000c000 	.word	0x4000c000

00006ed4 <temp_nrf5_sample_fetch>:
{
    6ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    6ed6:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    6ed8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6eda:	b363      	cbz	r3, 6f36 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    6edc:	2939      	cmp	r1, #57	; 0x39
    6ede:	d001      	beq.n	6ee4 <temp_nrf5_sample_fetch+0x10>
    6ee0:	290c      	cmp	r1, #12
    6ee2:	d12b      	bne.n	6f3c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    6ee4:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ef0:	4630      	mov	r0, r6
    6ef2:	f002 fdbd 	bl	9a70 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    6ef6:	4b13      	ldr	r3, [pc, #76]	; (6f44 <temp_nrf5_sample_fetch+0x70>)
    6ef8:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    6efa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6efc:	2303      	movs	r3, #3
    6efe:	2400      	movs	r4, #0
    6f00:	4669      	mov	r1, sp
    6f02:	9403      	str	r4, [sp, #12]
    6f04:	9302      	str	r3, [sp, #8]
    6f06:	f004 fabb 	bl	b480 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    6f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6f12:	4628      	mov	r0, r5
    6f14:	f002 feb6 	bl	9c84 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    6f18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6f1a:	f004 fb09 	bl	b530 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    6f1e:	4b0a      	ldr	r3, [pc, #40]	; (6f48 <temp_nrf5_sample_fetch+0x74>)
    6f20:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    6f24:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6f26:	2201      	movs	r2, #1
    6f28:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6f2a:	4630      	mov	r0, r6
    6f2c:	f002 fe1a 	bl	9b64 <z_impl_k_mutex_unlock>
	return 0;
    6f30:	4620      	mov	r0, r4
}
    6f32:	b004      	add	sp, #16
    6f34:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    6f36:	f06f 000a 	mvn.w	r0, #10
    6f3a:	e7fa      	b.n	6f32 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    6f3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6f40:	e7f7      	b.n	6f32 <temp_nrf5_sample_fetch+0x5e>
    6f42:	bf00      	nop
    6f44:	00006e85 	.word	0x00006e85
    6f48:	4000c000 	.word	0x4000c000

00006f4c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    6f4c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    6f4e:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    6f50:	2000      	movs	r0, #0
    6f52:	f7ff fb7b 	bl	664c <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    6f56:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    6f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6f5c:	2100      	movs	r1, #0
    6f5e:	4620      	mov	r0, r4
    6f60:	f005 fd5f 	bl	ca22 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    6f64:	f104 0010 	add.w	r0, r4, #16
    6f68:	f005 fcdb 	bl	c922 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    6f6c:	2200      	movs	r2, #0
    6f6e:	2101      	movs	r1, #1
    6f70:	200c      	movs	r0, #12
    6f72:	f7fd fda3 	bl	4abc <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    6f76:	200c      	movs	r0, #12
    6f78:	f7fd fd70 	bl	4a5c <arch_irq_enable>
    p_reg->INTENSET = mask;
    6f7c:	4b02      	ldr	r3, [pc, #8]	; (6f88 <temp_nrf5_init+0x3c>)
    6f7e:	2201      	movs	r2, #1
    6f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    6f84:	2000      	movs	r0, #0
    6f86:	bd10      	pop	{r4, pc}
    6f88:	4000c000 	.word	0x4000c000

00006f8c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6f8c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6f8e:	2301      	movs	r3, #1
    6f90:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f92:	4a0e      	ldr	r2, [pc, #56]	; (6fcc <compare_int_lock+0x40>)
    6f94:	f3bf 8f5b 	dmb	ish
    6f98:	43dc      	mvns	r4, r3
    6f9a:	e852 1f00 	ldrex	r1, [r2]
    6f9e:	ea01 0504 	and.w	r5, r1, r4
    6fa2:	e842 5600 	strex	r6, r5, [r2]
    6fa6:	2e00      	cmp	r6, #0
    6fa8:	d1f7      	bne.n	6f9a <compare_int_lock+0xe>
    6faa:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6fb2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    6fb4:	4806      	ldr	r0, [pc, #24]	; (6fd0 <compare_int_lock+0x44>)
    6fb6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6fba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fbe:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6fc2:	420b      	tst	r3, r1
}
    6fc4:	bf14      	ite	ne
    6fc6:	2001      	movne	r0, #1
    6fc8:	2000      	moveq	r0, #0
    6fca:	bd70      	pop	{r4, r5, r6, pc}
    6fcc:	20001c78 	.word	0x20001c78
    6fd0:	40011000 	.word	0x40011000

00006fd4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6fd4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6fd6:	490e      	ldr	r1, [pc, #56]	; (7010 <sys_clock_timeout_handler+0x3c>)
    6fd8:	e9d1 3400 	ldrd	r3, r4, [r1]
    6fdc:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    6fde:	18c3      	adds	r3, r0, r3
    6fe0:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    6fe4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    6fe8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6fec:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6ff0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6ff4:	d209      	bcs.n	700a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6ff6:	4b07      	ldr	r3, [pc, #28]	; (7014 <sys_clock_timeout_handler+0x40>)
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	0a1a      	lsrs	r2, r3, #8
    6ffc:	061b      	lsls	r3, r3, #24
    6ffe:	199c      	adds	r4, r3, r6
    7000:	4b05      	ldr	r3, [pc, #20]	; (7018 <sys_clock_timeout_handler+0x44>)
    7002:	f142 0500 	adc.w	r5, r2, #0
    7006:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    700a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    700c:	f003 bbfe 	b.w	a80c <sys_clock_announce>
    7010:	20000a18 	.word	0x20000a18
    7014:	20001c7c 	.word	0x20001c7c
    7018:	20000a20 	.word	0x20000a20

0000701c <compare_int_unlock>:
	if (key) {
    701c:	b311      	cbz	r1, 7064 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    701e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    7022:	2301      	movs	r3, #1
    7024:	4a10      	ldr	r2, [pc, #64]	; (7068 <compare_int_unlock+0x4c>)
    7026:	4083      	lsls	r3, r0
    7028:	e852 cf00 	ldrex	ip, [r2]
    702c:	ea4c 0c03 	orr.w	ip, ip, r3
    7030:	e842 c100 	strex	r1, ip, [r2]
    7034:	2900      	cmp	r1, #0
    7036:	d1f7      	bne.n	7028 <compare_int_unlock+0xc>
    7038:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    703c:	4a0b      	ldr	r2, [pc, #44]	; (706c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    703e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7042:	4083      	lsls	r3, r0
    7044:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7048:	4b09      	ldr	r3, [pc, #36]	; (7070 <compare_int_unlock+0x54>)
    704a:	f3bf 8f5b 	dmb	ish
    704e:	681b      	ldr	r3, [r3, #0]
    7050:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7054:	40c3      	lsrs	r3, r0
    7056:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7058:	bf42      	ittt	mi
    705a:	4b06      	ldrmi	r3, [pc, #24]	; (7074 <compare_int_unlock+0x58>)
    705c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    7060:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    7064:	4770      	bx	lr
    7066:	bf00      	nop
    7068:	20001c78 	.word	0x20001c78
    706c:	40011000 	.word	0x40011000
    7070:	20001c74 	.word	0x20001c74
    7074:	e000e100 	.word	0xe000e100

00007078 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7078:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <z_nrf_rtc_timer_read+0x38>)
    707a:	6818      	ldr	r0, [r3, #0]
    707c:	0a01      	lsrs	r1, r0, #8
    707e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7080:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    7084:	4b0b      	ldr	r3, [pc, #44]	; (70b4 <z_nrf_rtc_timer_read+0x3c>)
    7086:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    708a:	1818      	adds	r0, r3, r0
    708c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7094:	d20a      	bcs.n	70ac <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    7096:	4b08      	ldr	r3, [pc, #32]	; (70b8 <z_nrf_rtc_timer_read+0x40>)
    7098:	e9d3 2300 	ldrd	r2, r3, [r3]
    709c:	4290      	cmp	r0, r2
    709e:	eb71 0303 	sbcs.w	r3, r1, r3
    70a2:	d203      	bcs.n	70ac <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    70a4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    70a8:	f141 0100 	adc.w	r1, r1, #0
}
    70ac:	4770      	bx	lr
    70ae:	bf00      	nop
    70b0:	20001c7c 	.word	0x20001c7c
    70b4:	40011000 	.word	0x40011000
    70b8:	20000a20 	.word	0x20000a20

000070bc <compare_set>:
{
    70bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c0:	4616      	mov	r6, r2
    70c2:	461f      	mov	r7, r3
    70c4:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    70c6:	f7ff ff61 	bl	6f8c <compare_int_lock>
    70ca:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    70cc:	f7ff ffd4 	bl	7078 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    70d0:	42b0      	cmp	r0, r6
    70d2:	eb71 0307 	sbcs.w	r3, r1, r7
    70d6:	d251      	bcs.n	717c <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    70d8:	4b3a      	ldr	r3, [pc, #232]	; (71c4 <compare_set+0x108>)
    70da:	1a30      	subs	r0, r6, r0
    70dc:	eb67 0101 	sbc.w	r1, r7, r1
    70e0:	4298      	cmp	r0, r3
    70e2:	f171 0100 	sbcs.w	r1, r1, #0
    70e6:	d26a      	bcs.n	71be <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    70e8:	4b37      	ldr	r3, [pc, #220]	; (71c8 <compare_set+0x10c>)
    70ea:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    70ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    70f2:	429f      	cmp	r7, r3
    70f4:	bf08      	it	eq
    70f6:	4296      	cmpeq	r6, r2
    70f8:	d04e      	beq.n	7198 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    70fa:	4934      	ldr	r1, [pc, #208]	; (71cc <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    70fc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7100:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7104:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7108:	00ad      	lsls	r5, r5, #2
    710a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    710e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7110:	b2ad      	uxth	r5, r5
    7112:	f005 f9d2 	bl	c4ba <event_clear>
	return absolute_time & COUNTER_MAX;
    7116:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    711a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    711e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7122:	4a2b      	ldr	r2, [pc, #172]	; (71d0 <compare_set+0x114>)
    7124:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7126:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    712a:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    712c:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    7130:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7132:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    7136:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    713a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    713e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7142:	f06f 0002 	mvn.w	r0, #2
    7146:	eba0 0008 	sub.w	r0, r0, r8
    714a:	4460      	add	r0, ip
    714c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    7150:	4290      	cmp	r0, r2
    7152:	d921      	bls.n	7198 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7154:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    7156:	b160      	cbz	r0, 7172 <compare_set+0xb6>
     return p_reg->COUNTER;
    7158:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    715c:	eba8 000b 	sub.w	r0, r8, fp
    7160:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    7164:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7168:	d916      	bls.n	7198 <compare_set+0xdc>
					event_clear(chan);
    716a:	4620      	mov	r0, r4
    716c:	f005 f9a5 	bl	c4ba <event_clear>
    7170:	4a17      	ldr	r2, [pc, #92]	; (71d0 <compare_set+0x114>)
			cc_val = now + cc_inc;
    7172:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    7176:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    717a:	e7d9      	b.n	7130 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    717c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    717e:	4a15      	ldr	r2, [pc, #84]	; (71d4 <compare_set+0x118>)
    7180:	f3bf 8f5b 	dmb	ish
    7184:	40a3      	lsls	r3, r4
    7186:	e852 0f00 	ldrex	r0, [r2]
    718a:	4318      	orrs	r0, r3
    718c:	e842 0100 	strex	r1, r0, [r2]
    7190:	2900      	cmp	r1, #0
    7192:	d1f8      	bne.n	7186 <compare_set+0xca>
    7194:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    7198:	490b      	ldr	r1, [pc, #44]	; (71c8 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    719a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    719c:	0123      	lsls	r3, r4, #4
    719e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    71a2:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    71a6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    71a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71aa:	6053      	str	r3, [r2, #4]
	return ret;
    71ac:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    71ae:	4620      	mov	r0, r4
    71b0:	9900      	ldr	r1, [sp, #0]
    71b2:	f7ff ff33 	bl	701c <compare_int_unlock>
}
    71b6:	4628      	mov	r0, r5
    71b8:	b003      	add	sp, #12
    71ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    71be:	f06f 0515 	mvn.w	r5, #21
    71c2:	e7f4      	b.n	71ae <compare_set+0xf2>
    71c4:	00800001 	.word	0x00800001
    71c8:	20000a08 	.word	0x20000a08
    71cc:	40011000 	.word	0x40011000
    71d0:	007ffffd 	.word	0x007ffffd
    71d4:	20001c74 	.word	0x20001c74

000071d8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    71d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    71da:	4c1b      	ldr	r4, [pc, #108]	; (7248 <sys_clock_driver_init+0x70>)
    71dc:	4b1b      	ldr	r3, [pc, #108]	; (724c <sys_clock_driver_init+0x74>)
    71de:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    71e2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    71e6:	4b1a      	ldr	r3, [pc, #104]	; (7250 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    71e8:	2500      	movs	r5, #0
    71ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    71ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    71f2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    71f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    71fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    71fe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7202:	4b14      	ldr	r3, [pc, #80]	; (7254 <sys_clock_driver_init+0x7c>)
    7204:	2602      	movs	r6, #2
    7206:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    720a:	2101      	movs	r1, #1
    720c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    7210:	2011      	movs	r0, #17
    7212:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    7216:	462a      	mov	r2, r5
    7218:	f7fd fc50 	bl	4abc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    721c:	2011      	movs	r0, #17
    721e:	f7fd fc1d 	bl	4a5c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7222:	4a0d      	ldr	r2, [pc, #52]	; (7258 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7224:	2301      	movs	r3, #1
    7226:	60a3      	str	r3, [r4, #8]
    7228:	6023      	str	r3, [r4, #0]
    722a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    722c:	4b0b      	ldr	r3, [pc, #44]	; (725c <sys_clock_driver_init+0x84>)
    722e:	4a0c      	ldr	r2, [pc, #48]	; (7260 <sys_clock_driver_init+0x88>)
    7230:	9300      	str	r3, [sp, #0]
    7232:	9501      	str	r5, [sp, #4]
    7234:	2300      	movs	r3, #0
    7236:	4628      	mov	r0, r5
    7238:	f7ff ff40 	bl	70bc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    723c:	4630      	mov	r0, r6
    723e:	f7ff fa0d 	bl	665c <z_nrf_clock_control_lf_on>

	return 0;
}
    7242:	4628      	mov	r0, r5
    7244:	b002      	add	sp, #8
    7246:	bd70      	pop	{r4, r5, r6, pc}
    7248:	40011000 	.word	0x40011000
    724c:	000f0003 	.word	0x000f0003
    7250:	20000a08 	.word	0x20000a08
    7254:	e000e100 	.word	0xe000e100
    7258:	20001c78 	.word	0x20001c78
    725c:	00006fd5 	.word	0x00006fd5
    7260:	007fffff 	.word	0x007fffff

00007264 <rtc_nrf_isr>:
{
    7264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    7268:	4c2f      	ldr	r4, [pc, #188]	; (7328 <rtc_nrf_isr+0xc4>)
    726a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    726e:	0799      	lsls	r1, r3, #30
    7270:	d50b      	bpl.n	728a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7272:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7276:	b143      	cbz	r3, 728a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    7278:	4a2c      	ldr	r2, [pc, #176]	; (732c <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    727a:	2300      	movs	r3, #0
    727c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7280:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7284:	6813      	ldr	r3, [r2, #0]
    7286:	3301      	adds	r3, #1
    7288:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    728a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    728e:	03da      	lsls	r2, r3, #15
    7290:	d52a      	bpl.n	72e8 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7292:	f3bf 8f5b 	dmb	ish
    7296:	4b26      	ldr	r3, [pc, #152]	; (7330 <rtc_nrf_isr+0xcc>)
    7298:	e853 2f00 	ldrex	r2, [r3]
    729c:	f022 0101 	bic.w	r1, r2, #1
    72a0:	e843 1000 	strex	r0, r1, [r3]
    72a4:	2800      	cmp	r0, #0
    72a6:	d1f7      	bne.n	7298 <rtc_nrf_isr+0x34>
    72a8:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    72ac:	07d3      	lsls	r3, r2, #31
    72ae:	d402      	bmi.n	72b6 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    72b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    72b4:	b1c3      	cbz	r3, 72e8 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    72b6:	2500      	movs	r5, #0
    72b8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    72bc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    72c0:	f7ff feda 	bl	7078 <z_nrf_rtc_timer_read>
    72c4:	f04f 0320 	mov.w	r3, #32
    72c8:	f3ef 8211 	mrs	r2, BASEPRI
    72cc:	f383 8812 	msr	BASEPRI_MAX, r3
    72d0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    72d4:	4b17      	ldr	r3, [pc, #92]	; (7334 <rtc_nrf_isr+0xd0>)
    72d6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    72da:	42b0      	cmp	r0, r6
    72dc:	41b9      	sbcs	r1, r7
    72de:	d206      	bcs.n	72ee <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    72e0:	f382 8811 	msr	BASEPRI, r2
    72e4:	f3bf 8f6f 	isb	sy
}
    72e8:	b003      	add	sp, #12
    72ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    72ee:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    72f2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    72f6:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    72fa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    72fe:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    7300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7304:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7308:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    730c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7310:	f382 8811 	msr	BASEPRI, r2
    7314:	f3bf 8f6f 	isb	sy
		if (handler) {
    7318:	2900      	cmp	r1, #0
    731a:	d0e5      	beq.n	72e8 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    731c:	9000      	str	r0, [sp, #0]
    731e:	4632      	mov	r2, r6
    7320:	463b      	mov	r3, r7
    7322:	4628      	mov	r0, r5
    7324:	4788      	blx	r1
    7326:	e7df      	b.n	72e8 <rtc_nrf_isr+0x84>
    7328:	40011000 	.word	0x40011000
    732c:	20001c7c 	.word	0x20001c7c
    7330:	20001c74 	.word	0x20001c74
    7334:	20000a08 	.word	0x20000a08

00007338 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    7338:	1c43      	adds	r3, r0, #1
{
    733a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    733c:	d022      	beq.n	7384 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    733e:	2801      	cmp	r0, #1
    7340:	dd22      	ble.n	7388 <sys_clock_set_timeout+0x50>
    7342:	4a12      	ldr	r2, [pc, #72]	; (738c <sys_clock_set_timeout+0x54>)
    7344:	4b12      	ldr	r3, [pc, #72]	; (7390 <sys_clock_set_timeout+0x58>)
    7346:	4290      	cmp	r0, r2
    7348:	bfd4      	ite	le
    734a:	4604      	movle	r4, r0
    734c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    734e:	f7ff fe93 	bl	7078 <z_nrf_rtc_timer_read>
    7352:	4b10      	ldr	r3, [pc, #64]	; (7394 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    7354:	490e      	ldr	r1, [pc, #56]	; (7390 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    7356:	e9d3 2300 	ldrd	r2, r3, [r3]
    735a:	1a80      	subs	r0, r0, r2
		cyc = 0;
    735c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7360:	bf28      	it	cs
    7362:	2400      	movcs	r4, #0
	cyc += unannounced;
    7364:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    7366:	428c      	cmp	r4, r1
    7368:	bf28      	it	cs
    736a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    736c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    736e:	490a      	ldr	r1, [pc, #40]	; (7398 <sys_clock_set_timeout+0x60>)
    7370:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    7372:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    7376:	9001      	str	r0, [sp, #4]
    7378:	f143 0300 	adc.w	r3, r3, #0
    737c:	f7ff fe9e 	bl	70bc <compare_set>
}
    7380:	b002      	add	sp, #8
    7382:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    7384:	4c02      	ldr	r4, [pc, #8]	; (7390 <sys_clock_set_timeout+0x58>)
    7386:	e7e2      	b.n	734e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    7388:	2401      	movs	r4, #1
    738a:	e7e0      	b.n	734e <sys_clock_set_timeout+0x16>
    738c:	007ffffe 	.word	0x007ffffe
    7390:	007fffff 	.word	0x007fffff
    7394:	20000a18 	.word	0x20000a18
    7398:	00006fd5 	.word	0x00006fd5

0000739c <sys_clock_elapsed>:
{
    739c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    739e:	f7ff fe6b 	bl	7078 <z_nrf_rtc_timer_read>
    73a2:	4b02      	ldr	r3, [pc, #8]	; (73ac <sys_clock_elapsed+0x10>)
    73a4:	681b      	ldr	r3, [r3, #0]
}
    73a6:	1ac0      	subs	r0, r0, r3
    73a8:	bd08      	pop	{r3, pc}
    73aa:	bf00      	nop
    73ac:	20000a18 	.word	0x20000a18

000073b0 <sys_clock_disable>:
{
    73b0:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    73b2:	4c08      	ldr	r4, [pc, #32]	; (73d4 <sys_clock_disable+0x24>)
    73b4:	2301      	movs	r3, #1
    73b6:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    73b8:	2011      	movs	r0, #17
    73ba:	f7fd fb5d 	bl	4a78 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    73be:	4b06      	ldr	r3, [pc, #24]	; (73d8 <sys_clock_disable+0x28>)
    73c0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    73c4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    73c8:	4b04      	ldr	r3, [pc, #16]	; (73dc <sys_clock_disable+0x2c>)
    73ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    73ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    73d2:	bd10      	pop	{r4, pc}
    73d4:	40011000 	.word	0x40011000
    73d8:	000f0003 	.word	0x000f0003
    73dc:	e000e100 	.word	0xe000e100

000073e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    73e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    73e2:	f7fb fab7 	bl	2954 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    73e6:	4b07      	ldr	r3, [pc, #28]	; (7404 <k_sys_fatal_error_handler+0x24>)
    73e8:	9305      	str	r3, [sp, #20]
    73ea:	2302      	movs	r3, #2
    73ec:	9304      	str	r3, [sp, #16]
    73ee:	4806      	ldr	r0, [pc, #24]	; (7408 <k_sys_fatal_error_handler+0x28>)
    73f0:	2300      	movs	r3, #0
    73f2:	aa04      	add	r2, sp, #16
    73f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    73f8:	f7fb fb8c 	bl	2b14 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    73fc:	2000      	movs	r0, #0
    73fe:	f7fe f8fd 	bl	55fc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    7402:	bf00      	nop
    7404:	0000e43b 	.word	0x0000e43b
    7408:	0000d258 	.word	0x0000d258

0000740c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    740c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7410:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7414:	2a08      	cmp	r2, #8
    7416:	d106      	bne.n	7426 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7418:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    741c:	2b05      	cmp	r3, #5
    741e:	d802      	bhi.n	7426 <nrf52_errata_103+0x1a>
    7420:	4a02      	ldr	r2, [pc, #8]	; (742c <nrf52_errata_103+0x20>)
    7422:	5cd0      	ldrb	r0, [r2, r3]
    7424:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    7426:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    7428:	4770      	bx	lr
    742a:	bf00      	nop
    742c:	0000e45e 	.word	0x0000e45e

00007430 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7430:	4a02      	ldr	r2, [pc, #8]	; (743c <nvmc_wait+0xc>)
    7432:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7436:	2b00      	cmp	r3, #0
    7438:	d0fb      	beq.n	7432 <nvmc_wait+0x2>
}
    743a:	4770      	bx	lr
    743c:	4001e000 	.word	0x4001e000

00007440 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    7440:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7442:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7446:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    744a:	2a08      	cmp	r2, #8
    744c:	d14e      	bne.n	74ec <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    744e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7452:	2100      	movs	r1, #0
    7454:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7458:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    745c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7460:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    7464:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    7468:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    746c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    7470:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7474:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    7478:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    747c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    7480:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7484:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    7488:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    748c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    7490:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7494:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    7498:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    749c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    74a0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    74a4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    74a8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    74ac:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    74b0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    74b4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    74b8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    74bc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    74c0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    74c4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    74c8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    74cc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    74d0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    74d4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    74d8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    74dc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    74e0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    74e4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    74e8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    74ec:	f7ff ff8e 	bl	740c <nrf52_errata_103>
    74f0:	b118      	cbz	r0, 74fa <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    74f2:	4b3a      	ldr	r3, [pc, #232]	; (75dc <SystemInit+0x19c>)
    74f4:	4a3a      	ldr	r2, [pc, #232]	; (75e0 <SystemInit+0x1a0>)
    74f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    74fa:	f7ff ff87 	bl	740c <nrf52_errata_103>
    74fe:	b118      	cbz	r0, 7508 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    7500:	4b38      	ldr	r3, [pc, #224]	; (75e4 <SystemInit+0x1a4>)
    7502:	22fb      	movs	r2, #251	; 0xfb
    7504:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    7508:	f7ff ff80 	bl	740c <nrf52_errata_103>
    750c:	b170      	cbz	r0, 752c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    750e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7516:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    751a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    751e:	f022 020f 	bic.w	r2, r2, #15
    7522:	f003 030f 	and.w	r3, r3, #15
    7526:	4313      	orrs	r3, r2
    7528:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    752c:	f7ff ff6e 	bl	740c <nrf52_errata_103>
    7530:	b120      	cbz	r0, 753c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    7532:	4b2d      	ldr	r3, [pc, #180]	; (75e8 <SystemInit+0x1a8>)
    7534:	f44f 7200 	mov.w	r2, #512	; 0x200
    7538:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    753c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7540:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7544:	2b08      	cmp	r3, #8
    7546:	d11a      	bne.n	757e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    754c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7550:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7552:	bf44      	itt	mi
    7554:	f06f 0201 	mvnmi.w	r2, #1
    7558:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    755c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7560:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    7564:	2b05      	cmp	r3, #5
    7566:	d802      	bhi.n	756e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    7568:	4a20      	ldr	r2, [pc, #128]	; (75ec <SystemInit+0x1ac>)
    756a:	5cd3      	ldrb	r3, [r2, r3]
    756c:	b13b      	cbz	r3, 757e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    756e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7572:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    757a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    757e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7582:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    7586:	2a00      	cmp	r2, #0
    7588:	db03      	blt.n	7592 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    758a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    758e:	2b00      	cmp	r3, #0
    7590:	da22      	bge.n	75d8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7592:	4917      	ldr	r1, [pc, #92]	; (75f0 <SystemInit+0x1b0>)
    7594:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7596:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    759a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    759e:	2412      	movs	r4, #18
    nvmc_wait();
    75a0:	f7ff ff46 	bl	7430 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    75a4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    75a8:	f7ff ff42 	bl	7430 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    75ac:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    75b0:	f7ff ff3e 	bl	7430 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    75b4:	2300      	movs	r3, #0
    75b6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    75ba:	f7ff ff39 	bl	7430 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    75be:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    75c2:	490c      	ldr	r1, [pc, #48]	; (75f4 <SystemInit+0x1b4>)
    75c4:	4b0c      	ldr	r3, [pc, #48]	; (75f8 <SystemInit+0x1b8>)
    75c6:	68ca      	ldr	r2, [r1, #12]
    75c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    75cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    75ce:	60cb      	str	r3, [r1, #12]
    75d0:	f3bf 8f4f 	dsb	sy
    __NOP();
    75d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    75d6:	e7fd      	b.n	75d4 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    75d8:	bd10      	pop	{r4, pc}
    75da:	bf00      	nop
    75dc:	40005000 	.word	0x40005000
    75e0:	00038148 	.word	0x00038148
    75e4:	4000f000 	.word	0x4000f000
    75e8:	40029000 	.word	0x40029000
    75ec:	0000e458 	.word	0x0000e458
    75f0:	4001e000 	.word	0x4001e000
    75f4:	e000ed00 	.word	0xe000ed00
    75f8:	05fa0004 	.word	0x05fa0004

000075fc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    75fc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    75fe:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    7600:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7602:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    7606:	fab2 f382 	clz	r3, r2
    760a:	f1c3 031f 	rsb	r3, r3, #31
    760e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    7610:	fa05 f403 	lsl.w	r4, r5, r3
    7614:	ea22 0404 	bic.w	r4, r2, r4
    7618:	e850 6f00 	ldrex	r6, [r0]
    761c:	4296      	cmp	r6, r2
    761e:	d104      	bne.n	762a <nrfx_flag32_alloc+0x2e>
    7620:	e840 4c00 	strex	ip, r4, [r0]
    7624:	f1bc 0f00 	cmp.w	ip, #0
    7628:	d1f6      	bne.n	7618 <nrfx_flag32_alloc+0x1c>
    762a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    762e:	d1e7      	bne.n	7600 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    7630:	4801      	ldr	r0, [pc, #4]	; (7638 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    7632:	700b      	strb	r3, [r1, #0]
}
    7634:	bd70      	pop	{r4, r5, r6, pc}
    7636:	bf00      	nop
    7638:	0bad0000 	.word	0x0bad0000

0000763c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    763c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    763e:	6803      	ldr	r3, [r0, #0]
    7640:	40cb      	lsrs	r3, r1
    7642:	07db      	lsls	r3, r3, #31
    7644:	d414      	bmi.n	7670 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    7646:	2301      	movs	r3, #1
    7648:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    764a:	6802      	ldr	r2, [r0, #0]
    764c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    7650:	ea43 0102 	orr.w	r1, r3, r2
    7654:	e850 4f00 	ldrex	r4, [r0]
    7658:	4294      	cmp	r4, r2
    765a:	d104      	bne.n	7666 <nrfx_flag32_free+0x2a>
    765c:	e840 1c00 	strex	ip, r1, [r0]
    7660:	f1bc 0f00 	cmp.w	ip, #0
    7664:	d1f6      	bne.n	7654 <nrfx_flag32_free+0x18>
    7666:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    766a:	d1ee      	bne.n	764a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    766c:	4801      	ldr	r0, [pc, #4]	; (7674 <nrfx_flag32_free+0x38>)
}
    766e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7670:	4801      	ldr	r0, [pc, #4]	; (7678 <nrfx_flag32_free+0x3c>)
    7672:	e7fc      	b.n	766e <nrfx_flag32_free+0x32>
    7674:	0bad0000 	.word	0x0bad0000
    7678:	0bad0004 	.word	0x0bad0004

0000767c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    767c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    767e:	4604      	mov	r4, r0
    7680:	b118      	cbz	r0, 768a <clock_stop+0xe>
    7682:	2801      	cmp	r0, #1
    7684:	d022      	beq.n	76cc <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    7686:	b003      	add	sp, #12
    7688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    768a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    768e:	2202      	movs	r2, #2
    7690:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7694:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    7698:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    769c:	2201      	movs	r2, #1
    769e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    76a0:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    76a2:	2301      	movs	r3, #1
    76a4:	f88d 3007 	strb.w	r3, [sp, #7]
    76a8:	f242 7510 	movw	r5, #10000	; 0x2710
    76ac:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    76b0:	b1cc      	cbz	r4, 76e6 <clock_stop+0x6a>
    76b2:	2c01      	cmp	r4, #1
    76b4:	d1e7      	bne.n	7686 <clock_stop+0xa>
            if (p_clk_src != NULL)
    76b6:	b3c7      	cbz	r7, 772a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    76b8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    76bc:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    76c0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    76c2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    76c6:	03da      	lsls	r2, r3, #15
    76c8:	d521      	bpl.n	770e <clock_stop+0x92>
    76ca:	e016      	b.n	76fa <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    76cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    76d2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    76da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76de:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    76e0:	f10d 0707 	add.w	r7, sp, #7
    76e4:	e7dd      	b.n	76a2 <clock_stop+0x26>
            if (p_clk_src != NULL)
    76e6:	b1b7      	cbz	r7, 7716 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76e8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    76ec:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    76f0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    76f6:	03d8      	lsls	r0, r3, #15
    76f8:	d5c5      	bpl.n	7686 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    76fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    76fe:	2801      	cmp	r0, #1
    7700:	d103      	bne.n	770a <clock_stop+0x8e>
    7702:	f004 fef6 	bl	c4f2 <nrfx_busy_wait>
    7706:	3d01      	subs	r5, #1
    7708:	d1d2      	bne.n	76b0 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    770a:	2c01      	cmp	r4, #1
    770c:	d1bb      	bne.n	7686 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    770e:	4b0c      	ldr	r3, [pc, #48]	; (7740 <clock_stop+0xc4>)
    7710:	2200      	movs	r2, #0
    7712:	715a      	strb	r2, [r3, #5]
    7714:	e7b7      	b.n	7686 <clock_stop+0xa>
    7716:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    771a:	03d9      	lsls	r1, r3, #15
    771c:	d5b3      	bpl.n	7686 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    771e:	2001      	movs	r0, #1
    7720:	f004 fee7 	bl	c4f2 <nrfx_busy_wait>
    7724:	3d01      	subs	r5, #1
    7726:	d1f6      	bne.n	7716 <clock_stop+0x9a>
    7728:	e7ad      	b.n	7686 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    772a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    772e:	03db      	lsls	r3, r3, #15
    7730:	d5ed      	bpl.n	770e <clock_stop+0x92>
    7732:	2001      	movs	r0, #1
    7734:	f004 fedd 	bl	c4f2 <nrfx_busy_wait>
    7738:	3d01      	subs	r5, #1
    773a:	d1f6      	bne.n	772a <clock_stop+0xae>
    773c:	e7e7      	b.n	770e <clock_stop+0x92>
    773e:	bf00      	nop
    7740:	20001c80 	.word	0x20001c80

00007744 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7744:	4b04      	ldr	r3, [pc, #16]	; (7758 <nrfx_clock_init+0x14>)
    7746:	791a      	ldrb	r2, [r3, #4]
    7748:	b922      	cbnz	r2, 7754 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    774a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    774c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    774e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7750:	4802      	ldr	r0, [pc, #8]	; (775c <nrfx_clock_init+0x18>)
    7752:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7754:	4802      	ldr	r0, [pc, #8]	; (7760 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7756:	4770      	bx	lr
    7758:	20001c80 	.word	0x20001c80
    775c:	0bad0000 	.word	0x0bad0000
    7760:	0bad000c 	.word	0x0bad000c

00007764 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7764:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7766:	2000      	movs	r0, #0
    7768:	f7fd f99a 	bl	4aa0 <arch_irq_is_enabled>
    776c:	b908      	cbnz	r0, 7772 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    776e:	f7fd f975 	bl	4a5c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7776:	2200      	movs	r2, #0
    7778:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    777c:	4b01      	ldr	r3, [pc, #4]	; (7784 <nrfx_clock_enable+0x20>)
    777e:	2201      	movs	r2, #1
    7780:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7782:	bd08      	pop	{r3, pc}
    7784:	20002149 	.word	0x20002149

00007788 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7788:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    778a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    778e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7792:	b16a      	cbz	r2, 77b0 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7794:	2200      	movs	r2, #0
    7796:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    779a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    779e:	2201      	movs	r2, #1
    77a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    77a4:	4b11      	ldr	r3, [pc, #68]	; (77ec <nrfx_clock_irq_handler+0x64>)
    77a6:	7958      	ldrb	r0, [r3, #5]
    77a8:	b910      	cbnz	r0, 77b0 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    77aa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    77ac:	681b      	ldr	r3, [r3, #0]
    77ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    77b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    77b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    77b8:	b172      	cbz	r2, 77d8 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77ba:	2200      	movs	r2, #0
    77bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    77c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    77c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    77c8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    77cc:	0792      	lsls	r2, r2, #30
    77ce:	d104      	bne.n	77da <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    77d0:	2201      	movs	r2, #1
    77d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77d6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    77d8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    77da:	2202      	movs	r2, #2
    77dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    77e0:	4b02      	ldr	r3, [pc, #8]	; (77ec <nrfx_clock_irq_handler+0x64>)
}
    77e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    77e6:	681b      	ldr	r3, [r3, #0]
    77e8:	2001      	movs	r0, #1
    77ea:	4718      	bx	r3
    77ec:	20001c80 	.word	0x20001c80

000077f0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    77f0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    77f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    77f6:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    77f8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    77fa:	6002      	str	r2, [r0, #0]
}
    77fc:	4802      	ldr	r0, [pc, #8]	; (7808 <nrf_gpio_pin_port_decode+0x18>)
    77fe:	bf18      	it	ne
    7800:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    7804:	4770      	bx	lr
    7806:	bf00      	nop
    7808:	50000300 	.word	0x50000300

0000780c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    780c:	4b03      	ldr	r3, [pc, #12]	; (781c <pin_in_use_by_te+0x10>)
    780e:	3008      	adds	r0, #8
    7810:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7814:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7818:	4770      	bx	lr
    781a:	bf00      	nop
    781c:	20000160 	.word	0x20000160

00007820 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7820:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7822:	f100 0308 	add.w	r3, r0, #8
    7826:	4c0c      	ldr	r4, [pc, #48]	; (7858 <call_handler+0x38>)
    7828:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    782c:	05da      	lsls	r2, r3, #23
{
    782e:	4605      	mov	r5, r0
    7830:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7832:	d507      	bpl.n	7844 <call_handler+0x24>
    7834:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7838:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    783c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    7840:	6852      	ldr	r2, [r2, #4]
    7842:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7844:	68a3      	ldr	r3, [r4, #8]
    7846:	b12b      	cbz	r3, 7854 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7848:	68e2      	ldr	r2, [r4, #12]
    784a:	4631      	mov	r1, r6
    784c:	4628      	mov	r0, r5
    }
}
    784e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7852:	4718      	bx	r3
}
    7854:	bd70      	pop	{r4, r5, r6, pc}
    7856:	bf00      	nop
    7858:	20000160 	.word	0x20000160

0000785c <release_handler>:
{
    785c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    785e:	4a12      	ldr	r2, [pc, #72]	; (78a8 <release_handler+0x4c>)
    7860:	3008      	adds	r0, #8
    7862:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    7866:	05d9      	lsls	r1, r3, #23
    7868:	d51b      	bpl.n	78a2 <release_handler+0x46>
    786a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    786e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7872:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7876:	f102 040e 	add.w	r4, r2, #14
    787a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    787c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7880:	f413 7f80 	tst.w	r3, #256	; 0x100
    7884:	d003      	beq.n	788e <release_handler+0x32>
    7886:	f3c3 2343 	ubfx	r3, r3, #9, #4
    788a:	4299      	cmp	r1, r3
    788c:	d009      	beq.n	78a2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    788e:	3001      	adds	r0, #1
    7890:	2830      	cmp	r0, #48	; 0x30
    7892:	d1f3      	bne.n	787c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    7894:	2300      	movs	r3, #0
    7896:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    789a:	4804      	ldr	r0, [pc, #16]	; (78ac <release_handler+0x50>)
}
    789c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    789e:	f7ff becd 	b.w	763c <nrfx_flag32_free>
}
    78a2:	bc10      	pop	{r4}
    78a4:	4770      	bx	lr
    78a6:	bf00      	nop
    78a8:	20000160 	.word	0x20000160
    78ac:	200001d4 	.word	0x200001d4

000078b0 <pin_handler_trigger_uninit>:
{
    78b0:	b538      	push	{r3, r4, r5, lr}
    78b2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    78b4:	f7ff ffaa 	bl	780c <pin_in_use_by_te>
    78b8:	4c09      	ldr	r4, [pc, #36]	; (78e0 <pin_handler_trigger_uninit+0x30>)
    78ba:	f102 0508 	add.w	r5, r2, #8
    78be:	b140      	cbz	r0, 78d2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    78c0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    78c4:	4907      	ldr	r1, [pc, #28]	; (78e4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    78c6:	0b5b      	lsrs	r3, r3, #13
    78c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    78cc:	2000      	movs	r0, #0
    78ce:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    78d2:	4610      	mov	r0, r2
    78d4:	f7ff ffc2 	bl	785c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    78d8:	2300      	movs	r3, #0
    78da:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    78de:	bd38      	pop	{r3, r4, r5, pc}
    78e0:	20000160 	.word	0x20000160
    78e4:	40006000 	.word	0x40006000

000078e8 <nrfx_gpiote_input_configure>:
{
    78e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    78ec:	4604      	mov	r4, r0
    78ee:	4616      	mov	r6, r2
    78f0:	461d      	mov	r5, r3
    if (p_input_config)
    78f2:	b301      	cbz	r1, 7936 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    78f4:	4f4e      	ldr	r7, [pc, #312]	; (7a30 <nrfx_gpiote_input_configure+0x148>)
    78f6:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    78fa:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    78fe:	079b      	lsls	r3, r3, #30
    7900:	d502      	bpl.n	7908 <nrfx_gpiote_input_configure+0x20>
    7902:	f7ff ff83 	bl	780c <pin_in_use_by_te>
    7906:	bb10      	cbnz	r0, 794e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    7908:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    790a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    790e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    7912:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    7916:	f10d 020f 	add.w	r2, sp, #15
    791a:	460b      	mov	r3, r1
    791c:	4620      	mov	r0, r4
    791e:	f10d 010e 	add.w	r1, sp, #14
    7922:	f004 fe26 	bl	c572 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7926:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    792a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    792e:	f043 0301 	orr.w	r3, r3, #1
    7932:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    7936:	b346      	cbz	r6, 798a <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7938:	4b3d      	ldr	r3, [pc, #244]	; (7a30 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    793a:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    793e:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7940:	f104 0708 	add.w	r7, r4, #8
    7944:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    7948:	0788      	lsls	r0, r1, #30
    794a:	d502      	bpl.n	7952 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    794c:	b1aa      	cbz	r2, 797a <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    794e:	4839      	ldr	r0, [pc, #228]	; (7a34 <nrfx_gpiote_input_configure+0x14c>)
    7950:	e01d      	b.n	798e <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7952:	f021 0120 	bic.w	r1, r1, #32
    7956:	04c9      	lsls	r1, r1, #19
    7958:	0cc9      	lsrs	r1, r1, #19
    795a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    795e:	b162      	cbz	r2, 797a <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    7960:	f1bc 0f03 	cmp.w	ip, #3
    7964:	d8f3      	bhi.n	794e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7966:	6872      	ldr	r2, [r6, #4]
    7968:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    796a:	f1bc 0f00 	cmp.w	ip, #0
    796e:	d111      	bne.n	7994 <nrfx_gpiote_input_configure+0xac>
    7970:	4a31      	ldr	r2, [pc, #196]	; (7a38 <nrfx_gpiote_input_configure+0x150>)
    7972:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    7976:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    797a:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    797e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7982:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    7986:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    798a:	bb45      	cbnz	r5, 79de <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    798c:	482b      	ldr	r0, [pc, #172]	; (7a3c <nrfx_gpiote_input_configure+0x154>)
}
    798e:	b004      	add	sp, #16
    7990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7994:	00b2      	lsls	r2, r6, #2
    7996:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    799a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    799e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    79a2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    79a6:	f020 0003 	bic.w	r0, r0, #3
    79aa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    79ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    79b2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    79b6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    79ba:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    79be:	0220      	lsls	r0, r4, #8
    79c0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    79c4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    79c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    79cc:	ea40 000e 	orr.w	r0, r0, lr
    79d0:	f041 0120 	orr.w	r1, r1, #32
    79d4:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    79d8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    79dc:	e7cd      	b.n	797a <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    79de:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    79e2:	4620      	mov	r0, r4
    79e4:	f7ff ff3a 	bl	785c <release_handler>
    if (!handler)
    79e8:	2e00      	cmp	r6, #0
    79ea:	d0cf      	beq.n	798c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    79ec:	4d10      	ldr	r5, [pc, #64]	; (7a30 <nrfx_gpiote_input_configure+0x148>)
    79ee:	e9d5 2300 	ldrd	r2, r3, [r5]
    79f2:	4296      	cmp	r6, r2
    79f4:	d101      	bne.n	79fa <nrfx_gpiote_input_configure+0x112>
    79f6:	429f      	cmp	r7, r3
    79f8:	d018      	beq.n	7a2c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    79fa:	4811      	ldr	r0, [pc, #68]	; (7a40 <nrfx_gpiote_input_configure+0x158>)
    79fc:	f10d 010f 	add.w	r1, sp, #15
    7a00:	f7ff fdfc 	bl	75fc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7a04:	4b0d      	ldr	r3, [pc, #52]	; (7a3c <nrfx_gpiote_input_configure+0x154>)
    7a06:	4298      	cmp	r0, r3
    7a08:	d1c1      	bne.n	798e <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    7a0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    7a0e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7a12:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7a16:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7a18:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7a1a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7a1e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    7a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7a26:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    7a2a:	e7af      	b.n	798c <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7a2c:	2200      	movs	r2, #0
    7a2e:	e7ee      	b.n	7a0e <nrfx_gpiote_input_configure+0x126>
    7a30:	20000160 	.word	0x20000160
    7a34:	0bad0004 	.word	0x0bad0004
    7a38:	40006000 	.word	0x40006000
    7a3c:	0bad0000 	.word	0x0bad0000
    7a40:	200001d4 	.word	0x200001d4

00007a44 <nrfx_gpiote_output_configure>:
{
    7a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a46:	4604      	mov	r4, r0
    7a48:	b085      	sub	sp, #20
    7a4a:	4615      	mov	r5, r2
    if (p_config)
    7a4c:	b319      	cbz	r1, 7a96 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7a4e:	4e33      	ldr	r6, [pc, #204]	; (7b1c <nrfx_gpiote_output_configure+0xd8>)
    7a50:	f100 0708 	add.w	r7, r0, #8
    7a54:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7a58:	0793      	lsls	r3, r2, #30
    7a5a:	d403      	bmi.n	7a64 <nrfx_gpiote_output_configure+0x20>
    7a5c:	f7ff fed6 	bl	780c <pin_in_use_by_te>
    7a60:	2800      	cmp	r0, #0
    7a62:	d158      	bne.n	7b16 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7a64:	f012 0f1c 	tst.w	r2, #28
    7a68:	d002      	beq.n	7a70 <nrfx_gpiote_output_configure+0x2c>
    7a6a:	784b      	ldrb	r3, [r1, #1]
    7a6c:	2b01      	cmp	r3, #1
    7a6e:	d052      	beq.n	7b16 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    7a70:	2301      	movs	r3, #1
    7a72:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7a76:	2300      	movs	r3, #0
    7a78:	e9cd 1300 	strd	r1, r3, [sp]
    7a7c:	1c4a      	adds	r2, r1, #1
    7a7e:	1c8b      	adds	r3, r1, #2
    7a80:	4620      	mov	r0, r4
    7a82:	f10d 010f 	add.w	r1, sp, #15
    7a86:	f004 fd74 	bl	c572 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7a8a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    7a8e:	f043 0303 	orr.w	r3, r3, #3
    7a92:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    7a96:	b915      	cbnz	r5, 7a9e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    7a98:	4821      	ldr	r0, [pc, #132]	; (7b20 <nrfx_gpiote_output_configure+0xdc>)
}
    7a9a:	b005      	add	sp, #20
    7a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7a9e:	4e1f      	ldr	r6, [pc, #124]	; (7b1c <nrfx_gpiote_output_configure+0xd8>)
    7aa0:	f104 0708 	add.w	r7, r4, #8
    7aa4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    7aa8:	0783      	lsls	r3, r0, #30
    7aaa:	d534      	bpl.n	7b16 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    7aac:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    7ab0:	4661      	mov	r1, ip
    7ab2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7ab4:	f020 0020 	bic.w	r0, r0, #32
    7ab8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7abc:	04c0      	lsls	r0, r0, #19
    7abe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    7ac2:	0cc0      	lsrs	r0, r0, #19
    7ac4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7ac8:	2300      	movs	r3, #0
    7aca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7ace:	786a      	ldrb	r2, [r5, #1]
    7ad0:	2a00      	cmp	r2, #0
    7ad2:	d0e1      	beq.n	7a98 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7ad4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    7ad8:	78ad      	ldrb	r5, [r5, #2]
    7ada:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    7ade:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7ae2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7ae6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    7aea:	0223      	lsls	r3, r4, #8
    7aec:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7af0:	0412      	lsls	r2, r2, #16
    7af2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7af6:	ea43 030e 	orr.w	r3, r3, lr
    7afa:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7afc:	052a      	lsls	r2, r5, #20
    7afe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7b02:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7b06:	4313      	orrs	r3, r2
    7b08:	f040 0020 	orr.w	r0, r0, #32
    7b0c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7b10:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7b14:	e7c0      	b.n	7a98 <nrfx_gpiote_output_configure+0x54>
{
    7b16:	4803      	ldr	r0, [pc, #12]	; (7b24 <nrfx_gpiote_output_configure+0xe0>)
    7b18:	e7bf      	b.n	7a9a <nrfx_gpiote_output_configure+0x56>
    7b1a:	bf00      	nop
    7b1c:	20000160 	.word	0x20000160
    7b20:	0bad0000 	.word	0x0bad0000
    7b24:	0bad0004 	.word	0x0bad0004

00007b28 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7b28:	4b01      	ldr	r3, [pc, #4]	; (7b30 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    7b2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    7b2e:	4770      	bx	lr
    7b30:	20000160 	.word	0x20000160

00007b34 <nrfx_gpiote_channel_get>:
{
    7b34:	b508      	push	{r3, lr}
    7b36:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7b38:	f7ff fe68 	bl	780c <pin_in_use_by_te>
    7b3c:	b138      	cbz	r0, 7b4e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7b3e:	4b05      	ldr	r3, [pc, #20]	; (7b54 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    7b40:	4805      	ldr	r0, [pc, #20]	; (7b58 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7b42:	3208      	adds	r2, #8
    7b44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7b48:	0b5b      	lsrs	r3, r3, #13
    7b4a:	700b      	strb	r3, [r1, #0]
}
    7b4c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7b4e:	4803      	ldr	r0, [pc, #12]	; (7b5c <nrfx_gpiote_channel_get+0x28>)
    7b50:	e7fc      	b.n	7b4c <nrfx_gpiote_channel_get+0x18>
    7b52:	bf00      	nop
    7b54:	20000160 	.word	0x20000160
    7b58:	0bad0000 	.word	0x0bad0000
    7b5c:	0bad0004 	.word	0x0bad0004

00007b60 <nrfx_gpiote_init>:
{
    7b60:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7b62:	4c0f      	ldr	r4, [pc, #60]	; (7ba0 <nrfx_gpiote_init+0x40>)
    7b64:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    7b68:	b9bd      	cbnz	r5, 7b9a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7b6a:	2260      	movs	r2, #96	; 0x60
    7b6c:	4629      	mov	r1, r5
    7b6e:	f104 0010 	add.w	r0, r4, #16
    7b72:	f004 fae8 	bl	c146 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7b76:	2006      	movs	r0, #6
    7b78:	f7fc ff70 	bl	4a5c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7b7c:	4b09      	ldr	r3, [pc, #36]	; (7ba4 <nrfx_gpiote_init+0x44>)
    return err_code;
    7b7e:	480a      	ldr	r0, [pc, #40]	; (7ba8 <nrfx_gpiote_init+0x48>)
    7b80:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    7b84:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7b88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7b8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7b90:	2301      	movs	r3, #1
    7b92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7b96:	6763      	str	r3, [r4, #116]	; 0x74
}
    7b98:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7b9a:	4804      	ldr	r0, [pc, #16]	; (7bac <nrfx_gpiote_init+0x4c>)
    7b9c:	e7fc      	b.n	7b98 <nrfx_gpiote_init+0x38>
    7b9e:	bf00      	nop
    7ba0:	20000160 	.word	0x20000160
    7ba4:	40006000 	.word	0x40006000
    7ba8:	0bad0000 	.word	0x0bad0000
    7bac:	0bad0005 	.word	0x0bad0005

00007bb0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7bb0:	4b03      	ldr	r3, [pc, #12]	; (7bc0 <nrfx_gpiote_is_init+0x10>)
    7bb2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7bb6:	3800      	subs	r0, #0
    7bb8:	bf18      	it	ne
    7bba:	2001      	movne	r0, #1
    7bbc:	4770      	bx	lr
    7bbe:	bf00      	nop
    7bc0:	20000160 	.word	0x20000160

00007bc4 <nrfx_gpiote_channel_free>:
{
    7bc4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7bc6:	4801      	ldr	r0, [pc, #4]	; (7bcc <nrfx_gpiote_channel_free+0x8>)
    7bc8:	f7ff bd38 	b.w	763c <nrfx_flag32_free>
    7bcc:	200001d0 	.word	0x200001d0

00007bd0 <nrfx_gpiote_channel_alloc>:
{
    7bd0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7bd2:	4801      	ldr	r0, [pc, #4]	; (7bd8 <nrfx_gpiote_channel_alloc+0x8>)
    7bd4:	f7ff bd12 	b.w	75fc <nrfx_flag32_alloc>
    7bd8:	200001d0 	.word	0x200001d0

00007bdc <nrfx_gpiote_trigger_enable>:
{
    7bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7bde:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7be0:	f7ff fe14 	bl	780c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7be4:	f104 0208 	add.w	r2, r4, #8
    7be8:	4b1e      	ldr	r3, [pc, #120]	; (7c64 <nrfx_gpiote_trigger_enable+0x88>)
    7bea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7bee:	b1e8      	cbz	r0, 7c2c <nrfx_gpiote_trigger_enable+0x50>
    7bf0:	f013 0502 	ands.w	r5, r3, #2
    7bf4:	d11a      	bne.n	7c2c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7bf6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7bf8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    7bfa:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    7bfe:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    7c02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7c06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7c0a:	6005      	str	r5, [r0, #0]
    7c0c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7c0e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7c12:	f040 0001 	orr.w	r0, r0, #1
    7c16:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7c1a:	b129      	cbz	r1, 7c28 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7c1c:	2201      	movs	r2, #1
    7c1e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    7c22:	4a11      	ldr	r2, [pc, #68]	; (7c68 <nrfx_gpiote_trigger_enable+0x8c>)
    7c24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7c28:	b003      	add	sp, #12
    7c2a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7c2c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7c30:	2b04      	cmp	r3, #4
    7c32:	d012      	beq.n	7c5a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7c34:	2b05      	cmp	r3, #5
    7c36:	d012      	beq.n	7c5e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7c38:	a801      	add	r0, sp, #4
    7c3a:	9401      	str	r4, [sp, #4]
    7c3c:	f7ff fdd8 	bl	77f0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7c40:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    7c42:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7c46:	40d9      	lsrs	r1, r3
    7c48:	f001 0101 	and.w	r1, r1, #1
    7c4c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7c4e:	4620      	mov	r0, r4
}
    7c50:	b003      	add	sp, #12
    7c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7c56:	f004 bcd5 	b.w	c604 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7c5a:	2103      	movs	r1, #3
    7c5c:	e7f7      	b.n	7c4e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7c5e:	2102      	movs	r1, #2
    7c60:	e7f5      	b.n	7c4e <nrfx_gpiote_trigger_enable+0x72>
    7c62:	bf00      	nop
    7c64:	20000160 	.word	0x20000160
    7c68:	40006000 	.word	0x40006000

00007c6c <nrfx_gpiote_trigger_disable>:
{
    7c6c:	b508      	push	{r3, lr}
    7c6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7c70:	f7ff fdcc 	bl	780c <pin_in_use_by_te>
    7c74:	b1c0      	cbz	r0, 7ca8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7c76:	f102 0108 	add.w	r1, r2, #8
    7c7a:	4b0e      	ldr	r3, [pc, #56]	; (7cb4 <nrfx_gpiote_trigger_disable+0x48>)
    7c7c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7c80:	0799      	lsls	r1, r3, #30
    7c82:	d411      	bmi.n	7ca8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7c84:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7c86:	2201      	movs	r2, #1
    7c88:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    7c8a:	009b      	lsls	r3, r3, #2
    7c8c:	490a      	ldr	r1, [pc, #40]	; (7cb8 <nrfx_gpiote_trigger_disable+0x4c>)
    7c8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7c92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7c96:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7c9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7c9e:	f022 0203 	bic.w	r2, r2, #3
    7ca2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    7ca6:	bd08      	pop	{r3, pc}
    7ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7cac:	2100      	movs	r1, #0
    7cae:	4610      	mov	r0, r2
    7cb0:	f004 bca8 	b.w	c604 <nrf_gpio_cfg_sense_set>
    7cb4:	20000160 	.word	0x20000160
    7cb8:	40006000 	.word	0x40006000

00007cbc <nrfx_gpiote_pin_uninit>:
{
    7cbc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7cbe:	4b0e      	ldr	r3, [pc, #56]	; (7cf8 <nrfx_gpiote_pin_uninit+0x3c>)
    7cc0:	f100 0208 	add.w	r2, r0, #8
{
    7cc4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7cc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7cca:	07db      	lsls	r3, r3, #31
    7ccc:	d511      	bpl.n	7cf2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    7cce:	f7ff ffcd 	bl	7c6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7cd2:	4620      	mov	r0, r4
    7cd4:	f7ff fdec 	bl	78b0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7cd8:	a801      	add	r0, sp, #4
    7cda:	9401      	str	r4, [sp, #4]
    7cdc:	f7ff fd88 	bl	77f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7ce0:	9b01      	ldr	r3, [sp, #4]
    7ce2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7ce6:	2202      	movs	r2, #2
    7ce8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    7cec:	4803      	ldr	r0, [pc, #12]	; (7cfc <nrfx_gpiote_pin_uninit+0x40>)
}
    7cee:	b002      	add	sp, #8
    7cf0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7cf2:	4803      	ldr	r0, [pc, #12]	; (7d00 <nrfx_gpiote_pin_uninit+0x44>)
    7cf4:	e7fb      	b.n	7cee <nrfx_gpiote_pin_uninit+0x32>
    7cf6:	bf00      	nop
    7cf8:	20000160 	.word	0x20000160
    7cfc:	0bad0000 	.word	0x0bad0000
    7d00:	0bad0004 	.word	0x0bad0004

00007d04 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d08:	4b68      	ldr	r3, [pc, #416]	; (7eac <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    7d0a:	4869      	ldr	r0, [pc, #420]	; (7eb0 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7d0c:	4969      	ldr	r1, [pc, #420]	; (7eb4 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    7d0e:	2600      	movs	r6, #0
{
    7d10:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7d12:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7d14:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d16:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7d18:	b135      	cbz	r5, 7d28 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    7d1a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    7d1e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7d20:	bf1e      	ittt	ne
    7d22:	601c      	strne	r4, [r3, #0]
    7d24:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7d26:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7d28:	3304      	adds	r3, #4
    7d2a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7d2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7d30:	d1f1      	bne.n	7d16 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d32:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7eb0 <nrfx_gpiote_irq_handler+0x1ac>
    7d36:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	f000 8099 	beq.w	7e72 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    7d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7d44:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    7d48:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7d4a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    7d4e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    7d52:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7d54:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7d58:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    7d5c:	f10d 0a10 	add.w	sl, sp, #16
    7d60:	ea4f 1348 	mov.w	r3, r8, lsl #5
    7d64:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    7d66:	f04f 0b01 	mov.w	fp, #1
    7d6a:	e049      	b.n	7e00 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    7d6c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7d6e:	4a52      	ldr	r2, [pc, #328]	; (7eb8 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    7d70:	fa94 f4a4 	rbit	r4, r4
    7d74:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7d78:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7d7a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7d7c:	f104 0308 	add.w	r3, r4, #8
    7d80:	9403      	str	r4, [sp, #12]
    7d82:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    7d86:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    7d8a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7d8e:	fa0b f202 	lsl.w	r2, fp, r2
    7d92:	ea23 0302 	bic.w	r3, r3, r2
    7d96:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7d9a:	a803      	add	r0, sp, #12
    7d9c:	f7ff fd28 	bl	77f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7da0:	9b03      	ldr	r3, [sp, #12]
    7da2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7da6:	08b9      	lsrs	r1, r7, #2
    7da8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7dac:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    7db0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7db2:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7db4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    7db8:	d52c      	bpl.n	7e14 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    7dba:	4620      	mov	r0, r4
    7dbc:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7dbe:	b2dd      	uxtb	r5, r3
    7dc0:	f7ff fd2e 	bl	7820 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7dc4:	a803      	add	r0, sp, #12
    7dc6:	9403      	str	r4, [sp, #12]
    7dc8:	f7ff fd12 	bl	77f0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7dcc:	9b03      	ldr	r3, [sp, #12]
    7dce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7dd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    7dda:	429d      	cmp	r5, r3
    7ddc:	d107      	bne.n	7dee <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7dde:	2100      	movs	r1, #0
    7de0:	4620      	mov	r0, r4
    7de2:	f004 fc0f 	bl	c604 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7de6:	4629      	mov	r1, r5
    7de8:	4620      	mov	r0, r4
    7dea:	f004 fc0b 	bl	c604 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7dee:	a803      	add	r0, sp, #12
    7df0:	9403      	str	r4, [sp, #12]
    7df2:	f7ff fcfd 	bl	77f0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    7df6:	9b03      	ldr	r3, [sp, #12]
    7df8:	fa0b f303 	lsl.w	r3, fp, r3
    7dfc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    7e00:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    7e04:	2c00      	cmp	r4, #0
    7e06:	d1b1      	bne.n	7d6c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7e08:	f1b8 0f00 	cmp.w	r8, #0
    7e0c:	d11d      	bne.n	7e4a <nrfx_gpiote_irq_handler+0x146>
    7e0e:	f04f 0801 	mov.w	r8, #1
    7e12:	e7a5      	b.n	7d60 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7e14:	2b02      	cmp	r3, #2
    7e16:	d10c      	bne.n	7e32 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7e18:	2103      	movs	r1, #3
    7e1a:	4620      	mov	r0, r4
    7e1c:	f004 fbf2 	bl	c604 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7e20:	f005 0305 	and.w	r3, r5, #5
    7e24:	2b01      	cmp	r3, #1
    7e26:	d1e2      	bne.n	7dee <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    7e28:	4639      	mov	r1, r7
    7e2a:	4620      	mov	r0, r4
    7e2c:	f7ff fcf8 	bl	7820 <call_handler>
    7e30:	e7dd      	b.n	7dee <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7e32:	2102      	movs	r1, #2
    7e34:	4620      	mov	r0, r4
    7e36:	9301      	str	r3, [sp, #4]
    7e38:	f004 fbe4 	bl	c604 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7e3c:	2d03      	cmp	r5, #3
    7e3e:	d0f3      	beq.n	7e28 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7e40:	9b01      	ldr	r3, [sp, #4]
    7e42:	2b03      	cmp	r3, #3
    7e44:	d1d3      	bne.n	7dee <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7e46:	2d02      	cmp	r5, #2
    7e48:	e7ed      	b.n	7e26 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    7e4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7e4e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    7e52:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    7e56:	4919      	ldr	r1, [pc, #100]	; (7ebc <nrfx_gpiote_irq_handler+0x1b8>)
    7e58:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    7e5c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7e5e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    7e62:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    7e66:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    7e68:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    7e6a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    7e6e:	f47f af73 	bne.w	7d58 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    7e72:	2401      	movs	r4, #1
    while (mask)
    7e74:	b916      	cbnz	r6, 7e7c <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7e76:	b007      	add	sp, #28
    7e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7e7c:	fa96 f3a6 	rbit	r3, r6
    7e80:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7e84:	fa04 f203 	lsl.w	r2, r4, r3
    7e88:	009b      	lsls	r3, r3, #2
    7e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7e8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7e92:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7e96:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7e9a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7e9e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    7ea2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    7ea6:	f7ff fcbb 	bl	7820 <call_handler>
    7eaa:	e7e3      	b.n	7e74 <nrfx_gpiote_irq_handler+0x170>
    7eac:	40006100 	.word	0x40006100
    7eb0:	40006000 	.word	0x40006000
    7eb4:	40006120 	.word	0x40006120
    7eb8:	20000160 	.word	0x20000160
    7ebc:	50000300 	.word	0x50000300

00007ec0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    7ec0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    7ec2:	4c18      	ldr	r4, [pc, #96]	; (7f24 <nrfx_power_init+0x64>)
    7ec4:	7823      	ldrb	r3, [r4, #0]
    7ec6:	bb53      	cbnz	r3, 7f1e <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    7ec8:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    7eca:	f3c2 0340 	ubfx	r3, r2, #1, #1
    7ece:	0792      	lsls	r2, r2, #30
    7ed0:	d512      	bpl.n	7ef8 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7ed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7ed6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7eda:	2a08      	cmp	r2, #8
    7edc:	d10b      	bne.n	7ef6 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7ede:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    7ee2:	2b05      	cmp	r3, #5
    7ee4:	d807      	bhi.n	7ef6 <nrfx_power_init+0x36>
    7ee6:	4a10      	ldr	r2, [pc, #64]	; (7f28 <nrfx_power_init+0x68>)
    7ee8:	5cd3      	ldrb	r3, [r2, r3]
    7eea:	b123      	cbz	r3, 7ef6 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    7eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7ef0:	2201      	movs	r2, #1
    7ef2:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7ef6:	2301      	movs	r3, #1
    7ef8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7efc:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    7f00:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7f02:	f003 0301 	and.w	r3, r3, #1
    7f06:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7f0a:	2000      	movs	r0, #0
    7f0c:	f7fc fdc8 	bl	4aa0 <arch_irq_is_enabled>
    7f10:	b908      	cbnz	r0, 7f16 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7f12:	f7fc fda3 	bl	4a5c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7f16:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    7f18:	4804      	ldr	r0, [pc, #16]	; (7f2c <nrfx_power_init+0x6c>)
    m_initialized = true;
    7f1a:	7023      	strb	r3, [r4, #0]
}
    7f1c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7f1e:	4804      	ldr	r0, [pc, #16]	; (7f30 <nrfx_power_init+0x70>)
    7f20:	e7fc      	b.n	7f1c <nrfx_power_init+0x5c>
    7f22:	bf00      	nop
    7f24:	2000214a 	.word	0x2000214a
    7f28:	0000e47b 	.word	0x0000e47b
    7f2c:	0bad0000 	.word	0x0bad0000
    7f30:	0bad000c 	.word	0x0bad000c

00007f34 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    7f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f38:	f44f 7260 	mov.w	r2, #896	; 0x380
    7f3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    7f40:	4b01      	ldr	r3, [pc, #4]	; (7f48 <nrfx_power_usbevt_uninit+0x14>)
    7f42:	2200      	movs	r2, #0
    7f44:	601a      	str	r2, [r3, #0]
}
    7f46:	4770      	bx	lr
    7f48:	20001c88 	.word	0x20001c88

00007f4c <nrfx_power_usbevt_init>:
{
    7f4c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    7f4e:	f7ff fff1 	bl	7f34 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    7f52:	6803      	ldr	r3, [r0, #0]
    7f54:	b10b      	cbz	r3, 7f5a <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    7f56:	4a01      	ldr	r2, [pc, #4]	; (7f5c <nrfx_power_usbevt_init+0x10>)
    7f58:	6013      	str	r3, [r2, #0]
}
    7f5a:	bd08      	pop	{r3, pc}
    7f5c:	20001c88 	.word	0x20001c88

00007f60 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7f60:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    7f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f66:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7f6a:	0762      	lsls	r2, r4, #29
    7f6c:	d507      	bpl.n	7f7e <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    7f6e:	f44f 7084 	mov.w	r0, #264	; 0x108
    7f72:	f004 fb56 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7f76:	b110      	cbz	r0, 7f7e <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7f78:	4b1e      	ldr	r3, [pc, #120]	; (7ff4 <nrfx_power_irq_handler+0x94>)
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7f7e:	06a3      	lsls	r3, r4, #26
    7f80:	d508      	bpl.n	7f94 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    7f82:	f44f 708a 	mov.w	r0, #276	; 0x114
    7f86:	f004 fb4c 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7f8a:	b118      	cbz	r0, 7f94 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7f8c:	4b1a      	ldr	r3, [pc, #104]	; (7ff8 <nrfx_power_irq_handler+0x98>)
    7f8e:	2000      	movs	r0, #0
    7f90:	681b      	ldr	r3, [r3, #0]
    7f92:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7f94:	0660      	lsls	r0, r4, #25
    7f96:	d508      	bpl.n	7faa <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    7f98:	f44f 708c 	mov.w	r0, #280	; 0x118
    7f9c:	f004 fb41 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7fa0:	b118      	cbz	r0, 7faa <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7fa2:	4b15      	ldr	r3, [pc, #84]	; (7ff8 <nrfx_power_irq_handler+0x98>)
    7fa4:	2001      	movs	r0, #1
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7faa:	0621      	lsls	r1, r4, #24
    7fac:	d508      	bpl.n	7fc0 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    7fae:	f44f 708e 	mov.w	r0, #284	; 0x11c
    7fb2:	f004 fb36 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7fb6:	b118      	cbz	r0, 7fc0 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    7fb8:	4b10      	ldr	r3, [pc, #64]	; (7ffc <nrfx_power_irq_handler+0x9c>)
    7fba:	2000      	movs	r0, #0
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7fc0:	05e2      	lsls	r2, r4, #23
    7fc2:	d508      	bpl.n	7fd6 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    7fc4:	f44f 7090 	mov.w	r0, #288	; 0x120
    7fc8:	f004 fb2b 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7fcc:	b118      	cbz	r0, 7fd6 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    7fce:	4b0b      	ldr	r3, [pc, #44]	; (7ffc <nrfx_power_irq_handler+0x9c>)
    7fd0:	2001      	movs	r0, #1
    7fd2:	681b      	ldr	r3, [r3, #0]
    7fd4:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7fd6:	05a3      	lsls	r3, r4, #22
    7fd8:	d50a      	bpl.n	7ff0 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    7fda:	f44f 7092 	mov.w	r0, #292	; 0x124
    7fde:	f004 fb20 	bl	c622 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7fe2:	b128      	cbz	r0, 7ff0 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    7fe4:	4b05      	ldr	r3, [pc, #20]	; (7ffc <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    7fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    7fea:	681b      	ldr	r3, [r3, #0]
    7fec:	2002      	movs	r0, #2
    7fee:	4718      	bx	r3
}
    7ff0:	bd10      	pop	{r4, pc}
    7ff2:	bf00      	nop
    7ff4:	20001c90 	.word	0x20001c90
    7ff8:	20001c8c 	.word	0x20001c8c
    7ffc:	20001c88 	.word	0x20001c88

00008000 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    8000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    8004:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8006:	4d2b      	ldr	r5, [pc, #172]	; (80b4 <nrfx_twim_init+0xb4>)
    8008:	f04f 0e34 	mov.w	lr, #52	; 0x34
    800c:	fb0e fe06 	mul.w	lr, lr, r6
    8010:	eb05 040e 	add.w	r4, r5, lr
    8014:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    8018:	2f00      	cmp	r7, #0
    801a:	d148      	bne.n	80ae <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    801c:	f8d0 c000 	ldr.w	ip, [r0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    8020:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    8024:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    8026:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    8028:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    802c:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    8030:	7b4b      	ldrb	r3, [r1, #13]
    8032:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    8036:	7b8b      	ldrb	r3, [r1, #14]
    8038:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    803c:	b1cb      	cbz	r3, 8072 <nrfx_twim_init+0x72>
    803e:	7bcb      	ldrb	r3, [r1, #15]
    8040:	b92b      	cbnz	r3, 804e <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    8042:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    8046:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    804a:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    804e:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    8050:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
    8054:	b122      	cbz	r2, 8060 <nrfx_twim_init+0x60>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    8056:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    8058:	f340 3007 	sbfx	r0, r0, #12, #8
    805c:	f7fc fcfe 	bl	4a5c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    8060:	2334      	movs	r3, #52	; 0x34
    8062:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    8066:	4814      	ldr	r0, [pc, #80]	; (80b8 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    8068:	2301      	movs	r3, #1
    806a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    806e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    8072:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    8074:	4b11      	ldr	r3, [pc, #68]	; (80bc <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    8076:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    807a:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    807c:	2c01      	cmp	r4, #1
    807e:	bf08      	it	eq
    8080:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    8082:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
    8086:	bf18      	it	ne
    8088:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    808c:	f240 6e0c 	movw	lr, #1548	; 0x60c
    8090:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    8094:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    8096:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    809a:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    809c:	2c01      	cmp	r4, #1
    809e:	bf18      	it	ne
    80a0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    80a4:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    80a8:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    80ac:	e7c7      	b.n	803e <nrfx_twim_init+0x3e>
        return err_code;
    80ae:	4804      	ldr	r0, [pc, #16]	; (80c0 <nrfx_twim_init+0xc0>)
    80b0:	e7dd      	b.n	806e <nrfx_twim_init+0x6e>
    80b2:	bf00      	nop
    80b4:	20001c94 	.word	0x20001c94
    80b8:	0bad0000 	.word	0x0bad0000
    80bc:	50000300 	.word	0x50000300
    80c0:	0bad0005 	.word	0x0bad0005

000080c4 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    80c4:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    80c6:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    80c8:	2106      	movs	r1, #6
    80ca:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    80ce:	4b04      	ldr	r3, [pc, #16]	; (80e0 <nrfx_twim_enable+0x1c>)
    80d0:	2134      	movs	r1, #52	; 0x34
    80d2:	fb01 3302 	mla	r3, r1, r2, r3
    80d6:	2202      	movs	r2, #2
    80d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    80dc:	4770      	bx	lr
    80de:	bf00      	nop
    80e0:	20001c94 	.word	0x20001c94

000080e4 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    80e4:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    80e6:	4b0c      	ldr	r3, [pc, #48]	; (8118 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    80e8:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    80ea:	2034      	movs	r0, #52	; 0x34
    80ec:	fb00 3301 	mla	r3, r0, r1, r3
    80f0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    80f2:	480a      	ldr	r0, [pc, #40]	; (811c <nrfx_twim_disable+0x38>)
    80f4:	6099      	str	r1, [r3, #8]
    80f6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    80fa:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    80fe:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    8102:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    8106:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    810a:	2201      	movs	r2, #1
    810c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    8110:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    8114:	4770      	bx	lr
    8116:	bf00      	nop
    8118:	20001c94 	.word	0x20001c94
    811c:	019c0202 	.word	0x019c0202

00008120 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    8120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    8124:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8414 <nrfx_twim_xfer+0x2f4>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8128:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    812c:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    812e:	2334      	movs	r3, #52	; 0x34
    8130:	fb03 c30e 	mla	r3, r3, lr, ip
{
    8134:	4617      	mov	r7, r2
    p_cb->error = false;
    8136:	2200      	movs	r2, #0
    8138:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    813c:	684b      	ldr	r3, [r1, #4]
{
    813e:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    8140:	b14b      	cbz	r3, 8156 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    8142:	68cb      	ldr	r3, [r1, #12]
    8144:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    8148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    814c:	d003      	beq.n	8156 <nrfx_twim_xfer+0x36>
        return err_code;
    814e:	4eb2      	ldr	r6, [pc, #712]	; (8418 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8150:	4630      	mov	r0, r6
    8152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    8156:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    8158:	4bb0      	ldr	r3, [pc, #704]	; (841c <nrfx_twim_xfer+0x2fc>)
    815a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    815e:	fb06 c60e 	mla	r6, r6, lr, ip
    8162:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    8166:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    816a:	b123      	cbz	r3, 8176 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    816c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    816e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    8172:	4eab      	ldr	r6, [pc, #684]	; (8420 <nrfx_twim_xfer+0x300>)
    8174:	e7ec      	b.n	8150 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    8176:	f017 0f14 	tst.w	r7, #20
    817a:	bf0c      	ite	eq
    817c:	2301      	moveq	r3, #1
    817e:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    8180:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    8184:	46a9      	mov	r9, r5
    8186:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    818a:	f106 080c 	add.w	r8, r6, #12
    818e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    8192:	f8d9 3000 	ldr.w	r3, [r9]
    8196:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    819a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    819e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    81a2:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    81a4:	786b      	ldrb	r3, [r5, #1]
    81a6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    81aa:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    81ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    81b2:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    81b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    81ba:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    81be:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    81c2:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    81c6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    81ca:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    81ce:	bf18      	it	ne
    81d0:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    81d2:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    81d6:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    81da:	bf18      	it	ne
    81dc:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    81de:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    81e2:	782b      	ldrb	r3, [r5, #0]
    81e4:	2b03      	cmp	r3, #3
    81e6:	f200 80b9 	bhi.w	835c <nrfx_twim_xfer+0x23c>
    81ea:	e8df f003 	tbb	[pc, r3]
    81ee:	a48b      	.short	0xa48b
    81f0:	026d      	.short	0x026d
    81f2:	692b      	ldr	r3, [r5, #16]
    81f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    81f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    81fc:	d1a7      	bne.n	814e <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    81fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    8202:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8206:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8208:	68ea      	ldr	r2, [r5, #12]
    820a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    820e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8212:	2300      	movs	r3, #0
    8214:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    8218:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    821c:	2201      	movs	r2, #1
    821e:	6222      	str	r2, [r4, #32]
    8220:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8222:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    8226:	2a00      	cmp	r2, #0
    8228:	d0fb      	beq.n	8222 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    822a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    822e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8232:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    8234:	68ab      	ldr	r3, [r5, #8]
    8236:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    823a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    823e:	2334      	movs	r3, #52	; 0x34
    8240:	fb03 c30e 	mla	r3, r3, lr, ip
    8244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8248:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    824a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    824c:	4e75      	ldr	r6, [pc, #468]	; (8424 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    824e:	0738      	lsls	r0, r7, #28
    8250:	d407      	bmi.n	8262 <nrfx_twim_xfer+0x142>
    8252:	782a      	ldrb	r2, [r5, #0]
    8254:	2a03      	cmp	r2, #3
    8256:	d004      	beq.n	8262 <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8258:	2201      	movs	r2, #1
    825a:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    825c:	686b      	ldr	r3, [r5, #4]
    825e:	b903      	cbnz	r3, 8262 <nrfx_twim_xfer+0x142>
    8260:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    8262:	2334      	movs	r3, #52	; 0x34
    8264:	fb03 f30e 	mul.w	r3, r3, lr
    8268:	eb0c 0203 	add.w	r2, ip, r3
    826c:	f85c 1003 	ldr.w	r1, [ip, r3]
    8270:	2900      	cmp	r1, #0
    8272:	d176      	bne.n	8362 <nrfx_twim_xfer+0x242>
    8274:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8276:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    827a:	2b00      	cmp	r3, #0
    827c:	f000 8089 	beq.w	8392 <nrfx_twim_xfer+0x272>
    8280:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    8284:	2b00      	cmp	r3, #0
    8286:	f040 8087 	bne.w	8398 <nrfx_twim_xfer+0x278>
    828a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    828e:	2b00      	cmp	r3, #0
    8290:	f000 8095 	beq.w	83be <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    8294:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8296:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    829a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    829e:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    82a2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    82a6:	2d00      	cmp	r5, #0
    82a8:	f000 8081 	beq.w	83ae <nrfx_twim_xfer+0x28e>
    82ac:	f412 7f00 	tst.w	r2, #512	; 0x200
    82b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
    82b4:	d17e      	bne.n	83b4 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82b6:	6220      	str	r0, [r4, #32]
    82b8:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    82ba:	2a00      	cmp	r2, #0
    82bc:	d0db      	beq.n	8276 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    82be:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    82c2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    82c6:	e7d6      	b.n	8276 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    82c8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    82ca:	68ea      	ldr	r2, [r5, #12]
    82cc:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    82d0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    82d4:	692b      	ldr	r3, [r5, #16]
    82d6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    82da:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    82de:	f47f af36 	bne.w	814e <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    82e2:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    82e4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    82e8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    82ec:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    82f0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    82f4:	2334      	movs	r3, #52	; 0x34
    82f6:	fb03 c30e 	mla	r3, r3, lr, ip
    82fa:	2202      	movs	r2, #2
    82fc:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    82fe:	2301      	movs	r3, #1
    8300:	6223      	str	r3, [r4, #32]
    8302:	e7a2      	b.n	824a <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8304:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8306:	68ea      	ldr	r2, [r5, #12]
    8308:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    830c:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    8310:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    8314:	f04f 0334 	mov.w	r3, #52	; 0x34
    8318:	d008      	beq.n	832c <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    831a:	f44f 7280 	mov.w	r2, #256	; 0x100
    831e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    8322:	fb03 c30e 	mla	r3, r3, lr, ip
    8326:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    832a:	e7e7      	b.n	82fc <nrfx_twim_xfer+0x1dc>
    832c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8330:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    8334:	e7df      	b.n	82f6 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    8336:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8338:	68ea      	ldr	r2, [r5, #12]
    833a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    833e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    8342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8346:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    834a:	2334      	movs	r3, #52	; 0x34
    834c:	fb03 c30e 	mla	r3, r3, lr, ip
    8350:	2202      	movs	r2, #2
    8352:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8354:	2301      	movs	r3, #1
    8356:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    8358:	2300      	movs	r3, #0
    835a:	e777      	b.n	824c <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    835c:	4e32      	ldr	r6, [pc, #200]	; (8428 <nrfx_twim_xfer+0x308>)
    835e:	2308      	movs	r3, #8
    8360:	e775      	b.n	824e <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    8362:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    8364:	bf44      	itt	mi
    8366:	2300      	movmi	r3, #0
    8368:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    836a:	067a      	lsls	r2, r7, #25
    836c:	d406      	bmi.n	837c <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    836e:	2334      	movs	r3, #52	; 0x34
    8370:	fb03 c30e 	mla	r3, r3, lr, ip
    8374:	689a      	ldr	r2, [r3, #8]
    8376:	f042 0202 	orr.w	r2, r2, #2
    837a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    837c:	2334      	movs	r3, #52	; 0x34
    837e:	fb03 c30e 	mla	r3, r3, lr, ip
    8382:	689a      	ldr	r2, [r3, #8]
    8384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    8388:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    838a:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    838c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    8390:	e6de      	b.n	8150 <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8392:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    8396:	b123      	cbz	r3, 83a2 <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8398:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    839c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83a0:	e773      	b.n	828a <nrfx_twim_xfer+0x16a>
    83a2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    83a6:	2a00      	cmp	r2, #0
    83a8:	f43f af65 	beq.w	8276 <nrfx_twim_xfer+0x156>
    83ac:	e773      	b.n	8296 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83ae:	6220      	str	r0, [r4, #32]
    83b0:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    83b2:	e760      	b.n	8276 <nrfx_twim_xfer+0x156>
    83b4:	2a00      	cmp	r2, #0
    83b6:	d182      	bne.n	82be <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    83b8:	2b00      	cmp	r3, #0
    83ba:	f43f af5c 	beq.w	8276 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    83be:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    83c0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    83c4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    83c8:	fb01 c20e 	mla	r2, r1, lr, ip
    83cc:	2000      	movs	r0, #0
    83ce:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    83d2:	b18b      	cbz	r3, 83f8 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    83d4:	4a15      	ldr	r2, [pc, #84]	; (842c <nrfx_twim_xfer+0x30c>)
    83d6:	4e16      	ldr	r6, [pc, #88]	; (8430 <nrfx_twim_xfer+0x310>)
    83d8:	f013 0f01 	tst.w	r3, #1
    83dc:	bf18      	it	ne
    83de:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    83e0:	f013 0f02 	tst.w	r3, #2
    83e4:	f102 0201 	add.w	r2, r2, #1
    83e8:	bf18      	it	ne
    83ea:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    83ec:	f013 0f04 	tst.w	r3, #4
    83f0:	4b10      	ldr	r3, [pc, #64]	; (8434 <nrfx_twim_xfer+0x314>)
    83f2:	bf18      	it	ne
    83f4:	461e      	movne	r6, r3
    83f6:	e6ab      	b.n	8150 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    83f8:	067b      	lsls	r3, r7, #25
    83fa:	f53f aea9 	bmi.w	8150 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    83fe:	fb0e c101 	mla	r1, lr, r1, ip
    8402:	4620      	mov	r0, r4
    8404:	f004 f92e 	bl	c664 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    8408:	4b09      	ldr	r3, [pc, #36]	; (8430 <nrfx_twim_xfer+0x310>)
    840a:	2800      	cmp	r0, #0
    840c:	bf08      	it	eq
    840e:	461e      	moveq	r6, r3
    8410:	e69e      	b.n	8150 <nrfx_twim_xfer+0x30>
    8412:	bf00      	nop
    8414:	20001c94 	.word	0x20001c94
    8418:	0bad000a 	.word	0x0bad000a
    841c:	019c0202 	.word	0x019c0202
    8420:	0bad000b 	.word	0x0bad000b
    8424:	0bad0000 	.word	0x0bad0000
    8428:	0bad0004 	.word	0x0bad0004
    842c:	0bae0000 	.word	0x0bae0000
    8430:	0bad0001 	.word	0x0bad0001
    8434:	0bae0002 	.word	0x0bae0002

00008438 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    8438:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    843a:	4d59      	ldr	r5, [pc, #356]	; (85a0 <nrfx_twim_0_irq_handler+0x168>)
    843c:	4c59      	ldr	r4, [pc, #356]	; (85a4 <nrfx_twim_0_irq_handler+0x16c>)
    843e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    8442:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    8444:	b1fb      	cbz	r3, 8486 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8446:	2300      	movs	r3, #0
    8448:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    844c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8450:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    8454:	b9bb      	cbnz	r3, 8486 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    8456:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    8458:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    845c:	2302      	movs	r3, #2
    845e:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    8460:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    8462:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8466:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    846a:	b11b      	cbz	r3, 8474 <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    846c:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    8470:	059e      	lsls	r6, r3, #22
    8472:	d403      	bmi.n	847c <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8474:	4b4a      	ldr	r3, [pc, #296]	; (85a0 <nrfx_twim_0_irq_handler+0x168>)
    8476:	2201      	movs	r2, #1
    8478:	621a      	str	r2, [r3, #32]
    847a:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    847c:	2301      	movs	r3, #1
    847e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    8482:	b007      	add	sp, #28
    8484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8486:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    848a:	2b00      	cmp	r3, #0
    848c:	d059      	beq.n	8542 <nrfx_twim_0_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    848e:	2300      	movs	r3, #0
    8490:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    8494:	6a27      	ldr	r7, [r4, #32]
    8496:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    849a:	067d      	lsls	r5, r7, #25
    849c:	d40a      	bmi.n	84b4 <nrfx_twim_0_irq_handler+0x7c>
    849e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    84a2:	b93b      	cbnz	r3, 84b4 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    84a4:	493f      	ldr	r1, [pc, #252]	; (85a4 <nrfx_twim_0_irq_handler+0x16c>)
    84a6:	483e      	ldr	r0, [pc, #248]	; (85a0 <nrfx_twim_0_irq_handler+0x168>)
    84a8:	f004 f8dc 	bl	c664 <xfer_completeness_check>
    84ac:	f080 0001 	eor.w	r0, r0, #1
    84b0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    84b4:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    84b8:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    84bc:	d11f      	bne.n	84fe <nrfx_twim_0_irq_handler+0xc6>
            event.xfer_desc = p_cb->xfer_desc;
    84be:	4e3a      	ldr	r6, [pc, #232]	; (85a8 <nrfx_twim_0_irq_handler+0x170>)
    84c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    84c2:	ad01      	add	r5, sp, #4
    84c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    84c6:	6833      	ldr	r3, [r6, #0]
    84c8:	602b      	str	r3, [r5, #0]
    84ca:	4b35      	ldr	r3, [pc, #212]	; (85a0 <nrfx_twim_0_irq_handler+0x168>)
    84cc:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    84d0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    84d4:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    84d8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    84dc:	f1bc 0f00 	cmp.w	ip, #0
    84e0:	d002      	beq.n	84e8 <nrfx_twim_0_irq_handler+0xb0>
    84e2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    84e6:	b152      	cbz	r2, 84fe <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    84e8:	2200      	movs	r2, #0
    84ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    84ee:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    84f0:	4a2e      	ldr	r2, [pc, #184]	; (85ac <nrfx_twim_0_irq_handler+0x174>)
    84f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84f6:	4b2e      	ldr	r3, [pc, #184]	; (85b0 <nrfx_twim_0_irq_handler+0x178>)
    84f8:	2208      	movs	r2, #8
    84fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    84fe:	4a28      	ldr	r2, [pc, #160]	; (85a0 <nrfx_twim_0_irq_handler+0x168>)
    8500:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    8504:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    8508:	0798      	lsls	r0, r3, #30
    850a:	d443      	bmi.n	8594 <nrfx_twim_0_irq_handler+0x15c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    850c:	0759      	lsls	r1, r3, #29
    850e:	d443      	bmi.n	8598 <nrfx_twim_0_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    8510:	07da      	lsls	r2, r3, #31
    8512:	d443      	bmi.n	859c <nrfx_twim_0_irq_handler+0x164>
    else if (p_cb->error)
    8514:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    8518:	009b      	lsls	r3, r3, #2
    851a:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    851c:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    8520:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    8524:	b90b      	cbnz	r3, 852a <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    8526:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    852a:	6a23      	ldr	r3, [r4, #32]
    852c:	075b      	lsls	r3, r3, #29
    852e:	d503      	bpl.n	8538 <nrfx_twim_0_irq_handler+0x100>
    8530:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    8534:	2b00      	cmp	r3, #0
    8536:	d0a4      	beq.n	8482 <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    8538:	e9d4 3100 	ldrd	r3, r1, [r4]
    853c:	4668      	mov	r0, sp
    853e:	4798      	blx	r3
}
    8540:	e79f      	b.n	8482 <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8542:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    8546:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    854a:	7b23      	ldrb	r3, [r4, #12]
    854c:	b983      	cbnz	r3, 8570 <nrfx_twim_0_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    854e:	4f16      	ldr	r7, [pc, #88]	; (85a8 <nrfx_twim_0_irq_handler+0x170>)
    8550:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8552:	ae01      	add	r6, sp, #4
    8554:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8556:	683b      	ldr	r3, [r7, #0]
    8558:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    855a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    855e:	2b00      	cmp	r3, #0
    8560:	d1cd      	bne.n	84fe <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    8562:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    8566:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    8568:	4b10      	ldr	r3, [pc, #64]	; (85ac <nrfx_twim_0_irq_handler+0x174>)
    856a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    856e:	e7c2      	b.n	84f6 <nrfx_twim_0_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    8570:	f44f 7300 	mov.w	r3, #512	; 0x200
    8574:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    8578:	f240 2302 	movw	r3, #514	; 0x202
    857c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    857e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    8582:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    8586:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    8588:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    858c:	2301      	movs	r3, #1
    858e:	60ab      	str	r3, [r5, #8]
    8590:	622b      	str	r3, [r5, #32]
            return;
    8592:	e776      	b.n	8482 <nrfx_twim_0_irq_handler+0x4a>
    8594:	2301      	movs	r3, #1
    8596:	e7c1      	b.n	851c <nrfx_twim_0_irq_handler+0xe4>
    8598:	2302      	movs	r3, #2
    859a:	e7bf      	b.n	851c <nrfx_twim_0_irq_handler+0xe4>
    859c:	2303      	movs	r3, #3
    859e:	e7bd      	b.n	851c <nrfx_twim_0_irq_handler+0xe4>
    85a0:	40003000 	.word	0x40003000
    85a4:	20001c94 	.word	0x20001c94
    85a8:	20001ca0 	.word	0x20001ca0
    85ac:	019c0202 	.word	0x019c0202
    85b0:	e000e100 	.word	0xe000e100

000085b4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    85b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    85b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    85bc:	2a08      	cmp	r2, #8
    85be:	d106      	bne.n	85ce <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    85c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    85c4:	2b05      	cmp	r3, #5
    85c6:	d804      	bhi.n	85d2 <nrf52_errata_187+0x1e>
    85c8:	4a03      	ldr	r2, [pc, #12]	; (85d8 <nrf52_errata_187+0x24>)
    85ca:	5cd0      	ldrb	r0, [r2, r3]
    85cc:	4770      	bx	lr
                        return false;
    85ce:	2000      	movs	r0, #0
    85d0:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    85d2:	2001      	movs	r0, #1
}
    85d4:	4770      	bx	lr
    85d6:	bf00      	nop
    85d8:	0000e48b 	.word	0x0000e48b

000085dc <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    85dc:	4b05      	ldr	r3, [pc, #20]	; (85f4 <ep_state_access+0x18>)
    85de:	f010 0f80 	tst.w	r0, #128	; 0x80
    85e2:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    85e6:	bf08      	it	eq
    85e8:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    85ea:	f000 000f 	and.w	r0, r0, #15
}
    85ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    85f2:	4770      	bx	lr
    85f4:	20001e70 	.word	0x20001e70

000085f8 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    85f8:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    85fa:	4a07      	ldr	r2, [pc, #28]	; (8618 <ev_usbreset_handler+0x20>)
    85fc:	2300      	movs	r3, #0
    85fe:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8600:	4a06      	ldr	r2, [pc, #24]	; (861c <ev_usbreset_handler+0x24>)
    8602:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    8604:	2301      	movs	r3, #1
    8606:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    8608:	4b05      	ldr	r3, [pc, #20]	; (8620 <ev_usbreset_handler+0x28>)
    860a:	a801      	add	r0, sp, #4
    860c:	681b      	ldr	r3, [r3, #0]
    860e:	4798      	blx	r3
}
    8610:	b003      	add	sp, #12
    8612:	f85d fb04 	ldr.w	pc, [sp], #4
    8616:	bf00      	nop
    8618:	2000214d 	.word	0x2000214d
    861c:	2000214c 	.word	0x2000214c
    8620:	20001f08 	.word	0x20001f08

00008624 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    8624:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    8626:	4b19      	ldr	r3, [pc, #100]	; (868c <ev_usbevent_handler+0x68>)
    8628:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    862c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    8630:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    8632:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8636:	d508      	bpl.n	864a <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8638:	4b15      	ldr	r3, [pc, #84]	; (8690 <ev_usbevent_handler+0x6c>)
    863a:	2201      	movs	r2, #1
    863c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    863e:	2302      	movs	r3, #2
    8640:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8642:	4b14      	ldr	r3, [pc, #80]	; (8694 <ev_usbevent_handler+0x70>)
    8644:	a801      	add	r0, sp, #4
    8646:	681b      	ldr	r3, [r3, #0]
    8648:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    864a:	05a2      	lsls	r2, r4, #22
    864c:	d508      	bpl.n	8660 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    864e:	4b10      	ldr	r3, [pc, #64]	; (8690 <ev_usbevent_handler+0x6c>)
    8650:	2200      	movs	r2, #0
    8652:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8654:	2303      	movs	r3, #3
    8656:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8658:	4b0e      	ldr	r3, [pc, #56]	; (8694 <ev_usbevent_handler+0x70>)
    865a:	a801      	add	r0, sp, #4
    865c:	681b      	ldr	r3, [r3, #0]
    865e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8660:	0563      	lsls	r3, r4, #21
    8662:	d510      	bpl.n	8686 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8664:	4b0a      	ldr	r3, [pc, #40]	; (8690 <ev_usbevent_handler+0x6c>)
    8666:	781a      	ldrb	r2, [r3, #0]
    8668:	b16a      	cbz	r2, 8686 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    866a:	2200      	movs	r2, #0
    866c:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    866e:	4b07      	ldr	r3, [pc, #28]	; (868c <ev_usbevent_handler+0x68>)
    8670:	2201      	movs	r2, #1
    8672:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8676:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8678:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    867a:	2304      	movs	r3, #4
    867c:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    867e:	4b05      	ldr	r3, [pc, #20]	; (8694 <ev_usbevent_handler+0x70>)
    8680:	a801      	add	r0, sp, #4
    8682:	681b      	ldr	r3, [r3, #0]
    8684:	4798      	blx	r3
        }
    }
}
    8686:	b002      	add	sp, #8
    8688:	bd10      	pop	{r4, pc}
    868a:	bf00      	nop
    868c:	40027000 	.word	0x40027000
    8690:	2000214d 	.word	0x2000214d
    8694:	20001f08 	.word	0x20001f08

00008698 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    8698:	f04f 0320 	mov.w	r3, #32
    869c:	f3ef 8011 	mrs	r0, BASEPRI
    86a0:	f383 8812 	msr	BASEPRI_MAX, r3
    86a4:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    86a8:	4b0a      	ldr	r3, [pc, #40]	; (86d4 <usbd_errata_187_211_begin+0x3c>)
    86aa:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    86ae:	2203      	movs	r2, #3
    86b0:	b961      	cbnz	r1, 86cc <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    86b2:	f249 3175 	movw	r1, #37749	; 0x9375
    86b6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    86ba:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    86be:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    86c2:	f380 8811 	msr	BASEPRI, r0
    86c6:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    86ca:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    86cc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    86d0:	e7f7      	b.n	86c2 <usbd_errata_187_211_begin+0x2a>
    86d2:	bf00      	nop
    86d4:	4006e000 	.word	0x4006e000

000086d8 <usbd_errata_187_211_end>:
	__asm__ volatile(
    86d8:	f04f 0320 	mov.w	r3, #32
    86dc:	f3ef 8011 	mrs	r0, BASEPRI
    86e0:	f383 8812 	msr	BASEPRI_MAX, r3
    86e4:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    86e8:	4b0a      	ldr	r3, [pc, #40]	; (8714 <usbd_errata_187_211_end+0x3c>)
    86ea:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    86ee:	b961      	cbnz	r1, 870a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    86f0:	f249 3275 	movw	r2, #37749	; 0x9375
    86f4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    86f8:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    86fc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8700:	f380 8811 	msr	BASEPRI, r0
    8704:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8708:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    870a:	2200      	movs	r2, #0
    870c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    8710:	e7f6      	b.n	8700 <usbd_errata_187_211_end+0x28>
    8712:	bf00      	nop
    8714:	4006e000 	.word	0x4006e000

00008718 <nrfx_usbd_feeder_flash>:
{
    8718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    871a:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    871c:	4f0b      	ldr	r7, [pc, #44]	; (874c <nrfx_usbd_feeder_flash+0x34>)
    871e:	429a      	cmp	r2, r3
    8720:	bf28      	it	cs
    8722:	461a      	movcs	r2, r3
{
    8724:	460c      	mov	r4, r1
    8726:	4615      	mov	r5, r2
    8728:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    872a:	6809      	ldr	r1, [r1, #0]
    872c:	4638      	mov	r0, r7
    872e:	f003 fcff 	bl	c130 <memcpy>
    p_next->size = tx_size;
    8732:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    8736:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8738:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    873a:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    873c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    873e:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    8740:	6023      	str	r3, [r4, #0]
}
    8742:	3800      	subs	r0, #0
    8744:	bf18      	it	ne
    8746:	2001      	movne	r0, #1
    8748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    874a:	bf00      	nop
    874c:	20001cc8 	.word	0x20001cc8

00008750 <nrfx_usbd_feeder_flash_zlp>:
{
    8750:	b570      	push	{r4, r5, r6, lr}
    8752:	684b      	ldr	r3, [r1, #4]
    8754:	429a      	cmp	r2, r3
    8756:	bf28      	it	cs
    8758:	461a      	movcs	r2, r3
    875a:	4606      	mov	r6, r0
    875c:	460d      	mov	r5, r1
    875e:	4614      	mov	r4, r2
    if (tx_size != 0)
    8760:	b182      	cbz	r2, 8784 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    8762:	6809      	ldr	r1, [r1, #0]
    8764:	4808      	ldr	r0, [pc, #32]	; (8788 <nrfx_usbd_feeder_flash_zlp+0x38>)
    8766:	f003 fce3 	bl	c130 <memcpy>
        p_next->p_data.tx = p_buffer;
    876a:	4b07      	ldr	r3, [pc, #28]	; (8788 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    876c:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    8770:	686b      	ldr	r3, [r5, #4]
    8772:	1b1b      	subs	r3, r3, r4
    8774:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    8776:	682b      	ldr	r3, [r5, #0]
    8778:	4423      	add	r3, r4
}
    877a:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    877c:	602b      	str	r3, [r5, #0]
}
    877e:	bf18      	it	ne
    8780:	2001      	movne	r0, #1
    8782:	bd70      	pop	{r4, r5, r6, pc}
    8784:	4613      	mov	r3, r2
    8786:	e7f1      	b.n	876c <nrfx_usbd_feeder_flash_zlp+0x1c>
    8788:	20001cc8 	.word	0x20001cc8

0000878c <ev_sof_handler>:
{
    878c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    878e:	2300      	movs	r3, #0
    8790:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8794:	4b0b      	ldr	r3, [pc, #44]	; (87c4 <ev_sof_handler+0x38>)
    8796:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    879a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    879e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    87a2:	4a09      	ldr	r2, [pc, #36]	; (87c8 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    87a4:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    87a6:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    87a8:	bf14      	ite	ne
    87aa:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    87ae:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    87b2:	430b      	orrs	r3, r1
    87b4:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    87b6:	4b05      	ldr	r3, [pc, #20]	; (87cc <ev_sof_handler+0x40>)
    87b8:	a801      	add	r0, sp, #4
    87ba:	681b      	ldr	r3, [r3, #0]
    87bc:	4798      	blx	r3
}
    87be:	b003      	add	sp, #12
    87c0:	f85d fb04 	ldr.w	pc, [sp], #4
    87c4:	40027000 	.word	0x40027000
    87c8:	20001f04 	.word	0x20001f04
    87cc:	20001f08 	.word	0x20001f08

000087d0 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    87d0:	4b06      	ldr	r3, [pc, #24]	; (87ec <atomic_and.constprop.0.isra.0+0x1c>)
    87d2:	f3bf 8f5b 	dmb	ish
    87d6:	e853 1f00 	ldrex	r1, [r3]
    87da:	4001      	ands	r1, r0
    87dc:	e843 1200 	strex	r2, r1, [r3]
    87e0:	2a00      	cmp	r2, #0
    87e2:	d1f8      	bne.n	87d6 <atomic_and.constprop.0.isra.0+0x6>
    87e4:	f3bf 8f5b 	dmb	ish
}
    87e8:	4770      	bx	lr
    87ea:	bf00      	nop
    87ec:	20001f00 	.word	0x20001f00

000087f0 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    87f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    87f4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    87f8:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    87fa:	bf02      	ittt	eq
    87fc:	4b03      	ldreq	r3, [pc, #12]	; (880c <usbd_dma_pending_clear+0x1c>)
    87fe:	2200      	moveq	r2, #0
    8800:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    8804:	4b02      	ldr	r3, [pc, #8]	; (8810 <usbd_dma_pending_clear+0x20>)
    8806:	2200      	movs	r2, #0
    8808:	701a      	strb	r2, [r3, #0]
}
    880a:	4770      	bx	lr
    880c:	40027000 	.word	0x40027000
    8810:	2000214b 	.word	0x2000214b

00008814 <nrf_usbd_ep0in_dma_handler>:
{
    8814:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    8816:	f7ff ffeb 	bl	87f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    881a:	4b08      	ldr	r3, [pc, #32]	; (883c <nrf_usbd_ep0in_dma_handler+0x28>)
    881c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    8820:	2a03      	cmp	r2, #3
    8822:	d105      	bne.n	8830 <nrf_usbd_ep0in_dma_handler+0x1c>
}
    8824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8828:	f06f 0001 	mvn.w	r0, #1
    882c:	f7ff bfd0 	b.w	87d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8834:	2b00      	cmp	r3, #0
    8836:	d0f5      	beq.n	8824 <nrf_usbd_ep0in_dma_handler+0x10>
}
    8838:	bd08      	pop	{r3, pc}
    883a:	bf00      	nop
    883c:	20001de0 	.word	0x20001de0

00008840 <usbd_ep_data_handler>:
{
    8840:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    8842:	2201      	movs	r2, #1
    8844:	fa02 f501 	lsl.w	r5, r2, r1
    8848:	491c      	ldr	r1, [pc, #112]	; (88bc <usbd_ep_data_handler+0x7c>)
    884a:	4e1d      	ldr	r6, [pc, #116]	; (88c0 <usbd_ep_data_handler+0x80>)
    884c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    884e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    8852:	ea43 0305 	orr.w	r3, r3, r5
{
    8856:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    8858:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    885a:	d024      	beq.n	88a6 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    885c:	f000 020f 	and.w	r2, r0, #15
    8860:	4b18      	ldr	r3, [pc, #96]	; (88c4 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8862:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    886a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    886e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8870:	b132      	cbz	r2, 8880 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8872:	2200      	movs	r2, #0
    8874:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    8876:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8878:	681b      	ldr	r3, [r3, #0]
    887a:	d011      	beq.n	88a0 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    887c:	f003 ff69 	bl	c752 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8880:	6833      	ldr	r3, [r6, #0]
    8882:	402b      	ands	r3, r5
    8884:	d10a      	bne.n	889c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8886:	2206      	movs	r2, #6
    8888:	f88d 2004 	strb.w	r2, [sp, #4]
    888c:	f88d 4006 	strb.w	r4, [sp, #6]
    8890:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8894:	4b0c      	ldr	r3, [pc, #48]	; (88c8 <usbd_ep_data_handler+0x88>)
    8896:	a801      	add	r0, sp, #4
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	4798      	blx	r3
}
    889c:	b002      	add	sp, #8
    889e:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    88a0:	f7ff ffb8 	bl	8814 <nrf_usbd_ep0in_dma_handler>
    88a4:	e7ec      	b.n	8880 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    88a6:	6833      	ldr	r3, [r6, #0]
    88a8:	421d      	tst	r5, r3
    88aa:	d1f7      	bne.n	889c <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    88ac:	2306      	movs	r3, #6
    88ae:	f88d 3004 	strb.w	r3, [sp, #4]
    88b2:	f88d 0006 	strb.w	r0, [sp, #6]
    88b6:	f88d 2007 	strb.w	r2, [sp, #7]
    88ba:	e7eb      	b.n	8894 <usbd_ep_data_handler+0x54>
    88bc:	20001f04 	.word	0x20001f04
    88c0:	20001f00 	.word	0x20001f00
    88c4:	0000d66a 	.word	0x0000d66a
    88c8:	20001f08 	.word	0x20001f08

000088cc <ev_setup_data_handler>:
{
    88cc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    88ce:	4b05      	ldr	r3, [pc, #20]	; (88e4 <ev_setup_data_handler+0x18>)
    88d0:	781a      	ldrb	r2, [r3, #0]
    88d2:	4610      	mov	r0, r2
    88d4:	f003 ff34 	bl	c740 <ep2bit>
}
    88d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    88dc:	4601      	mov	r1, r0
    88de:	4610      	mov	r0, r2
    88e0:	f7ff bfae 	b.w	8840 <usbd_ep_data_handler>
    88e4:	2000214c 	.word	0x2000214c

000088e8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    88e8:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    88ea:	f7ff ff81 	bl	87f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    88ee:	4b0c      	ldr	r3, [pc, #48]	; (8920 <ev_dma_epout8_handler+0x38>)
    88f0:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    88f4:	2a03      	cmp	r2, #3
    88f6:	d010      	beq.n	891a <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    88f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    88fc:	b96b      	cbnz	r3, 891a <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    88fe:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    8902:	f7ff ff65 	bl	87d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8906:	2306      	movs	r3, #6
    8908:	f88d 3004 	strb.w	r3, [sp, #4]
    890c:	2308      	movs	r3, #8
    890e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8912:	4b04      	ldr	r3, [pc, #16]	; (8924 <ev_dma_epout8_handler+0x3c>)
    8914:	a801      	add	r0, sp, #4
    8916:	681b      	ldr	r3, [r3, #0]
    8918:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    891a:	b003      	add	sp, #12
    891c:	f85d fb04 	ldr.w	pc, [sp], #4
    8920:	20001de0 	.word	0x20001de0
    8924:	20001f08 	.word	0x20001f08

00008928 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8928:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    892a:	f7ff ff61 	bl	87f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    892e:	4b10      	ldr	r3, [pc, #64]	; (8970 <ev_dma_epin8_handler+0x48>)
    8930:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    8934:	2a03      	cmp	r2, #3
    8936:	d106      	bne.n	8946 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8938:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    893c:	b003      	add	sp, #12
    893e:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8942:	f7ff bf45 	b.w	87d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8946:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    894a:	b96b      	cbnz	r3, 8968 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    894c:	f46f 7080 	mvn.w	r0, #256	; 0x100
    8950:	f7ff ff3e 	bl	87d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8954:	2306      	movs	r3, #6
    8956:	f88d 3004 	strb.w	r3, [sp, #4]
    895a:	2388      	movs	r3, #136	; 0x88
    895c:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8960:	4b04      	ldr	r3, [pc, #16]	; (8974 <ev_dma_epin8_handler+0x4c>)
    8962:	a801      	add	r0, sp, #4
    8964:	681b      	ldr	r3, [r3, #0]
    8966:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8968:	b003      	add	sp, #12
    896a:	f85d fb04 	ldr.w	pc, [sp], #4
    896e:	bf00      	nop
    8970:	20001de0 	.word	0x20001de0
    8974:	20001f08 	.word	0x20001f08

00008978 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8978:	4a02      	ldr	r2, [pc, #8]	; (8984 <nrfx_usbd_uninit+0xc>)
    897a:	2300      	movs	r3, #0
    897c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    897e:	4a02      	ldr	r2, [pc, #8]	; (8988 <nrfx_usbd_uninit+0x10>)
    8980:	7013      	strb	r3, [r2, #0]
    return;
}
    8982:	4770      	bx	lr
    8984:	20001f08 	.word	0x20001f08
    8988:	2000214e 	.word	0x2000214e

0000898c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    898c:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    898e:	4b4c      	ldr	r3, [pc, #304]	; (8ac0 <nrfx_usbd_enable+0x134>)
    8990:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8994:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    899c:	f7ff fe0a 	bl	85b4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    89a0:	b108      	cbz	r0, 89a6 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    89a2:	f7ff fe79 	bl	8698 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    89a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    89aa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    89ae:	2b08      	cmp	r3, #8
    89b0:	d119      	bne.n	89e6 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    89b2:	f04f 0320 	mov.w	r3, #32
    89b6:	f3ef 8011 	mrs	r0, BASEPRI
    89ba:	f383 8812 	msr	BASEPRI_MAX, r3
    89be:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    89c2:	4b40      	ldr	r3, [pc, #256]	; (8ac4 <nrfx_usbd_enable+0x138>)
    89c4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    89c8:	22c0      	movs	r2, #192	; 0xc0
    89ca:	2900      	cmp	r1, #0
    89cc:	d170      	bne.n	8ab0 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    89ce:	f249 3175 	movw	r1, #37749	; 0x9375
    89d2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    89d6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    89da:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    89de:	f380 8811 	msr	BASEPRI, r0
    89e2:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    89e6:	4b36      	ldr	r3, [pc, #216]	; (8ac0 <nrfx_usbd_enable+0x134>)
    89e8:	2201      	movs	r2, #1
    89ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    89ee:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    89f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    89f6:	0512      	lsls	r2, r2, #20
    89f8:	d5fb      	bpl.n	89f2 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    89fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    89fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8a02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8a06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8a0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8a0e:	2b08      	cmp	r3, #8
    8a10:	d118      	bne.n	8a44 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    8a12:	f04f 0320 	mov.w	r3, #32
    8a16:	f3ef 8011 	mrs	r0, BASEPRI
    8a1a:	f383 8812 	msr	BASEPRI_MAX, r3
    8a1e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8a22:	4b28      	ldr	r3, [pc, #160]	; (8ac4 <nrfx_usbd_enable+0x138>)
    8a24:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    8a28:	2900      	cmp	r1, #0
    8a2a:	d144      	bne.n	8ab6 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8a2c:	f249 3275 	movw	r2, #37749	; 0x9375
    8a30:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    8a34:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8a38:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8a3c:	f380 8811 	msr	BASEPRI, r0
    8a40:	f3bf 8f6f 	isb	sy
    8a44:	f7ff fdb6 	bl	85b4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    8a48:	b130      	cbz	r0, 8a58 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    8a4a:	f7ff fe45 	bl	86d8 <usbd_errata_187_211_end>
    8a4e:	f7ff fdb1 	bl	85b4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8a52:	b108      	cbz	r0, 8a58 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    8a54:	f7ff fe20 	bl	8698 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    8a5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8a60:	2b08      	cmp	r3, #8
    8a62:	4b17      	ldr	r3, [pc, #92]	; (8ac0 <nrfx_usbd_enable+0x134>)
    8a64:	d10a      	bne.n	8a7c <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    8a66:	f240 72e3 	movw	r2, #2019	; 0x7e3
    8a6a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    8a6e:	2240      	movs	r2, #64	; 0x40
    8a70:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    8a74:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    8a78:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    8a7c:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8a7e:	2280      	movs	r2, #128	; 0x80
    8a80:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    8a84:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8a88:	4b0f      	ldr	r3, [pc, #60]	; (8ac8 <nrfx_usbd_enable+0x13c>)
    8a8a:	f240 12ff 	movw	r2, #511	; 0x1ff
    8a8e:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    8a90:	4b0e      	ldr	r3, [pc, #56]	; (8acc <nrfx_usbd_enable+0x140>)
    8a92:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    8a94:	f7ff feac 	bl	87f0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8a98:	4b0d      	ldr	r3, [pc, #52]	; (8ad0 <nrfx_usbd_enable+0x144>)
    8a9a:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8a9c:	4b0d      	ldr	r3, [pc, #52]	; (8ad4 <nrfx_usbd_enable+0x148>)
    8a9e:	2202      	movs	r2, #2
    8aa0:	701a      	strb	r2, [r3, #0]
    8aa2:	f7ff fd87 	bl	85b4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8aa6:	b150      	cbz	r0, 8abe <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    8aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    8aac:	f7ff be14 	b.w	86d8 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    8ab0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    8ab4:	e793      	b.n	89de <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    8ab6:	2200      	movs	r2, #0
    8ab8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    8abc:	e7be      	b.n	8a3c <nrfx_usbd_enable+0xb0>
}
    8abe:	bd08      	pop	{r3, pc}
    8ac0:	40027000 	.word	0x40027000
    8ac4:	4006e000 	.word	0x4006e000
    8ac8:	20001f04 	.word	0x20001f04
    8acc:	20001f00 	.word	0x20001f00
    8ad0:	2000214c 	.word	0x2000214c
    8ad4:	2000214e 	.word	0x2000214e

00008ad8 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8ad8:	4b0a      	ldr	r3, [pc, #40]	; (8b04 <nrfx_usbd_start+0x2c>)
    8ada:	2200      	movs	r2, #0
{
    8adc:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    8ade:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    8ae0:	4a09      	ldr	r2, [pc, #36]	; (8b08 <nrfx_usbd_start+0x30>)
    8ae2:	4b0a      	ldr	r3, [pc, #40]	; (8b0c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    8ae4:	4c0a      	ldr	r4, [pc, #40]	; (8b10 <nrfx_usbd_start+0x38>)
    8ae6:	2800      	cmp	r0, #0
    8ae8:	bf08      	it	eq
    8aea:	4613      	moveq	r3, r2
    8aec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8af0:	2027      	movs	r0, #39	; 0x27
    8af2:	f7fb ffb3 	bl	4a5c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8af6:	2301      	movs	r3, #1
    8af8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8afc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    8b00:	bd10      	pop	{r4, pc}
    8b02:	bf00      	nop
    8b04:	2000214d 	.word	0x2000214d
    8b08:	01c01407 	.word	0x01c01407
    8b0c:	01e01407 	.word	0x01e01407
    8b10:	40027000 	.word	0x40027000

00008b14 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8b14:	4b03      	ldr	r3, [pc, #12]	; (8b24 <nrfx_usbd_is_enabled+0x10>)
    8b16:	7818      	ldrb	r0, [r3, #0]
}
    8b18:	2801      	cmp	r0, #1
    8b1a:	bf94      	ite	ls
    8b1c:	2000      	movls	r0, #0
    8b1e:	2001      	movhi	r0, #1
    8b20:	4770      	bx	lr
    8b22:	bf00      	nop
    8b24:	2000214e 	.word	0x2000214e

00008b28 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    8b28:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b2a:	f04f 0320 	mov.w	r3, #32
    8b2e:	f3ef 8111 	mrs	r1, BASEPRI
    8b32:	f383 8812 	msr	BASEPRI_MAX, r3
    8b36:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    8b3a:	4b0f      	ldr	r3, [pc, #60]	; (8b78 <nrfx_usbd_suspend+0x50>)
    8b3c:	781b      	ldrb	r3, [r3, #0]
    8b3e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8b42:	b193      	cbz	r3, 8b6a <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    8b44:	4b0d      	ldr	r3, [pc, #52]	; (8b7c <nrfx_usbd_suspend+0x54>)
    8b46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8b4a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8b4e:	d10c      	bne.n	8b6a <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8b50:	2401      	movs	r4, #1
    8b52:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8b56:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8b5a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8b5e:	05a4      	lsls	r4, r4, #22
    8b60:	d504      	bpl.n	8b6c <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    8b62:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8b66:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8b6a:	2000      	movs	r0, #0
	__asm__ volatile(
    8b6c:	f381 8811 	msr	BASEPRI, r1
    8b70:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    8b74:	bd10      	pop	{r4, pc}
    8b76:	bf00      	nop
    8b78:	2000214d 	.word	0x2000214d
    8b7c:	40027000 	.word	0x40027000

00008b80 <nrfx_usbd_init>:
{
    8b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    8b82:	4b1c      	ldr	r3, [pc, #112]	; (8bf4 <nrfx_usbd_init+0x74>)
    8b84:	781c      	ldrb	r4, [r3, #0]
    8b86:	bb94      	cbnz	r4, 8bee <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    8b88:	4a1b      	ldr	r2, [pc, #108]	; (8bf8 <nrfx_usbd_init+0x78>)
    8b8a:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8b8c:	2201      	movs	r2, #1
    8b8e:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8b90:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    8b94:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8b96:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8b9a:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8b9e:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8ba0:	bf14      	ite	ne
    8ba2:	4639      	movne	r1, r7
    8ba4:	2140      	moveq	r1, #64	; 0x40
    8ba6:	4628      	mov	r0, r5
    8ba8:	f003 fe02 	bl	c7b0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    8bac:	4628      	mov	r0, r5
    8bae:	f7ff fd15 	bl	85dc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8bb2:	3401      	adds	r4, #1
    8bb4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    8bb6:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    8bb8:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    8bba:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8bbc:	d1eb      	bne.n	8b96 <nrfx_usbd_init+0x16>
    8bbe:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8bc0:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    8bc4:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8bc6:	f014 0f08 	tst.w	r4, #8
    8bca:	b2e6      	uxtb	r6, r4
    8bcc:	bf14      	ite	ne
    8bce:	4639      	movne	r1, r7
    8bd0:	2140      	moveq	r1, #64	; 0x40
    8bd2:	4630      	mov	r0, r6
    8bd4:	f003 fdec 	bl	c7b0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    8bd8:	4630      	mov	r0, r6
    8bda:	f7ff fcff 	bl	85dc <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8bde:	3401      	adds	r4, #1
    8be0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    8be2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    8be4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    8be6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8be8:	d1ed      	bne.n	8bc6 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    8bea:	4804      	ldr	r0, [pc, #16]	; (8bfc <nrfx_usbd_init+0x7c>)
}
    8bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    8bee:	4804      	ldr	r0, [pc, #16]	; (8c00 <nrfx_usbd_init+0x80>)
    8bf0:	e7fc      	b.n	8bec <nrfx_usbd_init+0x6c>
    8bf2:	bf00      	nop
    8bf4:	2000214e 	.word	0x2000214e
    8bf8:	20001f08 	.word	0x20001f08
    8bfc:	0bad0000 	.word	0x0bad0000
    8c00:	0bad0005 	.word	0x0bad0005

00008c04 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c08:	4604      	mov	r4, r0
	__asm__ volatile(
    8c0a:	f04f 0320 	mov.w	r3, #32
    8c0e:	f3ef 8611 	mrs	r6, BASEPRI
    8c12:	f383 8812 	msr	BASEPRI_MAX, r3
    8c16:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8c1a:	f010 090f 	ands.w	r9, r0, #15
    8c1e:	d103      	bne.n	8c28 <nrfx_usbd_ep_transfer+0x24>
    8c20:	4b27      	ldr	r3, [pc, #156]	; (8cc0 <nrfx_usbd_ep_transfer+0xbc>)
    8c22:	781b      	ldrb	r3, [r3, #0]
    8c24:	4283      	cmp	r3, r0
    8c26:	d147      	bne.n	8cb8 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8c28:	4b26      	ldr	r3, [pc, #152]	; (8cc4 <nrfx_usbd_ep_transfer+0xc0>)
    8c2a:	4f27      	ldr	r7, [pc, #156]	; (8cc8 <nrfx_usbd_ep_transfer+0xc4>)
    8c2c:	681a      	ldr	r2, [r3, #0]
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	43d2      	mvns	r2, r2
    8c32:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    8c34:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8c36:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    8c38:	f003 fd82 	bl	c740 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8c3c:	f04f 0801 	mov.w	r8, #1
    8c40:	fa08 f800 	lsl.w	r8, r8, r0
    8c44:	ea12 0f08 	tst.w	r2, r8
    8c48:	d138      	bne.n	8cbc <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8c4a:	4620      	mov	r0, r4
    8c4c:	f7ff fcc6 	bl	85dc <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8c50:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    8c52:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8c54:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8c56:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    8c5a:	d529      	bpl.n	8cb0 <nrfx_usbd_ep_transfer+0xac>
    8c5c:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8c5e:	6888      	ldr	r0, [r1, #8]
    8c60:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8c64:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8c68:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8c6c:	d11d      	bne.n	8caa <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8c6e:	4a17      	ldr	r2, [pc, #92]	; (8ccc <nrfx_usbd_ep_transfer+0xc8>)
    8c70:	4c17      	ldr	r4, [pc, #92]	; (8cd0 <nrfx_usbd_ep_transfer+0xcc>)
    8c72:	2800      	cmp	r0, #0
    8c74:	bf08      	it	eq
    8c76:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8c78:	4816      	ldr	r0, [pc, #88]	; (8cd4 <nrfx_usbd_ep_transfer+0xd0>)
    8c7a:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8c7c:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    8c7e:	c907      	ldmia	r1, {r0, r1, r2}
    8c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8c84:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    8c86:	2300      	movs	r3, #0
    8c88:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8c8a:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8c8c:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    8c8e:	4812      	ldr	r0, [pc, #72]	; (8cd8 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8c90:	ea43 0308 	orr.w	r3, r3, r8
    8c94:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8c96:	4b11      	ldr	r3, [pc, #68]	; (8cdc <nrfx_usbd_ep_transfer+0xd8>)
    8c98:	2280      	movs	r2, #128	; 0x80
    8c9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    8c9e:	f386 8811 	msr	BASEPRI, r6
    8ca2:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8caa:	4a0d      	ldr	r2, [pc, #52]	; (8ce0 <nrfx_usbd_ep_transfer+0xdc>)
    8cac:	4c0d      	ldr	r4, [pc, #52]	; (8ce4 <nrfx_usbd_ep_transfer+0xe0>)
    8cae:	e7e0      	b.n	8c72 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    8cb0:	4a0d      	ldr	r2, [pc, #52]	; (8ce8 <nrfx_usbd_ep_transfer+0xe4>)
    8cb2:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    8cb4:	4a0d      	ldr	r2, [pc, #52]	; (8cec <nrfx_usbd_ep_transfer+0xe8>)
    8cb6:	e7e1      	b.n	8c7c <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    8cb8:	480d      	ldr	r0, [pc, #52]	; (8cf0 <nrfx_usbd_ep_transfer+0xec>)
    8cba:	e7f0      	b.n	8c9e <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    8cbc:	480d      	ldr	r0, [pc, #52]	; (8cf4 <nrfx_usbd_ep_transfer+0xf0>)
    8cbe:	e7ee      	b.n	8c9e <nrfx_usbd_ep_transfer+0x9a>
    8cc0:	2000214c 	.word	0x2000214c
    8cc4:	20001f04 	.word	0x20001f04
    8cc8:	20001f00 	.word	0x20001f00
    8ccc:	0000c719 	.word	0x0000c719
    8cd0:	0000c6f7 	.word	0x0000c6f7
    8cd4:	20001d74 	.word	0x20001d74
    8cd8:	0bad0000 	.word	0x0bad0000
    8cdc:	e000e100 	.word	0xe000e100
    8ce0:	00008751 	.word	0x00008751
    8ce4:	00008719 	.word	0x00008719
    8ce8:	20001d08 	.word	0x20001d08
    8cec:	0000c6c5 	.word	0x0000c6c5
    8cf0:	0bad000a 	.word	0x0bad000a
    8cf4:	0bad000b 	.word	0x0bad000b

00008cf8 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8cf8:	f010 0f08 	tst.w	r0, #8
    8cfc:	4b07      	ldr	r3, [pc, #28]	; (8d1c <nrfx_usbd_epout_size_get+0x24>)
    8cfe:	d006      	beq.n	8d0e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8d00:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8d04:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8d08:	bf18      	it	ne
    8d0a:	2000      	movne	r0, #0
    8d0c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8d0e:	f000 000f 	and.w	r0, r0, #15
    8d12:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8d16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8d1a:	4770      	bx	lr
    8d1c:	40027000 	.word	0x40027000

00008d20 <usbd_dmareq_process>:
{
    8d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8d24:	4e59      	ldr	r6, [pc, #356]	; (8e8c <usbd_dmareq_process+0x16c>)
    8d26:	7833      	ldrb	r3, [r6, #0]
{
    8d28:	b085      	sub	sp, #20
    if (!m_dma_pending)
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d173      	bne.n	8e16 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8d2e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8e90 <usbd_dmareq_process+0x170>
    8d32:	4d58      	ldr	r5, [pc, #352]	; (8e94 <usbd_dmareq_process+0x174>)
    8d34:	f8d8 4000 	ldr.w	r4, [r8]
    8d38:	682b      	ldr	r3, [r5, #0]
    8d3a:	401c      	ands	r4, r3
    8d3c:	d06b      	beq.n	8e16 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8d3e:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    8d42:	bf14      	ite	ne
    8d44:	fa93 f4a3 	rbitne	r4, r3
    8d48:	fa94 f4a4 	rbiteq	r4, r4
    8d4c:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8d50:	f04f 0901 	mov.w	r9, #1
    8d54:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8d58:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8d5a:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8d5e:	d95d      	bls.n	8e1c <usbd_dmareq_process+0xfc>
    8d60:	3c10      	subs	r4, #16
    8d62:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8d64:	4620      	mov	r0, r4
    8d66:	f7ff fc39 	bl	85dc <ep_state_access>
    8d6a:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8d6c:	4620      	mov	r0, r4
    8d6e:	f7ff ffc3 	bl	8cf8 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8d72:	f8da 7000 	ldr.w	r7, [sl]
    8d76:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    8d7a:	f8da 1004 	ldr.w	r1, [sl, #4]
    8d7e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8d80:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    8d82:	a802      	add	r0, sp, #8
    8d84:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    8d86:	9b02      	ldr	r3, [sp, #8]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d153      	bne.n	8e34 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    8d8c:	b908      	cbnz	r0, 8d92 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    8d8e:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    8d96:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    8d98:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8d9c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    8d9e:	bf02      	ittt	eq
    8da0:	4b3d      	ldreq	r3, [pc, #244]	; (8e98 <usbd_dmareq_process+0x178>)
    8da2:	2282      	moveq	r2, #130	; 0x82
    8da4:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    8da8:	2301      	movs	r3, #1
    8daa:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    8dac:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8dae:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    8db0:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    8db2:	ea03 0309 	and.w	r3, r3, r9
    8db6:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8db8:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    8dbc:	2900      	cmp	r1, #0
    8dbe:	4413      	add	r3, r2
    8dc0:	f8ca 3008 	str.w	r3, [sl, #8]
    8dc4:	f004 0508 	and.w	r5, r4, #8
    8dc8:	4b33      	ldr	r3, [pc, #204]	; (8e98 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8dca:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8dce:	da4e      	bge.n	8e6e <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    8dd0:	2d00      	cmp	r5, #0
    8dd2:	d044      	beq.n	8e5e <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    8dd4:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    8dd8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    8ddc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8dde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8de6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8dea:	2201      	movs	r2, #1
    8dec:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8dee:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8df0:	4a2a      	ldr	r2, [pc, #168]	; (8e9c <usbd_dmareq_process+0x17c>)
    8df2:	4b2b      	ldr	r3, [pc, #172]	; (8ea0 <usbd_dmareq_process+0x180>)
    8df4:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    8df8:	bf38      	it	cc
    8dfa:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8dfc:	4926      	ldr	r1, [pc, #152]	; (8e98 <usbd_dmareq_process+0x178>)
    8dfe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8e02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8e06:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8e0a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8e0c:	b91a      	cbnz	r2, 8e16 <usbd_dmareq_process+0xf6>
    8e0e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    8e12:	2a00      	cmp	r2, #0
    8e14:	d0f9      	beq.n	8e0a <usbd_dmareq_process+0xea>
}
    8e16:	b005      	add	sp, #20
    8e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8e1c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8e20:	4620      	mov	r0, r4
    8e22:	f7ff fbdb 	bl	85dc <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    8e26:	6803      	ldr	r3, [r0, #0]
    8e28:	8982      	ldrh	r2, [r0, #12]
    8e2a:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8e2c:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    8e2e:	a802      	add	r0, sp, #8
    8e30:	4798      	blx	r3
    8e32:	e7ab      	b.n	8d8c <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    8e34:	9b03      	ldr	r3, [sp, #12]
    8e36:	459b      	cmp	fp, r3
    8e38:	d9a8      	bls.n	8d8c <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8e3a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8e3c:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8e3e:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8e42:	f7ff fcc5 	bl	87d0 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8e46:	2306      	movs	r3, #6
    8e48:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8e4c:	4b15      	ldr	r3, [pc, #84]	; (8ea4 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8e4e:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    8e52:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8e54:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8e58:	a801      	add	r0, sp, #4
    8e5a:	4798      	blx	r3
                    continue;
    8e5c:	e76a      	b.n	8d34 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    8e5e:	2514      	movs	r5, #20
    8e60:	fb05 3304 	mla	r3, r5, r4, r3
    8e64:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8e68:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8e6c:	e7b6      	b.n	8ddc <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    8e6e:	b12d      	cbz	r5, 8e7c <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    8e70:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8e74:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    8e78:	2328      	movs	r3, #40	; 0x28
    8e7a:	e7b0      	b.n	8dde <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8e7c:	2514      	movs	r5, #20
    8e7e:	fb05 3304 	mla	r3, r5, r4, r3
    8e82:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8e86:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8e8a:	e7f5      	b.n	8e78 <usbd_dmareq_process+0x158>
    8e8c:	2000214b 	.word	0x2000214b
    8e90:	20001f00 	.word	0x20001f00
    8e94:	20001f04 	.word	0x20001f04
    8e98:	40027000 	.word	0x40027000
    8e9c:	0000d658 	.word	0x0000d658
    8ea0:	0000d66a 	.word	0x0000d66a
    8ea4:	20001f08 	.word	0x20001f08

00008ea8 <ev_epdata_handler>:
{
    8ea8:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    8eaa:	4b0f      	ldr	r3, [pc, #60]	; (8ee8 <ev_epdata_handler+0x40>)
    8eac:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    8eb0:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    8eb4:	2501      	movs	r5, #1
    while (dataepstatus)
    8eb6:	b91c      	cbnz	r4, 8ec0 <ev_epdata_handler+0x18>
}
    8eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    8ebc:	f7ff bf30 	b.w	8d20 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    8ec0:	fa94 f3a4 	rbit	r3, r4
    8ec4:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8ec8:	2b0f      	cmp	r3, #15
    8eca:	bfc8      	it	gt
    8ecc:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    8ed0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8ed2:	bfd4      	ite	le
    8ed4:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    8ed8:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    8eda:	fa05 f303 	lsl.w	r3, r5, r3
    8ede:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    8ee2:	f7ff fcad 	bl	8840 <usbd_ep_data_handler>
    8ee6:	e7e6      	b.n	8eb6 <ev_epdata_handler+0xe>
    8ee8:	40027000 	.word	0x40027000

00008eec <nrf_usbd_epout_dma_handler>:
{
    8eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    8eee:	f7ff fc7f 	bl	87f0 <usbd_dma_pending_clear>
{
    8ef2:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8ef4:	f7ff fb72 	bl	85dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8ef8:	7b83      	ldrb	r3, [r0, #14]
    8efa:	2b03      	cmp	r3, #3
    8efc:	d10d      	bne.n	8f1a <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8efe:	4620      	mov	r0, r4
    8f00:	f003 fc1e 	bl	c740 <ep2bit>
    8f04:	2301      	movs	r3, #1
    8f06:	fa03 f000 	lsl.w	r0, r3, r0
    8f0a:	43c0      	mvns	r0, r0
    8f0c:	f7ff fc60 	bl	87d0 <atomic_and.constprop.0.isra.0>
}
    8f10:	b003      	add	sp, #12
    8f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8f16:	f7ff bf03 	b.w	8d20 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8f1a:	6805      	ldr	r5, [r0, #0]
    8f1c:	2d00      	cmp	r5, #0
    8f1e:	d1f7      	bne.n	8f10 <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8f20:	4620      	mov	r0, r4
    8f22:	f003 fc0d 	bl	c740 <ep2bit>
    8f26:	2301      	movs	r3, #1
    8f28:	fa03 f000 	lsl.w	r0, r3, r0
    8f2c:	43c0      	mvns	r0, r0
    8f2e:	f7ff fc4f 	bl	87d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8f32:	2306      	movs	r3, #6
    8f34:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8f38:	4b04      	ldr	r3, [pc, #16]	; (8f4c <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8f3a:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    8f3e:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8f40:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    8f44:	a801      	add	r0, sp, #4
    8f46:	4798      	blx	r3
    8f48:	e7e2      	b.n	8f10 <nrf_usbd_epout_dma_handler+0x24>
    8f4a:	bf00      	nop
    8f4c:	20001f08 	.word	0x20001f08

00008f50 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8f50:	4b02      	ldr	r3, [pc, #8]	; (8f5c <nrfx_usbd_ep_stall+0xc>)
    8f52:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8f56:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8f5a:	4770      	bx	lr
    8f5c:	40027000 	.word	0x40027000

00008f60 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8f60:	0702      	lsls	r2, r0, #28
    8f62:	d413      	bmi.n	8f8c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8f64:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8f68:	f010 0f80 	tst.w	r0, #128	; 0x80
    8f6c:	4a08      	ldr	r2, [pc, #32]	; (8f90 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    8f6e:	bf0b      	itete	eq
    8f70:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8f74:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8f78:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    8f7c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    8f80:	bf08      	it	eq
    8f82:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8f84:	1e43      	subs	r3, r0, #1
    8f86:	4258      	negs	r0, r3
    8f88:	4158      	adcs	r0, r3
    8f8a:	4770      	bx	lr
        return false;
    8f8c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    8f8e:	4770      	bx	lr
    8f90:	40027000 	.word	0x40027000

00008f94 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    8f94:	4b04      	ldr	r3, [pc, #16]	; (8fa8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    8f96:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    8f9a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8f9e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    8fa2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    8fa6:	4770      	bx	lr
    8fa8:	40027000 	.word	0x40027000

00008fac <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    8fac:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8fae:	2208      	movs	r2, #8
    8fb0:	2100      	movs	r1, #0
{
    8fb2:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8fb4:	f003 f8c7 	bl	c146 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8fb8:	4b0e      	ldr	r3, [pc, #56]	; (8ff4 <nrfx_usbd_setup_get+0x48>)
    8fba:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    8fbe:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    8fc0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    8fc4:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    8fc6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    8fca:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    8fce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    8fd2:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    8fd4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8fd8:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    8fdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    8fe0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    8fe2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    8fe6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    8fea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    8fee:	80e3      	strh	r3, [r4, #6]
}
    8ff0:	bd10      	pop	{r4, pc}
    8ff2:	bf00      	nop
    8ff4:	40027000 	.word	0x40027000

00008ff8 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8ff8:	4b02      	ldr	r3, [pc, #8]	; (9004 <nrfx_usbd_setup_data_clear+0xc>)
    8ffa:	2201      	movs	r2, #1
    8ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9000:	4770      	bx	lr
    9002:	bf00      	nop
    9004:	40027000 	.word	0x40027000

00009008 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9008:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    900a:	f7ff fbf1 	bl	87f0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    900e:	4b10      	ldr	r3, [pc, #64]	; (9050 <ev_dma_epout0_handler+0x48>)
    9010:	7b9a      	ldrb	r2, [r3, #14]
    9012:	2a03      	cmp	r2, #3
    9014:	d106      	bne.n	9024 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9016:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    901a:	b002      	add	sp, #8
    901c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9020:	f7ff bbd6 	b.w	87d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9024:	681c      	ldr	r4, [r3, #0]
    9026:	b974      	cbnz	r4, 9046 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9028:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    902c:	f7ff fbd0 	bl	87d0 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9030:	2306      	movs	r3, #6
    9032:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9036:	4b07      	ldr	r3, [pc, #28]	; (9054 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9038:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    903c:	681b      	ldr	r3, [r3, #0]
    903e:	a801      	add	r0, sp, #4
    9040:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9042:	b002      	add	sp, #8
    9044:	bd10      	pop	{r4, pc}
    9046:	b002      	add	sp, #8
    9048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    904c:	f7ff bfd4 	b.w	8ff8 <nrfx_usbd_setup_data_clear>
    9050:	20001de0 	.word	0x20001de0
    9054:	20001f08 	.word	0x20001f08

00009058 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9058:	4b02      	ldr	r3, [pc, #8]	; (9064 <nrfx_usbd_setup_clear+0xc>)
    905a:	2201      	movs	r2, #1
    905c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    905e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9060:	4770      	bx	lr
    9062:	bf00      	nop
    9064:	40027000 	.word	0x40027000

00009068 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9068:	4b02      	ldr	r3, [pc, #8]	; (9074 <nrfx_usbd_setup_stall+0xc>)
    906a:	2201      	movs	r2, #1
    906c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    906e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    9070:	4770      	bx	lr
    9072:	bf00      	nop
    9074:	40027000 	.word	0x40027000

00009078 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    9078:	4b01      	ldr	r3, [pc, #4]	; (9080 <nrfx_usbd_last_setup_dir_get+0x8>)
    907a:	7818      	ldrb	r0, [r3, #0]
    907c:	4770      	bx	lr
    907e:	bf00      	nop
    9080:	2000214c 	.word	0x2000214c

00009084 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    9084:	b510      	push	{r4, lr}
    9086:	4602      	mov	r2, r0
	__asm__ volatile(
    9088:	f04f 0320 	mov.w	r3, #32
    908c:	f3ef 8411 	mrs	r4, BASEPRI
    9090:	f383 8812 	msr	BASEPRI_MAX, r3
    9094:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    9098:	f003 fb52 	bl	c740 <ep2bit>
    909c:	490d      	ldr	r1, [pc, #52]	; (90d4 <nrfx_usbd_transfer_out_drop+0x50>)
    909e:	2301      	movs	r3, #1
    90a0:	fa03 f000 	lsl.w	r0, r3, r0
    90a4:	680b      	ldr	r3, [r1, #0]
    90a6:	ea23 0300 	bic.w	r3, r3, r0
    90aa:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    90ac:	f012 0108 	ands.w	r1, r2, #8
    90b0:	d10a      	bne.n	90c8 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    90b2:	f002 030f 	and.w	r3, r2, #15
    90b6:	009b      	lsls	r3, r3, #2
    90b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    90bc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    90c0:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    90c4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    90c8:	f384 8811 	msr	BASEPRI, r4
    90cc:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    90d0:	bd10      	pop	{r4, pc}
    90d2:	bf00      	nop
    90d4:	20001f04 	.word	0x20001f04

000090d8 <usbd_ep_abort>:
{
    90d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    90da:	4601      	mov	r1, r0
	__asm__ volatile(
    90dc:	f04f 0320 	mov.w	r3, #32
    90e0:	f3ef 8511 	mrs	r5, BASEPRI
    90e4:	f383 8812 	msr	BASEPRI_MAX, r3
    90e8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    90ec:	f7ff fa76 	bl	85dc <ep_state_access>
    90f0:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    90f2:	4608      	mov	r0, r1
    90f4:	f003 fb24 	bl	c740 <ep2bit>
    90f8:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    90fa:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    90fe:	fa02 f200 	lsl.w	r2, r2, r0
    9102:	482e      	ldr	r0, [pc, #184]	; (91bc <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    9104:	d119      	bne.n	913a <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9106:	6803      	ldr	r3, [r0, #0]
    9108:	ea32 0303 	bics.w	r3, r2, r3
    910c:	d00a      	beq.n	9124 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    910e:	4608      	mov	r0, r1
    9110:	f7ff ffb8 	bl	9084 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    9114:	2303      	movs	r3, #3
    9116:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9118:	f385 8811 	msr	BASEPRI, r5
    911c:	f3bf 8f6f 	isb	sy
}
    9120:	b003      	add	sp, #12
    9122:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    9124:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9126:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9128:	4925      	ldr	r1, [pc, #148]	; (91c0 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    912a:	ea23 0302 	bic.w	r3, r3, r2
    912e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9130:	680b      	ldr	r3, [r1, #0]
    9132:	ea23 0302 	bic.w	r3, r3, r2
    9136:	600b      	str	r3, [r1, #0]
    9138:	e7ec      	b.n	9114 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    913a:	070b      	lsls	r3, r1, #28
    913c:	d415      	bmi.n	916a <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    913e:	2980      	cmp	r1, #128	; 0x80
    9140:	4b20      	ldr	r3, [pc, #128]	; (91c4 <usbd_ep_abort+0xec>)
    9142:	d02f      	beq.n	91a4 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9144:	f001 040f 	and.w	r4, r1, #15
    9148:	f204 34da 	addw	r4, r4, #986	; 0x3da
    914c:	0064      	lsls	r4, r4, #1
    914e:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9152:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9156:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    915a:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    915c:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9160:	433c      	orrs	r4, r7
    9162:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9166:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    916a:	4f15      	ldr	r7, [pc, #84]	; (91c0 <usbd_ep_abort+0xe8>)
    916c:	6804      	ldr	r4, [r0, #0]
    916e:	683b      	ldr	r3, [r7, #0]
    9170:	ea64 0c03 	orn	ip, r4, r3
    9174:	ea1c 0f02 	tst.w	ip, r2
    9178:	d0ce      	beq.n	9118 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    917a:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    917c:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9180:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    9182:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9184:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    9186:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9188:	2303      	movs	r3, #3
    918a:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    918c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9190:	4b0d      	ldr	r3, [pc, #52]	; (91c8 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9192:	f88d 1006 	strb.w	r1, [sp, #6]
    9196:	2206      	movs	r2, #6
            m_event_handler(&evt);
    9198:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    919a:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    919e:	a801      	add	r0, sp, #4
    91a0:	4798      	blx	r3
    91a2:	e7b9      	b.n	9118 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    91a4:	f240 74b4 	movw	r4, #1972	; 0x7b4
    91a8:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    91ac:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    91b0:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    91b4:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    91b6:	f044 0404 	orr.w	r4, r4, #4
    91ba:	e7d1      	b.n	9160 <usbd_ep_abort+0x88>
    91bc:	20001f00 	.word	0x20001f00
    91c0:	20001f04 	.word	0x20001f04
    91c4:	40027000 	.word	0x40027000
    91c8:	20001f08 	.word	0x20001f08

000091cc <ev_setup_handler>:
{
    91cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    91ce:	4b14      	ldr	r3, [pc, #80]	; (9220 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    91d0:	4c14      	ldr	r4, [pc, #80]	; (9224 <ev_setup_handler+0x58>)
    91d2:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    91d6:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    91d8:	4e13      	ldr	r6, [pc, #76]	; (9228 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    91da:	43da      	mvns	r2, r3
    91dc:	4b13      	ldr	r3, [pc, #76]	; (922c <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    91de:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    91e4:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    91e6:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    91e8:	f003 faaa 	bl	c740 <ep2bit>
    91ec:	2301      	movs	r3, #1
    91ee:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    91f0:	4213      	tst	r3, r2
    91f2:	d002      	beq.n	91fa <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    91f4:	4608      	mov	r0, r1
    91f6:	f7ff ff6f 	bl	90d8 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    91fa:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    91fe:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    9202:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    9204:	f7ff fae4 	bl	87d0 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9208:	6823      	ldr	r3, [r4, #0]
    920a:	f043 0301 	orr.w	r3, r3, #1
    920e:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    9210:	2305      	movs	r3, #5
    9212:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    9214:	4b06      	ldr	r3, [pc, #24]	; (9230 <ev_setup_handler+0x64>)
    9216:	a801      	add	r0, sp, #4
    9218:	681b      	ldr	r3, [r3, #0]
    921a:	4798      	blx	r3
}
    921c:	b002      	add	sp, #8
    921e:	bd70      	pop	{r4, r5, r6, pc}
    9220:	40027000 	.word	0x40027000
    9224:	20001f04 	.word	0x20001f04
    9228:	2000214c 	.word	0x2000214c
    922c:	20001f00 	.word	0x20001f00
    9230:	20001f08 	.word	0x20001f08

00009234 <nrfx_usbd_irq_handler>:
{
    9234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    9238:	4b1a      	ldr	r3, [pc, #104]	; (92a4 <nrfx_usbd_irq_handler+0x70>)
    923a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    923e:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    9240:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9242:	461d      	mov	r5, r3
    while (to_process)
    9244:	b970      	cbnz	r0, 9264 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    9246:	4f18      	ldr	r7, [pc, #96]	; (92a8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    9248:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    924c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    9250:	f04f 0801 	mov.w	r8, #1
    while (active)
    9254:	b9bc      	cbnz	r4, 9286 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    9256:	f7ff fd63 	bl	8d20 <usbd_dmareq_process>
    if (setup_active)
    925a:	b306      	cbz	r6, 929e <nrfx_usbd_irq_handler+0x6a>
}
    925c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    9260:	f7ff bfb4 	b.w	91cc <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    9264:	fa90 f2a0 	rbit	r2, r0
    9268:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    926c:	490f      	ldr	r1, [pc, #60]	; (92ac <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    926e:	0096      	lsls	r6, r2, #2
    9270:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    9272:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9276:	680e      	ldr	r6, [r1, #0]
    if (ret)
    9278:	b116      	cbz	r6, 9280 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    927a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    927c:	6809      	ldr	r1, [r1, #0]
    927e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    9280:	ea20 0002 	bic.w	r0, r0, r2
    9284:	e7de      	b.n	9244 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    9286:	fa94 f5a4 	rbit	r5, r4
    928a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    928e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    9292:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    9296:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    9298:	ea24 0405 	bic.w	r4, r4, r5
    929c:	e7da      	b.n	9254 <nrfx_usbd_irq_handler+0x20>
}
    929e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92a2:	bf00      	nop
    92a4:	40027000 	.word	0x40027000
    92a8:	0000d53c 	.word	0x0000d53c
    92ac:	40027100 	.word	0x40027100

000092b0 <nrfx_usbd_stop>:
{
    92b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    92b2:	4b1b      	ldr	r3, [pc, #108]	; (9320 <nrfx_usbd_stop+0x70>)
    92b4:	2280      	movs	r2, #128	; 0x80
    92b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    92ba:	2027      	movs	r0, #39	; 0x27
    92bc:	f7fb fbf0 	bl	4aa0 <arch_irq_is_enabled>
    92c0:	b1b8      	cbz	r0, 92f2 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    92c2:	4e18      	ldr	r6, [pc, #96]	; (9324 <nrfx_usbd_stop+0x74>)
    92c4:	4b18      	ldr	r3, [pc, #96]	; (9328 <nrfx_usbd_stop+0x78>)
    92c6:	6834      	ldr	r4, [r6, #0]
    92c8:	681b      	ldr	r3, [r3, #0]
    92ca:	0c24      	lsrs	r4, r4, #16
    92cc:	0424      	lsls	r4, r4, #16
    92ce:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    92d0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    92d2:	b97c      	cbnz	r4, 92f4 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    92d4:	4d15      	ldr	r5, [pc, #84]	; (932c <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    92d6:	f240 13ff 	movw	r3, #511	; 0x1ff
    92da:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    92dc:	2027      	movs	r0, #39	; 0x27
    92de:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    92e2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    92e6:	f7fb fbc7 	bl	4a78 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    92ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    92ee:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    92f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    92f4:	fa94 f5a4 	rbit	r5, r4
    92f8:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    92fc:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    92fe:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9300:	bfc6      	itte	gt
    9302:	f1a5 0010 	subgt.w	r0, r5, #16
    9306:	b2c0      	uxtbgt	r0, r0
    9308:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    930c:	0703      	lsls	r3, r0, #28
    930e:	d401      	bmi.n	9314 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    9310:	f7ff fee2 	bl	90d8 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    9314:	fa07 f505 	lsl.w	r5, r7, r5
    9318:	ea24 0405 	bic.w	r4, r4, r5
    931c:	e7d9      	b.n	92d2 <nrfx_usbd_stop+0x22>
    931e:	bf00      	nop
    9320:	e000e100 	.word	0xe000e100
    9324:	20001f04 	.word	0x20001f04
    9328:	20001f00 	.word	0x20001f00
    932c:	40027000 	.word	0x40027000

00009330 <nrfx_usbd_disable>:
{
    9330:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9332:	f7ff ffbd 	bl	92b0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9336:	4b08      	ldr	r3, [pc, #32]	; (9358 <nrfx_usbd_disable+0x28>)
    9338:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    933c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9340:	2200      	movs	r2, #0
    9342:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9346:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    934a:	f7ff fa51 	bl	87f0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    934e:	4b03      	ldr	r3, [pc, #12]	; (935c <nrfx_usbd_disable+0x2c>)
    9350:	2201      	movs	r2, #1
    9352:	701a      	strb	r2, [r3, #0]
}
    9354:	bd08      	pop	{r3, pc}
    9356:	bf00      	nop
    9358:	40027000 	.word	0x40027000
    935c:	2000214e 	.word	0x2000214e

00009360 <nrfx_usbd_ep_disable>:
{
    9360:	b510      	push	{r4, lr}
    9362:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    9364:	f7ff feb8 	bl	90d8 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9368:	4a10      	ldr	r2, [pc, #64]	; (93ac <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    936a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    936e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    9372:	f04f 0301 	mov.w	r3, #1
    9376:	bf14      	ite	ne
    9378:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    937c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    9380:	fa03 f300 	lsl.w	r3, r3, r0
    9384:	ea6f 0303 	mvn.w	r3, r3
    9388:	bf15      	itete	ne
    938a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    938c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    938e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9392:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9396:	bf14      	ite	ne
    9398:	4b05      	ldrne	r3, [pc, #20]	; (93b0 <nrfx_usbd_ep_disable+0x50>)
    939a:	4b06      	ldreq	r3, [pc, #24]	; (93b4 <nrfx_usbd_ep_disable+0x54>)
    939c:	5c1a      	ldrb	r2, [r3, r0]
    939e:	2301      	movs	r3, #1
    93a0:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    93a2:	4a02      	ldr	r2, [pc, #8]	; (93ac <nrfx_usbd_ep_disable+0x4c>)
    93a4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    93a8:	bd10      	pop	{r4, pc}
    93aa:	bf00      	nop
    93ac:	40027000 	.word	0x40027000
    93b0:	0000e49a 	.word	0x0000e49a
    93b4:	0000e491 	.word	0x0000e491

000093b8 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    93b8:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    93bc:	b570      	push	{r4, r5, r6, lr}
    93be:	4924      	ldr	r1, [pc, #144]	; (9450 <nrfx_usbd_ep_enable+0x98>)
    93c0:	4604      	mov	r4, r0
    93c2:	f000 030f 	and.w	r3, r0, #15
    93c6:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    93ca:	d012      	beq.n	93f2 <nrfx_usbd_ep_enable+0x3a>
    93cc:	4a21      	ldr	r2, [pc, #132]	; (9454 <nrfx_usbd_ep_enable+0x9c>)
    93ce:	5cd2      	ldrb	r2, [r2, r3]
    93d0:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    93d4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    93d8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    93dc:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    93de:	07d0      	lsls	r0, r2, #31
    93e0:	d406      	bmi.n	93f0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    93e2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    93e6:	fa05 f303 	lsl.w	r3, r5, r3
    93ea:	4313      	orrs	r3, r2
    93ec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    93f0:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    93f2:	4a19      	ldr	r2, [pc, #100]	; (9458 <nrfx_usbd_ep_enable+0xa0>)
    93f4:	5cd2      	ldrb	r2, [r2, r3]
    93f6:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    93fa:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    93fe:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    9402:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9404:	07d2      	lsls	r2, r2, #31
    9406:	d4f3      	bmi.n	93f0 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    9408:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    940c:	fa05 f203 	lsl.w	r2, r5, r3
    9410:	4332      	orrs	r2, r6
    9412:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9416:	2b00      	cmp	r3, #0
    9418:	d0ea      	beq.n	93f0 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    941a:	0703      	lsls	r3, r0, #28
    941c:	d4e8      	bmi.n	93f0 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    941e:	f04f 0320 	mov.w	r3, #32
    9422:	f3ef 8611 	mrs	r6, BASEPRI
    9426:	f383 8812 	msr	BASEPRI_MAX, r3
    942a:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    942e:	f7ff fe29 	bl	9084 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9432:	4620      	mov	r0, r4
    9434:	f003 f984 	bl	c740 <ep2bit>
    9438:	4a08      	ldr	r2, [pc, #32]	; (945c <nrfx_usbd_ep_enable+0xa4>)
    943a:	6813      	ldr	r3, [r2, #0]
    943c:	fa05 f000 	lsl.w	r0, r5, r0
    9440:	ea23 0300 	bic.w	r3, r3, r0
    9444:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    9446:	f386 8811 	msr	BASEPRI, r6
    944a:	f3bf 8f6f 	isb	sy
}
    944e:	e7cf      	b.n	93f0 <nrfx_usbd_ep_enable+0x38>
    9450:	40027000 	.word	0x40027000
    9454:	0000e49a 	.word	0x0000e49a
    9458:	0000e491 	.word	0x0000e491
    945c:	20001f00 	.word	0x20001f00

00009460 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9460:	0603      	lsls	r3, r0, #24
{
    9462:	b510      	push	{r4, lr}
    9464:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    9466:	d405      	bmi.n	9474 <nrfx_usbd_ep_stall_clear+0x14>
    9468:	f7ff fd7a 	bl	8f60 <nrfx_usbd_ep_stall_check>
    946c:	b110      	cbz	r0, 9474 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    946e:	4620      	mov	r0, r4
    9470:	f7ff fe08 	bl	9084 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    9474:	4b01      	ldr	r3, [pc, #4]	; (947c <nrfx_usbd_ep_stall_clear+0x1c>)
    9476:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    947a:	bd10      	pop	{r4, pc}
    947c:	40027000 	.word	0x40027000

00009480 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    9480:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    9482:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9486:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    9488:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    948a:	6002      	str	r2, [r0, #0]
}
    948c:	4802      	ldr	r0, [pc, #8]	; (9498 <nrf_gpio_pin_port_decode+0x18>)
    948e:	bf18      	it	ne
    9490:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    9494:	4770      	bx	lr
    9496:	bf00      	nop
    9498:	50000300 	.word	0x50000300

0000949c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    949c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    949e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    94a0:	f003 f9b9 	bl	c816 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    94a4:	4608      	mov	r0, r1
    94a6:	f003 f9b6 	bl	c816 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94aa:	a801      	add	r0, sp, #4
    94ac:	9601      	str	r6, [sp, #4]
    94ae:	f7ff ffe7 	bl	9480 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    94b2:	9b01      	ldr	r3, [sp, #4]
    94b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    94b8:	460c      	mov	r4, r1
    94ba:	f240 610d 	movw	r1, #1549	; 0x60d
    94be:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94c2:	a801      	add	r0, sp, #4
    94c4:	9401      	str	r4, [sp, #4]
    94c6:	f7ff ffdb 	bl	9480 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    94ca:	9b01      	ldr	r3, [sp, #4]
    94cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    94d0:	2509      	movs	r5, #9
    94d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    94d6:	2004      	movs	r0, #4
    94d8:	f003 f80b 	bl	c4f2 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    94dc:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94de:	a801      	add	r0, sp, #4
    94e0:	9401      	str	r4, [sp, #4]
    94e2:	f7ff ffcd 	bl	9480 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    94e6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    94e8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    94ec:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    94ee:	07db      	lsls	r3, r3, #31
    94f0:	d415      	bmi.n	951e <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94f2:	a801      	add	r0, sp, #4
    94f4:	9601      	str	r6, [sp, #4]
    94f6:	f7ff ffc3 	bl	9480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    94fa:	9b01      	ldr	r3, [sp, #4]
    94fc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    9500:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    9504:	2004      	movs	r0, #4
    9506:	f002 fff4 	bl	c4f2 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    950a:	4630      	mov	r0, r6
    950c:	f003 f983 	bl	c816 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    9510:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    9512:	2004      	movs	r0, #4
    9514:	f002 ffed 	bl	c4f2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    9518:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    951c:	d1df      	bne.n	94de <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    951e:	a801      	add	r0, sp, #4
    9520:	9401      	str	r4, [sp, #4]
    9522:	f7ff ffad 	bl	9480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9526:	9a01      	ldr	r2, [sp, #4]
    9528:	2301      	movs	r3, #1
    952a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    952c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    9530:	2004      	movs	r0, #4
    9532:	f002 ffde 	bl	c4f2 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    9536:	4620      	mov	r0, r4
    9538:	f003 f96d 	bl	c816 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    953c:	2004      	movs	r0, #4
    953e:	f002 ffd8 	bl	c4f2 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9542:	a801      	add	r0, sp, #4
    9544:	9401      	str	r4, [sp, #4]
    9546:	f7ff ff9b 	bl	9480 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    954a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    954c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    9550:	4803      	ldr	r0, [pc, #12]	; (9560 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9552:	40d3      	lsrs	r3, r2
    9554:	f003 0301 	and.w	r3, r3, #1
    9558:	1ac0      	subs	r0, r0, r3
    955a:	b003      	add	sp, #12
    955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    955e:	bf00      	nop
    9560:	0bad0001 	.word	0x0bad0001

00009564 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9568:	b086      	sub	sp, #24
    956a:	4605      	mov	r5, r0
    956c:	af00      	add	r7, sp, #0
    956e:	460e      	mov	r6, r1
	__asm__ volatile(
    9570:	f04f 0320 	mov.w	r3, #32
    9574:	f3ef 8811 	mrs	r8, BASEPRI
    9578:	f383 8812 	msr	BASEPRI_MAX, r3
    957c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9580:	f000 fff6 	bl	a570 <z_impl_z_current_get>
    9584:	2d04      	cmp	r5, #4
    9586:	bf96      	itet	ls
    9588:	4b2c      	ldrls	r3, [pc, #176]	; (963c <z_fatal_error+0xd8>)
    958a:	4b2d      	ldrhi	r3, [pc, #180]	; (9640 <z_fatal_error+0xdc>)
    958c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    9590:	46e9      	mov	r9, sp
    9592:	b08a      	sub	sp, #40	; 0x28
    9594:	4604      	mov	r4, r0
    9596:	466a      	mov	r2, sp
    9598:	492a      	ldr	r1, [pc, #168]	; (9644 <z_fatal_error+0xe0>)
    959a:	61d3      	str	r3, [r2, #28]
    959c:	f240 3301 	movw	r3, #769	; 0x301
    95a0:	8493      	strh	r3, [r2, #36]	; 0x24
    95a2:	f04f 0a00 	mov.w	sl, #0
    95a6:	4b28      	ldr	r3, [pc, #160]	; (9648 <z_fatal_error+0xe4>)
    95a8:	f8c2 a020 	str.w	sl, [r2, #32]
    95ac:	e9c2 1505 	strd	r1, r5, [r2, #20]
    95b0:	f842 3f10 	str.w	r3, [r2, #16]!
    95b4:	4825      	ldr	r0, [pc, #148]	; (964c <z_fatal_error+0xe8>)
    95b6:	4653      	mov	r3, sl
    95b8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    95bc:	f7f9 faaa 	bl	2b14 <z_impl_z_log_msg_static_create>
    95c0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    95c2:	b17e      	cbz	r6, 95e4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    95c4:	69f3      	ldr	r3, [r6, #28]
    95c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    95ca:	b15b      	cbz	r3, 95e4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    95cc:	4b20      	ldr	r3, [pc, #128]	; (9650 <z_fatal_error+0xec>)
    95ce:	617b      	str	r3, [r7, #20]
    95d0:	2302      	movs	r3, #2
    95d2:	613b      	str	r3, [r7, #16]
    95d4:	481d      	ldr	r0, [pc, #116]	; (964c <z_fatal_error+0xe8>)
    95d6:	4653      	mov	r3, sl
    95d8:	f107 0210 	add.w	r2, r7, #16
    95dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    95e0:	f7f9 fa98 	bl	2b14 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    95e4:	b12c      	cbz	r4, 95f2 <z_fatal_error+0x8e>
    95e6:	4620      	mov	r0, r4
    95e8:	f003 f988 	bl	c8fc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    95ec:	b108      	cbz	r0, 95f2 <z_fatal_error+0x8e>
    95ee:	7803      	ldrb	r3, [r0, #0]
    95f0:	b903      	cbnz	r3, 95f4 <z_fatal_error+0x90>
		thread_name = "unknown";
    95f2:	4818      	ldr	r0, [pc, #96]	; (9654 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    95f4:	46e9      	mov	r9, sp
    95f6:	b08a      	sub	sp, #40	; 0x28
    95f8:	466a      	mov	r2, sp
    95fa:	4b17      	ldr	r3, [pc, #92]	; (9658 <z_fatal_error+0xf4>)
    95fc:	61d0      	str	r0, [r2, #28]
    95fe:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9602:	f240 3301 	movw	r3, #769	; 0x301
    9606:	8413      	strh	r3, [r2, #32]
    9608:	4b14      	ldr	r3, [pc, #80]	; (965c <z_fatal_error+0xf8>)
    960a:	f842 3f10 	str.w	r3, [r2, #16]!
    960e:	2300      	movs	r3, #0
    9610:	480e      	ldr	r0, [pc, #56]	; (964c <z_fatal_error+0xe8>)
    9612:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    9616:	f7f9 fa7d 	bl	2b14 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    961a:	4631      	mov	r1, r6
    961c:	46cd      	mov	sp, r9
    961e:	4628      	mov	r0, r5
    9620:	f7fd fede 	bl	73e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    9624:	f388 8811 	msr	BASEPRI, r8
    9628:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    962c:	4620      	mov	r0, r4
    962e:	f7fb fec7 	bl	53c0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9632:	3718      	adds	r7, #24
    9634:	46bd      	mov	sp, r7
    9636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    963a:	bf00      	nop
    963c:	0000d5a4 	.word	0x0000d5a4
    9640:	0000e4ad 	.word	0x0000e4ad
    9644:	0000e4c3 	.word	0x0000e4c3
    9648:	01000005 	.word	0x01000005
    964c:	0000d290 	.word	0x0000d290
    9650:	0000e4eb 	.word	0x0000e4eb
    9654:	0000e4bb 	.word	0x0000e4bb
    9658:	0000e50c 	.word	0x0000e50c
    965c:	01000004 	.word	0x01000004

00009660 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9660:	4b10      	ldr	r3, [pc, #64]	; (96a4 <z_sys_init_run_level+0x44>)
{
    9662:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9664:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9668:	3001      	adds	r0, #1
    966a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    966e:	42a6      	cmp	r6, r4
    9670:	d800      	bhi.n	9674 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    9672:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    9674:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    9678:	b18d      	cbz	r5, 969e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    967a:	4628      	mov	r0, r5
    967c:	4798      	blx	r3
			if (rc != 0) {
    967e:	b138      	cbz	r0, 9690 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    9680:	2800      	cmp	r0, #0
    9682:	bfb8      	it	lt
    9684:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    9686:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    9688:	28ff      	cmp	r0, #255	; 0xff
    968a:	bfa8      	it	ge
    968c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    968e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    9690:	68ea      	ldr	r2, [r5, #12]
    9692:	7853      	ldrb	r3, [r2, #1]
    9694:	f043 0301 	orr.w	r3, r3, #1
    9698:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    969a:	3408      	adds	r4, #8
    969c:	e7e7      	b.n	966e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    969e:	4798      	blx	r3
    96a0:	e7fb      	b.n	969a <z_sys_init_run_level+0x3a>
    96a2:	bf00      	nop
    96a4:	0000d5b8 	.word	0x0000d5b8

000096a8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    96a8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    96aa:	4b0a      	ldr	r3, [pc, #40]	; (96d4 <bg_thread_main+0x2c>)
    96ac:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    96ae:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    96b0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    96b2:	f7ff ffd5 	bl	9660 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    96b6:	f001 f9ef 	bl	aa98 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    96ba:	2004      	movs	r0, #4
    96bc:	f7ff ffd0 	bl	9660 <z_sys_init_run_level>

	z_init_static_threads();
    96c0:	f000 f95e 	bl	9980 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    96c4:	f7f7 fea2 	bl	140c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    96c8:	4a03      	ldr	r2, [pc, #12]	; (96d8 <bg_thread_main+0x30>)
    96ca:	7b13      	ldrb	r3, [r2, #12]
    96cc:	f023 0301 	bic.w	r3, r3, #1
    96d0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    96d2:	bd08      	pop	{r3, pc}
    96d4:	2000214f 	.word	0x2000214f
    96d8:	20000aa8 	.word	0x20000aa8

000096dc <z_bss_zero>:
{
    96dc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    96de:	4803      	ldr	r0, [pc, #12]	; (96ec <z_bss_zero+0x10>)
    96e0:	4a03      	ldr	r2, [pc, #12]	; (96f0 <z_bss_zero+0x14>)
    96e2:	2100      	movs	r1, #0
    96e4:	1a12      	subs	r2, r2, r0
    96e6:	f003 f8af 	bl	c848 <z_early_memset>
}
    96ea:	bd08      	pop	{r3, pc}
    96ec:	20000408 	.word	0x20000408
    96f0:	20002154 	.word	0x20002154

000096f4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    96f4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    96f6:	2300      	movs	r3, #0
{
    96f8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    96fa:	2201      	movs	r2, #1
    96fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    9700:	4e13      	ldr	r6, [pc, #76]	; (9750 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9702:	4d14      	ldr	r5, [pc, #80]	; (9754 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    9704:	9301      	str	r3, [sp, #4]
    9706:	220f      	movs	r2, #15
    9708:	e9cd 3202 	strd	r3, r2, [sp, #8]
    970c:	4912      	ldr	r1, [pc, #72]	; (9758 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    970e:	2314      	movs	r3, #20
    9710:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    9714:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    9718:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    971a:	f44f 70c0 	mov.w	r0, #384	; 0x180
    971e:	fb00 1104 	mla	r1, r0, r4, r1
    9722:	4b0e      	ldr	r3, [pc, #56]	; (975c <z_init_cpu+0x68>)
    9724:	9500      	str	r5, [sp, #0]
    9726:	f44f 72a0 	mov.w	r2, #320	; 0x140
    972a:	4630      	mov	r0, r6
    972c:	f000 f8ca 	bl	98c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9730:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9732:	4a0b      	ldr	r2, [pc, #44]	; (9760 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    9734:	60ee      	str	r6, [r5, #12]
    9736:	f023 0304 	bic.w	r3, r3, #4
    973a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    973c:	f44f 6304 	mov.w	r3, #2112	; 0x840
    9740:	fb04 3303 	mla	r3, r4, r3, r3
    9744:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    9746:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    9748:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    974a:	b006      	add	sp, #24
    974c:	bd70      	pop	{r4, r5, r6, pc}
    974e:	bf00      	nop
    9750:	20000a28 	.word	0x20000a28
    9754:	20001f0c 	.word	0x20001f0c
    9758:	20003580 	.word	0x20003580
    975c:	00009a39 	.word	0x00009a39
    9760:	20002d40 	.word	0x20002d40

00009764 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    9764:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    9766:	2000      	movs	r0, #0
{
    9768:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    976a:	f7ff ff79 	bl	9660 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    976e:	4b2e      	ldr	r3, [pc, #184]	; (9828 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9770:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    9774:	4d2d      	ldr	r5, [pc, #180]	; (982c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    9776:	4e2e      	ldr	r6, [pc, #184]	; (9830 <z_cstart+0xcc>)
    9778:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    977a:	4f2e      	ldr	r7, [pc, #184]	; (9834 <z_cstart+0xd0>)
    977c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    9780:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9782:	2400      	movs	r4, #0
    9784:	23e0      	movs	r3, #224	; 0xe0
    9786:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    978a:	77ec      	strb	r4, [r5, #31]
    978c:	762c      	strb	r4, [r5, #24]
    978e:	766c      	strb	r4, [r5, #25]
    9790:	76ac      	strb	r4, [r5, #26]
    9792:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9798:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    979c:	626b      	str	r3, [r5, #36]	; 0x24
    979e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    97a2:	f7fb fd81 	bl	52a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    97a6:	f7fb f8d3 	bl	4950 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    97aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    97ae:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    97b0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    97b2:	f7fb fed5 	bl	5560 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    97b6:	f7fb fe19 	bl	53ec <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    97ba:	f7f9 f837 	bl	282c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    97be:	f240 1301 	movw	r3, #257	; 0x101
    97c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    97c6:	ab06      	add	r3, sp, #24
    97c8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    97ca:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    97ce:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    97d0:	f003 f82e 	bl	c830 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    97d4:	2001      	movs	r0, #1
    97d6:	f7ff ff43 	bl	9660 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    97da:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    97dc:	4d16      	ldr	r5, [pc, #88]	; (9838 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    97de:	f7ff ff3f 	bl	9660 <z_sys_init_run_level>
	z_sched_init();
    97e2:	f000 fe07 	bl	a3f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    97e6:	4b15      	ldr	r3, [pc, #84]	; (983c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    97e8:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    97ea:	9305      	str	r3, [sp, #20]
    97ec:	2301      	movs	r3, #1
    97ee:	4914      	ldr	r1, [pc, #80]	; (9840 <z_cstart+0xdc>)
    97f0:	9400      	str	r4, [sp, #0]
    97f2:	e9cd 4303 	strd	r4, r3, [sp, #12]
    97f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    97fa:	463b      	mov	r3, r7
    97fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9800:	4628      	mov	r0, r5
    9802:	f000 f85f 	bl	98c4 <z_setup_new_thread>
    9806:	7b6a      	ldrb	r2, [r5, #13]
    9808:	4606      	mov	r6, r0
    980a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    980e:	4628      	mov	r0, r5
    9810:	736a      	strb	r2, [r5, #13]
    9812:	f003 f9b7 	bl	cb84 <z_ready_thread>
	z_init_cpu(0);
    9816:	4620      	mov	r0, r4
    9818:	f7ff ff6c 	bl	96f4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    981c:	463a      	mov	r2, r7
    981e:	4631      	mov	r1, r6
    9820:	4628      	mov	r0, r5
    9822:	f7fb fa09 	bl	4c38 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    9826:	bf00      	nop
    9828:	20003580 	.word	0x20003580
    982c:	e000ed00 	.word	0xe000ed00
    9830:	20001f0c 	.word	0x20001f0c
    9834:	000096a9 	.word	0x000096a9
    9838:	20000aa8 	.word	0x20000aa8
    983c:	0000e56e 	.word	0x0000e56e
    9840:	20003700 	.word	0x20003700

00009844 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    9844:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9846:	4c06      	ldr	r4, [pc, #24]	; (9860 <init_mem_slab_module+0x1c>)
    9848:	4d06      	ldr	r5, [pc, #24]	; (9864 <init_mem_slab_module+0x20>)
	int rc = 0;
    984a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    984c:	42ac      	cmp	r4, r5
    984e:	d300      	bcc.n	9852 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    9850:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    9852:	4620      	mov	r0, r4
    9854:	f002 fffc 	bl	c850 <create_free_list>
		if (rc < 0) {
    9858:	2800      	cmp	r0, #0
    985a:	dbf9      	blt.n	9850 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    985c:	341c      	adds	r4, #28
    985e:	e7f5      	b.n	984c <init_mem_slab_module+0x8>
    9860:	20000290 	.word	0x20000290
    9864:	200002ac 	.word	0x200002ac

00009868 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    986a:	460c      	mov	r4, r1
	__asm__ volatile(
    986c:	f04f 0520 	mov.w	r5, #32
    9870:	f3ef 8111 	mrs	r1, BASEPRI
    9874:	f385 8812 	msr	BASEPRI_MAX, r5
    9878:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    987c:	6945      	ldr	r5, [r0, #20]
    987e:	b15d      	cbz	r5, 9898 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    9880:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9882:	682b      	ldr	r3, [r5, #0]
    9884:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9886:	6983      	ldr	r3, [r0, #24]
    9888:	3301      	adds	r3, #1
    988a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    988c:	2000      	movs	r0, #0
	__asm__ volatile(
    988e:	f381 8811 	msr	BASEPRI, r1
    9892:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    9896:	e011      	b.n	98bc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    9898:	ea52 0603 	orrs.w	r6, r2, r3
    989c:	d103      	bne.n	98a6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    989e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    98a0:	f06f 000b 	mvn.w	r0, #11
    98a4:	e7f3      	b.n	988e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    98a6:	e9cd 2300 	strd	r2, r3, [sp]
    98aa:	4602      	mov	r2, r0
    98ac:	3008      	adds	r0, #8
    98ae:	f000 fcab 	bl	a208 <z_pend_curr>
		if (result == 0) {
    98b2:	b918      	cbnz	r0, 98bc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    98b4:	4b02      	ldr	r3, [pc, #8]	; (98c0 <k_mem_slab_alloc+0x58>)
    98b6:	689b      	ldr	r3, [r3, #8]
    98b8:	695b      	ldr	r3, [r3, #20]
    98ba:	6023      	str	r3, [r4, #0]
}
    98bc:	b002      	add	sp, #8
    98be:	bd70      	pop	{r4, r5, r6, pc}
    98c0:	20001f0c 	.word	0x20001f0c

000098c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    98c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    98c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    98ca:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    98cc:	2604      	movs	r6, #4
    98ce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    98d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    98d2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    98d4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    98d8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    98da:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    98dc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    98e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    98e2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    98e4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    98e8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    98ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    98ee:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    98f2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    98f4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    98f6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    98f8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    98fc:	9202      	str	r2, [sp, #8]
    98fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9900:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    9902:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9906:	9200      	str	r2, [sp, #0]
    9908:	4642      	mov	r2, r8
{
    990a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    990c:	f7fb f962 	bl	4bd4 <arch_new_thread>
	if (!_current) {
    9910:	4b04      	ldr	r3, [pc, #16]	; (9924 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    9912:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9914:	689b      	ldr	r3, [r3, #8]
    9916:	b103      	cbz	r3, 991a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    9918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    991a:	6723      	str	r3, [r4, #112]	; 0x70
}
    991c:	4640      	mov	r0, r8
    991e:	b004      	add	sp, #16
    9920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9924:	20001f0c 	.word	0x20001f0c

00009928 <z_impl_k_thread_create>:
{
    9928:	b5f0      	push	{r4, r5, r6, r7, lr}
    992a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    992c:	2500      	movs	r5, #0
    992e:	9505      	str	r5, [sp, #20]
    9930:	9d10      	ldr	r5, [sp, #64]	; 0x40
    9932:	9504      	str	r5, [sp, #16]
    9934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9936:	9503      	str	r5, [sp, #12]
    9938:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    993a:	9502      	str	r5, [sp, #8]
{
    993c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9940:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9942:	9501      	str	r5, [sp, #4]
    9944:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9946:	9500      	str	r5, [sp, #0]
{
    9948:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    994a:	f7ff ffbb 	bl	98c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    994e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    9952:	bf08      	it	eq
    9954:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    9958:	d005      	beq.n	9966 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    995a:	ea56 0307 	orrs.w	r3, r6, r7
    995e:	d105      	bne.n	996c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    9960:	4620      	mov	r0, r4
    9962:	f000 fcc7 	bl	a2f4 <z_sched_start>
}
    9966:	4620      	mov	r0, r4
    9968:	b007      	add	sp, #28
    996a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    996c:	4903      	ldr	r1, [pc, #12]	; (997c <z_impl_k_thread_create+0x54>)
    996e:	463a      	mov	r2, r7
    9970:	4633      	mov	r3, r6
    9972:	f104 0018 	add.w	r0, r4, #24
    9976:	f000 fed3 	bl	a720 <z_add_timeout>
    997a:	e7f4      	b.n	9966 <z_impl_k_thread_create+0x3e>
    997c:	0000cc0d 	.word	0x0000cc0d

00009980 <z_init_static_threads>:
{
    9980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9984:	4c29      	ldr	r4, [pc, #164]	; (9a2c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    9986:	4d2a      	ldr	r5, [pc, #168]	; (9a30 <z_init_static_threads+0xb0>)
{
    9988:	b087      	sub	sp, #28
    998a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    998c:	42ae      	cmp	r6, r5
    998e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    9992:	d30f      	bcc.n	99b4 <z_init_static_threads+0x34>
	k_sched_lock();
    9994:	f000 fcfe 	bl	a394 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9998:	4c24      	ldr	r4, [pc, #144]	; (9a2c <z_init_static_threads+0xac>)
    999a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9a34 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    999e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    99a2:	f240 37e7 	movw	r7, #999	; 0x3e7
    99a6:	42ac      	cmp	r4, r5
    99a8:	d320      	bcc.n	99ec <z_init_static_threads+0x6c>
}
    99aa:	b007      	add	sp, #28
    99ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    99b0:	f000 bd04 	b.w	a3bc <k_sched_unlock>
		z_setup_new_thread(
    99b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    99b8:	9305      	str	r3, [sp, #20]
    99ba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    99be:	9304      	str	r3, [sp, #16]
    99c0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    99c4:	9303      	str	r3, [sp, #12]
    99c6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    99ca:	9302      	str	r3, [sp, #8]
    99cc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    99d0:	9301      	str	r3, [sp, #4]
    99d2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    99d6:	9300      	str	r3, [sp, #0]
    99d8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    99dc:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    99e0:	f7ff ff70 	bl	98c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    99e4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    99e8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    99ea:	e7ce      	b.n	998a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    99ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    99ee:	1c5a      	adds	r2, r3, #1
    99f0:	d00d      	beq.n	9a0e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    99f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    99f6:	2100      	movs	r1, #0
    99f8:	4638      	mov	r0, r7
    99fa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    99fe:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    9a02:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9a06:	d104      	bne.n	9a12 <z_init_static_threads+0x92>
	z_sched_start(thread);
    9a08:	4640      	mov	r0, r8
    9a0a:	f000 fc73 	bl	a2f4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    9a0e:	342c      	adds	r4, #44	; 0x2c
    9a10:	e7c9      	b.n	99a6 <z_init_static_threads+0x26>
    9a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9a16:	2300      	movs	r3, #0
    9a18:	f7f7 fb72 	bl	1100 <__aeabi_uldivmod>
    9a1c:	4602      	mov	r2, r0
    9a1e:	460b      	mov	r3, r1
    9a20:	f108 0018 	add.w	r0, r8, #24
    9a24:	4649      	mov	r1, r9
    9a26:	f000 fe7b 	bl	a720 <z_add_timeout>
    9a2a:	e7f0      	b.n	9a0e <z_init_static_threads+0x8e>
    9a2c:	0000d1f0 	.word	0x0000d1f0
    9a30:	0000d1f0 	.word	0x0000d1f0
    9a34:	0000cc0d 	.word	0x0000cc0d

00009a38 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    9a38:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    9a3a:	4c0b      	ldr	r4, [pc, #44]	; (9a68 <idle+0x30>)
	return !z_sys_post_kernel;
    9a3c:	4d0b      	ldr	r5, [pc, #44]	; (9a6c <idle+0x34>)
	__asm__ volatile(
    9a3e:	f04f 0220 	mov.w	r2, #32
    9a42:	f3ef 8311 	mrs	r3, BASEPRI
    9a46:	f382 8812 	msr	BASEPRI_MAX, r2
    9a4a:	f3bf 8f6f 	isb	sy
    9a4e:	f003 f98b 	bl	cd68 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    9a52:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    9a54:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    9a56:	b913      	cbnz	r3, 9a5e <idle+0x26>
	arch_cpu_idle();
    9a58:	f7fa ff80 	bl	495c <arch_cpu_idle>
}
    9a5c:	e7ef      	b.n	9a3e <idle+0x6>
    9a5e:	f7f9 fbb1 	bl	31c4 <pm_system_suspend>
    9a62:	2800      	cmp	r0, #0
    9a64:	d1eb      	bne.n	9a3e <idle+0x6>
    9a66:	e7f7      	b.n	9a58 <idle+0x20>
    9a68:	20001f0c 	.word	0x20001f0c
    9a6c:	2000214f 	.word	0x2000214f

00009a70 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9a70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9a74:	4604      	mov	r4, r0
    9a76:	4617      	mov	r7, r2
    9a78:	461e      	mov	r6, r3
    9a7a:	f04f 0320 	mov.w	r3, #32
    9a7e:	f3ef 8811 	mrs	r8, BASEPRI
    9a82:	f383 8812 	msr	BASEPRI_MAX, r3
    9a86:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9a8a:	68c3      	ldr	r3, [r0, #12]
    9a8c:	4a33      	ldr	r2, [pc, #204]	; (9b5c <z_impl_k_mutex_lock+0xec>)
    9a8e:	b17b      	cbz	r3, 9ab0 <z_impl_k_mutex_lock+0x40>
    9a90:	6880      	ldr	r0, [r0, #8]
    9a92:	6891      	ldr	r1, [r2, #8]
    9a94:	4288      	cmp	r0, r1
    9a96:	d019      	beq.n	9acc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9a98:	ea57 0306 	orrs.w	r3, r7, r6
    9a9c:	d118      	bne.n	9ad0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    9a9e:	f388 8811 	msr	BASEPRI, r8
    9aa2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    9aa6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9aaa:	b002      	add	sp, #8
    9aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    9ab0:	6891      	ldr	r1, [r2, #8]
    9ab2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9ab6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    9ab8:	3301      	adds	r3, #1
    9aba:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    9abc:	6893      	ldr	r3, [r2, #8]
    9abe:	60a3      	str	r3, [r4, #8]
    9ac0:	f388 8811 	msr	BASEPRI, r8
    9ac4:	f3bf 8f6f 	isb	sy
		return 0;
    9ac8:	2000      	movs	r0, #0
    9aca:	e7ee      	b.n	9aaa <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    9acc:	6921      	ldr	r1, [r4, #16]
    9ace:	e7f2      	b.n	9ab6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9ad0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    9ad4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9ad8:	4299      	cmp	r1, r3
    9ada:	bfa8      	it	ge
    9adc:	4619      	movge	r1, r3
    9ade:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9ae2:	4291      	cmp	r1, r2
    9ae4:	bfb8      	it	lt
    9ae6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9ae8:	428b      	cmp	r3, r1
    9aea:	dd2e      	ble.n	9b4a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9aec:	f002 ff11 	bl	c912 <adjust_owner_prio.isra.0>
    9af0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9af2:	e9cd 7600 	strd	r7, r6, [sp]
    9af6:	481a      	ldr	r0, [pc, #104]	; (9b60 <z_impl_k_mutex_lock+0xf0>)
    9af8:	4622      	mov	r2, r4
    9afa:	4641      	mov	r1, r8
    9afc:	f000 fb84 	bl	a208 <z_pend_curr>
	if (got_mutex == 0) {
    9b00:	2800      	cmp	r0, #0
    9b02:	d0e1      	beq.n	9ac8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    9b04:	f04f 0320 	mov.w	r3, #32
    9b08:	f3ef 8611 	mrs	r6, BASEPRI
    9b0c:	f383 8812 	msr	BASEPRI_MAX, r3
    9b10:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    9b14:	68a0      	ldr	r0, [r4, #8]
    9b16:	b1d0      	cbz	r0, 9b4e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9b18:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9b1a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b1c:	429c      	cmp	r4, r3
    9b1e:	d00a      	beq.n	9b36 <z_impl_k_mutex_lock+0xc6>
    9b20:	b14b      	cbz	r3, 9b36 <z_impl_k_mutex_lock+0xc6>
    9b22:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9b26:	4299      	cmp	r1, r3
    9b28:	bfa8      	it	ge
    9b2a:	4619      	movge	r1, r3
    9b2c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9b30:	4299      	cmp	r1, r3
    9b32:	bfb8      	it	lt
    9b34:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    9b36:	f002 feec 	bl	c912 <adjust_owner_prio.isra.0>
    9b3a:	b140      	cbz	r0, 9b4e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    9b3c:	4808      	ldr	r0, [pc, #32]	; (9b60 <z_impl_k_mutex_lock+0xf0>)
    9b3e:	4631      	mov	r1, r6
    9b40:	f000 fbc6 	bl	a2d0 <z_reschedule>
	return -EAGAIN;
    9b44:	f06f 000a 	mvn.w	r0, #10
    9b48:	e7af      	b.n	9aaa <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    9b4a:	2500      	movs	r5, #0
    9b4c:	e7d1      	b.n	9af2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    9b4e:	2d00      	cmp	r5, #0
    9b50:	d1f4      	bne.n	9b3c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    9b52:	f386 8811 	msr	BASEPRI, r6
    9b56:	f3bf 8f6f 	isb	sy
    9b5a:	e7f3      	b.n	9b44 <z_impl_k_mutex_lock+0xd4>
    9b5c:	20001f0c 	.word	0x20001f0c
    9b60:	20002150 	.word	0x20002150

00009b64 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9b64:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    9b66:	6883      	ldr	r3, [r0, #8]
{
    9b68:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    9b6a:	b36b      	cbz	r3, 9bc8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9b6c:	4a19      	ldr	r2, [pc, #100]	; (9bd4 <z_impl_k_mutex_unlock+0x70>)
    9b6e:	6892      	ldr	r2, [r2, #8]
    9b70:	4293      	cmp	r3, r2
    9b72:	d12c      	bne.n	9bce <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    9b74:	68c3      	ldr	r3, [r0, #12]
    9b76:	2b01      	cmp	r3, #1
    9b78:	d903      	bls.n	9b82 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    9b7a:	3b01      	subs	r3, #1
    9b7c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    9b7e:	2000      	movs	r0, #0
}
    9b80:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    9b82:	f04f 0320 	mov.w	r3, #32
    9b86:	f3ef 8511 	mrs	r5, BASEPRI
    9b8a:	f383 8812 	msr	BASEPRI_MAX, r3
    9b8e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    9b92:	6901      	ldr	r1, [r0, #16]
    9b94:	6880      	ldr	r0, [r0, #8]
    9b96:	f002 febc 	bl	c912 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9b9a:	4620      	mov	r0, r4
    9b9c:	f003 f851 	bl	cc42 <z_unpend_first_thread>
	mutex->owner = new_owner;
    9ba0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    9ba2:	b158      	cbz	r0, 9bbc <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    9ba4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9ba8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9baa:	2200      	movs	r2, #0
    9bac:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    9bae:	f002 ffe9 	bl	cb84 <z_ready_thread>
		z_reschedule(&lock, key);
    9bb2:	4809      	ldr	r0, [pc, #36]	; (9bd8 <z_impl_k_mutex_unlock+0x74>)
    9bb4:	4629      	mov	r1, r5
    9bb6:	f000 fb8b 	bl	a2d0 <z_reschedule>
    9bba:	e7e0      	b.n	9b7e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    9bbc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    9bbe:	f385 8811 	msr	BASEPRI, r5
    9bc2:	f3bf 8f6f 	isb	sy
    9bc6:	e7da      	b.n	9b7e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    9bc8:	f06f 0015 	mvn.w	r0, #21
    9bcc:	e7d8      	b.n	9b80 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    9bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9bd2:	e7d5      	b.n	9b80 <z_impl_k_mutex_unlock+0x1c>
    9bd4:	20001f0c 	.word	0x20001f0c
    9bd8:	20002150 	.word	0x20002150

00009bdc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9bde:	4611      	mov	r1, r2
	__asm__ volatile(
    9be0:	f04f 0220 	mov.w	r2, #32
    9be4:	f3ef 8511 	mrs	r5, BASEPRI
    9be8:	f382 8812 	msr	BASEPRI_MAX, r2
    9bec:	f3bf 8f6f 	isb	sy
    9bf0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    9bf2:	b19c      	cbz	r4, 9c1c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9bf4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9bf6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9bf8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9bfc:	4294      	cmp	r4, r2
	list->head = node;
    9bfe:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9c00:	bf08      	it	eq
    9c02:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9c04:	2101      	movs	r1, #1
    9c06:	4620      	mov	r0, r4
    9c08:	f002 fef4 	bl	c9f4 <z_queue_node_peek>
    9c0c:	4604      	mov	r4, r0
	__asm__ volatile(
    9c0e:	f385 8811 	msr	BASEPRI, r5
    9c12:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    9c16:	4620      	mov	r0, r4
    9c18:	b003      	add	sp, #12
    9c1a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9c1c:	ea51 0203 	orrs.w	r2, r1, r3
    9c20:	d0f5      	beq.n	9c0e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9c22:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    9c26:	e9cd 1300 	strd	r1, r3, [sp]
    9c2a:	4610      	mov	r0, r2
    9c2c:	4629      	mov	r1, r5
    9c2e:	f000 faeb 	bl	a208 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    9c32:	2800      	cmp	r0, #0
    9c34:	d1ef      	bne.n	9c16 <z_impl_k_queue_get+0x3a>
    9c36:	4b02      	ldr	r3, [pc, #8]	; (9c40 <z_impl_k_queue_get+0x64>)
    9c38:	689b      	ldr	r3, [r3, #8]
    9c3a:	695c      	ldr	r4, [r3, #20]
    9c3c:	e7eb      	b.n	9c16 <z_impl_k_queue_get+0x3a>
    9c3e:	bf00      	nop
    9c40:	20001f0c 	.word	0x20001f0c

00009c44 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9c44:	b538      	push	{r3, r4, r5, lr}
    9c46:	4604      	mov	r4, r0
	__asm__ volatile(
    9c48:	f04f 0320 	mov.w	r3, #32
    9c4c:	f3ef 8511 	mrs	r5, BASEPRI
    9c50:	f383 8812 	msr	BASEPRI_MAX, r3
    9c54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9c58:	f002 fff3 	bl	cc42 <z_unpend_first_thread>

	if (thread != NULL) {
    9c5c:	b148      	cbz	r0, 9c72 <z_impl_k_sem_give+0x2e>
    9c5e:	2200      	movs	r2, #0
    9c60:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    9c62:	f002 ff8f 	bl	cb84 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    9c66:	4629      	mov	r1, r5
    9c68:	4805      	ldr	r0, [pc, #20]	; (9c80 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    9c6e:	f000 bb2f 	b.w	a2d0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9c72:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    9c76:	429a      	cmp	r2, r3
    9c78:	bf18      	it	ne
    9c7a:	3301      	addne	r3, #1
    9c7c:	60a3      	str	r3, [r4, #8]
}
    9c7e:	e7f2      	b.n	9c66 <z_impl_k_sem_give+0x22>
    9c80:	20002150 	.word	0x20002150

00009c84 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    9c84:	b513      	push	{r0, r1, r4, lr}
    9c86:	f04f 0420 	mov.w	r4, #32
    9c8a:	f3ef 8111 	mrs	r1, BASEPRI
    9c8e:	f384 8812 	msr	BASEPRI_MAX, r4
    9c92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    9c96:	6884      	ldr	r4, [r0, #8]
    9c98:	b144      	cbz	r4, 9cac <z_impl_k_sem_take+0x28>
		sem->count--;
    9c9a:	3c01      	subs	r4, #1
    9c9c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    9c9e:	f381 8811 	msr	BASEPRI, r1
    9ca2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9ca6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    9ca8:	b002      	add	sp, #8
    9caa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9cac:	ea52 0403 	orrs.w	r4, r2, r3
    9cb0:	d106      	bne.n	9cc0 <z_impl_k_sem_take+0x3c>
    9cb2:	f381 8811 	msr	BASEPRI, r1
    9cb6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    9cba:	f06f 000f 	mvn.w	r0, #15
    9cbe:	e7f3      	b.n	9ca8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9cc0:	e9cd 2300 	strd	r2, r3, [sp]
    9cc4:	4602      	mov	r2, r0
    9cc6:	4802      	ldr	r0, [pc, #8]	; (9cd0 <z_impl_k_sem_take+0x4c>)
    9cc8:	f000 fa9e 	bl	a208 <z_pend_curr>
	return ret;
    9ccc:	e7ec      	b.n	9ca8 <z_impl_k_sem_take+0x24>
    9cce:	bf00      	nop
    9cd0:	20002150 	.word	0x20002150

00009cd4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    9cd8:	4e4a      	ldr	r6, [pc, #296]	; (9e04 <work_queue_main+0x130>)
    9cda:	b085      	sub	sp, #20
    9cdc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9cde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9ce2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    9ce6:	f04f 0320 	mov.w	r3, #32
    9cea:	f3ef 8711 	mrs	r7, BASEPRI
    9cee:	f383 8812 	msr	BASEPRI_MAX, r3
    9cf2:	f3bf 8f6f 	isb	sy
    9cf6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9cfa:	b98d      	cbnz	r5, 9d20 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    9cfc:	2102      	movs	r1, #2
    9cfe:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9d02:	f002 fe9a 	bl	ca3a <flag_test_and_clear>
    9d06:	2800      	cmp	r0, #0
    9d08:	d143      	bne.n	9d92 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9d0a:	2300      	movs	r3, #0
    9d0c:	e9cd 8900 	strd	r8, r9, [sp]
    9d10:	9302      	str	r3, [sp, #8]
    9d12:	f104 0288 	add.w	r2, r4, #136	; 0x88
    9d16:	4639      	mov	r1, r7
    9d18:	483b      	ldr	r0, [pc, #236]	; (9e08 <work_queue_main+0x134>)
    9d1a:	f000 fc8f 	bl	a63c <z_sched_wait>
			continue;
    9d1e:	e7e2      	b.n	9ce6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d20:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    9d24:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    9d26:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d2a:	4295      	cmp	r5, r2
	list->tail = node;
    9d2c:	bf08      	it	eq
    9d2e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    9d32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9d36:	f043 0302 	orr.w	r3, r3, #2
    9d3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    9d3e:	68eb      	ldr	r3, [r5, #12]
    9d40:	f023 0304 	bic.w	r3, r3, #4
    9d44:	f043 0301 	orr.w	r3, r3, #1
    9d48:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    9d4a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    9d4c:	f387 8811 	msr	BASEPRI, r7
    9d50:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9d54:	4628      	mov	r0, r5
    9d56:	4798      	blx	r3
	__asm__ volatile(
    9d58:	f04f 0320 	mov.w	r3, #32
    9d5c:	f3ef 8b11 	mrs	fp, BASEPRI
    9d60:	f383 8812 	msr	BASEPRI_MAX, r3
    9d64:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9d68:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9d6a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    9d6c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9d70:	d419      	bmi.n	9da6 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    9d72:	60ea      	str	r2, [r5, #12]
    9d74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9d78:	f023 0302 	bic.w	r3, r3, #2
    9d7c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    9d80:	f38b 8811 	msr	BASEPRI, fp
    9d84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9d88:	05db      	lsls	r3, r3, #23
    9d8a:	d4ac      	bmi.n	9ce6 <work_queue_main+0x12>
	z_impl_k_yield();
    9d8c:	f000 fb3a 	bl	a404 <z_impl_k_yield>
}
    9d90:	e7a9      	b.n	9ce6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9d92:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    9d96:	2200      	movs	r2, #0
    9d98:	2101      	movs	r1, #1
    9d9a:	4628      	mov	r0, r5
    9d9c:	f002 ffab 	bl	ccf6 <z_sched_wake>
    9da0:	2800      	cmp	r0, #0
    9da2:	d1f8      	bne.n	9d96 <work_queue_main+0xc2>
    9da4:	e7b1      	b.n	9d0a <work_queue_main+0x36>
	return list->head;
    9da6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    9da8:	f023 0303 	bic.w	r3, r3, #3
    9dac:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9dae:	2800      	cmp	r0, #0
    9db0:	d0e0      	beq.n	9d74 <work_queue_main+0xa0>
	return node->next;
    9db2:	2700      	movs	r7, #0
    9db4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    9db8:	463b      	mov	r3, r7
    9dba:	2800      	cmp	r0, #0
    9dbc:	d0da      	beq.n	9d74 <work_queue_main+0xa0>
		if (wc->work == work) {
    9dbe:	6842      	ldr	r2, [r0, #4]
    9dc0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9dc2:	4601      	mov	r1, r0
		if (wc->work == work) {
    9dc4:	d10c      	bne.n	9de0 <work_queue_main+0x10c>
	return node->next;
    9dc6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9dc8:	b99f      	cbnz	r7, 9df2 <work_queue_main+0x11e>
    9dca:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9dcc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9dce:	4282      	cmp	r2, r0
    9dd0:	d100      	bne.n	9dd4 <work_queue_main+0x100>
	list->tail = node;
    9dd2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    9dd4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    9dd8:	f7ff ff34 	bl	9c44 <z_impl_k_sem_give>
}
    9ddc:	4639      	mov	r1, r7
    9dde:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9de0:	f1ba 0f00 	cmp.w	sl, #0
    9de4:	d00b      	beq.n	9dfe <work_queue_main+0x12a>
	return node->next;
    9de6:	f8da 2000 	ldr.w	r2, [sl]
    9dea:	4650      	mov	r0, sl
    9dec:	460f      	mov	r7, r1
    9dee:	4692      	mov	sl, r2
    9df0:	e7e3      	b.n	9dba <work_queue_main+0xe6>
	parent->next = child;
    9df2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9df4:	6872      	ldr	r2, [r6, #4]
    9df6:	4282      	cmp	r2, r0
	list->tail = node;
    9df8:	bf08      	it	eq
    9dfa:	6077      	streq	r7, [r6, #4]
}
    9dfc:	e7ea      	b.n	9dd4 <work_queue_main+0x100>
    9dfe:	4652      	mov	r2, sl
    9e00:	e7f3      	b.n	9dea <work_queue_main+0x116>
    9e02:	bf00      	nop
    9e04:	20001f30 	.word	0x20001f30
    9e08:	20002150 	.word	0x20002150

00009e0c <submit_to_queue_locked>:
{
    9e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    9e0e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9e10:	079a      	lsls	r2, r3, #30
{
    9e12:	4604      	mov	r4, r0
    9e14:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9e16:	f3c3 0640 	ubfx	r6, r3, #1, #1
    9e1a:	d42c      	bmi.n	9e76 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9e1c:	075b      	lsls	r3, r3, #29
    9e1e:	d41a      	bmi.n	9e56 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    9e20:	680b      	ldr	r3, [r1, #0]
    9e22:	b90b      	cbnz	r3, 9e28 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9e24:	6883      	ldr	r3, [r0, #8]
    9e26:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    9e28:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    9e2a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    9e2c:	bf44      	itt	mi
    9e2e:	68a3      	ldrmi	r3, [r4, #8]
    9e30:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    9e32:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    9e34:	bf4c      	ite	mi
    9e36:	2602      	movmi	r6, #2
		ret = 1;
    9e38:	2601      	movpl	r6, #1
	if (queue == NULL) {
    9e3a:	2d00      	cmp	r5, #0
    9e3c:	d03a      	beq.n	9eb4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9e3e:	4b1f      	ldr	r3, [pc, #124]	; (9ebc <submit_to_queue_locked+0xb0>)
    9e40:	689b      	ldr	r3, [r3, #8]
    9e42:	42ab      	cmp	r3, r5
    9e44:	d00a      	beq.n	9e5c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    9e46:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9e4a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9e4c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9e50:	d414      	bmi.n	9e7c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    9e52:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    9e56:	2300      	movs	r3, #0
    9e58:	603b      	str	r3, [r7, #0]
	return ret;
    9e5a:	e025      	b.n	9ea8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9e5c:	f002 fd45 	bl	c8ea <k_is_in_isr>
    9e60:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    9e64:	2800      	cmp	r0, #0
    9e66:	d1f0      	bne.n	9e4a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9e68:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9e6a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9e6e:	d5f0      	bpl.n	9e52 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    9e70:	b152      	cbz	r2, 9e88 <submit_to_queue_locked+0x7c>
    9e72:	075b      	lsls	r3, r3, #29
    9e74:	d408      	bmi.n	9e88 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    9e76:	f06f 060f 	mvn.w	r6, #15
    9e7a:	e7ec      	b.n	9e56 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    9e7c:	2a00      	cmp	r2, #0
    9e7e:	d1fa      	bne.n	9e76 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    9e80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    9e84:	2b00      	cmp	r3, #0
    9e86:	d1f6      	bne.n	9e76 <submit_to_queue_locked+0x6a>
	parent->next = child;
    9e88:	2300      	movs	r3, #0
    9e8a:	6023      	str	r3, [r4, #0]
	return list->tail;
    9e8c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    9e90:	b963      	cbnz	r3, 9eac <submit_to_queue_locked+0xa0>
	list->head = node;
    9e92:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    9e96:	4628      	mov	r0, r5
    9e98:	f002 fdda 	bl	ca50 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    9e9c:	68e3      	ldr	r3, [r4, #12]
    9e9e:	f043 0304 	orr.w	r3, r3, #4
    9ea2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    9ea4:	683b      	ldr	r3, [r7, #0]
    9ea6:	60a3      	str	r3, [r4, #8]
}
    9ea8:	4630      	mov	r0, r6
    9eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    9eac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9eae:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    9eb2:	e7f0      	b.n	9e96 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    9eb4:	f06f 0615 	mvn.w	r6, #21
    9eb8:	e7cd      	b.n	9e56 <submit_to_queue_locked+0x4a>
    9eba:	bf00      	nop
    9ebc:	20001f0c 	.word	0x20001f0c

00009ec0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec2:	b089      	sub	sp, #36	; 0x24
    9ec4:	4604      	mov	r4, r0
	list->head = NULL;
    9ec6:	2000      	movs	r0, #0
	list->tail = NULL;
    9ec8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    9ecc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9ece:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    9ed2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    9ed6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9eda:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    9ede:	b31d      	cbz	r5, 9f28 <k_work_queue_start+0x68>
    9ee0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9ee2:	2800      	cmp	r0, #0
    9ee4:	f240 1001 	movw	r0, #257	; 0x101
    9ee8:	bf08      	it	eq
    9eea:	2001      	moveq	r0, #1
	*flagp = flags;
    9eec:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9ef0:	2000      	movs	r0, #0
    9ef2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9ef6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9efa:	e9cd 3003 	strd	r3, r0, [sp, #12]
    9efe:	e9cd 0001 	strd	r0, r0, [sp, #4]
    9f02:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9f06:	4b09      	ldr	r3, [pc, #36]	; (9f2c <k_work_queue_start+0x6c>)
    9f08:	9400      	str	r4, [sp, #0]
    9f0a:	4620      	mov	r0, r4
    9f0c:	f7ff fd0c 	bl	9928 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9f10:	b125      	cbz	r5, 9f1c <k_work_queue_start+0x5c>
    9f12:	6829      	ldr	r1, [r5, #0]
    9f14:	b111      	cbz	r1, 9f1c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    9f16:	4620      	mov	r0, r4
    9f18:	f002 fced 	bl	c8f6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    9f1c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    9f1e:	b009      	add	sp, #36	; 0x24
    9f20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f24:	f002 bcec 	b.w	c900 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9f28:	2001      	movs	r0, #1
    9f2a:	e7df      	b.n	9eec <k_work_queue_start+0x2c>
    9f2c:	00009cd5 	.word	0x00009cd5

00009f30 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    9f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9f32:	9001      	str	r0, [sp, #4]
    9f34:	4608      	mov	r0, r1
	__asm__ volatile(
    9f36:	f04f 0120 	mov.w	r1, #32
    9f3a:	f3ef 8411 	mrs	r4, BASEPRI
    9f3e:	f381 8812 	msr	BASEPRI_MAX, r1
    9f42:	f3bf 8f6f 	isb	sy
	return *flagp;
    9f46:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    9f48:	f011 0f0e 	tst.w	r1, #14
    9f4c:	d116      	bne.n	9f7c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9f4e:	ea53 0502 	orrs.w	r5, r3, r2
    9f52:	d108      	bne.n	9f66 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    9f54:	a901      	add	r1, sp, #4
    9f56:	f7ff ff59 	bl	9e0c <submit_to_queue_locked>
	__asm__ volatile(
    9f5a:	f384 8811 	msr	BASEPRI, r4
    9f5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    9f62:	b003      	add	sp, #12
    9f64:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    9f66:	f041 0108 	orr.w	r1, r1, #8
    9f6a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    9f6c:	9901      	ldr	r1, [sp, #4]
    9f6e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    9f70:	3010      	adds	r0, #16
    9f72:	4903      	ldr	r1, [pc, #12]	; (9f80 <k_work_schedule_for_queue+0x50>)
    9f74:	f000 fbd4 	bl	a720 <z_add_timeout>
	return ret;
    9f78:	2001      	movs	r0, #1
    9f7a:	e7ee      	b.n	9f5a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    9f7c:	2000      	movs	r0, #0
    9f7e:	e7ec      	b.n	9f5a <k_work_schedule_for_queue+0x2a>
    9f80:	0000ca5f 	.word	0x0000ca5f

00009f84 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    9f84:	89c3      	ldrh	r3, [r0, #14]
    9f86:	2b7f      	cmp	r3, #127	; 0x7f
    9f88:	d812      	bhi.n	9fb0 <sliceable+0x2c>
	int ret = slice_ticks;
    9f8a:	4b0a      	ldr	r3, [pc, #40]	; (9fb4 <sliceable+0x30>)
    9f8c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    9f8e:	b163      	cbz	r3, 9faa <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9f90:	4b09      	ldr	r3, [pc, #36]	; (9fb8 <sliceable+0x34>)
    9f92:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9f96:	681b      	ldr	r3, [r3, #0]
    9f98:	429a      	cmp	r2, r3
    9f9a:	db09      	blt.n	9fb0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    9f9c:	7b43      	ldrb	r3, [r0, #13]
    9f9e:	06db      	lsls	r3, r3, #27
    9fa0:	d106      	bne.n	9fb0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    9fa2:	4b06      	ldr	r3, [pc, #24]	; (9fbc <sliceable+0x38>)
    9fa4:	1ac3      	subs	r3, r0, r3
    9fa6:	bf18      	it	ne
    9fa8:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    9faa:	f003 0001 	and.w	r0, r3, #1
    9fae:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    9fb0:	2300      	movs	r3, #0
    9fb2:	e7fa      	b.n	9faa <sliceable+0x26>
    9fb4:	20001f40 	.word	0x20001f40
    9fb8:	20001f3c 	.word	0x20001f3c
    9fbc:	20000a28 	.word	0x20000a28

00009fc0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    9fc0:	4b04      	ldr	r3, [pc, #16]	; (9fd4 <slice_timeout+0x14>)
    9fc2:	1ac0      	subs	r0, r0, r3
    9fc4:	4b04      	ldr	r3, [pc, #16]	; (9fd8 <slice_timeout+0x18>)
    9fc6:	10c0      	asrs	r0, r0, #3
    9fc8:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    9fca:	4b04      	ldr	r3, [pc, #16]	; (9fdc <slice_timeout+0x1c>)
    9fcc:	2201      	movs	r2, #1
    9fce:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    9fd0:	4770      	bx	lr
    9fd2:	bf00      	nop
    9fd4:	20000b28 	.word	0x20000b28
    9fd8:	aaaaaaab 	.word	0xaaaaaaab
    9fdc:	20002150 	.word	0x20002150

00009fe0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    9fe0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    9fe2:	4b0e      	ldr	r3, [pc, #56]	; (a01c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    9fe4:	4c0e      	ldr	r4, [pc, #56]	; (a020 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    9fe6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    9fe8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    9fec:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    9ff0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    9ff2:	4620      	mov	r0, r4
    9ff4:	f002 fea2 	bl	cd3c <z_abort_timeout>
	slice_expired[cpu] = false;
    9ff8:	4b0a      	ldr	r3, [pc, #40]	; (a024 <z_reset_time_slice+0x44>)
    9ffa:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    9ffc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    9ffe:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    a000:	f7ff ffc0 	bl	9f84 <sliceable>
    a004:	b148      	cbz	r0, a01a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    a006:	4b08      	ldr	r3, [pc, #32]	; (a028 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a008:	4908      	ldr	r1, [pc, #32]	; (a02c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    a00a:	681a      	ldr	r2, [r3, #0]
    a00c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a00e:	4620      	mov	r0, r4
    a010:	17d3      	asrs	r3, r2, #31
	}
}
    a012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a016:	f000 bb83 	b.w	a720 <z_add_timeout>
}
    a01a:	bd70      	pop	{r4, r5, r6, pc}
    a01c:	20001f0c 	.word	0x20001f0c
    a020:	20000b28 	.word	0x20000b28
    a024:	20002150 	.word	0x20002150
    a028:	20001f40 	.word	0x20001f40
    a02c:	00009fc1 	.word	0x00009fc1

0000a030 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    a030:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    a032:	4d0d      	ldr	r5, [pc, #52]	; (a068 <update_cache+0x38>)
    a034:	462b      	mov	r3, r5
    a036:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a03a:	429c      	cmp	r4, r3
    a03c:	d000      	beq.n	a040 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a03e:	b904      	cbnz	r4, a042 <update_cache+0x12>
    a040:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    a042:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    a044:	b938      	cbnz	r0, a056 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    a046:	7b5a      	ldrb	r2, [r3, #13]
    a048:	06d2      	lsls	r2, r2, #27
    a04a:	d104      	bne.n	a056 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a04c:	69a2      	ldr	r2, [r4, #24]
    a04e:	b912      	cbnz	r2, a056 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    a050:	89da      	ldrh	r2, [r3, #14]
    a052:	2a7f      	cmp	r2, #127	; 0x7f
    a054:	d805      	bhi.n	a062 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    a056:	429c      	cmp	r4, r3
    a058:	d002      	beq.n	a060 <update_cache+0x30>
			z_reset_time_slice(thread);
    a05a:	4620      	mov	r0, r4
    a05c:	f7ff ffc0 	bl	9fe0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    a060:	4623      	mov	r3, r4
    a062:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    a064:	bd38      	pop	{r3, r4, r5, pc}
    a066:	bf00      	nop
    a068:	20001f0c 	.word	0x20001f0c

0000a06c <move_thread_to_end_of_prio_q>:
{
    a06c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    a06e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a072:	7b43      	ldrb	r3, [r0, #13]
    a074:	2a00      	cmp	r2, #0
{
    a076:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a078:	da04      	bge.n	a084 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a07e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    a080:	f002 fd46 	bl	cb10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a084:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    a086:	4a15      	ldr	r2, [pc, #84]	; (a0dc <move_thread_to_end_of_prio_q+0x70>)
    a088:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a08c:	4610      	mov	r0, r2
    a08e:	734b      	strb	r3, [r1, #13]
    a090:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    a094:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a096:	4283      	cmp	r3, r0
    a098:	bf08      	it	eq
    a09a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a09c:	b923      	cbnz	r3, a0a8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    a09e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    a0a2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    a0a4:	6211      	str	r1, [r2, #32]
}
    a0a6:	e00c      	b.n	a0c2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    a0a8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    a0ac:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a0b0:	42b5      	cmp	r5, r6
    a0b2:	d00e      	beq.n	a0d2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a0b4:	42ae      	cmp	r6, r5
    a0b6:	dd0c      	ble.n	a0d2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    a0b8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    a0ba:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    a0be:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    a0c0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    a0c2:	6890      	ldr	r0, [r2, #8]
    a0c4:	1a43      	subs	r3, r0, r1
    a0c6:	4258      	negs	r0, r3
}
    a0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    a0cc:	4158      	adcs	r0, r3
    a0ce:	f7ff bfaf 	b.w	a030 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a0d2:	429c      	cmp	r4, r3
    a0d4:	d0e3      	beq.n	a09e <move_thread_to_end_of_prio_q+0x32>
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	e7e0      	b.n	a09c <move_thread_to_end_of_prio_q+0x30>
    a0da:	bf00      	nop
    a0dc:	20001f0c 	.word	0x20001f0c

0000a0e0 <ready_thread>:
{
    a0e0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a0e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a0e6:	7b42      	ldrb	r2, [r0, #13]
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	db29      	blt.n	a140 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a0ec:	06d3      	lsls	r3, r2, #27
    a0ee:	d127      	bne.n	a140 <ready_thread+0x60>
	return node->next != NULL;
    a0f0:	6983      	ldr	r3, [r0, #24]
    a0f2:	bb2b      	cbnz	r3, a140 <ready_thread+0x60>
	return list->head == list;
    a0f4:	4913      	ldr	r1, [pc, #76]	; (a144 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    a0f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a0fa:	7342      	strb	r2, [r0, #13]
    a0fc:	460a      	mov	r2, r1
    a0fe:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a102:	4294      	cmp	r4, r2
    a104:	bf18      	it	ne
    a106:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    a108:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a10a:	b923      	cbnz	r3, a116 <ready_thread+0x36>
	node->prev = tail;
    a10c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    a110:	6020      	str	r0, [r4, #0]
	list->tail = node;
    a112:	6208      	str	r0, [r1, #32]
}
    a114:	e00c      	b.n	a130 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    a116:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a11a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a11e:	42b5      	cmp	r5, r6
    a120:	d00a      	beq.n	a138 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a122:	42ae      	cmp	r6, r5
    a124:	dd08      	ble.n	a138 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    a126:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a128:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    a12c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    a12e:	6058      	str	r0, [r3, #4]
}
    a130:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    a132:	2000      	movs	r0, #0
    a134:	f7ff bf7c 	b.w	a030 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a138:	42a3      	cmp	r3, r4
    a13a:	d0e7      	beq.n	a10c <ready_thread+0x2c>
    a13c:	681b      	ldr	r3, [r3, #0]
    a13e:	e7e4      	b.n	a10a <ready_thread+0x2a>
}
    a140:	bc70      	pop	{r4, r5, r6}
    a142:	4770      	bx	lr
    a144:	20001f0c 	.word	0x20001f0c

0000a148 <unready_thread>:
{
    a148:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    a14a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a14e:	7b43      	ldrb	r3, [r0, #13]
    a150:	2a00      	cmp	r2, #0
{
    a152:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a154:	da04      	bge.n	a160 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a15a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a15c:	f002 fcd8 	bl	cb10 <sys_dlist_remove>
	update_cache(thread == _current);
    a160:	4b04      	ldr	r3, [pc, #16]	; (a174 <unready_thread+0x2c>)
    a162:	6898      	ldr	r0, [r3, #8]
    a164:	1a43      	subs	r3, r0, r1
    a166:	4258      	negs	r0, r3
    a168:	4158      	adcs	r0, r3
}
    a16a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    a16e:	f7ff bf5f 	b.w	a030 <update_cache>
    a172:	bf00      	nop
    a174:	20001f0c 	.word	0x20001f0c

0000a178 <pend_locked>:
{
    a178:	b570      	push	{r4, r5, r6, lr}
    a17a:	4615      	mov	r5, r2
    a17c:	461c      	mov	r4, r3
    a17e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    a180:	f002 fcd8 	bl	cb34 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a184:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a188:	bf08      	it	eq
    a18a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    a18e:	d008      	beq.n	a1a2 <pend_locked+0x2a>
    a190:	462a      	mov	r2, r5
    a192:	4623      	mov	r3, r4
    a194:	f106 0018 	add.w	r0, r6, #24
    a198:	4902      	ldr	r1, [pc, #8]	; (a1a4 <pend_locked+0x2c>)
}
    a19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a19e:	f000 babf 	b.w	a720 <z_add_timeout>
    a1a2:	bd70      	pop	{r4, r5, r6, pc}
    a1a4:	0000cc0d 	.word	0x0000cc0d

0000a1a8 <z_time_slice>:
{
    a1a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a1aa:	f04f 0320 	mov.w	r3, #32
    a1ae:	f3ef 8511 	mrs	r5, BASEPRI
    a1b2:	f383 8812 	msr	BASEPRI_MAX, r3
    a1b6:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    a1ba:	4b10      	ldr	r3, [pc, #64]	; (a1fc <z_time_slice+0x54>)
	if (pending_current == curr) {
    a1bc:	4a10      	ldr	r2, [pc, #64]	; (a200 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    a1be:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    a1c0:	6810      	ldr	r0, [r2, #0]
    a1c2:	42a0      	cmp	r0, r4
    a1c4:	d106      	bne.n	a1d4 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    a1c6:	f7ff ff0b 	bl	9fe0 <z_reset_time_slice>
	__asm__ volatile(
    a1ca:	f385 8811 	msr	BASEPRI, r5
    a1ce:	f3bf 8f6f 	isb	sy
}
    a1d2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    a1d4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a1d6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    a1d8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a1da:	4a0a      	ldr	r2, [pc, #40]	; (a204 <z_time_slice+0x5c>)
    a1dc:	5cd3      	ldrb	r3, [r2, r3]
    a1de:	2b00      	cmp	r3, #0
    a1e0:	d0f3      	beq.n	a1ca <z_time_slice+0x22>
    a1e2:	4620      	mov	r0, r4
    a1e4:	f7ff fece 	bl	9f84 <sliceable>
    a1e8:	2800      	cmp	r0, #0
    a1ea:	d0ee      	beq.n	a1ca <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    a1ec:	7b63      	ldrb	r3, [r4, #13]
    a1ee:	06db      	lsls	r3, r3, #27
    a1f0:	d102      	bne.n	a1f8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    a1f2:	4620      	mov	r0, r4
    a1f4:	f7ff ff3a 	bl	a06c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    a1f8:	4620      	mov	r0, r4
    a1fa:	e7e4      	b.n	a1c6 <z_time_slice+0x1e>
    a1fc:	20001f0c 	.word	0x20001f0c
    a200:	20001f38 	.word	0x20001f38
    a204:	20002150 	.word	0x20002150

0000a208 <z_pend_curr>:
{
    a208:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    a20a:	480c      	ldr	r0, [pc, #48]	; (a23c <z_pend_curr+0x34>)
    a20c:	4d0c      	ldr	r5, [pc, #48]	; (a240 <z_pend_curr+0x38>)
    a20e:	6886      	ldr	r6, [r0, #8]
    a210:	602e      	str	r6, [r5, #0]
{
    a212:	460c      	mov	r4, r1
    a214:	4611      	mov	r1, r2
    a216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    a21a:	f04f 0620 	mov.w	r6, #32
    a21e:	f3ef 8511 	mrs	r5, BASEPRI
    a222:	f386 8812 	msr	BASEPRI_MAX, r6
    a226:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    a22a:	6880      	ldr	r0, [r0, #8]
    a22c:	f7ff ffa4 	bl	a178 <pend_locked>
	ret = arch_swap(key);
    a230:	4620      	mov	r0, r4
}
    a232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a236:	f7fa bc79 	b.w	4b2c <arch_swap>
    a23a:	bf00      	nop
    a23c:	20001f0c 	.word	0x20001f0c
    a240:	20001f38 	.word	0x20001f38

0000a244 <z_set_prio>:
{
    a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a246:	4604      	mov	r4, r0
    a248:	f04f 0320 	mov.w	r3, #32
    a24c:	f3ef 8611 	mrs	r6, BASEPRI
    a250:	f383 8812 	msr	BASEPRI_MAX, r3
    a254:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    a258:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a25a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    a25c:	b249      	sxtb	r1, r1
    a25e:	d119      	bne.n	a294 <z_set_prio+0x50>
	return node->next != NULL;
    a260:	6985      	ldr	r5, [r0, #24]
    a262:	b9bd      	cbnz	r5, a294 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a268:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a26a:	f002 fc51 	bl	cb10 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a26e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    a270:	4a16      	ldr	r2, [pc, #88]	; (a2cc <z_set_prio+0x88>)
				thread->base.prio = prio;
    a272:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a274:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a278:	7343      	strb	r3, [r0, #13]
    a27a:	4613      	mov	r3, r2
    a27c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a280:	4298      	cmp	r0, r3
    a282:	bf18      	it	ne
    a284:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    a286:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a288:	b95d      	cbnz	r5, a2a2 <z_set_prio+0x5e>
	node->prev = tail;
    a28a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    a28e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    a290:	6214      	str	r4, [r2, #32]
}
    a292:	e011      	b.n	a2b8 <z_set_prio+0x74>
			thread->base.prio = prio;
    a294:	73a1      	strb	r1, [r4, #14]
    a296:	2000      	movs	r0, #0
	__asm__ volatile(
    a298:	f386 8811 	msr	BASEPRI, r6
    a29c:	f3bf 8f6f 	isb	sy
}
    a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    a2a2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    a2a6:	42b9      	cmp	r1, r7
    a2a8:	d00b      	beq.n	a2c2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a2aa:	428f      	cmp	r7, r1
    a2ac:	dd09      	ble.n	a2c2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    a2ae:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    a2b0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    a2b4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a2b6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    a2b8:	2001      	movs	r0, #1
    a2ba:	f7ff feb9 	bl	a030 <update_cache>
    a2be:	2001      	movs	r0, #1
    a2c0:	e7ea      	b.n	a298 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    a2c2:	42a8      	cmp	r0, r5
    a2c4:	d0e1      	beq.n	a28a <z_set_prio+0x46>
    a2c6:	682d      	ldr	r5, [r5, #0]
    a2c8:	e7de      	b.n	a288 <z_set_prio+0x44>
    a2ca:	bf00      	nop
    a2cc:	20001f0c 	.word	0x20001f0c

0000a2d0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a2d0:	b949      	cbnz	r1, a2e6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a2d2:	f3ef 8005 	mrs	r0, IPSR
    a2d6:	b930      	cbnz	r0, a2e6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    a2d8:	4b05      	ldr	r3, [pc, #20]	; (a2f0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    a2da:	699a      	ldr	r2, [r3, #24]
    a2dc:	689b      	ldr	r3, [r3, #8]
    a2de:	429a      	cmp	r2, r3
    a2e0:	d001      	beq.n	a2e6 <z_reschedule+0x16>
    a2e2:	f7fa bc23 	b.w	4b2c <arch_swap>
    a2e6:	f381 8811 	msr	BASEPRI, r1
    a2ea:	f3bf 8f6f 	isb	sy
}
    a2ee:	4770      	bx	lr
    a2f0:	20001f0c 	.word	0x20001f0c

0000a2f4 <z_sched_start>:
{
    a2f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    a2f6:	f04f 0220 	mov.w	r2, #32
    a2fa:	f3ef 8411 	mrs	r4, BASEPRI
    a2fe:	f382 8812 	msr	BASEPRI_MAX, r2
    a302:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a306:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    a308:	0751      	lsls	r1, r2, #29
    a30a:	d404      	bmi.n	a316 <z_sched_start+0x22>
	__asm__ volatile(
    a30c:	f384 8811 	msr	BASEPRI, r4
    a310:	f3bf 8f6f 	isb	sy
}
    a314:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a316:	f022 0204 	bic.w	r2, r2, #4
    a31a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    a31c:	f7ff fee0 	bl	a0e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a320:	4621      	mov	r1, r4
    a322:	4802      	ldr	r0, [pc, #8]	; (a32c <z_sched_start+0x38>)
}
    a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    a328:	f7ff bfd2 	b.w	a2d0 <z_reschedule>
    a32c:	20002151 	.word	0x20002151

0000a330 <z_impl_k_thread_suspend>:
{
    a330:	b570      	push	{r4, r5, r6, lr}
    a332:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a334:	3018      	adds	r0, #24
    a336:	f002 fd01 	bl	cd3c <z_abort_timeout>
	__asm__ volatile(
    a33a:	f04f 0320 	mov.w	r3, #32
    a33e:	f3ef 8611 	mrs	r6, BASEPRI
    a342:	f383 8812 	msr	BASEPRI_MAX, r3
    a346:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    a34a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    a34e:	7b63      	ldrb	r3, [r4, #13]
    a350:	2a00      	cmp	r2, #0
    a352:	da05      	bge.n	a360 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a358:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a35a:	4620      	mov	r0, r4
    a35c:	f002 fbd8 	bl	cb10 <sys_dlist_remove>
		update_cache(thread == _current);
    a360:	4d0b      	ldr	r5, [pc, #44]	; (a390 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a362:	7b63      	ldrb	r3, [r4, #13]
    a364:	68a8      	ldr	r0, [r5, #8]
    a366:	f043 0310 	orr.w	r3, r3, #16
    a36a:	7363      	strb	r3, [r4, #13]
    a36c:	1b03      	subs	r3, r0, r4
    a36e:	4258      	negs	r0, r3
    a370:	4158      	adcs	r0, r3
    a372:	f7ff fe5d 	bl	a030 <update_cache>
	__asm__ volatile(
    a376:	f386 8811 	msr	BASEPRI, r6
    a37a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    a37e:	68ab      	ldr	r3, [r5, #8]
    a380:	42a3      	cmp	r3, r4
    a382:	d103      	bne.n	a38c <z_impl_k_thread_suspend+0x5c>
}
    a384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    a388:	f002 bc9b 	b.w	ccc2 <z_reschedule_unlocked>
}
    a38c:	bd70      	pop	{r4, r5, r6, pc}
    a38e:	bf00      	nop
    a390:	20001f0c 	.word	0x20001f0c

0000a394 <k_sched_lock>:
	__asm__ volatile(
    a394:	f04f 0320 	mov.w	r3, #32
    a398:	f3ef 8111 	mrs	r1, BASEPRI
    a39c:	f383 8812 	msr	BASEPRI_MAX, r3
    a3a0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    a3a4:	4b04      	ldr	r3, [pc, #16]	; (a3b8 <k_sched_lock+0x24>)
    a3a6:	689a      	ldr	r2, [r3, #8]
    a3a8:	7bd3      	ldrb	r3, [r2, #15]
    a3aa:	3b01      	subs	r3, #1
    a3ac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    a3ae:	f381 8811 	msr	BASEPRI, r1
    a3b2:	f3bf 8f6f 	isb	sy
}
    a3b6:	4770      	bx	lr
    a3b8:	20001f0c 	.word	0x20001f0c

0000a3bc <k_sched_unlock>:
{
    a3bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    a3be:	f04f 0320 	mov.w	r3, #32
    a3c2:	f3ef 8411 	mrs	r4, BASEPRI
    a3c6:	f383 8812 	msr	BASEPRI_MAX, r3
    a3ca:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    a3ce:	4b08      	ldr	r3, [pc, #32]	; (a3f0 <k_sched_unlock+0x34>)
    a3d0:	689a      	ldr	r2, [r3, #8]
    a3d2:	7bd3      	ldrb	r3, [r2, #15]
    a3d4:	3301      	adds	r3, #1
    a3d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a3d8:	2000      	movs	r0, #0
    a3da:	f7ff fe29 	bl	a030 <update_cache>
	__asm__ volatile(
    a3de:	f384 8811 	msr	BASEPRI, r4
    a3e2:	f3bf 8f6f 	isb	sy
}
    a3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    a3ea:	f002 bc6a 	b.w	ccc2 <z_reschedule_unlocked>
    a3ee:	bf00      	nop
    a3f0:	20001f0c 	.word	0x20001f0c

0000a3f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    a3f4:	4b02      	ldr	r3, [pc, #8]	; (a400 <z_sched_init+0xc>)
    a3f6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    a3fa:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    a3fe:	4770      	bx	lr
    a400:	20001f0c 	.word	0x20001f0c

0000a404 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    a406:	f04f 0320 	mov.w	r3, #32
    a40a:	f3ef 8511 	mrs	r5, BASEPRI
    a40e:	f383 8812 	msr	BASEPRI_MAX, r3
    a412:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    a416:	4919      	ldr	r1, [pc, #100]	; (a47c <z_impl_k_yield+0x78>)
    a418:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a41a:	7b43      	ldrb	r3, [r0, #13]
    a41c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a420:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a422:	f002 fb75 	bl	cb10 <sys_dlist_remove>
	}
	queue_thread(_current);
    a426:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    a428:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    a42a:	4608      	mov	r0, r1
    a42c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a430:	735a      	strb	r2, [r3, #13]
    a432:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    a436:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a438:	4282      	cmp	r2, r0
    a43a:	bf08      	it	eq
    a43c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a43e:	b922      	cbnz	r2, a44a <z_impl_k_yield+0x46>
	node->prev = tail;
    a440:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    a444:	6023      	str	r3, [r4, #0]
	list->tail = node;
    a446:	620b      	str	r3, [r1, #32]
}
    a448:	e00c      	b.n	a464 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    a44a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    a44e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    a452:	42be      	cmp	r6, r7
    a454:	d00e      	beq.n	a474 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a456:	42b7      	cmp	r7, r6
    a458:	dd0c      	ble.n	a474 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    a45a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    a45c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    a460:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    a462:	6053      	str	r3, [r2, #4]
	update_cache(1);
    a464:	2001      	movs	r0, #1
    a466:	f7ff fde3 	bl	a030 <update_cache>
    a46a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    a46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a470:	f7fa bb5c 	b.w	4b2c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    a474:	42a2      	cmp	r2, r4
    a476:	d0e3      	beq.n	a440 <z_impl_k_yield+0x3c>
    a478:	6812      	ldr	r2, [r2, #0]
    a47a:	e7e0      	b.n	a43e <z_impl_k_yield+0x3a>
    a47c:	20001f0c 	.word	0x20001f0c

0000a480 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    a480:	ea50 0301 	orrs.w	r3, r0, r1
{
    a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a488:	4605      	mov	r5, r0
    a48a:	460e      	mov	r6, r1
	if (ticks == 0) {
    a48c:	d103      	bne.n	a496 <z_tick_sleep+0x16>
	z_impl_k_yield();
    a48e:	f7ff ffb9 	bl	a404 <z_impl_k_yield>
		k_yield();
		return 0;
    a492:	2000      	movs	r0, #0
    a494:	e02c      	b.n	a4f0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    a496:	1c83      	adds	r3, r0, #2
    a498:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    a49c:	db2a      	blt.n	a4f4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a49e:	f002 fc73 	bl	cd88 <sys_clock_tick_get_32>
    a4a2:	182c      	adds	r4, r5, r0
    a4a4:	f04f 0320 	mov.w	r3, #32
    a4a8:	f3ef 8811 	mrs	r8, BASEPRI
    a4ac:	f383 8812 	msr	BASEPRI_MAX, r3
    a4b0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    a4b4:	4f11      	ldr	r7, [pc, #68]	; (a4fc <z_tick_sleep+0x7c>)
    a4b6:	4b12      	ldr	r3, [pc, #72]	; (a500 <z_tick_sleep+0x80>)
    a4b8:	68b8      	ldr	r0, [r7, #8]
    a4ba:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    a4bc:	f7ff fe44 	bl	a148 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    a4c0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a4c2:	4910      	ldr	r1, [pc, #64]	; (a504 <z_tick_sleep+0x84>)
    a4c4:	462a      	mov	r2, r5
    a4c6:	4633      	mov	r3, r6
    a4c8:	3018      	adds	r0, #24
    a4ca:	f000 f929 	bl	a720 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a4ce:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a4d0:	7b53      	ldrb	r3, [r2, #13]
    a4d2:	f043 0310 	orr.w	r3, r3, #16
    a4d6:	7353      	strb	r3, [r2, #13]
    a4d8:	4640      	mov	r0, r8
    a4da:	f7fa fb27 	bl	4b2c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a4de:	f002 fc53 	bl	cd88 <sys_clock_tick_get_32>
    a4e2:	1a20      	subs	r0, r4, r0
    a4e4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a4e8:	2801      	cmp	r0, #1
    a4ea:	f173 0300 	sbcs.w	r3, r3, #0
    a4ee:	dbd0      	blt.n	a492 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    a4f4:	f06f 0401 	mvn.w	r4, #1
    a4f8:	1a24      	subs	r4, r4, r0
    a4fa:	e7d3      	b.n	a4a4 <z_tick_sleep+0x24>
    a4fc:	20001f0c 	.word	0x20001f0c
    a500:	20001f38 	.word	0x20001f38
    a504:	0000cc0d 	.word	0x0000cc0d

0000a508 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a508:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a50c:	bf08      	it	eq
    a50e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a512:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a514:	d106      	bne.n	a524 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    a516:	4b08      	ldr	r3, [pc, #32]	; (a538 <z_impl_k_sleep+0x30>)
    a518:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a51a:	f7ff ff09 	bl	a330 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    a51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    a522:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    a524:	f7ff ffac 	bl	a480 <z_tick_sleep>
    a528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a52c:	fb80 0303 	smull	r0, r3, r0, r3
    a530:	0bc0      	lsrs	r0, r0, #15
    a532:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    a536:	e7f4      	b.n	a522 <z_impl_k_sleep+0x1a>
    a538:	20001f0c 	.word	0x20001f0c

0000a53c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    a53c:	b538      	push	{r3, r4, r5, lr}
    a53e:	4c0a      	ldr	r4, [pc, #40]	; (a568 <z_impl_k_usleep+0x2c>)
    a540:	4a0a      	ldr	r2, [pc, #40]	; (a56c <z_impl_k_usleep+0x30>)
    a542:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    a546:	2100      	movs	r1, #0
    a548:	fbc0 4105 	smlal	r4, r1, r0, r5
    a54c:	2300      	movs	r3, #0
    a54e:	4620      	mov	r0, r4
    a550:	f7f6 fdd6 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    a554:	17c1      	asrs	r1, r0, #31
    a556:	f7ff ff93 	bl	a480 <z_tick_sleep>
    a55a:	4b04      	ldr	r3, [pc, #16]	; (a56c <z_impl_k_usleep+0x30>)
    a55c:	fb80 0303 	smull	r0, r3, r0, r3
    a560:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    a562:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    a566:	bd38      	pop	{r3, r4, r5, pc}
    a568:	000f423f 	.word	0x000f423f
    a56c:	000f4240 	.word	0x000f4240

0000a570 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    a570:	4b01      	ldr	r3, [pc, #4]	; (a578 <z_impl_z_current_get+0x8>)
    a572:	6898      	ldr	r0, [r3, #8]
    a574:	4770      	bx	lr
    a576:	bf00      	nop
    a578:	20001f0c 	.word	0x20001f0c

0000a57c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a580:	4604      	mov	r4, r0
    a582:	f04f 0320 	mov.w	r3, #32
    a586:	f3ef 8611 	mrs	r6, BASEPRI
    a58a:	f383 8812 	msr	BASEPRI_MAX, r3
    a58e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    a592:	7b03      	ldrb	r3, [r0, #12]
    a594:	07d9      	lsls	r1, r3, #31
    a596:	d50b      	bpl.n	a5b0 <z_thread_abort+0x34>
	__asm__ volatile(
    a598:	f386 8811 	msr	BASEPRI, r6
    a59c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    a5a0:	4040      	eors	r0, r0
    a5a2:	f380 8811 	msr	BASEPRI, r0
    a5a6:	f04f 0004 	mov.w	r0, #4
    a5aa:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a5b0:	7b43      	ldrb	r3, [r0, #13]
    a5b2:	071a      	lsls	r2, r3, #28
    a5b4:	d504      	bpl.n	a5c0 <z_thread_abort+0x44>
    a5b6:	f386 8811 	msr	BASEPRI, r6
    a5ba:	f3bf 8f6f 	isb	sy
    a5be:	e7f5      	b.n	a5ac <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a5c0:	f023 0220 	bic.w	r2, r3, #32
    a5c4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    a5c8:	09d2      	lsrs	r2, r2, #7
    a5ca:	d120      	bne.n	a60e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a5cc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    a5ce:	68a3      	ldr	r3, [r4, #8]
    a5d0:	b113      	cbz	r3, a5d8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    a5d2:	4620      	mov	r0, r4
    a5d4:	f002 faa4 	bl	cb20 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    a5d8:	f104 0018 	add.w	r0, r4, #24
    a5dc:	f002 fbae 	bl	cd3c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a5e0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    a5e4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    a5e8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a5ea:	42bd      	cmp	r5, r7
    a5ec:	d000      	beq.n	a5f0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a5ee:	b9b5      	cbnz	r5, a61e <z_thread_abort+0xa2>
		update_cache(1);
    a5f0:	2001      	movs	r0, #1
    a5f2:	f7ff fd1d 	bl	a030 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    a5f6:	4b10      	ldr	r3, [pc, #64]	; (a638 <z_thread_abort+0xbc>)
    a5f8:	689b      	ldr	r3, [r3, #8]
    a5fa:	42a3      	cmp	r3, r4
    a5fc:	d1db      	bne.n	a5b6 <z_thread_abort+0x3a>
    a5fe:	f3ef 8305 	mrs	r3, IPSR
    a602:	2b00      	cmp	r3, #0
    a604:	d1d7      	bne.n	a5b6 <z_thread_abort+0x3a>
    a606:	4630      	mov	r0, r6
    a608:	f7fa fa90 	bl	4b2c <arch_swap>
	return ret;
    a60c:	e7d3      	b.n	a5b6 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a60e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    a612:	f043 0308 	orr.w	r3, r3, #8
    a616:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a618:	f002 fa7a 	bl	cb10 <sys_dlist_remove>
}
    a61c:	e7d7      	b.n	a5ce <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    a61e:	4628      	mov	r0, r5
    a620:	f002 fa7e 	bl	cb20 <unpend_thread_no_timeout>
    a624:	f105 0018 	add.w	r0, r5, #24
    a628:	f002 fb88 	bl	cd3c <z_abort_timeout>
    a62c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    a630:	4628      	mov	r0, r5
    a632:	f7ff fd55 	bl	a0e0 <ready_thread>
    a636:	e7d7      	b.n	a5e8 <z_thread_abort+0x6c>
    a638:	20001f0c 	.word	0x20001f0c

0000a63c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    a63c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a63e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    a642:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a644:	e9cd 6700 	strd	r6, r7, [sp]
    a648:	f7ff fdde 	bl	a208 <z_pend_curr>

	if (data != NULL) {
    a64c:	b11c      	cbz	r4, a656 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    a64e:	4b03      	ldr	r3, [pc, #12]	; (a65c <z_sched_wait+0x20>)
    a650:	689b      	ldr	r3, [r3, #8]
    a652:	695b      	ldr	r3, [r3, #20]
    a654:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    a656:	b002      	add	sp, #8
    a658:	bdd0      	pop	{r4, r6, r7, pc}
    a65a:	bf00      	nop
    a65c:	20001f0c 	.word	0x20001f0c

0000a660 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a660:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a662:	4806      	ldr	r0, [pc, #24]	; (a67c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a664:	4a06      	ldr	r2, [pc, #24]	; (a680 <z_data_copy+0x20>)
    a666:	4907      	ldr	r1, [pc, #28]	; (a684 <z_data_copy+0x24>)
    a668:	1a12      	subs	r2, r2, r0
    a66a:	f002 f8ef 	bl	c84c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a66e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a672:	4a05      	ldr	r2, [pc, #20]	; (a688 <z_data_copy+0x28>)
    a674:	4905      	ldr	r1, [pc, #20]	; (a68c <z_data_copy+0x2c>)
    a676:	4806      	ldr	r0, [pc, #24]	; (a690 <z_data_copy+0x30>)
    a678:	f002 b8e8 	b.w	c84c <z_early_memcpy>
    a67c:	20000000 	.word	0x20000000
    a680:	20000408 	.word	0x20000408
    a684:	0000e5b0 	.word	0x0000e5b0
    a688:	00000000 	.word	0x00000000
    a68c:	0000e5b0 	.word	0x0000e5b0
    a690:	20000000 	.word	0x20000000

0000a694 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a694:	4b03      	ldr	r3, [pc, #12]	; (a6a4 <elapsed+0x10>)
    a696:	681b      	ldr	r3, [r3, #0]
    a698:	b90b      	cbnz	r3, a69e <elapsed+0xa>
    a69a:	f7fc be7f 	b.w	739c <sys_clock_elapsed>
}
    a69e:	2000      	movs	r0, #0
    a6a0:	4770      	bx	lr
    a6a2:	bf00      	nop
    a6a4:	20001f44 	.word	0x20001f44

0000a6a8 <next_timeout>:

static int32_t next_timeout(void)
{
    a6a8:	b510      	push	{r4, lr}
	return list->head == list;
    a6aa:	4b0e      	ldr	r3, [pc, #56]	; (a6e4 <next_timeout+0x3c>)
    a6ac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6ae:	429c      	cmp	r4, r3
    a6b0:	d104      	bne.n	a6bc <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    a6b2:	f7ff ffef 	bl	a694 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    a6b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    a6ba:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    a6bc:	f7ff ffea 	bl	a694 <elapsed>
	if ((to == NULL) ||
    a6c0:	2c00      	cmp	r4, #0
    a6c2:	d0f8      	beq.n	a6b6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a6c4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    a6c8:	1a1b      	subs	r3, r3, r0
    a6ca:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    a6ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a6d2:	f172 0100 	sbcs.w	r1, r2, #0
    a6d6:	daee      	bge.n	a6b6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    a6d8:	2a00      	cmp	r2, #0
    a6da:	bfac      	ite	ge
    a6dc:	4618      	movge	r0, r3
    a6de:	2000      	movlt	r0, #0
	return ret;
    a6e0:	e7eb      	b.n	a6ba <next_timeout+0x12>
    a6e2:	bf00      	nop
    a6e4:	200001dc 	.word	0x200001dc

0000a6e8 <remove_timeout>:
{
    a6e8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a6ea:	b170      	cbz	r0, a70a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    a6ec:	4b0b      	ldr	r3, [pc, #44]	; (a71c <remove_timeout+0x34>)
    a6ee:	685b      	ldr	r3, [r3, #4]
    a6f0:	4298      	cmp	r0, r3
    a6f2:	d00a      	beq.n	a70a <remove_timeout+0x22>
    a6f4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    a6f6:	b143      	cbz	r3, a70a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    a6f8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    a6fc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    a700:	1912      	adds	r2, r2, r4
    a702:	eb41 0105 	adc.w	r1, r1, r5
    a706:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    a70a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    a70e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a710:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a712:	2300      	movs	r3, #0
	node->prev = NULL;
    a714:	e9c0 3300 	strd	r3, r3, [r0]
}
    a718:	bd30      	pop	{r4, r5, pc}
    a71a:	bf00      	nop
    a71c:	200001dc 	.word	0x200001dc

0000a720 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a724:	bf08      	it	eq
    a726:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    a72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a72c:	4604      	mov	r4, r0
    a72e:	461d      	mov	r5, r3
    a730:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a732:	d05c      	beq.n	a7ee <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    a734:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    a736:	f04f 0320 	mov.w	r3, #32
    a73a:	f3ef 8711 	mrs	r7, BASEPRI
    a73e:	f383 8812 	msr	BASEPRI_MAX, r3
    a742:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    a746:	3201      	adds	r2, #1
    a748:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    a74c:	da24      	bge.n	a798 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    a74e:	492d      	ldr	r1, [pc, #180]	; (a804 <z_add_timeout+0xe4>)
    a750:	e9d1 2000 	ldrd	r2, r0, [r1]
    a754:	f06f 0301 	mvn.w	r3, #1
    a758:	1a9b      	subs	r3, r3, r2
    a75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a75e:	eb62 0000 	sbc.w	r0, r2, r0
    a762:	1b9e      	subs	r6, r3, r6
    a764:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    a768:	2e01      	cmp	r6, #1
    a76a:	f170 0300 	sbcs.w	r3, r0, #0
    a76e:	da01      	bge.n	a774 <z_add_timeout+0x54>
    a770:	2601      	movs	r6, #1
    a772:	2000      	movs	r0, #0
    a774:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    a778:	4e23      	ldr	r6, [pc, #140]	; (a808 <z_add_timeout+0xe8>)
    a77a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    a77e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a780:	45b4      	cmp	ip, r6
    a782:	bf08      	it	eq
    a784:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    a788:	f1bc 0f00 	cmp.w	ip, #0
    a78c:	d10d      	bne.n	a7aa <z_add_timeout+0x8a>
	node->prev = tail;
    a78e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    a792:	602c      	str	r4, [r5, #0]
	list->tail = node;
    a794:	6074      	str	r4, [r6, #4]
}
    a796:	e01c      	b.n	a7d2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    a798:	f7ff ff7c 	bl	a694 <elapsed>
    a79c:	3601      	adds	r6, #1
    a79e:	f145 0500 	adc.w	r5, r5, #0
    a7a2:	1836      	adds	r6, r6, r0
    a7a4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    a7a8:	e7e4      	b.n	a774 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    a7aa:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    a7ae:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    a7b2:	4293      	cmp	r3, r2
    a7b4:	eb71 0e00 	sbcs.w	lr, r1, r0
    a7b8:	da1a      	bge.n	a7f0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    a7ba:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    a7bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    a7c0:	eb60 0001 	sbc.w	r0, r0, r1
    a7c4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    a7c8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    a7cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a7ce:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    a7d2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a7d4:	42b3      	cmp	r3, r6
    a7d6:	d006      	beq.n	a7e6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    a7d8:	429c      	cmp	r4, r3
    a7da:	d104      	bne.n	a7e6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    a7dc:	f7ff ff64 	bl	a6a8 <next_timeout>
    a7e0:	2100      	movs	r1, #0
    a7e2:	f7fc fda9 	bl	7338 <sys_clock_set_timeout>
	__asm__ volatile(
    a7e6:	f387 8811 	msr	BASEPRI, r7
    a7ea:	f3bf 8f6f 	isb	sy
		}
	}
}
    a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    a7f0:	1a9b      	subs	r3, r3, r2
    a7f2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    a7f6:	45ac      	cmp	ip, r5
    a7f8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    a7fc:	d0c7      	beq.n	a78e <z_add_timeout+0x6e>
    a7fe:	f8dc c000 	ldr.w	ip, [ip]
    a802:	e7c1      	b.n	a788 <z_add_timeout+0x68>
    a804:	20000b40 	.word	0x20000b40
    a808:	200001dc 	.word	0x200001dc

0000a80c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    a80c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    a810:	f04f 0320 	mov.w	r3, #32
    a814:	f3ef 8c11 	mrs	ip, BASEPRI
    a818:	f383 8812 	msr	BASEPRI_MAX, r3
    a81c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a820:	f8df a0b0 	ldr.w	sl, [pc, #176]	; a8d4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    a824:	f8df 90b0 	ldr.w	r9, [pc, #176]	; a8d8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    a828:	4f2c      	ldr	r7, [pc, #176]	; (a8dc <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    a82a:	f8c9 0000 	str.w	r0, [r9]
    a82e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    a832:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a834:	4550      	cmp	r0, sl
    a836:	bf08      	it	eq
    a838:	2000      	moveq	r0, #0
    a83a:	2500      	movs	r5, #0
		curr_tick += dt;
    a83c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    a840:	f8d9 3000 	ldr.w	r3, [r9]
    a844:	46e0      	mov	r8, ip
    a846:	b380      	cbz	r0, a8aa <sys_clock_announce+0x9e>
    a848:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    a84c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    a850:	42b3      	cmp	r3, r6
    a852:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    a856:	da05      	bge.n	a864 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    a858:	1af6      	subs	r6, r6, r3
    a85a:	eb6c 040e 	sbc.w	r4, ip, lr
    a85e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    a862:	e022      	b.n	a8aa <sys_clock_announce+0x9e>
		curr_tick += dt;
    a864:	18b2      	adds	r2, r6, r2
    a866:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    a86a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    a86e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    a872:	f7ff ff39 	bl	a6e8 <remove_timeout>
	__asm__ volatile(
    a876:	f388 8811 	msr	BASEPRI, r8
    a87a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    a87e:	6883      	ldr	r3, [r0, #8]
    a880:	4798      	blx	r3
	__asm__ volatile(
    a882:	f04f 0320 	mov.w	r3, #32
    a886:	f3ef 8811 	mrs	r8, BASEPRI
    a88a:	f383 8812 	msr	BASEPRI_MAX, r3
    a88e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    a892:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    a896:	f8da 0000 	ldr.w	r0, [sl]
    a89a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a89c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    a89e:	46c4      	mov	ip, r8
    a8a0:	f8c9 3000 	str.w	r3, [r9]
    a8a4:	d1ca      	bne.n	a83c <sys_clock_announce+0x30>
		curr_tick += dt;
    a8a6:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    a8aa:	189a      	adds	r2, r3, r2
    a8ac:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    a8b0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    a8b2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    a8b6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    a8ba:	f7ff fef5 	bl	a6a8 <next_timeout>
    a8be:	4621      	mov	r1, r4
    a8c0:	f7fc fd3a 	bl	7338 <sys_clock_set_timeout>
	__asm__ volatile(
    a8c4:	f388 8811 	msr	BASEPRI, r8
    a8c8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    a8cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    a8d0:	f7ff bc6a 	b.w	a1a8 <z_time_slice>
    a8d4:	200001dc 	.word	0x200001dc
    a8d8:	20001f44 	.word	0x20001f44
    a8dc:	20000b40 	.word	0x20000b40

0000a8e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    a8e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    a8e2:	f04f 0320 	mov.w	r3, #32
    a8e6:	f3ef 8411 	mrs	r4, BASEPRI
    a8ea:	f383 8812 	msr	BASEPRI_MAX, r3
    a8ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    a8f2:	f7ff fecf 	bl	a694 <elapsed>
    a8f6:	4a06      	ldr	r2, [pc, #24]	; (a910 <sys_clock_tick_get+0x30>)
    a8f8:	4603      	mov	r3, r0
    a8fa:	e9d2 0100 	ldrd	r0, r1, [r2]
    a8fe:	1818      	adds	r0, r3, r0
    a900:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    a904:	f384 8811 	msr	BASEPRI, r4
    a908:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    a90c:	bd10      	pop	{r4, pc}
    a90e:	bf00      	nop
    a910:	20000b40 	.word	0x20000b40

0000a914 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a916:	4604      	mov	r4, r0
	__asm__ volatile(
    a918:	f04f 0320 	mov.w	r3, #32
    a91c:	f3ef 8711 	mrs	r7, BASEPRI
    a920:	f383 8812 	msr	BASEPRI_MAX, r3
    a924:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    a928:	6802      	ldr	r2, [r0, #0]
    a92a:	b122      	cbz	r2, a936 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    a92c:	f387 8811 	msr	BASEPRI, r7
    a930:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    a934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    a936:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    a93a:	1c58      	adds	r0, r3, #1
    a93c:	f146 0100 	adc.w	r1, r6, #0
    a940:	2802      	cmp	r0, #2
    a942:	f171 0100 	sbcs.w	r1, r1, #0
    a946:	d327      	bcc.n	a998 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    a948:	2b01      	cmp	r3, #1
    a94a:	f176 0100 	sbcs.w	r1, r6, #0
    a94e:	bfbc      	itt	lt
    a950:	2301      	movlt	r3, #1
    a952:	4616      	movlt	r6, r2
    a954:	1e5d      	subs	r5, r3, #1
    a956:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    a95a:	f002 fa19 	bl	cd90 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    a95e:	3001      	adds	r0, #1
    a960:	f141 0100 	adc.w	r1, r1, #0
    a964:	1940      	adds	r0, r0, r5
    a966:	eb46 0101 	adc.w	r1, r6, r1
    a96a:	2801      	cmp	r0, #1
    a96c:	f171 0100 	sbcs.w	r1, r1, #0
    a970:	db3a      	blt.n	a9e8 <z_timer_expiration_handler+0xd4>
    a972:	f002 fa0d 	bl	cd90 <z_impl_k_uptime_ticks>
    a976:	3001      	adds	r0, #1
    a978:	f141 0100 	adc.w	r1, r1, #0
    a97c:	f06f 0201 	mvn.w	r2, #1
    a980:	1940      	adds	r0, r0, r5
    a982:	eb46 0301 	adc.w	r3, r6, r1
    a986:	1a12      	subs	r2, r2, r0
    a988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a98c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    a990:	4918      	ldr	r1, [pc, #96]	; (a9f4 <z_timer_expiration_handler+0xe0>)
    a992:	4620      	mov	r0, r4
    a994:	f7ff fec4 	bl	a720 <z_add_timeout>
	timer->status += 1U;
    a998:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a99a:	3301      	adds	r3, #1
    a99c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    a99e:	6a23      	ldr	r3, [r4, #32]
    a9a0:	b173      	cbz	r3, a9c0 <z_timer_expiration_handler+0xac>
    a9a2:	f387 8811 	msr	BASEPRI, r7
    a9a6:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    a9aa:	6a23      	ldr	r3, [r4, #32]
    a9ac:	4620      	mov	r0, r4
    a9ae:	4798      	blx	r3
	__asm__ volatile(
    a9b0:	f04f 0320 	mov.w	r3, #32
    a9b4:	f3ef 8711 	mrs	r7, BASEPRI
    a9b8:	f383 8812 	msr	BASEPRI_MAX, r3
    a9bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    a9c0:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a9c4:	42a5      	cmp	r5, r4
    a9c6:	d0b1      	beq.n	a92c <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    a9c8:	2d00      	cmp	r5, #0
    a9ca:	d0af      	beq.n	a92c <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    a9cc:	4628      	mov	r0, r5
    a9ce:	f002 f8e9 	bl	cba4 <z_unpend_thread_no_timeout>
    a9d2:	2300      	movs	r3, #0
    a9d4:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    a9d6:	f387 8811 	msr	BASEPRI, r7
    a9da:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    a9de:	4628      	mov	r0, r5
}
    a9e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    a9e4:	f002 b8ce 	b.w	cb84 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    a9e8:	f06f 0201 	mvn.w	r2, #1
    a9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9f0:	e7ce      	b.n	a990 <z_timer_expiration_handler+0x7c>
    a9f2:	bf00      	nop
    a9f4:	0000a915 	.word	0x0000a915

0000a9f8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    a9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    a9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    aa00:	bf08      	it	eq
    aa02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    aa06:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    aa0a:	4605      	mov	r5, r0
    aa0c:	461c      	mov	r4, r3
    aa0e:	4691      	mov	r9, r2
    aa10:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    aa12:	d01c      	beq.n	aa4e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    aa14:	1c53      	adds	r3, r2, #1
    aa16:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    aa1a:	db09      	blt.n	aa30 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    aa1c:	2a01      	cmp	r2, #1
    aa1e:	f174 0300 	sbcs.w	r3, r4, #0
    aa22:	bfbc      	itt	lt
    aa24:	2201      	movlt	r2, #1
    aa26:	2400      	movlt	r4, #0
    aa28:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    aa2c:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    aa30:	4628      	mov	r0, r5
    aa32:	f002 f983 	bl	cd3c <z_abort_timeout>
	timer->period = period;
    aa36:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    aa3a:	2300      	movs	r3, #0
    aa3c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    aa3e:	464a      	mov	r2, r9
    aa40:	4643      	mov	r3, r8
    aa42:	4628      	mov	r0, r5
    aa44:	4903      	ldr	r1, [pc, #12]	; (aa54 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    aa46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    aa4a:	f7ff be69 	b.w	a720 <z_add_timeout>
}
    aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa52:	bf00      	nop
    aa54:	0000a915 	.word	0x0000a915

0000aa58 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    aa58:	b573      	push	{r0, r1, r4, r5, r6, lr}
    aa5a:	4606      	mov	r6, r0
    aa5c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    aa5e:	f001 ff44 	bl	c8ea <k_is_in_isr>
    aa62:	b978      	cbnz	r0, aa84 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    aa64:	4b0b      	ldr	r3, [pc, #44]	; (aa94 <z_thread_aligned_alloc+0x3c>)
    aa66:	689b      	ldr	r3, [r3, #8]
    aa68:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    aa6a:	b17c      	cbz	r4, aa8c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    aa6c:	1d2a      	adds	r2, r5, #4
    aa6e:	d209      	bcs.n	aa84 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    aa70:	2000      	movs	r0, #0
    aa72:	2100      	movs	r1, #0
    aa74:	e9cd 0100 	strd	r0, r1, [sp]
    aa78:	f046 0104 	orr.w	r1, r6, #4
    aa7c:	4620      	mov	r0, r4
    aa7e:	f002 f9e7 	bl	ce50 <k_heap_aligned_alloc>
	if (mem == NULL) {
    aa82:	b908      	cbnz	r0, aa88 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    aa84:	2400      	movs	r4, #0
	}

	return ret;
    aa86:	e001      	b.n	aa8c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    aa88:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    aa8a:	1d04      	adds	r4, r0, #4
}
    aa8c:	4620      	mov	r0, r4
    aa8e:	b002      	add	sp, #8
    aa90:	bd70      	pop	{r4, r5, r6, pc}
    aa92:	bf00      	nop
    aa94:	20001f0c 	.word	0x20001f0c

0000aa98 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    aa98:	4801      	ldr	r0, [pc, #4]	; (aaa0 <boot_banner+0x8>)
    aa9a:	f000 ba8a 	b.w	afb2 <printk>
    aa9e:	bf00      	nop
    aaa0:	0000e576 	.word	0x0000e576

0000aaa4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    aaa4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    aaa6:	4c06      	ldr	r4, [pc, #24]	; (aac0 <statics_init+0x1c>)
    aaa8:	4d06      	ldr	r5, [pc, #24]	; (aac4 <statics_init+0x20>)
    aaaa:	42ac      	cmp	r4, r5
    aaac:	d301      	bcc.n	aab2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    aaae:	2000      	movs	r0, #0
    aab0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    aab2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    aab6:	4620      	mov	r0, r4
    aab8:	f002 f9c2 	bl	ce40 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    aabc:	3414      	adds	r4, #20
    aabe:	e7f4      	b.n	aaaa <statics_init+0x6>
    aac0:	200002ac 	.word	0x200002ac
    aac4:	200002ac 	.word	0x200002ac

0000aac8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    aac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    aaca:	4b09      	ldr	r3, [pc, #36]	; (aaf0 <k_sys_work_q_init+0x28>)
    aacc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    aace:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    aad0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    aad2:	9300      	str	r3, [sp, #0]
    aad4:	4907      	ldr	r1, [pc, #28]	; (aaf4 <k_sys_work_q_init+0x2c>)
    aad6:	4808      	ldr	r0, [pc, #32]	; (aaf8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    aad8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    aadc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    aae4:	f7ff f9ec 	bl	9ec0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    aae8:	4620      	mov	r0, r4
    aaea:	b004      	add	sp, #16
    aaec:	bd10      	pop	{r4, pc}
    aaee:	bf00      	nop
    aaf0:	0000e5a4 	.word	0x0000e5a4
    aaf4:	20003b40 	.word	0x20003b40
    aaf8:	20000b48 	.word	0x20000b48

0000aafc <nrf_cc3xx_platform_init_no_rng>:
    aafc:	b510      	push	{r4, lr}
    aafe:	4c0a      	ldr	r4, [pc, #40]	; (ab28 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ab00:	6823      	ldr	r3, [r4, #0]
    ab02:	b11b      	cbz	r3, ab0c <nrf_cc3xx_platform_init_no_rng+0x10>
    ab04:	2301      	movs	r3, #1
    ab06:	6023      	str	r3, [r4, #0]
    ab08:	2000      	movs	r0, #0
    ab0a:	bd10      	pop	{r4, pc}
    ab0c:	f000 f8ea 	bl	ace4 <CC_LibInitNoRng>
    ab10:	2800      	cmp	r0, #0
    ab12:	d0f7      	beq.n	ab04 <nrf_cc3xx_platform_init_no_rng+0x8>
    ab14:	3801      	subs	r0, #1
    ab16:	2806      	cmp	r0, #6
    ab18:	d803      	bhi.n	ab22 <nrf_cc3xx_platform_init_no_rng+0x26>
    ab1a:	4b04      	ldr	r3, [pc, #16]	; (ab2c <nrf_cc3xx_platform_init_no_rng+0x30>)
    ab1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ab20:	bd10      	pop	{r4, pc}
    ab22:	4803      	ldr	r0, [pc, #12]	; (ab30 <nrf_cc3xx_platform_init_no_rng+0x34>)
    ab24:	bd10      	pop	{r4, pc}
    ab26:	bf00      	nop
    ab28:	20001f48 	.word	0x20001f48
    ab2c:	0000d5d0 	.word	0x0000d5d0
    ab30:	ffff8ffe 	.word	0xffff8ffe

0000ab34 <nrf_cc3xx_platform_abort>:
    ab34:	f3bf 8f4f 	dsb	sy
    ab38:	4905      	ldr	r1, [pc, #20]	; (ab50 <nrf_cc3xx_platform_abort+0x1c>)
    ab3a:	4b06      	ldr	r3, [pc, #24]	; (ab54 <nrf_cc3xx_platform_abort+0x20>)
    ab3c:	68ca      	ldr	r2, [r1, #12]
    ab3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ab42:	4313      	orrs	r3, r2
    ab44:	60cb      	str	r3, [r1, #12]
    ab46:	f3bf 8f4f 	dsb	sy
    ab4a:	bf00      	nop
    ab4c:	e7fd      	b.n	ab4a <nrf_cc3xx_platform_abort+0x16>
    ab4e:	bf00      	nop
    ab50:	e000ed00 	.word	0xe000ed00
    ab54:	05fa0004 	.word	0x05fa0004

0000ab58 <CC_PalAbort>:
    ab58:	b410      	push	{r4}
    ab5a:	4b09      	ldr	r3, [pc, #36]	; (ab80 <CC_PalAbort+0x28>)
    ab5c:	4909      	ldr	r1, [pc, #36]	; (ab84 <CC_PalAbort+0x2c>)
    ab5e:	4c0a      	ldr	r4, [pc, #40]	; (ab88 <CC_PalAbort+0x30>)
    ab60:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    ab64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ab68:	6849      	ldr	r1, [r1, #4]
    ab6a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    ab6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    ab72:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    ab76:	2300      	movs	r3, #0
    ab78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    ab7c:	bc10      	pop	{r4}
    ab7e:	4708      	bx	r1
    ab80:	5002b000 	.word	0x5002b000
    ab84:	200001e4 	.word	0x200001e4
    ab88:	5002a000 	.word	0x5002a000

0000ab8c <nrf_cc3xx_platform_set_abort>:
    ab8c:	e9d0 1200 	ldrd	r1, r2, [r0]
    ab90:	4b01      	ldr	r3, [pc, #4]	; (ab98 <nrf_cc3xx_platform_set_abort+0xc>)
    ab92:	e9c3 1200 	strd	r1, r2, [r3]
    ab96:	4770      	bx	lr
    ab98:	200001e4 	.word	0x200001e4

0000ab9c <mutex_free>:
    ab9c:	b510      	push	{r4, lr}
    ab9e:	4604      	mov	r4, r0
    aba0:	b150      	cbz	r0, abb8 <mutex_free+0x1c>
    aba2:	6863      	ldr	r3, [r4, #4]
    aba4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    aba8:	d005      	beq.n	abb6 <mutex_free+0x1a>
    abaa:	4a06      	ldr	r2, [pc, #24]	; (abc4 <mutex_free+0x28>)
    abac:	4293      	cmp	r3, r2
    abae:	d002      	beq.n	abb6 <mutex_free+0x1a>
    abb0:	2300      	movs	r3, #0
    abb2:	6023      	str	r3, [r4, #0]
    abb4:	6062      	str	r2, [r4, #4]
    abb6:	bd10      	pop	{r4, pc}
    abb8:	4b03      	ldr	r3, [pc, #12]	; (abc8 <mutex_free+0x2c>)
    abba:	4804      	ldr	r0, [pc, #16]	; (abcc <mutex_free+0x30>)
    abbc:	685b      	ldr	r3, [r3, #4]
    abbe:	4798      	blx	r3
    abc0:	e7ef      	b.n	aba2 <mutex_free+0x6>
    abc2:	bf00      	nop
    abc4:	a95c5f2c 	.word	0xa95c5f2c
    abc8:	200001e4 	.word	0x200001e4
    abcc:	0000d5ec 	.word	0x0000d5ec

0000abd0 <mutex_lock>:
    abd0:	b1c8      	cbz	r0, ac06 <mutex_lock+0x36>
    abd2:	6843      	ldr	r3, [r0, #4]
    abd4:	4a0d      	ldr	r2, [pc, #52]	; (ac0c <mutex_lock+0x3c>)
    abd6:	4293      	cmp	r3, r2
    abd8:	d013      	beq.n	ac02 <mutex_lock+0x32>
    abda:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    abde:	d00e      	beq.n	abfe <mutex_lock+0x2e>
    abe0:	2301      	movs	r3, #1
    abe2:	e850 2f00 	ldrex	r2, [r0]
    abe6:	4619      	mov	r1, r3
    abe8:	e840 1c00 	strex	ip, r1, [r0]
    abec:	f09c 0f00 	teq	ip, #0
    abf0:	d1f7      	bne.n	abe2 <mutex_lock+0x12>
    abf2:	2a01      	cmp	r2, #1
    abf4:	d0f5      	beq.n	abe2 <mutex_lock+0x12>
    abf6:	f3bf 8f5f 	dmb	sy
    abfa:	2000      	movs	r0, #0
    abfc:	4770      	bx	lr
    abfe:	4804      	ldr	r0, [pc, #16]	; (ac10 <mutex_lock+0x40>)
    ac00:	4770      	bx	lr
    ac02:	4804      	ldr	r0, [pc, #16]	; (ac14 <mutex_lock+0x44>)
    ac04:	4770      	bx	lr
    ac06:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ac0a:	4770      	bx	lr
    ac0c:	a95c5f2c 	.word	0xa95c5f2c
    ac10:	ffff8fe9 	.word	0xffff8fe9
    ac14:	ffff8fea 	.word	0xffff8fea

0000ac18 <mutex_unlock>:
    ac18:	b180      	cbz	r0, ac3c <mutex_unlock+0x24>
    ac1a:	6843      	ldr	r3, [r0, #4]
    ac1c:	4a09      	ldr	r2, [pc, #36]	; (ac44 <mutex_unlock+0x2c>)
    ac1e:	4293      	cmp	r3, r2
    ac20:	d00a      	beq.n	ac38 <mutex_unlock+0x20>
    ac22:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    ac26:	d005      	beq.n	ac34 <mutex_unlock+0x1c>
    ac28:	f3bf 8f5f 	dmb	sy
    ac2c:	2300      	movs	r3, #0
    ac2e:	6003      	str	r3, [r0, #0]
    ac30:	4618      	mov	r0, r3
    ac32:	4770      	bx	lr
    ac34:	4804      	ldr	r0, [pc, #16]	; (ac48 <mutex_unlock+0x30>)
    ac36:	4770      	bx	lr
    ac38:	4804      	ldr	r0, [pc, #16]	; (ac4c <mutex_unlock+0x34>)
    ac3a:	4770      	bx	lr
    ac3c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ac40:	4770      	bx	lr
    ac42:	bf00      	nop
    ac44:	a95c5f2c 	.word	0xa95c5f2c
    ac48:	ffff8fe9 	.word	0xffff8fe9
    ac4c:	ffff8fea 	.word	0xffff8fea

0000ac50 <mutex_init>:
    ac50:	b510      	push	{r4, lr}
    ac52:	4604      	mov	r4, r0
    ac54:	b120      	cbz	r0, ac60 <mutex_init+0x10>
    ac56:	4b04      	ldr	r3, [pc, #16]	; (ac68 <mutex_init+0x18>)
    ac58:	6063      	str	r3, [r4, #4]
    ac5a:	2200      	movs	r2, #0
    ac5c:	6022      	str	r2, [r4, #0]
    ac5e:	bd10      	pop	{r4, pc}
    ac60:	4802      	ldr	r0, [pc, #8]	; (ac6c <mutex_init+0x1c>)
    ac62:	f7ff ff79 	bl	ab58 <CC_PalAbort>
    ac66:	e7f6      	b.n	ac56 <mutex_init+0x6>
    ac68:	3a00003a 	.word	0x3a00003a
    ac6c:	0000d614 	.word	0x0000d614

0000ac70 <nrf_cc3xx_platform_set_mutexes>:
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	e9d0 2300 	ldrd	r2, r3, [r0]
    ac76:	4c17      	ldr	r4, [pc, #92]	; (acd4 <nrf_cc3xx_platform_set_mutexes+0x64>)
    ac78:	4d17      	ldr	r5, [pc, #92]	; (acd8 <nrf_cc3xx_platform_set_mutexes+0x68>)
    ac7a:	6063      	str	r3, [r4, #4]
    ac7c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    ac80:	e9c4 3002 	strd	r3, r0, [r4, #8]
    ac84:	6022      	str	r2, [r4, #0]
    ac86:	6848      	ldr	r0, [r1, #4]
    ac88:	f8d1 c000 	ldr.w	ip, [r1]
    ac8c:	4b13      	ldr	r3, [pc, #76]	; (acdc <nrf_cc3xx_platform_set_mutexes+0x6c>)
    ac8e:	e9c3 c000 	strd	ip, r0, [r3]
    ac92:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    ac96:	f8d1 c008 	ldr.w	ip, [r1, #8]
    ac9a:	f8c3 c008 	str.w	ip, [r3, #8]
    ac9e:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    aca2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    aca6:	6909      	ldr	r1, [r1, #16]
    aca8:	f8c3 c00c 	str.w	ip, [r3, #12]
    acac:	6119      	str	r1, [r3, #16]
    acae:	d010      	beq.n	acd2 <nrf_cc3xx_platform_set_mutexes+0x62>
    acb0:	490b      	ldr	r1, [pc, #44]	; (ace0 <nrf_cc3xx_platform_set_mutexes+0x70>)
    acb2:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    acb6:	2300      	movs	r3, #0
    acb8:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    acbc:	f505 708a 	add.w	r0, r5, #276	; 0x114
    acc0:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    acc4:	4790      	blx	r2
    acc6:	6823      	ldr	r3, [r4, #0]
    acc8:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    accc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    acd0:	4718      	bx	r3
    acd2:	bd70      	pop	{r4, r5, r6, pc}
    acd4:	20000200 	.word	0x20000200
    acd8:	20001f60 	.word	0x20001f60
    acdc:	200001ec 	.word	0x200001ec
    ace0:	a95c5f2c 	.word	0xa95c5f2c

0000ace4 <CC_LibInitNoRng>:
    ace4:	b538      	push	{r3, r4, r5, lr}
    ace6:	f000 f82f 	bl	ad48 <CC_HalInit>
    acea:	b120      	cbz	r0, acf6 <CC_LibInitNoRng+0x12>
    acec:	2403      	movs	r4, #3
    acee:	f000 f863 	bl	adb8 <CC_PalTerminate>
    acf2:	4620      	mov	r0, r4
    acf4:	bd38      	pop	{r3, r4, r5, pc}
    acf6:	f000 f831 	bl	ad5c <CC_PalInit>
    acfa:	b998      	cbnz	r0, ad24 <CC_LibInitNoRng+0x40>
    acfc:	f000 f8ac 	bl	ae58 <CC_PalPowerSaveModeSelect>
    ad00:	b998      	cbnz	r0, ad2a <CC_LibInitNoRng+0x46>
    ad02:	4d0f      	ldr	r5, [pc, #60]	; (ad40 <CC_LibInitNoRng+0x5c>)
    ad04:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    ad08:	0e1b      	lsrs	r3, r3, #24
    ad0a:	2bf0      	cmp	r3, #240	; 0xf0
    ad0c:	d108      	bne.n	ad20 <CC_LibInitNoRng+0x3c>
    ad0e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    ad12:	4b0c      	ldr	r3, [pc, #48]	; (ad44 <CC_LibInitNoRng+0x60>)
    ad14:	429a      	cmp	r2, r3
    ad16:	d00a      	beq.n	ad2e <CC_LibInitNoRng+0x4a>
    ad18:	2407      	movs	r4, #7
    ad1a:	f000 f817 	bl	ad4c <CC_HalTerminate>
    ad1e:	e7e6      	b.n	acee <CC_LibInitNoRng+0xa>
    ad20:	2406      	movs	r4, #6
    ad22:	e7fa      	b.n	ad1a <CC_LibInitNoRng+0x36>
    ad24:	2404      	movs	r4, #4
    ad26:	4620      	mov	r0, r4
    ad28:	bd38      	pop	{r3, r4, r5, pc}
    ad2a:	2400      	movs	r4, #0
    ad2c:	e7f5      	b.n	ad1a <CC_LibInitNoRng+0x36>
    ad2e:	2001      	movs	r0, #1
    ad30:	f000 f892 	bl	ae58 <CC_PalPowerSaveModeSelect>
    ad34:	4604      	mov	r4, r0
    ad36:	2800      	cmp	r0, #0
    ad38:	d1f7      	bne.n	ad2a <CC_LibInitNoRng+0x46>
    ad3a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    ad3e:	e7d8      	b.n	acf2 <CC_LibInitNoRng+0xe>
    ad40:	5002b000 	.word	0x5002b000
    ad44:	20e00000 	.word	0x20e00000

0000ad48 <CC_HalInit>:
    ad48:	2000      	movs	r0, #0
    ad4a:	4770      	bx	lr

0000ad4c <CC_HalTerminate>:
    ad4c:	2000      	movs	r0, #0
    ad4e:	4770      	bx	lr

0000ad50 <CC_HalMaskInterrupt>:
    ad50:	4b01      	ldr	r3, [pc, #4]	; (ad58 <CC_HalMaskInterrupt+0x8>)
    ad52:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    ad56:	4770      	bx	lr
    ad58:	5002b000 	.word	0x5002b000

0000ad5c <CC_PalInit>:
    ad5c:	b510      	push	{r4, lr}
    ad5e:	4811      	ldr	r0, [pc, #68]	; (ada4 <CC_PalInit+0x48>)
    ad60:	f000 f848 	bl	adf4 <CC_PalMutexCreate>
    ad64:	b100      	cbz	r0, ad68 <CC_PalInit+0xc>
    ad66:	bd10      	pop	{r4, pc}
    ad68:	480f      	ldr	r0, [pc, #60]	; (ada8 <CC_PalInit+0x4c>)
    ad6a:	f000 f843 	bl	adf4 <CC_PalMutexCreate>
    ad6e:	2800      	cmp	r0, #0
    ad70:	d1f9      	bne.n	ad66 <CC_PalInit+0xa>
    ad72:	4c0e      	ldr	r4, [pc, #56]	; (adac <CC_PalInit+0x50>)
    ad74:	4620      	mov	r0, r4
    ad76:	f000 f83d 	bl	adf4 <CC_PalMutexCreate>
    ad7a:	2800      	cmp	r0, #0
    ad7c:	d1f3      	bne.n	ad66 <CC_PalInit+0xa>
    ad7e:	4b0c      	ldr	r3, [pc, #48]	; (adb0 <CC_PalInit+0x54>)
    ad80:	480c      	ldr	r0, [pc, #48]	; (adb4 <CC_PalInit+0x58>)
    ad82:	601c      	str	r4, [r3, #0]
    ad84:	f000 f836 	bl	adf4 <CC_PalMutexCreate>
    ad88:	4601      	mov	r1, r0
    ad8a:	2800      	cmp	r0, #0
    ad8c:	d1eb      	bne.n	ad66 <CC_PalInit+0xa>
    ad8e:	f000 f82d 	bl	adec <CC_PalDmaInit>
    ad92:	4604      	mov	r4, r0
    ad94:	b108      	cbz	r0, ad9a <CC_PalInit+0x3e>
    ad96:	4620      	mov	r0, r4
    ad98:	bd10      	pop	{r4, pc}
    ad9a:	f000 f83f 	bl	ae1c <CC_PalPowerSaveModeInit>
    ad9e:	4620      	mov	r0, r4
    ada0:	e7fa      	b.n	ad98 <CC_PalInit+0x3c>
    ada2:	bf00      	nop
    ada4:	20000240 	.word	0x20000240
    ada8:	2000023c 	.word	0x2000023c
    adac:	20000238 	.word	0x20000238
    adb0:	20000230 	.word	0x20000230
    adb4:	20000234 	.word	0x20000234

0000adb8 <CC_PalTerminate>:
    adb8:	b508      	push	{r3, lr}
    adba:	4808      	ldr	r0, [pc, #32]	; (addc <CC_PalTerminate+0x24>)
    adbc:	f000 f824 	bl	ae08 <CC_PalMutexDestroy>
    adc0:	4807      	ldr	r0, [pc, #28]	; (ade0 <CC_PalTerminate+0x28>)
    adc2:	f000 f821 	bl	ae08 <CC_PalMutexDestroy>
    adc6:	4807      	ldr	r0, [pc, #28]	; (ade4 <CC_PalTerminate+0x2c>)
    adc8:	f000 f81e 	bl	ae08 <CC_PalMutexDestroy>
    adcc:	4806      	ldr	r0, [pc, #24]	; (ade8 <CC_PalTerminate+0x30>)
    adce:	f000 f81b 	bl	ae08 <CC_PalMutexDestroy>
    add2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    add6:	f000 b80b 	b.w	adf0 <CC_PalDmaTerminate>
    adda:	bf00      	nop
    addc:	20000240 	.word	0x20000240
    ade0:	2000023c 	.word	0x2000023c
    ade4:	20000238 	.word	0x20000238
    ade8:	20000234 	.word	0x20000234

0000adec <CC_PalDmaInit>:
    adec:	2000      	movs	r0, #0
    adee:	4770      	bx	lr

0000adf0 <CC_PalDmaTerminate>:
    adf0:	4770      	bx	lr
    adf2:	bf00      	nop

0000adf4 <CC_PalMutexCreate>:
    adf4:	b508      	push	{r3, lr}
    adf6:	4b03      	ldr	r3, [pc, #12]	; (ae04 <CC_PalMutexCreate+0x10>)
    adf8:	6802      	ldr	r2, [r0, #0]
    adfa:	681b      	ldr	r3, [r3, #0]
    adfc:	6810      	ldr	r0, [r2, #0]
    adfe:	4798      	blx	r3
    ae00:	2000      	movs	r0, #0
    ae02:	bd08      	pop	{r3, pc}
    ae04:	20000200 	.word	0x20000200

0000ae08 <CC_PalMutexDestroy>:
    ae08:	b508      	push	{r3, lr}
    ae0a:	4b03      	ldr	r3, [pc, #12]	; (ae18 <CC_PalMutexDestroy+0x10>)
    ae0c:	6802      	ldr	r2, [r0, #0]
    ae0e:	685b      	ldr	r3, [r3, #4]
    ae10:	6810      	ldr	r0, [r2, #0]
    ae12:	4798      	blx	r3
    ae14:	2000      	movs	r0, #0
    ae16:	bd08      	pop	{r3, pc}
    ae18:	20000200 	.word	0x20000200

0000ae1c <CC_PalPowerSaveModeInit>:
    ae1c:	b570      	push	{r4, r5, r6, lr}
    ae1e:	4c09      	ldr	r4, [pc, #36]	; (ae44 <CC_PalPowerSaveModeInit+0x28>)
    ae20:	4d09      	ldr	r5, [pc, #36]	; (ae48 <CC_PalPowerSaveModeInit+0x2c>)
    ae22:	6920      	ldr	r0, [r4, #16]
    ae24:	68ab      	ldr	r3, [r5, #8]
    ae26:	4798      	blx	r3
    ae28:	b118      	cbz	r0, ae32 <CC_PalPowerSaveModeInit+0x16>
    ae2a:	4b08      	ldr	r3, [pc, #32]	; (ae4c <CC_PalPowerSaveModeInit+0x30>)
    ae2c:	4808      	ldr	r0, [pc, #32]	; (ae50 <CC_PalPowerSaveModeInit+0x34>)
    ae2e:	685b      	ldr	r3, [r3, #4]
    ae30:	4798      	blx	r3
    ae32:	4a08      	ldr	r2, [pc, #32]	; (ae54 <CC_PalPowerSaveModeInit+0x38>)
    ae34:	68eb      	ldr	r3, [r5, #12]
    ae36:	6920      	ldr	r0, [r4, #16]
    ae38:	2100      	movs	r1, #0
    ae3a:	6011      	str	r1, [r2, #0]
    ae3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ae40:	4718      	bx	r3
    ae42:	bf00      	nop
    ae44:	200001ec 	.word	0x200001ec
    ae48:	20000200 	.word	0x20000200
    ae4c:	200001e4 	.word	0x200001e4
    ae50:	0000d638 	.word	0x0000d638
    ae54:	20001f5c 	.word	0x20001f5c

0000ae58 <CC_PalPowerSaveModeSelect>:
    ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae5a:	4d1a      	ldr	r5, [pc, #104]	; (aec4 <CC_PalPowerSaveModeSelect+0x6c>)
    ae5c:	4e1a      	ldr	r6, [pc, #104]	; (aec8 <CC_PalPowerSaveModeSelect+0x70>)
    ae5e:	4604      	mov	r4, r0
    ae60:	68b2      	ldr	r2, [r6, #8]
    ae62:	6928      	ldr	r0, [r5, #16]
    ae64:	4790      	blx	r2
    ae66:	b9e8      	cbnz	r0, aea4 <CC_PalPowerSaveModeSelect+0x4c>
    ae68:	4f18      	ldr	r7, [pc, #96]	; (aecc <CC_PalPowerSaveModeSelect+0x74>)
    ae6a:	683b      	ldr	r3, [r7, #0]
    ae6c:	b14c      	cbz	r4, ae82 <CC_PalPowerSaveModeSelect+0x2a>
    ae6e:	b1a3      	cbz	r3, ae9a <CC_PalPowerSaveModeSelect+0x42>
    ae70:	2b01      	cmp	r3, #1
    ae72:	d019      	beq.n	aea8 <CC_PalPowerSaveModeSelect+0x50>
    ae74:	3b01      	subs	r3, #1
    ae76:	603b      	str	r3, [r7, #0]
    ae78:	6928      	ldr	r0, [r5, #16]
    ae7a:	68f3      	ldr	r3, [r6, #12]
    ae7c:	4798      	blx	r3
    ae7e:	2000      	movs	r0, #0
    ae80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae82:	b943      	cbnz	r3, ae96 <CC_PalPowerSaveModeSelect+0x3e>
    ae84:	4a12      	ldr	r2, [pc, #72]	; (aed0 <CC_PalPowerSaveModeSelect+0x78>)
    ae86:	2101      	movs	r1, #1
    ae88:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    ae8c:	4911      	ldr	r1, [pc, #68]	; (aed4 <CC_PalPowerSaveModeSelect+0x7c>)
    ae8e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    ae92:	2a00      	cmp	r2, #0
    ae94:	d1fb      	bne.n	ae8e <CC_PalPowerSaveModeSelect+0x36>
    ae96:	3301      	adds	r3, #1
    ae98:	603b      	str	r3, [r7, #0]
    ae9a:	68f3      	ldr	r3, [r6, #12]
    ae9c:	6928      	ldr	r0, [r5, #16]
    ae9e:	4798      	blx	r3
    aea0:	2000      	movs	r0, #0
    aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aea4:	480c      	ldr	r0, [pc, #48]	; (aed8 <CC_PalPowerSaveModeSelect+0x80>)
    aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aea8:	4a0a      	ldr	r2, [pc, #40]	; (aed4 <CC_PalPowerSaveModeSelect+0x7c>)
    aeaa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    aeae:	2b00      	cmp	r3, #0
    aeb0:	d1fb      	bne.n	aeaa <CC_PalPowerSaveModeSelect+0x52>
    aeb2:	4a07      	ldr	r2, [pc, #28]	; (aed0 <CC_PalPowerSaveModeSelect+0x78>)
    aeb4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    aeb8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    aebc:	f7ff ff48 	bl	ad50 <CC_HalMaskInterrupt>
    aec0:	683b      	ldr	r3, [r7, #0]
    aec2:	e7d7      	b.n	ae74 <CC_PalPowerSaveModeSelect+0x1c>
    aec4:	200001ec 	.word	0x200001ec
    aec8:	20000200 	.word	0x20000200
    aecc:	20001f5c 	.word	0x20001f5c
    aed0:	5002a000 	.word	0x5002a000
    aed4:	5002b000 	.word	0x5002b000
    aed8:	ffff8fe9 	.word	0xffff8fe9

0000aedc <cbpprintf_external>:
{
    aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aee0:	4606      	mov	r6, r0
    aee2:	460d      	mov	r5, r1
    aee4:	4617      	mov	r7, r2
	if (buf == NULL) {
    aee6:	4698      	mov	r8, r3
    aee8:	b32b      	cbz	r3, af36 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    aeea:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    aeee:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    aef2:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    aef4:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    aef6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    aefa:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    aefe:	441c      	add	r4, r3
    af00:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    af02:	f04f 0a00 	mov.w	sl, #0
    af06:	45ca      	cmp	sl, r9
    af08:	d309      	bcc.n	af1e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    af0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    af0e:	f108 0308 	add.w	r3, r8, #8
    af12:	4639      	mov	r1, r7
    af14:	4630      	mov	r0, r6
    af16:	46ac      	mov	ip, r5
}
    af18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    af1c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    af1e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    af22:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    af26:	4620      	mov	r0, r4
    af28:	f001 f8f2 	bl	c110 <strlen>
    af2c:	3001      	adds	r0, #1
    af2e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    af30:	f10a 0a01 	add.w	sl, sl, #1
    af34:	e7e7      	b.n	af06 <cbpprintf_external+0x2a>
}
    af36:	f06f 0015 	mvn.w	r0, #21
    af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000af3e <is_ptr>:
{
    af3e:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    af40:	2500      	movs	r5, #0
{
    af42:	4602      	mov	r2, r0
	bool mod = false;
    af44:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    af46:	4614      	mov	r4, r2
    af48:	f814 3b01 	ldrb.w	r3, [r4], #1
    af4c:	b90b      	cbnz	r3, af52 <is_ptr+0x14>
					return false;
    af4e:	4618      	mov	r0, r3
    af50:	e009      	b.n	af66 <is_ptr+0x28>
		if (mod) {
    af52:	b198      	cbz	r0, af7c <is_ptr+0x3e>
			if (cnt == n) {
    af54:	428d      	cmp	r5, r1
    af56:	d107      	bne.n	af68 <is_ptr+0x2a>
				if (c == 'p') {
    af58:	2b70      	cmp	r3, #112	; 0x70
    af5a:	d004      	beq.n	af66 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    af5c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    af60:	2a3a      	cmp	r2, #58	; 0x3a
    af62:	d80b      	bhi.n	af7c <is_ptr+0x3e>
					return false;
    af64:	2000      	movs	r0, #0
}
    af66:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    af68:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    af6c:	2e3a      	cmp	r6, #58	; 0x3a
    af6e:	d805      	bhi.n	af7c <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    af70:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    af72:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    af74:	1c94      	adds	r4, r2, #2
    af76:	2b00      	cmp	r3, #0
    af78:	d0e9      	beq.n	af4e <is_ptr+0x10>
    af7a:	2000      	movs	r0, #0
		if (c == '%') {
    af7c:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    af7e:	bf08      	it	eq
    af80:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    af84:	4622      	mov	r2, r4
    af86:	e7de      	b.n	af46 <is_ptr+0x8>

0000af88 <arch_printk_char_out>:
}
    af88:	2000      	movs	r0, #0
    af8a:	4770      	bx	lr

0000af8c <str_out>:
{
    af8c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    af8e:	688a      	ldr	r2, [r1, #8]
    af90:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    af92:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    af94:	b114      	cbz	r4, af9c <str_out+0x10>
    af96:	684b      	ldr	r3, [r1, #4]
    af98:	4293      	cmp	r3, r2
    af9a:	dc01      	bgt.n	afa0 <str_out+0x14>
		ctx->count++;
    af9c:	608d      	str	r5, [r1, #8]
}
    af9e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    afa0:	3b01      	subs	r3, #1
    afa2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    afa4:	bf08      	it	eq
    afa6:	2200      	moveq	r2, #0
    afa8:	608d      	str	r5, [r1, #8]
    afaa:	bf0c      	ite	eq
    afac:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    afae:	54a0      	strbne	r0, [r4, r2]
    afb0:	e7f5      	b.n	af9e <str_out+0x12>

0000afb2 <printk>:
{
    afb2:	b40f      	push	{r0, r1, r2, r3}
    afb4:	b507      	push	{r0, r1, r2, lr}
    afb6:	a904      	add	r1, sp, #16
    afb8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    afbc:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    afbe:	f000 fe91 	bl	bce4 <z_log_vprintk>
}
    afc2:	b003      	add	sp, #12
    afc4:	f85d eb04 	ldr.w	lr, [sp], #4
    afc8:	b004      	add	sp, #16
    afca:	4770      	bx	lr

0000afcc <snprintk>:
{
    afcc:	b40c      	push	{r2, r3}
    afce:	b507      	push	{r0, r1, r2, lr}
    afd0:	ab04      	add	r3, sp, #16
    afd2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    afd6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    afd8:	f7f6 fe16 	bl	1c08 <vsnprintk>
}
    afdc:	b003      	add	sp, #12
    afde:	f85d eb04 	ldr.w	lr, [sp], #4
    afe2:	b002      	add	sp, #8
    afe4:	4770      	bx	lr

0000afe6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    afe6:	4604      	mov	r4, r0
    afe8:	b508      	push	{r3, lr}
    afea:	4608      	mov	r0, r1
    afec:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    afee:	461a      	mov	r2, r3
    aff0:	47a0      	blx	r4
	return z_impl_z_current_get();
    aff2:	f7ff fabd 	bl	a570 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    aff6:	f7fa f9e3 	bl	53c0 <z_impl_k_thread_abort>

0000affa <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    affa:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    affe:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    b000:	0840      	lsrs	r0, r0, #1
    b002:	4770      	bx	lr

0000b004 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b006:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    b008:	f7ff fff7 	bl	affa <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    b00c:	fab0 f080 	clz	r0, r0
    b010:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    b014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    b018:	00ca      	lsls	r2, r1, #3
    b01a:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    b01e:	1d17      	adds	r7, r2, #4
{
    b020:	460c      	mov	r4, r1
    b022:	3206      	adds	r2, #6
    b024:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    b026:	b956      	cbnz	r6, b03e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    b028:	2101      	movs	r1, #1
    b02a:	fa01 f000 	lsl.w	r0, r1, r0
    b02e:	68d9      	ldr	r1, [r3, #12]
    b030:	4301      	orrs	r1, r0
    b032:	60d9      	str	r1, [r3, #12]
		b->next = c;
    b034:	f8cc 4010 	str.w	r4, [ip, #16]
    b038:	53dd      	strh	r5, [r3, r7]
    b03a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    b03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    b03e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    b040:	3104      	adds	r1, #4
    b042:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    b044:	53d8      	strh	r0, [r3, r7]
    b046:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    b04a:	529e      	strh	r6, [r3, r2]
    b04c:	80c5      	strh	r5, [r0, #6]
    b04e:	525d      	strh	r5, [r3, r1]
    b050:	e7f4      	b.n	b03c <free_list_add+0x38>

0000b052 <free_list_remove_bidx>:
{
    b052:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    b054:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    b058:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    b05a:	4299      	cmp	r1, r3
    b05c:	f102 0104 	add.w	r1, r2, #4
    b060:	d10a      	bne.n	b078 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    b062:	2301      	movs	r3, #1
    b064:	fa03 f202 	lsl.w	r2, r3, r2
    b068:	68c3      	ldr	r3, [r0, #12]
    b06a:	ea23 0302 	bic.w	r3, r3, r2
    b06e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    b070:	2300      	movs	r3, #0
    b072:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    b076:	bd10      	pop	{r4, pc}
    b078:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    b07a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    b07e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    b082:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    b086:	80cb      	strh	r3, [r1, #6]
    b088:	8082      	strh	r2, [r0, #4]
}
    b08a:	e7f4      	b.n	b076 <free_list_remove_bidx+0x24>

0000b08c <free_list_remove>:
{
    b08c:	b508      	push	{r3, lr}
    b08e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    b090:	f7ff ffb3 	bl	affa <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    b094:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    b098:	f1c2 021f 	rsb	r2, r2, #31
    b09c:	4618      	mov	r0, r3
}
    b09e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    b0a2:	f7ff bfd6 	b.w	b052 <free_list_remove_bidx>

0000b0a6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    b0a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b0aa:	fab1 f581 	clz	r5, r1
    b0ae:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    b0b2:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    b0b6:	4603      	mov	r3, r0
	if (b->next) {
    b0b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    b0bc:	460e      	mov	r6, r1
	if (b->next) {
    b0be:	b1c2      	cbz	r2, b0f2 <alloc_chunk+0x4c>
    b0c0:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    b0c2:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    b0c6:	4618      	mov	r0, r3
    b0c8:	4621      	mov	r1, r4
    b0ca:	f7ff ff96 	bl	affa <chunk_size>
    b0ce:	42b0      	cmp	r0, r6
    b0d0:	d306      	bcc.n	b0e0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    b0d2:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    b0d4:	4618      	mov	r0, r3
    b0d6:	f7ff ffbc 	bl	b052 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    b0da:	4620      	mov	r0, r4
    b0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    b0e0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    b0e4:	3f01      	subs	r7, #1
    b0e6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    b0e8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    b0ec:	d001      	beq.n	b0f2 <alloc_chunk+0x4c>
    b0ee:	4282      	cmp	r2, r0
    b0f0:	d1e7      	bne.n	b0c2 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    b0f2:	f1c5 0220 	rsb	r2, r5, #32
    b0f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    b0fa:	4094      	lsls	r4, r2
    b0fc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    b0fe:	4014      	ands	r4, r2
    b100:	d0eb      	beq.n	b0da <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    b102:	fa94 f2a4 	rbit	r2, r4
    b106:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    b10a:	1d11      	adds	r1, r2, #4
    b10c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    b110:	4621      	mov	r1, r4
    b112:	e7df      	b.n	b0d4 <alloc_chunk+0x2e>

0000b114 <merge_chunks>:
{
    b114:	b538      	push	{r3, r4, r5, lr}
    b116:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b118:	f7ff ff6f 	bl	affa <chunk_size>
{
    b11c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b11e:	4604      	mov	r4, r0
    b120:	4611      	mov	r1, r2
    b122:	4618      	mov	r0, r3
    b124:	f7ff ff69 	bl	affa <chunk_size>
		((uint16_t *)cmem)[f] = val;
    b128:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b12c:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b12e:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    b130:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    b132:	4618      	mov	r0, r3
    b134:	f7ff ff61 	bl	affa <chunk_size>
	void *cmem = &buf[c];
    b138:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b13a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    b13e:	bd38      	pop	{r3, r4, r5, pc}

0000b140 <split_chunks>:
{
    b140:	b538      	push	{r3, r4, r5, lr}
    b142:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    b144:	f7ff ff59 	bl	affa <chunk_size>
{
    b148:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    b14a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    b14c:	1a51      	subs	r1, r2, r1
    b14e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    b152:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b154:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    b156:	8060      	strh	r0, [r4, #2]
    b158:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b15c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    b15e:	8044      	strh	r4, [r0, #2]
    b160:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    b164:	4618      	mov	r0, r3
    b166:	4611      	mov	r1, r2
    b168:	f7ff ff47 	bl	affa <chunk_size>
	void *cmem = &buf[c];
    b16c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b16e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    b172:	bd38      	pop	{r3, r4, r5, pc}

0000b174 <free_chunk>:
{
    b174:	b538      	push	{r3, r4, r5, lr}
    b176:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    b178:	f7ff ff3f 	bl	affa <chunk_size>
    b17c:	460c      	mov	r4, r1
    b17e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    b180:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b184:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    b186:	07da      	lsls	r2, r3, #31
    b188:	d40a      	bmi.n	b1a0 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    b18a:	4628      	mov	r0, r5
    b18c:	f7ff ff7e 	bl	b08c <free_list_remove>
	return c + chunk_size(h, c);
    b190:	4621      	mov	r1, r4
    b192:	4628      	mov	r0, r5
    b194:	f7ff ff31 	bl	affa <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    b198:	1822      	adds	r2, r4, r0
    b19a:	4628      	mov	r0, r5
    b19c:	f7ff ffba 	bl	b114 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    b1a0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b1a4:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    b1a6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b1aa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    b1ac:	07db      	lsls	r3, r3, #31
    b1ae:	d40c      	bmi.n	b1ca <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    b1b0:	4628      	mov	r0, r5
    b1b2:	f7ff ff6b 	bl	b08c <free_list_remove>
		return ((uint16_t *)cmem)[f];
    b1b6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    b1ba:	4622      	mov	r2, r4
    b1bc:	1a61      	subs	r1, r4, r1
    b1be:	4628      	mov	r0, r5
    b1c0:	f7ff ffa8 	bl	b114 <merge_chunks>
    b1c4:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b1c8:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    b1ca:	4621      	mov	r1, r4
    b1cc:	4628      	mov	r0, r5
}
    b1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    b1d2:	f7ff bf17 	b.w	b004 <free_list_add>

0000b1d6 <sys_heap_free>:
	if (mem == NULL) {
    b1d6:	b161      	cbz	r1, b1f2 <sys_heap_free+0x1c>
    b1d8:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b1da:	3904      	subs	r1, #4
    b1dc:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    b1de:	f021 0307 	bic.w	r3, r1, #7
    b1e2:	4403      	add	r3, r0
	free_chunk(h, c);
    b1e4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b1e6:	885a      	ldrh	r2, [r3, #2]
    b1e8:	f022 0201 	bic.w	r2, r2, #1
    b1ec:	805a      	strh	r2, [r3, #2]
    b1ee:	f7ff bfc1 	b.w	b174 <free_chunk>
}
    b1f2:	4770      	bx	lr

0000b1f4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    b1f4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    b1f6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    b1f8:	b909      	cbnz	r1, b1fe <sys_heap_alloc+0xa>
		return NULL;
    b1fa:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b1fc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    b1fe:	68ab      	ldr	r3, [r5, #8]
    b200:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    b204:	d9f9      	bls.n	b1fa <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b206:	310b      	adds	r1, #11
    b208:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    b20a:	4621      	mov	r1, r4
    b20c:	4628      	mov	r0, r5
    b20e:	f7ff ff4a 	bl	b0a6 <alloc_chunk>
	if (c == 0U) {
    b212:	4606      	mov	r6, r0
    b214:	2800      	cmp	r0, #0
    b216:	d0f0      	beq.n	b1fa <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    b218:	4601      	mov	r1, r0
    b21a:	4628      	mov	r0, r5
    b21c:	f7ff feed 	bl	affa <chunk_size>
    b220:	42a0      	cmp	r0, r4
    b222:	d907      	bls.n	b234 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    b224:	1932      	adds	r2, r6, r4
    b226:	4628      	mov	r0, r5
    b228:	f7ff ff8a 	bl	b140 <split_chunks>
		free_list_add(h, c + chunk_sz);
    b22c:	4611      	mov	r1, r2
    b22e:	4628      	mov	r0, r5
    b230:	f7ff fee8 	bl	b004 <free_list_add>
	void *cmem = &buf[c];
    b234:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b238:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b23a:	8853      	ldrh	r3, [r2, #2]
    b23c:	f043 0301 	orr.w	r3, r3, #1
    b240:	8053      	strh	r3, [r2, #2]
    b242:	3004      	adds	r0, #4
	return mem;
    b244:	e7da      	b.n	b1fc <sys_heap_alloc+0x8>

0000b246 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b24a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    b24e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    b252:	6806      	ldr	r6, [r0, #0]
{
    b254:	460f      	mov	r7, r1
    b256:	4614      	mov	r4, r2
	if (align != rew) {
    b258:	d00c      	beq.n	b274 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    b25a:	424b      	negs	r3, r1
    b25c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    b25e:	2b04      	cmp	r3, #4
    b260:	461a      	mov	r2, r3
    b262:	464f      	mov	r7, r9
    b264:	bf28      	it	cs
    b266:	2204      	movcs	r2, #4
	rew = align & -align;
    b268:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    b26a:	b964      	cbnz	r4, b286 <sys_heap_aligned_alloc+0x40>
		return NULL;
    b26c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b26e:	4628      	mov	r0, r5
    b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    b274:	2904      	cmp	r1, #4
    b276:	d804      	bhi.n	b282 <sys_heap_aligned_alloc+0x3c>
}
    b278:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    b27c:	4611      	mov	r1, r2
    b27e:	f7ff bfb9 	b.w	b1f4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    b282:	2204      	movs	r2, #4
    b284:	e7f1      	b.n	b26a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    b286:	68b3      	ldr	r3, [r6, #8]
    b288:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    b28c:	d9ee      	bls.n	b26c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b28e:	f104 010b 	add.w	r1, r4, #11
    b292:	4439      	add	r1, r7
    b294:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b296:	08c9      	lsrs	r1, r1, #3
    b298:	4630      	mov	r0, r6
    b29a:	f7ff ff04 	bl	b0a6 <alloc_chunk>
	if (c0 == 0) {
    b29e:	4680      	mov	r8, r0
    b2a0:	2800      	cmp	r0, #0
    b2a2:	d0e3      	beq.n	b26c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    b2a4:	f109 0504 	add.w	r5, r9, #4
    b2a8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    b2ac:	1e7b      	subs	r3, r7, #1
    b2ae:	4435      	add	r5, r6
    b2b0:	441d      	add	r5, r3
    b2b2:	427f      	negs	r7, r7
    b2b4:	403d      	ands	r5, r7
    b2b6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b2ba:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b2bc:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b2be:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b2c0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b2c2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b2c6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    b2c8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b2cc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b2d0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b2d4:	d208      	bcs.n	b2e8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    b2d6:	4601      	mov	r1, r0
    b2d8:	463a      	mov	r2, r7
    b2da:	4630      	mov	r0, r6
    b2dc:	f7ff ff30 	bl	b140 <split_chunks>
		free_list_add(h, c0);
    b2e0:	4641      	mov	r1, r8
    b2e2:	4630      	mov	r0, r6
    b2e4:	f7ff fe8e 	bl	b004 <free_list_add>
	return c + chunk_size(h, c);
    b2e8:	4639      	mov	r1, r7
    b2ea:	4630      	mov	r0, r6
    b2ec:	f7ff fe85 	bl	affa <chunk_size>
    b2f0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b2f2:	4284      	cmp	r4, r0
    b2f4:	d207      	bcs.n	b306 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    b2f6:	4630      	mov	r0, r6
    b2f8:	4622      	mov	r2, r4
    b2fa:	f7ff ff21 	bl	b140 <split_chunks>
		free_list_add(h, c_end);
    b2fe:	4621      	mov	r1, r4
    b300:	4630      	mov	r0, r6
    b302:	f7ff fe7f 	bl	b004 <free_list_add>
	void *cmem = &buf[c];
    b306:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b30a:	8873      	ldrh	r3, [r6, #2]
    b30c:	f043 0301 	orr.w	r3, r3, #1
    b310:	8073      	strh	r3, [r6, #2]
    b312:	e7ac      	b.n	b26e <sys_heap_aligned_alloc+0x28>

0000b314 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    b314:	3a04      	subs	r2, #4
{
    b316:	b4f0      	push	{r4, r5, r6, r7}
    b318:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b31a:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b31c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b31e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b322:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b326:	1a0e      	subs	r6, r1, r0
    b328:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    b32a:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    b32c:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    b330:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b332:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    b336:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    b338:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b33a:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    b33c:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b340:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    b342:	f1c2 0220 	rsb	r2, r2, #32
    b346:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    b348:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    b34c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    b350:	4294      	cmp	r4, r2
    b352:	d1fb      	bne.n	b34c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b354:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b356:	f042 0201 	orr.w	r2, r2, #1
    b35a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    b35c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    b360:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b362:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    b364:	8007      	strh	r7, [r0, #0]
    b366:	8065      	strh	r5, [r4, #2]
    b368:	1984      	adds	r4, r0, r6
    b36a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    b36e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    b372:	8067      	strh	r7, [r4, #2]
    b374:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b376:	885a      	ldrh	r2, [r3, #2]
    b378:	f042 0201 	orr.w	r2, r2, #1
    b37c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    b37e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    b380:	f7ff be40 	b.w	b004 <free_list_add>

0000b384 <sys_slist_find_and_remove>:
	return list->head;
    b384:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b386:	2200      	movs	r2, #0
    b388:	b90b      	cbnz	r3, b38e <sys_slist_find_and_remove+0xa>
    b38a:	4618      	mov	r0, r3
    b38c:	4770      	bx	lr
    b38e:	428b      	cmp	r3, r1
    b390:	d110      	bne.n	b3b4 <sys_slist_find_and_remove+0x30>
	return node->next;
    b392:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    b394:	b942      	cbnz	r2, b3a8 <sys_slist_find_and_remove+0x24>
    b396:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    b398:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    b39a:	4291      	cmp	r1, r2
    b39c:	d100      	bne.n	b3a0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    b39e:	6043      	str	r3, [r0, #4]
	parent->next = child;
    b3a0:	2300      	movs	r3, #0
    b3a2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b3a4:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    b3a6:	4770      	bx	lr
	parent->next = child;
    b3a8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b3aa:	6843      	ldr	r3, [r0, #4]
    b3ac:	4299      	cmp	r1, r3
	list->tail = node;
    b3ae:	bf08      	it	eq
    b3b0:	6042      	streq	r2, [r0, #4]
}
    b3b2:	e7f5      	b.n	b3a0 <sys_slist_find_and_remove+0x1c>
	return node->next;
    b3b4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b3b6:	681b      	ldr	r3, [r3, #0]
    b3b8:	e7e6      	b.n	b388 <sys_slist_find_and_remove+0x4>

0000b3ba <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b3ba:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    b3bc:	f013 0307 	ands.w	r3, r3, #7
    b3c0:	d105      	bne.n	b3ce <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    b3c2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	bf0c      	ite	eq
    b3c8:	2000      	moveq	r0, #0
    b3ca:	2003      	movne	r0, #3
    b3cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b3ce:	2b02      	cmp	r3, #2
    b3d0:	d105      	bne.n	b3de <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    b3d2:	8b40      	ldrh	r0, [r0, #26]
    b3d4:	fab0 f080 	clz	r0, r0
    b3d8:	0940      	lsrs	r0, r0, #5
    b3da:	0080      	lsls	r0, r0, #2
    b3dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    b3de:	2b01      	cmp	r3, #1
    b3e0:	d105      	bne.n	b3ee <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    b3e2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	bf0c      	ite	eq
    b3e8:	2000      	moveq	r0, #0
    b3ea:	2005      	movne	r0, #5
    b3ec:	4770      	bx	lr
	int evt = EVT_NOP;
    b3ee:	2000      	movs	r0, #0
}
    b3f0:	4770      	bx	lr

0000b3f2 <validate_args>:
{
    b3f2:	b510      	push	{r4, lr}
    b3f4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b3f6:	b100      	cbz	r0, b3fa <validate_args+0x8>
    b3f8:	b911      	cbnz	r1, b400 <validate_args+0xe>
		return -EINVAL;
    b3fa:	f06f 0015 	mvn.w	r0, #21
}
    b3fe:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    b400:	1d08      	adds	r0, r1, #4
    b402:	f000 f8d6 	bl	b5b2 <sys_notify_validate>
	if ((rv == 0)
    b406:	2800      	cmp	r0, #0
    b408:	d1f9      	bne.n	b3fe <validate_args+0xc>
	    && ((cli->notify.flags
    b40a:	68a3      	ldr	r3, [r4, #8]
    b40c:	2b03      	cmp	r3, #3
    b40e:	d9f6      	bls.n	b3fe <validate_args+0xc>
    b410:	e7f3      	b.n	b3fa <validate_args+0x8>

0000b412 <notify_one>:
{
    b412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b416:	460d      	mov	r5, r1
    b418:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b41a:	4619      	mov	r1, r3
    b41c:	1d28      	adds	r0, r5, #4
{
    b41e:	4690      	mov	r8, r2
    b420:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b422:	f000 f8d7 	bl	b5d4 <sys_notify_finalize>
	if (cb) {
    b426:	4604      	mov	r4, r0
    b428:	b138      	cbz	r0, b43a <notify_one+0x28>
		cb(mgr, cli, state, res);
    b42a:	4633      	mov	r3, r6
    b42c:	4642      	mov	r2, r8
    b42e:	4629      	mov	r1, r5
    b430:	4638      	mov	r0, r7
    b432:	46a4      	mov	ip, r4
}
    b434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    b438:	4760      	bx	ip
}
    b43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b43e <transition_complete>:
{
    b43e:	b410      	push	{r4}
	__asm__ volatile(
    b440:	f04f 0420 	mov.w	r4, #32
    b444:	f3ef 8211 	mrs	r2, BASEPRI
    b448:	f384 8812 	msr	BASEPRI_MAX, r4
    b44c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    b450:	6141      	str	r1, [r0, #20]
}
    b452:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    b454:	2101      	movs	r1, #1
    b456:	f7f6 bbed 	b.w	1c34 <process_event>

0000b45a <onoff_manager_init>:
{
    b45a:	b538      	push	{r3, r4, r5, lr}
    b45c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    b45e:	4605      	mov	r5, r0
    b460:	b158      	cbz	r0, b47a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    b462:	b151      	cbz	r1, b47a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    b464:	680b      	ldr	r3, [r1, #0]
    b466:	b143      	cbz	r3, b47a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    b468:	684b      	ldr	r3, [r1, #4]
    b46a:	b133      	cbz	r3, b47a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b46c:	221c      	movs	r2, #28
    b46e:	2100      	movs	r1, #0
    b470:	f000 fe69 	bl	c146 <memset>
    b474:	612c      	str	r4, [r5, #16]
	return 0;
    b476:	2000      	movs	r0, #0
}
    b478:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b47a:	f06f 0015 	mvn.w	r0, #21
    b47e:	e7fb      	b.n	b478 <onoff_manager_init+0x1e>

0000b480 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    b480:	b570      	push	{r4, r5, r6, lr}
    b482:	4605      	mov	r5, r0
    b484:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    b486:	f7ff ffb4 	bl	b3f2 <validate_args>

	if (rv < 0) {
    b48a:	1e04      	subs	r4, r0, #0
    b48c:	db15      	blt.n	b4ba <onoff_request+0x3a>
    b48e:	f04f 0320 	mov.w	r3, #32
    b492:	f3ef 8211 	mrs	r2, BASEPRI
    b496:	f383 8812 	msr	BASEPRI_MAX, r3
    b49a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    b49e:	8b6b      	ldrh	r3, [r5, #26]
    b4a0:	8b2c      	ldrh	r4, [r5, #24]
    b4a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b4a6:	428b      	cmp	r3, r1
    b4a8:	f004 0407 	and.w	r4, r4, #7
    b4ac:	d107      	bne.n	b4be <onoff_request+0x3e>
	__asm__ volatile(
    b4ae:	f382 8811 	msr	BASEPRI, r2
    b4b2:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    b4b6:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    b4ba:	4620      	mov	r0, r4
    b4bc:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    b4be:	2c02      	cmp	r4, #2
    b4c0:	d10c      	bne.n	b4dc <onoff_request+0x5c>
		mgr->refs += 1U;
    b4c2:	3301      	adds	r3, #1
    b4c4:	836b      	strh	r3, [r5, #26]
    b4c6:	f382 8811 	msr	BASEPRI, r2
    b4ca:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    b4ce:	2300      	movs	r3, #0
    b4d0:	4622      	mov	r2, r4
    b4d2:	4631      	mov	r1, r6
    b4d4:	4628      	mov	r0, r5
    b4d6:	f7ff ff9c 	bl	b412 <notify_one>
    b4da:	e7ee      	b.n	b4ba <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    b4dc:	2c06      	cmp	r4, #6
    b4de:	d814      	bhi.n	b50a <onoff_request+0x8a>
    b4e0:	e8df f004 	tbb	[pc, r4]
    b4e4:	13131304 	.word	0x13131304
    b4e8:	1a04      	.short	0x1a04
    b4ea:	04          	.byte	0x04
    b4eb:	00          	.byte	0x00
	parent->next = child;
    b4ec:	2300      	movs	r3, #0
    b4ee:	6033      	str	r3, [r6, #0]
	return list->tail;
    b4f0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    b4f2:	b93b      	cbnz	r3, b504 <onoff_request+0x84>
	list->head = node;
    b4f4:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    b4f8:	b9ac      	cbnz	r4, b526 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    b4fa:	2102      	movs	r1, #2
    b4fc:	4628      	mov	r0, r5
    b4fe:	f7f6 fb99 	bl	1c34 <process_event>
    b502:	e7da      	b.n	b4ba <onoff_request+0x3a>
	parent->next = child;
    b504:	601e      	str	r6, [r3, #0]
	list->tail = node;
    b506:	606e      	str	r6, [r5, #4]
}
    b508:	e7f6      	b.n	b4f8 <onoff_request+0x78>
    b50a:	f382 8811 	msr	BASEPRI, r2
    b50e:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    b512:	f06f 0404 	mvn.w	r4, #4
    b516:	e7d0      	b.n	b4ba <onoff_request+0x3a>
    b518:	f382 8811 	msr	BASEPRI, r2
    b51c:	f3bf 8f6f 	isb	sy
    b520:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b524:	e7c9      	b.n	b4ba <onoff_request+0x3a>
    b526:	f382 8811 	msr	BASEPRI, r2
    b52a:	f3bf 8f6f 	isb	sy
		if (notify) {
    b52e:	e7c4      	b.n	b4ba <onoff_request+0x3a>

0000b530 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    b530:	b510      	push	{r4, lr}
	__asm__ volatile(
    b532:	f04f 0320 	mov.w	r3, #32
    b536:	f3ef 8211 	mrs	r2, BASEPRI
    b53a:	f383 8812 	msr	BASEPRI_MAX, r3
    b53e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b542:	8b04      	ldrh	r4, [r0, #24]
    b544:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    b548:	2c02      	cmp	r4, #2
    b54a:	d00a      	beq.n	b562 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    b54c:	2c01      	cmp	r4, #1
    b54e:	bf0c      	ite	eq
    b550:	f06f 0004 	mvneq.w	r0, #4
    b554:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    b558:	f382 8811 	msr	BASEPRI, r2
    b55c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    b560:	e008      	b.n	b574 <onoff_release+0x44>
	mgr->refs -= 1U;
    b562:	8b43      	ldrh	r3, [r0, #26]
    b564:	3b01      	subs	r3, #1
    b566:	b29b      	uxth	r3, r3
    b568:	8343      	strh	r3, [r0, #26]
	if (stop) {
    b56a:	b923      	cbnz	r3, b576 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    b56c:	4621      	mov	r1, r4
    b56e:	f7f6 fb61 	bl	1c34 <process_event>
	int rv = state;
    b572:	4620      	mov	r0, r4
}
    b574:	bd10      	pop	{r4, pc}
	int rv = state;
    b576:	4620      	mov	r0, r4
    b578:	e7ee      	b.n	b558 <onoff_release+0x28>

0000b57a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    b57a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    b57c:	b1b0      	cbz	r0, b5ac <onoff_cancel+0x32>
    b57e:	b1a9      	cbz	r1, b5ac <onoff_cancel+0x32>
	__asm__ volatile(
    b580:	f04f 0220 	mov.w	r2, #32
    b584:	f3ef 8511 	mrs	r5, BASEPRI
    b588:	f382 8812 	msr	BASEPRI_MAX, r2
    b58c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b590:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    b592:	f7ff fef7 	bl	b384 <sys_slist_find_and_remove>
    b596:	b130      	cbz	r0, b5a6 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b598:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    b59c:	f385 8811 	msr	BASEPRI, r5
    b5a0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b5a4:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    b5a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b5aa:	e7f7      	b.n	b59c <onoff_cancel+0x22>
		return -EINVAL;
    b5ac:	f06f 0015 	mvn.w	r0, #21
    b5b0:	e7f8      	b.n	b5a4 <onoff_cancel+0x2a>

0000b5b2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b5b2:	4603      	mov	r3, r0
    b5b4:	b158      	cbz	r0, b5ce <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b5b6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b5b8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b5bc:	2a01      	cmp	r2, #1
    b5be:	d003      	beq.n	b5c8 <sys_notify_validate+0x16>
    b5c0:	2a03      	cmp	r2, #3
    b5c2:	d104      	bne.n	b5ce <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    b5c4:	6802      	ldr	r2, [r0, #0]
    b5c6:	b112      	cbz	r2, b5ce <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    b5c8:	2000      	movs	r0, #0
    b5ca:	6098      	str	r0, [r3, #8]
    b5cc:	4770      	bx	lr
    b5ce:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    b5d2:	4770      	bx	lr

0000b5d4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b5d4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    b5d6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    b5d8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    b5dc:	2a03      	cmp	r2, #3
    b5de:	f04f 0200 	mov.w	r2, #0
{
    b5e2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b5e4:	bf0c      	ite	eq
    b5e6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    b5e8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b5ea:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b5ec:	4770      	bx	lr

0000b5ee <encode_uint>:
{
    b5ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5f2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    b5f4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    b5f6:	2b6f      	cmp	r3, #111	; 0x6f
{
    b5f8:	4680      	mov	r8, r0
    b5fa:	460f      	mov	r7, r1
    b5fc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b5fe:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    b602:	d029      	beq.n	b658 <encode_uint+0x6a>
    b604:	d824      	bhi.n	b650 <encode_uint+0x62>
		return 10;
    b606:	2b58      	cmp	r3, #88	; 0x58
    b608:	bf0c      	ite	eq
    b60a:	2610      	moveq	r6, #16
    b60c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    b60e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    b612:	4632      	mov	r2, r6
    b614:	2300      	movs	r3, #0
    b616:	4640      	mov	r0, r8
    b618:	4639      	mov	r1, r7
    b61a:	f7f5 fd71 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b61e:	2a09      	cmp	r2, #9
    b620:	b2d4      	uxtb	r4, r2
    b622:	d81e      	bhi.n	b662 <encode_uint+0x74>
    b624:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    b626:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b628:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b62a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b62e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b632:	d301      	bcc.n	b638 <encode_uint+0x4a>
    b634:	45d1      	cmp	r9, sl
    b636:	d811      	bhi.n	b65c <encode_uint+0x6e>
	if (conv->flag_hash) {
    b638:	782b      	ldrb	r3, [r5, #0]
    b63a:	069b      	lsls	r3, r3, #26
    b63c:	d505      	bpl.n	b64a <encode_uint+0x5c>
		if (radix == 8) {
    b63e:	2e08      	cmp	r6, #8
    b640:	d115      	bne.n	b66e <encode_uint+0x80>
			conv->altform_0 = true;
    b642:	78ab      	ldrb	r3, [r5, #2]
    b644:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    b648:	70ab      	strb	r3, [r5, #2]
}
    b64a:	4648      	mov	r0, r9
    b64c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b650:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    b654:	2b70      	cmp	r3, #112	; 0x70
    b656:	e7d7      	b.n	b608 <encode_uint+0x1a>
	switch (specifier) {
    b658:	2608      	movs	r6, #8
    b65a:	e7d8      	b.n	b60e <encode_uint+0x20>
		value /= radix;
    b65c:	4680      	mov	r8, r0
    b65e:	460f      	mov	r7, r1
    b660:	e7d7      	b.n	b612 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b662:	f1bb 0f19 	cmp.w	fp, #25
    b666:	bf94      	ite	ls
    b668:	3437      	addls	r4, #55	; 0x37
    b66a:	3457      	addhi	r4, #87	; 0x57
    b66c:	e7db      	b.n	b626 <encode_uint+0x38>
		} else if (radix == 16) {
    b66e:	2e10      	cmp	r6, #16
    b670:	d1eb      	bne.n	b64a <encode_uint+0x5c>
			conv->altform_0c = true;
    b672:	78ab      	ldrb	r3, [r5, #2]
    b674:	f043 0310 	orr.w	r3, r3, #16
    b678:	e7e6      	b.n	b648 <encode_uint+0x5a>

0000b67a <outs>:
{
    b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b67e:	4607      	mov	r7, r0
    b680:	4688      	mov	r8, r1
    b682:	4615      	mov	r5, r2
    b684:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b686:	4614      	mov	r4, r2
    b688:	42b4      	cmp	r4, r6
    b68a:	d305      	bcc.n	b698 <outs+0x1e>
    b68c:	b10e      	cbz	r6, b692 <outs+0x18>
	return (int)count;
    b68e:	1b60      	subs	r0, r4, r5
    b690:	e008      	b.n	b6a4 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b692:	7823      	ldrb	r3, [r4, #0]
    b694:	2b00      	cmp	r3, #0
    b696:	d0fa      	beq.n	b68e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    b698:	f814 0b01 	ldrb.w	r0, [r4], #1
    b69c:	4641      	mov	r1, r8
    b69e:	47b8      	blx	r7
		if (rc < 0) {
    b6a0:	2800      	cmp	r0, #0
    b6a2:	daf1      	bge.n	b688 <outs+0xe>
}
    b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b6a8 <ring_buf_put_claim>:

#include <zephyr/sys/ring_buffer.h>
#include <string.h>

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t free_space, wrap_size;
	int32_t base;

	base = buf->put_base;
    b6aa:	68c6      	ldr	r6, [r0, #12]
	wrap_size = buf->put_head - base;
    b6ac:	6845      	ldr	r5, [r0, #4]
	if (unlikely(wrap_size >= buf->size)) {
    b6ae:	69c3      	ldr	r3, [r0, #28]
	wrap_size = buf->put_head - base;
    b6b0:	1baf      	subs	r7, r5, r6
{
    b6b2:	4604      	mov	r4, r0
    b6b4:	6940      	ldr	r0, [r0, #20]
	if (unlikely(wrap_size >= buf->size)) {
    b6b6:	42bb      	cmp	r3, r7
		/* put_base is not yet adjusted */
		wrap_size -= buf->size;
    b6b8:	bf98      	it	ls
    b6ba:	1aff      	subls	r7, r7, r3
    b6bc:	eba5 0000 	sub.w	r0, r5, r0
{
    b6c0:	4694      	mov	ip, r2
		base += buf->size;
    b6c2:	bf98      	it	ls
    b6c4:	18f6      	addls	r6, r6, r3
    b6c6:	1a1a      	subs	r2, r3, r0
	}
	wrap_size = buf->size - wrap_size;
    b6c8:	1bd8      	subs	r0, r3, r7

	free_space = ring_buf_space_get(buf);
	size = MIN(size, free_space);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->put_head - base];
    b6ca:	6823      	ldr	r3, [r4, #0]
    b6cc:	1bad      	subs	r5, r5, r6
	size = MIN(size, free_space);
    b6ce:	4562      	cmp	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    b6d0:	442b      	add	r3, r5
	size = MIN(size, free_space);
    b6d2:	bf28      	it	cs
    b6d4:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->put_head - base];
    b6d6:	600b      	str	r3, [r1, #0]
	buf->put_head += size;
    b6d8:	6863      	ldr	r3, [r4, #4]
	size = MIN(size, wrap_size);
    b6da:	4290      	cmp	r0, r2
    b6dc:	bf28      	it	cs
    b6de:	4610      	movcs	r0, r2
	buf->put_head += size;
    b6e0:	4403      	add	r3, r0
    b6e2:	6063      	str	r3, [r4, #4]

	return size;
}
    b6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b6e6 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->put_head - buf->put_tail;
    b6e6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b6ea:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b6ec:	428a      	cmp	r2, r1
    b6ee:	d30c      	bcc.n	b70a <ring_buf_put_finish+0x24>
		return -EINVAL;
	}

	buf->put_tail += size;
    b6f0:	4419      	add	r1, r3
	buf->put_head = buf->put_tail;

	wrap_size = buf->put_tail - buf->put_base;
    b6f2:	68c3      	ldr	r3, [r0, #12]
	if (unlikely(wrap_size >= buf->size)) {
    b6f4:	69c2      	ldr	r2, [r0, #28]
	buf->put_head = buf->put_tail;
    b6f6:	e9c0 1101 	strd	r1, r1, [r0, #4]
	wrap_size = buf->put_tail - buf->put_base;
    b6fa:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b6fc:	428a      	cmp	r2, r1
    b6fe:	d901      	bls.n	b704 <ring_buf_put_finish+0x1e>
		/* we wrapped: adjust put_base */
		buf->put_base += buf->size;
	}

	return 0;
    b700:	2000      	movs	r0, #0
    b702:	4770      	bx	lr
		buf->put_base += buf->size;
    b704:	4413      	add	r3, r2
    b706:	60c3      	str	r3, [r0, #12]
    b708:	e7fa      	b.n	b700 <ring_buf_put_finish+0x1a>
		return -EINVAL;
    b70a:	f06f 0015 	mvn.w	r0, #21
}
    b70e:	4770      	bx	lr

0000b710 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    b710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b714:	4680      	mov	r8, r0
    b716:	460e      	mov	r6, r1
    b718:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b71a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    b71c:	462a      	mov	r2, r5
    b71e:	a901      	add	r1, sp, #4
    b720:	4640      	mov	r0, r8
    b722:	f7ff ffc1 	bl	b6a8 <ring_buf_put_claim>
		memcpy(dst, data, partial_size);
    b726:	4631      	mov	r1, r6
		partial_size = ring_buf_put_claim(buf, &dst, size);
    b728:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    b72a:	4602      	mov	r2, r0
    b72c:	9801      	ldr	r0, [sp, #4]
    b72e:	f000 fcff 	bl	c130 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
    b732:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
    b734:	4427      	add	r7, r4
		data += partial_size;
    b736:	4426      	add	r6, r4
	} while (size && partial_size);
    b738:	d001      	beq.n	b73e <ring_buf_put+0x2e>
    b73a:	2c00      	cmp	r4, #0
    b73c:	d1ee      	bne.n	b71c <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
    b73e:	4639      	mov	r1, r7
    b740:	4640      	mov	r0, r8
    b742:	f7ff ffd0 	bl	b6e6 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b746:	4638      	mov	r0, r7
    b748:	b002      	add	sp, #8
    b74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b74e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    b74e:	b5f0      	push	{r4, r5, r6, r7, lr}
    b750:	4604      	mov	r4, r0
	uint32_t available_size, wrap_size;
	int32_t base;

	base = buf->get_base;
    b752:	6986      	ldr	r6, [r0, #24]
	wrap_size = buf->get_head - base;
    b754:	6905      	ldr	r5, [r0, #16]
	if (unlikely(wrap_size >= buf->size)) {
    b756:	69c0      	ldr	r0, [r0, #28]
 *
 * @return Ring buffer space used (in bytes).
 */
static inline uint32_t ring_buf_size_get(struct ring_buf *buf)
{
	return buf->put_tail - buf->get_head;
    b758:	68a3      	ldr	r3, [r4, #8]
	wrap_size = buf->get_head - base;
    b75a:	1baf      	subs	r7, r5, r6
	if (unlikely(wrap_size >= buf->size)) {
    b75c:	42b8      	cmp	r0, r7
{
    b75e:	4694      	mov	ip, r2
		/* get_base is not yet adjusted */
		wrap_size -= buf->size;
		base += buf->size;
    b760:	bf98      	it	ls
    b762:	1836      	addls	r6, r6, r0
    b764:	eba3 0205 	sub.w	r2, r3, r5

	available_size = ring_buf_size_get(buf);
	size = MIN(size, available_size);
	size = MIN(size, wrap_size);

	*data = &buf->buffer[buf->get_head - base];
    b768:	6823      	ldr	r3, [r4, #0]
    b76a:	eba5 0506 	sub.w	r5, r5, r6
		wrap_size -= buf->size;
    b76e:	bf98      	it	ls
    b770:	1a3f      	subls	r7, r7, r0
	*data = &buf->buffer[buf->get_head - base];
    b772:	442b      	add	r3, r5
	size = MIN(size, available_size);
    b774:	4562      	cmp	r2, ip
	wrap_size = buf->size - wrap_size;
    b776:	eba0 0007 	sub.w	r0, r0, r7
	size = MIN(size, available_size);
    b77a:	bf28      	it	cs
    b77c:	4662      	movcs	r2, ip
	*data = &buf->buffer[buf->get_head - base];
    b77e:	600b      	str	r3, [r1, #0]
	buf->get_head += size;
    b780:	6923      	ldr	r3, [r4, #16]
	size = MIN(size, wrap_size);
    b782:	4290      	cmp	r0, r2
    b784:	bf28      	it	cs
    b786:	4610      	movcs	r0, r2
	buf->get_head += size;
    b788:	4403      	add	r3, r0
    b78a:	6123      	str	r3, [r4, #16]

	return size;
}
    b78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b78e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	uint32_t finish_space, wrap_size;

	finish_space = buf->get_head - buf->get_tail;
    b78e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    b792:	1ad2      	subs	r2, r2, r3
	if (unlikely(size > finish_space)) {
    b794:	428a      	cmp	r2, r1
    b796:	d30c      	bcc.n	b7b2 <ring_buf_get_finish+0x24>
		return -EINVAL;
	}

	buf->get_tail += size;
    b798:	4419      	add	r1, r3
	buf->get_head = buf->get_tail;

	wrap_size = buf->get_tail - buf->get_base;
	if (unlikely(wrap_size >= buf->size)) {
    b79a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
	buf->get_head = buf->get_tail;
    b79e:	e9c0 1104 	strd	r1, r1, [r0, #16]
	wrap_size = buf->get_tail - buf->get_base;
    b7a2:	1ac9      	subs	r1, r1, r3
	if (unlikely(wrap_size >= buf->size)) {
    b7a4:	428a      	cmp	r2, r1
    b7a6:	d901      	bls.n	b7ac <ring_buf_get_finish+0x1e>
		/* we wrapped: adjust get_base */
		buf->get_base += buf->size;
	}

	return 0;
    b7a8:	2000      	movs	r0, #0
    b7aa:	4770      	bx	lr
		buf->get_base += buf->size;
    b7ac:	4413      	add	r3, r2
    b7ae:	6183      	str	r3, [r0, #24]
    b7b0:	e7fa      	b.n	b7a8 <ring_buf_get_finish+0x1a>
		return -EINVAL;
    b7b2:	f06f 0015 	mvn.w	r0, #21
}
    b7b6:	4770      	bx	lr

0000b7b8 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    b7b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b7bc:	4680      	mov	r8, r0
    b7be:	460d      	mov	r5, r1
    b7c0:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    b7c2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
    b7c4:	4632      	mov	r2, r6
    b7c6:	a901      	add	r1, sp, #4
    b7c8:	4640      	mov	r0, r8
    b7ca:	f7ff ffc0 	bl	b74e <ring_buf_get_claim>
    b7ce:	4604      	mov	r4, r0
		if (data) {
    b7d0:	b12d      	cbz	r5, b7de <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
    b7d2:	4602      	mov	r2, r0
    b7d4:	9901      	ldr	r1, [sp, #4]
    b7d6:	4628      	mov	r0, r5
    b7d8:	f000 fcaa 	bl	c130 <memcpy>
			data += partial_size;
    b7dc:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
    b7de:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
    b7e0:	4427      	add	r7, r4
	} while (size && partial_size);
    b7e2:	d001      	beq.n	b7e8 <ring_buf_get+0x30>
    b7e4:	2c00      	cmp	r4, #0
    b7e6:	d1ed      	bne.n	b7c4 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
    b7e8:	4639      	mov	r1, r7
    b7ea:	4640      	mov	r0, r8
    b7ec:	f7ff ffcf 	bl	b78e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);

	return total_size;
}
    b7f0:	4638      	mov	r0, r7
    b7f2:	b002      	add	sp, #8
    b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b7f8 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    b7f8:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    b7fa:	6903      	ldr	r3, [r0, #16]
{
    b7fc:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    b7fe:	f013 0008 	ands.w	r0, r3, #8
    b802:	d109      	bne.n	b818 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    b804:	6813      	ldr	r3, [r2, #0]
    b806:	68d4      	ldr	r4, [r2, #12]
    b808:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    b80a:	bf97      	itett	ls
    b80c:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    b80e:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    b810:	1ad3      	subls	r3, r2, r3

	return true;
    b812:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    b814:	600b      	str	r3, [r1, #0]
}
    b816:	bd10      	pop	{r4, pc}
    b818:	2300      	movs	r3, #0
		return false;
    b81a:	4618      	mov	r0, r3
    b81c:	e7fa      	b.n	b814 <free_space+0x1c>

0000b81e <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    b81e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    b820:	a901      	add	r1, sp, #4
{
    b822:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    b824:	f7ff ffe8 	bl	b7f8 <free_space>
    b828:	b120      	cbz	r0, b834 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    b82a:	9b01      	ldr	r3, [sp, #4]
    b82c:	68e2      	ldr	r2, [r4, #12]
    b82e:	3b01      	subs	r3, #1
    b830:	4413      	add	r3, r2
    b832:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    b834:	6a20      	ldr	r0, [r4, #32]
    b836:	9b01      	ldr	r3, [sp, #4]
    b838:	1ac0      	subs	r0, r0, r3
}
    b83a:	3801      	subs	r0, #1
    b83c:	b002      	add	sp, #8
    b83e:	bd10      	pop	{r4, pc}

0000b840 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    b840:	b510      	push	{r4, lr}
    b842:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    b844:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    b846:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    b848:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    b84a:	07d2      	lsls	r2, r2, #31
    b84c:	d502      	bpl.n	b854 <idx_inc+0x14>
		return i & (buffer->size - 1);
    b84e:	3b01      	subs	r3, #1
    b850:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    b852:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    b854:	4298      	cmp	r0, r3
    b856:	bf28      	it	cs
    b858:	1ac0      	subcs	r0, r0, r3
    b85a:	e7fa      	b.n	b852 <idx_inc+0x12>

0000b85c <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    b85c:	b510      	push	{r4, lr}
    b85e:	4604      	mov	r4, r0
    b860:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    b862:	68c1      	ldr	r1, [r0, #12]
    b864:	f7ff ffec 	bl	b840 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    b868:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    b86a:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    b86c:	f023 0308 	bic.w	r3, r3, #8
    b870:	6123      	str	r3, [r4, #16]
}
    b872:	bd10      	pop	{r4, pc}

0000b874 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    b874:	b538      	push	{r3, r4, r5, lr}
    b876:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b878:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    b87a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b87c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    b87e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b882:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    b886:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b888:	6801      	ldr	r1, [r0, #0]
    b88a:	462a      	mov	r2, r5
    b88c:	f7ff ffd8 	bl	b840 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b890:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b892:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b894:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b896:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    b898:	bf02      	ittt	eq
    b89a:	6923      	ldreq	r3, [r4, #16]
    b89c:	f043 0308 	orreq.w	r3, r3, #8
    b8a0:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b8a2:	462a      	mov	r2, r5
    b8a4:	4620      	mov	r0, r4
    b8a6:	f7ff ffcb 	bl	b840 <idx_inc>
    b8aa:	6060      	str	r0, [r4, #4]
}
    b8ac:	bd38      	pop	{r3, r4, r5, pc}

0000b8ae <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    b8ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    b8b2:	68c7      	ldr	r7, [r0, #12]
    b8b4:	69c6      	ldr	r6, [r0, #28]
{
    b8b6:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    b8b8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    b8bc:	f003 0303 	and.w	r3, r3, #3
    b8c0:	2b02      	cmp	r3, #2
{
    b8c2:	4604      	mov	r4, r0
    b8c4:	4688      	mov	r8, r1
    b8c6:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    b8c8:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    b8cc:	f04f 0300 	mov.w	r3, #0
    b8d0:	d009      	beq.n	b8e6 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    b8d2:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    b8d4:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    b8d8:	6923      	ldr	r3, [r4, #16]
    b8da:	0799      	lsls	r1, r3, #30
    b8dc:	d410      	bmi.n	b900 <drop_item_locked+0x52>
		return false;
    b8de:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    b8e0:	b003      	add	sp, #12
    b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    b8e6:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    b8ea:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    b8ec:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    b8ee:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    b8f2:	d0f1      	beq.n	b8d8 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    b8f4:	f7ff ffb2 	bl	b85c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    b8f8:	68e3      	ldr	r3, [r4, #12]
    b8fa:	60a3      	str	r3, [r4, #8]
		return true;
    b8fc:	2001      	movs	r0, #1
    b8fe:	e7ef      	b.n	b8e0 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    b900:	69a3      	ldr	r3, [r4, #24]
    b902:	4650      	mov	r0, sl
    b904:	4798      	blx	r3
	return item->hdr.valid;
    b906:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    b90a:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    b90c:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    b90e:	d5e6      	bpl.n	b8de <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    b910:	f013 0302 	ands.w	r3, r3, #2
    b914:	d01d      	beq.n	b952 <drop_item_locked+0xa4>
		if (free_wlen) {
    b916:	f1b8 0f00 	cmp.w	r8, #0
    b91a:	d003      	beq.n	b924 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    b91c:	4641      	mov	r1, r8
    b91e:	4620      	mov	r0, r4
    b920:	f7ff ffa8 	bl	b874 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    b924:	6861      	ldr	r1, [r4, #4]
    b926:	462a      	mov	r2, r5
    b928:	4620      	mov	r0, r4
    b92a:	f7ff ff89 	bl	b840 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    b92e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    b932:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    b934:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    b936:	d104      	bne.n	b942 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    b938:	462a      	mov	r2, r5
    b93a:	4620      	mov	r0, r4
    b93c:	f7ff ff80 	bl	b840 <idx_inc>
    b940:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    b942:	68a3      	ldr	r3, [r4, #8]
    b944:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    b946:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    b948:	6923      	ldr	r3, [r4, #16]
    b94a:	f043 0308 	orr.w	r3, r3, #8
    b94e:	6123      	str	r3, [r4, #16]
    b950:	e7d4      	b.n	b8fc <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    b952:	4601      	mov	r1, r0
    b954:	4620      	mov	r0, r4
    b956:	9301      	str	r3, [sp, #4]
    b958:	f7ff ff80 	bl	b85c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    b95c:	68e2      	ldr	r2, [r4, #12]
    b95e:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    b960:	f1b8 0f00 	cmp.w	r8, #0
    b964:	d004      	beq.n	b970 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    b966:	6821      	ldr	r1, [r4, #0]
    b968:	69e2      	ldr	r2, [r4, #28]
    b96a:	9b01      	ldr	r3, [sp, #4]
    b96c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    b970:	eb05 0208 	add.w	r2, r5, r8
    b974:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    b978:	6821      	ldr	r1, [r4, #0]
    b97a:	4620      	mov	r0, r4
    b97c:	f7ff ff60 	bl	b840 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    b980:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    b982:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    b984:	f043 0308 	orr.w	r3, r3, #8
    b988:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    b98a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    b98e:	f36f 0300 	bfc	r3, #0, #1
    b992:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    b996:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    b99a:	e7af      	b.n	b8fc <drop_item_locked+0x4e>

0000b99c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    b99c:	b570      	push	{r4, r5, r6, lr}
    b99e:	4604      	mov	r4, r0
    b9a0:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    b9a2:	f7ff ff4d 	bl	b840 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    b9a6:	6823      	ldr	r3, [r4, #0]
    b9a8:	4283      	cmp	r3, r0
    b9aa:	d105      	bne.n	b9b8 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    b9ac:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    b9ae:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    b9b0:	f023 0308 	bic.w	r3, r3, #8
    b9b4:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    b9b6:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    b9b8:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    b9ba:	00ab      	lsls	r3, r5, #2
    b9bc:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    b9c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    b9c4:	4620      	mov	r0, r4
    b9c6:	6861      	ldr	r1, [r4, #4]
    b9c8:	462a      	mov	r2, r5
    b9ca:	f7ff ff39 	bl	b840 <idx_inc>
    b9ce:	6060      	str	r0, [r4, #4]
    b9d0:	e7f1      	b.n	b9b6 <post_drop_action+0x1a>

0000b9d2 <max_utilization_update>:
{
    b9d2:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    b9d4:	6903      	ldr	r3, [r0, #16]
    b9d6:	075b      	lsls	r3, r3, #29
{
    b9d8:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    b9da:	d506      	bpl.n	b9ea <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    b9dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b9de:	f7ff ff1e 	bl	b81e <get_usage>
    b9e2:	4285      	cmp	r5, r0
    b9e4:	bf2c      	ite	cs
    b9e6:	6265      	strcs	r5, [r4, #36]	; 0x24
    b9e8:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    b9ea:	bd38      	pop	{r3, r4, r5, pc}

0000b9ec <mpsc_pbuf_init>:
{
    b9ec:	b538      	push	{r3, r4, r5, lr}
    b9ee:	460d      	mov	r5, r1
    b9f0:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    b9f2:	221c      	movs	r2, #28
    b9f4:	2100      	movs	r1, #0
    b9f6:	f000 fba6 	bl	c146 <memset>
	buffer->get_wlen = cfg->get_wlen;
    b9fa:	68eb      	ldr	r3, [r5, #12]
    b9fc:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    b9fe:	68ab      	ldr	r3, [r5, #8]
    ba00:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    ba02:	682b      	ldr	r3, [r5, #0]
    ba04:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    ba06:	686b      	ldr	r3, [r5, #4]
    ba08:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    ba0a:	2200      	movs	r2, #0
    ba0c:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    ba0e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    ba10:	b123      	cbz	r3, ba1c <mpsc_pbuf_init+0x30>
    ba12:	1e59      	subs	r1, r3, #1
    ba14:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    ba16:	bf08      	it	eq
    ba18:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    ba1c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ba1e:	2201      	movs	r2, #1
    ba20:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ba24:	2100      	movs	r1, #0
}
    ba26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ba2a:	f000 bffa 	b.w	ca22 <z_impl_k_sem_init>

0000ba2e <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    ba2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba32:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    ba34:	2500      	movs	r5, #0
{
    ba36:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    ba38:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    ba3a:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    ba3c:	428b      	cmp	r3, r1
{
    ba3e:	4604      	mov	r4, r0
    ba40:	460e      	mov	r6, r1
    ba42:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    ba44:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    ba46:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    ba48:	d33a      	bcc.n	bac0 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    ba4a:	f04f 0320 	mov.w	r3, #32
    ba4e:	f3ef 8b11 	mrs	fp, BASEPRI
    ba52:	f383 8812 	msr	BASEPRI_MAX, r3
    ba56:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    ba5a:	9a05      	ldr	r2, [sp, #20]
    ba5c:	46d8      	mov	r8, fp
    ba5e:	b12a      	cbz	r2, ba6c <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    ba60:	4629      	mov	r1, r5
    ba62:	4620      	mov	r0, r4
    ba64:	f7ff ff9a 	bl	b99c <post_drop_action>
			tmp_wr_idx_shift = 0;
    ba68:	2300      	movs	r3, #0
    ba6a:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    ba6c:	a904      	add	r1, sp, #16
    ba6e:	4620      	mov	r0, r4
    ba70:	f7ff fec2 	bl	b7f8 <free_space>

		if (free_wlen >= wlen) {
    ba74:	9904      	ldr	r1, [sp, #16]
    ba76:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    ba78:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    ba7a:	d32a      	bcc.n	bad2 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    ba7c:	6822      	ldr	r2, [r4, #0]
			item =
    ba7e:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    ba80:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    ba84:	f021 0103 	bic.w	r1, r1, #3
    ba88:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    ba8c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ba90:	6821      	ldr	r1, [r4, #0]
    ba92:	4632      	mov	r2, r6
    ba94:	4620      	mov	r0, r4
    ba96:	f7ff fed3 	bl	b840 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ba9a:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    ba9c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    ba9e:	4298      	cmp	r0, r3
    baa0:	d012      	beq.n	bac8 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    baa2:	2700      	movs	r7, #0
	__asm__ volatile(
    baa4:	f388 8811 	msr	BASEPRI, r8
    baa8:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    baac:	9903      	ldr	r1, [sp, #12]
    baae:	b129      	cbz	r1, babc <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    bab0:	6962      	ldr	r2, [r4, #20]
    bab2:	b10a      	cbz	r2, bab8 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    bab4:	4620      	mov	r0, r4
    bab6:	4790      	blx	r2
			}
			dropped_item = NULL;
    bab8:	2300      	movs	r3, #0
    baba:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    babc:	2f00      	cmp	r7, #0
    babe:	d1c4      	bne.n	ba4a <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    bac0:	4648      	mov	r0, r9
    bac2:	b007      	add	sp, #28
    bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    bac8:	6923      	ldr	r3, [r4, #16]
    baca:	f043 0308 	orr.w	r3, r3, #8
    bace:	6123      	str	r3, [r4, #16]
    bad0:	e7e7      	b.n	baa2 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    bad2:	b118      	cbz	r0, badc <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    bad4:	4620      	mov	r0, r4
    bad6:	f7ff fecd 	bl	b874 <add_skip_item>
			cont = true;
    bada:	e7e3      	b.n	baa4 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    badc:	9b00      	ldr	r3, [sp, #0]
    bade:	ea5a 0303 	orrs.w	r3, sl, r3
    bae2:	d01a      	beq.n	bb1a <mpsc_pbuf_alloc+0xec>
    bae4:	9101      	str	r1, [sp, #4]
    bae6:	f000 ff00 	bl	c8ea <k_is_in_isr>
    baea:	9901      	ldr	r1, [sp, #4]
    baec:	b9a8      	cbnz	r0, bb1a <mpsc_pbuf_alloc+0xec>
    baee:	f38b 8811 	msr	BASEPRI, fp
    baf2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    baf6:	9b00      	ldr	r3, [sp, #0]
    baf8:	4652      	mov	r2, sl
    bafa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    bafe:	f7fe f8c1 	bl	9c84 <z_impl_k_sem_take>
	__asm__ volatile(
    bb02:	f04f 0320 	mov.w	r3, #32
    bb06:	f3ef 8811 	mrs	r8, BASEPRI
    bb0a:	f383 8812 	msr	BASEPRI_MAX, r3
    bb0e:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    bb12:	fab0 f780 	clz	r7, r0
    bb16:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    bb18:	e7c4      	b.n	baa4 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    bb1a:	ab05      	add	r3, sp, #20
    bb1c:	aa03      	add	r2, sp, #12
    bb1e:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    bb20:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    bb22:	f7ff fec4 	bl	b8ae <drop_item_locked>
    bb26:	4607      	mov	r7, r0
    bb28:	e7bc      	b.n	baa4 <mpsc_pbuf_alloc+0x76>

0000bb2a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    bb2a:	b570      	push	{r4, r5, r6, lr}
    bb2c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    bb2e:	6983      	ldr	r3, [r0, #24]
    bb30:	4608      	mov	r0, r1
{
    bb32:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    bb34:	4798      	blx	r3
    bb36:	4602      	mov	r2, r0
    bb38:	f04f 0320 	mov.w	r3, #32
    bb3c:	f3ef 8611 	mrs	r6, BASEPRI
    bb40:	f383 8812 	msr	BASEPRI_MAX, r3
    bb44:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    bb48:	782b      	ldrb	r3, [r5, #0]
    bb4a:	f043 0301 	orr.w	r3, r3, #1
    bb4e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    bb50:	6861      	ldr	r1, [r4, #4]
    bb52:	4620      	mov	r0, r4
    bb54:	f7ff fe74 	bl	b840 <idx_inc>
    bb58:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    bb5a:	4620      	mov	r0, r4
    bb5c:	f7ff ff39 	bl	b9d2 <max_utilization_update>
	__asm__ volatile(
    bb60:	f386 8811 	msr	BASEPRI, r6
    bb64:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    bb68:	bd70      	pop	{r4, r5, r6, pc}

0000bb6a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    bb6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb6c:	4604      	mov	r4, r0
	__asm__ volatile(
    bb6e:	f04f 0320 	mov.w	r3, #32
    bb72:	f3ef 8611 	mrs	r6, BASEPRI
    bb76:	f383 8812 	msr	BASEPRI_MAX, r3
    bb7a:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    bb7e:	6923      	ldr	r3, [r4, #16]
    bb80:	f013 0f08 	tst.w	r3, #8
    bb84:	68a3      	ldr	r3, [r4, #8]
    bb86:	d102      	bne.n	bb8e <mpsc_pbuf_claim+0x24>
    bb88:	6862      	ldr	r2, [r4, #4]
    bb8a:	4293      	cmp	r3, r2
    bb8c:	d900      	bls.n	bb90 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    bb8e:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    bb90:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    bb92:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    bb94:	b92a      	cbnz	r2, bba2 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    bb96:	f386 8811 	msr	BASEPRI, r6
    bb9a:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    bb9e:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    bba0:	e033      	b.n	bc0a <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    bba2:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    bba6:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    bbaa:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    bbae:	d0f2      	beq.n	bb96 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    bbb0:	2802      	cmp	r0, #2
    bbb2:	d103      	bne.n	bbbc <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    bbb4:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    bbb8:	08ad      	lsrs	r5, r5, #2
    bbba:	d105      	bne.n	bbc8 <mpsc_pbuf_claim+0x5e>
    bbbc:	07d0      	lsls	r0, r2, #31
    bbbe:	d412      	bmi.n	bbe6 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    bbc0:	69a3      	ldr	r3, [r4, #24]
    bbc2:	4638      	mov	r0, r7
    bbc4:	4798      	blx	r3
    bbc6:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    bbc8:	68a1      	ldr	r1, [r4, #8]
    bbca:	462a      	mov	r2, r5
    bbcc:	4620      	mov	r0, r4
    bbce:	f7ff fe37 	bl	b840 <idx_inc>
				rd_idx_inc(buffer, inc);
    bbd2:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    bbd4:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    bbd6:	4620      	mov	r0, r4
    bbd8:	f7ff fe40 	bl	b85c <rd_idx_inc>
    bbdc:	f386 8811 	msr	BASEPRI, r6
    bbe0:	f3bf 8f6f 	isb	sy
	} while (cont);
    bbe4:	e7c3      	b.n	bb6e <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    bbe6:	f042 0202 	orr.w	r2, r2, #2
    bbea:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    bbee:	4638      	mov	r0, r7
    bbf0:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    bbf2:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    bbf4:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    bbf6:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    bbf8:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    bbfa:	4620      	mov	r0, r4
    bbfc:	f7ff fe20 	bl	b840 <idx_inc>
				buffer->tmp_rd_idx =
    bc00:	60a0      	str	r0, [r4, #8]
    bc02:	f386 8811 	msr	BASEPRI, r6
    bc06:	f3bf 8f6f 	isb	sy
}
    bc0a:	4638      	mov	r0, r7
    bc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bc0e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    bc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc10:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    bc12:	6983      	ldr	r3, [r0, #24]
    bc14:	4608      	mov	r0, r1
{
    bc16:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    bc18:	4798      	blx	r3
    bc1a:	4606      	mov	r6, r0
	__asm__ volatile(
    bc1c:	f04f 0320 	mov.w	r3, #32
    bc20:	f3ef 8711 	mrs	r7, BASEPRI
    bc24:	f383 8812 	msr	BASEPRI_MAX, r3
    bc28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    bc2c:	782b      	ldrb	r3, [r5, #0]
    bc2e:	f36f 0300 	bfc	r3, #0, #1
    bc32:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    bc34:	6923      	ldr	r3, [r4, #16]
    bc36:	079b      	lsls	r3, r3, #30
    bc38:	d505      	bpl.n	bc46 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    bc3a:	68e2      	ldr	r2, [r4, #12]
    bc3c:	69e3      	ldr	r3, [r4, #28]
    bc3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    bc42:	429d      	cmp	r5, r3
    bc44:	d11a      	bne.n	bc7c <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    bc46:	782b      	ldrb	r3, [r5, #0]
    bc48:	f36f 0341 	bfc	r3, #1, #1
    bc4c:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    bc4e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    bc52:	4299      	cmp	r1, r3
    bc54:	d104      	bne.n	bc60 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    bc56:	4632      	mov	r2, r6
    bc58:	4620      	mov	r0, r4
    bc5a:	f7ff fdf1 	bl	b840 <idx_inc>
    bc5e:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    bc60:	4631      	mov	r1, r6
    bc62:	4620      	mov	r0, r4
    bc64:	f7ff fdfa 	bl	b85c <rd_idx_inc>
	__asm__ volatile(
    bc68:	f387 8811 	msr	BASEPRI, r7
    bc6c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    bc70:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    bc74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bc78:	f7fd bfe4 	b.w	9c44 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    bc7c:	682b      	ldr	r3, [r5, #0]
    bc7e:	f360 039f 	bfi	r3, r0, #2, #30
    bc82:	602b      	str	r3, [r5, #0]
    bc84:	e7f0      	b.n	bc68 <mpsc_pbuf_free+0x5a>

0000bc86 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    bc86:	6902      	ldr	r2, [r0, #16]
    bc88:	6883      	ldr	r3, [r0, #8]
    bc8a:	0712      	lsls	r2, r2, #28
    bc8c:	d402      	bmi.n	bc94 <mpsc_pbuf_is_pending+0xe>
    bc8e:	6842      	ldr	r2, [r0, #4]
    bc90:	429a      	cmp	r2, r3
    bc92:	d200      	bcs.n	bc96 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    bc94:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    bc96:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    bc98:	1e18      	subs	r0, r3, #0
    bc9a:	bf18      	it	ne
    bc9c:	2001      	movne	r0, #1
    bc9e:	4770      	bx	lr

0000bca0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    bca0:	4770      	bx	lr

0000bca2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    bca2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    bca4:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    bca6:	bf5f      	itttt	pl
    bca8:	6803      	ldrpl	r3, [r0, #0]
    bcaa:	8842      	ldrhpl	r2, [r0, #2]
    bcac:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    bcb0:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    bcb4:	bf5d      	ittte	pl
    bcb6:	3017      	addpl	r0, #23
    bcb8:	f020 0007 	bicpl.w	r0, r0, #7
    bcbc:	0880      	lsrpl	r0, r0, #2
	return 0;
    bcbe:	2000      	movmi	r0, #0
}
    bcc0:	4770      	bx	lr

0000bcc2 <dummy_timestamp>:
}
    bcc2:	2000      	movs	r0, #0
    bcc4:	4770      	bx	lr

0000bcc6 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    bcc6:	f000 bc04 	b.w	c4d2 <sys_clock_cycle_get_32>

0000bcca <atomic_inc>:
{
    bcca:	4603      	mov	r3, r0
}
    bccc:	f3bf 8f5b 	dmb	ish
    bcd0:	e853 0f00 	ldrex	r0, [r3]
    bcd4:	1c42      	adds	r2, r0, #1
    bcd6:	e843 2100 	strex	r1, r2, [r3]
    bcda:	2900      	cmp	r1, #0
    bcdc:	d1f8      	bne.n	bcd0 <atomic_inc+0x6>
    bcde:	f3bf 8f5b 	dmb	ish
    bce2:	4770      	bx	lr

0000bce4 <z_log_vprintk>:
{
    bce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    bce6:	2300      	movs	r3, #0
    bce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    bcec:	e9cd 3300 	strd	r3, r3, [sp]
    bcf0:	461a      	mov	r2, r3
    bcf2:	4619      	mov	r1, r3
    bcf4:	4618      	mov	r0, r3
    bcf6:	f7f6 ff91 	bl	2c1c <z_impl_z_log_msg_runtime_vcreate>
}
    bcfa:	b005      	add	sp, #20
    bcfc:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd00 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    bd00:	2001      	movs	r0, #1
    bd02:	f7f6 bd43 	b.w	278c <z_log_dropped>

0000bd06 <z_log_get_tag>:
}
    bd06:	2000      	movs	r0, #0
    bd08:	4770      	bx	lr

0000bd0a <z_cbprintf_cpy>:
{
    bd0a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    bd0c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    bd10:	1b9b      	subs	r3, r3, r6
    bd12:	428b      	cmp	r3, r1
{
    bd14:	460c      	mov	r4, r1
    bd16:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    bd18:	d30a      	bcc.n	bd30 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    bd1a:	6813      	ldr	r3, [r2, #0]
    bd1c:	460a      	mov	r2, r1
    bd1e:	4601      	mov	r1, r0
    bd20:	1998      	adds	r0, r3, r6
    bd22:	f000 fa05 	bl	c130 <memcpy>
	desc->off += len;
    bd26:	68ab      	ldr	r3, [r5, #8]
    bd28:	4423      	add	r3, r4
    bd2a:	60ab      	str	r3, [r5, #8]
	return len;
    bd2c:	4620      	mov	r0, r4
}
    bd2e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    bd30:	f06f 001b 	mvn.w	r0, #27
    bd34:	e7fb      	b.n	bd2e <z_cbprintf_cpy+0x24>

0000bd36 <z_log_msg_finalize>:
{
    bd36:	b570      	push	{r4, r5, r6, lr}
    bd38:	460e      	mov	r6, r1
    bd3a:	4615      	mov	r5, r2
    bd3c:	4619      	mov	r1, r3
	if (!msg) {
    bd3e:	4604      	mov	r4, r0
    bd40:	b918      	cbnz	r0, bd4a <z_log_msg_finalize+0x14>
}
    bd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    bd46:	f7f6 bd21 	b.w	278c <z_log_dropped>
	if (data) {
    bd4a:	b133      	cbz	r3, bd5a <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    bd4c:	f3c2 234a 	ubfx	r3, r2, #9, #11
    bd50:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    bd52:	0d12      	lsrs	r2, r2, #20
    bd54:	4418      	add	r0, r3
    bd56:	f000 f9eb 	bl	c130 <memcpy>
	msg->hdr.source = source;
    bd5a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    bd5e:	4620      	mov	r0, r4
}
    bd60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    bd64:	f7f6 bea2 	b.w	2aac <z_log_msg_commit>

0000bd68 <buffer_write>:
{
    bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd6a:	4606      	mov	r6, r0
    bd6c:	460d      	mov	r5, r1
    bd6e:	4614      	mov	r4, r2
    bd70:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    bd72:	4621      	mov	r1, r4
    bd74:	4628      	mov	r0, r5
    bd76:	463a      	mov	r2, r7
    bd78:	47b0      	blx	r6
	} while (len != 0);
    bd7a:	1a24      	subs	r4, r4, r0
		buf += processed;
    bd7c:	4405      	add	r5, r0
	} while (len != 0);
    bd7e:	d1f8      	bne.n	bd72 <buffer_write+0xa>
}
    bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bd82 <cbvprintf>:
{
    bd82:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    bd84:	2400      	movs	r4, #0
    bd86:	9400      	str	r4, [sp, #0]
    bd88:	f7f6 f862 	bl	1e50 <z_cbvprintf_impl>
}
    bd8c:	b002      	add	sp, #8
    bd8e:	bd10      	pop	{r4, pc}

0000bd90 <log_output_flush>:
{
    bd90:	b510      	push	{r4, lr}
		     output->control_block->offset,
    bd92:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    bd94:	6881      	ldr	r1, [r0, #8]
{
    bd96:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    bd98:	e9d2 2300 	ldrd	r2, r3, [r2]
    bd9c:	6800      	ldr	r0, [r0, #0]
    bd9e:	f7ff ffe3 	bl	bd68 <buffer_write>
	output->control_block->offset = 0;
    bda2:	6863      	ldr	r3, [r4, #4]
    bda4:	2200      	movs	r2, #0
    bda6:	601a      	str	r2, [r3, #0]
}
    bda8:	bd10      	pop	{r4, pc}

0000bdaa <out_func>:
{
    bdaa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    bdac:	684b      	ldr	r3, [r1, #4]
    bdae:	681a      	ldr	r2, [r3, #0]
    bdb0:	68cb      	ldr	r3, [r1, #12]
    bdb2:	429a      	cmp	r2, r3
{
    bdb4:	4605      	mov	r5, r0
    bdb6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    bdb8:	d102      	bne.n	bdc0 <out_func+0x16>
		log_output_flush(out_ctx);
    bdba:	4608      	mov	r0, r1
    bdbc:	f7ff ffe8 	bl	bd90 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bdc0:	6863      	ldr	r3, [r4, #4]
    bdc2:	f3bf 8f5b 	dmb	ish
    bdc6:	e853 2f00 	ldrex	r2, [r3]
    bdca:	1c51      	adds	r1, r2, #1
    bdcc:	e843 1000 	strex	r0, r1, [r3]
    bdd0:	2800      	cmp	r0, #0
    bdd2:	d1f8      	bne.n	bdc6 <out_func+0x1c>
    bdd4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    bdd8:	68a3      	ldr	r3, [r4, #8]
    bdda:	549d      	strb	r5, [r3, r2]
}
    bddc:	2000      	movs	r0, #0
    bdde:	bd38      	pop	{r3, r4, r5, pc}

0000bde0 <cr_out_func>:
	if (c == '\n') {
    bde0:	280a      	cmp	r0, #10
{
    bde2:	b538      	push	{r3, r4, r5, lr}
    bde4:	4604      	mov	r4, r0
    bde6:	460d      	mov	r5, r1
	if (c == '\n') {
    bde8:	d102      	bne.n	bdf0 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    bdea:	200d      	movs	r0, #13
    bdec:	f7ff ffdd 	bl	bdaa <out_func>
	out_func(c, ctx);
    bdf0:	4629      	mov	r1, r5
    bdf2:	4620      	mov	r0, r4
    bdf4:	f7ff ffd9 	bl	bdaa <out_func>
}
    bdf8:	2000      	movs	r0, #0
    bdfa:	bd38      	pop	{r3, r4, r5, pc}

0000bdfc <log_backend_uart_init>:
}
    bdfc:	4770      	bx	lr

0000bdfe <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    bdfe:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    be02:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    be06:	d001      	beq.n	be0c <get_ep_bm_from_addr+0xe>
    be08:	f7f7 bb90 	b.w	352c <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    be0c:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    be10:	bf18      	it	ne
    be12:	3210      	addne	r2, #16
    be14:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    be16:	4090      	lsls	r0, r2
}
    be18:	4770      	bx	lr

0000be1a <usb_write>:
{
    be1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be1e:	4606      	mov	r6, r0
    be20:	460f      	mov	r7, r1
    be22:	4690      	mov	r8, r2
    be24:	4699      	mov	r9, r3
    be26:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    be28:	464b      	mov	r3, r9
    be2a:	4642      	mov	r2, r8
    be2c:	4639      	mov	r1, r7
    be2e:	4630      	mov	r0, r6
    be30:	f7fa f98c 	bl	614c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    be34:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    be38:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    be3a:	d103      	bne.n	be44 <usb_write+0x2a>
	z_impl_k_yield();
    be3c:	f7fe fae2 	bl	a404 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    be40:	3d01      	subs	r5, #1
    be42:	d1f1      	bne.n	be28 <usb_write+0xe>
}
    be44:	4620      	mov	r0, r4
    be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000be4a <usb_get_dev_data_by_cfg>:
	return list->head;
    be4a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be4c:	b140      	cbz	r0, be60 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    be4e:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    be52:	685b      	ldr	r3, [r3, #4]
    be54:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be56:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    be5a:	d001      	beq.n	be60 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    be5c:	6840      	ldr	r0, [r0, #4]
    be5e:	e7f5      	b.n	be4c <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    be60:	4770      	bx	lr

0000be62 <usb_get_dev_data_by_iface>:
	return list->head;
    be62:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be64:	b150      	cbz	r0, be7c <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    be66:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    be6a:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    be6c:	685b      	ldr	r3, [r3, #4]
    be6e:	789b      	ldrb	r3, [r3, #2]
    be70:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be72:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    be76:	d001      	beq.n	be7c <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    be78:	6840      	ldr	r0, [r0, #4]
    be7a:	e7f3      	b.n	be64 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    be7c:	4770      	bx	lr

0000be7e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    be7e:	b530      	push	{r4, r5, lr}
	return list->head;
    be80:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be82:	b188      	cbz	r0, bea8 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    be84:	f850 3c04 	ldr.w	r3, [r0, #-4]
    be88:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    be8a:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    be8c:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    be8e:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    be90:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    be92:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    be94:	b2dc      	uxtb	r4, r3
    be96:	42a5      	cmp	r5, r4
    be98:	d801      	bhi.n	be9e <usb_get_dev_data_by_ep+0x20>
	return node->next;
    be9a:	6840      	ldr	r0, [r0, #4]
    be9c:	e7f1      	b.n	be82 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    be9e:	3301      	adds	r3, #1
    bea0:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    bea4:	428c      	cmp	r4, r1
    bea6:	d1f5      	bne.n	be94 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    bea8:	bd30      	pop	{r4, r5, pc}

0000beaa <usb_transfer_is_busy>:
{
    beaa:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    beac:	f7f8 f878 	bl	3fa0 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    beb0:	b128      	cbz	r0, bebe <usb_transfer_is_busy+0x14>
    beb2:	6840      	ldr	r0, [r0, #4]
    beb4:	f110 0f10 	cmn.w	r0, #16
    beb8:	bf14      	ite	ne
    beba:	2000      	movne	r0, #0
    bebc:	2001      	moveq	r0, #1
}
    bebe:	bd08      	pop	{r3, pc}

0000bec0 <cdc_interface_config>:
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    bec0:	1c4b      	adds	r3, r1, #1
    bec2:	b2db      	uxtb	r3, r3
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    bec4:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    bec6:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    bec8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    becc:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    bece:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    bed2:	4770      	bx	lr

0000bed4 <cdc_acm_irq_callback_work_handler>:
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    bed4:	e950 3102 	ldrd	r3, r1, [r0, #-8]
    bed8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    bedc:	4718      	bx	r3

0000bede <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bede:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    bee0:	2200      	movs	r2, #0
    bee2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
    bee6:	4770      	bx	lr

0000bee8 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bee8:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    beea:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    beee:	b108      	cbz	r0, bef4 <cdc_acm_irq_tx_ready+0xc>
    bef0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    bef4:	4770      	bx	lr

0000bef6 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bef6:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    bef8:	2200      	movs	r2, #0
    befa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
    befe:	4770      	bx	lr

0000bf00 <cdc_acm_irq_rx_ready>:
	if (dev_data->rx_ready) {
    bf00:	6903      	ldr	r3, [r0, #16]
}
    bf02:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    bf06:	4770      	bx	lr

0000bf08 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bf08:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    bf0a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    bf0e:	b112      	cbz	r2, bf16 <cdc_acm_irq_is_pending+0xe>
    bf10:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    bf14:	b92a      	cbnz	r2, bf22 <cdc_acm_irq_is_pending+0x1a>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    bf16:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    bf1a:	b118      	cbz	r0, bf24 <cdc_acm_irq_is_pending+0x1c>
    bf1c:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
    bf20:	4770      	bx	lr
		return 1;
    bf22:	2001      	movs	r0, #1
}
    bf24:	4770      	bx	lr

0000bf26 <cdc_acm_irq_update>:
}
    bf26:	2001      	movs	r0, #1
    bf28:	4770      	bx	lr

0000bf2a <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bf2a:	6903      	ldr	r3, [r0, #16]
	dev_data->cb_data = cb_data;
    bf2c:	e9c3 1200 	strd	r1, r2, [r3]
}
    bf30:	4770      	bx	lr

0000bf32 <cdc_acm_line_ctrl_get>:
	switch (ctrl) {
    bf32:	2902      	cmp	r1, #2
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bf34:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    bf36:	d008      	beq.n	bf4a <cdc_acm_line_ctrl_get+0x18>
    bf38:	2904      	cmp	r1, #4
    bf3a:	d00b      	beq.n	bf54 <cdc_acm_line_ctrl_get+0x22>
    bf3c:	2901      	cmp	r1, #1
    bf3e:	d10e      	bne.n	bf5e <cdc_acm_line_ctrl_get+0x2c>
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    bf40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
		*val = (dev_data->line_state &
    bf44:	6013      	str	r3, [r2, #0]
		return 0;
    bf46:	2000      	movs	r0, #0
    bf48:	4770      	bx	lr
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    bf4a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    bf4e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		return 0;
    bf52:	e7f7      	b.n	bf44 <cdc_acm_line_ctrl_get+0x12>
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    bf54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
    bf58:	f003 0301 	and.w	r3, r3, #1
		return 0;
    bf5c:	e7f2      	b.n	bf44 <cdc_acm_line_ctrl_get+0x12>
	switch (ctrl) {
    bf5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    bf62:	4770      	bx	lr

0000bf64 <cdc_acm_configure>:
}
    bf64:	2000      	movs	r0, #0
    bf66:	4770      	bx	lr

0000bf68 <cdc_acm_config_get>:
{
    bf68:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bf6a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    bf6c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    bf70:	600a      	str	r2, [r1, #0]
	switch (dev_data->line_coding.bCharFormat) {
    bf72:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    bf76:	b16a      	cbz	r2, bf94 <cdc_acm_config_get+0x2c>
    bf78:	2a01      	cmp	r2, #1
    bf7a:	bf0c      	ite	eq
    bf7c:	2202      	moveq	r2, #2
    bf7e:	2203      	movne	r2, #3
		cfg->stop_bits = UART_CFG_STOP_BITS_1;
    bf80:	714a      	strb	r2, [r1, #5]
	switch (dev_data->line_coding.bParityType) {
    bf82:	f893 2099 	ldrb.w	r2, [r3, #153]	; 0x99
    bf86:	1e50      	subs	r0, r2, #1
    bf88:	2803      	cmp	r0, #3
    bf8a:	d805      	bhi.n	bf98 <cdc_acm_config_get+0x30>
    bf8c:	e8df f000 	tbb	[pc, r0]
    bf90:	05050505 	.word	0x05050505
	switch (dev_data->line_coding.bCharFormat) {
    bf94:	2201      	movs	r2, #1
    bf96:	e7f3      	b.n	bf80 <cdc_acm_config_get+0x18>
	switch (dev_data->line_coding.bParityType) {
    bf98:	2200      	movs	r2, #0
		cfg->parity = UART_CFG_PARITY_NONE;
    bf9a:	710a      	strb	r2, [r1, #4]
	switch (dev_data->line_coding.bDataBits) {
    bf9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    bfa0:	2b06      	cmp	r3, #6
    bfa2:	d009      	beq.n	bfb8 <cdc_acm_config_get+0x50>
    bfa4:	2b07      	cmp	r3, #7
    bfa6:	d009      	beq.n	bfbc <cdc_acm_config_get+0x54>
    bfa8:	2b05      	cmp	r3, #5
    bfaa:	bf0c      	ite	eq
    bfac:	2300      	moveq	r3, #0
    bfae:	2303      	movne	r3, #3
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    bfb0:	2000      	movs	r0, #0
		cfg->data_bits = UART_CFG_DATA_BITS_5;
    bfb2:	718b      	strb	r3, [r1, #6]
	cfg->flow_ctrl = UART_CFG_FLOW_CTRL_NONE;
    bfb4:	71c8      	strb	r0, [r1, #7]
}
    bfb6:	bd10      	pop	{r4, pc}
	switch (dev_data->line_coding.bDataBits) {
    bfb8:	2301      	movs	r3, #1
    bfba:	e7f9      	b.n	bfb0 <cdc_acm_config_get+0x48>
    bfbc:	2302      	movs	r3, #2
    bfbe:	e7f7      	b.n	bfb0 <cdc_acm_config_get+0x48>

0000bfc0 <cdc_acm_line_ctrl_set>:
{
    bfc0:	b508      	push	{r3, lr}
	switch (ctrl) {
    bfc2:	2940      	cmp	r1, #64	; 0x40
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    bfc4:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    bfc6:	d03f      	beq.n	c048 <cdc_acm_line_ctrl_set+0x88>
    bfc8:	d813      	bhi.n	bff2 <cdc_acm_line_ctrl_set+0x32>
    bfca:	2910      	cmp	r1, #16
    bfcc:	d032      	beq.n	c034 <cdc_acm_line_ctrl_set+0x74>
    bfce:	d806      	bhi.n	bfde <cdc_acm_line_ctrl_set+0x1e>
    bfd0:	2901      	cmp	r1, #1
    bfd2:	d01e      	beq.n	c012 <cdc_acm_line_ctrl_set+0x52>
    bfd4:	2908      	cmp	r1, #8
    bfd6:	d020      	beq.n	c01a <cdc_acm_line_ctrl_set+0x5a>
    bfd8:	f06f 0012 	mvn.w	r0, #18
}
    bfdc:	bd08      	pop	{r3, pc}
	switch (ctrl) {
    bfde:	2920      	cmp	r1, #32
    bfe0:	d1fa      	bne.n	bfd8 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    bfe2:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    bfe6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
		if (val) {
    bfea:	b352      	cbz	r2, c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    bfec:	f041 0104 	orr.w	r1, r1, #4
    bff0:	e027      	b.n	c042 <cdc_acm_line_ctrl_set+0x82>
	switch (ctrl) {
    bff2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    bff6:	d030      	beq.n	c05a <cdc_acm_line_ctrl_set+0x9a>
    bff8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    bffc:	d036      	beq.n	c06c <cdc_acm_line_ctrl_set+0xac>
    bffe:	2980      	cmp	r1, #128	; 0x80
    c000:	d1ea      	bne.n	bfd8 <cdc_acm_line_ctrl_set+0x18>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    c002:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
		if (val) {
    c00a:	b1d2      	cbz	r2, c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    c00c:	f041 0110 	orr.w	r1, r1, #16
    c010:	e017      	b.n	c042 <cdc_acm_line_ctrl_set+0x82>
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    c012:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		return 0;
    c016:	2000      	movs	r0, #0
    c018:	e7e0      	b.n	bfdc <cdc_acm_line_ctrl_set+0x1c>
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    c01a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c01e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		if (val) {
    c022:	b10a      	cbz	r2, c028 <cdc_acm_line_ctrl_set+0x68>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    c024:	f041 0101 	orr.w	r1, r1, #1
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    c028:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    c02c:	2101      	movs	r1, #1
    c02e:	f7f8 faed 	bl	460c <cdc_acm_send_notification.isra.0>
		return 0;
    c032:	e7f0      	b.n	c016 <cdc_acm_line_ctrl_set+0x56>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    c034:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c038:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
		if (val) {
    c03c:	b10a      	cbz	r2, c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    c03e:	f041 0102 	orr.w	r1, r1, #2
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    c042:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    c046:	e7f2      	b.n	c02e <cdc_acm_line_ctrl_set+0x6e>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    c048:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c04c:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
		if (val) {
    c050:	2a00      	cmp	r2, #0
    c052:	d0f6      	beq.n	c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    c054:	f041 0108 	orr.w	r1, r1, #8
    c058:	e7f3      	b.n	c042 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    c05a:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c05e:	f001 01df 	and.w	r1, r1, #223	; 0xdf
		if (val) {
    c062:	2a00      	cmp	r2, #0
    c064:	d0ed      	beq.n	c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    c066:	f041 0120 	orr.w	r1, r1, #32
    c06a:	e7ea      	b.n	c042 <cdc_acm_line_ctrl_set+0x82>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    c06c:	f893 109c 	ldrb.w	r1, [r3, #156]	; 0x9c
    c070:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
		if (val) {
    c074:	2a00      	cmp	r2, #0
    c076:	d0e4      	beq.n	c042 <cdc_acm_line_ctrl_set+0x82>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    c078:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    c07c:	e7e1      	b.n	c042 <cdc_acm_line_ctrl_set+0x82>

0000c07e <cdc_acm_fifo_read>:
{
    c07e:	b570      	push	{r4, r5, r6, lr}
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    c080:	6904      	ldr	r4, [r0, #16]
{
    c082:	4605      	mov	r5, r0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c084:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c088:	f7ff fb96 	bl	b7b8 <ring_buf_get>
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    c08c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c090:	691a      	ldr	r2, [r3, #16]
    c092:	6899      	ldr	r1, [r3, #8]
    c094:	4291      	cmp	r1, r2
		dev_data->rx_ready = false;
    c096:	bf04      	itt	eq
    c098:	2200      	moveq	r2, #0
    c09a:	f884 2049 	strbeq.w	r2, [r4, #73]	; 0x49
	if (dev_data->rx_paused == true) {
    c09e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    c0a2:	4606      	mov	r6, r0
	if (dev_data->rx_paused == true) {
    c0a4:	b19a      	cbz	r2, c0ce <cdc_acm_fifo_read+0x50>
	return buf->size - (buf->put_head - buf->get_tail);
    c0a6:	685a      	ldr	r2, [r3, #4]
    c0a8:	6959      	ldr	r1, [r3, #20]
    c0aa:	69db      	ldr	r3, [r3, #28]
    c0ac:	1a52      	subs	r2, r2, r1
    c0ae:	1a9b      	subs	r3, r3, r2
		if (ring_buf_space_get(dev_data->rx_ringbuf) >= CDC_ACM_BUFFER_SIZE) {
    c0b0:	2b3f      	cmp	r3, #63	; 0x3f
    c0b2:	d90c      	bls.n	c0ce <cdc_acm_fifo_read+0x50>
			if (dev_data->configured) {
    c0b4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
    c0b8:	b133      	cbz	r3, c0c8 <cdc_acm_fifo_read+0x4a>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0, dev_data);
    c0ba:	686b      	ldr	r3, [r5, #4]
    c0bc:	6a1b      	ldr	r3, [r3, #32]
    c0be:	4622      	mov	r2, r4
    c0c0:	7b18      	ldrb	r0, [r3, #12]
    c0c2:	2100      	movs	r1, #0
    c0c4:	f7f8 fac4 	bl	4650 <cdc_acm_read_cb>
			dev_data->rx_paused = false;
    c0c8:	2300      	movs	r3, #0
    c0ca:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
    c0ce:	4630      	mov	r0, r6
    c0d0:	bd70      	pop	{r4, r5, r6, pc}

0000c0d2 <cdc_acm_poll_in>:
{
    c0d2:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    c0d4:	2201      	movs	r2, #1
    c0d6:	f7ff ffd2 	bl	c07e <cdc_acm_fifo_read>
}
    c0da:	3801      	subs	r0, #1
    c0dc:	bf18      	it	ne
    c0de:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c0e2:	bd08      	pop	{r3, pc}

0000c0e4 <abort_function>:
{
    c0e4:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    c0e6:	2000      	movs	r0, #0
    c0e8:	f7f6 fa64 	bl	25b4 <sys_reboot>

0000c0ec <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    c0ec:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    c0ee:	6800      	ldr	r0, [r0, #0]
    c0f0:	f7f8 bc4e 	b.w	4990 <z_arm_fatal_error>

0000c0f4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    c0f4:	2100      	movs	r1, #0
    c0f6:	2001      	movs	r0, #1
    c0f8:	f7f8 bc4a 	b.w	4990 <z_arm_fatal_error>

0000c0fc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    c0fc:	b508      	push	{r3, lr}
	handler();
    c0fe:	f7f8 fcf5 	bl	4aec <z_SysNmiOnReset>
	z_arm_int_exit();
}
    c102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    c106:	f7f8 bdcd 	b.w	4ca4 <z_arm_exc_exit>

0000c10a <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c10a:	2300      	movs	r3, #0
    c10c:	f7f6 bd02 	b.w	2b14 <z_impl_z_log_msg_static_create>

0000c110 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    c110:	4603      	mov	r3, r0
	size_t n = 0;
    c112:	2000      	movs	r0, #0

	while (*s != '\0') {
    c114:	5c1a      	ldrb	r2, [r3, r0]
    c116:	b902      	cbnz	r2, c11a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    c118:	4770      	bx	lr
		n++;
    c11a:	3001      	adds	r0, #1
    c11c:	e7fa      	b.n	c114 <strlen+0x4>

0000c11e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    c11e:	4603      	mov	r3, r0
	size_t n = 0;
    c120:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    c122:	5c1a      	ldrb	r2, [r3, r0]
    c124:	b10a      	cbz	r2, c12a <strnlen+0xc>
    c126:	4288      	cmp	r0, r1
    c128:	d100      	bne.n	c12c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    c12a:	4770      	bx	lr
		n++;
    c12c:	3001      	adds	r0, #1
    c12e:	e7f8      	b.n	c122 <strnlen+0x4>

0000c130 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    c130:	b510      	push	{r4, lr}
    c132:	1e43      	subs	r3, r0, #1
    c134:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    c136:	4291      	cmp	r1, r2
    c138:	d100      	bne.n	c13c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    c13a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    c13c:	f811 4b01 	ldrb.w	r4, [r1], #1
    c140:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    c144:	e7f7      	b.n	c136 <memcpy+0x6>

0000c146 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    c146:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    c148:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    c14a:	4603      	mov	r3, r0
	while (n > 0) {
    c14c:	4293      	cmp	r3, r2
    c14e:	d100      	bne.n	c152 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    c150:	4770      	bx	lr
		*(d_byte++) = c_byte;
    c152:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    c156:	e7f9      	b.n	c14c <memset+0x6>

0000c158 <_stdout_hook_default>:
}
    c158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c15c:	4770      	bx	lr

0000c15e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    c15e:	2806      	cmp	r0, #6
    c160:	d108      	bne.n	c174 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    c162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c166:	2201      	movs	r2, #1
    c168:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    c16c:	f3bf 8f4f 	dsb	sy
        __WFE();
    c170:	bf20      	wfe
    while (true)
    c172:	e7fd      	b.n	c170 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    c174:	4770      	bx	lr

0000c176 <pm_state_exit_post_ops>:
    c176:	2300      	movs	r3, #0
    c178:	f383 8811 	msr	BASEPRI, r3
    c17c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    c180:	4770      	bx	lr

0000c182 <ep_ctx_reset>:
{
    c182:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    c184:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    c186:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    c18a:	2300      	movs	r3, #0
    c18c:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    c18e:	7f83      	ldrb	r3, [r0, #30]
{
    c190:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    c192:	b113      	cbz	r3, c19a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    c194:	7a40      	ldrb	r0, [r0, #9]
    c196:	f000 fb3c 	bl	c812 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    c19a:	2301      	movs	r3, #1
    c19c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    c19e:	2300      	movs	r3, #0
    c1a0:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    c1a2:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    c1a4:	77a3      	strb	r3, [r4, #30]
}
    c1a6:	bd10      	pop	{r4, pc}

0000c1a8 <z_log_msg_static_create.constprop.0>:
    c1a8:	2300      	movs	r3, #0
    c1aa:	f7f6 bcb3 	b.w	2b14 <z_impl_z_log_msg_static_create>

0000c1ae <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    c1ae:	f7fd bc5f 	b.w	9a70 <z_impl_k_mutex_lock>

0000c1b2 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    c1b2:	f7fd bcd7 	b.w	9b64 <z_impl_k_mutex_unlock>

0000c1b6 <usb_dc_ep_disable>:
{
    c1b6:	b538      	push	{r3, r4, r5, lr}
    c1b8:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    c1ba:	f7f9 fa3f 	bl	563c <endpoint_ctx>
	if (!ep_ctx) {
    c1be:	4605      	mov	r5, r0
    c1c0:	b160      	cbz	r0, c1dc <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    c1c2:	7a03      	ldrb	r3, [r0, #8]
    c1c4:	b16b      	cbz	r3, c1e2 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c1c6:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    c1c8:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    c1ca:	f7fd f8c9 	bl	9360 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    c1ce:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    c1d0:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    c1d2:	f7ff ffd6 	bl	c182 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    c1d6:	722c      	strb	r4, [r5, #8]
	return 0;
    c1d8:	4620      	mov	r0, r4
}
    c1da:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c1dc:	f06f 0015 	mvn.w	r0, #21
    c1e0:	e7fb      	b.n	c1da <usb_dc_ep_disable+0x24>
		return -EALREADY;
    c1e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c1e6:	e7f8      	b.n	c1da <usb_dc_ep_disable+0x24>

0000c1e8 <usb_dc_ep_read>:
{
    c1e8:	b570      	push	{r4, r5, r6, lr}
    c1ea:	4604      	mov	r4, r0
    c1ec:	460e      	mov	r6, r1
    c1ee:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    c1f0:	f7fa f84e 	bl	6290 <usb_dc_ep_read_wait>
	if (ret) {
    c1f4:	b930      	cbnz	r0, c204 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    c1f6:	b906      	cbnz	r6, c1fa <usb_dc_ep_read+0x12>
    c1f8:	b125      	cbz	r5, c204 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    c1fa:	4620      	mov	r0, r4
}
    c1fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    c200:	f7fa b8ac 	b.w	635c <usb_dc_ep_read_continue>
}
    c204:	bd70      	pop	{r4, r5, r6, pc}

0000c206 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    c206:	6903      	ldr	r3, [r0, #16]
    c208:	b2c9      	uxtb	r1, r1
    c20a:	220c      	movs	r2, #12
    c20c:	fb01 3302 	mla	r3, r1, r2, r3
    c210:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    c212:	f000 0007 	and.w	r0, r0, #7
    c216:	4770      	bx	lr

0000c218 <set_on_state>:
	__asm__ volatile(
    c218:	f04f 0320 	mov.w	r3, #32
    c21c:	f3ef 8211 	mrs	r2, BASEPRI
    c220:	f383 8812 	msr	BASEPRI_MAX, r3
    c224:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    c228:	6803      	ldr	r3, [r0, #0]
    c22a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c22e:	f043 0302 	orr.w	r3, r3, #2
    c232:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    c234:	f382 8811 	msr	BASEPRI, r2
    c238:	f3bf 8f6f 	isb	sy
}
    c23c:	4770      	bx	lr

0000c23e <stop>:
{
    c23e:	b570      	push	{r4, r5, r6, lr}
    c240:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    c242:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    c244:	f04f 0420 	mov.w	r4, #32
    c248:	f3ef 8511 	mrs	r5, BASEPRI
    c24c:	f384 8812 	msr	BASEPRI_MAX, r4
    c250:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c254:	260c      	movs	r6, #12
    c256:	fb06 3401 	mla	r4, r6, r1, r3
    c25a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    c25c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    c260:	d008      	beq.n	c274 <stop+0x36>
    c262:	42a2      	cmp	r2, r4
    c264:	d006      	beq.n	c274 <stop+0x36>
	__asm__ volatile(
    c266:	f385 8811 	msr	BASEPRI, r5
    c26a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    c26e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c272:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    c274:	4371      	muls	r1, r6
    c276:	440b      	add	r3, r1
    c278:	2201      	movs	r2, #1
    c27a:	641a      	str	r2, [r3, #64]	; 0x40
    c27c:	f385 8811 	msr	BASEPRI, r5
    c280:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    c284:	6843      	ldr	r3, [r0, #4]
    c286:	440b      	add	r3, r1
    c288:	685b      	ldr	r3, [r3, #4]
    c28a:	4798      	blx	r3
	return 0;
    c28c:	2000      	movs	r0, #0
    c28e:	e7f0      	b.n	c272 <stop+0x34>

0000c290 <api_stop>:
	return stop(dev, subsys, CTX_API);
    c290:	2280      	movs	r2, #128	; 0x80
    c292:	f7ff bfd4 	b.w	c23e <stop>

0000c296 <async_start>:
{
    c296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c298:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    c29a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    c29c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    c29e:	f04f 0520 	mov.w	r5, #32
    c2a2:	f3ef 8611 	mrs	r6, BASEPRI
    c2a6:	f385 8812 	msr	BASEPRI_MAX, r5
    c2aa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    c2ae:	250c      	movs	r5, #12
    c2b0:	4369      	muls	r1, r5
    c2b2:	440c      	add	r4, r1
    c2b4:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    c2b6:	f005 0c07 	and.w	ip, r5, #7
    c2ba:	f1bc 0f01 	cmp.w	ip, #1
    c2be:	d10b      	bne.n	c2d8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    c2c0:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    c2c2:	f386 8811 	msr	BASEPRI, r6
    c2c6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    c2ca:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    c2ce:	6843      	ldr	r3, [r0, #4]
    c2d0:	585b      	ldr	r3, [r3, r1]
    c2d2:	4798      	blx	r3
	return 0;
    c2d4:	2000      	movs	r0, #0
}
    c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    c2d8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    c2dc:	42af      	cmp	r7, r5
    c2de:	f386 8811 	msr	BASEPRI, r6
    c2e2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    c2e6:	bf0c      	ite	eq
    c2e8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    c2ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c2f0:	e7f1      	b.n	c2d6 <async_start+0x40>

0000c2f2 <api_start>:
{
    c2f2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    c2f4:	2480      	movs	r4, #128	; 0x80
    c2f6:	9400      	str	r4, [sp, #0]
    c2f8:	f7ff ffcd 	bl	c296 <async_start>
}
    c2fc:	b002      	add	sp, #8
    c2fe:	bd10      	pop	{r4, pc}

0000c300 <onoff_started_callback>:
{
    c300:	b410      	push	{r4}
	return &data->mgr[type];
    c302:	6900      	ldr	r0, [r0, #16]
    c304:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    c306:	241c      	movs	r4, #28
    c308:	fb03 0004 	mla	r0, r3, r4, r0
    c30c:	2100      	movs	r1, #0
}
    c30e:	bc10      	pop	{r4}
	notify(mgr, 0);
    c310:	4710      	bx	r2

0000c312 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    c312:	2000      	movs	r0, #0
    c314:	f000 b8ef 	b.w	c4f6 <nrfx_clock_start>

0000c318 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c318:	2000      	movs	r0, #0
    c31a:	f000 b928 	b.w	c56e <nrfx_clock_stop>

0000c31e <blocking_start_callback>:
{
    c31e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    c320:	f7fd bc90 	b.w	9c44 <z_impl_k_sem_give>

0000c324 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c324:	6843      	ldr	r3, [r0, #4]
    c326:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    c328:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    c32c:	600b      	str	r3, [r1, #0]
}
    c32e:	2000      	movs	r0, #0
    c330:	4770      	bx	lr

0000c332 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c332:	6843      	ldr	r3, [r0, #4]
    c334:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    c336:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    c33a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    c33e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    c342:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    c346:	2000      	movs	r0, #0
    c348:	4770      	bx	lr

0000c34a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c34a:	6843      	ldr	r3, [r0, #4]
    c34c:	685b      	ldr	r3, [r3, #4]
}
    c34e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    c350:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    c354:	4770      	bx	lr

0000c356 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c356:	6843      	ldr	r3, [r0, #4]
    c358:	685b      	ldr	r3, [r3, #4]
}
    c35a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    c35c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    c360:	4770      	bx	lr

0000c362 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    c362:	6843      	ldr	r3, [r0, #4]
    c364:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    c366:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    c36a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    c36e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    c370:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    c374:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    c378:	2000      	movs	r0, #0
    c37a:	4770      	bx	lr

0000c37c <gpio_nrfx_manage_callback>:
{
    c37c:	b510      	push	{r4, lr}
	return port->data;
    c37e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    c380:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    c382:	b1f8      	cbz	r0, c3c4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c384:	4288      	cmp	r0, r1
    c386:	d119      	bne.n	c3bc <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    c388:	689c      	ldr	r4, [r3, #8]
	return node->next;
    c38a:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    c38c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    c38e:	42a1      	cmp	r1, r4
    c390:	d100      	bne.n	c394 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    c392:	6098      	str	r0, [r3, #8]
	parent->next = child;
    c394:	2000      	movs	r0, #0
    c396:	6008      	str	r0, [r1, #0]
	if (set) {
    c398:	b12a      	cbz	r2, c3a6 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    c39a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    c39c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    c39e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    c3a0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    c3a2:	b902      	cbnz	r2, c3a6 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    c3a4:	6099      	str	r1, [r3, #8]
	return 0;
    c3a6:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    c3a8:	e010      	b.n	c3cc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c3aa:	4281      	cmp	r1, r0
    c3ac:	d106      	bne.n	c3bc <gpio_nrfx_manage_callback+0x40>
	return node->next;
    c3ae:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    c3b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    c3b2:	6898      	ldr	r0, [r3, #8]
    c3b4:	4281      	cmp	r1, r0
    c3b6:	d1ed      	bne.n	c394 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    c3b8:	609c      	str	r4, [r3, #8]
}
    c3ba:	e7eb      	b.n	c394 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    c3bc:	4604      	mov	r4, r0
    c3be:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c3c0:	2800      	cmp	r0, #0
    c3c2:	d1f2      	bne.n	c3aa <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    c3c4:	2a00      	cmp	r2, #0
    c3c6:	d1e8      	bne.n	c39a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    c3c8:	f06f 0015 	mvn.w	r0, #21
}
    c3cc:	bd10      	pop	{r4, pc}

0000c3ce <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    c3ce:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    c3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    c3d4:	2908      	cmp	r1, #8
    c3d6:	6e13      	ldr	r3, [r2, #96]	; 0x60
    c3d8:	6e52      	ldr	r2, [r2, #100]	; 0x64
    c3da:	bf28      	it	cs
    c3dc:	2108      	movcs	r1, #8
    c3de:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    c3e0:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    c3e2:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    c3e4:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    c3e6:	460a      	mov	r2, r1
    c3e8:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    c3ea:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    c3ec:	f7ff fea0 	bl	c130 <memcpy>

	return length;
}
    c3f0:	4620      	mov	r0, r4
    c3f2:	b002      	add	sp, #8
    c3f4:	bd10      	pop	{r4, pc}

0000c3f6 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    c3f6:	2200      	movs	r2, #0
    c3f8:	2101      	movs	r1, #1
    c3fa:	2003      	movs	r0, #3
    c3fc:	f7f8 bb5e 	b.w	4abc <z_arm_irq_priority_set>

0000c400 <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    c400:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    c402:	2100      	movs	r1, #0
    c404:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    c406:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    c408:	f000 f80a 	bl	c420 <pinctrl_lookup_state>
	if (ret < 0) {
    c40c:	2800      	cmp	r0, #0
    c40e:	db05      	blt.n	c41c <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    c410:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    c412:	6822      	ldr	r2, [r4, #0]
    c414:	7919      	ldrb	r1, [r3, #4]
    c416:	6818      	ldr	r0, [r3, #0]
    c418:	f7fa fcd8 	bl	6dcc <pinctrl_configure_pins>
}
    c41c:	b002      	add	sp, #8
    c41e:	bd10      	pop	{r4, pc}

0000c420 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    c420:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    c422:	6843      	ldr	r3, [r0, #4]
    c424:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    c426:	7a05      	ldrb	r5, [r0, #8]
    c428:	6844      	ldr	r4, [r0, #4]
    c42a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    c42e:	42a3      	cmp	r3, r4
    c430:	d302      	bcc.n	c438 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    c432:	f06f 0001 	mvn.w	r0, #1
}
    c436:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    c438:	795c      	ldrb	r4, [r3, #5]
    c43a:	428c      	cmp	r4, r1
    c43c:	d001      	beq.n	c442 <pinctrl_lookup_state+0x22>
		(*state)++;
    c43e:	3308      	adds	r3, #8
    c440:	e7f0      	b.n	c424 <pinctrl_lookup_state+0x4>
			return 0;
    c442:	2000      	movs	r0, #0
    c444:	e7f7      	b.n	c436 <pinctrl_lookup_state+0x16>

0000c446 <as5600_get>:
{
    c446:	b510      	push	{r4, lr}
	if (chan == SENSOR_CHAN_ROTATION) {
    c448:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    c44a:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    c44c:	d10c      	bne.n	c468 <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    c44e:	8823      	ldrh	r3, [r4, #0]
    c450:	f44f 70b4 	mov.w	r0, #360	; 0x168
    c454:	4343      	muls	r3, r0
    c456:	131b      	asrs	r3, r3, #12
    c458:	6013      	str	r3, [r2, #0]
		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    c45a:	8821      	ldrh	r1, [r4, #0]
    c45c:	4341      	muls	r1, r0
    c45e:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    c462:	6053      	str	r3, [r2, #4]
	return 0;
    c464:	2000      	movs	r0, #0
}
    c466:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    c468:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c46c:	e7fb      	b.n	c466 <as5600_get+0x20>

0000c46e <as5600_fetch>:
{
    c46e:	b530      	push	{r4, r5, lr}
    c470:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    c472:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    c474:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    c476:	6818      	ldr	r0, [r3, #0]
    c478:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    c47a:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    c47c:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    c47e:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    c482:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    c486:	f8ad 2004 	strh.w	r2, [sp, #4]
    c48a:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    c48c:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    c490:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    c492:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    c494:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    c496:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    c498:	2107      	movs	r1, #7
	msg[1].len = num_read;
    c49a:	2202      	movs	r2, #2
    c49c:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    c49e:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    c4a2:	6881      	ldr	r1, [r0, #8]
    c4a4:	688d      	ldr	r5, [r1, #8]
    c4a6:	a902      	add	r1, sp, #8
    c4a8:	47a8      	blx	r5
	if (!err) {
    c4aa:	b918      	cbnz	r0, c4b4 <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    c4ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c4b0:	ba5b      	rev16	r3, r3
    c4b2:	8023      	strh	r3, [r4, #0]
}
    c4b4:	b009      	add	sp, #36	; 0x24
    c4b6:	bd30      	pop	{r4, r5, pc}

0000c4b8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c4b8:	4770      	bx	lr

0000c4ba <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c4ba:	f100 0350 	add.w	r3, r0, #80	; 0x50
    c4be:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c4c0:	b29b      	uxth	r3, r3
    c4c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c4c6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    c4ca:	2200      	movs	r2, #0
    c4cc:	601a      	str	r2, [r3, #0]
    c4ce:	681b      	ldr	r3, [r3, #0]
}
    c4d0:	4770      	bx	lr

0000c4d2 <sys_clock_cycle_get_32>:
{
    c4d2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c4d4:	f7fa fdd0 	bl	7078 <z_nrf_rtc_timer_read>
}
    c4d8:	bd08      	pop	{r3, pc}

0000c4da <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    c4da:	f7fe bb0f 	b.w	aafc <nrf_cc3xx_platform_init_no_rng>

0000c4de <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    c4de:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    c4e0:	f7f8 f94a 	bl	4778 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    c4e4:	f7f8 fa1e 	bl	4924 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    c4e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    c4ec:	f7fe bb06 	b.w	aafc <nrf_cc3xx_platform_init_no_rng>

0000c4f0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c4f0:	4700      	bx	r0

0000c4f2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c4f2:	f000 bc4f 	b.w	cd94 <z_impl_k_busy_wait>

0000c4f6 <nrfx_clock_start>:
{
    c4f6:	b508      	push	{r3, lr}
    switch (domain)
    c4f8:	b110      	cbz	r0, c500 <nrfx_clock_start+0xa>
    c4fa:	2801      	cmp	r0, #1
    c4fc:	d02c      	beq.n	c558 <nrfx_clock_start+0x62>
}
    c4fe:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    c504:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c508:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    c50c:	03c8      	lsls	r0, r1, #15
    c50e:	d40b      	bmi.n	c528 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    c510:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    c514:	07d9      	lsls	r1, r3, #31
    c516:	d50f      	bpl.n	c538 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c518:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c51c:	079b      	lsls	r3, r3, #30
    c51e:	d408      	bmi.n	c532 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    c520:	2302      	movs	r3, #2
    c522:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    c526:	e7ea      	b.n	c4fe <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    c528:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    c52c:	2b01      	cmp	r3, #1
    c52e:	d004      	beq.n	c53a <nrfx_clock_start+0x44>
    c530:	b113      	cbz	r3, c538 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c532:	2000      	movs	r0, #0
    c534:	f7fb f8a2 	bl	767c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    c538:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    c53a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    c53e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c542:	2300      	movs	r3, #0
    c544:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    c548:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    c54c:	2302      	movs	r3, #2
    c54e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c552:	2301      	movs	r3, #1
    c554:	6093      	str	r3, [r2, #8]
}
    c556:	e7d2      	b.n	c4fe <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c55c:	2200      	movs	r2, #0
    c55e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c562:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    c566:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c56a:	6018      	str	r0, [r3, #0]
}
    c56c:	e7c7      	b.n	c4fe <nrfx_clock_start+0x8>

0000c56e <nrfx_clock_stop>:
    clock_stop(domain);
    c56e:	f7fb b885 	b.w	767c <clock_stop>

0000c572 <nrf_gpio_reconfigure>:
{
    c572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c574:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c576:	a801      	add	r0, sp, #4
{
    c578:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    c57c:	4616      	mov	r6, r2
    c57e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c580:	f7fb f936 	bl	77f0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c584:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c586:	f1b6 0c00 	subs.w	ip, r6, #0
    c58a:	bf18      	it	ne
    c58c:	f04f 0c01 	movne.w	ip, #1
    c590:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c594:	1e0b      	subs	r3, r1, #0
    c596:	bf18      	it	ne
    c598:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c59a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c59c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c5a0:	bf14      	ite	ne
    c5a2:	f04f 0c0c 	movne.w	ip, #12
    c5a6:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c5aa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    c5ac:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    c5b0:	bf14      	ite	ne
    c5b2:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    c5b6:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c5ba:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    c5bc:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c5c0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    c5c4:	bf14      	ite	ne
    c5c6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    c5ca:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    c5ce:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    c5d2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c5d6:	b101      	cbz	r1, c5da <nrf_gpio_reconfigure+0x68>
    c5d8:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    c5da:	b10e      	cbz	r6, c5e0 <nrf_gpio_reconfigure+0x6e>
    c5dc:	7836      	ldrb	r6, [r6, #0]
    c5de:	0076      	lsls	r6, r6, #1
    c5e0:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    c5e2:	b10d      	cbz	r5, c5e8 <nrf_gpio_reconfigure+0x76>
    c5e4:	782d      	ldrb	r5, [r5, #0]
    c5e6:	00ad      	lsls	r5, r5, #2
    c5e8:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    c5ea:	b10c      	cbz	r4, c5f0 <nrf_gpio_reconfigure+0x7e>
    c5ec:	7824      	ldrb	r4, [r4, #0]
    c5ee:	0224      	lsls	r4, r4, #8
    c5f0:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    c5f2:	b10f      	cbz	r7, c5f8 <nrf_gpio_reconfigure+0x86>
    c5f4:	783f      	ldrb	r7, [r7, #0]
    c5f6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c5f8:	430c      	orrs	r4, r1
    c5fa:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    c5fc:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    c600:	b003      	add	sp, #12
    c602:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c604 <nrf_gpio_cfg_sense_set>:
{
    c604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c606:	f10d 030f 	add.w	r3, sp, #15
    c60a:	9301      	str	r3, [sp, #4]
    c60c:	2300      	movs	r3, #0
{
    c60e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    c612:	9300      	str	r3, [sp, #0]
    c614:	461a      	mov	r2, r3
    c616:	4619      	mov	r1, r3
    c618:	f7ff ffab 	bl	c572 <nrf_gpio_reconfigure>
}
    c61c:	b005      	add	sp, #20
    c61e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c622 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c622:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    c626:	681a      	ldr	r2, [r3, #0]
    c628:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c62a:	bf1f      	itttt	ne
    c62c:	2200      	movne	r2, #0
    c62e:	601a      	strne	r2, [r3, #0]
    c630:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c632:	2001      	movne	r0, #1
    c634:	bf08      	it	eq
    c636:	2000      	moveq	r0, #0
}
    c638:	4770      	bx	lr

0000c63a <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    c63a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c63e:	f44f 7260 	mov.w	r2, #896	; 0x380
    c642:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c646:	4770      	bx	lr

0000c648 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    c648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c64c:	f44f 7260 	mov.w	r2, #896	; 0x380
    c650:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c654:	4770      	bx	lr

0000c656 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    c656:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    c658:	f7fb fc82 	bl	7f60 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    c65c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    c660:	f7fb b892 	b.w	7788 <nrfx_clock_irq_handler>

0000c664 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    c664:	7b0a      	ldrb	r2, [r1, #12]
{
    c666:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    c668:	2a03      	cmp	r2, #3
    c66a:	d829      	bhi.n	c6c0 <xfer_completeness_check+0x5c>
    c66c:	e8df f002 	tbb	[pc, r2]
    c670:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    c674:	688a      	ldr	r2, [r1, #8]
    c676:	0350      	lsls	r0, r2, #13
    c678:	d504      	bpl.n	c684 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    c67a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    c67e:	6908      	ldr	r0, [r1, #16]
    c680:	4290      	cmp	r0, r2
    c682:	d107      	bne.n	c694 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    c684:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    c686:	0352      	lsls	r2, r2, #13
    c688:	d41a      	bmi.n	c6c0 <xfer_completeness_check+0x5c>
    c68a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    c68e:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    c690:	4291      	cmp	r1, r2
    c692:	d015      	beq.n	c6c0 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    c694:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    c696:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    c698:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    c69c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    c6a0:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    c6a2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    c6a6:	6908      	ldr	r0, [r1, #16]
    c6a8:	4290      	cmp	r0, r2
    c6aa:	d1f3      	bne.n	c694 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    c6ac:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    c6b0:	e7ed      	b.n	c68e <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    c6b2:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    c6b6:	6909      	ldr	r1, [r1, #16]
    c6b8:	e7ea      	b.n	c690 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    c6ba:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    c6be:	e7fa      	b.n	c6b6 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    c6c0:	2001      	movs	r0, #1
}
    c6c2:	4770      	bx	lr

0000c6c4 <nrfx_usbd_consumer>:
{
    c6c4:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    c6c6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    c6c8:	429c      	cmp	r4, r3
    c6ca:	d209      	bcs.n	c6e0 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    c6cc:	2500      	movs	r5, #0
    c6ce:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    c6d0:	6809      	ldr	r1, [r1, #0]
    c6d2:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    c6d4:	429a      	cmp	r2, r3
    c6d6:	d10c      	bne.n	c6f2 <nrfx_usbd_consumer+0x2e>
    c6d8:	1e20      	subs	r0, r4, #0
    c6da:	bf18      	it	ne
    c6dc:	2001      	movne	r0, #1
}
    c6de:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    c6e0:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    c6e2:	680d      	ldr	r5, [r1, #0]
    c6e4:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    c6e6:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    c6e8:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    c6ea:	4418      	add	r0, r3
        p_transfer->size = size;
    c6ec:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    c6ee:	6008      	str	r0, [r1, #0]
    c6f0:	e7f0      	b.n	c6d4 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    c6f2:	2000      	movs	r0, #0
    c6f4:	e7f3      	b.n	c6de <nrfx_usbd_consumer+0x1a>

0000c6f6 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    c6f6:	684b      	ldr	r3, [r1, #4]
    c6f8:	429a      	cmp	r2, r3
    c6fa:	bf28      	it	cs
    c6fc:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    c6fe:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    c700:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    c704:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c706:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    c708:	1a80      	subs	r0, r0, r2
    c70a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c70c:	4413      	add	r3, r2
}
    c70e:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    c710:	600b      	str	r3, [r1, #0]
}
    c712:	bf18      	it	ne
    c714:	2001      	movne	r0, #1
    c716:	4770      	bx	lr

0000c718 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    c718:	684b      	ldr	r3, [r1, #4]
    c71a:	429a      	cmp	r2, r3
    c71c:	bf28      	it	cs
    c71e:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    c720:	b162      	cbz	r2, c73c <nrfx_usbd_feeder_ram_zlp+0x24>
    c722:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    c724:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    c728:	684b      	ldr	r3, [r1, #4]
    c72a:	1a9b      	subs	r3, r3, r2
    c72c:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c72e:	680b      	ldr	r3, [r1, #0]
}
    c730:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    c732:	4413      	add	r3, r2
    c734:	600b      	str	r3, [r1, #0]
}
    c736:	bf18      	it	ne
    c738:	2001      	movne	r0, #1
    c73a:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    c73c:	4613      	mov	r3, r2
    c73e:	e7f1      	b.n	c724 <nrfx_usbd_feeder_ram_zlp+0xc>

0000c740 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    c740:	43c3      	mvns	r3, r0
    c742:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c746:	f000 000f 	and.w	r0, r0, #15
}
    c74a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    c74e:	4770      	bx	lr

0000c750 <ev_started_handler>:
}
    c750:	4770      	bx	lr

0000c752 <nrf_usbd_epin_dma_handler>:
{
    c752:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    c754:	f7fc f84c 	bl	87f0 <usbd_dma_pending_clear>
{
    c758:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    c75a:	f7fb ff3f 	bl	85dc <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    c75e:	7b83      	ldrb	r3, [r0, #14]
    c760:	2b03      	cmp	r3, #3
    c762:	d10a      	bne.n	c77a <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    c764:	4608      	mov	r0, r1
    c766:	f7ff ffeb 	bl	c740 <ep2bit>
    c76a:	2301      	movs	r3, #1
    c76c:	fa03 f000 	lsl.w	r0, r3, r0
    c770:	43c0      	mvns	r0, r0
}
    c772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    c776:	f7fc b82b 	b.w	87d0 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    c77a:	6803      	ldr	r3, [r0, #0]
    c77c:	2b00      	cmp	r3, #0
    c77e:	d0f1      	beq.n	c764 <nrf_usbd_epin_dma_handler+0x12>
}
    c780:	bd08      	pop	{r3, pc}

0000c782 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    c782:	2087      	movs	r0, #135	; 0x87
    c784:	f7ff bfe5 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c788 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    c788:	2086      	movs	r0, #134	; 0x86
    c78a:	f7ff bfe2 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c78e <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    c78e:	2085      	movs	r0, #133	; 0x85
    c790:	f7ff bfdf 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c794 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    c794:	2084      	movs	r0, #132	; 0x84
    c796:	f7ff bfdc 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c79a <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    c79a:	2083      	movs	r0, #131	; 0x83
    c79c:	f7ff bfd9 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c7a0 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    c7a0:	2082      	movs	r0, #130	; 0x82
    c7a2:	f7ff bfd6 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c7a6 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    c7a6:	2081      	movs	r0, #129	; 0x81
    c7a8:	f7ff bfd3 	b.w	c752 <nrf_usbd_epin_dma_handler>

0000c7ac <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    c7ac:	f7fc b832 	b.w	8814 <nrf_usbd_ep0in_dma_handler>

0000c7b0 <nrfx_usbd_ep_max_packet_size_set>:
{
    c7b0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    c7b2:	f7fb ff13 	bl	85dc <ep_state_access>
    p_state->max_packet_size = size;
    c7b6:	8181      	strh	r1, [r0, #12]
}
    c7b8:	bd08      	pop	{r3, pc}

0000c7ba <nrfx_usbd_ep_status_get>:
{
    c7ba:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    c7bc:	f7fb ff0e 	bl	85dc <ep_state_access>
	__asm__ volatile(
    c7c0:	f04f 0220 	mov.w	r2, #32
    c7c4:	f3ef 8311 	mrs	r3, BASEPRI
    c7c8:	f382 8812 	msr	BASEPRI_MAX, r2
    c7cc:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    c7d0:	6882      	ldr	r2, [r0, #8]
    c7d2:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    c7d4:	6802      	ldr	r2, [r0, #0]
    c7d6:	b92a      	cbnz	r2, c7e4 <nrfx_usbd_ep_status_get+0x2a>
    c7d8:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    c7da:	f383 8811 	msr	BASEPRI, r3
    c7de:	f3bf 8f6f 	isb	sy
}
    c7e2:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    c7e4:	2004      	movs	r0, #4
    c7e6:	e7f8      	b.n	c7da <nrfx_usbd_ep_status_get+0x20>

0000c7e8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    c7e8:	2007      	movs	r0, #7
    c7ea:	f7fc bb7f 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c7ee <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    c7ee:	2006      	movs	r0, #6
    c7f0:	f7fc bb7c 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c7f4 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    c7f4:	2005      	movs	r0, #5
    c7f6:	f7fc bb79 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c7fa <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    c7fa:	2004      	movs	r0, #4
    c7fc:	f7fc bb76 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c800 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    c800:	2003      	movs	r0, #3
    c802:	f7fc bb73 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c806 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    c806:	2002      	movs	r0, #2
    c808:	f7fc bb70 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c80c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    c80c:	2001      	movs	r0, #1
    c80e:	f7fc bb6d 	b.w	8eec <nrf_usbd_epout_dma_handler>

0000c812 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    c812:	f7fc bc61 	b.w	90d8 <usbd_ep_abort>

0000c816 <nrf_gpio_pin_set>:
{
    c816:	b507      	push	{r0, r1, r2, lr}
    c818:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    c81a:	a801      	add	r0, sp, #4
    c81c:	f7fc fe30 	bl	9480 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c820:	9a01      	ldr	r2, [sp, #4]
    c822:	2301      	movs	r3, #1
    c824:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    c826:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    c82a:	b003      	add	sp, #12
    c82c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c830 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    c830:	4770      	bx	lr

0000c832 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    c832:	b140      	cbz	r0, c846 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    c834:	68c3      	ldr	r3, [r0, #12]
    c836:	7858      	ldrb	r0, [r3, #1]
    c838:	f010 0001 	ands.w	r0, r0, #1
    c83c:	bf1e      	ittt	ne
    c83e:	7818      	ldrbne	r0, [r3, #0]
    c840:	fab0 f080 	clzne	r0, r0
    c844:	0940      	lsrne	r0, r0, #5
}
    c846:	4770      	bx	lr

0000c848 <z_early_memset>:
	(void) memset(dst, c, n);
    c848:	f7ff bc7d 	b.w	c146 <memset>

0000c84c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    c84c:	f7ff bc70 	b.w	c130 <memcpy>

0000c850 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    c850:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    c854:	4313      	orrs	r3, r2
    c856:	f013 0303 	ands.w	r3, r3, #3
    c85a:	d10c      	bne.n	c876 <create_free_list+0x26>
	slab->free_list = NULL;
    c85c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    c85e:	6881      	ldr	r1, [r0, #8]
    c860:	4299      	cmp	r1, r3
    c862:	d801      	bhi.n	c868 <create_free_list+0x18>
	return 0;
    c864:	2000      	movs	r0, #0
    c866:	4770      	bx	lr
		*(char **)p = slab->free_list;
    c868:	6941      	ldr	r1, [r0, #20]
    c86a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    c86c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    c86e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    c870:	3301      	adds	r3, #1
		p += slab->block_size;
    c872:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    c874:	e7f3      	b.n	c85e <create_free_list+0xe>
		return -EINVAL;
    c876:	f06f 0015 	mvn.w	r0, #21
}
    c87a:	4770      	bx	lr

0000c87c <k_mem_slab_init>:
{
    c87c:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    c87e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    c882:	2300      	movs	r3, #0
	slab->buffer = buffer;
    c884:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    c886:	6183      	str	r3, [r0, #24]
{
    c888:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    c88a:	f7ff ffe1 	bl	c850 <create_free_list>
	if (rc < 0) {
    c88e:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    c890:	bfa8      	it	ge
    c892:	e9c4 4400 	strdge	r4, r4, [r4]
}
    c896:	bd10      	pop	{r4, pc}

0000c898 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c89a:	4604      	mov	r4, r0
    c89c:	460d      	mov	r5, r1
	__asm__ volatile(
    c89e:	f04f 0320 	mov.w	r3, #32
    c8a2:	f3ef 8611 	mrs	r6, BASEPRI
    c8a6:	f383 8812 	msr	BASEPRI_MAX, r3
    c8aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    c8ae:	6947      	ldr	r7, [r0, #20]
    c8b0:	b977      	cbnz	r7, c8d0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    c8b2:	f000 f9c6 	bl	cc42 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    c8b6:	b158      	cbz	r0, c8d0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    c8b8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c8ba:	6142      	str	r2, [r0, #20]
    c8bc:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    c8be:	f000 f961 	bl	cb84 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    c8c2:	4631      	mov	r1, r6
    c8c4:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    c8c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    c8cc:	f7fd bd00 	b.w	a2d0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    c8d0:	682b      	ldr	r3, [r5, #0]
    c8d2:	6962      	ldr	r2, [r4, #20]
    c8d4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    c8d6:	682b      	ldr	r3, [r5, #0]
    c8d8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    c8da:	69a3      	ldr	r3, [r4, #24]
    c8dc:	3b01      	subs	r3, #1
    c8de:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    c8e0:	f386 8811 	msr	BASEPRI, r6
    c8e4:	f3bf 8f6f 	isb	sy
}
    c8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c8ea <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c8ea:	f3ef 8005 	mrs	r0, IPSR
}
    c8ee:	3800      	subs	r0, #0
    c8f0:	bf18      	it	ne
    c8f2:	2001      	movne	r0, #1
    c8f4:	4770      	bx	lr

0000c8f6 <z_impl_k_thread_name_set>:
}
    c8f6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c8fa:	4770      	bx	lr

0000c8fc <k_thread_name_get>:
}
    c8fc:	2000      	movs	r0, #0
    c8fe:	4770      	bx	lr

0000c900 <z_impl_k_thread_start>:
	z_sched_start(thread);
    c900:	f7fd bcf8 	b.w	a2f4 <z_sched_start>

0000c904 <z_pm_save_idle_exit>:
{
    c904:	b508      	push	{r3, lr}
	pm_system_resume();
    c906:	f7f6 fc21 	bl	314c <pm_system_resume>
}
    c90a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    c90e:	f7ff bdd3 	b.w	c4b8 <sys_clock_idle_exit>

0000c912 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    c912:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c916:	428b      	cmp	r3, r1
    c918:	d001      	beq.n	c91e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    c91a:	f7fd bc93 	b.w	a244 <z_set_prio>
}
    c91e:	2000      	movs	r0, #0
    c920:	4770      	bx	lr

0000c922 <z_impl_k_mutex_init>:
{
    c922:	4603      	mov	r3, r0
	mutex->owner = NULL;
    c924:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    c926:	e9c3 0002 	strd	r0, r0, [r3, #8]
    c92a:	e9c3 3300 	strd	r3, r3, [r3]
}
    c92e:	4770      	bx	lr

0000c930 <queue_insert>:
{
    c930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c934:	4699      	mov	r9, r3
    c936:	4604      	mov	r4, r0
    c938:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c93c:	460d      	mov	r5, r1
    c93e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    c940:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    c944:	f04f 0220 	mov.w	r2, #32
    c948:	f3ef 8711 	mrs	r7, BASEPRI
    c94c:	f382 8812 	msr	BASEPRI_MAX, r2
    c950:	f3bf 8f6f 	isb	sy
	if (is_append) {
    c954:	b103      	cbz	r3, c958 <queue_insert+0x28>
	return list->tail;
    c956:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    c958:	4630      	mov	r0, r6
    c95a:	f000 f972 	bl	cc42 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    c95e:	b158      	cbz	r0, c978 <queue_insert+0x48>
    c960:	2300      	movs	r3, #0
    c962:	6783      	str	r3, [r0, #120]	; 0x78
    c964:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    c968:	f000 f90c 	bl	cb84 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    c96c:	4630      	mov	r0, r6
    c96e:	4639      	mov	r1, r7
    c970:	f7fd fcae 	bl	a2d0 <z_reschedule>
		return 0;
    c974:	2000      	movs	r0, #0
    c976:	e00c      	b.n	c992 <queue_insert+0x62>
	if (alloc) {
    c978:	f1b9 0f00 	cmp.w	r9, #0
    c97c:	d01c      	beq.n	c9b8 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    c97e:	2108      	movs	r1, #8
    c980:	f7fe f86a 	bl	aa58 <z_thread_aligned_alloc>
		if (anode == NULL) {
    c984:	b938      	cbnz	r0, c996 <queue_insert+0x66>
	__asm__ volatile(
    c986:	f387 8811 	msr	BASEPRI, r7
    c98a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    c98e:	f06f 000b 	mvn.w	r0, #11
}
    c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    c996:	2201      	movs	r2, #1
		anode->data = data;
    c998:	f8c0 8004 	str.w	r8, [r0, #4]
    c99c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c99e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9a0:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    c9a4:	b965      	cbnz	r5, c9c0 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9a6:	6822      	ldr	r2, [r4, #0]
    c9a8:	430a      	orrs	r2, r1
    c9aa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    c9ac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    c9ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    c9b0:	2a00      	cmp	r2, #0
    c9b2:	d1db      	bne.n	c96c <queue_insert+0x3c>
	list->tail = node;
    c9b4:	6060      	str	r0, [r4, #4]
}
    c9b6:	e7d9      	b.n	c96c <queue_insert+0x3c>
	node->next_and_flags = flags;
    c9b8:	f8c8 9000 	str.w	r9, [r8]
}
    c9bc:	4640      	mov	r0, r8
    c9be:	e7ee      	b.n	c99e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    c9c0:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    c9c2:	2a03      	cmp	r2, #3
    c9c4:	d80b      	bhi.n	c9de <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9c6:	6001      	str	r1, [r0, #0]
	return list->tail;
    c9c8:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    c9ca:	b911      	cbnz	r1, c9d2 <queue_insert+0xa2>
	list->head = node;
    c9cc:	e9c4 0000 	strd	r0, r0, [r4]
}
    c9d0:	e7cc      	b.n	c96c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c9d2:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9d4:	f002 0203 	and.w	r2, r2, #3
    c9d8:	4302      	orrs	r2, r0
    c9da:	600a      	str	r2, [r1, #0]
    c9dc:	e7ea      	b.n	c9b4 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    c9de:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9e2:	430a      	orrs	r2, r1
    c9e4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c9e6:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c9e8:	f002 0203 	and.w	r2, r2, #3
    c9ec:	ea40 0302 	orr.w	r3, r0, r2
    c9f0:	602b      	str	r3, [r5, #0]
}
    c9f2:	e7bb      	b.n	c96c <queue_insert+0x3c>

0000c9f4 <z_queue_node_peek>:
{
    c9f4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    c9f6:	4604      	mov	r4, r0
    c9f8:	b130      	cbz	r0, ca08 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c9fa:	6802      	ldr	r2, [r0, #0]
    c9fc:	0793      	lsls	r3, r2, #30
    c9fe:	d003      	beq.n	ca08 <z_queue_node_peek+0x14>
		ret = anode->data;
    ca00:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    ca02:	b109      	cbz	r1, ca08 <z_queue_node_peek+0x14>
			k_free(anode);
    ca04:	f000 fa15 	bl	ce32 <k_free>
}
    ca08:	4620      	mov	r0, r4
    ca0a:	bd10      	pop	{r4, pc}

0000ca0c <k_queue_append>:
{
    ca0c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    ca0e:	2301      	movs	r3, #1
    ca10:	9300      	str	r3, [sp, #0]
    ca12:	2300      	movs	r3, #0
{
    ca14:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    ca16:	4619      	mov	r1, r3
    ca18:	f7ff ff8a 	bl	c930 <queue_insert>
}
    ca1c:	b003      	add	sp, #12
    ca1e:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca22 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    ca22:	b13a      	cbz	r2, ca34 <z_impl_k_sem_init+0x12>
    ca24:	428a      	cmp	r2, r1
    ca26:	d305      	bcc.n	ca34 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    ca28:	e9c0 1202 	strd	r1, r2, [r0, #8]
    ca2c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    ca30:	2000      	movs	r0, #0
    ca32:	4770      	bx	lr
		return -EINVAL;
    ca34:	f06f 0015 	mvn.w	r0, #21
}
    ca38:	4770      	bx	lr

0000ca3a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    ca3a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    ca3c:	2301      	movs	r3, #1
    ca3e:	408b      	lsls	r3, r1
    ca40:	ea22 0303 	bic.w	r3, r2, r3
    ca44:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    ca46:	fa22 f001 	lsr.w	r0, r2, r1
}
    ca4a:	f000 0001 	and.w	r0, r0, #1
    ca4e:	4770      	bx	lr

0000ca50 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    ca50:	b120      	cbz	r0, ca5c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    ca52:	2200      	movs	r2, #0
    ca54:	4611      	mov	r1, r2
    ca56:	3088      	adds	r0, #136	; 0x88
    ca58:	f000 b94d 	b.w	ccf6 <z_sched_wake>
}
    ca5c:	4770      	bx	lr

0000ca5e <work_timeout>:
{
    ca5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ca60:	4604      	mov	r4, r0
	__asm__ volatile(
    ca62:	f04f 0320 	mov.w	r3, #32
    ca66:	f3ef 8511 	mrs	r5, BASEPRI
    ca6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ca6e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    ca72:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    ca74:	f1a0 0610 	sub.w	r6, r0, #16
    ca78:	2103      	movs	r1, #3
    ca7a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    ca7c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    ca7e:	f7ff ffdc 	bl	ca3a <flag_test_and_clear>
    ca82:	b128      	cbz	r0, ca90 <work_timeout+0x32>
		queue = dw->queue;
    ca84:	69a3      	ldr	r3, [r4, #24]
    ca86:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    ca88:	a901      	add	r1, sp, #4
    ca8a:	4630      	mov	r0, r6
    ca8c:	f7fd f9be 	bl	9e0c <submit_to_queue_locked>
	__asm__ volatile(
    ca90:	f385 8811 	msr	BASEPRI, r5
    ca94:	f3bf 8f6f 	isb	sy
}
    ca98:	b002      	add	sp, #8
    ca9a:	bd70      	pop	{r4, r5, r6, pc}

0000ca9c <k_work_init>:
{
    ca9c:	b538      	push	{r3, r4, r5, lr}
    ca9e:	4604      	mov	r4, r0
    caa0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    caa2:	2210      	movs	r2, #16
    caa4:	2100      	movs	r1, #0
    caa6:	f7ff fb4e 	bl	c146 <memset>
    caaa:	6065      	str	r5, [r4, #4]
}
    caac:	bd38      	pop	{r3, r4, r5, pc}

0000caae <z_work_submit_to_queue>:
{
    caae:	b513      	push	{r0, r1, r4, lr}
    cab0:	9001      	str	r0, [sp, #4]
    cab2:	4608      	mov	r0, r1
	__asm__ volatile(
    cab4:	f04f 0320 	mov.w	r3, #32
    cab8:	f3ef 8411 	mrs	r4, BASEPRI
    cabc:	f383 8812 	msr	BASEPRI_MAX, r3
    cac0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    cac4:	a901      	add	r1, sp, #4
    cac6:	f7fd f9a1 	bl	9e0c <submit_to_queue_locked>
	__asm__ volatile(
    caca:	f384 8811 	msr	BASEPRI, r4
    cace:	f3bf 8f6f 	isb	sy
}
    cad2:	b002      	add	sp, #8
    cad4:	bd10      	pop	{r4, pc}

0000cad6 <k_work_submit_to_queue>:
{
    cad6:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    cad8:	f7ff ffe9 	bl	caae <z_work_submit_to_queue>
	if (ret > 0) {
    cadc:	1e04      	subs	r4, r0, #0
    cade:	dd09      	ble.n	caf4 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    cae0:	f04f 0320 	mov.w	r3, #32
    cae4:	f3ef 8011 	mrs	r0, BASEPRI
    cae8:	f383 8812 	msr	BASEPRI_MAX, r3
    caec:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    caf0:	f000 f8db 	bl	ccaa <z_reschedule_irqlock>
}
    caf4:	4620      	mov	r0, r4
    caf6:	bd10      	pop	{r4, pc}

0000caf8 <k_work_init_delayable>:
{
    caf8:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    cafa:	2230      	movs	r2, #48	; 0x30
{
    cafc:	4604      	mov	r4, r0
    cafe:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    cb00:	2100      	movs	r1, #0
    cb02:	f7ff fb20 	bl	c146 <memset>
    cb06:	f44f 7380 	mov.w	r3, #256	; 0x100
    cb0a:	6065      	str	r5, [r4, #4]
    cb0c:	60e3      	str	r3, [r4, #12]
}
    cb0e:	bd38      	pop	{r3, r4, r5, pc}

0000cb10 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    cb10:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    cb14:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    cb16:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    cb18:	2300      	movs	r3, #0
	node->prev = NULL;
    cb1a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    cb1e:	4770      	bx	lr

0000cb20 <unpend_thread_no_timeout>:
{
    cb20:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    cb22:	f7ff fff5 	bl	cb10 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    cb26:	7b43      	ldrb	r3, [r0, #13]
    cb28:	f023 0302 	bic.w	r3, r3, #2
    cb2c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    cb2e:	2300      	movs	r3, #0
    cb30:	6083      	str	r3, [r0, #8]
}
    cb32:	bd08      	pop	{r3, pc}

0000cb34 <add_to_waitq_locked>:
{
    cb34:	b538      	push	{r3, r4, r5, lr}
    cb36:	4604      	mov	r4, r0
    cb38:	460d      	mov	r5, r1
	unready_thread(thread);
    cb3a:	f7fd fb05 	bl	a148 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    cb3e:	7b63      	ldrb	r3, [r4, #13]
    cb40:	f043 0302 	orr.w	r3, r3, #2
    cb44:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    cb46:	b1e5      	cbz	r5, cb82 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    cb48:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    cb4a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb4c:	429d      	cmp	r5, r3
    cb4e:	d109      	bne.n	cb64 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    cb50:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    cb52:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    cb56:	601c      	str	r4, [r3, #0]
	list->tail = node;
    cb58:	606c      	str	r4, [r5, #4]
}
    cb5a:	e012      	b.n	cb82 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    cb5c:	686a      	ldr	r2, [r5, #4]
    cb5e:	4293      	cmp	r3, r2
    cb60:	d0f6      	beq.n	cb50 <add_to_waitq_locked+0x1c>
    cb62:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cb64:	2b00      	cmp	r3, #0
    cb66:	d0f3      	beq.n	cb50 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    cb68:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    cb6c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    cb70:	428a      	cmp	r2, r1
    cb72:	d0f3      	beq.n	cb5c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    cb74:	4291      	cmp	r1, r2
    cb76:	ddf1      	ble.n	cb5c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    cb78:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    cb7a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    cb7e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    cb80:	605c      	str	r4, [r3, #4]
}
    cb82:	bd38      	pop	{r3, r4, r5, pc}

0000cb84 <z_ready_thread>:
{
    cb84:	b510      	push	{r4, lr}
    cb86:	f04f 0320 	mov.w	r3, #32
    cb8a:	f3ef 8411 	mrs	r4, BASEPRI
    cb8e:	f383 8812 	msr	BASEPRI_MAX, r3
    cb92:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    cb96:	f7fd faa3 	bl	a0e0 <ready_thread>
	__asm__ volatile(
    cb9a:	f384 8811 	msr	BASEPRI, r4
    cb9e:	f3bf 8f6f 	isb	sy
}
    cba2:	bd10      	pop	{r4, pc}

0000cba4 <z_unpend_thread_no_timeout>:
{
    cba4:	b508      	push	{r3, lr}
	__asm__ volatile(
    cba6:	f04f 0220 	mov.w	r2, #32
    cbaa:	f3ef 8111 	mrs	r1, BASEPRI
    cbae:	f382 8812 	msr	BASEPRI_MAX, r2
    cbb2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    cbb6:	6883      	ldr	r3, [r0, #8]
    cbb8:	b10b      	cbz	r3, cbbe <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    cbba:	f7ff ffb1 	bl	cb20 <unpend_thread_no_timeout>
	__asm__ volatile(
    cbbe:	f381 8811 	msr	BASEPRI, r1
    cbc2:	f3bf 8f6f 	isb	sy
}
    cbc6:	bd08      	pop	{r3, pc}

0000cbc8 <z_sched_wake_thread>:
{
    cbc8:	b538      	push	{r3, r4, r5, lr}
    cbca:	4604      	mov	r4, r0
	__asm__ volatile(
    cbcc:	f04f 0320 	mov.w	r3, #32
    cbd0:	f3ef 8511 	mrs	r5, BASEPRI
    cbd4:	f383 8812 	msr	BASEPRI_MAX, r3
    cbd8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    cbdc:	7b43      	ldrb	r3, [r0, #13]
    cbde:	f013 0f28 	tst.w	r3, #40	; 0x28
    cbe2:	d10b      	bne.n	cbfc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    cbe4:	6883      	ldr	r3, [r0, #8]
    cbe6:	b10b      	cbz	r3, cbec <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    cbe8:	f7ff ff9a 	bl	cb20 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cbec:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    cbee:	b951      	cbnz	r1, cc06 <z_sched_wake_thread+0x3e>
    cbf0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    cbf4:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    cbf6:	4620      	mov	r0, r4
    cbf8:	f7fd fa72 	bl	a0e0 <ready_thread>
	__asm__ volatile(
    cbfc:	f385 8811 	msr	BASEPRI, r5
    cc00:	f3bf 8f6f 	isb	sy
}
    cc04:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    cc06:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    cc0a:	e7f3      	b.n	cbf4 <z_sched_wake_thread+0x2c>

0000cc0c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    cc0c:	2101      	movs	r1, #1
    cc0e:	3818      	subs	r0, #24
    cc10:	f7ff bfda 	b.w	cbc8 <z_sched_wake_thread>

0000cc14 <z_unpend1_no_timeout>:
{
    cc14:	b508      	push	{r3, lr}
    cc16:	4603      	mov	r3, r0
	__asm__ volatile(
    cc18:	f04f 0220 	mov.w	r2, #32
    cc1c:	f3ef 8111 	mrs	r1, BASEPRI
    cc20:	f382 8812 	msr	BASEPRI_MAX, r2
    cc24:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cc28:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc2a:	4283      	cmp	r3, r0
    cc2c:	d007      	beq.n	cc3e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    cc2e:	b108      	cbz	r0, cc34 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    cc30:	f7ff ff76 	bl	cb20 <unpend_thread_no_timeout>
	__asm__ volatile(
    cc34:	f381 8811 	msr	BASEPRI, r1
    cc38:	f3bf 8f6f 	isb	sy
}
    cc3c:	bd08      	pop	{r3, pc}
    cc3e:	2000      	movs	r0, #0
    cc40:	e7f8      	b.n	cc34 <z_unpend1_no_timeout+0x20>

0000cc42 <z_unpend_first_thread>:
{
    cc42:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    cc44:	f04f 0320 	mov.w	r3, #32
    cc48:	f3ef 8511 	mrs	r5, BASEPRI
    cc4c:	f383 8812 	msr	BASEPRI_MAX, r3
    cc50:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cc54:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc56:	42a0      	cmp	r0, r4
    cc58:	d00d      	beq.n	cc76 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    cc5a:	b134      	cbz	r4, cc6a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    cc5c:	4620      	mov	r0, r4
    cc5e:	f7ff ff5f 	bl	cb20 <unpend_thread_no_timeout>
    cc62:	f104 0018 	add.w	r0, r4, #24
    cc66:	f000 f869 	bl	cd3c <z_abort_timeout>
	__asm__ volatile(
    cc6a:	f385 8811 	msr	BASEPRI, r5
    cc6e:	f3bf 8f6f 	isb	sy
}
    cc72:	4620      	mov	r0, r4
    cc74:	bd38      	pop	{r3, r4, r5, pc}
    cc76:	2400      	movs	r4, #0
    cc78:	e7f7      	b.n	cc6a <z_unpend_first_thread+0x28>

0000cc7a <z_unpend_thread>:
{
    cc7a:	b510      	push	{r4, lr}
    cc7c:	4601      	mov	r1, r0
	__asm__ volatile(
    cc7e:	f04f 0320 	mov.w	r3, #32
    cc82:	f3ef 8411 	mrs	r4, BASEPRI
    cc86:	f383 8812 	msr	BASEPRI_MAX, r3
    cc8a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    cc8e:	6883      	ldr	r3, [r0, #8]
    cc90:	b10b      	cbz	r3, cc96 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    cc92:	f7ff ff45 	bl	cb20 <unpend_thread_no_timeout>
	__asm__ volatile(
    cc96:	f384 8811 	msr	BASEPRI, r4
    cc9a:	f3bf 8f6f 	isb	sy
}
    cc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cca2:	f101 0018 	add.w	r0, r1, #24
    cca6:	f000 b849 	b.w	cd3c <z_abort_timeout>

0000ccaa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ccaa:	4603      	mov	r3, r0
    ccac:	b920      	cbnz	r0, ccb8 <z_reschedule_irqlock+0xe>
    ccae:	f3ef 8205 	mrs	r2, IPSR
    ccb2:	b90a      	cbnz	r2, ccb8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    ccb4:	f7f7 bf3a 	b.w	4b2c <arch_swap>
    ccb8:	f383 8811 	msr	BASEPRI, r3
    ccbc:	f3bf 8f6f 	isb	sy
}
    ccc0:	4770      	bx	lr

0000ccc2 <z_reschedule_unlocked>:
	__asm__ volatile(
    ccc2:	f04f 0320 	mov.w	r3, #32
    ccc6:	f3ef 8011 	mrs	r0, BASEPRI
    ccca:	f383 8812 	msr	BASEPRI_MAX, r3
    ccce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ccd2:	f7ff bfea 	b.w	ccaa <z_reschedule_irqlock>

0000ccd6 <z_unpend_all>:
{
    ccd6:	b538      	push	{r3, r4, r5, lr}
    ccd8:	4605      	mov	r5, r0
	int need_sched = 0;
    ccda:	2000      	movs	r0, #0
	return list->head == list;
    ccdc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ccde:	42a5      	cmp	r5, r4
    cce0:	d000      	beq.n	cce4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    cce2:	b904      	cbnz	r4, cce6 <z_unpend_all+0x10>
}
    cce4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    cce6:	4620      	mov	r0, r4
    cce8:	f7ff ffc7 	bl	cc7a <z_unpend_thread>
		z_ready_thread(thread);
    ccec:	4620      	mov	r0, r4
    ccee:	f7ff ff49 	bl	cb84 <z_ready_thread>
		need_sched = 1;
    ccf2:	2001      	movs	r0, #1
    ccf4:	e7f2      	b.n	ccdc <z_unpend_all+0x6>

0000ccf6 <z_sched_wake>:
{
    ccf6:	b538      	push	{r3, r4, r5, lr}
    ccf8:	f04f 0320 	mov.w	r3, #32
    ccfc:	f3ef 8511 	mrs	r5, BASEPRI
    cd00:	f383 8812 	msr	BASEPRI_MAX, r3
    cd04:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cd08:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cd0a:	42a0      	cmp	r0, r4
    cd0c:	d012      	beq.n	cd34 <z_sched_wake+0x3e>
		if (thread != NULL) {
    cd0e:	b19c      	cbz	r4, cd38 <z_sched_wake+0x42>
    cd10:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    cd12:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    cd14:	4620      	mov	r0, r4
    cd16:	f7ff ff03 	bl	cb20 <unpend_thread_no_timeout>
    cd1a:	f104 0018 	add.w	r0, r4, #24
    cd1e:	f000 f80d 	bl	cd3c <z_abort_timeout>
			ready_thread(thread);
    cd22:	4620      	mov	r0, r4
    cd24:	f7fd f9dc 	bl	a0e0 <ready_thread>
			ret = true;
    cd28:	2001      	movs	r0, #1
	__asm__ volatile(
    cd2a:	f385 8811 	msr	BASEPRI, r5
    cd2e:	f3bf 8f6f 	isb	sy
}
    cd32:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    cd34:	2000      	movs	r0, #0
    cd36:	e7f8      	b.n	cd2a <z_sched_wake+0x34>
    cd38:	4620      	mov	r0, r4
    cd3a:	e7f6      	b.n	cd2a <z_sched_wake+0x34>

0000cd3c <z_abort_timeout>:
{
    cd3c:	b510      	push	{r4, lr}
	__asm__ volatile(
    cd3e:	f04f 0220 	mov.w	r2, #32
    cd42:	f3ef 8411 	mrs	r4, BASEPRI
    cd46:	f382 8812 	msr	BASEPRI_MAX, r2
    cd4a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    cd4e:	6803      	ldr	r3, [r0, #0]
    cd50:	b13b      	cbz	r3, cd62 <z_abort_timeout+0x26>
			remove_timeout(to);
    cd52:	f7fd fcc9 	bl	a6e8 <remove_timeout>
			ret = 0;
    cd56:	2000      	movs	r0, #0
	__asm__ volatile(
    cd58:	f384 8811 	msr	BASEPRI, r4
    cd5c:	f3bf 8f6f 	isb	sy
}
    cd60:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    cd62:	f06f 0015 	mvn.w	r0, #21
    cd66:	e7f7      	b.n	cd58 <z_abort_timeout+0x1c>

0000cd68 <z_get_next_timeout_expiry>:
{
    cd68:	b510      	push	{r4, lr}
	__asm__ volatile(
    cd6a:	f04f 0320 	mov.w	r3, #32
    cd6e:	f3ef 8411 	mrs	r4, BASEPRI
    cd72:	f383 8812 	msr	BASEPRI_MAX, r3
    cd76:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    cd7a:	f7fd fc95 	bl	a6a8 <next_timeout>
	__asm__ volatile(
    cd7e:	f384 8811 	msr	BASEPRI, r4
    cd82:	f3bf 8f6f 	isb	sy
}
    cd86:	bd10      	pop	{r4, pc}

0000cd88 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    cd88:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    cd8a:	f7fd fda9 	bl	a8e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    cd8e:	bd08      	pop	{r3, pc}

0000cd90 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    cd90:	f7fd bda6 	b.w	a8e0 <sys_clock_tick_get>

0000cd94 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    cd94:	b108      	cbz	r0, cd9a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    cd96:	f7f8 bc47 	b.w	5628 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    cd9a:	4770      	bx	lr

0000cd9c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cd9c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    cda0:	bf08      	it	eq
    cda2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    cda6:	b538      	push	{r3, r4, r5, lr}
    cda8:	460c      	mov	r4, r1
    cdaa:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cdac:	d014      	beq.n	cdd8 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    cdae:	4308      	orrs	r0, r1
    cdb0:	d103      	bne.n	cdba <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    cdb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    cdb6:	f7fd bd93 	b.w	a8e0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    cdba:	f06f 0001 	mvn.w	r0, #1
    cdbe:	1b40      	subs	r0, r0, r5
    cdc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdc4:	eb63 0101 	sbc.w	r1, r3, r1
    cdc8:	2900      	cmp	r1, #0
    cdca:	da04      	bge.n	cdd6 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    cdcc:	f7fd fd88 	bl	a8e0 <sys_clock_tick_get>
    cdd0:	1940      	adds	r0, r0, r5
    cdd2:	eb41 0104 	adc.w	r1, r1, r4
}
    cdd6:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    cdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cddc:	4601      	mov	r1, r0
    cdde:	e7fa      	b.n	cdd6 <sys_clock_timeout_end_calc+0x3a>

0000cde0 <k_timer_init>:
	timer->status = 0U;
    cde0:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    cde2:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    cde6:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    cdea:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    cdee:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    cdf2:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    cdf4:	6343      	str	r3, [r0, #52]	; 0x34
}
    cdf6:	4770      	bx	lr

0000cdf8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    cdf8:	b510      	push	{r4, lr}
    cdfa:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    cdfc:	f7ff ff9e 	bl	cd3c <z_abort_timeout>

	if (inactive) {
    ce00:	b9b0      	cbnz	r0, ce30 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    ce02:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce04:	b10b      	cbz	r3, ce0a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    ce06:	4620      	mov	r0, r4
    ce08:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ce0a:	f104 0018 	add.w	r0, r4, #24
    ce0e:	f7ff ff01 	bl	cc14 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ce12:	b168      	cbz	r0, ce30 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ce14:	f7ff feb6 	bl	cb84 <z_ready_thread>
	__asm__ volatile(
    ce18:	f04f 0320 	mov.w	r3, #32
    ce1c:	f3ef 8011 	mrs	r0, BASEPRI
    ce20:	f383 8812 	msr	BASEPRI_MAX, r3
    ce24:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ce28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ce2c:	f7ff bf3d 	b.w	ccaa <z_reschedule_irqlock>
    ce30:	bd10      	pop	{r4, pc}

0000ce32 <k_free>:
	if (ptr != NULL) {
    ce32:	b120      	cbz	r0, ce3e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    ce34:	1f01      	subs	r1, r0, #4
    ce36:	f850 0c04 	ldr.w	r0, [r0, #-4]
    ce3a:	f000 b856 	b.w	ceea <k_heap_free>
}
    ce3e:	4770      	bx	lr

0000ce40 <k_heap_init>:
{
    ce40:	b410      	push	{r4}
    ce42:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    ce46:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ce4a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ce4c:	f7fe ba62 	b.w	b314 <sys_heap_init>

0000ce50 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce54:	b085      	sub	sp, #20
    ce56:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    ce5a:	4607      	mov	r7, r0
    ce5c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ce5e:	4650      	mov	r0, sl
    ce60:	4621      	mov	r1, r4
{
    ce62:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ce64:	f7ff ff9a 	bl	cd9c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    ce68:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    ce6c:	bf08      	it	eq
    ce6e:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ce72:	4605      	mov	r5, r0
    ce74:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    ce76:	bf04      	itt	eq
    ce78:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    ce7c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ce80:	f107 0a14 	add.w	sl, r7, #20
    ce84:	f04f 0320 	mov.w	r3, #32
    ce88:	f3ef 8411 	mrs	r4, BASEPRI
    ce8c:	f383 8812 	msr	BASEPRI_MAX, r3
    ce90:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ce94:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    ce98:	464a      	mov	r2, r9
    ce9a:	4641      	mov	r1, r8
    ce9c:	4638      	mov	r0, r7
    ce9e:	f7fe f9d2 	bl	b246 <sys_heap_aligned_alloc>
    cea2:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    cea4:	f7fd fd1c 	bl	a8e0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    cea8:	9b03      	ldr	r3, [sp, #12]
    ceaa:	b13b      	cbz	r3, cebc <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    ceac:	f384 8811 	msr	BASEPRI, r4
    ceb0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    ceb4:	4618      	mov	r0, r3
    ceb6:	b005      	add	sp, #20
    ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    cebc:	1a28      	subs	r0, r5, r0
    cebe:	eb66 0101 	sbc.w	r1, r6, r1
    cec2:	2801      	cmp	r0, #1
    cec4:	f171 0200 	sbcs.w	r2, r1, #0
    cec8:	dbf0      	blt.n	ceac <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ceca:	e9cd 0100 	strd	r0, r1, [sp]
    cece:	465a      	mov	r2, fp
    ced0:	4621      	mov	r1, r4
    ced2:	4650      	mov	r0, sl
    ced4:	f7fd f998 	bl	a208 <z_pend_curr>
	__asm__ volatile(
    ced8:	f04f 0320 	mov.w	r3, #32
    cedc:	f3ef 8411 	mrs	r4, BASEPRI
    cee0:	f383 8812 	msr	BASEPRI_MAX, r3
    cee4:	f3bf 8f6f 	isb	sy
	return k;
    cee8:	e7d6      	b.n	ce98 <k_heap_aligned_alloc+0x48>

0000ceea <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    ceea:	b538      	push	{r3, r4, r5, lr}
    ceec:	4604      	mov	r4, r0
    ceee:	f04f 0320 	mov.w	r3, #32
    cef2:	f3ef 8511 	mrs	r5, BASEPRI
    cef6:	f383 8812 	msr	BASEPRI_MAX, r3
    cefa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    cefe:	f7fe f96a 	bl	b1d6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    cf02:	f104 000c 	add.w	r0, r4, #12
    cf06:	f7ff fee6 	bl	ccd6 <z_unpend_all>
    cf0a:	b130      	cbz	r0, cf1a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    cf0c:	4629      	mov	r1, r5
    cf0e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    cf12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    cf16:	f7fd b9db 	b.w	a2d0 <z_reschedule>
	__asm__ volatile(
    cf1a:	f385 8811 	msr	BASEPRI, r5
    cf1e:	f3bf 8f6f 	isb	sy
}
    cf22:	bd38      	pop	{r3, r4, r5, pc}

0000cf24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    cf24:	4770      	bx	lr
	...
