
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_table>:
    1000:	00 35 00 20 99 42 00 00 41 af 00 00 6d 42 00 00     .5. .B..A...mB..
    1010:	6d 42 00 00 6d 42 00 00 6d 42 00 00 00 00 00 00     mB..mB..mB......
	...
    102c:	69 3b 00 00 6d 42 00 00 00 00 00 00 15 3b 00 00     i;..mB.......;..
    103c:	6d 42 00 00                                         mB..

00001040 <_irq_vector_table>:
    1040:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    1050:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    1060:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    1070:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    1080:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    1090:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10a0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10b0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10c0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10d0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10e0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..
    10f0:	19 3c 00 00 19 3c 00 00 19 3c 00 00 19 3c 00 00     .<...<...<...<..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    1110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1114:	f000 b80c 	b.w	1130 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f808 	bl	1134 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__aeabi_idiv0>:
    1130:	4770      	bx	lr
    1132:	bf00      	nop

00001134 <__udivmoddi4>:
    1134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1138:	4686      	mov	lr, r0
    113a:	468c      	mov	ip, r1
    113c:	4608      	mov	r0, r1
    113e:	9e08      	ldr	r6, [sp, #32]
    1140:	4615      	mov	r5, r2
    1142:	4674      	mov	r4, lr
    1144:	4619      	mov	r1, r3
    1146:	2b00      	cmp	r3, #0
    1148:	f040 80c2 	bne.w	12d0 <__udivmoddi4+0x19c>
    114c:	4285      	cmp	r5, r0
    114e:	fab2 f282 	clz	r2, r2
    1152:	d945      	bls.n	11e0 <__udivmoddi4+0xac>
    1154:	b14a      	cbz	r2, 116a <__udivmoddi4+0x36>
    1156:	f1c2 0320 	rsb	r3, r2, #32
    115a:	fa00 fc02 	lsl.w	ip, r0, r2
    115e:	fa2e f303 	lsr.w	r3, lr, r3
    1162:	4095      	lsls	r5, r2
    1164:	ea43 0c0c 	orr.w	ip, r3, ip
    1168:	4094      	lsls	r4, r2
    116a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    116e:	b2a8      	uxth	r0, r5
    1170:	fbbc f8fe 	udiv	r8, ip, lr
    1174:	0c23      	lsrs	r3, r4, #16
    1176:	fb0e cc18 	mls	ip, lr, r8, ip
    117a:	fb08 f900 	mul.w	r9, r8, r0
    117e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    1182:	4599      	cmp	r9, r3
    1184:	d928      	bls.n	11d8 <__udivmoddi4+0xa4>
    1186:	18eb      	adds	r3, r5, r3
    1188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    118c:	d204      	bcs.n	1198 <__udivmoddi4+0x64>
    118e:	4599      	cmp	r9, r3
    1190:	d902      	bls.n	1198 <__udivmoddi4+0x64>
    1192:	f1a8 0702 	sub.w	r7, r8, #2
    1196:	442b      	add	r3, r5
    1198:	eba3 0309 	sub.w	r3, r3, r9
    119c:	b2a4      	uxth	r4, r4
    119e:	fbb3 fcfe 	udiv	ip, r3, lr
    11a2:	fb0e 331c 	mls	r3, lr, ip, r3
    11a6:	fb0c f000 	mul.w	r0, ip, r0
    11aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11ae:	42a0      	cmp	r0, r4
    11b0:	d914      	bls.n	11dc <__udivmoddi4+0xa8>
    11b2:	192c      	adds	r4, r5, r4
    11b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    11b8:	d204      	bcs.n	11c4 <__udivmoddi4+0x90>
    11ba:	42a0      	cmp	r0, r4
    11bc:	d902      	bls.n	11c4 <__udivmoddi4+0x90>
    11be:	f1ac 0302 	sub.w	r3, ip, #2
    11c2:	442c      	add	r4, r5
    11c4:	1a24      	subs	r4, r4, r0
    11c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    11ca:	b11e      	cbz	r6, 11d4 <__udivmoddi4+0xa0>
    11cc:	40d4      	lsrs	r4, r2
    11ce:	2300      	movs	r3, #0
    11d0:	6034      	str	r4, [r6, #0]
    11d2:	6073      	str	r3, [r6, #4]
    11d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d8:	4647      	mov	r7, r8
    11da:	e7dd      	b.n	1198 <__udivmoddi4+0x64>
    11dc:	4663      	mov	r3, ip
    11de:	e7f1      	b.n	11c4 <__udivmoddi4+0x90>
    11e0:	bb92      	cbnz	r2, 1248 <__udivmoddi4+0x114>
    11e2:	1b43      	subs	r3, r0, r5
    11e4:	2101      	movs	r1, #1
    11e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    11ea:	b2af      	uxth	r7, r5
    11ec:	fbb3 fcfe 	udiv	ip, r3, lr
    11f0:	0c20      	lsrs	r0, r4, #16
    11f2:	fb0e 331c 	mls	r3, lr, ip, r3
    11f6:	fb0c f807 	mul.w	r8, ip, r7
    11fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    11fe:	4598      	cmp	r8, r3
    1200:	d962      	bls.n	12c8 <__udivmoddi4+0x194>
    1202:	18eb      	adds	r3, r5, r3
    1204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1208:	d204      	bcs.n	1214 <__udivmoddi4+0xe0>
    120a:	4598      	cmp	r8, r3
    120c:	d902      	bls.n	1214 <__udivmoddi4+0xe0>
    120e:	f1ac 0002 	sub.w	r0, ip, #2
    1212:	442b      	add	r3, r5
    1214:	eba3 0308 	sub.w	r3, r3, r8
    1218:	b2a4      	uxth	r4, r4
    121a:	fbb3 fcfe 	udiv	ip, r3, lr
    121e:	fb0e 331c 	mls	r3, lr, ip, r3
    1222:	fb0c f707 	mul.w	r7, ip, r7
    1226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    122a:	42a7      	cmp	r7, r4
    122c:	d94e      	bls.n	12cc <__udivmoddi4+0x198>
    122e:	192c      	adds	r4, r5, r4
    1230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    1234:	d204      	bcs.n	1240 <__udivmoddi4+0x10c>
    1236:	42a7      	cmp	r7, r4
    1238:	d902      	bls.n	1240 <__udivmoddi4+0x10c>
    123a:	f1ac 0302 	sub.w	r3, ip, #2
    123e:	442c      	add	r4, r5
    1240:	1be4      	subs	r4, r4, r7
    1242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1246:	e7c0      	b.n	11ca <__udivmoddi4+0x96>
    1248:	f1c2 0320 	rsb	r3, r2, #32
    124c:	fa20 f103 	lsr.w	r1, r0, r3
    1250:	4095      	lsls	r5, r2
    1252:	4090      	lsls	r0, r2
    1254:	fa2e f303 	lsr.w	r3, lr, r3
    1258:	4303      	orrs	r3, r0
    125a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    125e:	b2af      	uxth	r7, r5
    1260:	fbb1 fcfe 	udiv	ip, r1, lr
    1264:	fb0e 101c 	mls	r0, lr, ip, r1
    1268:	0c19      	lsrs	r1, r3, #16
    126a:	fb0c f807 	mul.w	r8, ip, r7
    126e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1272:	4588      	cmp	r8, r1
    1274:	fa04 f402 	lsl.w	r4, r4, r2
    1278:	d922      	bls.n	12c0 <__udivmoddi4+0x18c>
    127a:	1869      	adds	r1, r5, r1
    127c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    1280:	d204      	bcs.n	128c <__udivmoddi4+0x158>
    1282:	4588      	cmp	r8, r1
    1284:	d902      	bls.n	128c <__udivmoddi4+0x158>
    1286:	f1ac 0002 	sub.w	r0, ip, #2
    128a:	4429      	add	r1, r5
    128c:	eba1 0108 	sub.w	r1, r1, r8
    1290:	b29b      	uxth	r3, r3
    1292:	fbb1 fcfe 	udiv	ip, r1, lr
    1296:	fb0e 111c 	mls	r1, lr, ip, r1
    129a:	fb0c f707 	mul.w	r7, ip, r7
    129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12a2:	429f      	cmp	r7, r3
    12a4:	d90e      	bls.n	12c4 <__udivmoddi4+0x190>
    12a6:	18eb      	adds	r3, r5, r3
    12a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    12ac:	d204      	bcs.n	12b8 <__udivmoddi4+0x184>
    12ae:	429f      	cmp	r7, r3
    12b0:	d902      	bls.n	12b8 <__udivmoddi4+0x184>
    12b2:	f1ac 0102 	sub.w	r1, ip, #2
    12b6:	442b      	add	r3, r5
    12b8:	1bdb      	subs	r3, r3, r7
    12ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    12be:	e792      	b.n	11e6 <__udivmoddi4+0xb2>
    12c0:	4660      	mov	r0, ip
    12c2:	e7e3      	b.n	128c <__udivmoddi4+0x158>
    12c4:	4661      	mov	r1, ip
    12c6:	e7f7      	b.n	12b8 <__udivmoddi4+0x184>
    12c8:	4660      	mov	r0, ip
    12ca:	e7a3      	b.n	1214 <__udivmoddi4+0xe0>
    12cc:	4663      	mov	r3, ip
    12ce:	e7b7      	b.n	1240 <__udivmoddi4+0x10c>
    12d0:	4283      	cmp	r3, r0
    12d2:	d906      	bls.n	12e2 <__udivmoddi4+0x1ae>
    12d4:	b916      	cbnz	r6, 12dc <__udivmoddi4+0x1a8>
    12d6:	2100      	movs	r1, #0
    12d8:	4608      	mov	r0, r1
    12da:	e77b      	b.n	11d4 <__udivmoddi4+0xa0>
    12dc:	e9c6 e000 	strd	lr, r0, [r6]
    12e0:	e7f9      	b.n	12d6 <__udivmoddi4+0x1a2>
    12e2:	fab3 f783 	clz	r7, r3
    12e6:	b98f      	cbnz	r7, 130c <__udivmoddi4+0x1d8>
    12e8:	4283      	cmp	r3, r0
    12ea:	d301      	bcc.n	12f0 <__udivmoddi4+0x1bc>
    12ec:	4572      	cmp	r2, lr
    12ee:	d808      	bhi.n	1302 <__udivmoddi4+0x1ce>
    12f0:	ebbe 0402 	subs.w	r4, lr, r2
    12f4:	eb60 0303 	sbc.w	r3, r0, r3
    12f8:	2001      	movs	r0, #1
    12fa:	469c      	mov	ip, r3
    12fc:	b91e      	cbnz	r6, 1306 <__udivmoddi4+0x1d2>
    12fe:	2100      	movs	r1, #0
    1300:	e768      	b.n	11d4 <__udivmoddi4+0xa0>
    1302:	4638      	mov	r0, r7
    1304:	e7fa      	b.n	12fc <__udivmoddi4+0x1c8>
    1306:	e9c6 4c00 	strd	r4, ip, [r6]
    130a:	e7f8      	b.n	12fe <__udivmoddi4+0x1ca>
    130c:	f1c7 0c20 	rsb	ip, r7, #32
    1310:	40bb      	lsls	r3, r7
    1312:	fa22 f40c 	lsr.w	r4, r2, ip
    1316:	431c      	orrs	r4, r3
    1318:	fa2e f10c 	lsr.w	r1, lr, ip
    131c:	fa20 f30c 	lsr.w	r3, r0, ip
    1320:	40b8      	lsls	r0, r7
    1322:	4301      	orrs	r1, r0
    1324:	ea4f 4914 	mov.w	r9, r4, lsr #16
    1328:	fa0e f507 	lsl.w	r5, lr, r7
    132c:	fbb3 f8f9 	udiv	r8, r3, r9
    1330:	fa1f fe84 	uxth.w	lr, r4
    1334:	fb09 3018 	mls	r0, r9, r8, r3
    1338:	0c0b      	lsrs	r3, r1, #16
    133a:	fb08 fa0e 	mul.w	sl, r8, lr
    133e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1342:	459a      	cmp	sl, r3
    1344:	fa02 f207 	lsl.w	r2, r2, r7
    1348:	d940      	bls.n	13cc <__udivmoddi4+0x298>
    134a:	18e3      	adds	r3, r4, r3
    134c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    1350:	d204      	bcs.n	135c <__udivmoddi4+0x228>
    1352:	459a      	cmp	sl, r3
    1354:	d902      	bls.n	135c <__udivmoddi4+0x228>
    1356:	f1a8 0002 	sub.w	r0, r8, #2
    135a:	4423      	add	r3, r4
    135c:	eba3 030a 	sub.w	r3, r3, sl
    1360:	b289      	uxth	r1, r1
    1362:	fbb3 f8f9 	udiv	r8, r3, r9
    1366:	fb09 3318 	mls	r3, r9, r8, r3
    136a:	fb08 fe0e 	mul.w	lr, r8, lr
    136e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1372:	458e      	cmp	lr, r1
    1374:	d92c      	bls.n	13d0 <__udivmoddi4+0x29c>
    1376:	1861      	adds	r1, r4, r1
    1378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    137c:	d204      	bcs.n	1388 <__udivmoddi4+0x254>
    137e:	458e      	cmp	lr, r1
    1380:	d902      	bls.n	1388 <__udivmoddi4+0x254>
    1382:	f1a8 0302 	sub.w	r3, r8, #2
    1386:	4421      	add	r1, r4
    1388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    138c:	fba0 9802 	umull	r9, r8, r0, r2
    1390:	eba1 010e 	sub.w	r1, r1, lr
    1394:	4541      	cmp	r1, r8
    1396:	46ce      	mov	lr, r9
    1398:	4643      	mov	r3, r8
    139a:	d302      	bcc.n	13a2 <__udivmoddi4+0x26e>
    139c:	d106      	bne.n	13ac <__udivmoddi4+0x278>
    139e:	454d      	cmp	r5, r9
    13a0:	d204      	bcs.n	13ac <__udivmoddi4+0x278>
    13a2:	ebb9 0e02 	subs.w	lr, r9, r2
    13a6:	eb68 0304 	sbc.w	r3, r8, r4
    13aa:	3801      	subs	r0, #1
    13ac:	2e00      	cmp	r6, #0
    13ae:	d0a6      	beq.n	12fe <__udivmoddi4+0x1ca>
    13b0:	ebb5 020e 	subs.w	r2, r5, lr
    13b4:	eb61 0103 	sbc.w	r1, r1, r3
    13b8:	fa01 fc0c 	lsl.w	ip, r1, ip
    13bc:	fa22 f307 	lsr.w	r3, r2, r7
    13c0:	ea4c 0303 	orr.w	r3, ip, r3
    13c4:	40f9      	lsrs	r1, r7
    13c6:	e9c6 3100 	strd	r3, r1, [r6]
    13ca:	e798      	b.n	12fe <__udivmoddi4+0x1ca>
    13cc:	4640      	mov	r0, r8
    13ce:	e7c5      	b.n	135c <__udivmoddi4+0x228>
    13d0:	4643      	mov	r3, r8
    13d2:	e7d9      	b.n	1388 <__udivmoddi4+0x254>

000013d4 <composite_pre_init>:

	}
}

static int composite_pre_init(void)
{
    13d4:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    13d6:	4818      	ldr	r0, [pc, #96]	; (1438 <composite_pre_init+0x64>)
	hdev = device_get_binding("HID_0");
    13d8:	4c18      	ldr	r4, [pc, #96]	; (143c <composite_pre_init+0x68>)
    13da:	f007 faa1 	bl	8920 <z_impl_device_get_binding>
    13de:	4601      	mov	r1, r0
    13e0:	6020      	str	r0, [r4, #0]
	if (hdev == NULL) {
    13e2:	b310      	cbz	r0, 142a <composite_pre_init+0x56>
		printk("Cannot get USB HID Device");
		return -ENODEV;
	}

	printk("HID Device: dev %p", hdev);
    13e4:	4816      	ldr	r0, [pc, #88]	; (1440 <composite_pre_init+0x6c>)
    13e6:	f008 ff82 	bl	a2ee <printk>

	usb_hid_register_device(hdev, hid_kbd_report_desc,sizeof(hid_kbd_report_desc), &ops);
    13ea:	4b16      	ldr	r3, [pc, #88]	; (1444 <composite_pre_init+0x70>)
    13ec:	4916      	ldr	r1, [pc, #88]	; (1448 <composite_pre_init+0x74>)
    13ee:	6820      	ldr	r0, [r4, #0]
    13f0:	223f      	movs	r2, #63	; 0x3f
    13f2:	f003 faf1 	bl	49d8 <usb_hid_register_device>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    13f6:	f3bf 8f5b 	dmb	ish
    13fa:	4b14      	ldr	r3, [pc, #80]	; (144c <composite_pre_init+0x78>)
    13fc:	e853 1f00 	ldrex	r1, [r3]
    1400:	f041 0101 	orr.w	r1, r1, #1
    1404:	e843 1200 	strex	r2, r1, [r3]
    1408:	2a00      	cmp	r2, #0
    140a:	d1f7      	bne.n	13fc <composite_pre_init+0x28>
    140c:	f3bf 8f5b 	dmb	ish


	atomic_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG);


	if (usb_hid_set_proto_code(hdev, HID_BOOT_IFACE_CODE_NONE)) {
    1410:	2100      	movs	r1, #0
    1412:	6820      	ldr	r0, [r4, #0]
    1414:	f009 fdfd 	bl	b012 <usb_hid_set_proto_code>
    1418:	b110      	cbz	r0, 1420 <composite_pre_init+0x4c>
		printk("Failed to set Protocol Code");
    141a:	480d      	ldr	r0, [pc, #52]	; (1450 <composite_pre_init+0x7c>)
    141c:	f008 ff67 	bl	a2ee <printk>
	}

	return usb_hid_init(hdev);
    1420:	6820      	ldr	r0, [r4, #0]
}
    1422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return usb_hid_init(hdev);
    1426:	f009 bdf9 	b.w	b01c <usb_hid_init>
		printk("Cannot get USB HID Device");
    142a:	480a      	ldr	r0, [pc, #40]	; (1454 <composite_pre_init+0x80>)
    142c:	f008 ff5f 	bl	a2ee <printk>
}
    1430:	f06f 0012 	mvn.w	r0, #18
    1434:	bd10      	pop	{r4, pc}
    1436:	bf00      	nop
    1438:	0000c40c 	.word	0x0000c40c
    143c:	20000a14 	.word	0x20000a14
    1440:	0000c42c 	.word	0x0000c42c
    1444:	0000c138 	.word	0x0000c138
    1448:	0000c4f6 	.word	0x0000c4f6
    144c:	20000a10 	.word	0x20000a10
    1450:	0000c43f 	.word	0x0000c43f
    1454:	0000c412 	.word	0x0000c412

00001458 <int_in_ready_cb>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1458:	4b09      	ldr	r3, [pc, #36]	; (1480 <int_in_ready_cb+0x28>)
    145a:	f3bf 8f5b 	dmb	ish
    145e:	e853 2f00 	ldrex	r2, [r3]
    1462:	f022 0101 	bic.w	r1, r2, #1
    1466:	e843 1000 	strex	r0, r1, [r3]
    146a:	2800      	cmp	r0, #0
    146c:	d1f7      	bne.n	145e <int_in_ready_cb+0x6>
    146e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_clear_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    1472:	07d3      	lsls	r3, r2, #31
    1474:	d402      	bmi.n	147c <int_in_ready_cb+0x24>
		printk("IN endpoint callback without preceding buffer write");
    1476:	4803      	ldr	r0, [pc, #12]	; (1484 <int_in_ready_cb+0x2c>)
    1478:	f008 bf39 	b.w	a2ee <printk>
}
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	20000a10 	.word	0x20000a10
    1484:	0000c45b 	.word	0x0000c45b

00001488 <status_cb>:
	switch (status) {
    1488:	2803      	cmp	r0, #3
{
    148a:	b510      	push	{r4, lr}
    148c:	4601      	mov	r1, r0
	switch (status) {
    148e:	d007      	beq.n	14a0 <status_cb+0x18>
    1490:	280a      	cmp	r0, #10
    1492:	d004      	beq.n	149e <status_cb+0x16>
    1494:	2801      	cmp	r0, #1
    1496:	d10e      	bne.n	14b6 <status_cb+0x2e>
		configured = false;
    1498:	4b09      	ldr	r3, [pc, #36]	; (14c0 <status_cb+0x38>)
    149a:	2200      	movs	r2, #0
    149c:	701a      	strb	r2, [r3, #0]
}
    149e:	bd10      	pop	{r4, pc}
		if (!configured) {
    14a0:	4c07      	ldr	r4, [pc, #28]	; (14c0 <status_cb+0x38>)
    14a2:	7823      	ldrb	r3, [r4, #0]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d1fa      	bne.n	149e <status_cb+0x16>
			int_in_ready_cb(hdev);
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <status_cb+0x3c>)
    14aa:	6818      	ldr	r0, [r3, #0]
    14ac:	f7ff ffd4 	bl	1458 <int_in_ready_cb>
			configured = true;
    14b0:	2301      	movs	r3, #1
    14b2:	7023      	strb	r3, [r4, #0]
}
    14b4:	e7f3      	b.n	149e <status_cb+0x16>
    14b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("status %u unhandled", status);
    14ba:	4803      	ldr	r0, [pc, #12]	; (14c8 <status_cb+0x40>)
    14bc:	f008 bf17 	b.w	a2ee <printk>
    14c0:	20001f72 	.word	0x20001f72
    14c4:	20000a14 	.word	0x20000a14
    14c8:	0000c48f 	.word	0x0000c48f

000014cc <clear_report>:
{
    14cc:	b507      	push	{r0, r1, r2, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    14ce:	4a15      	ldr	r2, [pc, #84]	; (1524 <clear_report+0x58>)
    14d0:	f3bf 8f5b 	dmb	ish
    14d4:	e852 3f00 	ldrex	r3, [r2]
    14d8:	f043 0101 	orr.w	r1, r3, #1
    14dc:	e842 1000 	strex	r0, r1, [r2]
    14e0:	2800      	cmp	r0, #0
    14e2:	d1f7      	bne.n	14d4 <clear_report+0x8>
    14e4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    14e8:	f013 0301 	ands.w	r3, r3, #1
    14ec:	d113      	bne.n	1516 <clear_report+0x4a>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    14ee:	490e      	ldr	r1, [pc, #56]	; (1528 <clear_report+0x5c>)
    14f0:	6808      	ldr	r0, [r1, #0]
    14f2:	6849      	ldr	r1, [r1, #4]
    14f4:	466a      	mov	r2, sp
    14f6:	c203      	stmia	r2!, {r0, r1}
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    14f8:	480c      	ldr	r0, [pc, #48]	; (152c <clear_report+0x60>)
    14fa:	2208      	movs	r2, #8
    14fc:	6800      	ldr	r0, [r0, #0]
    14fe:	4669      	mov	r1, sp
    1500:	f003 fa80 	bl	4a04 <hid_int_ep_write>
		if (ret != 0) {
    1504:	b128      	cbz	r0, 1512 <clear_report+0x46>
			printk("Failed to submit report");
    1506:	480a      	ldr	r0, [pc, #40]	; (1530 <clear_report+0x64>)
			printk("Report submitted");
    1508:	f008 fef1 	bl	a2ee <printk>
}
    150c:	b003      	add	sp, #12
    150e:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("Report submitted");
    1512:	4808      	ldr	r0, [pc, #32]	; (1534 <clear_report+0x68>)
    1514:	e7f8      	b.n	1508 <clear_report+0x3c>
		printk("HID IN endpoint busy");
    1516:	4808      	ldr	r0, [pc, #32]	; (1538 <clear_report+0x6c>)
}
    1518:	b003      	add	sp, #12
    151a:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("HID IN endpoint busy");
    151e:	f008 bee6 	b.w	a2ee <printk>
    1522:	bf00      	nop
    1524:	20000a10 	.word	0x20000a10
    1528:	0000c120 	.word	0x0000c120
    152c:	20000a14 	.word	0x20000a14
    1530:	0000c4a3 	.word	0x0000c4a3
    1534:	0000c4bb 	.word	0x0000c4bb
    1538:	0000c4cc 	.word	0x0000c4cc

0000153c <send_report>:
{
    153c:	b507      	push	{r0, r1, r2, lr}
    153e:	4a16      	ldr	r2, [pc, #88]	; (1598 <send_report+0x5c>)
    1540:	f3bf 8f5b 	dmb	ish
    1544:	e852 3f00 	ldrex	r3, [r2]
    1548:	f043 0101 	orr.w	r1, r3, #1
    154c:	e842 1000 	strex	r0, r1, [r2]
    1550:	2800      	cmp	r0, #0
    1552:	d1f7      	bne.n	1544 <send_report+0x8>
    1554:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(hid_ep_in_busy, HID_EP_BUSY_FLAG)) {
    1558:	f013 0301 	ands.w	r3, r3, #1
    155c:	d116      	bne.n	158c <send_report+0x50>
		uint8_t rep[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    155e:	490f      	ldr	r1, [pc, #60]	; (159c <send_report+0x60>)
    1560:	6808      	ldr	r0, [r1, #0]
    1562:	6849      	ldr	r1, [r1, #4]
    1564:	466a      	mov	r2, sp
    1566:	c203      	stmia	r2!, {r0, r1}
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    1568:	480d      	ldr	r0, [pc, #52]	; (15a0 <send_report+0x64>)
		rep[7] = HID_KEY_Z;
    156a:	221d      	movs	r2, #29
    156c:	f88d 2007 	strb.w	r2, [sp, #7]
		int ret = hid_int_ep_write(hdev,rep,sizeof(rep), NULL);
    1570:	6800      	ldr	r0, [r0, #0]
    1572:	2208      	movs	r2, #8
    1574:	4669      	mov	r1, sp
    1576:	f003 fa45 	bl	4a04 <hid_int_ep_write>
		if (ret != 0) {
    157a:	b128      	cbz	r0, 1588 <send_report+0x4c>
			printk("Failed to submit report");
    157c:	4809      	ldr	r0, [pc, #36]	; (15a4 <send_report+0x68>)
			printk("Report submitted");
    157e:	f008 feb6 	bl	a2ee <printk>
}
    1582:	b003      	add	sp, #12
    1584:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("Report submitted");
    1588:	4807      	ldr	r0, [pc, #28]	; (15a8 <send_report+0x6c>)
    158a:	e7f8      	b.n	157e <send_report+0x42>
		printk("HID IN endpoint busy");
    158c:	4807      	ldr	r0, [pc, #28]	; (15ac <send_report+0x70>)
}
    158e:	b003      	add	sp, #12
    1590:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("HID IN endpoint busy");
    1594:	f008 beab 	b.w	a2ee <printk>
    1598:	20000a10 	.word	0x20000a10
    159c:	0000c120 	.word	0x0000c120
    15a0:	20000a14 	.word	0x20000a14
    15a4:	0000c4a3 	.word	0x0000c4a3
    15a8:	0000c4bb 	.word	0x0000c4bb
    15ac:	0000c4cc 	.word	0x0000c4cc

000015b0 <main>:
{
    15b0:	b538      	push	{r3, r4, r5, lr}
	int ret = usb_enable(status_cb);
    15b2:	4812      	ldr	r0, [pc, #72]	; (15fc <main+0x4c>)
    15b4:	f001 fdae 	bl	3114 <usb_enable>
	if (ret != 0) {
    15b8:	b9d0      	cbnz	r0, 15f0 <main+0x40>
	k_work_init(&report_send, send_report);
    15ba:	4911      	ldr	r1, [pc, #68]	; (1600 <main+0x50>)
    15bc:	4811      	ldr	r0, [pc, #68]	; (1604 <main+0x54>)
	k_work_submit(&report_send);
    15be:	4d11      	ldr	r5, [pc, #68]	; (1604 <main+0x54>)
	k_work_submit(&report_clear);
    15c0:	4c11      	ldr	r4, [pc, #68]	; (1608 <main+0x58>)
	k_work_init(&report_send, send_report);
    15c2:	f00a f9a3 	bl	b90c <k_work_init>
	k_work_init(&report_clear, clear_report);
    15c6:	4911      	ldr	r1, [pc, #68]	; (160c <main+0x5c>)
    15c8:	480f      	ldr	r0, [pc, #60]	; (1608 <main+0x58>)
    15ca:	f00a f99f 	bl	b90c <k_work_init>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    15ce:	2100      	movs	r1, #0
    15d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    15d4:	f008 f996 	bl	9904 <z_impl_k_sleep>
	k_work_submit(&report_send);
    15d8:	4628      	mov	r0, r5
    15da:	f007 fe93 	bl	9304 <k_work_submit>
    15de:	2100      	movs	r1, #0
    15e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    15e4:	f008 f98e 	bl	9904 <z_impl_k_sleep>
	k_work_submit(&report_clear);
    15e8:	4620      	mov	r0, r4
    15ea:	f007 fe8b 	bl	9304 <k_work_submit>
	while (1) {
    15ee:	e7ee      	b.n	15ce <main+0x1e>
		printk("Failed to enable USB");
    15f0:	4807      	ldr	r0, [pc, #28]	; (1610 <main+0x60>)
    15f2:	f008 fe7c 	bl	a2ee <printk>
}
    15f6:	2000      	movs	r0, #0
    15f8:	bd38      	pop	{r3, r4, r5, pc}
    15fa:	bf00      	nop
    15fc:	00001489 	.word	0x00001489
    1600:	0000153d 	.word	0x0000153d
    1604:	20000a28 	.word	0x20000a28
    1608:	20000a18 	.word	0x20000a18
    160c:	000014cd 	.word	0x000014cd
    1610:	0000c4e1 	.word	0x0000c4e1

00001614 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1618:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    161a:	0784      	lsls	r4, r0, #30
{
    161c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    161e:	f002 0304 	and.w	r3, r2, #4
    1622:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1624:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    1628:	f103 0301 	add.w	r3, r3, #1
    162c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    1630:	9203      	str	r2, [sp, #12]
    1632:	4605      	mov	r5, r0
    1634:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1636:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    1638:	f040 81be 	bne.w	19b8 <CONFIG_USB_DEVICE_VID+0xa3>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    163c:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    163e:	b130      	cbz	r0, 164e <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1640:	2907      	cmp	r1, #7
    1642:	d809      	bhi.n	1658 <cbvprintf_package+0x44>
		return -ENOSPC;
    1644:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1648:	b011      	add	sp, #68	; 0x44
    164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    164e:	f001 0607 	and.w	r6, r1, #7
    1652:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1654:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    1658:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    165a:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    165e:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    1660:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    1664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1668:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    166a:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    166e:	464f      	mov	r7, r9
	bool parsing = false;
    1670:	46cb      	mov	fp, r9
	size = sizeof(char *);
    1672:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    1674:	b10d      	cbz	r5, 167a <cbvprintf_package+0x66>
				*(const char **)buf = s;
    1676:	9a00      	ldr	r2, [sp, #0]
    1678:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    167a:	9805      	ldr	r0, [sp, #20]
    167c:	2800      	cmp	r0, #0
    167e:	f300 80eb 	bgt.w	1858 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1682:	489a      	ldr	r0, [pc, #616]	; (18ec <cbvprintf_package+0x2d8>)
    1684:	9a00      	ldr	r2, [sp, #0]
    1686:	4282      	cmp	r2, r0
    1688:	d303      	bcc.n	1692 <cbvprintf_package+0x7e>
    168a:	4899      	ldr	r0, [pc, #612]	; (18f0 <cbvprintf_package+0x2dc>)
    168c:	4282      	cmp	r2, r0
    168e:	f0c0 80e3 	bcc.w	1858 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1692:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1694:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1698:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    169a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    169e:	f100 8106 	bmi.w	18ae <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    16a2:	2f0f      	cmp	r7, #15
    16a4:	f200 80b4 	bhi.w	1810 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    16a8:	2d00      	cmp	r5, #0
    16aa:	f000 8108 	beq.w	18be <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    16ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
    16b2:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    16b6:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    16b8:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    16bc:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    16c0:	9804      	ldr	r0, [sp, #16]
    16c2:	3001      	adds	r0, #1
    16c4:	9004      	str	r0, [sp, #16]
    16c6:	e0ea      	b.n	189e <cbvprintf_package+0x28a>
			switch (*fmt) {
    16c8:	287a      	cmp	r0, #122	; 0x7a
    16ca:	d860      	bhi.n	178e <cbvprintf_package+0x17a>
    16cc:	284b      	cmp	r0, #75	; 0x4b
    16ce:	d80e      	bhi.n	16ee <cbvprintf_package+0xda>
    16d0:	2847      	cmp	r0, #71	; 0x47
    16d2:	d85c      	bhi.n	178e <cbvprintf_package+0x17a>
    16d4:	2829      	cmp	r0, #41	; 0x29
    16d6:	d82f      	bhi.n	1738 <cbvprintf_package+0x124>
    16d8:	2825      	cmp	r0, #37	; 0x25
    16da:	d055      	beq.n	1788 <cbvprintf_package+0x174>
    16dc:	d857      	bhi.n	178e <cbvprintf_package+0x17a>
    16de:	2820      	cmp	r0, #32
    16e0:	d07d      	beq.n	17de <cbvprintf_package+0x1ca>
    16e2:	3823      	subs	r0, #35	; 0x23
    16e4:	f1d0 0b00 	rsbs	fp, r0, #0
    16e8:	eb4b 0b00 	adc.w	fp, fp, r0
    16ec:	e077      	b.n	17de <cbvprintf_package+0x1ca>
    16ee:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    16f2:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    16f6:	d84a      	bhi.n	178e <cbvprintf_package+0x17a>
    16f8:	e8df f00c 	tbb	[pc, ip]
    16fc:	49494971 	.word	0x49494971
    1700:	49494949 	.word	0x49494949
    1704:	49494949 	.word	0x49494949
    1708:	4949494c 	.word	0x4949494c
    170c:	49494949 	.word	0x49494949
    1710:	4c495a49 	.word	0x4c495a49
    1714:	5a5a5a4c 	.word	0x5a5a5a4c
    1718:	496e4c71 	.word	0x496e4c71
    171c:	4c184971 	.word	0x4c184971
    1720:	83494918 	.word	0x83494918
    1724:	49494c80 	.word	0x49494c80
    1728:	494c      	.short	0x494c
    172a:	80          	.byte	0x80
    172b:	00          	.byte	0x00
    172c:	2000      	movs	r0, #0
    172e:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    1732:	f04f 0a04 	mov.w	sl, #4
    1736:	e039      	b.n	17ac <cbvprintf_package+0x198>
			switch (*fmt) {
    1738:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    173c:	fa5f fc8c 	uxtb.w	ip, ip
    1740:	2201      	movs	r2, #1
    1742:	fa02 fc0c 	lsl.w	ip, r2, ip
    1746:	ea1c 0f0e 	tst.w	ip, lr
    174a:	d148      	bne.n	17de <cbvprintf_package+0x1ca>
    174c:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    1750:	d12e      	bne.n	17b0 <cbvprintf_package+0x19c>
    1752:	ea1c 0b02 	ands.w	fp, ip, r2
    1756:	d042      	beq.n	17de <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    1758:	3c01      	subs	r4, #1
    175a:	4454      	add	r4, sl
    175c:	f1ca 0c00 	rsb	ip, sl, #0
    1760:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1764:	2d00      	cmp	r5, #0
    1766:	d061      	beq.n	182c <cbvprintf_package+0x218>
    1768:	eba3 0c05 	sub.w	ip, r3, r5
    176c:	44a4      	add	ip, r4
    176e:	45b4      	cmp	ip, r6
    1770:	f63f af68 	bhi.w	1644 <cbvprintf_package+0x30>
		if (is_str_arg) {
    1774:	2800      	cmp	r0, #0
    1776:	d168      	bne.n	184a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1778:	2b04      	cmp	r3, #4
    177a:	d147      	bne.n	180c <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    177c:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1780:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    1782:	3404      	adds	r4, #4
    1784:	2304      	movs	r3, #4
    1786:	e02a      	b.n	17de <cbvprintf_package+0x1ca>
				arg_idx--;
    1788:	9a01      	ldr	r2, [sp, #4]
    178a:	3a01      	subs	r2, #1
    178c:	9201      	str	r2, [sp, #4]
				parsing = false;
    178e:	f04f 0b00 	mov.w	fp, #0
				continue;
    1792:	e024      	b.n	17de <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    1794:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1798:	286c      	cmp	r0, #108	; 0x6c
    179a:	d134      	bne.n	1806 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    179c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    17a0:	2000      	movs	r0, #0
    17a2:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    17a4:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    17a6:	d1c4      	bne.n	1732 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    17a8:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    17ac:	4653      	mov	r3, sl
    17ae:	e7d3      	b.n	1758 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    17b0:	f108 0807 	add.w	r8, r8, #7
    17b4:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    17b8:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    17ba:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    17be:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    17c2:	b135      	cbz	r5, 17d2 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    17c4:	9806      	ldr	r0, [sp, #24]
    17c6:	4420      	add	r0, r4
    17c8:	42b0      	cmp	r0, r6
    17ca:	f63f af3b 	bhi.w	1644 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    17ce:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    17d2:	3408      	adds	r4, #8
				parsing = false;
    17d4:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    17d8:	f04f 0a08 	mov.w	sl, #8
    17dc:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    17de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    17e2:	2800      	cmp	r0, #0
    17e4:	d078      	beq.n	18d8 <cbvprintf_package+0x2c4>
			if (!parsing) {
    17e6:	f1bb 0f00 	cmp.w	fp, #0
    17ea:	f47f af6d 	bne.w	16c8 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    17ee:	2825      	cmp	r0, #37	; 0x25
    17f0:	d1f5      	bne.n	17de <cbvprintf_package+0x1ca>
					arg_idx++;
    17f2:	9b01      	ldr	r3, [sp, #4]
    17f4:	3301      	adds	r3, #1
    17f6:	9301      	str	r3, [sp, #4]
					parsing = true;
    17f8:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    17fc:	f04f 0a04 	mov.w	sl, #4
    1800:	e7ec      	b.n	17dc <cbvprintf_package+0x1c8>
			switch (*fmt) {
    1802:	4658      	mov	r0, fp
    1804:	e793      	b.n	172e <cbvprintf_package+0x11a>
    1806:	2000      	movs	r0, #0
				parsing = false;
    1808:	4683      	mov	fp, r0
    180a:	e7a5      	b.n	1758 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    180c:	2b08      	cmp	r3, #8
    180e:	d002      	beq.n	1816 <cbvprintf_package+0x202>
					return -EINVAL;
    1810:	f06f 0015 	mvn.w	r0, #21
    1814:	e718      	b.n	1648 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    1816:	f108 0807 	add.w	r8, r8, #7
    181a:	f028 0807 	bic.w	r8, r8, #7
    181e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    1822:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    1826:	3408      	adds	r4, #8
    1828:	2308      	movs	r3, #8
    182a:	e7d8      	b.n	17de <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    182c:	b968      	cbnz	r0, 184a <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    182e:	2b04      	cmp	r3, #4
    1830:	d102      	bne.n	1838 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    1832:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1836:	e7a4      	b.n	1782 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    1838:	2b08      	cmp	r3, #8
    183a:	d1e9      	bne.n	1810 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    183c:	f108 0807 	add.w	r8, r8, #7
    1840:	f028 0807 	bic.w	r8, r8, #7
    1844:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1848:	e7ed      	b.n	1826 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    184a:	9a05      	ldr	r2, [sp, #20]
    184c:	3a01      	subs	r2, #1
    184e:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    1850:	f858 2b04 	ldr.w	r2, [r8], #4
    1854:	9200      	str	r2, [sp, #0]
    1856:	e70d      	b.n	1674 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    1858:	9a03      	ldr	r2, [sp, #12]
    185a:	0790      	lsls	r0, r2, #30
    185c:	d520      	bpl.n	18a0 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    185e:	eba4 0e05 	sub.w	lr, r4, r5
    1862:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1866:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    186a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    186e:	d2cf      	bcs.n	1810 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1870:	2f0f      	cmp	r7, #15
    1872:	d8cd      	bhi.n	1810 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1874:	b1f5      	cbz	r5, 18b4 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1876:	f107 0240 	add.w	r2, r7, #64	; 0x40
    187a:	eb0d 0e02 	add.w	lr, sp, r2
    187e:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1880:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1882:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1886:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    188a:	f1bc 0f00 	cmp.w	ip, #0
    188e:	f43f af17 	beq.w	16c0 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1892:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1896:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    189a:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    189e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    18a0:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    18a4:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    18a6:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    18a8:	f64f 7eda 	movw	lr, #65498	; 0xffda
    18ac:	e797      	b.n	17de <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    18ae:	f04f 0c00 	mov.w	ip, #0
    18b2:	e7da      	b.n	186a <cbvprintf_package+0x256>
				} else if (is_ro) {
    18b4:	f1bc 0f00 	cmp.w	ip, #0
    18b8:	d001      	beq.n	18be <cbvprintf_package+0x2aa>
					len += 1;
    18ba:	3601      	adds	r6, #1
    18bc:	e7ef      	b.n	189e <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    18be:	9802      	ldr	r0, [sp, #8]
					len += 2;
    18c0:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    18c2:	2800      	cmp	r0, #0
    18c4:	d1eb      	bne.n	189e <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    18c6:	9800      	ldr	r0, [sp, #0]
    18c8:	e9cd 3106 	strd	r3, r1, [sp, #24]
    18cc:	f009 fb42 	bl	af54 <strlen>
    18d0:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    18d4:	4406      	add	r6, r0
    18d6:	e7e2      	b.n	189e <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    18d8:	1b63      	subs	r3, r4, r5
    18da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    18de:	d297      	bcs.n	1810 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    18e0:	b945      	cbnz	r5, 18f4 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    18e2:	f1a6 0408 	sub.w	r4, r6, #8
    18e6:	18e0      	adds	r0, r4, r3
    18e8:	e6ae      	b.n	1648 <cbvprintf_package+0x34>
    18ea:	bf00      	nop
    18ec:	0000bd88 	.word	0x0000bd88
    18f0:	0000d42c 	.word	0x0000d42c
	if (rws_pos_en) {
    18f4:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    18f6:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    18f8:	089b      	lsrs	r3, r3, #2
    18fa:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    18fc:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1900:	b1c2      	cbz	r2, 1934 <CONFIG_USB_DEVICE_VID+0x1f>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1902:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1904:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1908:	f1b9 0f00 	cmp.w	r9, #0
    190c:	d005      	beq.n	191a <CONFIG_USB_DEVICE_VID+0x5>
    190e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1910:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    1912:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    1916:	4297      	cmp	r7, r2
    1918:	d10e      	bne.n	1938 <CONFIG_USB_DEVICE_VID+0x23>
		if (BUF_OFFSET + 1 + size > len) {
    191a:	f1c5 0301 	rsb	r3, r5, #1
    191e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    1922:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    1926:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    1928:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    192c:	4557      	cmp	r7, sl
    192e:	d112      	bne.n	1956 <CONFIG_USB_DEVICE_VID+0x41>
	return BUF_OFFSET;
    1930:	1b60      	subs	r0, r4, r5
    1932:	e689      	b.n	1648 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    1934:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    1936:	e7e5      	b.n	1904 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1938:	f810 3b01 	ldrb.w	r3, [r0], #1
    193c:	0619      	lsls	r1, r3, #24
    193e:	d508      	bpl.n	1952 <CONFIG_USB_DEVICE_VID+0x3d>
			if (BUF_OFFSET + 1 > len) {
    1940:	eb04 0e0c 	add.w	lr, r4, ip
    1944:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    194a:	f63f ae7b 	bhi.w	1644 <cbvprintf_package+0x30>
			*buf++ = pos;
    194e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1952:	3201      	adds	r2, #1
    1954:	e7df      	b.n	1916 <CONFIG_USB_DEVICE_VID+0x1>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1956:	f1b9 0f00 	cmp.w	r9, #0
    195a:	d003      	beq.n	1964 <CONFIG_USB_DEVICE_VID+0x4f>
    195c:	f998 2000 	ldrsb.w	r2, [r8]
    1960:	2a00      	cmp	r2, #0
    1962:	db17      	blt.n	1994 <CONFIG_USB_DEVICE_VID+0x7f>
		if (rws_pos_en) {
    1964:	9b02      	ldr	r3, [sp, #8]
    1966:	b1d3      	cbz	r3, 199e <CONFIG_USB_DEVICE_VID+0x89>
			*buf++ = str_ptr_arg[i];
    1968:	f81a 200b 	ldrb.w	r2, [sl, fp]
    196c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1970:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    1972:	9b01      	ldr	r3, [sp, #4]
    1974:	1898      	adds	r0, r3, r2
    1976:	4420      	add	r0, r4
    1978:	42b0      	cmp	r0, r6
    197a:	f63f ae63 	bhi.w	1644 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    197e:	f898 0000 	ldrb.w	r0, [r8]
    1982:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    1986:	9900      	ldr	r1, [sp, #0]
    1988:	9203      	str	r2, [sp, #12]
    198a:	4620      	mov	r0, r4
    198c:	f009 faf5 	bl	af7a <memcpy>
		buf += size;
    1990:	9a03      	ldr	r2, [sp, #12]
    1992:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1994:	f10a 0a01 	add.w	sl, sl, #1
    1998:	f108 0801 	add.w	r8, r8, #1
    199c:	e7c6      	b.n	192c <CONFIG_USB_DEVICE_VID+0x17>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    199e:	f898 2000 	ldrb.w	r2, [r8]
    19a2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    19a6:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    19a8:	9b02      	ldr	r3, [sp, #8]
    19aa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    19ae:	9800      	ldr	r0, [sp, #0]
    19b0:	f009 fad0 	bl	af54 <strlen>
    19b4:	1c42      	adds	r2, r0, #1
    19b6:	e7dc      	b.n	1972 <CONFIG_USB_DEVICE_VID+0x5d>
		return -EFAULT;
    19b8:	f06f 000d 	mvn.w	r0, #13
    19bc:	e644      	b.n	1648 <cbvprintf_package+0x34>
    19be:	bf00      	nop

000019c0 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    19c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19c4:	b095      	sub	sp, #84	; 0x54
    19c6:	af00      	add	r7, sp, #0
    19c8:	4604      	mov	r4, r0
    19ca:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    19ce:	61bb      	str	r3, [r7, #24]
    19d0:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    19d4:	627a      	str	r2, [r7, #36]	; 0x24
    19d6:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    19d8:	6239      	str	r1, [r7, #32]
    19da:	b951      	cbnz	r1, 19f2 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    19dc:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    19de:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    19e0:	7880      	ldrb	r0, [r0, #2]
    19e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    19e6:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    19e8:	6a3b      	ldr	r3, [r7, #32]
    19ea:	429e      	cmp	r6, r3
    19ec:	d81a      	bhi.n	1a24 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    19ee:	1b03      	subs	r3, r0, r4
    19f0:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    19f2:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    19f6:	78e3      	ldrb	r3, [r4, #3]
    19f8:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    19fa:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    19fc:	f1ba 0f00 	cmp.w	sl, #0
    1a00:	d002      	beq.n	1a08 <cbprintf_package_convert+0x48>
    1a02:	f01b 0f01 	tst.w	fp, #1
    1a06:	d117      	bne.n	1a38 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	bb5b      	cbnz	r3, 1a64 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    1a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a0e:	b11b      	cbz	r3, 1a18 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    1a10:	69ba      	ldr	r2, [r7, #24]
    1a12:	6a39      	ldr	r1, [r7, #32]
    1a14:	4620      	mov	r0, r4
    1a16:	4798      	blx	r3
		}

		return in_len;
    1a18:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    1a1a:	4628      	mov	r0, r5
    1a1c:	3754      	adds	r7, #84	; 0x54
    1a1e:	46bd      	mov	sp, r7
    1a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    1a24:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    1a26:	4628      	mov	r0, r5
    1a28:	f009 fa94 	bl	af54 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    1a2c:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    1a2e:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    1a30:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    1a32:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    1a34:	623b      	str	r3, [r7, #32]
    1a36:	e7d7      	b.n	19e8 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    1a38:	f894 8000 	ldrb.w	r8, [r4]
    1a3c:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1a3e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    1a42:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1a46:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    1a48:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	f040 8101 	bne.w	1c54 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    1a52:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    1a54:	46c1      	mov	r9, r8
    1a56:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    1a5a:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1a5c:	454b      	cmp	r3, r9
    1a5e:	d14e      	bne.n	1afe <cbprintf_package_convert+0x13e>
    1a60:	44d0      	add	r8, sl
    1a62:	e013      	b.n	1a8c <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    1a64:	f01b 0f02 	tst.w	fp, #2
    1a68:	d0d0      	beq.n	1a0c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    1a6a:	f894 8000 	ldrb.w	r8, [r4]
    1a6e:	ea4f 0388 	mov.w	r3, r8, lsl #2
    1a72:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1a74:	6863      	ldr	r3, [r4, #4]
    1a76:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    1a7a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d178      	bne.n	1b74 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    1a82:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1a84:	f1ba 0f00 	cmp.w	sl, #0
    1a88:	d14e      	bne.n	1b28 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    1a8a:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1a8c:	f01b 0f05 	tst.w	fp, #5
    1a90:	bf0c      	ite	eq
    1a92:	2302      	moveq	r3, #2
    1a94:	2301      	movne	r3, #1
    1a96:	627b      	str	r3, [r7, #36]	; 0x24
    1a98:	697b      	ldr	r3, [r7, #20]
    1a9a:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1a9e:	f00b 0302 	and.w	r3, fp, #2
    1aa2:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1aa4:	45d0      	cmp	r8, sl
    1aa6:	d0b8      	beq.n	1a1a <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1aa8:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1aac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1ab0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1ab4:	4bac      	ldr	r3, [pc, #688]	; (1d68 <cbprintf_package_convert+0x3a8>)
    1ab6:	4599      	cmp	r9, r3
    1ab8:	d302      	bcc.n	1ac0 <cbprintf_package_convert+0x100>
    1aba:	4bac      	ldr	r3, [pc, #688]	; (1d6c <cbprintf_package_convert+0x3ac>)
    1abc:	4599      	cmp	r9, r3
    1abe:	d339      	bcc.n	1b34 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1ac0:	693b      	ldr	r3, [r7, #16]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d043      	beq.n	1b4e <cbprintf_package_convert+0x18e>
    1ac6:	69f8      	ldr	r0, [r7, #28]
    1ac8:	f008 fbec 	bl	a2a4 <is_ptr>
    1acc:	2800      	cmp	r0, #0
    1ace:	d03e      	beq.n	1b4e <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1ad0:	46e9      	mov	r9, sp
    1ad2:	b08a      	sub	sp, #40	; 0x28
    1ad4:	466a      	mov	r2, sp
    1ad6:	4ba6      	ldr	r3, [pc, #664]	; (1d70 <cbprintf_package_convert+0x3b0>)
    1ad8:	6153      	str	r3, [r2, #20]
    1ada:	69fb      	ldr	r3, [r7, #28]
    1adc:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
    1ae4:	8413      	strh	r3, [r2, #32]
    1ae6:	4ba3      	ldr	r3, [pc, #652]	; (1d74 <cbprintf_package_convert+0x3b4>)
    1ae8:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    1aec:	48a2      	ldr	r0, [pc, #648]	; (1d78 <cbprintf_package_convert+0x3b8>)
    1aee:	2300      	movs	r3, #0
    1af0:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1af4:	f000 fcd8 	bl	24a8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    1af8:	3d02      	subs	r5, #2
    1afa:	46cd      	mov	sp, r9
				continue;
    1afc:	e7d2      	b.n	1aa4 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    1afe:	f819 2b01 	ldrb.w	r2, [r9], #1
    1b02:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1b04:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    1b08:	f009 fa24 	bl	af54 <strlen>
				if (strl && strl_cnt < strl_len) {
    1b0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1b10:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    1b12:	b13a      	cbz	r2, 1b24 <cbprintf_package_convert+0x164>
    1b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    1b18:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    1b1a:	bf3e      	ittt	cc
    1b1c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    1b1e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    1b22:	3601      	addcc	r6, #1
				out_len += len;
    1b24:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1b26:	e799      	b.n	1a5c <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1b28:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    1b2c:	bf1c      	itt	ne
    1b2e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    1b30:	44d0      	addne	r8, sl
    1b32:	e7ab      	b.n	1a8c <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1b34:	693b      	ldr	r3, [r7, #16]
    1b36:	b123      	cbz	r3, 1b42 <cbprintf_package_convert+0x182>
    1b38:	69f8      	ldr	r0, [r7, #28]
    1b3a:	f008 fbb3 	bl	a2a4 <is_ptr>
    1b3e:	2800      	cmp	r0, #0
    1b40:	d1c6      	bne.n	1ad0 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1b42:	f01b 0f01 	tst.w	fp, #1
    1b46:	d105      	bne.n	1b54 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b4a:	1aed      	subs	r5, r5, r3
    1b4c:	e7aa      	b.n	1aa4 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1b4e:	6a3b      	ldr	r3, [r7, #32]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d0a7      	beq.n	1aa4 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    1b54:	4648      	mov	r0, r9
    1b56:	f009 f9fd 	bl	af54 <strlen>
				if (strl && strl_cnt < strl_len) {
    1b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1b5c:	b143      	cbz	r3, 1b70 <cbprintf_package_convert+0x1b0>
    1b5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1b62:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    1b64:	bf3f      	itttt	cc
    1b66:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1b68:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    1b6a:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1b6e:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1b70:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1b72:	e797      	b.n	1aa4 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1b74:	f1ba 0f00 	cmp.w	sl, #0
    1b78:	d071      	beq.n	1c5e <cbprintf_package_convert+0x29e>
    1b7a:	f01b 0604 	ands.w	r6, fp, #4
    1b7e:	d071      	beq.n	1c64 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    1b80:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1b82:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1b84:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1b88:	4652      	mov	r2, sl
    1b8a:	4641      	mov	r1, r8
    1b8c:	f009 f9f5 	bl	af7a <memcpy>
	str_pos += ros_nbr;
    1b90:	697b      	ldr	r3, [r7, #20]
    1b92:	005b      	lsls	r3, r3, #1
    1b94:	60bb      	str	r3, [r7, #8]
    1b96:	697b      	ldr	r3, [r7, #20]
    1b98:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1b9a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1b9e:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1ba0:	f00b 0302 	and.w	r3, fp, #2
    1ba4:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1ba6:	697b      	ldr	r3, [r7, #20]
    1ba8:	4598      	cmp	r8, r3
    1baa:	d15d      	bne.n	1c68 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    1bac:	7823      	ldrb	r3, [r4, #0]
    1bae:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1bb0:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1bb2:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1bb6:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1bba:	bf0c      	ite	eq
    1bbc:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1bc0:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1bc2:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1bc6:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1bc8:	f040 809d 	bne.w	1d06 <cbprintf_package_convert+0x346>
    1bcc:	f01b 0f04 	tst.w	fp, #4
    1bd0:	bf14      	ite	ne
    1bd2:	4648      	movne	r0, r9
    1bd4:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1bd6:	f894 b002 	ldrb.w	fp, [r4, #2]
    1bda:	f894 8003 	ldrb.w	r8, [r4, #3]
    1bde:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1be0:	7062      	strb	r2, [r4, #1]
    1be2:	70a0      	strb	r0, [r4, #2]
    1be4:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    1be6:	69ba      	ldr	r2, [r7, #24]
    1be8:	68f9      	ldr	r1, [r7, #12]
    1bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bec:	4620      	mov	r0, r4
    1bee:	4798      	blx	r3
	if (rv < 0) {
    1bf0:	1e05      	subs	r5, r0, #0
    1bf2:	f6ff af12 	blt.w	1a1a <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    1bf6:	69fb      	ldr	r3, [r7, #28]
    1bf8:	7023      	strb	r3, [r4, #0]
    1bfa:	693b      	ldr	r3, [r7, #16]
    1bfc:	7063      	strb	r3, [r4, #1]
    1bfe:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1c02:	69ba      	ldr	r2, [r7, #24]
    1c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    1c06:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1c0a:	4649      	mov	r1, r9
    1c0c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    1c10:	4798      	blx	r3
	if (rv < 0) {
    1c12:	f1b0 0800 	subs.w	r8, r0, #0
    1c16:	f2c0 80a3 	blt.w	1d60 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1c1a:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    1c1c:	69ba      	ldr	r2, [r7, #24]
    1c1e:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    1c20:	eba3 010a 	sub.w	r1, r3, sl
    1c24:	68fb      	ldr	r3, [r7, #12]
    1c26:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    1c28:	68bb      	ldr	r3, [r7, #8]
    1c2a:	1ac9      	subs	r1, r1, r3
    1c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c2e:	4798      	blx	r3
	if (rv < 0) {
    1c30:	2800      	cmp	r0, #0
    1c32:	f2c0 8097 	blt.w	1d64 <cbprintf_package_convert+0x3a4>
	out_len += rv;
    1c36:	44a8      	add	r8, r5
	out_len += rv;
    1c38:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1c3c:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    1c40:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1c44:	45b3      	cmp	fp, r6
    1c46:	d360      	bcc.n	1d0a <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    1c48:	2100      	movs	r1, #0
    1c4a:	69ba      	ldr	r2, [r7, #24]
    1c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c4e:	4608      	mov	r0, r1
    1c50:	4798      	blx	r3
	return out_len;
    1c52:	e6e2      	b.n	1a1a <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1c54:	f04f 0900 	mov.w	r9, #0
    1c58:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1c5c:	e794      	b.n	1b88 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    1c5e:	4656      	mov	r6, sl
		keep_cnt = 0;
    1c60:	46d1      	mov	r9, sl
    1c62:	e795      	b.n	1b90 <cbprintf_package_convert+0x1d0>
    1c64:	46b1      	mov	r9, r6
    1c66:	e793      	b.n	1b90 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    1c68:	f818 1b02 	ldrb.w	r1, [r8], #2
    1c6c:	4a3e      	ldr	r2, [pc, #248]	; (1d68 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    1c6e:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1c72:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    1c76:	4293      	cmp	r3, r2
    1c78:	d302      	bcc.n	1c80 <cbprintf_package_convert+0x2c0>
    1c7a:	4a3c      	ldr	r2, [pc, #240]	; (1d6c <cbprintf_package_convert+0x3ac>)
    1c7c:	4293      	cmp	r3, r2
    1c7e:	d31c      	bcc.n	1cba <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1c80:	693b      	ldr	r3, [r7, #16]
    1c82:	b123      	cbz	r3, 1c8e <cbprintf_package_convert+0x2ce>
    1c84:	69f8      	ldr	r0, [r7, #28]
    1c86:	f008 fb0d 	bl	a2a4 <is_ptr>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	d18b      	bne.n	1ba6 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	b9f3      	cbnz	r3, 1cd0 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    1c92:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1c96:	f107 0028 	add.w	r0, r7, #40	; 0x28
    1c9a:	4402      	add	r2, r0
    1c9c:	f109 0301 	add.w	r3, r9, #1
    1ca0:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1ca4:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1ca8:	fa52 f383 	uxtab	r3, r2, r3
    1cac:	f109 0902 	add.w	r9, r9, #2
    1cb0:	fa5f f989 	uxtb.w	r9, r9
    1cb4:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1cb8:	e775      	b.n	1ba6 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1cba:	693b      	ldr	r3, [r7, #16]
    1cbc:	b12b      	cbz	r3, 1cca <cbprintf_package_convert+0x30a>
    1cbe:	69f8      	ldr	r0, [r7, #28]
    1cc0:	f008 faf0 	bl	a2a4 <is_ptr>
    1cc4:	2800      	cmp	r0, #0
    1cc6:	f47f af6e 	bne.w	1ba6 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1cca:	f01b 0f01 	tst.w	fp, #1
    1cce:	d009      	beq.n	1ce4 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1cd0:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1cd4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1cd8:	1c73      	adds	r3, r6, #1
    1cda:	1856      	adds	r6, r2, r1
    1cdc:	f806 5c20 	strb.w	r5, [r6, #-32]
    1ce0:	b2de      	uxtb	r6, r3
    1ce2:	e760      	b.n	1ba6 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1ce4:	f01b 0f04 	tst.w	fp, #4
    1ce8:	f43f af5d 	beq.w	1ba6 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    1cec:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1cf0:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1cf4:	f109 0301 	add.w	r3, r9, #1
    1cf8:	eb02 0901 	add.w	r9, r2, r1
    1cfc:	f809 5c10 	strb.w	r5, [r9, #-16]
    1d00:	fa5f f983 	uxtb.w	r9, r3
    1d04:	e74f      	b.n	1ba6 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1d06:	2000      	movs	r0, #0
    1d08:	e765      	b.n	1bd6 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    1d0a:	f81b 300a 	ldrb.w	r3, [fp, sl]
    1d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    1d12:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    1d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1d18:	b1fb      	cbz	r3, 1d5a <cbprintf_package_convert+0x39a>
    1d1a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    1d1e:	69ba      	ldr	r2, [r7, #24]
    1d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d22:	2101      	movs	r1, #1
    1d24:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    1d28:	4798      	blx	r3
		if (rv < 0) {
    1d2a:	2800      	cmp	r0, #0
    1d2c:	db1a      	blt.n	1d64 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1d2e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    1d30:	f1b8 0f00 	cmp.w	r8, #0
    1d34:	d106      	bne.n	1d44 <cbprintf_package_convert+0x384>
    1d36:	4648      	mov	r0, r9
    1d38:	f009 f90c 	bl	af54 <strlen>
    1d3c:	f100 0801 	add.w	r8, r0, #1
    1d40:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1d44:	69ba      	ldr	r2, [r7, #24]
    1d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1d48:	4641      	mov	r1, r8
    1d4a:	4648      	mov	r0, r9
    1d4c:	4798      	blx	r3
		if (rv < 0) {
    1d4e:	2800      	cmp	r0, #0
    1d50:	db08      	blt.n	1d64 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1d52:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1d54:	f10b 0b01 	add.w	fp, fp, #1
    1d58:	e774      	b.n	1c44 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    1d5a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    1d5e:	e7de      	b.n	1d1e <cbprintf_package_convert+0x35e>
    1d60:	4645      	mov	r5, r8
    1d62:	e65a      	b.n	1a1a <cbprintf_package_convert+0x5a>
    1d64:	4605      	mov	r5, r0
    1d66:	e658      	b.n	1a1a <cbprintf_package_convert+0x5a>
    1d68:	0000bd88 	.word	0x0000bd88
    1d6c:	0000d42c 	.word	0x0000d42c
    1d70:	0000c535 	.word	0x0000c535
    1d74:	01000004 	.word	0x01000004
    1d78:	0000c098 	.word	0x0000c098

00001d7c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d80:	8b05      	ldrh	r5, [r0, #24]
{
    1d82:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1d84:	0728      	lsls	r0, r5, #28
{
    1d86:	4690      	mov	r8, r2
	if (processing) {
    1d88:	d411      	bmi.n	1dae <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1d8a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d8c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1d90:	f040 80cd 	bne.w	1f2e <process_event+0x1b2>
			evt = process_recheck(mgr);
    1d94:	4620      	mov	r0, r4
    1d96:	f008 fca1 	bl	a6dc <process_recheck>
		}

		if (evt == EVT_NOP) {
    1d9a:	b178      	cbz	r0, 1dbc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1d9c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d9e:	8b21      	ldrh	r1, [r4, #24]
    1da0:	2804      	cmp	r0, #4
    1da2:	d811      	bhi.n	1dc8 <process_event+0x4c>
    1da4:	e8df f000 	tbb	[pc, r0]
    1da8:	856d10c3 	.word	0x856d10c3
    1dac:	95          	.byte	0x95
    1dad:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1dae:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1db0:	bf0c      	ite	eq
    1db2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1db6:	f045 0520 	orrne.w	r5, r5, #32
    1dba:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1dbc:	f388 8811 	msr	BASEPRI, r8
    1dc0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1dc8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1dcc:	45aa      	cmp	sl, r5
    1dce:	f000 80a6 	beq.w	1f1e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1dd2:	2700      	movs	r7, #0
    1dd4:	46b9      	mov	r9, r7
    1dd6:	463e      	mov	r6, r7
    1dd8:	68a3      	ldr	r3, [r4, #8]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	f000 80bd 	beq.w	1f5a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1de0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1de4:	8321      	strh	r1, [r4, #24]
    1de6:	f388 8811 	msr	BASEPRI, r8
    1dea:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1dee:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1df0:	2900      	cmp	r1, #0
    1df2:	f000 80bb 	beq.w	1f6c <process_event+0x1f0>
	return node->next;
    1df6:	680d      	ldr	r5, [r1, #0]
    1df8:	2900      	cmp	r1, #0
    1dfa:	f000 80b7 	beq.w	1f6c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1dfe:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1e02:	4633      	mov	r3, r6
    1e04:	4652      	mov	r2, sl
    1e06:	4620      	mov	r0, r4
    1e08:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1e0a:	2d00      	cmp	r5, #0
    1e0c:	d076      	beq.n	1efc <process_event+0x180>
    1e0e:	682b      	ldr	r3, [r5, #0]
    1e10:	4629      	mov	r1, r5
    1e12:	461d      	mov	r5, r3
    1e14:	e7f0      	b.n	1df8 <process_event+0x7c>
    1e16:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1e1a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1e1c:	2a01      	cmp	r2, #1
    1e1e:	d81b      	bhi.n	1e58 <process_event+0xdc>
	list->head = NULL;
    1e20:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e22:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1e26:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1e28:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e2a:	b289      	uxth	r1, r1
	list->tail = NULL;
    1e2c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1e30:	d109      	bne.n	1e46 <process_event+0xca>
    1e32:	463b      	mov	r3, r7
    1e34:	e003      	b.n	1e3e <process_event+0xc2>
				mgr->refs += 1U;
    1e36:	8b62      	ldrh	r2, [r4, #26]
    1e38:	3201      	adds	r2, #1
    1e3a:	8362      	strh	r2, [r4, #26]
	return node->next;
    1e3c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d1f9      	bne.n	1e36 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e42:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e46:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1e48:	4620      	mov	r0, r4
    1e4a:	f008 fc47 	bl	a6dc <process_recheck>
    1e4e:	2800      	cmp	r0, #0
    1e50:	d07b      	beq.n	1f4a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e52:	f041 0120 	orr.w	r1, r1, #32
    1e56:	e077      	b.n	1f48 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1e58:	2b04      	cmp	r3, #4
    1e5a:	d10a      	bne.n	1e72 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e5c:	f021 0107 	bic.w	r1, r1, #7
    1e60:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e62:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1e64:	4620      	mov	r0, r4
    1e66:	f008 fc39 	bl	a6dc <process_recheck>
    1e6a:	b110      	cbz	r0, 1e72 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e6c:	f041 0120 	orr.w	r1, r1, #32
    1e70:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e72:	8b21      	ldrh	r1, [r4, #24]
    1e74:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e78:	45aa      	cmp	sl, r5
    1e7a:	d050      	beq.n	1f1e <process_event+0x1a2>
    1e7c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1e7e:	46b9      	mov	r9, r7
    1e80:	e7aa      	b.n	1dd8 <process_event+0x5c>
			transit = mgr->transitions->start;
    1e82:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e84:	f021 0107 	bic.w	r1, r1, #7
    1e88:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1e8c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1e8e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e92:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1e94:	d12d      	bne.n	1ef2 <process_event+0x176>
		    || (transit != NULL)) {
    1e96:	f1b9 0f00 	cmp.w	r9, #0
    1e9a:	d040      	beq.n	1f1e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1e9c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1ea0:	8321      	strh	r1, [r4, #24]
    1ea2:	f388 8811 	msr	BASEPRI, r8
    1ea6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1eaa:	493a      	ldr	r1, [pc, #232]	; (1f94 <process_event+0x218>)
    1eac:	4620      	mov	r0, r4
    1eae:	47c8      	blx	r9
    1eb0:	e029      	b.n	1f06 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1eb2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1eb6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1eb8:	f041 0104 	orr.w	r1, r1, #4
    1ebc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1ebe:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1ec0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ec4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1ec6:	d0e6      	beq.n	1e96 <process_event+0x11a>
    1ec8:	2700      	movs	r7, #0
		res = 0;
    1eca:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ecc:	f04f 0a04 	mov.w	sl, #4
    1ed0:	e782      	b.n	1dd8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ed2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1ed6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ed8:	f041 0105 	orr.w	r1, r1, #5
    1edc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1ede:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1ee0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ee4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1ee6:	d0d6      	beq.n	1e96 <process_event+0x11a>
    1ee8:	2700      	movs	r7, #0
		res = 0;
    1eea:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1eec:	f04f 0a05 	mov.w	sl, #5
    1ef0:	e772      	b.n	1dd8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1ef2:	2700      	movs	r7, #0
		res = 0;
    1ef4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ef6:	f04f 0a06 	mov.w	sl, #6
    1efa:	e76d      	b.n	1dd8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1efc:	462b      	mov	r3, r5
    1efe:	e787      	b.n	1e10 <process_event+0x94>
			if (transit != NULL) {
    1f00:	f1b9 0f00 	cmp.w	r9, #0
    1f04:	d1d1      	bne.n	1eaa <process_event+0x12e>
	__asm__ volatile(
    1f06:	f04f 0320 	mov.w	r3, #32
    1f0a:	f3ef 8811 	mrs	r8, BASEPRI
    1f0e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1f16:	8b23      	ldrh	r3, [r4, #24]
    1f18:	f023 0308 	bic.w	r3, r3, #8
    1f1c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1f1e:	8b25      	ldrh	r5, [r4, #24]
    1f20:	06ea      	lsls	r2, r5, #27
    1f22:	d52e      	bpl.n	1f82 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1f24:	f025 0310 	bic.w	r3, r5, #16
    1f28:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1f2a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1f2e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1f30:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1f32:	2e00      	cmp	r6, #0
    1f34:	f6bf af6f 	bge.w	1e16 <process_event+0x9a>
	list->head = NULL;
    1f38:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1f3a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1f3c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f40:	f021 0107 	bic.w	r1, r1, #7
    1f44:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f48:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f4a:	8b21      	ldrh	r1, [r4, #24]
    1f4c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1f50:	45aa      	cmp	sl, r5
    1f52:	f04f 0900 	mov.w	r9, #0
    1f56:	f47f af3f 	bne.w	1dd8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1f5a:	2f00      	cmp	r7, #0
    1f5c:	d09b      	beq.n	1e96 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1f5e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1f62:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1f64:	f388 8811 	msr	BASEPRI, r8
    1f68:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1f6c:	2f00      	cmp	r7, #0
    1f6e:	d0c7      	beq.n	1f00 <process_event+0x184>
	return node->next;
    1f70:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1f72:	4639      	mov	r1, r7
    1f74:	4633      	mov	r3, r6
    1f76:	4652      	mov	r2, sl
    1f78:	4620      	mov	r0, r4
    1f7a:	f008 fbdb 	bl	a734 <notify_one>
	list->head = node;
    1f7e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1f80:	e7f4      	b.n	1f6c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1f82:	06ab      	lsls	r3, r5, #26
    1f84:	f57f af1a 	bpl.w	1dbc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1f88:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1f8c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1f8e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1f92:	e6ff      	b.n	1d94 <process_event+0x18>
    1f94:	0000a761 	.word	0x0000a761

00001f98 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1f98:	b508      	push	{r3, lr}
    1f9a:	4604      	mov	r4, r0
	__asm__ volatile(
    1f9c:	f04f 0220 	mov.w	r2, #32
    1fa0:	f3ef 8311 	mrs	r3, BASEPRI
    1fa4:	f382 8812 	msr	BASEPRI_MAX, r2
    1fa8:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    1fac:	f004 fbde 	bl	676c <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1fb0:	4620      	mov	r0, r4
    1fb2:	f002 faf7 	bl	45a4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1fb6:	4803      	ldr	r0, [pc, #12]	; (1fc4 <sys_reboot+0x2c>)
    1fb8:	f008 f999 	bl	a2ee <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1fbc:	f001 fca8 	bl	3910 <arch_cpu_idle>
    1fc0:	e7fc      	b.n	1fbc <sys_reboot+0x24>
    1fc2:	bf00      	nop
    1fc4:	0000c5e9 	.word	0x0000c5e9

00001fc8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1fc8:	f004 bc18 	b.w	67fc <SystemInit>

00001fcc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1fd0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 202c <activate_foreach_backend+0x60>
{
    1fd4:	4604      	mov	r4, r0
	while (mask_cpy) {
    1fd6:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    1fd8:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    1fdc:	b914      	cbnz	r4, 1fe4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    1fde:	4638      	mov	r0, r7
    1fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    1fe4:	fa94 f5a4 	rbit	r5, r4
    1fe8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    1fec:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1ff0:	012e      	lsls	r6, r5, #4
    1ff2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    1ff6:	ea6f 0a03 	mvn.w	sl, r3
    1ffa:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1ffe:	7b2b      	ldrb	r3, [r5, #12]
    2000:	2b00      	cmp	r3, #0
    2002:	d0eb      	beq.n	1fdc <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    2004:	f858 3006 	ldr.w	r3, [r8, r6]
    2008:	691b      	ldr	r3, [r3, #16]
    200a:	b94b      	cbnz	r3, 2020 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    200c:	4446      	add	r6, r8
			log_backend_enable(backend,
    200e:	2204      	movs	r2, #4
    2010:	6873      	ldr	r3, [r6, #4]
    2012:	4628      	mov	r0, r5
    2014:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    2016:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    201a:	f000 fa31 	bl	2480 <log_backend_enable>
    201e:	e7dd      	b.n	1fdc <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    2020:	4628      	mov	r0, r5
    2022:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2024:	2800      	cmp	r0, #0
    2026:	d1d9      	bne.n	1fdc <activate_foreach_backend+0x10>
    2028:	e7f0      	b.n	200c <activate_foreach_backend+0x40>
    202a:	bf00      	nop
    202c:	0000c120 	.word	0x0000c120

00002030 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    2030:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2032:	4910      	ldr	r1, [pc, #64]	; (2074 <enable_logger+0x44>)
    2034:	4810      	ldr	r0, [pc, #64]	; (2078 <enable_logger+0x48>)
{
    2036:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2038:	2200      	movs	r2, #0
    203a:	f009 fdfd 	bl	bc38 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    203e:	4d0f      	ldr	r5, [pc, #60]	; (207c <enable_logger+0x4c>)
    2040:	490f      	ldr	r1, [pc, #60]	; (2080 <enable_logger+0x50>)
    2042:	2200      	movs	r2, #0
    2044:	2300      	movs	r3, #0
    2046:	e9cd 2306 	strd	r2, r3, [sp, #24]
    204a:	2400      	movs	r4, #0
    204c:	230e      	movs	r3, #14
    204e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2052:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2056:	4b0b      	ldr	r3, [pc, #44]	; (2084 <enable_logger+0x54>)
    2058:	9400      	str	r4, [sp, #0]
    205a:	f44f 7240 	mov.w	r2, #768	; 0x300
    205e:	4628      	mov	r0, r5
    2060:	f006 fe6a 	bl	8d38 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    2064:	4908      	ldr	r1, [pc, #32]	; (2088 <enable_logger+0x58>)
    2066:	4628      	mov	r0, r5
    2068:	f009 fb9c 	bl	b7a4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    206c:	4620      	mov	r0, r4
    206e:	b009      	add	sp, #36	; 0x24
    2070:	bd30      	pop	{r4, r5, pc}
    2072:	bf00      	nop
    2074:	0000208d 	.word	0x0000208d
    2078:	20000758 	.word	0x20000758
    207c:	200002d0 	.word	0x200002d0
    2080:	20001fc0 	.word	0x20001fc0
    2084:	00002349 	.word	0x00002349
    2088:	0000c612 	.word	0x0000c612

0000208c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    208c:	4801      	ldr	r0, [pc, #4]	; (2094 <log_process_thread_timer_expiry_fn+0x8>)
    208e:	f006 bfe1 	b.w	9054 <z_impl_k_sem_give>
    2092:	bf00      	nop
    2094:	20000208 	.word	0x20000208

00002098 <z_log_init>:
{
    2098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    209c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    209e:	481f      	ldr	r0, [pc, #124]	; (211c <z_log_init+0x84>)
{
    20a0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    20a2:	f008 fe9e 	bl	ade2 <atomic_inc>
    20a6:	4606      	mov	r6, r0
    20a8:	2800      	cmp	r0, #0
    20aa:	d030      	beq.n	210e <z_log_init+0x76>
	uint32_t mask = 0;
    20ac:	2500      	movs	r5, #0
}
    20ae:	4628      	mov	r0, r5
    20b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    20b4:	7b23      	ldrb	r3, [r4, #12]
    20b6:	b173      	cbz	r3, 20d6 <z_log_init+0x3e>
	if (backend->api->init) {
    20b8:	6823      	ldr	r3, [r4, #0]
    20ba:	68db      	ldr	r3, [r3, #12]
    20bc:	b10b      	cbz	r3, 20c2 <z_log_init+0x2a>
		backend->api->init(backend);
    20be:	4620      	mov	r0, r4
    20c0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    20c2:	6823      	ldr	r3, [r4, #0]
    20c4:	691b      	ldr	r3, [r3, #16]
    20c6:	b9d3      	cbnz	r3, 20fe <z_log_init+0x66>
				log_backend_enable(backend,
    20c8:	6863      	ldr	r3, [r4, #4]
    20ca:	2204      	movs	r2, #4
    20cc:	6819      	ldr	r1, [r3, #0]
    20ce:	4620      	mov	r0, r4
    20d0:	f000 f9d6 	bl	2480 <log_backend_enable>
			i++;
    20d4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    20d6:	3410      	adds	r4, #16
    20d8:	454c      	cmp	r4, r9
    20da:	d3eb      	bcc.n	20b4 <z_log_init+0x1c>
	if (blocking) {
    20dc:	f1b8 0f00 	cmp.w	r8, #0
    20e0:	d0e5      	beq.n	20ae <z_log_init+0x16>
		while (mask) {
    20e2:	2d00      	cmp	r5, #0
    20e4:	d0e2      	beq.n	20ac <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    20e6:	4628      	mov	r0, r5
    20e8:	f7ff ff70 	bl	1fcc <activate_foreach_backend>
    20ec:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    20ee:	2f00      	cmp	r7, #0
    20f0:	d0f7      	beq.n	20e2 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    20f2:	2100      	movs	r1, #0
    20f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    20f8:	f007 fc04 	bl	9904 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    20fc:	e7f1      	b.n	20e2 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    20fe:	4620      	mov	r0, r4
    2100:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2102:	2800      	cmp	r0, #0
    2104:	d0e0      	beq.n	20c8 <z_log_init+0x30>
				mask |= BIT(i);
    2106:	fa0a f306 	lsl.w	r3, sl, r6
    210a:	431d      	orrs	r5, r3
    210c:	e7e2      	b.n	20d4 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    210e:	4c04      	ldr	r4, [pc, #16]	; (2120 <z_log_init+0x88>)
    2110:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2124 <z_log_init+0x8c>
	uint32_t mask = 0;
    2114:	4605      	mov	r5, r0
				mask |= BIT(i);
    2116:	f04f 0a01 	mov.w	sl, #1
    211a:	e7dd      	b.n	20d8 <z_log_init+0x40>
    211c:	20000a48 	.word	0x20000a48
    2120:	0000c120 	.word	0x0000c120
    2124:	0000c120 	.word	0x0000c120

00002128 <z_log_notify_backend_enabled>:
{
    2128:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    212a:	4c04      	ldr	r4, [pc, #16]	; (213c <z_log_notify_backend_enabled+0x14>)
    212c:	7823      	ldrb	r3, [r4, #0]
    212e:	b913      	cbnz	r3, 2136 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2130:	4803      	ldr	r0, [pc, #12]	; (2140 <z_log_notify_backend_enabled+0x18>)
    2132:	f006 ff8f 	bl	9054 <z_impl_k_sem_give>
	backend_attached = true;
    2136:	2301      	movs	r3, #1
    2138:	7023      	strb	r3, [r4, #0]
}
    213a:	bd10      	pop	{r4, pc}
    213c:	20001f73 	.word	0x20001f73
    2140:	20000208 	.word	0x20000208

00002144 <z_log_dropped>:
{
    2144:	b510      	push	{r4, lr}
    2146:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2148:	4808      	ldr	r0, [pc, #32]	; (216c <z_log_dropped+0x28>)
    214a:	f008 fe4a 	bl	ade2 <atomic_inc>
	if (buffered) {
    214e:	b15c      	cbz	r4, 2168 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2150:	f3bf 8f5b 	dmb	ish
    2154:	4b06      	ldr	r3, [pc, #24]	; (2170 <z_log_dropped+0x2c>)
    2156:	e853 1f00 	ldrex	r1, [r3]
    215a:	3901      	subs	r1, #1
    215c:	e843 1200 	strex	r2, r1, [r3]
    2160:	2a00      	cmp	r2, #0
    2162:	d1f8      	bne.n	2156 <z_log_dropped+0x12>
    2164:	f3bf 8f5b 	dmb	ish
}
    2168:	bd10      	pop	{r4, pc}
    216a:	bf00      	nop
    216c:	20000a40 	.word	0x20000a40
    2170:	20000a44 	.word	0x20000a44

00002174 <z_log_dropped_read_and_clear>:
}
    2174:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2176:	4b06      	ldr	r3, [pc, #24]	; (2190 <z_log_dropped_read_and_clear+0x1c>)
    2178:	f3bf 8f5b 	dmb	ish
    217c:	4601      	mov	r1, r0
    217e:	e853 0f00 	ldrex	r0, [r3]
    2182:	e843 1200 	strex	r2, r1, [r3]
    2186:	2a00      	cmp	r2, #0
    2188:	d1f9      	bne.n	217e <z_log_dropped_read_and_clear+0xa>
    218a:	f3bf 8f5b 	dmb	ish
    218e:	4770      	bx	lr
    2190:	20000a40 	.word	0x20000a40

00002194 <dropped_notify>:
{
    2194:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2196:	f7ff ffed 	bl	2174 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    219a:	4c08      	ldr	r4, [pc, #32]	; (21bc <dropped_notify+0x28>)
    219c:	4e08      	ldr	r6, [pc, #32]	; (21c0 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    219e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    21a0:	42b4      	cmp	r4, r6
    21a2:	d300      	bcc.n	21a6 <dropped_notify+0x12>
}
    21a4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    21a6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    21a8:	795b      	ldrb	r3, [r3, #5]
    21aa:	b12b      	cbz	r3, 21b8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    21ac:	6823      	ldr	r3, [r4, #0]
    21ae:	685b      	ldr	r3, [r3, #4]
    21b0:	b113      	cbz	r3, 21b8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    21b2:	4629      	mov	r1, r5
    21b4:	4620      	mov	r0, r4
    21b6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    21b8:	3410      	adds	r4, #16
    21ba:	e7f1      	b.n	21a0 <dropped_notify+0xc>
    21bc:	0000c120 	.word	0x0000c120
    21c0:	0000c120 	.word	0x0000c120

000021c4 <z_log_msg_init>:
{
    21c4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    21c6:	4c04      	ldr	r4, [pc, #16]	; (21d8 <z_log_msg_init+0x14>)
    21c8:	4904      	ldr	r1, [pc, #16]	; (21dc <z_log_msg_init+0x18>)
    21ca:	4620      	mov	r0, r4
    21cc:	f008 fc9a 	bl	ab04 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    21d0:	4b03      	ldr	r3, [pc, #12]	; (21e0 <z_log_msg_init+0x1c>)
    21d2:	601c      	str	r4, [r3, #0]
}
    21d4:	bd10      	pop	{r4, pc}
    21d6:	bf00      	nop
    21d8:	2000014c 	.word	0x2000014c
    21dc:	0000c14c 	.word	0x0000c14c
    21e0:	20000a38 	.word	0x20000a38

000021e4 <log_core_init>:
	panic_mode = false;
    21e4:	4a05      	ldr	r2, [pc, #20]	; (21fc <log_core_init+0x18>)
    21e6:	2300      	movs	r3, #0
    21e8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    21ea:	4a05      	ldr	r2, [pc, #20]	; (2200 <log_core_init+0x1c>)
    21ec:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    21ee:	4a05      	ldr	r2, [pc, #20]	; (2204 <log_core_init+0x20>)
    21f0:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    21f2:	4b05      	ldr	r3, [pc, #20]	; (2208 <log_core_init+0x24>)
    21f4:	4a05      	ldr	r2, [pc, #20]	; (220c <log_core_init+0x28>)
    21f6:	601a      	str	r2, [r3, #0]
		z_log_msg_init();
    21f8:	f7ff bfe4 	b.w	21c4 <z_log_msg_init>
    21fc:	20001f74 	.word	0x20001f74
    2200:	20000a40 	.word	0x20000a40
    2204:	20000a44 	.word	0x20000a44
    2208:	20000000 	.word	0x20000000
    220c:	0000addf 	.word	0x0000addf

00002210 <z_log_msg_alloc>:
{
    2210:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2212:	2200      	movs	r2, #0
    2214:	4801      	ldr	r0, [pc, #4]	; (221c <z_log_msg_alloc+0xc>)
    2216:	2300      	movs	r3, #0
    2218:	f008 bc95 	b.w	ab46 <mpsc_pbuf_alloc>
    221c:	2000014c 	.word	0x2000014c

00002220 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2220:	4801      	ldr	r0, [pc, #4]	; (2228 <z_log_msg_local_claim+0x8>)
    2222:	f008 bd2e 	b.w	ac82 <mpsc_pbuf_claim>
    2226:	bf00      	nop
    2228:	2000014c 	.word	0x2000014c

0000222c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    222c:	4b02      	ldr	r3, [pc, #8]	; (2238 <z_log_msg_free+0xc>)
{
    222e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2230:	6818      	ldr	r0, [r3, #0]
    2232:	f008 bd78 	b.w	ad26 <mpsc_pbuf_free>
    2236:	bf00      	nop
    2238:	20000a38 	.word	0x20000a38

0000223c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    223c:	4801      	ldr	r0, [pc, #4]	; (2244 <z_log_msg_pending+0x8>)
    223e:	f008 bdae 	b.w	ad9e <mpsc_pbuf_is_pending>
    2242:	bf00      	nop
    2244:	2000014c 	.word	0x2000014c

00002248 <z_impl_log_process>:
{
    2248:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    224a:	4b28      	ldr	r3, [pc, #160]	; (22ec <z_impl_log_process+0xa4>)
    224c:	7818      	ldrb	r0, [r3, #0]
    224e:	2800      	cmp	r0, #0
    2250:	d04b      	beq.n	22ea <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    2252:	f7ff ffe5 	bl	2220 <z_log_msg_local_claim>
	if (msg) {
    2256:	4605      	mov	r5, r0
    2258:	b190      	cbz	r0, 2280 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    225a:	f3bf 8f5b 	dmb	ish
    225e:	4b24      	ldr	r3, [pc, #144]	; (22f0 <z_impl_log_process+0xa8>)
    2260:	e853 1f00 	ldrex	r1, [r3]
    2264:	3901      	subs	r1, #1
    2266:	e843 1200 	strex	r2, r1, [r3]
    226a:	2a00      	cmp	r2, #0
    226c:	d1f8      	bne.n	2260 <z_impl_log_process+0x18>
    226e:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2272:	4c20      	ldr	r4, [pc, #128]	; (22f4 <z_impl_log_process+0xac>)
    2274:	4e20      	ldr	r6, [pc, #128]	; (22f8 <z_impl_log_process+0xb0>)
    2276:	42b4      	cmp	r4, r6
    2278:	d32d      	bcc.n	22d6 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    227a:	4628      	mov	r0, r5
    227c:	f7ff ffd6 	bl	222c <z_log_msg_free>
	return dropped_cnt > 0;
    2280:	4b1e      	ldr	r3, [pc, #120]	; (22fc <z_impl_log_process+0xb4>)
    2282:	4c1f      	ldr	r4, [pc, #124]	; (2300 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	2b00      	cmp	r3, #0
    2288:	dd19      	ble.n	22be <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    228a:	f009 fcad 	bl	bbe8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    228e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2292:	fba0 0302 	umull	r0, r3, r0, r2
    2296:	fb02 3101 	mla	r1, r2, r1, r3
    229a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    229c:	e9d4 2000 	ldrd	r2, r0, [r4]
    22a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    22a4:	1a9b      	subs	r3, r3, r2
    22a6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    22aa:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    22ae:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    22b2:	4293      	cmp	r3, r2
    22b4:	f171 0100 	sbcs.w	r1, r1, #0
    22b8:	d301      	bcc.n	22be <z_impl_log_process+0x76>
				dropped_notify();
    22ba:	f7ff ff6b 	bl	2194 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    22be:	e9d4 3200 	ldrd	r3, r2, [r4]
    22c2:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    22c6:	f142 0200 	adc.w	r2, r2, #0
    22ca:	e9c4 3200 	strd	r3, r2, [r4]
}
    22ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    22d2:	f7ff bfb3 	b.w	223c <z_log_msg_pending>
	return backend->cb->active;
    22d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    22d8:	795b      	ldrb	r3, [r3, #5]
    22da:	b123      	cbz	r3, 22e6 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    22dc:	6823      	ldr	r3, [r4, #0]
    22de:	4629      	mov	r1, r5
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	4620      	mov	r0, r4
    22e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    22e6:	3410      	adds	r4, #16
    22e8:	e7c5      	b.n	2276 <z_impl_log_process+0x2e>
}
    22ea:	bd70      	pop	{r4, r5, r6, pc}
    22ec:	20001f73 	.word	0x20001f73
    22f0:	20000a44 	.word	0x20000a44
    22f4:	0000c120 	.word	0x0000c120
    22f8:	0000c120 	.word	0x0000c120
    22fc:	20000a40 	.word	0x20000a40
    2300:	20000750 	.word	0x20000750

00002304 <z_impl_log_panic>:
{
    2304:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    2306:	4d0d      	ldr	r5, [pc, #52]	; (233c <z_impl_log_panic+0x38>)
    2308:	7829      	ldrb	r1, [r5, #0]
    230a:	b961      	cbnz	r1, 2326 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    230c:	2001      	movs	r0, #1
    230e:	f7ff fec3 	bl	2098 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2312:	4c0b      	ldr	r4, [pc, #44]	; (2340 <z_impl_log_panic+0x3c>)
    2314:	4e0b      	ldr	r6, [pc, #44]	; (2344 <z_impl_log_panic+0x40>)
    2316:	42b4      	cmp	r4, r6
    2318:	d306      	bcc.n	2328 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    231a:	f7ff ff95 	bl	2248 <z_impl_log_process>
		while (log_process() == true) {
    231e:	2800      	cmp	r0, #0
    2320:	d1fb      	bne.n	231a <z_impl_log_panic+0x16>
	panic_mode = true;
    2322:	2301      	movs	r3, #1
    2324:	702b      	strb	r3, [r5, #0]
}
    2326:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2328:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    232a:	795b      	ldrb	r3, [r3, #5]
    232c:	b11b      	cbz	r3, 2336 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    232e:	6823      	ldr	r3, [r4, #0]
    2330:	4620      	mov	r0, r4
    2332:	689b      	ldr	r3, [r3, #8]
    2334:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2336:	3410      	adds	r4, #16
    2338:	e7ed      	b.n	2316 <z_impl_log_panic+0x12>
    233a:	bf00      	nop
    233c:	20001f74 	.word	0x20001f74
    2340:	0000c120 	.word	0x0000c120
    2344:	0000c120 	.word	0x0000c120

00002348 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2348:	2100      	movs	r1, #0
{
    234a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    234e:	4608      	mov	r0, r1
    2350:	f7ff fea2 	bl	2098 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2354:	4604      	mov	r4, r0
    2356:	b348      	cbz	r0, 23ac <log_process_thread_func+0x64>
    2358:	f240 6867 	movw	r8, #1639	; 0x667
    235c:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2360:	f007 fb04 	bl	996c <z_impl_z_current_get>
	proc_tid = process_tid;
    2364:	4b1a      	ldr	r3, [pc, #104]	; (23d0 <log_process_thread_func+0x88>)
    2366:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2368:	b130      	cbz	r0, 2378 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    236a:	4b1a      	ldr	r3, [pc, #104]	; (23d4 <log_process_thread_func+0x8c>)
	    process_tid &&
    236c:	681b      	ldr	r3, [r3, #0]
    236e:	2b09      	cmp	r3, #9
    2370:	dd02      	ble.n	2378 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    2372:	4819      	ldr	r0, [pc, #100]	; (23d8 <log_process_thread_func+0x90>)
    2374:	f006 fe6e 	bl	9054 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2378:	4f18      	ldr	r7, [pc, #96]	; (23dc <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    237a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 23d8 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    237e:	2500      	movs	r5, #0
		if (activate_mask) {
    2380:	b144      	cbz	r4, 2394 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    2382:	4620      	mov	r0, r4
    2384:	f7ff fe22 	bl	1fcc <activate_foreach_backend>
			if (!activate_mask) {
    2388:	4604      	mov	r4, r0
    238a:	b918      	cbnz	r0, 2394 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    238c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2390:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2394:	f7ff ff58 	bl	2248 <z_impl_log_process>
		if (log_process() == false) {
    2398:	4606      	mov	r6, r0
    239a:	b928      	cbnz	r0, 23a8 <log_process_thread_func+0x60>
			if (processed_any) {
    239c:	b9b5      	cbnz	r5, 23cc <log_process_thread_func+0x84>
    239e:	4642      	mov	r2, r8
    23a0:	464b      	mov	r3, r9
    23a2:	4650      	mov	r0, sl
    23a4:	f006 fe76 	bl	9094 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    23a8:	4635      	mov	r5, r6
    23aa:	e7e9      	b.n	2380 <log_process_thread_func+0x38>
    23ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    23b0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    23b4:	e7d4      	b.n	2360 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    23b6:	682b      	ldr	r3, [r5, #0]
    23b8:	699b      	ldr	r3, [r3, #24]
    23ba:	b11b      	cbz	r3, 23c4 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    23bc:	2200      	movs	r2, #0
    23be:	4611      	mov	r1, r2
    23c0:	4628      	mov	r0, r5
    23c2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    23c4:	3510      	adds	r5, #16
    23c6:	42bd      	cmp	r5, r7
    23c8:	d3f5      	bcc.n	23b6 <log_process_thread_func+0x6e>
    23ca:	e7e8      	b.n	239e <log_process_thread_func+0x56>
    23cc:	4d04      	ldr	r5, [pc, #16]	; (23e0 <log_process_thread_func+0x98>)
    23ce:	e7fa      	b.n	23c6 <log_process_thread_func+0x7e>
    23d0:	20000a3c 	.word	0x20000a3c
    23d4:	20000a44 	.word	0x20000a44
    23d8:	20000208 	.word	0x20000208
    23dc:	0000c120 	.word	0x0000c120
    23e0:	0000c120 	.word	0x0000c120

000023e4 <z_log_msg_post_finalize>:
{
    23e4:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    23e6:	4818      	ldr	r0, [pc, #96]	; (2448 <z_log_msg_post_finalize+0x64>)
    23e8:	f008 fcfb 	bl	ade2 <atomic_inc>
	if (panic_mode) {
    23ec:	4b17      	ldr	r3, [pc, #92]	; (244c <z_log_msg_post_finalize+0x68>)
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	b17b      	cbz	r3, 2412 <z_log_msg_post_finalize+0x2e>
    23f2:	f04f 0320 	mov.w	r3, #32
    23f6:	f3ef 8411 	mrs	r4, BASEPRI
    23fa:	f383 8812 	msr	BASEPRI_MAX, r3
    23fe:	f3bf 8f6f 	isb	sy
    2402:	f7ff ff21 	bl	2248 <z_impl_log_process>
	__asm__ volatile(
    2406:	f384 8811 	msr	BASEPRI, r4
    240a:	f3bf 8f6f 	isb	sy
}
    240e:	b002      	add	sp, #8
    2410:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2412:	4b0f      	ldr	r3, [pc, #60]	; (2450 <z_log_msg_post_finalize+0x6c>)
    2414:	681b      	ldr	r3, [r3, #0]
    2416:	2b00      	cmp	r3, #0
    2418:	d0f9      	beq.n	240e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    241a:	b950      	cbnz	r0, 2432 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    241c:	2200      	movs	r2, #0
    241e:	2300      	movs	r3, #0
    2420:	e9cd 2300 	strd	r2, r3, [sp]
    2424:	480b      	ldr	r0, [pc, #44]	; (2454 <z_log_msg_post_finalize+0x70>)
    2426:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    242a:	2300      	movs	r3, #0
    242c:	f007 fce2 	bl	9df4 <z_impl_k_timer_start>
    2430:	e7ed      	b.n	240e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2432:	280a      	cmp	r0, #10
    2434:	d1eb      	bne.n	240e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    2436:	4807      	ldr	r0, [pc, #28]	; (2454 <z_log_msg_post_finalize+0x70>)
    2438:	f009 fc0a 	bl	bc50 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    243c:	4806      	ldr	r0, [pc, #24]	; (2458 <z_log_msg_post_finalize+0x74>)
}
    243e:	b002      	add	sp, #8
    2440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2444:	f006 be06 	b.w	9054 <z_impl_k_sem_give>
    2448:	20000a44 	.word	0x20000a44
    244c:	20001f74 	.word	0x20001f74
    2450:	20000a3c 	.word	0x20000a3c
    2454:	20000758 	.word	0x20000758
    2458:	20000208 	.word	0x20000208

0000245c <z_log_msg_commit>:
{
    245c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    245e:	4b06      	ldr	r3, [pc, #24]	; (2478 <z_log_msg_commit+0x1c>)
    2460:	681b      	ldr	r3, [r3, #0]
{
    2462:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2464:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    2466:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    2468:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    246a:	4804      	ldr	r0, [pc, #16]	; (247c <z_log_msg_commit+0x20>)
    246c:	f008 fbe9 	bl	ac42 <mpsc_pbuf_commit>
}
    2470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2474:	f7ff bfb6 	b.w	23e4 <z_log_msg_post_finalize>
    2478:	20000000 	.word	0x20000000
    247c:	2000014c 	.word	0x2000014c

00002480 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2480:	4b08      	ldr	r3, [pc, #32]	; (24a4 <log_backend_enable+0x24>)
    2482:	1ac3      	subs	r3, r0, r3
{
    2484:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2486:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    2488:	6844      	ldr	r4, [r0, #4]
    248a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    248c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    248e:	6843      	ldr	r3, [r0, #4]
    2490:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2492:	6843      	ldr	r3, [r0, #4]
    2494:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2496:	6843      	ldr	r3, [r0, #4]
    2498:	2201      	movs	r2, #1
    249a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    249c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    249e:	f7ff be43 	b.w	2128 <z_log_notify_backend_enabled>
    24a2:	bf00      	nop
    24a4:	0000c120 	.word	0x0000c120

000024a8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    24a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24ac:	b08f      	sub	sp, #60	; 0x3c
    24ae:	af04      	add	r7, sp, #16
    24b0:	f3c1 284a 	ubfx	r8, r1, #9, #11
    24b4:	60b8      	str	r0, [r7, #8]
    24b6:	460d      	mov	r5, r1
    24b8:	4691      	mov	r9, r2
    24ba:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    24bc:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    24be:	f1b8 0f00 	cmp.w	r8, #0
    24c2:	d063      	beq.n	258c <z_impl_z_log_msg_static_create+0xe4>
					size_t len,
					uint32_t flags,
					uint16_t *strl,
					size_t strl_len)
{
	struct z_cbprintf_buf_desc buf_desc = {
    24c4:	2600      	movs	r6, #0
		.buf = packaged,
		.size = len,
		.off = 0,
	};

	return cbprintf_package_convert(in_packaged, in_len,
    24c6:	f107 0314 	add.w	r3, r7, #20
    24ca:	f04f 0b04 	mov.w	fp, #4
    24ce:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    24d2:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    24d6:	e9c7 6607 	strd	r6, r6, [r7, #28]
    24da:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    24dc:	9301      	str	r3, [sp, #4]
    24de:	f8cd b008 	str.w	fp, [sp, #8]
    24e2:	f8cd a000 	str.w	sl, [sp]
    24e6:	f107 031c 	add.w	r3, r7, #28
    24ea:	68f9      	ldr	r1, [r7, #12]
    24ec:	4632      	mov	r2, r6
    24ee:	4648      	mov	r0, r9
    24f0:	f7ff fa66 	bl	19c0 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    24f4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    24f8:	4603      	mov	r3, r0
    24fa:	d31c      	bcc.n	2536 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    24fc:	466c      	mov	r4, sp
    24fe:	b08a      	sub	sp, #40	; 0x28
    2500:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2504:	ab04      	add	r3, sp, #16
    2506:	4826      	ldr	r0, [pc, #152]	; (25a0 <z_impl_z_log_msg_static_create+0xf8>)
    2508:	e9c3 0105 	strd	r0, r1, [r3, #20]
    250c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2510:	61d9      	str	r1, [r3, #28]
    2512:	461a      	mov	r2, r3
    2514:	f44f 7100 	mov.w	r1, #512	; 0x200
    2518:	8419      	strh	r1, [r3, #32]
    251a:	4b22      	ldr	r3, [pc, #136]	; (25a4 <z_impl_z_log_msg_static_create+0xfc>)
    251c:	f842 3f10 	str.w	r3, [r2, #16]!
    2520:	4821      	ldr	r0, [pc, #132]	; (25a8 <z_impl_z_log_msg_static_create+0x100>)
    2522:	4633      	mov	r3, r6
    2524:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    2528:	f7ff ffbe 	bl	24a8 <z_impl_z_log_msg_static_create>
    252c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    252e:	372c      	adds	r7, #44	; 0x2c
    2530:	46bd      	mov	sp, r7
    2532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    2536:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    253a:	f104 0017 	add.w	r0, r4, #23
    253e:	4418      	add	r0, r3
    2540:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2544:	0880      	lsrs	r0, r0, #2
    2546:	603b      	str	r3, [r7, #0]
    2548:	f7ff fe62 	bl	2210 <z_log_msg_alloc>
    254c:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    2550:	4604      	mov	r4, r0
    2552:	b190      	cbz	r0, 257a <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    2554:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    2556:	4a15      	ldr	r2, [pc, #84]	; (25ac <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    2558:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    255c:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    2560:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    2564:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    2566:	e9cd a300 	strd	sl, r3, [sp]
    256a:	f8cd b008 	str.w	fp, [sp, #8]
    256e:	68f9      	ldr	r1, [r7, #12]
    2570:	f107 031c 	add.w	r3, r7, #28
    2574:	4648      	mov	r0, r9
    2576:	f7ff fa23 	bl	19c0 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    257a:	f368 2553 	bfi	r5, r8, #9, #11
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	68b9      	ldr	r1, [r7, #8]
    2582:	462a      	mov	r2, r5
    2584:	4620      	mov	r0, r4
    2586:	f008 fc60 	bl	ae4a <z_log_msg_finalize>
    258a:	e7d0      	b.n	252e <z_impl_z_log_msg_static_create+0x86>
    258c:	f104 0017 	add.w	r0, r4, #23
    2590:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2594:	0880      	lsrs	r0, r0, #2
    2596:	f7ff fe3b 	bl	2210 <z_log_msg_alloc>
    259a:	4604      	mov	r4, r0
    259c:	e7ed      	b.n	257a <z_impl_z_log_msg_static_create+0xd2>
    259e:	bf00      	nop
    25a0:	0000c627 	.word	0x0000c627
    25a4:	01000004 	.word	0x01000004
    25a8:	0000c0c0 	.word	0x0000c0c0
    25ac:	0000ae1f 	.word	0x0000ae1f

000025b0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    25b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25b4:	b087      	sub	sp, #28
    25b6:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    25ba:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    25be:	4604      	mov	r4, r0
    25c0:	460f      	mov	r7, r1
    25c2:	4693      	mov	fp, r2
    25c4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    25c6:	b3a6      	cbz	r6, 2632 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    25c8:	2110      	movs	r1, #16
    25ca:	f8cd 9000 	str.w	r9, [sp]
    25ce:	4633      	mov	r3, r6
    25d0:	4652      	mov	r2, sl
    25d2:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    25d4:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    25d8:	f7ff f81c 	bl	1614 <cbvprintf_package>
    25dc:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    25de:	f105 0017 	add.w	r0, r5, #23
    25e2:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    25e4:	4b14      	ldr	r3, [pc, #80]	; (2638 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    25e6:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    25e8:	f004 0407 	and.w	r4, r4, #7
    25ec:	f00b 0b07 	and.w	fp, fp, #7
    25f0:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    25f2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    25f6:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    25fa:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    25fe:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2600:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2602:	f7ff fe05 	bl	2210 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2606:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    260a:	4605      	mov	r5, r0
    260c:	b140      	cbz	r0, 2620 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    260e:	b13e      	cbz	r6, 2620 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2610:	9903      	ldr	r1, [sp, #12]
    2612:	f8cd 9000 	str.w	r9, [sp]
    2616:	4633      	mov	r3, r6
    2618:	4652      	mov	r2, sl
    261a:	3010      	adds	r0, #16
    261c:	f7fe fffa 	bl	1614 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2620:	4643      	mov	r3, r8
    2622:	4622      	mov	r2, r4
    2624:	4639      	mov	r1, r7
    2626:	4628      	mov	r0, r5
	}
}
    2628:	b007      	add	sp, #28
    262a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    262e:	f008 bc0c 	b.w	ae4a <z_log_msg_finalize>
		plen = 0;
    2632:	4631      	mov	r1, r6
    2634:	e7d3      	b.n	25de <z_impl_z_log_msg_runtime_vcreate+0x2e>
    2636:	bf00      	nop
    2638:	000ffe00 	.word	0x000ffe00

0000263c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2640:	4605      	mov	r5, r0
	__asm__ volatile(
    2642:	f04f 0320 	mov.w	r3, #32
    2646:	f3ef 8611 	mrs	r6, BASEPRI
    264a:	f383 8812 	msr	BASEPRI_MAX, r3
    264e:	f3bf 8f6f 	isb	sy
	return list->head;
    2652:	4b0e      	ldr	r3, [pc, #56]	; (268c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2654:	4f0e      	ldr	r7, [pc, #56]	; (2690 <pm_state_notify+0x54>)
    2656:	681c      	ldr	r4, [r3, #0]
    2658:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2694 <pm_state_notify+0x58>
    265c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2660:	b92c      	cbnz	r4, 266e <pm_state_notify+0x32>
	__asm__ volatile(
    2662:	f386 8811 	msr	BASEPRI, r6
    2666:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    266e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    2672:	2d00      	cmp	r5, #0
    2674:	bf18      	it	ne
    2676:	4613      	movne	r3, r2
		if (callback) {
    2678:	b12b      	cbz	r3, 2686 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    267a:	f898 2010 	ldrb.w	r2, [r8, #16]
    267e:	fb09 f202 	mul.w	r2, r9, r2
    2682:	5cb8      	ldrb	r0, [r7, r2]
    2684:	4798      	blx	r3
	return node->next;
    2686:	6824      	ldr	r4, [r4, #0]
    2688:	e7ea      	b.n	2660 <pm_state_notify+0x24>
    268a:	bf00      	nop
    268c:	20000a64 	.word	0x20000a64
    2690:	20000a58 	.word	0x20000a58
    2694:	20001d5c 	.word	0x20001d5c

00002698 <pm_system_resume>:

void pm_system_resume(void)
{
    2698:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    269a:	4b19      	ldr	r3, [pc, #100]	; (2700 <pm_system_resume+0x68>)
    269c:	7c1c      	ldrb	r4, [r3, #16]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    269e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26a2:	f004 031f 	and.w	r3, r4, #31
    26a6:	2201      	movs	r2, #1
    26a8:	409a      	lsls	r2, r3
    26aa:	4b16      	ldr	r3, [pc, #88]	; (2704 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26ac:	0961      	lsrs	r1, r4, #5
    26ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    26b2:	43d0      	mvns	r0, r2
    26b4:	e853 1f00 	ldrex	r1, [r3]
    26b8:	ea01 0500 	and.w	r5, r1, r0
    26bc:	e843 5600 	strex	r6, r5, [r3]
    26c0:	2e00      	cmp	r6, #0
    26c2:	d1f7      	bne.n	26b4 <pm_system_resume+0x1c>
    26c4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    26c8:	420a      	tst	r2, r1
    26ca:	d013      	beq.n	26f4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    26cc:	4b0e      	ldr	r3, [pc, #56]	; (2708 <pm_system_resume+0x70>)
    26ce:	4d0f      	ldr	r5, [pc, #60]	; (270c <pm_system_resume+0x74>)
    26d0:	b18b      	cbz	r3, 26f6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    26d2:	230c      	movs	r3, #12
    26d4:	4363      	muls	r3, r4
    26d6:	18ea      	adds	r2, r5, r3
    26d8:	5ce8      	ldrb	r0, [r5, r3]
    26da:	7851      	ldrb	r1, [r2, #1]
    26dc:	f008 fc6d 	bl	afba <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    26e0:	2000      	movs	r0, #0
    26e2:	f7ff ffab 	bl	263c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    26e6:	230c      	movs	r3, #12
    26e8:	435c      	muls	r4, r3
    26ea:	192a      	adds	r2, r5, r4
    26ec:	2300      	movs	r3, #0
    26ee:	512b      	str	r3, [r5, r4]
    26f0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    26f4:	bd70      	pop	{r4, r5, r6, pc}
    26f6:	f383 8811 	msr	BASEPRI, r3
    26fa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    26fe:	e7ef      	b.n	26e0 <pm_system_resume+0x48>
    2700:	20001d5c 	.word	0x20001d5c
    2704:	20000a6c 	.word	0x20000a6c
    2708:	0000afbb 	.word	0x0000afbb
    270c:	20000a58 	.word	0x20000a58

00002710 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2714:	4b35      	ldr	r3, [pc, #212]	; (27ec <pm_system_suspend+0xdc>)
{
    2716:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2718:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    271a:	f04f 0320 	mov.w	r3, #32
    271e:	f3ef 8811 	mrs	r8, BASEPRI
    2722:	f383 8812 	msr	BASEPRI_MAX, r3
    2726:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    272a:	240c      	movs	r4, #12
    272c:	4b30      	ldr	r3, [pc, #192]	; (27f0 <pm_system_suspend+0xe0>)
    272e:	4e31      	ldr	r6, [pc, #196]	; (27f4 <pm_system_suspend+0xe4>)
    2730:	436c      	muls	r4, r5
    2732:	191a      	adds	r2, r3, r4
    2734:	5d19      	ldrb	r1, [r3, r4]
    2736:	2900      	cmp	r1, #0
    2738:	d04c      	beq.n	27d4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    273a:	ca07      	ldmia	r2, {r0, r1, r2}
    273c:	eb06 0c04 	add.w	ip, r6, r4
    2740:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2744:	2200      	movs	r2, #0
    2746:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2748:	f388 8811 	msr	BASEPRI, r8
    274c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2750:	230c      	movs	r3, #12
    2752:	436b      	muls	r3, r5
    2754:	18f2      	adds	r2, r6, r3
    2756:	5cf0      	ldrb	r0, [r6, r3]
    2758:	2800      	cmp	r0, #0
    275a:	d039      	beq.n	27d0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    275c:	1c7b      	adds	r3, r7, #1
    275e:	d010      	beq.n	2782 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2760:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2764:	4c24      	ldr	r4, [pc, #144]	; (27f8 <pm_system_suspend+0xe8>)
    2766:	4a25      	ldr	r2, [pc, #148]	; (27fc <pm_system_suspend+0xec>)
    2768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    276c:	2100      	movs	r1, #0
    276e:	fbec 4100 	umlal	r4, r1, ip, r0
    2772:	2300      	movs	r3, #0
    2774:	4620      	mov	r0, r4
    2776:	f7fe fcc3 	bl	1100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    277a:	2101      	movs	r1, #1
    277c:	1a38      	subs	r0, r7, r0
    277e:	f003 ffb9 	bl	66f4 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2782:	f007 f805 	bl	9790 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2786:	2001      	movs	r0, #1
    2788:	f7ff ff58 	bl	263c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    278c:	f3bf 8f5b 	dmb	ish
    2790:	4b1b      	ldr	r3, [pc, #108]	; (2800 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2792:	096a      	lsrs	r2, r5, #5
    2794:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2798:	f005 011f 	and.w	r1, r5, #31
    279c:	2201      	movs	r2, #1
    279e:	408a      	lsls	r2, r1
    27a0:	e853 0f00 	ldrex	r0, [r3]
    27a4:	4310      	orrs	r0, r2
    27a6:	e843 0100 	strex	r1, r0, [r3]
    27aa:	2900      	cmp	r1, #0
    27ac:	d1f8      	bne.n	27a0 <pm_system_suspend+0x90>
    27ae:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    27b2:	4b14      	ldr	r3, [pc, #80]	; (2804 <pm_system_suspend+0xf4>)
    27b4:	b13b      	cbz	r3, 27c6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    27b6:	230c      	movs	r3, #12
    27b8:	fb03 f005 	mul.w	r0, r3, r5
    27bc:	1833      	adds	r3, r6, r0
    27be:	5c30      	ldrb	r0, [r6, r0]
    27c0:	7859      	ldrb	r1, [r3, #1]
    27c2:	f008 fbee 	bl	afa2 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    27c6:	f7ff ff67 	bl	2698 <pm_system_resume>
	k_sched_unlock();
    27ca:	f006 fff5 	bl	97b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    27ce:	2001      	movs	r0, #1
}
    27d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    27d4:	4601      	mov	r1, r0
    27d6:	4628      	mov	r0, r5
    27d8:	f000 f816 	bl	2808 <pm_policy_next_state>
		if (info != NULL) {
    27dc:	2800      	cmp	r0, #0
    27de:	d0b3      	beq.n	2748 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    27e0:	c807      	ldmia	r0, {r0, r1, r2}
    27e2:	4434      	add	r4, r6
    27e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    27e8:	e7ae      	b.n	2748 <pm_system_suspend+0x38>
    27ea:	bf00      	nop
    27ec:	20001d5c 	.word	0x20001d5c
    27f0:	20000a4c 	.word	0x20000a4c
    27f4:	20000a58 	.word	0x20000a58
    27f8:	000f423f 	.word	0x000f423f
    27fc:	000f4240 	.word	0x000f4240
    2800:	20000a6c 	.word	0x20000a6c
    2804:	0000afa3 	.word	0x0000afa3

00002808 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    280c:	b085      	sub	sp, #20
    280e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2810:	a903      	add	r1, sp, #12
    2812:	f000 f843 	bl	289c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2816:	4b1e      	ldr	r3, [pc, #120]	; (2890 <pm_policy_next_state+0x88>)
    2818:	9d03      	ldr	r5, [sp, #12]
    281a:	f8d3 a000 	ldr.w	sl, [r3]
    281e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2894 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2822:	1e43      	subs	r3, r0, #1
    2824:	b21b      	sxth	r3, r3
    2826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    282a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    282c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2830:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2834:	f04f 0b00 	mov.w	fp, #0
    2838:	b924      	cbnz	r4, 2844 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    283a:	46a1      	mov	r9, r4
}
    283c:	4648      	mov	r0, r9
    283e:	b005      	add	sp, #20
    2840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2844:	6868      	ldr	r0, [r5, #4]
    2846:	4a14      	ldr	r2, [pc, #80]	; (2898 <pm_policy_next_state+0x90>)
    2848:	46c4      	mov	ip, r8
    284a:	4659      	mov	r1, fp
    284c:	fbe0 c107 	umlal	ip, r1, r0, r7
    2850:	2300      	movs	r3, #0
    2852:	4660      	mov	r0, ip
    2854:	f7fe fc54 	bl	1100 <__aeabi_uldivmod>
    2858:	9001      	str	r0, [sp, #4]
    285a:	68a8      	ldr	r0, [r5, #8]
    285c:	4a0e      	ldr	r2, [pc, #56]	; (2898 <pm_policy_next_state+0x90>)
    285e:	46c4      	mov	ip, r8
    2860:	4659      	mov	r1, fp
    2862:	fbe0 c107 	umlal	ip, r1, r0, r7
    2866:	2300      	movs	r3, #0
    2868:	4660      	mov	r0, ip
    286a:	f7fe fc49 	bl	1100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    286e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    2872:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2874:	d001      	beq.n	287a <pm_policy_next_state+0x72>
    2876:	4582      	cmp	sl, r0
    2878:	d905      	bls.n	2886 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    287a:	1c73      	adds	r3, r6, #1
    287c:	d0de      	beq.n	283c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    287e:	9b01      	ldr	r3, [sp, #4]
    2880:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2882:	42b0      	cmp	r0, r6
    2884:	d9da      	bls.n	283c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2886:	3c01      	subs	r4, #1
    2888:	b2a4      	uxth	r4, r4
    288a:	3d0c      	subs	r5, #12
    288c:	e7d4      	b.n	2838 <pm_policy_next_state+0x30>
    288e:	bf00      	nop
    2890:	20000004 	.word	0x20000004
    2894:	000f423f 	.word	0x000f423f
    2898:	000f4240 	.word	0x000f4240

0000289c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    289c:	b908      	cbnz	r0, 28a2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    289e:	4b02      	ldr	r3, [pc, #8]	; (28a8 <pm_state_cpu_get_all+0xc>)
    28a0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    28a2:	2000      	movs	r0, #0
    28a4:	4770      	bx	lr
    28a6:	bf00      	nop
    28a8:	0000c160 	.word	0x0000c160

000028ac <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    28ac:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    28ae:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28b0:	4e0c      	ldr	r6, [pc, #48]	; (28e4 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    28b2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28b4:	4b0c      	ldr	r3, [pc, #48]	; (28e8 <class_handler+0x3c>)
    28b6:	42b3      	cmp	r3, r6
    28b8:	d303      	bcc.n	28c2 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    28ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
    28be:	bcf0      	pop	{r4, r5, r6, r7}
    28c0:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    28c2:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    28c4:	42bd      	cmp	r5, r7
    28c6:	d309      	bcc.n	28dc <class_handler+0x30>
		if (iface->class_handler &&
    28c8:	691c      	ldr	r4, [r3, #16]
    28ca:	b13c      	cbz	r4, 28dc <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    28cc:	f895 c002 	ldrb.w	ip, [r5, #2]
    28d0:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    28d2:	45ac      	cmp	ip, r5
    28d4:	d102      	bne.n	28dc <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    28d6:	4623      	mov	r3, r4
}
    28d8:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    28da:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28dc:	3324      	adds	r3, #36	; 0x24
    28de:	e7ea      	b.n	28b6 <class_handler+0xa>
    28e0:	20000a70 	.word	0x20000a70
    28e4:	200002d0 	.word	0x200002d0
    28e8:	200002ac 	.word	0x200002ac

000028ec <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    28ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    28f0:	4c13      	ldr	r4, [pc, #76]	; (2940 <custom_handler+0x54>)
    28f2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2944 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    28f6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2948 <custom_handler+0x5c>
{
    28fa:	4605      	mov	r5, r0
    28fc:	460e      	mov	r6, r1
    28fe:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2900:	4544      	cmp	r4, r8
    2902:	d303      	bcc.n	290c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2904:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    290c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    290e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2912:	429a      	cmp	r2, r3
    2914:	d312      	bcc.n	293c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    2916:	69a3      	ldr	r3, [r4, #24]
    2918:	b183      	cbz	r3, 293c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    291a:	7890      	ldrb	r0, [r2, #2]
    291c:	7929      	ldrb	r1, [r5, #4]
    291e:	4288      	cmp	r0, r1
    2920:	d105      	bne.n	292e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    2922:	463a      	mov	r2, r7
    2924:	4631      	mov	r1, r6
    2926:	4628      	mov	r0, r5
}
    2928:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    292c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    292e:	7952      	ldrb	r2, [r2, #5]
    2930:	2a01      	cmp	r2, #1
    2932:	d103      	bne.n	293c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    2934:	463a      	mov	r2, r7
    2936:	4631      	mov	r1, r6
    2938:	4628      	mov	r0, r5
    293a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    293c:	3424      	adds	r4, #36	; 0x24
    293e:	e7df      	b.n	2900 <custom_handler+0x14>
    2940:	200002ac 	.word	0x200002ac
    2944:	200002d0 	.word	0x200002d0
    2948:	20000a70 	.word	0x20000a70

0000294c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2950:	4c0b      	ldr	r4, [pc, #44]	; (2980 <vendor_handler+0x34>)
    2952:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2984 <vendor_handler+0x38>
{
    2956:	4605      	mov	r5, r0
    2958:	460e      	mov	r6, r1
    295a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    295c:	4544      	cmp	r4, r8
    295e:	d302      	bcc.n	2966 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2960:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2964:	e009      	b.n	297a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    2966:	6963      	ldr	r3, [r4, #20]
    2968:	b90b      	cbnz	r3, 296e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    296a:	3424      	adds	r4, #36	; 0x24
    296c:	e7f6      	b.n	295c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    296e:	463a      	mov	r2, r7
    2970:	4631      	mov	r1, r6
    2972:	4628      	mov	r0, r5
    2974:	4798      	blx	r3
    2976:	2800      	cmp	r0, #0
    2978:	d1f7      	bne.n	296a <vendor_handler+0x1e>
}
    297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    297e:	bf00      	nop
    2980:	200002ac 	.word	0x200002ac
    2984:	200002d0 	.word	0x200002d0

00002988 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2988:	4802      	ldr	r0, [pc, #8]	; (2994 <usb_reset_alt_setting+0xc>)
    298a:	2208      	movs	r2, #8
    298c:	2100      	movs	r1, #0
    298e:	f008 baff 	b.w	af90 <memset>
    2992:	bf00      	nop
    2994:	20000b2b 	.word	0x20000b2b

00002998 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    2998:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    299a:	4b0b      	ldr	r3, [pc, #44]	; (29c8 <is_ep_valid.part.0+0x30>)
    299c:	4c0b      	ldr	r4, [pc, #44]	; (29cc <is_ep_valid.part.0+0x34>)
    299e:	42a3      	cmp	r3, r4
    29a0:	d301      	bcc.n	29a6 <is_ep_valid.part.0+0xe>
	return false;
    29a2:	2000      	movs	r0, #0
}
    29a4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    29a6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    29a8:	7f1e      	ldrb	r6, [r3, #28]
    29aa:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    29ac:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    29ae:	b2d5      	uxtb	r5, r2
    29b0:	42ae      	cmp	r6, r5
    29b2:	d801      	bhi.n	29b8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29b4:	3324      	adds	r3, #36	; 0x24
    29b6:	e7f2      	b.n	299e <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    29b8:	3201      	adds	r2, #1
    29ba:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    29be:	4285      	cmp	r5, r0
    29c0:	d1f5      	bne.n	29ae <is_ep_valid.part.0+0x16>
		return true;
    29c2:	2001      	movs	r0, #1
    29c4:	e7ee      	b.n	29a4 <is_ep_valid.part.0+0xc>
    29c6:	bf00      	nop
    29c8:	200002ac 	.word	0x200002ac
    29cc:	200002d0 	.word	0x200002d0

000029d0 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    29d0:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    29d2:	4809      	ldr	r0, [pc, #36]	; (29f8 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    29d4:	7803      	ldrb	r3, [r0, #0]
    29d6:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    29da:	330a      	adds	r3, #10
    29dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    29e0:	b13b      	cbz	r3, 29f2 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    29e2:	f100 0208 	add.w	r2, r0, #8
    29e6:	f100 0110 	add.w	r1, r0, #16
    29ea:	4798      	blx	r3
    29ec:	43c0      	mvns	r0, r0
    29ee:	0fc0      	lsrs	r0, r0, #31
}
    29f0:	bd08      	pop	{r3, pc}
		return false;
    29f2:	4618      	mov	r0, r3
    29f4:	e7fc      	b.n	29f0 <usb_handle_request.constprop.0+0x20>
    29f6:	bf00      	nop
    29f8:	20000a70 	.word	0x20000a70

000029fc <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    29fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    29fe:	4b08      	ldr	r3, [pc, #32]	; (2a20 <usb_device_init.part.0+0x24>)
    2a00:	9305      	str	r3, [sp, #20]
    2a02:	2302      	movs	r3, #2
    2a04:	9304      	str	r3, [sp, #16]
    2a06:	4807      	ldr	r0, [pc, #28]	; (2a24 <usb_device_init.part.0+0x28>)
    2a08:	2300      	movs	r3, #0
    2a0a:	aa04      	add	r2, sp, #16
    2a0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a10:	f7ff fd4a 	bl	24a8 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    2a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a18:	b007      	add	sp, #28
    2a1a:	f85d fb04 	ldr.w	pc, [sp], #4
    2a1e:	bf00      	nop
    2a20:	0000c669 	.word	0x0000c669
    2a24:	0000c100 	.word	0x0000c100

00002a28 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2a28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    2a2a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    2a2c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2a2e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2a30:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2a34:	d007      	beq.n	2a46 <usb_halt_endpoint_req.isra.0+0x1e>
    2a36:	4620      	mov	r0, r4
    2a38:	f7ff ffae 	bl	2998 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2a3c:	b178      	cbz	r0, 2a5e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    2a3e:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2a40:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2a44:	b158      	cbz	r0, 2a5e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    2a46:	4e0b      	ldr	r6, [pc, #44]	; (2a74 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    2a48:	4620      	mov	r0, r4
		if (halt) {
    2a4a:	b155      	cbz	r5, 2a62 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    2a4c:	f002 fce4 	bl	5418 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2a50:	69f3      	ldr	r3, [r6, #28]
    2a52:	b11b      	cbz	r3, 2a5c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2a54:	f10d 0107 	add.w	r1, sp, #7
    2a58:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2a5a:	4798      	blx	r3
		return true;
    2a5c:	2001      	movs	r0, #1
}
    2a5e:	b002      	add	sp, #8
    2a60:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    2a62:	f002 fd13 	bl	548c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2a66:	69f3      	ldr	r3, [r6, #28]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d0f7      	beq.n	2a5c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2a6c:	f10d 0107 	add.w	r1, sp, #7
    2a70:	2009      	movs	r0, #9
    2a72:	e7f2      	b.n	2a5a <usb_halt_endpoint_req.isra.0+0x32>
    2a74:	20000a70 	.word	0x20000a70

00002a78 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    2a78:	b580      	push	{r7, lr}
    2a7a:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    2a7c:	b088      	sub	sp, #32
    2a7e:	466a      	mov	r2, sp
    2a80:	4b07      	ldr	r3, [pc, #28]	; (2aa0 <get_ep_bm_from_addr.part.0+0x28>)
    2a82:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2a86:	2303      	movs	r3, #3
    2a88:	f842 3f10 	str.w	r3, [r2, #16]!
    2a8c:	4805      	ldr	r0, [pc, #20]	; (2aa4 <get_ep_bm_from_addr.part.0+0x2c>)
    2a8e:	2300      	movs	r3, #0
    2a90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a94:	f7ff fd08 	bl	24a8 <z_impl_z_log_msg_static_create>
}
    2a98:	2000      	movs	r0, #0
    2a9a:	46bd      	mov	sp, r7
    2a9c:	bd80      	pop	{r7, pc}
    2a9e:	bf00      	nop
    2aa0:	0000c68e 	.word	0x0000c68e
    2aa4:	0000c100 	.word	0x0000c100

00002aa8 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2aa8:	2804      	cmp	r0, #4
{
    2aaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2aae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2b4c <forward_status_cb+0xa4>
    2ab2:	4604      	mov	r4, r0
    2ab4:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    2ab6:	d015      	beq.n	2ae4 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2ab8:	2801      	cmp	r0, #1
    2aba:	d12f      	bne.n	2b1c <forward_status_cb+0x74>
		if (usb_dev.configured) {
    2abc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2b50 <forward_status_cb+0xa8>
    2ac0:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    2ac4:	b353      	cbz	r3, 2b1c <forward_status_cb+0x74>
			usb_cancel_transfers();
    2ac6:	f000 fdf3 	bl	36b0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2aca:	4d22      	ldr	r5, [pc, #136]	; (2b54 <forward_status_cb+0xac>)
    2acc:	454d      	cmp	r5, r9
    2ace:	d222      	bcs.n	2b16 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    2ad0:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2ad2:	f04f 0a00 	mov.w	sl, #0
    2ad6:	7f2b      	ldrb	r3, [r5, #28]
    2ad8:	fa5f f68a 	uxtb.w	r6, sl
    2adc:	42b3      	cmp	r3, r6
    2ade:	d804      	bhi.n	2aea <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2ae0:	3524      	adds	r5, #36	; 0x24
    2ae2:	e7f3      	b.n	2acc <forward_status_cb+0x24>
		usb_reset_alt_setting();
    2ae4:	f7ff ff50 	bl	2988 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2ae8:	e7e8      	b.n	2abc <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2aea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    2aee:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    2af0:	7930      	ldrb	r0, [r6, #4]
    2af2:	f008 fab7 	bl	b064 <usb_dc_ep_disable>
    2af6:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2af8:	7930      	ldrb	r0, [r6, #4]
    2afa:	f008 f9bf 	bl	ae7c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2afe:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2b02:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    2b04:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    2b08:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    2b0c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2b10:	f10a 0a01 	add.w	sl, sl, #1
    2b14:	dadf      	bge.n	2ad6 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    2b16:	2300      	movs	r3, #0
    2b18:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b1c:	4d0d      	ldr	r5, [pc, #52]	; (2b54 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b1e:	454d      	cmp	r5, r9
    2b20:	d308      	bcc.n	2b34 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    2b22:	4b0b      	ldr	r3, [pc, #44]	; (2b50 <forward_status_cb+0xa8>)
    2b24:	6a1b      	ldr	r3, [r3, #32]
    2b26:	b16b      	cbz	r3, 2b44 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    2b28:	4639      	mov	r1, r7
    2b2a:	4620      	mov	r0, r4
}
    2b2c:	b003      	add	sp, #12
    2b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    2b32:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    2b34:	68eb      	ldr	r3, [r5, #12]
    2b36:	b11b      	cbz	r3, 2b40 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2b38:	463a      	mov	r2, r7
    2b3a:	4621      	mov	r1, r4
    2b3c:	4628      	mov	r0, r5
    2b3e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2b40:	3524      	adds	r5, #36	; 0x24
    2b42:	e7ec      	b.n	2b1e <forward_status_cb+0x76>
}
    2b44:	b003      	add	sp, #12
    2b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b4a:	bf00      	nop
    2b4c:	200002d0 	.word	0x200002d0
    2b50:	20000a70 	.word	0x20000a70
    2b54:	200002ac 	.word	0x200002ac

00002b58 <disable_endpoint>:
{
    2b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5a:	af00      	add	r7, sp, #0
    2b5c:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    2b5e:	f008 fa81 	bl	b064 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2b62:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    2b66:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    2b68:	d013      	beq.n	2b92 <disable_endpoint+0x3a>
	} else if (ret) {
    2b6a:	b190      	cbz	r0, 2b92 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2b6c:	466e      	mov	r6, sp
    2b6e:	b088      	sub	sp, #32
    2b70:	466a      	mov	r2, sp
    2b72:	4b0e      	ldr	r3, [pc, #56]	; (2bac <disable_endpoint+0x54>)
    2b74:	e9c2 3505 	strd	r3, r5, [r2, #20]
    2b78:	2303      	movs	r3, #3
    2b7a:	f842 3f10 	str.w	r3, [r2, #16]!
    2b7e:	480c      	ldr	r0, [pc, #48]	; (2bb0 <disable_endpoint+0x58>)
    2b80:	2300      	movs	r3, #0
    2b82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2b86:	f7ff fc8f 	bl	24a8 <z_impl_z_log_msg_static_create>
    2b8a:	46b5      	mov	sp, r6
}
    2b8c:	4620      	mov	r0, r4
    2b8e:	46bd      	mov	sp, r7
    2b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    2b92:	4628      	mov	r0, r5
    2b94:	f008 f972 	bl	ae7c <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2b98:	4a06      	ldr	r2, [pc, #24]	; (2bb4 <disable_endpoint+0x5c>)
    2b9a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2b9e:	ea23 0300 	bic.w	r3, r3, r0
    2ba2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2ba6:	2400      	movs	r4, #0
    2ba8:	e7f0      	b.n	2b8c <disable_endpoint+0x34>
    2baa:	bf00      	nop
    2bac:	0000c6a9 	.word	0x0000c6a9
    2bb0:	0000c100 	.word	0x0000c100
    2bb4:	20000a70 	.word	0x20000a70

00002bb8 <set_endpoint>:
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	b083      	sub	sp, #12
    2bbc:	af00      	add	r7, sp, #0
    2bbe:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2bc0:	7880      	ldrb	r0, [r0, #2]
    2bc2:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2bc4:	7923      	ldrb	r3, [r4, #4]
    2bc6:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    2bc8:	4d27      	ldr	r5, [pc, #156]	; (2c68 <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2bca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2bce:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2bd0:	78e3      	ldrb	r3, [r4, #3]
    2bd2:	f003 0303 	and.w	r3, r3, #3
    2bd6:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2bd8:	f008 f950 	bl	ae7c <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    2bdc:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2be0:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2be2:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    2be4:	d00c      	beq.n	2c00 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    2be6:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2be8:	4620      	mov	r0, r4
    2bea:	f000 fd43 	bl	3674 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2bee:	4620      	mov	r0, r4
    2bf0:	f7ff ffb2 	bl	2b58 <disable_endpoint>
		if (!k_is_in_isr()) {
    2bf4:	f008 fdd0 	bl	b798 <k_is_in_isr>
    2bf8:	b910      	cbnz	r0, 2c00 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    2bfa:	2096      	movs	r0, #150	; 0x96
    2bfc:	f006 fe9c 	bl	9938 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    2c00:	4638      	mov	r0, r7
    2c02:	f002 fbd5 	bl	53b0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2c06:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    2c0a:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    2c0c:	7838      	ldrb	r0, [r7, #0]
    2c0e:	d014      	beq.n	2c3a <set_endpoint+0x82>
	} else if (ret) {
    2c10:	b19b      	cbz	r3, 2c3a <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2c12:	466c      	mov	r4, sp
    2c14:	b088      	sub	sp, #32
    2c16:	466a      	mov	r2, sp
    2c18:	4b14      	ldr	r3, [pc, #80]	; (2c6c <set_endpoint+0xb4>)
    2c1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2c1e:	2303      	movs	r3, #3
    2c20:	f842 3f10 	str.w	r3, [r2, #16]!
    2c24:	4812      	ldr	r0, [pc, #72]	; (2c70 <set_endpoint+0xb8>)
    2c26:	2300      	movs	r3, #0
    2c28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c2c:	f7ff fc3c 	bl	24a8 <z_impl_z_log_msg_static_create>
		return false;
    2c30:	2000      	movs	r0, #0
    2c32:	46a5      	mov	sp, r4
}
    2c34:	370c      	adds	r7, #12
    2c36:	46bd      	mov	sp, r7
    2c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2c3a:	f002 fc63 	bl	5504 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2c3e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2c42:	d008      	beq.n	2c56 <set_endpoint+0x9e>
	} else if (ret) {
    2c44:	b138      	cbz	r0, 2c56 <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2c46:	466c      	mov	r4, sp
    2c48:	b088      	sub	sp, #32
    2c4a:	783b      	ldrb	r3, [r7, #0]
    2c4c:	466a      	mov	r2, sp
    2c4e:	4909      	ldr	r1, [pc, #36]	; (2c74 <set_endpoint+0xbc>)
    2c50:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2c54:	e7e3      	b.n	2c1e <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    2c56:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    2c5a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2c5c:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    2c5e:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2c62:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    2c66:	e7e5      	b.n	2c34 <set_endpoint+0x7c>
    2c68:	20000a70 	.word	0x20000a70
    2c6c:	0000c6cb 	.word	0x0000c6cb
    2c70:	0000c100 	.word	0x0000c100
    2c74:	0000c6ef 	.word	0x0000c6ef

00002c78 <usb_handle_standard_request>:
{
    2c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2c7c:	4ea3      	ldr	r6, [pc, #652]	; (2f0c <usb_handle_standard_request+0x294>)
    2c7e:	69b3      	ldr	r3, [r6, #24]
{
    2c80:	4604      	mov	r4, r0
    2c82:	460f      	mov	r7, r1
    2c84:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    2c86:	b9fb      	cbnz	r3, 2cc8 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    2c88:	7823      	ldrb	r3, [r4, #0]
    2c8a:	f003 031f 	and.w	r3, r3, #31
    2c8e:	2b01      	cmp	r3, #1
    2c90:	f000 809d 	beq.w	2dce <usb_handle_standard_request+0x156>
    2c94:	2b02      	cmp	r3, #2
    2c96:	f000 8104 	beq.w	2ea2 <usb_handle_standard_request+0x22a>
    2c9a:	bb33      	cbnz	r3, 2cea <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    2c9c:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    2ca0:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    2ca2:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2ca4:	2800      	cmp	r0, #0
    2ca6:	da34      	bge.n	2d12 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    2ca8:	2906      	cmp	r1, #6
    2caa:	d012      	beq.n	2cd2 <usb_handle_standard_request+0x5a>
    2cac:	2908      	cmp	r1, #8
    2cae:	d02b      	beq.n	2d08 <usb_handle_standard_request+0x90>
    2cb0:	b9d9      	cbnz	r1, 2cea <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2cb2:	2301      	movs	r3, #1
    2cb4:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    2cb6:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    2cb8:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    2cbc:	005b      	lsls	r3, r3, #1
    2cbe:	f043 0301 	orr.w	r3, r3, #1
    2cc2:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2cc4:	2302      	movs	r3, #2
    2cc6:	e12a      	b.n	2f1e <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2cc8:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2cca:	2800      	cmp	r0, #0
    2ccc:	d1dc      	bne.n	2c88 <usb_handle_standard_request+0x10>
		return 0;
    2cce:	2000      	movs	r0, #0
    2cd0:	e00d      	b.n	2cee <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    2cd2:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2cd4:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2cd6:	1f01      	subs	r1, r0, #4
    2cd8:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2cda:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2cdc:	d905      	bls.n	2cea <usb_handle_standard_request+0x72>
    2cde:	2807      	cmp	r0, #7
    2ce0:	d803      	bhi.n	2cea <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    2ce2:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2ce4:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    2ce6:	780c      	ldrb	r4, [r1, #0]
    2ce8:	b91c      	cbnz	r4, 2cf2 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    2cea:	f06f 0015 	mvn.w	r0, #21
}
    2cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    2cf2:	784e      	ldrb	r6, [r1, #1]
    2cf4:	4566      	cmp	r6, ip
    2cf6:	d103      	bne.n	2d00 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    2cf8:	429a      	cmp	r2, r3
    2cfa:	f000 810b 	beq.w	2f14 <usb_handle_standard_request+0x29c>
			cur_index++;
    2cfe:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    2d00:	4421      	add	r1, r4
    2d02:	e7f0      	b.n	2ce6 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    2d04:	780b      	ldrb	r3, [r1, #0]
    2d06:	e10a      	b.n	2f1e <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    2d08:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2d0c:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2d0e:	2301      	movs	r3, #1
    2d10:	e105      	b.n	2f1e <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    2d12:	3901      	subs	r1, #1
    2d14:	2908      	cmp	r1, #8
    2d16:	d8e8      	bhi.n	2cea <usb_handle_standard_request+0x72>
    2d18:	a301      	add	r3, pc, #4	; (adr r3, 2d20 <usb_handle_standard_request+0xa8>)
    2d1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    2d1e:	bf00      	nop
    2d20:	00002db9 	.word	0x00002db9
    2d24:	00002ceb 	.word	0x00002ceb
    2d28:	00002dc7 	.word	0x00002dc7
    2d2c:	00002ceb 	.word	0x00002ceb
    2d30:	00002d45 	.word	0x00002d45
    2d34:	00002ceb 	.word	0x00002ceb
    2d38:	00002ceb 	.word	0x00002ceb
    2d3c:	00002ceb 	.word	0x00002ceb
    2d40:	00002d51 	.word	0x00002d51
			return !usb_dc_set_address(setup->wValue);
    2d44:	78a0      	ldrb	r0, [r4, #2]
    2d46:	f002 faf7 	bl	5338 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d0bf      	beq.n	2cce <usb_handle_standard_request+0x56>
    2d4e:	e7cc      	b.n	2cea <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    2d50:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2d52:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    2d54:	bb63      	cbnz	r3, 2db0 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    2d56:	f7ff fe17 	bl	2988 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2d5a:	8863      	ldrh	r3, [r4, #2]
    2d5c:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2d60:	69f3      	ldr	r3, [r6, #28]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d0b3      	beq.n	2cce <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2d66:	496a      	ldr	r1, [pc, #424]	; (2f10 <usb_handle_standard_request+0x298>)
    2d68:	2003      	movs	r0, #3
    2d6a:	4798      	blx	r3
    2d6c:	e7af      	b.n	2cce <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    2d6e:	786b      	ldrb	r3, [r5, #1]
    2d70:	2b04      	cmp	r3, #4
    2d72:	d010      	beq.n	2d96 <usb_handle_standard_request+0x11e>
    2d74:	2b05      	cmp	r3, #5
    2d76:	d011      	beq.n	2d9c <usb_handle_standard_request+0x124>
    2d78:	2b02      	cmp	r3, #2
    2d7a:	d104      	bne.n	2d86 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2d7c:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    2d7e:	8863      	ldrh	r3, [r4, #2]
				found = true;
    2d80:	42bb      	cmp	r3, r7
    2d82:	bf08      	it	eq
    2d84:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2d86:	782b      	ldrb	r3, [r5, #0]
    2d88:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2d8a:	782b      	ldrb	r3, [r5, #0]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d1ee      	bne.n	2d6e <usb_handle_standard_request+0xf6>
	if (found) {
    2d90:	2800      	cmp	r0, #0
    2d92:	d0aa      	beq.n	2cea <usb_handle_standard_request+0x72>
    2d94:	e7df      	b.n	2d56 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    2d96:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    2d9a:	e7f4      	b.n	2d86 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    2d9c:	8863      	ldrh	r3, [r4, #2]
    2d9e:	42bb      	cmp	r3, r7
    2da0:	d1f1      	bne.n	2d86 <usb_handle_standard_request+0x10e>
    2da2:	f1b8 0f00 	cmp.w	r8, #0
    2da6:	d1ee      	bne.n	2d86 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2da8:	4628      	mov	r0, r5
    2daa:	f7ff ff05 	bl	2bb8 <set_endpoint>
			break;
    2dae:	e7ea      	b.n	2d86 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    2db0:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    2db2:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    2db4:	46b8      	mov	r8, r7
    2db6:	e7e8      	b.n	2d8a <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2db8:	8863      	ldrh	r3, [r4, #2]
    2dba:	2b01      	cmp	r3, #1
    2dbc:	d195      	bne.n	2cea <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    2dbe:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    2dc0:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2dc4:	e783      	b.n	2cce <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2dc6:	8863      	ldrh	r3, [r4, #2]
    2dc8:	2b01      	cmp	r3, #1
    2dca:	d18e      	bne.n	2cea <usb_handle_standard_request+0x72>
    2dcc:	e7f8      	b.n	2dc0 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    2dce:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2dd2:	f8d5 c000 	ldr.w	ip, [r5]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d087      	beq.n	2cea <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2dda:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2ddc:	88a3      	ldrh	r3, [r4, #4]
    2dde:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2de2:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    2de4:	7810      	ldrb	r0, [r2, #0]
    2de6:	2800      	cmp	r0, #0
    2de8:	f43f af7f 	beq.w	2cea <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2dec:	7851      	ldrb	r1, [r2, #1]
    2dee:	2902      	cmp	r1, #2
    2df0:	d104      	bne.n	2dfc <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    2df2:	f892 8004 	ldrb.w	r8, [r2, #4]
    2df6:	45f0      	cmp	r8, lr
    2df8:	f200 8093 	bhi.w	2f22 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    2dfc:	4402      	add	r2, r0
    2dfe:	e7f1      	b.n	2de4 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    2e00:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    2e04:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    2e08:	6039      	str	r1, [r7, #0]
			return true;
    2e0a:	e760      	b.n	2cce <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    2e0c:	4415      	add	r5, r2
    2e0e:	e094      	b.n	2f3a <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    2e10:	2a0b      	cmp	r2, #11
    2e12:	f47f af6a 	bne.w	2cea <usb_handle_standard_request+0x72>
	bool ret = false;
    2e16:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2e18:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2e1c:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    2e1e:	46ba      	mov	sl, r7
    2e20:	e006      	b.n	2e30 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    2e22:	786b      	ldrb	r3, [r5, #1]
    2e24:	2b04      	cmp	r3, #4
    2e26:	d00f      	beq.n	2e48 <usb_handle_standard_request+0x1d0>
    2e28:	2b05      	cmp	r3, #5
    2e2a:	d021      	beq.n	2e70 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    2e2c:	782b      	ldrb	r3, [r5, #0]
    2e2e:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    2e30:	782b      	ldrb	r3, [r5, #0]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d1f5      	bne.n	2e22 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    2e36:	69f3      	ldr	r3, [r6, #28]
    2e38:	b113      	cbz	r3, 2e40 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2e3a:	4651      	mov	r1, sl
    2e3c:	2007      	movs	r0, #7
    2e3e:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2e40:	2f00      	cmp	r7, #0
    2e42:	f47f af44 	bne.w	2cce <usb_handle_standard_request+0x56>
    2e46:	e750      	b.n	2cea <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2e48:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    2e4c:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2e4e:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    2e52:	4598      	cmp	r8, r3
    2e54:	d1ea      	bne.n	2e2c <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    2e56:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2e58:	4599      	cmp	r9, r3
    2e5a:	d1e7      	bne.n	2e2c <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2e5c:	f1b8 0f07 	cmp.w	r8, #7
    2e60:	d81c      	bhi.n	2e9c <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    2e62:	eb06 0308 	add.w	r3, r6, r8
		return true;
    2e66:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2e68:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    2e6c:	2701      	movs	r7, #1
    2e6e:	e7dd      	b.n	2e2c <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    2e70:	88a3      	ldrh	r3, [r4, #4]
    2e72:	4543      	cmp	r3, r8
    2e74:	d1da      	bne.n	2e2c <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    2e76:	78a3      	ldrb	r3, [r4, #2]
    2e78:	454b      	cmp	r3, r9
    2e7a:	d00a      	beq.n	2e92 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    2e7c:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2e7e:	4638      	mov	r0, r7
    2e80:	f000 fbf8 	bl	3674 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2e84:	4638      	mov	r0, r7
    2e86:	f7ff fe67 	bl	2b58 <disable_endpoint>
    2e8a:	fab0 f780 	clz	r7, r0
    2e8e:	097f      	lsrs	r7, r7, #5
    2e90:	e7cc      	b.n	2e2c <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    2e92:	4628      	mov	r0, r5
    2e94:	f7ff fe90 	bl	2bb8 <set_endpoint>
    2e98:	4607      	mov	r7, r0
    2e9a:	e7c7      	b.n	2e2c <usb_handle_standard_request+0x1b4>
    2e9c:	46aa      	mov	sl, r5
	return false;
    2e9e:	2700      	movs	r7, #0
    2ea0:	e7c4      	b.n	2e2c <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    2ea2:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2ea6:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	da18      	bge.n	2ede <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2eac:	2b00      	cmp	r3, #0
    2eae:	f47f af1c 	bne.w	2cea <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    2eb2:	7924      	ldrb	r4, [r4, #4]
    2eb4:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    2eb6:	0663      	lsls	r3, r4, #25
    2eb8:	d00a      	beq.n	2ed0 <usb_handle_standard_request+0x258>
    2eba:	4620      	mov	r0, r4
    2ebc:	f7ff fd6c 	bl	2998 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2ec0:	2800      	cmp	r0, #0
    2ec2:	f43f af12 	beq.w	2cea <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2ec6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2eca:	2b00      	cmp	r3, #0
    2ecc:	f43f af0d 	beq.w	2cea <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    2ed0:	4629      	mov	r1, r5
    2ed2:	4620      	mov	r0, r4
    2ed4:	f002 fafa 	bl	54cc <usb_dc_ep_is_stalled>
		data[1] = 0U;
    2ed8:	2300      	movs	r3, #0
    2eda:	706b      	strb	r3, [r5, #1]
    2edc:	e6f2      	b.n	2cc4 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    2ede:	2b01      	cmp	r3, #1
    2ee0:	d008      	beq.n	2ef4 <usb_handle_standard_request+0x27c>
    2ee2:	2b03      	cmp	r3, #3
    2ee4:	f47f af01 	bne.w	2cea <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2ee8:	8863      	ldrh	r3, [r4, #2]
    2eea:	2b00      	cmp	r3, #0
    2eec:	f47f aefd 	bne.w	2cea <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2ef0:	2101      	movs	r1, #1
    2ef2:	e003      	b.n	2efc <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    2ef4:	8861      	ldrh	r1, [r4, #2]
    2ef6:	2900      	cmp	r1, #0
    2ef8:	f47f aef7 	bne.w	2cea <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    2efc:	88a0      	ldrh	r0, [r4, #4]
    2efe:	f7ff fd93 	bl	2a28 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2f02:	2800      	cmp	r0, #0
    2f04:	f47f aee3 	bne.w	2cce <usb_handle_standard_request+0x56>
    2f08:	e6ef      	b.n	2cea <usb_handle_standard_request+0x72>
    2f0a:	bf00      	nop
    2f0c:	20000a70 	.word	0x20000a70
    2f10:	20000b2a 	.word	0x20000b2a
		if (type == USB_DESC_CONFIGURATION) {
    2f14:	2802      	cmp	r0, #2
		*data = p;
    2f16:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    2f18:	f47f aef4 	bne.w	2d04 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    2f1c:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    2f1e:	603b      	str	r3, [r7, #0]
		return true;
    2f20:	e6d5      	b.n	2cce <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    2f22:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    2f26:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2f28:	2800      	cmp	r0, #0
    2f2a:	f6bf af71 	bge.w	2e10 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    2f2e:	2a00      	cmp	r2, #0
    2f30:	f43f af66 	beq.w	2e00 <usb_handle_standard_request+0x188>
    2f34:	2a0a      	cmp	r2, #10
    2f36:	f47f aed8 	bne.w	2cea <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    2f3a:	782a      	ldrb	r2, [r5, #0]
    2f3c:	2a00      	cmp	r2, #0
    2f3e:	f43f aed4 	beq.w	2cea <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2f42:	7869      	ldrb	r1, [r5, #1]
    2f44:	2904      	cmp	r1, #4
    2f46:	f47f af61 	bne.w	2e0c <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2f4a:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2f4c:	428b      	cmp	r3, r1
    2f4e:	f47f af5d 	bne.w	2e0c <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2f52:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2f54:	bf96      	itet	ls
    2f56:	199b      	addls	r3, r3, r6
	return 0;
    2f58:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2f5a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2f5e:	f88c 3000 	strb.w	r3, [ip]
    2f62:	e6d4      	b.n	2d0e <usb_handle_standard_request+0x96>

00002f64 <usb_data_to_host>:
{
    2f64:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    2f66:	4c13      	ldr	r4, [pc, #76]	; (2fb4 <usb_data_to_host+0x50>)
    2f68:	7d23      	ldrb	r3, [r4, #20]
    2f6a:	b9cb      	cbnz	r3, 2fa0 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    2f6c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2f6e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    2f70:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2f72:	ab01      	add	r3, sp, #4
    2f74:	2080      	movs	r0, #128	; 0x80
    2f76:	f007 ff8f 	bl	ae98 <usb_write>
		usb_dev.data_buf += chunk;
    2f7a:	9a01      	ldr	r2, [sp, #4]
    2f7c:	68a3      	ldr	r3, [r4, #8]
    2f7e:	4413      	add	r3, r2
    2f80:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2f82:	68e3      	ldr	r3, [r4, #12]
    2f84:	1a9b      	subs	r3, r3, r2
    2f86:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    2f88:	b943      	cbnz	r3, 2f9c <usb_data_to_host+0x38>
    2f8a:	b13a      	cbz	r2, 2f9c <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2f8c:	6923      	ldr	r3, [r4, #16]
    2f8e:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    2f90:	429a      	cmp	r2, r3
    2f92:	dd03      	ble.n	2f9c <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2f94:	069b      	lsls	r3, r3, #26
    2f96:	d101      	bne.n	2f9c <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    2f98:	2301      	movs	r3, #1
    2f9a:	7523      	strb	r3, [r4, #20]
}
    2f9c:	b002      	add	sp, #8
    2f9e:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    2fa0:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2fa2:	461a      	mov	r2, r3
    2fa4:	4619      	mov	r1, r3
    2fa6:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    2fa8:	7523      	strb	r3, [r4, #20]
}
    2faa:	b002      	add	sp, #8
    2fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2fb0:	f002 bad2 	b.w	5558 <usb_dc_ep_write>
    2fb4:	20000a70 	.word	0x20000a70

00002fb8 <usb_handle_control_transfer>:
{
    2fb8:	b570      	push	{r4, r5, r6, lr}
    2fba:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    2fbc:	2300      	movs	r3, #0
{
    2fbe:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    2fc0:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2fc2:	4606      	mov	r6, r0
    2fc4:	2800      	cmp	r0, #0
    2fc6:	d168      	bne.n	309a <usb_handle_control_transfer+0xe2>
    2fc8:	2900      	cmp	r1, #0
    2fca:	d140      	bne.n	304e <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2fcc:	2208      	movs	r2, #8
    2fce:	460b      	mov	r3, r1
    2fd0:	eb0d 0102 	add.w	r1, sp, r2
    2fd4:	f008 f85f 	bl	b096 <usb_dc_ep_read>
    2fd8:	2800      	cmp	r0, #0
    2fda:	da04      	bge.n	2fe6 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2fdc:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2fde:	f002 fa1b 	bl	5418 <usb_dc_ep_set_stall>
}
    2fe2:	b00a      	add	sp, #40	; 0x28
    2fe4:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    2fe6:	4c32      	ldr	r4, [pc, #200]	; (30b0 <usb_handle_control_transfer+0xf8>)
    2fe8:	9a02      	ldr	r2, [sp, #8]
    2fea:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2fec:	9a03      	ldr	r2, [sp, #12]
    2fee:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    2ff0:	f104 0238 	add.w	r2, r4, #56	; 0x38
    2ff4:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    2ff6:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2ffa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    2ffe:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    3000:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    3002:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3006:	db15      	blt.n	3034 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3008:	2b80      	cmp	r3, #128	; 0x80
    300a:	d90f      	bls.n	302c <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
    300c:	4b29      	ldr	r3, [pc, #164]	; (30b4 <usb_handle_control_transfer+0xfc>)
    300e:	9309      	str	r3, [sp, #36]	; 0x24
    3010:	2302      	movs	r3, #2
    3012:	9308      	str	r3, [sp, #32]
    3014:	4828      	ldr	r0, [pc, #160]	; (30b8 <usb_handle_control_transfer+0x100>)
    3016:	462b      	mov	r3, r5
    3018:	aa08      	add	r2, sp, #32
    301a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    301e:	f7ff fa43 	bl	24a8 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3022:	2080      	movs	r0, #128	; 0x80
    3024:	f002 f9f8 	bl	5418 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3028:	4628      	mov	r0, r5
    302a:	e7d8      	b.n	2fde <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    302c:	b113      	cbz	r3, 3034 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
    302e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    3032:	e7d6      	b.n	2fe2 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    3034:	f7ff fccc 	bl	29d0 <usb_handle_request.constprop.0>
    3038:	2800      	cmp	r0, #0
    303a:	d0cf      	beq.n	2fdc <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    303c:	88e2      	ldrh	r2, [r4, #6]
    303e:	6923      	ldr	r3, [r4, #16]
    3040:	429a      	cmp	r2, r3
    3042:	bfd4      	ite	le
    3044:	60e2      	strle	r2, [r4, #12]
    3046:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    3048:	f7ff ff8c 	bl	2f64 <usb_data_to_host>
    304c:	e7c9      	b.n	2fe2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    304e:	4c18      	ldr	r4, [pc, #96]	; (30b0 <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3050:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    3054:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3056:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    3058:	dc05      	bgt.n	3066 <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    305a:	4602      	mov	r2, r0
    305c:	f008 f81b 	bl	b096 <usb_dc_ep_read>
    3060:	2800      	cmp	r0, #0
    3062:	dabe      	bge.n	2fe2 <usb_handle_control_transfer+0x2a>
    3064:	e7ba      	b.n	2fdc <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3066:	f008 f816 	bl	b096 <usb_dc_ep_read>
    306a:	2800      	cmp	r0, #0
    306c:	da04      	bge.n	3078 <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    306e:	2080      	movs	r0, #128	; 0x80
    3070:	f002 f9d2 	bl	5418 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3074:	4630      	mov	r0, r6
    3076:	e7b2      	b.n	2fde <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    3078:	9a01      	ldr	r2, [sp, #4]
    307a:	68a3      	ldr	r3, [r4, #8]
    307c:	4413      	add	r3, r2
    307e:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3080:	68e3      	ldr	r3, [r4, #12]
    3082:	1a9b      	subs	r3, r3, r2
    3084:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    3086:	2b00      	cmp	r3, #0
    3088:	d1ab      	bne.n	2fe2 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    308a:	f104 0338 	add.w	r3, r4, #56	; 0x38
    308e:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    3090:	f7ff fc9e 	bl	29d0 <usb_handle_request.constprop.0>
    3094:	2800      	cmp	r0, #0
    3096:	d1d7      	bne.n	3048 <usb_handle_control_transfer+0x90>
    3098:	e7a0      	b.n	2fdc <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    309a:	2880      	cmp	r0, #128	; 0x80
    309c:	d1a1      	bne.n	2fe2 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    309e:	4b04      	ldr	r3, [pc, #16]	; (30b0 <usb_handle_control_transfer+0xf8>)
    30a0:	68da      	ldr	r2, [r3, #12]
    30a2:	2a00      	cmp	r2, #0
    30a4:	d1d0      	bne.n	3048 <usb_handle_control_transfer+0x90>
    30a6:	7d1b      	ldrb	r3, [r3, #20]
    30a8:	2b00      	cmp	r3, #0
    30aa:	d1cd      	bne.n	3048 <usb_handle_control_transfer+0x90>
    30ac:	e799      	b.n	2fe2 <usb_handle_control_transfer+0x2a>
    30ae:	bf00      	nop
    30b0:	20000a70 	.word	0x20000a70
    30b4:	0000c710 	.word	0x0000c710
    30b8:	0000c100 	.word	0x0000c100

000030bc <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    30bc:	4b05      	ldr	r3, [pc, #20]	; (30d4 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    30be:	4a06      	ldr	r2, [pc, #24]	; (30d8 <usb_set_config+0x1c>)
    30c0:	629a      	str	r2, [r3, #40]	; 0x28
    30c2:	4a06      	ldr	r2, [pc, #24]	; (30dc <usb_set_config+0x20>)
    30c4:	62da      	str	r2, [r3, #44]	; 0x2c
    30c6:	4a06      	ldr	r2, [pc, #24]	; (30e0 <usb_set_config+0x24>)
    30c8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    30ca:	4a06      	ldr	r2, [pc, #24]	; (30e4 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    30cc:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    30ce:	619a      	str	r2, [r3, #24]
}
    30d0:	2000      	movs	r0, #0
    30d2:	4770      	bx	lr
    30d4:	20000a70 	.word	0x20000a70
    30d8:	00002c79 	.word	0x00002c79
    30dc:	000028ad 	.word	0x000028ad
    30e0:	0000294d 	.word	0x0000294d
    30e4:	000028ed 	.word	0x000028ed

000030e8 <usb_device_init>:
{
    30e8:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    30ea:	4b09      	ldr	r3, [pc, #36]	; (3110 <usb_device_init+0x28>)
    30ec:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    30f0:	b954      	cbnz	r4, 3108 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    30f2:	f000 f8d9 	bl	32a8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    30f6:	b918      	cbnz	r0, 3100 <usb_device_init+0x18>
}
    30f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    30fc:	f7ff bc7e 	b.w	29fc <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    3100:	f7ff ffdc 	bl	30bc <usb_set_config>
	return 0;
    3104:	4620      	mov	r0, r4
}
    3106:	bd10      	pop	{r4, pc}
		return -EALREADY;
    3108:	f06f 0077 	mvn.w	r0, #119	; 0x77
    310c:	e7fb      	b.n	3106 <usb_device_init+0x1e>
    310e:	bf00      	nop
    3110:	20000a70 	.word	0x20000a70

00003114 <usb_enable>:
{
    3114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3118:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    311a:	4d3b      	ldr	r5, [pc, #236]	; (3208 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    311c:	483b      	ldr	r0, [pc, #236]	; (320c <usb_enable+0xf8>)
    311e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3126:	f005 feab 	bl	8e80 <z_impl_k_mutex_lock>
    312a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    312e:	2e00      	cmp	r6, #0
    3130:	d167      	bne.n	3202 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    3132:	4837      	ldr	r0, [pc, #220]	; (3210 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    3134:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    3136:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    3138:	f002 fb82 	bl	5840 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    313c:	f002 f8ca 	bl	52d4 <usb_dc_attach>
	if (ret < 0) {
    3140:	1e04      	subs	r4, r0, #0
    3142:	db42      	blt.n	31ca <usb_enable+0xb6>
	ret = usb_transfer_init();
    3144:	f000 fad8 	bl	36f8 <usb_transfer_init>
	if (ret < 0) {
    3148:	1e04      	subs	r4, r0, #0
    314a:	db3e      	blt.n	31ca <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    314c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    314e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3150:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    3154:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3158:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    315c:	f002 f928 	bl	53b0 <usb_dc_ep_configure>
	if (ret < 0) {
    3160:	1e04      	subs	r4, r0, #0
    3162:	db32      	blt.n	31ca <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3164:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    3166:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3168:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    316c:	f002 f920 	bl	53b0 <usb_dc_ep_configure>
	if (ret < 0) {
    3170:	1e04      	subs	r4, r0, #0
    3172:	db2a      	blt.n	31ca <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    3174:	4927      	ldr	r1, [pc, #156]	; (3214 <usb_enable+0x100>)
    3176:	4630      	mov	r0, r6
    3178:	f002 fb4e 	bl	5818 <usb_dc_ep_set_callback>
	if (ret < 0) {
    317c:	1e04      	subs	r4, r0, #0
    317e:	db24      	blt.n	31ca <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    3180:	4924      	ldr	r1, [pc, #144]	; (3214 <usb_enable+0x100>)
    3182:	4638      	mov	r0, r7
    3184:	f002 fb48 	bl	5818 <usb_dc_ep_set_callback>
	if (ret < 0) {
    3188:	1e04      	subs	r4, r0, #0
    318a:	db1e      	blt.n	31ca <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    318c:	4c22      	ldr	r4, [pc, #136]	; (3218 <usb_enable+0x104>)
    318e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 321c <usb_enable+0x108>
    3192:	4544      	cmp	r4, r8
    3194:	d320      	bcc.n	31d8 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3196:	2000      	movs	r0, #0
    3198:	f002 f9b4 	bl	5504 <usb_dc_ep_enable>
	if (ret < 0) {
    319c:	1e04      	subs	r4, r0, #0
    319e:	db14      	blt.n	31ca <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    31a0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    31a4:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    31a6:	f043 0301 	orr.w	r3, r3, #1
    31aa:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    31ae:	f002 f9a9 	bl	5504 <usb_dc_ep_enable>
	if (ret < 0) {
    31b2:	1e04      	subs	r4, r0, #0
    31b4:	db09      	blt.n	31ca <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    31b6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    31ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    31be:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    31c2:	2301      	movs	r3, #1
    31c4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    31c8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    31ca:	4810      	ldr	r0, [pc, #64]	; (320c <usb_enable+0xf8>)
    31cc:	f005 fed2 	bl	8f74 <z_impl_k_mutex_unlock>
}
    31d0:	4620      	mov	r0, r4
    31d2:	b002      	add	sp, #8
    31d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    31d8:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    31da:	2600      	movs	r6, #0
    31dc:	7f22      	ldrb	r2, [r4, #28]
    31de:	b2f3      	uxtb	r3, r6
    31e0:	429a      	cmp	r2, r3
    31e2:	d801      	bhi.n	31e8 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    31e4:	3424      	adds	r4, #36	; 0x24
    31e6:	e7d4      	b.n	3192 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    31e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    31ec:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    31f0:	7910      	ldrb	r0, [r2, #4]
    31f2:	f002 fb11 	bl	5818 <usb_dc_ep_set_callback>
    31f6:	3601      	adds	r6, #1
    31f8:	2800      	cmp	r0, #0
    31fa:	d0ef      	beq.n	31dc <usb_enable+0xc8>
    31fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3200:	e7e3      	b.n	31ca <usb_enable+0xb6>
		ret = -EALREADY;
    3202:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3206:	e7e0      	b.n	31ca <usb_enable+0xb6>
    3208:	20000a70 	.word	0x20000a70
    320c:	200001f4 	.word	0x200001f4
    3210:	00002aa9 	.word	0x00002aa9
    3214:	00002fb9 	.word	0x00002fb9
    3218:	200002ac 	.word	0x200002ac
    321c:	200002d0 	.word	0x200002d0

00003220 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3220:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3222:	4b1f      	ldr	r3, [pc, #124]	; (32a0 <usb_update_sn_string_descriptor+0x80>)
{
    3224:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    3226:	aa05      	add	r2, sp, #20
    3228:	f103 0510 	add.w	r5, r3, #16
    322c:	6818      	ldr	r0, [r3, #0]
    322e:	6859      	ldr	r1, [r3, #4]
    3230:	4614      	mov	r4, r2
    3232:	c403      	stmia	r4!, {r0, r1}
    3234:	3308      	adds	r3, #8
    3236:	42ab      	cmp	r3, r5
    3238:	4622      	mov	r2, r4
    323a:	d1f7      	bne.n	322c <usb_update_sn_string_descriptor+0xc>
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3240:	2210      	movs	r2, #16
    3242:	2100      	movs	r1, #0
    3244:	a801      	add	r0, sp, #4
    3246:	f007 fea3 	bl	af90 <memset>
	memset(sn, 0, sizeof(sn));
    324a:	2212      	movs	r2, #18
    324c:	2100      	movs	r1, #0
    324e:	4815      	ldr	r0, [pc, #84]	; (32a4 <usb_update_sn_string_descriptor+0x84>)
    3250:	f007 fe9e 	bl	af90 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3254:	2110      	movs	r1, #16
    3256:	a801      	add	r0, sp, #4
    3258:	f008 f810 	bl	b27c <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    325c:	2800      	cmp	r0, #0
    325e:	dd1b      	ble.n	3298 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    3260:	2808      	cmp	r0, #8
    3262:	bfb8      	it	lt
    3264:	2008      	movlt	r0, #8
    3266:	3809      	subs	r0, #9
    3268:	ab01      	add	r3, sp, #4
    326a:	490e      	ldr	r1, [pc, #56]	; (32a4 <usb_update_sn_string_descriptor+0x84>)
    326c:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    326e:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3270:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3274:	ac0a      	add	r4, sp, #40	; 0x28
    3276:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    327a:	f003 030f 	and.w	r3, r3, #15
    327e:	3328      	adds	r3, #40	; 0x28
    3280:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    3282:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3284:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3288:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    328c:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    328e:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3290:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    3292:	f101 0102 	add.w	r1, r1, #2
    3296:	d1eb      	bne.n	3270 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    3298:	4802      	ldr	r0, [pc, #8]	; (32a4 <usb_update_sn_string_descriptor+0x84>)
    329a:	b00b      	add	sp, #44	; 0x2c
    329c:	bd30      	pop	{r4, r5, pc}
    329e:	bf00      	nop
    32a0:	0000c734 	.word	0x0000c734
    32a4:	20001f75 	.word	0x20001f75

000032a8 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    32a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32ac:	4c83      	ldr	r4, [pc, #524]	; (34bc <usb_get_device_descriptor+0x214>)
    32ae:	b08b      	sub	sp, #44	; 0x2c
    32b0:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    32b2:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    32b4:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    32b8:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    32ba:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    32bc:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    32be:	7823      	ldrb	r3, [r4, #0]
    32c0:	b943      	cbnz	r3, 32d4 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    32c2:	4b7f      	ldr	r3, [pc, #508]	; (34c0 <usb_get_device_descriptor+0x218>)
    32c4:	3402      	adds	r4, #2
    32c6:	429c      	cmp	r4, r3
    32c8:	d1f3      	bne.n	32b2 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    32ca:	487c      	ldr	r0, [pc, #496]	; (34bc <usb_get_device_descriptor+0x214>)
}
    32cc:	372c      	adds	r7, #44	; 0x2c
    32ce:	46bd      	mov	sp, r7
    32d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    32d4:	7863      	ldrb	r3, [r4, #1]
    32d6:	2b05      	cmp	r3, #5
    32d8:	d805      	bhi.n	32e6 <usb_get_device_descriptor+0x3e>
    32da:	e8df f003 	tbb	[pc, r3]
    32de:	04a6      	.short	0x04a6
    32e0:	3f07a603 	.word	0x3f07a603
    32e4:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    32e6:	7823      	ldrb	r3, [r4, #0]
    32e8:	441c      	add	r4, r3
    32ea:	e7e8      	b.n	32be <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    32ec:	78e3      	ldrb	r3, [r4, #3]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d1f9      	bne.n	32e6 <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    32f2:	78a3      	ldrb	r3, [r4, #2]
    32f4:	b343      	cbz	r3, 3348 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    32f6:	f10a 0a01 	add.w	sl, sl, #1
    32fa:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    32fe:	e7f2      	b.n	32e6 <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    3300:	686a      	ldr	r2, [r5, #4]
    3302:	4294      	cmp	r4, r2
    3304:	d023      	beq.n	334e <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3306:	3524      	adds	r5, #36	; 0x24
    3308:	429d      	cmp	r5, r3
    330a:	d3f9      	bcc.n	3300 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    330c:	466d      	mov	r5, sp
    330e:	b088      	sub	sp, #32
    3310:	466a      	mov	r2, sp
    3312:	4b6c      	ldr	r3, [pc, #432]	; (34c4 <usb_get_device_descriptor+0x21c>)
    3314:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3318:	2303      	movs	r3, #3
    331a:	f842 3f10 	str.w	r3, [r2, #16]!
    331e:	486a      	ldr	r0, [pc, #424]	; (34c8 <usb_get_device_descriptor+0x220>)
    3320:	2300      	movs	r3, #0
    3322:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3326:	f7ff f8bf 	bl	24a8 <z_impl_z_log_msg_static_create>
    332a:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    332c:	4b67      	ldr	r3, [pc, #412]	; (34cc <usb_get_device_descriptor+0x224>)
    332e:	627b      	str	r3, [r7, #36]	; 0x24
    3330:	2302      	movs	r3, #2
    3332:	623b      	str	r3, [r7, #32]
    3334:	4864      	ldr	r0, [pc, #400]	; (34c8 <usb_get_device_descriptor+0x220>)
    3336:	2300      	movs	r3, #0
    3338:	f107 0220 	add.w	r2, r7, #32
    333c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3340:	f7ff f8b2 	bl	24a8 <z_impl_z_log_msg_static_create>
		return NULL;
    3344:	2000      	movs	r0, #0
    3346:	e7c1      	b.n	32cc <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3348:	4d61      	ldr	r5, [pc, #388]	; (34d0 <usb_get_device_descriptor+0x228>)
    334a:	4b62      	ldr	r3, [pc, #392]	; (34d4 <usb_get_device_descriptor+0x22c>)
    334c:	e7dc      	b.n	3308 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    334e:	68ab      	ldr	r3, [r5, #8]
    3350:	2b00      	cmp	r3, #0
    3352:	d0d0      	beq.n	32f6 <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    3354:	4651      	mov	r1, sl
    3356:	4620      	mov	r0, r4
    3358:	4798      	blx	r3
    335a:	e7cc      	b.n	32f6 <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    335c:	2d00      	cmp	r5, #0
    335e:	d162      	bne.n	3426 <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    3360:	4b5d      	ldr	r3, [pc, #372]	; (34d8 <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    3362:	627b      	str	r3, [r7, #36]	; 0x24
    3364:	2302      	movs	r3, #2
    3366:	623b      	str	r3, [r7, #32]
    3368:	4857      	ldr	r0, [pc, #348]	; (34c8 <usb_get_device_descriptor+0x220>)
    336a:	2300      	movs	r3, #0
    336c:	f107 0220 	add.w	r2, r7, #32
    3370:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3374:	f7ff f898 	bl	24a8 <z_impl_z_log_msg_static_create>
				return -1;
    3378:	e7d8      	b.n	332c <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    337a:	6a29      	ldr	r1, [r5, #32]
    337c:	78a0      	ldrb	r0, [r4, #2]
    337e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3382:	790b      	ldrb	r3, [r1, #4]
    3384:	4298      	cmp	r0, r3
    3386:	d005      	beq.n	3394 <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3388:	3201      	adds	r2, #1
    338a:	7f2b      	ldrb	r3, [r5, #28]
    338c:	429a      	cmp	r2, r3
    338e:	d3f4      	bcc.n	337a <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    3390:	4b52      	ldr	r3, [pc, #328]	; (34dc <usb_get_device_descriptor+0x234>)
    3392:	e7e6      	b.n	3362 <usb_get_device_descriptor+0xba>
    3394:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3398:	78e0      	ldrb	r0, [r4, #3]
    339a:	f000 0003 	and.w	r0, r0, #3
    339e:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    33a0:	7920      	ldrb	r0, [r4, #4]
    33a2:	f894 c005 	ldrb.w	ip, [r4, #5]
    33a6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    33aa:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    33ac:	f994 0002 	ldrsb.w	r0, [r4, #2]
    33b0:	2800      	cmp	r0, #0
    33b2:	fa5f f389 	uxtb.w	r3, r9
    33b6:	da28      	bge.n	340a <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    33b8:	f109 0010 	add.w	r0, r9, #16
    33bc:	f04f 0c01 	mov.w	ip, #1
    33c0:	fa0c f000 	lsl.w	r0, ip, r0
    33c4:	ea10 0f0b 	tst.w	r0, fp
    33c8:	d127      	bne.n	341a <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    33ca:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    33ce:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    33d0:	f107 0010 	add.w	r0, r7, #16
    33d4:	e9c7 3101 	strd	r3, r1, [r7, #4]
    33d8:	60fa      	str	r2, [r7, #12]
    33da:	f001 ffbf 	bl	535c <usb_dc_ep_check_cap>
    33de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	b9c8      	cbnz	r0, 341a <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    33e6:	7c3a      	ldrb	r2, [r7, #16]
    33e8:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    33ea:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    33ee:	bf18      	it	ne
    33f0:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    33f2:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    33f4:	bf18      	it	ne
    33f6:	b2db      	uxtbne	r3, r3
    33f8:	f04f 0201 	mov.w	r2, #1
    33fc:	bf14      	ite	ne
    33fe:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    3400:	fa02 f209 	lsleq.w	r2, r2, r9
    3404:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    3408:	e76d      	b.n	32e6 <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    340a:	2001      	movs	r0, #1
    340c:	fa00 f009 	lsl.w	r0, r0, r9
    3410:	ea10 0f0b 	tst.w	r0, fp
    3414:	d101      	bne.n	341a <usb_get_device_descriptor+0x172>
    3416:	4618      	mov	r0, r3
    3418:	e7d9      	b.n	33ce <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    341a:	f109 0901 	add.w	r9, r9, #1
    341e:	f1b9 0f10 	cmp.w	r9, #16
    3422:	d1b9      	bne.n	3398 <usb_get_device_descriptor+0xf0>
    3424:	e7b0      	b.n	3388 <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3426:	2200      	movs	r2, #0
    3428:	e7af      	b.n	338a <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    342a:	2e03      	cmp	r6, #3
    342c:	d12a      	bne.n	3484 <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    342e:	f7ff fef7 	bl	3220 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    3432:	4681      	mov	r9, r0
    3434:	b1a8      	cbz	r0, 3462 <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    3436:	f007 fd8d 	bl	af54 <strlen>
	if (!runtime_sn_len) {
    343a:	60f8      	str	r0, [r7, #12]
    343c:	b188      	cbz	r0, 3462 <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    343e:	4828      	ldr	r0, [pc, #160]	; (34e0 <usb_get_device_descriptor+0x238>)
    3440:	f007 fd88 	bl	af54 <strlen>
	if (runtime_sn_len != default_sn_len) {
    3444:	68fa      	ldr	r2, [r7, #12]
    3446:	4282      	cmp	r2, r0
    3448:	d017      	beq.n	347a <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    344a:	4b26      	ldr	r3, [pc, #152]	; (34e4 <usb_get_device_descriptor+0x23c>)
    344c:	627b      	str	r3, [r7, #36]	; 0x24
    344e:	2302      	movs	r3, #2
    3450:	623b      	str	r3, [r7, #32]
    3452:	481d      	ldr	r0, [pc, #116]	; (34c8 <usb_get_device_descriptor+0x220>)
    3454:	2300      	movs	r3, #0
    3456:	f107 0220 	add.w	r2, r7, #32
    345a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    345e:	f7ff f823 	bl	24a8 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    3462:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    3464:	f06f 0102 	mvn.w	r1, #2
    3468:	18e2      	adds	r2, r4, r3
    346a:	1b09      	subs	r1, r1, r4
    346c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    3470:	42d1      	cmn	r1, r2
    3472:	d50e      	bpl.n	3492 <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    3474:	3601      	adds	r6, #1
    3476:	b2f6      	uxtb	r6, r6
			break;
    3478:	e735      	b.n	32e6 <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    347a:	4649      	mov	r1, r9
    347c:	1ca0      	adds	r0, r4, #2
    347e:	f007 fd7c 	bl	af7a <memcpy>
			if (str_descr_idx) {
    3482:	e7ee      	b.n	3462 <usb_get_device_descriptor+0x1ba>
    3484:	2e00      	cmp	r6, #0
    3486:	d1ec      	bne.n	3462 <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    3488:	f1b8 0f00 	cmp.w	r8, #0
    348c:	d10a      	bne.n	34a4 <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    348e:	4b16      	ldr	r3, [pc, #88]	; (34e8 <usb_get_device_descriptor+0x240>)
    3490:	e767      	b.n	3362 <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    3492:	f04f 0000 	mov.w	r0, #0
    3496:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    349a:	f813 0901 	ldrb.w	r0, [r3], #-1
    349e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    34a2:	e7e5      	b.n	3470 <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    34a4:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    34a8:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    34ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    34b0:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    34b4:	f888 a004 	strb.w	sl, [r8, #4]
    34b8:	e7dc      	b.n	3474 <usb_get_device_descriptor+0x1cc>
    34ba:	bf00      	nop
    34bc:	20000228 	.word	0x20000228
    34c0:	200002ac 	.word	0x200002ac
    34c4:	0000c745 	.word	0x0000c745
    34c8:	0000c0f8 	.word	0x0000c0f8
    34cc:	0000c82b 	.word	0x0000c82b
    34d0:	200002ac 	.word	0x200002ac
    34d4:	200002d0 	.word	0x200002d0
    34d8:	0000c765 	.word	0x0000c765
    34dc:	0000c7a6 	.word	0x0000c7a6
    34e0:	0000c734 	.word	0x0000c734
    34e4:	0000c7c3 	.word	0x0000c7c3
    34e8:	0000c80e 	.word	0x0000c80e

000034ec <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    34ec:	b510      	push	{r4, lr}
    34ee:	4b09      	ldr	r3, [pc, #36]	; (3514 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    34f0:	2100      	movs	r1, #0
    34f2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    34f4:	781c      	ldrb	r4, [r3, #0]
    34f6:	4284      	cmp	r4, r0
    34f8:	d104      	bne.n	3504 <usb_ep_get_transfer+0x18>
    34fa:	685c      	ldr	r4, [r3, #4]
    34fc:	b114      	cbz	r4, 3504 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    34fe:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    3502:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3504:	3101      	adds	r1, #1
    3506:	2904      	cmp	r1, #4
    3508:	f103 0340 	add.w	r3, r3, #64	; 0x40
    350c:	d1f2      	bne.n	34f4 <usb_ep_get_transfer+0x8>
	return NULL;
    350e:	2000      	movs	r0, #0
    3510:	e7f7      	b.n	3502 <usb_ep_get_transfer+0x16>
    3512:	bf00      	nop
    3514:	20000b38 	.word	0x20000b38

00003518 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    3518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    351c:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    351e:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    3522:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    3526:	3310      	adds	r3, #16
{
    3528:	af00      	add	r7, sp, #0
    352a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    352c:	d111      	bne.n	3552 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    352e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    3530:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    3534:	f013 0602 	ands.w	r6, r3, #2
    3538:	d04e      	beq.n	35d8 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    353a:	bb0a      	cbnz	r2, 3580 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    353c:	f013 0304 	ands.w	r3, r3, #4
    3540:	d104      	bne.n	354c <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    3542:	461a      	mov	r2, r3
    3544:	4619      	mov	r1, r3
    3546:	4628      	mov	r0, r5
    3548:	f007 fca6 	bl	ae98 <usb_write>
			}
			trans->status = 0;
    354c:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    354e:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    3552:	f854 3c28 	ldr.w	r3, [r4, #-40]
    3556:	3310      	adds	r3, #16
    3558:	d00e      	beq.n	3578 <usb_transfer_work+0x60>
    355a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    355e:	b15e      	cbz	r6, 3578 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    3560:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    3564:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    3568:	f008 f916 	bl	b798 <k_is_in_isr>
    356c:	2800      	cmp	r0, #0
    356e:	d06f      	beq.n	3650 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3570:	483d      	ldr	r0, [pc, #244]	; (3668 <usb_transfer_work+0x150>)
    3572:	4621      	mov	r1, r4
    3574:	f008 f9e7 	bl	b946 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    3578:	370c      	adds	r7, #12
    357a:	46bd      	mov	sp, r7
    357c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3580:	f850 1c24 	ldr.w	r1, [r0, #-36]
    3584:	1d3b      	adds	r3, r7, #4
    3586:	4628      	mov	r0, r5
    3588:	f007 fc86 	bl	ae98 <usb_write>
		if (ret) {
    358c:	b198      	cbz	r0, 35b6 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    358e:	466e      	mov	r6, sp
    3590:	b088      	sub	sp, #32
    3592:	466a      	mov	r2, sp
    3594:	4b35      	ldr	r3, [pc, #212]	; (366c <usb_transfer_work+0x154>)
    3596:	61d5      	str	r5, [r2, #28]
    3598:	e9c2 3005 	strd	r3, r0, [r2, #20]
    359c:	2304      	movs	r3, #4
    359e:	f842 3f10 	str.w	r3, [r2, #16]!
    35a2:	4833      	ldr	r0, [pc, #204]	; (3670 <usb_transfer_work+0x158>)
    35a4:	2300      	movs	r3, #0
    35a6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    35aa:	f7fe ff7d 	bl	24a8 <z_impl_z_log_msg_static_create>
    35ae:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    35b0:	f06f 0315 	mvn.w	r3, #21
    35b4:	e7cb      	b.n	354e <usb_transfer_work+0x36>
		trans->buffer += bytes;
    35b6:	687a      	ldr	r2, [r7, #4]
    35b8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    35bc:	4413      	add	r3, r2
    35be:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    35c2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    35c6:	1a9b      	subs	r3, r3, r2
    35c8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    35cc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    35d0:	4413      	add	r3, r2
    35d2:	f844 3c1c 	str.w	r3, [r4, #-28]
    35d6:	e7bc      	b.n	3552 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    35d8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    35dc:	1d3b      	adds	r3, r7, #4
    35de:	4628      	mov	r0, r5
    35e0:	f002 f85c 	bl	569c <usb_dc_ep_read_wait>
		if (ret) {
    35e4:	b188      	cbz	r0, 360a <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    35e6:	46e8      	mov	r8, sp
    35e8:	b088      	sub	sp, #32
    35ea:	466a      	mov	r2, sp
    35ec:	4b1f      	ldr	r3, [pc, #124]	; (366c <usb_transfer_work+0x154>)
    35ee:	61d5      	str	r5, [r2, #28]
    35f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    35f4:	2304      	movs	r3, #4
    35f6:	f842 3f10 	str.w	r3, [r2, #16]!
    35fa:	481d      	ldr	r0, [pc, #116]	; (3670 <usb_transfer_work+0x158>)
    35fc:	4633      	mov	r3, r6
    35fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3602:	f7fe ff51 	bl	24a8 <z_impl_z_log_msg_static_create>
    3606:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    3608:	e7d2      	b.n	35b0 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    360a:	687e      	ldr	r6, [r7, #4]
    360c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3610:	4433      	add	r3, r6
    3612:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3616:	f854 3c20 	ldr.w	r3, [r4, #-32]
    361a:	1b9b      	subs	r3, r3, r6
    361c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    3620:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3624:	4433      	add	r3, r6
    3626:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    362a:	2e00      	cmp	r6, #0
    362c:	d08e      	beq.n	354c <usb_transfer_work+0x34>
    362e:	4628      	mov	r0, r5
    3630:	f002 f90c 	bl	584c <usb_dc_ep_mps>
    3634:	fbb6 f3f0 	udiv	r3, r6, r0
    3638:	fb03 6610 	mls	r6, r3, r0, r6
    363c:	2e00      	cmp	r6, #0
    363e:	d185      	bne.n	354c <usb_transfer_work+0x34>
    3640:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3644:	2b00      	cmp	r3, #0
    3646:	d081      	beq.n	354c <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    3648:	4628      	mov	r0, r5
    364a:	f002 f88d 	bl	5768 <usb_dc_ep_read_continue>
    364e:	e780      	b.n	3552 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    3650:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    3654:	f1a4 0010 	sub.w	r0, r4, #16
    3658:	f005 fcfc 	bl	9054 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    365c:	464a      	mov	r2, r9
    365e:	4641      	mov	r1, r8
    3660:	4628      	mov	r0, r5
    3662:	47b0      	blx	r6
    3664:	e788      	b.n	3578 <usb_transfer_work+0x60>
    3666:	bf00      	nop
    3668:	20000950 	.word	0x20000950
    366c:	0000c859 	.word	0x0000c859
    3670:	0000c118 	.word	0x0000c118

00003674 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    3674:	b510      	push	{r4, lr}
	__asm__ volatile(
    3676:	f04f 0320 	mov.w	r3, #32
    367a:	f3ef 8411 	mrs	r4, BASEPRI
    367e:	f383 8812 	msr	BASEPRI_MAX, r3
    3682:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    3686:	f7ff ff31 	bl	34ec <usb_ep_get_transfer>
	if (!trans) {
    368a:	b150      	cbz	r0, 36a2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    368c:	6843      	ldr	r3, [r0, #4]
    368e:	3310      	adds	r3, #16
    3690:	d107      	bne.n	36a2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    3692:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3696:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3698:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    369c:	4803      	ldr	r0, [pc, #12]	; (36ac <usb_cancel_transfer+0x38>)
    369e:	f008 f952 	bl	b946 <k_work_submit_to_queue>
	__asm__ volatile(
    36a2:	f384 8811 	msr	BASEPRI, r4
    36a6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    36aa:	bd10      	pop	{r4, pc}
    36ac:	20000950 	.word	0x20000950

000036b0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    36b0:	b570      	push	{r4, r5, r6, lr}
    36b2:	4c0f      	ldr	r4, [pc, #60]	; (36f0 <usb_cancel_transfers+0x40>)
    36b4:	2504      	movs	r5, #4
	__asm__ volatile(
    36b6:	f04f 0320 	mov.w	r3, #32
    36ba:	f3ef 8611 	mrs	r6, BASEPRI
    36be:	f383 8812 	msr	BASEPRI_MAX, r3
    36c2:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    36c6:	6863      	ldr	r3, [r4, #4]
    36c8:	3310      	adds	r3, #16
    36ca:	d107      	bne.n	36dc <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    36cc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    36d0:	4808      	ldr	r0, [pc, #32]	; (36f4 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    36d2:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    36d4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    36d8:	f008 f935 	bl	b946 <k_work_submit_to_queue>
	__asm__ volatile(
    36dc:	f386 8811 	msr	BASEPRI, r6
    36e0:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    36e4:	3d01      	subs	r5, #1
    36e6:	f104 0440 	add.w	r4, r4, #64	; 0x40
    36ea:	d1e4      	bne.n	36b6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    36ec:	bd70      	pop	{r4, r5, r6, pc}
    36ee:	bf00      	nop
    36f0:	20000b38 	.word	0x20000b38
    36f4:	20000950 	.word	0x20000950

000036f8 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	4c0a      	ldr	r4, [pc, #40]	; (3724 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    36fc:	4e0a      	ldr	r6, [pc, #40]	; (3728 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    36fe:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3700:	4631      	mov	r1, r6
    3702:	4620      	mov	r0, r4
    3704:	f008 f902 	bl	b90c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3708:	2201      	movs	r2, #1
    370a:	f1a4 0010 	sub.w	r0, r4, #16
    370e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3710:	3501      	adds	r5, #1
    3712:	f008 f8dd 	bl	b8d0 <z_impl_k_sem_init>
    3716:	2d04      	cmp	r5, #4
    3718:	f104 0440 	add.w	r4, r4, #64	; 0x40
    371c:	d1f0      	bne.n	3700 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    371e:	2000      	movs	r0, #0
    3720:	bd70      	pop	{r4, r5, r6, pc}
    3722:	bf00      	nop
    3724:	20000b64 	.word	0x20000b64
    3728:	00003519 	.word	0x00003519

0000372c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    372c:	4801      	ldr	r0, [pc, #4]	; (3734 <nrf_cc3xx_platform_abort_init+0x8>)
    372e:	f006 bc11 	b.w	9f54 <nrf_cc3xx_platform_set_abort>
    3732:	bf00      	nop
    3734:	0000c160 	.word	0x0000c160

00003738 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3738:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    373a:	4604      	mov	r4, r0
    373c:	b918      	cbnz	r0, 3746 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    373e:	4b0f      	ldr	r3, [pc, #60]	; (377c <mutex_free_platform+0x44>)
    3740:	480f      	ldr	r0, [pc, #60]	; (3780 <mutex_free_platform+0x48>)
    3742:	685b      	ldr	r3, [r3, #4]
    3744:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3746:	6861      	ldr	r1, [r4, #4]
    3748:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    374c:	d00f      	beq.n	376e <mutex_free_platform+0x36>
    374e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    3752:	d00c      	beq.n	376e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3754:	4d0b      	ldr	r5, [pc, #44]	; (3784 <mutex_free_platform+0x4c>)
    3756:	42a9      	cmp	r1, r5
    3758:	d009      	beq.n	376e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    375a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    375e:	d007      	beq.n	3770 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3760:	4809      	ldr	r0, [pc, #36]	; (3788 <mutex_free_platform+0x50>)
    3762:	4621      	mov	r1, r4
    3764:	f007 ffef 	bl	b746 <k_mem_slab_free>
        mutex->mutex = NULL;
    3768:	2300      	movs	r3, #0
    376a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    376c:	6065      	str	r5, [r4, #4]
}
    376e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3770:	6820      	ldr	r0, [r4, #0]
    3772:	2214      	movs	r2, #20
    3774:	f007 fc0c 	bl	af90 <memset>
    3778:	e7f8      	b.n	376c <mutex_free_platform+0x34>
    377a:	bf00      	nop
    377c:	200000dc 	.word	0x200000dc
    3780:	0000c883 	.word	0x0000c883
    3784:	a95c5f2c 	.word	0xa95c5f2c
    3788:	20001138 	.word	0x20001138

0000378c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    378c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    378e:	b320      	cbz	r0, 37da <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3790:	6843      	ldr	r3, [r0, #4]
    3792:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3796:	d110      	bne.n	37ba <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3798:	2201      	movs	r2, #1
    379a:	6803      	ldr	r3, [r0, #0]
    379c:	f3bf 8f5b 	dmb	ish
    37a0:	e853 1f00 	ldrex	r1, [r3]
    37a4:	2900      	cmp	r1, #0
    37a6:	d103      	bne.n	37b0 <mutex_lock_platform+0x24>
    37a8:	e843 2000 	strex	r0, r2, [r3]
    37ac:	2800      	cmp	r0, #0
    37ae:	d1f7      	bne.n	37a0 <mutex_lock_platform+0x14>
    37b0:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    37b4:	d10d      	bne.n	37d2 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    37b6:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    37b8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    37ba:	4a09      	ldr	r2, [pc, #36]	; (37e0 <mutex_lock_platform+0x54>)
    37bc:	4293      	cmp	r3, r2
    37be:	d00a      	beq.n	37d6 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    37c0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    37c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    37c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    37ca:	f005 fb59 	bl	8e80 <z_impl_k_mutex_lock>
        if (ret == 0) {
    37ce:	2800      	cmp	r0, #0
    37d0:	d0f1      	beq.n	37b6 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    37d2:	4804      	ldr	r0, [pc, #16]	; (37e4 <mutex_lock_platform+0x58>)
    37d4:	e7f0      	b.n	37b8 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    37d6:	4804      	ldr	r0, [pc, #16]	; (37e8 <mutex_lock_platform+0x5c>)
    37d8:	e7ee      	b.n	37b8 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    37da:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    37de:	e7eb      	b.n	37b8 <mutex_lock_platform+0x2c>
    37e0:	a95c5f2c 	.word	0xa95c5f2c
    37e4:	ffff8fe9 	.word	0xffff8fe9
    37e8:	ffff8fea 	.word	0xffff8fea

000037ec <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    37ec:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    37ee:	b1d8      	cbz	r0, 3828 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    37f0:	6843      	ldr	r3, [r0, #4]
    37f2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    37f6:	d110      	bne.n	381a <mutex_unlock_platform+0x2e>
    37f8:	2200      	movs	r2, #0
    37fa:	6803      	ldr	r3, [r0, #0]
    37fc:	f3bf 8f5b 	dmb	ish
    3800:	e853 1f00 	ldrex	r1, [r3]
    3804:	2901      	cmp	r1, #1
    3806:	d103      	bne.n	3810 <mutex_unlock_platform+0x24>
    3808:	e843 2000 	strex	r0, r2, [r3]
    380c:	2800      	cmp	r0, #0
    380e:	d1f7      	bne.n	3800 <mutex_unlock_platform+0x14>
    3810:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3814:	d10b      	bne.n	382e <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3816:	2000      	movs	r0, #0
    }
}
    3818:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    381a:	4a07      	ldr	r2, [pc, #28]	; (3838 <mutex_unlock_platform+0x4c>)
    381c:	4293      	cmp	r3, r2
    381e:	d008      	beq.n	3832 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3820:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3822:	f005 fba7 	bl	8f74 <z_impl_k_mutex_unlock>
    3826:	e7f6      	b.n	3816 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3828:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    382c:	e7f4      	b.n	3818 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    382e:	4803      	ldr	r0, [pc, #12]	; (383c <mutex_unlock_platform+0x50>)
    3830:	e7f2      	b.n	3818 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3832:	4803      	ldr	r0, [pc, #12]	; (3840 <mutex_unlock_platform+0x54>)
    3834:	e7f0      	b.n	3818 <mutex_unlock_platform+0x2c>
    3836:	bf00      	nop
    3838:	a95c5f2c 	.word	0xa95c5f2c
    383c:	ffff8fe9 	.word	0xffff8fe9
    3840:	ffff8fea 	.word	0xffff8fea

00003844 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3844:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3846:	4604      	mov	r4, r0
    3848:	b918      	cbnz	r0, 3852 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    384a:	4b1d      	ldr	r3, [pc, #116]	; (38c0 <mutex_init_platform+0x7c>)
    384c:	481d      	ldr	r0, [pc, #116]	; (38c4 <mutex_init_platform+0x80>)
    384e:	685b      	ldr	r3, [r3, #4]
    3850:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3852:	6863      	ldr	r3, [r4, #4]
    3854:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3858:	d02f      	beq.n	38ba <mutex_init_platform+0x76>
    385a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    385e:	d02c      	beq.n	38ba <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3860:	4a19      	ldr	r2, [pc, #100]	; (38c8 <mutex_init_platform+0x84>)
    3862:	4293      	cmp	r3, r2
    3864:	d119      	bne.n	389a <mutex_init_platform+0x56>
    3866:	6823      	ldr	r3, [r4, #0]
    3868:	bb03      	cbnz	r3, 38ac <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    386a:	4818      	ldr	r0, [pc, #96]	; (38cc <mutex_init_platform+0x88>)
    386c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3874:	4621      	mov	r1, r4
    3876:	f005 f9ff 	bl	8c78 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    387a:	b908      	cbnz	r0, 3880 <mutex_init_platform+0x3c>
    387c:	6823      	ldr	r3, [r4, #0]
    387e:	b91b      	cbnz	r3, 3888 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3880:	4b0f      	ldr	r3, [pc, #60]	; (38c0 <mutex_init_platform+0x7c>)
    3882:	4813      	ldr	r0, [pc, #76]	; (38d0 <mutex_init_platform+0x8c>)
    3884:	685b      	ldr	r3, [r3, #4]
    3886:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3888:	6820      	ldr	r0, [r4, #0]
    388a:	2214      	movs	r2, #20
    388c:	2100      	movs	r1, #0
    388e:	f007 fb7f 	bl	af90 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3892:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    3896:	6063      	str	r3, [r4, #4]
    3898:	e008      	b.n	38ac <mutex_init_platform+0x68>
    switch(flags){
    389a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    389e:	d80d      	bhi.n	38bc <mutex_init_platform+0x78>
    38a0:	2b3a      	cmp	r3, #58	; 0x3a
    38a2:	d003      	beq.n	38ac <mutex_init_platform+0x68>
    38a4:	f640 62ba 	movw	r2, #3770	; 0xeba
    38a8:	4293      	cmp	r3, r2
    38aa:	d1de      	bne.n	386a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    38ac:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    38ae:	f007 ff8f 	bl	b7d0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    38b2:	6863      	ldr	r3, [r4, #4]
    38b4:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    38b8:	6063      	str	r3, [r4, #4]
}
    38ba:	bd10      	pop	{r4, pc}
    switch(flags){
    38bc:	4a05      	ldr	r2, [pc, #20]	; (38d4 <mutex_init_platform+0x90>)
    38be:	e7f3      	b.n	38a8 <mutex_init_platform+0x64>
    38c0:	200000dc 	.word	0x200000dc
    38c4:	0000c883 	.word	0x0000c883
    38c8:	a95c5f2c 	.word	0xa95c5f2c
    38cc:	20001138 	.word	0x20001138
    38d0:	0000c8a9 	.word	0x0000c8a9
    38d4:	3a00003a 	.word	0x3a00003a

000038d8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    38d8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    38da:	4906      	ldr	r1, [pc, #24]	; (38f4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    38dc:	4806      	ldr	r0, [pc, #24]	; (38f8 <nrf_cc3xx_platform_mutex_init+0x20>)
    38de:	2340      	movs	r3, #64	; 0x40
    38e0:	2214      	movs	r2, #20
    38e2:	f007 ff22 	bl	b72a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    38e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    38ea:	4904      	ldr	r1, [pc, #16]	; (38fc <nrf_cc3xx_platform_mutex_init+0x24>)
    38ec:	4804      	ldr	r0, [pc, #16]	; (3900 <nrf_cc3xx_platform_mutex_init+0x28>)
    38ee:	f006 bba3 	b.w	a038 <nrf_cc3xx_platform_set_mutexes>
    38f2:	bf00      	nop
    38f4:	20000c38 	.word	0x20000c38
    38f8:	20001138 	.word	0x20001138
    38fc:	0000c168 	.word	0x0000c168
    3900:	0000c17c 	.word	0x0000c17c

00003904 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3904:	4901      	ldr	r1, [pc, #4]	; (390c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3906:	2210      	movs	r2, #16
	str	r2, [r1]
    3908:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    390a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    390c:	e000ed10 	.word	0xe000ed10

00003910 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3910:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3912:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3914:	f380 8811 	msr	BASEPRI, r0
	isb
    3918:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    391c:	f3bf 8f4f 	dsb	sy
    3920:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3922:	b662      	cpsie	i
	isb
    3924:	f3bf 8f6f 	isb	sy

	bx	lr
    3928:	4770      	bx	lr
    392a:	bf00      	nop

0000392c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    392c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    392e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3930:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3934:	f3bf 8f4f 	dsb	sy
    3938:	bf20      	wfe

	msr	BASEPRI, r0
    393a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    393e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3940:	4770      	bx	lr
    3942:	bf00      	nop

00003944 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3948:	4681      	mov	r9, r0
    394a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    394c:	460c      	mov	r4, r1
    394e:	2900      	cmp	r1, #0
    3950:	d04c      	beq.n	39ec <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3952:	466e      	mov	r6, sp
    3954:	b08a      	sub	sp, #40	; 0x28
    3956:	e9d1 1200 	ldrd	r1, r2, [r1]
    395a:	68a3      	ldr	r3, [r4, #8]
    395c:	466d      	mov	r5, sp
    395e:	4827      	ldr	r0, [pc, #156]	; (39fc <z_arm_fatal_error+0xb8>)
    3960:	46a8      	mov	r8, r5
    3962:	f04f 0a05 	mov.w	sl, #5
    3966:	e9c5 0105 	strd	r0, r1, [r5, #20]
    396a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    396e:	f848 af10 	str.w	sl, [r8, #16]!
    3972:	4823      	ldr	r0, [pc, #140]	; (3a00 <z_arm_fatal_error+0xbc>)
    3974:	4642      	mov	r2, r8
    3976:	2300      	movs	r3, #0
    3978:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    397c:	f7fe fd94 	bl	24a8 <z_impl_z_log_msg_static_create>
    3980:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3982:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3986:	6963      	ldr	r3, [r4, #20]
    3988:	46ad      	mov	sp, r5
    398a:	481e      	ldr	r0, [pc, #120]	; (3a04 <z_arm_fatal_error+0xc0>)
    398c:	f8c5 a010 	str.w	sl, [r5, #16]
    3990:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3994:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3998:	4819      	ldr	r0, [pc, #100]	; (3a00 <z_arm_fatal_error+0xbc>)
    399a:	2300      	movs	r3, #0
    399c:	4642      	mov	r2, r8
    399e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    39a2:	f7fe fd81 	bl	24a8 <z_impl_z_log_msg_static_create>
    39a6:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    39a8:	b088      	sub	sp, #32
    39aa:	69e3      	ldr	r3, [r4, #28]
    39ac:	466d      	mov	r5, sp
    39ae:	4a16      	ldr	r2, [pc, #88]	; (3a08 <z_arm_fatal_error+0xc4>)
    39b0:	46a8      	mov	r8, r5
    39b2:	f04f 0a03 	mov.w	sl, #3
    39b6:	e9c5 2305 	strd	r2, r3, [r5, #20]
    39ba:	f848 af10 	str.w	sl, [r8, #16]!
    39be:	4810      	ldr	r0, [pc, #64]	; (3a00 <z_arm_fatal_error+0xbc>)
    39c0:	2300      	movs	r3, #0
    39c2:	4642      	mov	r2, r8
    39c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    39c8:	f7fe fd6e 	bl	24a8 <z_impl_z_log_msg_static_create>
    39cc:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    39ce:	69a3      	ldr	r3, [r4, #24]
    39d0:	46ad      	mov	sp, r5
    39d2:	4a0e      	ldr	r2, [pc, #56]	; (3a0c <z_arm_fatal_error+0xc8>)
    39d4:	f8c5 a010 	str.w	sl, [r5, #16]
    39d8:	e9c5 2305 	strd	r2, r3, [r5, #20]
    39dc:	4808      	ldr	r0, [pc, #32]	; (3a00 <z_arm_fatal_error+0xbc>)
    39de:	2300      	movs	r3, #0
    39e0:	4642      	mov	r2, r8
    39e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    39e6:	f7fe fd5f 	bl	24a8 <z_impl_z_log_msg_static_create>
    39ea:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    39ec:	4621      	mov	r1, r4
    39ee:	4648      	mov	r0, r9
    39f0:	f004 ffc0 	bl	8974 <z_fatal_error>
}
    39f4:	46bd      	mov	sp, r7
    39f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39fa:	bf00      	nop
    39fc:	0000c8d6 	.word	0x0000c8d6
    3a00:	0000c0d8 	.word	0x0000c0d8
    3a04:	0000c905 	.word	0x0000c905
    3a08:	0000c934 	.word	0x0000c934
    3a0c:	0000c943 	.word	0x0000c943

00003a10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3a10:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3a12:	2800      	cmp	r0, #0
    3a14:	db07      	blt.n	3a26 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a16:	4a04      	ldr	r2, [pc, #16]	; (3a28 <arch_irq_enable+0x18>)
    3a18:	0941      	lsrs	r1, r0, #5
    3a1a:	2301      	movs	r3, #1
    3a1c:	f000 001f 	and.w	r0, r0, #31
    3a20:	4083      	lsls	r3, r0
    3a22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3a26:	4770      	bx	lr
    3a28:	e000e100 	.word	0xe000e100

00003a2c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3a2c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3a2e:	2800      	cmp	r0, #0
    3a30:	db0c      	blt.n	3a4c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a32:	0943      	lsrs	r3, r0, #5
    3a34:	4906      	ldr	r1, [pc, #24]	; (3a50 <arch_irq_disable+0x24>)
    3a36:	f000 001f 	and.w	r0, r0, #31
    3a3a:	3320      	adds	r3, #32
    3a3c:	2201      	movs	r2, #1
    3a3e:	4082      	lsls	r2, r0
    3a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a48:	f3bf 8f6f 	isb	sy
}
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	e000e100 	.word	0xe000e100

00003a54 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3a54:	4b05      	ldr	r3, [pc, #20]	; (3a6c <arch_irq_is_enabled+0x18>)
    3a56:	0942      	lsrs	r2, r0, #5
    3a58:	f000 001f 	and.w	r0, r0, #31
    3a5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a60:	2301      	movs	r3, #1
    3a62:	fa03 f000 	lsl.w	r0, r3, r0
}
    3a66:	4010      	ands	r0, r2
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	e000e100 	.word	0xe000e100

00003a70 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3a70:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3a72:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a74:	bfa8      	it	ge
    3a76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3a7a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a7e:	bfb8      	it	lt
    3a80:	4b06      	ldrlt	r3, [pc, #24]	; (3a9c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a82:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3a86:	bfac      	ite	ge
    3a88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a90:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a92:	bfb4      	ite	lt
    3a94:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a96:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3a9a:	4770      	bx	lr
    3a9c:	e000ed14 	.word	0xe000ed14

00003aa0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3aa0:	bf30      	wfi
    b z_SysNmiOnReset
    3aa2:	f7ff bffd 	b.w	3aa0 <z_SysNmiOnReset>
    3aa6:	bf00      	nop

00003aa8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3aa8:	4a0b      	ldr	r2, [pc, #44]	; (3ad8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3aaa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3aac:	4b0b      	ldr	r3, [pc, #44]	; (3adc <z_arm_prep_c+0x34>)
    3aae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3ab2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3ab4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ab8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3abc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3ac0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3ac8:	f005 f810 	bl	8aec <z_bss_zero>
	z_data_copy();
    3acc:	f005 ffc6 	bl	9a5c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3ad0:	f000 fbd6 	bl	4280 <z_arm_interrupt_init>
	z_cstart();
    3ad4:	f005 f84e 	bl	8b74 <z_cstart>
    3ad8:	00001000 	.word	0x00001000
    3adc:	e000ed00 	.word	0xe000ed00

00003ae0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3ae0:	4a09      	ldr	r2, [pc, #36]	; (3b08 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3ae2:	490a      	ldr	r1, [pc, #40]	; (3b0c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3ae4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3ae6:	6809      	ldr	r1, [r1, #0]
    3ae8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3aea:	4909      	ldr	r1, [pc, #36]	; (3b10 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3aec:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3aee:	684b      	ldr	r3, [r1, #4]
    3af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3af4:	604b      	str	r3, [r1, #4]
    3af6:	2300      	movs	r3, #0
    3af8:	f383 8811 	msr	BASEPRI, r3
    3afc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3b00:	6893      	ldr	r3, [r2, #8]
}
    3b02:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop
    3b08:	20001d5c 	.word	0x20001d5c
    3b0c:	0000c330 	.word	0x0000c330
    3b10:	e000ed00 	.word	0xe000ed00

00003b14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3b14:	4912      	ldr	r1, [pc, #72]	; (3b60 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3b16:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3b18:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3b1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3b1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3b22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3b26:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3b28:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3b2c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3b30:	4f0c      	ldr	r7, [pc, #48]	; (3b64 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3b32:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3b36:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3b38:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3b3a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3b3c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3b3e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3b40:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3b42:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3b46:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3b48:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3b4a:	f000 fc35 	bl	43b8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3b4e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3b52:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3b56:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3b5a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3b5e:	4770      	bx	lr
    ldr r1, =_kernel
    3b60:	20001d5c 	.word	0x20001d5c
    ldr v4, =_SCS_ICSR
    3b64:	e000ed04 	.word	0xe000ed04

00003b68 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3b68:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3b6c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3b6e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3b72:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3b76:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3b78:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3b7c:	2902      	cmp	r1, #2
    beq _oops
    3b7e:	d0ff      	beq.n	3b80 <_oops>

00003b80 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3b80:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3b82:	f007 f9d5 	bl	af30 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3b86:	bd01      	pop	{r0, pc}

00003b88 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3b88:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3b8c:	9b00      	ldr	r3, [sp, #0]
    3b8e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3b92:	490a      	ldr	r1, [pc, #40]	; (3bbc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3b9a:	9b02      	ldr	r3, [sp, #8]
    3b9c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3ba0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3ba8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3bac:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3bb0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3bb2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3bb4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3bb6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3bb8:	4770      	bx	lr
    3bba:	bf00      	nop
    3bbc:	0000a309 	.word	0x0000a309

00003bc0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3bc0:	4a09      	ldr	r2, [pc, #36]	; (3be8 <z_check_thread_stack_fail+0x28>)
{
    3bc2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3bc4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3bc6:	b170      	cbz	r0, 3be6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3bc8:	f113 0f16 	cmn.w	r3, #22
    3bcc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3bce:	d005      	beq.n	3bdc <z_check_thread_stack_fail+0x1c>
    3bd0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3bd4:	429a      	cmp	r2, r3
    3bd6:	d805      	bhi.n	3be4 <z_check_thread_stack_fail+0x24>
    3bd8:	4283      	cmp	r3, r0
    3bda:	d203      	bcs.n	3be4 <z_check_thread_stack_fail+0x24>
		return 0;
    3bdc:	4281      	cmp	r1, r0
    3bde:	bf28      	it	cs
    3be0:	2000      	movcs	r0, #0
    3be2:	4770      	bx	lr
    3be4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3be6:	4770      	bx	lr
    3be8:	20001d5c 	.word	0x20001d5c

00003bec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3bec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3bee:	4b09      	ldr	r3, [pc, #36]	; (3c14 <arch_switch_to_main_thread+0x28>)
{
    3bf0:	460d      	mov	r5, r1
    3bf2:	4614      	mov	r4, r2
	_current = main_thread;
    3bf4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3bf6:	f000 fbdf 	bl	43b8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3bfa:	4620      	mov	r0, r4
    3bfc:	f385 8809 	msr	PSP, r5
    3c00:	2100      	movs	r1, #0
    3c02:	b663      	cpsie	if
    3c04:	f381 8811 	msr	BASEPRI, r1
    3c08:	f3bf 8f6f 	isb	sy
    3c0c:	2200      	movs	r2, #0
    3c0e:	2300      	movs	r3, #0
    3c10:	f006 fb7a 	bl	a308 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3c14:	20001d5c 	.word	0x20001d5c

00003c18 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3c18:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3c1a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3c1c:	4a0b      	ldr	r2, [pc, #44]	; (3c4c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3c1e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3c20:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3c22:	bf1e      	ittt	ne
	movne	r1, #0
    3c24:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3c26:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3c28:	f007 fdc3 	blne	b7b2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3c2c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3c2e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3c32:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3c36:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3c3a:	4905      	ldr	r1, [pc, #20]	; (3c50 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3c3c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3c3e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3c40:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3c42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3c46:	4903      	ldr	r1, [pc, #12]	; (3c54 <_isr_wrapper+0x3c>)
	bx r1
    3c48:	4708      	bx	r1
    3c4a:	0000      	.short	0x0000
	ldr r2, =_kernel
    3c4c:	20001d5c 	.word	0x20001d5c
	ldr r1, =_sw_isr_table
    3c50:	0000bec0 	.word	0x0000bec0
	ldr r1, =z_arm_int_exit
    3c54:	00003c59 	.word	0x00003c59

00003c58 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3c58:	4b04      	ldr	r3, [pc, #16]	; (3c6c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3c5a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3c5c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3c5e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3c60:	d003      	beq.n	3c6a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3c62:	4903      	ldr	r1, [pc, #12]	; (3c70 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3c68:	600a      	str	r2, [r1, #0]

00003c6a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3c6a:	4770      	bx	lr
	ldr r3, =_kernel
    3c6c:	20001d5c 	.word	0x20001d5c
	ldr r1, =_SCS_ICSR
    3c70:	e000ed04 	.word	0xe000ed04

00003c74 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c78:	b086      	sub	sp, #24
    3c7a:	4606      	mov	r6, r0
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3c80:	4b47      	ldr	r3, [pc, #284]	; (3da0 <bus_fault.constprop.0+0x12c>)
    3c82:	617b      	str	r3, [r7, #20]
    3c84:	2402      	movs	r4, #2
    3c86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c8a:	4846      	ldr	r0, [pc, #280]	; (3da4 <bus_fault.constprop.0+0x130>)
    3c8c:	613c      	str	r4, [r7, #16]
    3c8e:	f107 0210 	add.w	r2, r7, #16
    3c92:	f007 f95c 	bl	af4e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c96:	4b44      	ldr	r3, [pc, #272]	; (3da8 <bus_fault.constprop.0+0x134>)
    3c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c9a:	04d9      	lsls	r1, r3, #19
    3c9c:	d56d      	bpl.n	3d7a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3c9e:	4b43      	ldr	r3, [pc, #268]	; (3dac <bus_fault.constprop.0+0x138>)
    3ca0:	4840      	ldr	r0, [pc, #256]	; (3da4 <bus_fault.constprop.0+0x130>)
    3ca2:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3ca6:	f107 0210 	add.w	r2, r7, #16
    3caa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3cae:	f007 f94e 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    3cb2:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3cb4:	4b3c      	ldr	r3, [pc, #240]	; (3da8 <bus_fault.constprop.0+0x134>)
    3cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cb8:	051a      	lsls	r2, r3, #20
    3cba:	d50b      	bpl.n	3cd4 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3cbc:	4b3c      	ldr	r3, [pc, #240]	; (3db0 <bus_fault.constprop.0+0x13c>)
    3cbe:	617b      	str	r3, [r7, #20]
    3cc0:	2302      	movs	r3, #2
    3cc2:	4838      	ldr	r0, [pc, #224]	; (3da4 <bus_fault.constprop.0+0x130>)
    3cc4:	613b      	str	r3, [r7, #16]
    3cc6:	f107 0210 	add.w	r2, r7, #16
    3cca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3cce:	f007 f93e 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3cd2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3cd4:	4c34      	ldr	r4, [pc, #208]	; (3da8 <bus_fault.constprop.0+0x134>)
    3cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cd8:	059b      	lsls	r3, r3, #22
    3cda:	d523      	bpl.n	3d24 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    3cdc:	46e8      	mov	r8, sp
    3cde:	4b35      	ldr	r3, [pc, #212]	; (3db4 <bus_fault.constprop.0+0x140>)
    3ce0:	617b      	str	r3, [r7, #20]
    3ce2:	2302      	movs	r3, #2
    3ce4:	482f      	ldr	r0, [pc, #188]	; (3da4 <bus_fault.constprop.0+0x130>)
    3ce6:	613b      	str	r3, [r7, #16]
    3ce8:	f107 0210 	add.w	r2, r7, #16
    3cec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3cf0:	f007 f92d 	bl	af4e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3cf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3cf8:	0410      	lsls	r0, r2, #16
    3cfa:	d512      	bpl.n	3d22 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3cfc:	b088      	sub	sp, #32
    3cfe:	466a      	mov	r2, sp
    3d00:	492d      	ldr	r1, [pc, #180]	; (3db8 <bus_fault.constprop.0+0x144>)
    3d02:	4828      	ldr	r0, [pc, #160]	; (3da4 <bus_fault.constprop.0+0x130>)
    3d04:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3d08:	2303      	movs	r3, #3
    3d0a:	f842 3f10 	str.w	r3, [r2, #16]!
    3d0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3d12:	f007 f91c 	bl	af4e <z_log_msg_static_create.constprop.0>
    3d16:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3d18:	b11e      	cbz	r6, 3d22 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3d1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3d20:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3d22:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3d24:	4b20      	ldr	r3, [pc, #128]	; (3da8 <bus_fault.constprop.0+0x134>)
    3d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d28:	0559      	lsls	r1, r3, #21
    3d2a:	d50b      	bpl.n	3d44 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    3d2c:	4b23      	ldr	r3, [pc, #140]	; (3dbc <bus_fault.constprop.0+0x148>)
    3d2e:	617b      	str	r3, [r7, #20]
    3d30:	2302      	movs	r3, #2
    3d32:	481c      	ldr	r0, [pc, #112]	; (3da4 <bus_fault.constprop.0+0x130>)
    3d34:	613b      	str	r3, [r7, #16]
    3d36:	f107 0210 	add.w	r2, r7, #16
    3d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d3e:	f007 f906 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3d42:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3d44:	4b18      	ldr	r3, [pc, #96]	; (3da8 <bus_fault.constprop.0+0x134>)
    3d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d48:	05d2      	lsls	r2, r2, #23
    3d4a:	d518      	bpl.n	3d7e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    3d4c:	4b1c      	ldr	r3, [pc, #112]	; (3dc0 <bus_fault.constprop.0+0x14c>)
    3d4e:	617b      	str	r3, [r7, #20]
    3d50:	2302      	movs	r3, #2
    3d52:	4814      	ldr	r0, [pc, #80]	; (3da4 <bus_fault.constprop.0+0x130>)
    3d54:	613b      	str	r3, [r7, #16]
    3d56:	f107 0210 	add.w	r2, r7, #16
    3d5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d5e:	f007 f8f6 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3d62:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3d64:	4a10      	ldr	r2, [pc, #64]	; (3da8 <bus_fault.constprop.0+0x134>)
    3d66:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3d68:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3d6c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    3d6e:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3d70:	2300      	movs	r3, #0
    3d72:	702b      	strb	r3, [r5, #0]
}
    3d74:	46bd      	mov	sp, r7
    3d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3d7a:	2016      	movs	r0, #22
    3d7c:	e79a      	b.n	3cb4 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d80:	049b      	lsls	r3, r3, #18
    3d82:	d5ef      	bpl.n	3d64 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3d84:	4b0f      	ldr	r3, [pc, #60]	; (3dc4 <bus_fault.constprop.0+0x150>)
    3d86:	617b      	str	r3, [r7, #20]
    3d88:	2302      	movs	r3, #2
    3d8a:	4806      	ldr	r0, [pc, #24]	; (3da4 <bus_fault.constprop.0+0x130>)
    3d8c:	613b      	str	r3, [r7, #16]
    3d8e:	f107 0210 	add.w	r2, r7, #16
    3d92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d96:	f007 f8da 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3d9a:	201c      	movs	r0, #28
    3d9c:	e7e2      	b.n	3d64 <bus_fault.constprop.0+0xf0>
    3d9e:	bf00      	nop
    3da0:	0000c971 	.word	0x0000c971
    3da4:	0000c0d8 	.word	0x0000c0d8
    3da8:	e000ed00 	.word	0xe000ed00
    3dac:	0000c987 	.word	0x0000c987
    3db0:	0000c998 	.word	0x0000c998
    3db4:	0000c9ab 	.word	0x0000c9ab
    3db8:	0000c9c4 	.word	0x0000c9c4
    3dbc:	0000c9d9 	.word	0x0000c9d9
    3dc0:	0000c9f4 	.word	0x0000c9f4
    3dc4:	0000ca0c 	.word	0x0000ca0c

00003dc8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3dc8:	b510      	push	{r4, lr}
    3dca:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3dcc:	4b36      	ldr	r3, [pc, #216]	; (3ea8 <usage_fault.constprop.0+0xe0>)
    3dce:	4837      	ldr	r0, [pc, #220]	; (3eac <usage_fault.constprop.0+0xe4>)
    3dd0:	9305      	str	r3, [sp, #20]
    3dd2:	aa04      	add	r2, sp, #16
    3dd4:	2402      	movs	r4, #2
    3dd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3dda:	9404      	str	r4, [sp, #16]
    3ddc:	f007 f8b7 	bl	af4e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3de0:	4b33      	ldr	r3, [pc, #204]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3de4:	019a      	lsls	r2, r3, #6
    3de6:	d55d      	bpl.n	3ea4 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    3de8:	4b32      	ldr	r3, [pc, #200]	; (3eb4 <usage_fault.constprop.0+0xec>)
    3dea:	4830      	ldr	r0, [pc, #192]	; (3eac <usage_fault.constprop.0+0xe4>)
    3dec:	aa04      	add	r2, sp, #16
    3dee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3df2:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3df6:	f007 f8aa 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3dfa:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3dfc:	4b2c      	ldr	r3, [pc, #176]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e00:	01db      	lsls	r3, r3, #7
    3e02:	d50a      	bpl.n	3e1a <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    3e04:	4b2c      	ldr	r3, [pc, #176]	; (3eb8 <usage_fault.constprop.0+0xf0>)
    3e06:	4829      	ldr	r0, [pc, #164]	; (3eac <usage_fault.constprop.0+0xe4>)
    3e08:	9305      	str	r3, [sp, #20]
    3e0a:	aa04      	add	r2, sp, #16
    3e0c:	2302      	movs	r3, #2
    3e0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e12:	9304      	str	r3, [sp, #16]
    3e14:	f007 f89b 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3e18:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3e1a:	4b25      	ldr	r3, [pc, #148]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e1e:	031c      	lsls	r4, r3, #12
    3e20:	d50a      	bpl.n	3e38 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3e22:	4b26      	ldr	r3, [pc, #152]	; (3ebc <usage_fault.constprop.0+0xf4>)
    3e24:	4821      	ldr	r0, [pc, #132]	; (3eac <usage_fault.constprop.0+0xe4>)
    3e26:	9305      	str	r3, [sp, #20]
    3e28:	aa04      	add	r2, sp, #16
    3e2a:	2302      	movs	r3, #2
    3e2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e30:	9304      	str	r3, [sp, #16]
    3e32:	f007 f88c 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3e36:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3e38:	4b1d      	ldr	r3, [pc, #116]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e3c:	0359      	lsls	r1, r3, #13
    3e3e:	d50a      	bpl.n	3e56 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3e40:	4b1f      	ldr	r3, [pc, #124]	; (3ec0 <usage_fault.constprop.0+0xf8>)
    3e42:	481a      	ldr	r0, [pc, #104]	; (3eac <usage_fault.constprop.0+0xe4>)
    3e44:	9305      	str	r3, [sp, #20]
    3e46:	aa04      	add	r2, sp, #16
    3e48:	2302      	movs	r3, #2
    3e4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e4e:	9304      	str	r3, [sp, #16]
    3e50:	f007 f87d 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3e54:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3e56:	4b16      	ldr	r3, [pc, #88]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e5a:	039a      	lsls	r2, r3, #14
    3e5c:	d50a      	bpl.n	3e74 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3e5e:	4b19      	ldr	r3, [pc, #100]	; (3ec4 <usage_fault.constprop.0+0xfc>)
    3e60:	4812      	ldr	r0, [pc, #72]	; (3eac <usage_fault.constprop.0+0xe4>)
    3e62:	9305      	str	r3, [sp, #20]
    3e64:	aa04      	add	r2, sp, #16
    3e66:	2302      	movs	r3, #2
    3e68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e6c:	9304      	str	r3, [sp, #16]
    3e6e:	f007 f86e 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3e72:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3e74:	4b0e      	ldr	r3, [pc, #56]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e78:	03db      	lsls	r3, r3, #15
    3e7a:	d50a      	bpl.n	3e92 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3e7c:	4b12      	ldr	r3, [pc, #72]	; (3ec8 <usage_fault.constprop.0+0x100>)
    3e7e:	480b      	ldr	r0, [pc, #44]	; (3eac <usage_fault.constprop.0+0xe4>)
    3e80:	9305      	str	r3, [sp, #20]
    3e82:	aa04      	add	r2, sp, #16
    3e84:	2302      	movs	r3, #2
    3e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e8a:	9304      	str	r3, [sp, #16]
    3e8c:	f007 f85f 	bl	af4e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3e90:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3e92:	4a07      	ldr	r2, [pc, #28]	; (3eb0 <usage_fault.constprop.0+0xe8>)
    3e94:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e96:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3e9a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3e9e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3ea0:	b006      	add	sp, #24
    3ea2:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3ea4:	201d      	movs	r0, #29
    3ea6:	e7a9      	b.n	3dfc <usage_fault.constprop.0+0x34>
    3ea8:	0000ca3b 	.word	0x0000ca3b
    3eac:	0000c0d8 	.word	0x0000c0d8
    3eb0:	e000ed00 	.word	0xe000ed00
    3eb4:	0000ca53 	.word	0x0000ca53
    3eb8:	0000ca66 	.word	0x0000ca66
    3ebc:	0000ca80 	.word	0x0000ca80
    3ec0:	0000ca9e 	.word	0x0000ca9e
    3ec4:	0000cac3 	.word	0x0000cac3
    3ec8:	0000cadd 	.word	0x0000cadd

00003ecc <mem_manage_fault>:
{
    3ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ed0:	b086      	sub	sp, #24
    3ed2:	4681      	mov	r9, r0
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	468a      	mov	sl, r1
    3ed8:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3eda:	4b51      	ldr	r3, [pc, #324]	; (4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>)
    3edc:	617b      	str	r3, [r7, #20]
    3ede:	2402      	movs	r4, #2
    3ee0:	4850      	ldr	r0, [pc, #320]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3ee2:	613c      	str	r4, [r7, #16]
    3ee4:	f107 0210 	add.w	r2, r7, #16
    3ee8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3eec:	f007 f82f 	bl	af4e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3ef0:	4b4d      	ldr	r3, [pc, #308]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ef4:	06de      	lsls	r6, r3, #27
    3ef6:	d545      	bpl.n	3f84 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3ef8:	4b4c      	ldr	r3, [pc, #304]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    3efa:	484a      	ldr	r0, [pc, #296]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3efc:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3f00:	f107 0210 	add.w	r2, r7, #16
    3f04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    3f08:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    3f0a:	f007 f820 	bl	af4e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3f0e:	4b46      	ldr	r3, [pc, #280]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f12:	071d      	lsls	r5, r3, #28
    3f14:	d50b      	bpl.n	3f2e <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    3f16:	4b46      	ldr	r3, [pc, #280]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3f18:	617b      	str	r3, [r7, #20]
    3f1a:	2302      	movs	r3, #2
    3f1c:	4841      	ldr	r0, [pc, #260]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3f1e:	613b      	str	r3, [r7, #16]
    3f20:	f107 0210 	add.w	r2, r7, #16
    3f24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3f28:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    3f2a:	f007 f810 	bl	af4e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3f2e:	4d3e      	ldr	r5, [pc, #248]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3f30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f32:	0798      	lsls	r0, r3, #30
    3f34:	d528      	bpl.n	3f88 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    3f36:	466c      	mov	r4, sp
    3f38:	4b3e      	ldr	r3, [pc, #248]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3f3a:	617b      	str	r3, [r7, #20]
    3f3c:	2302      	movs	r3, #2
    3f3e:	613b      	str	r3, [r7, #16]
    3f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f44:	4837      	ldr	r0, [pc, #220]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3f46:	f107 0210 	add.w	r2, r7, #16
    3f4a:	f007 f800 	bl	af4e <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3f4e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3f50:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f52:	0619      	lsls	r1, r3, #24
    3f54:	d560      	bpl.n	4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3f56:	b088      	sub	sp, #32
    3f58:	466a      	mov	r2, sp
    3f5a:	4b37      	ldr	r3, [pc, #220]	; (4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>)
    3f5c:	4831      	ldr	r0, [pc, #196]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3f5e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    3f62:	2303      	movs	r3, #3
    3f64:	f842 3f10 	str.w	r3, [r2, #16]!
    3f68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3f6c:	f006 ffef 	bl	af4e <z_log_msg_static_create.constprop.0>
    3f70:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    3f72:	f1ba 0f00 	cmp.w	sl, #0
    3f76:	d003      	beq.n	3f80 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3f78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3f7e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3f80:	2413      	movs	r4, #19
    3f82:	e003      	b.n	3f8c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3f84:	2410      	movs	r4, #16
    3f86:	e7c2      	b.n	3f0e <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    3f88:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3f8c:	4b26      	ldr	r3, [pc, #152]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f90:	07da      	lsls	r2, r3, #31
    3f92:	d50b      	bpl.n	3fac <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    3f94:	4b29      	ldr	r3, [pc, #164]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f96:	617b      	str	r3, [r7, #20]
    3f98:	2302      	movs	r3, #2
    3f9a:	4822      	ldr	r0, [pc, #136]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3f9c:	613b      	str	r3, [r7, #16]
    3f9e:	f107 0210 	add.w	r2, r7, #16
    3fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3fa6:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    3fa8:	f006 ffd1 	bl	af4e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3fac:	4b1e      	ldr	r3, [pc, #120]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fb0:	069b      	lsls	r3, r3, #26
    3fb2:	d50b      	bpl.n	3fcc <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    3fb4:	4b22      	ldr	r3, [pc, #136]	; (4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>)
    3fb6:	617b      	str	r3, [r7, #20]
    3fb8:	2302      	movs	r3, #2
    3fba:	481a      	ldr	r0, [pc, #104]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3fbc:	613b      	str	r3, [r7, #16]
    3fbe:	f107 0210 	add.w	r2, r7, #16
    3fc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3fc6:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    3fc8:	f006 ffc1 	bl	af4e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3fcc:	4b16      	ldr	r3, [pc, #88]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fd0:	06d5      	lsls	r5, r2, #27
    3fd2:	d402      	bmi.n	3fda <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3fd6:	0790      	lsls	r0, r2, #30
    3fd8:	d50a      	bpl.n	3ff0 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3fda:	685b      	ldr	r3, [r3, #4]
    3fdc:	0519      	lsls	r1, r3, #20
    3fde:	d507      	bpl.n	3ff0 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3fe0:	4649      	mov	r1, r9
    3fe2:	4630      	mov	r0, r6
    3fe4:	f7ff fdec 	bl	3bc0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3fe8:	b110      	cbz	r0, 3ff0 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3fea:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3fee:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3ff0:	4b0d      	ldr	r3, [pc, #52]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ff4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3ff6:	bf42      	ittt	mi
    3ff8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3ffa:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3ffe:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4002:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4006:	629a      	str	r2, [r3, #40]	; 0x28
}
    4008:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    400a:	2300      	movs	r3, #0
}
    400c:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    400e:	f888 3000 	strb.w	r3, [r8]
}
    4012:	46bd      	mov	sp, r7
    4014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    4018:	f06f 0615 	mvn.w	r6, #21
    401c:	e7b0      	b.n	3f80 <mem_manage_fault+0xb4>
    401e:	bf00      	nop
    4020:	0000cb08 	.word	0x0000cb08
    4024:	0000c0d8 	.word	0x0000c0d8
    4028:	e000ed00 	.word	0xe000ed00
    402c:	0000cb1e 	.word	0x0000cb1e
    4030:	0000c998 	.word	0x0000c998
    4034:	0000cb51 	.word	0x0000cb51
    4038:	0000cb69 	.word	0x0000cb69
    403c:	0000cb7f 	.word	0x0000cb7f
    4040:	0000ca0c 	.word	0x0000ca0c

00004044 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4048:	4b77      	ldr	r3, [pc, #476]	; (4228 <z_arm_fault+0x1e4>)
{
    404a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    404c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4050:	af00      	add	r7, sp, #0
    4052:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4054:	f3c8 0408 	ubfx	r4, r8, #0, #9
    4058:	2600      	movs	r6, #0
    405a:	f386 8811 	msr	BASEPRI, r6
    405e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4062:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4066:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    406a:	d10e      	bne.n	408a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    406c:	f002 030c 	and.w	r3, r2, #12
    4070:	2b08      	cmp	r3, #8
    4072:	d119      	bne.n	40a8 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4074:	4b6d      	ldr	r3, [pc, #436]	; (422c <z_arm_fault+0x1e8>)
    4076:	61fb      	str	r3, [r7, #28]
    4078:	2302      	movs	r3, #2
    407a:	486d      	ldr	r0, [pc, #436]	; (4230 <z_arm_fault+0x1ec>)
    407c:	61bb      	str	r3, [r7, #24]
    407e:	f107 0218 	add.w	r2, r7, #24
    4082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4086:	f006 ff62 	bl	af4e <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    408a:	2600      	movs	r6, #0
		return NULL;
    408c:	4635      	mov	r5, r6
	*recoverable = false;
    408e:	2300      	movs	r3, #0
    4090:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    4092:	1ee3      	subs	r3, r4, #3
    4094:	2b09      	cmp	r3, #9
    4096:	f200 80a6 	bhi.w	41e6 <z_arm_fault+0x1a2>
    409a:	e8df f003 	tbb	[pc, r3]
    409e:	990a      	.short	0x990a
    40a0:	a4a4959c 	.word	0xa4a4959c
    40a4:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    40a8:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    40aa:	bf4c      	ite	mi
    40ac:	460d      	movmi	r5, r1
			*nested_exc = true;
    40ae:	2601      	movpl	r6, #1
    40b0:	e7ed      	b.n	408e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    40b2:	46e9      	mov	r9, sp
    40b4:	4b5f      	ldr	r3, [pc, #380]	; (4234 <z_arm_fault+0x1f0>)
    40b6:	61fb      	str	r3, [r7, #28]
    40b8:	f04f 0802 	mov.w	r8, #2
    40bc:	f107 0218 	add.w	r2, r7, #24
    40c0:	485b      	ldr	r0, [pc, #364]	; (4230 <z_arm_fault+0x1ec>)
    40c2:	f8c7 8018 	str.w	r8, [r7, #24]
    40c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40ca:	f006 ff40 	bl	af4e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    40ce:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    40d0:	4c55      	ldr	r4, [pc, #340]	; (4228 <z_arm_fault+0x1e4>)
	*recoverable = false;
    40d2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    40d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    40d6:	079a      	lsls	r2, r3, #30
    40d8:	d50b      	bpl.n	40f2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    40da:	4b57      	ldr	r3, [pc, #348]	; (4238 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    40dc:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    40e0:	4853      	ldr	r0, [pc, #332]	; (4230 <z_arm_fault+0x1ec>)
    40e2:	f107 0218 	add.w	r2, r7, #24
    40e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40ea:	f006 ff30 	bl	af4e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    40ee:	2400      	movs	r4, #0
    40f0:	e041      	b.n	4176 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    40f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    40f4:	2b00      	cmp	r3, #0
    40f6:	da01      	bge.n	40fc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    40f8:	4b50      	ldr	r3, [pc, #320]	; (423c <z_arm_fault+0x1f8>)
    40fa:	e7ef      	b.n	40dc <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    40fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    40fe:	005b      	lsls	r3, r3, #1
    4100:	d5f5      	bpl.n	40ee <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    4102:	4b4f      	ldr	r3, [pc, #316]	; (4240 <z_arm_fault+0x1fc>)
    4104:	484a      	ldr	r0, [pc, #296]	; (4230 <z_arm_fault+0x1ec>)
    4106:	e9c7 8306 	strd	r8, r3, [r7, #24]
    410a:	f107 0218 	add.w	r2, r7, #24
    410e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4112:	f006 ff1c 	bl	af4e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4116:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4118:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    411e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4120:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4124:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4128:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    412a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    412e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4132:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4138:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    413c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4140:	429a      	cmp	r2, r3
    4142:	d008      	beq.n	4156 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4146:	b2db      	uxtb	r3, r3
    4148:	b38b      	cbz	r3, 41ae <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    414a:	1dfa      	adds	r2, r7, #7
    414c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    414e:	4628      	mov	r0, r5
    4150:	f7ff febc 	bl	3ecc <mem_manage_fault>
    4154:	e03a      	b.n	41cc <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4156:	b088      	sub	sp, #32
    4158:	682b      	ldr	r3, [r5, #0]
    415a:	466a      	mov	r2, sp
    415c:	4939      	ldr	r1, [pc, #228]	; (4244 <z_arm_fault+0x200>)
    415e:	4834      	ldr	r0, [pc, #208]	; (4230 <z_arm_fault+0x1ec>)
    4160:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4164:	2303      	movs	r3, #3
    4166:	f842 3f10 	str.w	r3, [r2, #16]!
    416a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    416e:	f006 feee 	bl	af4e <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    4172:	682c      	ldr	r4, [r5, #0]
    4174:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4176:	79fb      	ldrb	r3, [r7, #7]
    4178:	b9ab      	cbnz	r3, 41a6 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    417a:	2220      	movs	r2, #32
    417c:	4629      	mov	r1, r5
    417e:	f107 0008 	add.w	r0, r7, #8
    4182:	f006 fefa 	bl	af7a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4188:	2e00      	cmp	r6, #0
    418a:	d047      	beq.n	421c <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    418c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4190:	b922      	cbnz	r2, 419c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4192:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4196:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    419a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    419c:	f107 0108 	add.w	r1, r7, #8
    41a0:	4620      	mov	r0, r4
    41a2:	f7ff fbcf 	bl	3944 <z_arm_fatal_error>
}
    41a6:	372c      	adds	r7, #44	; 0x2c
    41a8:	46bd      	mov	sp, r7
    41aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    41ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    41b0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    41b4:	d004      	beq.n	41c0 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    41b6:	1df9      	adds	r1, r7, #7
    41b8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    41ba:	f7ff fd5b 	bl	3c74 <bus_fault.constprop.0>
    41be:	e005      	b.n	41cc <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    41c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    41c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    41c6:	d392      	bcc.n	40ee <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    41c8:	f7ff fdfe 	bl	3dc8 <usage_fault.constprop.0>
    41cc:	4604      	mov	r4, r0
    41ce:	e7d2      	b.n	4176 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    41d0:	1dfa      	adds	r2, r7, #7
    41d2:	2100      	movs	r1, #0
    41d4:	e7bb      	b.n	414e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    41d6:	1df9      	adds	r1, r7, #7
    41d8:	2000      	movs	r0, #0
    41da:	e7ee      	b.n	41ba <z_arm_fault+0x176>
	PR_FAULT_INFO(
    41dc:	4b1a      	ldr	r3, [pc, #104]	; (4248 <z_arm_fault+0x204>)
    41de:	61fb      	str	r3, [r7, #28]
    41e0:	2302      	movs	r3, #2
    41e2:	61bb      	str	r3, [r7, #24]
    41e4:	e77c      	b.n	40e0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    41e6:	4a19      	ldr	r2, [pc, #100]	; (424c <z_arm_fault+0x208>)
    41e8:	4b19      	ldr	r3, [pc, #100]	; (4250 <z_arm_fault+0x20c>)
    41ea:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    41ee:	46e8      	mov	r8, sp
    41f0:	b08a      	sub	sp, #40	; 0x28
    41f2:	bf18      	it	ne
    41f4:	4613      	movne	r3, r2
    41f6:	466a      	mov	r2, sp
    41f8:	4916      	ldr	r1, [pc, #88]	; (4254 <z_arm_fault+0x210>)
    41fa:	480d      	ldr	r0, [pc, #52]	; (4230 <z_arm_fault+0x1ec>)
    41fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4200:	f44f 7300 	mov.w	r3, #512	; 0x200
    4204:	8413      	strh	r3, [r2, #32]
    4206:	3c10      	subs	r4, #16
    4208:	4b13      	ldr	r3, [pc, #76]	; (4258 <z_arm_fault+0x214>)
    420a:	61d4      	str	r4, [r2, #28]
    420c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    4210:	f842 3f10 	str.w	r3, [r2, #16]!
    4214:	f006 fe9b 	bl	af4e <z_log_msg_static_create.constprop.0>
    4218:	46c5      	mov	sp, r8
}
    421a:	e768      	b.n	40ee <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    421c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4220:	f023 0301 	bic.w	r3, r3, #1
    4224:	e7b9      	b.n	419a <z_arm_fault+0x156>
    4226:	bf00      	nop
    4228:	e000ed00 	.word	0xe000ed00
    422c:	0000cbcc 	.word	0x0000cbcc
    4230:	0000c0d8 	.word	0x0000c0d8
    4234:	0000cbf7 	.word	0x0000cbf7
    4238:	0000cc0e 	.word	0x0000cc0e
    423c:	0000cc2f 	.word	0x0000cc2f
    4240:	0000cc3d 	.word	0x0000cc3d
    4244:	0000cc5c 	.word	0x0000cc5c
    4248:	0000cc78 	.word	0x0000cc78
    424c:	0000cbb3 	.word	0x0000cbb3
    4250:	0000cb9e 	.word	0x0000cb9e
    4254:	0000cc9c 	.word	0x0000cc9c
    4258:	01000004 	.word	0x01000004

0000425c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    425c:	4a02      	ldr	r2, [pc, #8]	; (4268 <z_arm_fault_init+0xc>)
    425e:	6953      	ldr	r3, [r2, #20]
    4260:	f043 0310 	orr.w	r3, r3, #16
    4264:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4266:	4770      	bx	lr
    4268:	e000ed00 	.word	0xe000ed00

0000426c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    426c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4270:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4274:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4276:	4672      	mov	r2, lr
	bl z_arm_fault
    4278:	f7ff fee4 	bl	4044 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    427c:	bd01      	pop	{r0, pc}
    427e:	bf00      	nop

00004280 <z_arm_interrupt_init>:
    4280:	4804      	ldr	r0, [pc, #16]	; (4294 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4282:	2300      	movs	r3, #0
    4284:	2120      	movs	r1, #32
    4286:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4288:	3301      	adds	r3, #1
    428a:	2b30      	cmp	r3, #48	; 0x30
    428c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4290:	d1f9      	bne.n	4286 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4292:	4770      	bx	lr
    4294:	e000e100 	.word	0xe000e100

00004298 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4298:	2000      	movs	r0, #0
    msr CONTROL, r0
    429a:	f380 8814 	msr	CONTROL, r0
    isb
    429e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    42a2:	f7fd fe91 	bl	1fc8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    42a6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    42a8:	490d      	ldr	r1, [pc, #52]	; (42e0 <__start+0x48>)
    str r0, [r1]
    42aa:	6008      	str	r0, [r1, #0]
    dsb
    42ac:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    42b0:	480c      	ldr	r0, [pc, #48]	; (42e4 <__start+0x4c>)
    msr msp, r0
    42b2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    42b6:	f000 f82b 	bl	4310 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    42ba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    42bc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    42c0:	4809      	ldr	r0, [pc, #36]	; (42e8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    42c2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    42c6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    42c8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    42cc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    42d0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    42d2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    42d4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    42d8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    42dc:	f7ff fbe4 	bl	3aa8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    42e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    42e4:	20003500 	.word	0x20003500
    ldr r0, =z_interrupt_stacks
    42e8:	20002740 	.word	0x20002740

000042ec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    42ec:	4907      	ldr	r1, [pc, #28]	; (430c <z_arm_clear_arm_mpu_config+0x20>)
    42ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    42f2:	2300      	movs	r3, #0
	int num_regions =
    42f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    42f8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    42fa:	4293      	cmp	r3, r2
    42fc:	db00      	blt.n	4300 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    42fe:	4770      	bx	lr
  MPU->RNR = rnr;
    4300:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4304:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4308:	3301      	adds	r3, #1
    430a:	e7f6      	b.n	42fa <z_arm_clear_arm_mpu_config+0xe>
    430c:	e000ed00 	.word	0xe000ed00

00004310 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4310:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4312:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4314:	2300      	movs	r3, #0
    4316:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    431a:	f7ff ffe7 	bl	42ec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    431e:	4b14      	ldr	r3, [pc, #80]	; (4370 <z_arm_init_arch_hw_at_boot+0x60>)
    4320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    432c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    433c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4340:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4344:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4348:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    434c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4350:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4354:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4358:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    435c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4360:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4364:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4366:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    436a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    436e:	bd08      	pop	{r3, pc}
    4370:	e000e100 	.word	0xe000e100

00004374 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4374:	4b08      	ldr	r3, [pc, #32]	; (4398 <z_impl_k_thread_abort+0x24>)
    4376:	689b      	ldr	r3, [r3, #8]
    4378:	4283      	cmp	r3, r0
    437a:	d10b      	bne.n	4394 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    437c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4380:	b143      	cbz	r3, 4394 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4382:	4b06      	ldr	r3, [pc, #24]	; (439c <z_impl_k_thread_abort+0x28>)
    4384:	685a      	ldr	r2, [r3, #4]
    4386:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    438a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    438e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4392:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4394:	f005 baf0 	b.w	9978 <z_thread_abort>
    4398:	20001d5c 	.word	0x20001d5c
    439c:	e000ed00 	.word	0xe000ed00

000043a0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    43a0:	4b02      	ldr	r3, [pc, #8]	; (43ac <z_arm_configure_static_mpu_regions+0xc>)
    43a2:	4a03      	ldr	r2, [pc, #12]	; (43b0 <z_arm_configure_static_mpu_regions+0x10>)
    43a4:	4803      	ldr	r0, [pc, #12]	; (43b4 <z_arm_configure_static_mpu_regions+0x14>)
    43a6:	2101      	movs	r1, #1
    43a8:	f000 b892 	b.w	44d0 <arm_core_mpu_configure_static_mpu_regions>
    43ac:	20040000 	.word	0x20040000
    43b0:	20000000 	.word	0x20000000
    43b4:	0000c18c 	.word	0x0000c18c

000043b8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    43b8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    43ba:	4b05      	ldr	r3, [pc, #20]	; (43d0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    43bc:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    43be:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    43c0:	4a04      	ldr	r2, [pc, #16]	; (43d4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    43c2:	2140      	movs	r1, #64	; 0x40
    43c4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    43c8:	4618      	mov	r0, r3
    43ca:	2101      	movs	r1, #1
    43cc:	f000 b88a 	b.w	44e4 <arm_core_mpu_configure_dynamic_mpu_regions>
    43d0:	20001154 	.word	0x20001154
    43d4:	150b0000 	.word	0x150b0000

000043d8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    43d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    43dc:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 4494 <mpu_configure_regions+0xbc>
    43e0:	469c      	mov	ip, r3
    43e2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    43e4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    43e6:	2300      	movs	r3, #0
    43e8:	428b      	cmp	r3, r1
    43ea:	da1a      	bge.n	4422 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    43ec:	6844      	ldr	r4, [r0, #4]
    43ee:	2c00      	cmp	r4, #0
    43f0:	d04d      	beq.n	448e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    43f2:	f1bc 0f00 	cmp.w	ip, #0
    43f6:	d01d      	beq.n	4434 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    43f8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    43fa:	4234      	tst	r4, r6
    43fc:	d015      	beq.n	442a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    43fe:	466c      	mov	r4, sp
    4400:	b088      	sub	sp, #32
    4402:	466a      	mov	r2, sp
    4404:	4924      	ldr	r1, [pc, #144]	; (4498 <mpu_configure_regions+0xc0>)
    4406:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    440a:	2303      	movs	r3, #3
    440c:	f842 3f10 	str.w	r3, [r2, #16]!
    4410:	4822      	ldr	r0, [pc, #136]	; (449c <mpu_configure_regions+0xc4>)
    4412:	2300      	movs	r3, #0
    4414:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4418:	f7fe f846 	bl	24a8 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    441c:	f06f 0515 	mvn.w	r5, #21
    4420:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4422:	4628      	mov	r0, r5
    4424:	46bd      	mov	sp, r7
    4426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    442a:	2c1f      	cmp	r4, #31
    442c:	d9e7      	bls.n	43fe <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    442e:	6802      	ldr	r2, [r0, #0]
		&&
    4430:	4216      	tst	r6, r2
    4432:	d1e4      	bne.n	43fe <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4434:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4436:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4438:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    443a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    443e:	d914      	bls.n	446a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    4440:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4444:	d813      	bhi.n	446e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4446:	3c01      	subs	r4, #1
    4448:	fab4 f484 	clz	r4, r4
    444c:	f1c4 041f 	rsb	r4, r4, #31
    4450:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4452:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4456:	ea46 0604 	orr.w	r6, r6, r4
    445a:	d90a      	bls.n	4472 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    445c:	466c      	mov	r4, sp
    445e:	b088      	sub	sp, #32
    4460:	466a      	mov	r2, sp
    4462:	4b0f      	ldr	r3, [pc, #60]	; (44a0 <mpu_configure_regions+0xc8>)
    4464:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4468:	e7cf      	b.n	440a <mpu_configure_regions+0x32>
		return REGION_32B;
    446a:	2408      	movs	r4, #8
    446c:	e7f1      	b.n	4452 <mpu_configure_regions+0x7a>
		return REGION_4G;
    446e:	243e      	movs	r4, #62	; 0x3e
    4470:	e7ef      	b.n	4452 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4472:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4476:	432a      	orrs	r2, r5
    4478:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    447c:	f046 0601 	orr.w	r6, r6, #1
    4480:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4484:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    4488:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    448a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    448e:	3301      	adds	r3, #1
    4490:	300c      	adds	r0, #12
    4492:	e7a9      	b.n	43e8 <mpu_configure_regions+0x10>
    4494:	e000ed00 	.word	0xe000ed00
    4498:	0000ccb3 	.word	0x0000ccb3
    449c:	0000c0d0 	.word	0x0000c0d0
    44a0:	0000ccd6 	.word	0x0000ccd6

000044a4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    44a4:	4b04      	ldr	r3, [pc, #16]	; (44b8 <arm_core_mpu_enable+0x14>)
    44a6:	2205      	movs	r2, #5
    44a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    44ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44b0:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    44b4:	4770      	bx	lr
    44b6:	bf00      	nop
    44b8:	e000ed00 	.word	0xe000ed00

000044bc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    44bc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    44c0:	4b02      	ldr	r3, [pc, #8]	; (44cc <arm_core_mpu_disable+0x10>)
    44c2:	2200      	movs	r2, #0
    44c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    44c8:	4770      	bx	lr
    44ca:	bf00      	nop
    44cc:	e000ed00 	.word	0xe000ed00

000044d0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    44d0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    44d2:	4c03      	ldr	r4, [pc, #12]	; (44e0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    44d4:	2301      	movs	r3, #1
    44d6:	7822      	ldrb	r2, [r4, #0]
    44d8:	f7ff ff7e 	bl	43d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    44dc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    44de:	bd10      	pop	{r4, pc}
    44e0:	20001f87 	.word	0x20001f87

000044e4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    44e4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    44e6:	4a09      	ldr	r2, [pc, #36]	; (450c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    44e8:	2300      	movs	r3, #0
    44ea:	7812      	ldrb	r2, [r2, #0]
    44ec:	f7ff ff74 	bl	43d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    44f0:	f110 0f16 	cmn.w	r0, #22
    44f4:	d003      	beq.n	44fe <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    44f6:	4b06      	ldr	r3, [pc, #24]	; (4510 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    44f8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    44fa:	2807      	cmp	r0, #7
    44fc:	dd00      	ble.n	4500 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    44fe:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4500:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4504:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4508:	3001      	adds	r0, #1
    450a:	e7f6      	b.n	44fa <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    450c:	20001f87 	.word	0x20001f87
    4510:	e000ed00 	.word	0xe000ed00

00004514 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4514:	4914      	ldr	r1, [pc, #80]	; (4568 <z_arm_mpu_init+0x54>)
    4516:	6808      	ldr	r0, [r1, #0]
    4518:	2808      	cmp	r0, #8
{
    451a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    451c:	d821      	bhi.n	4562 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    451e:	f7ff ffcd 	bl	44bc <arm_core_mpu_disable>
    4522:	4c12      	ldr	r4, [pc, #72]	; (456c <z_arm_mpu_init+0x58>)
    4524:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4526:	2200      	movs	r2, #0
    4528:	4290      	cmp	r0, r2
    452a:	f101 010c 	add.w	r1, r1, #12
    452e:	d105      	bne.n	453c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4530:	4b0f      	ldr	r3, [pc, #60]	; (4570 <z_arm_mpu_init+0x5c>)
    4532:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4534:	f7ff ffb6 	bl	44a4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4538:	2000      	movs	r0, #0
}
    453a:	bd10      	pop	{r4, pc}
    453c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4540:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4544:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4548:	4313      	orrs	r3, r2
    454a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    454e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4552:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4556:	f043 0301 	orr.w	r3, r3, #1
    455a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    455e:	3201      	adds	r2, #1
    4560:	e7e2      	b.n	4528 <z_arm_mpu_init+0x14>
		return -1;
    4562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4566:	e7e8      	b.n	453a <z_arm_mpu_init+0x26>
    4568:	0000c198 	.word	0x0000c198
    456c:	e000ed00 	.word	0xe000ed00
    4570:	20001f87 	.word	0x20001f87

00004574 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4574:	f04f 0320 	mov.w	r3, #32
    4578:	f3ef 8211 	mrs	r2, BASEPRI
    457c:	f383 8812 	msr	BASEPRI_MAX, r3
    4580:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4584:	4906      	ldr	r1, [pc, #24]	; (45a0 <nordicsemi_nrf52_init+0x2c>)
    4586:	2301      	movs	r3, #1
    4588:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    458c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4590:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4594:	f382 8811 	msr	BASEPRI, r2
    4598:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    459c:	2000      	movs	r0, #0
    459e:	4770      	bx	lr
    45a0:	4001e000 	.word	0x4001e000

000045a4 <sys_arch_reboot>:
    *p_gpregret = val;
    45a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45a8:	b2c0      	uxtb	r0, r0
    45aa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    45ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    45b2:	4905      	ldr	r1, [pc, #20]	; (45c8 <sys_arch_reboot+0x24>)
    45b4:	4b05      	ldr	r3, [pc, #20]	; (45cc <sys_arch_reboot+0x28>)
    45b6:	68ca      	ldr	r2, [r1, #12]
    45b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    45bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    45be:	60cb      	str	r3, [r1, #12]
    45c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    45c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    45c6:	e7fd      	b.n	45c4 <sys_arch_reboot+0x20>
    45c8:	e000ed00 	.word	0xe000ed00
    45cc:	05fa0004 	.word	0x05fa0004

000045d0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    45d0:	b120      	cbz	r0, 45dc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    45d2:	4b03      	ldr	r3, [pc, #12]	; (45e0 <arch_busy_wait+0x10>)
    45d4:	0180      	lsls	r0, r0, #6
    45d6:	f043 0301 	orr.w	r3, r3, #1
    45da:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    45dc:	4770      	bx	lr
    45de:	bf00      	nop
    45e0:	0000c130 	.word	0x0000c130

000045e4 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    45e4:	b580      	push	{r7, lr}
    45e6:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    45e8:	b088      	sub	sp, #32
    45ea:	466a      	mov	r2, sp
    45ec:	4b06      	ldr	r3, [pc, #24]	; (4608 <hid_status_cb.part.0+0x24>)
    45ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
    45f2:	2303      	movs	r3, #3
    45f4:	f842 3f10 	str.w	r3, [r2, #16]!
    45f8:	4804      	ldr	r0, [pc, #16]	; (460c <hid_status_cb.part.0+0x28>)
    45fa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    45fe:	f006 fce6 	bl	afce <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    4602:	46bd      	mov	sp, r7
    4604:	bd80      	pop	{r7, pc}
    4606:	bf00      	nop
    4608:	0000cd0f 	.word	0x0000cd0f
    460c:	0000c108 	.word	0x0000c108

00004610 <hid_custom_handle_req>:
	return -ENOTSUP;
}

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    4610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    4614:	f990 3000 	ldrsb.w	r3, [r0]
    4618:	2b00      	cmp	r3, #0
{
    461a:	af00      	add	r7, sp, #0
    461c:	4604      	mov	r4, r0
    461e:	460d      	mov	r5, r1
    4620:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
    4622:	db04      	blt.n	462e <hid_custom_handle_req+0x1e>

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
		if (common == NULL) {
			LOG_WRN("Device data not found for interface %u",
				iface_num);
			return -EINVAL;
    4624:	f06f 0015 	mvn.w	r0, #21

		return 0;
	}

	return -EINVAL;
}
    4628:	46bd      	mov	sp, r7
    462a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    462e:	8803      	ldrh	r3, [r0, #0]
    4630:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    4634:	b29b      	uxth	r3, r3
    4636:	f240 6201 	movw	r2, #1537	; 0x601
    463a:	4293      	cmp	r3, r2
    463c:	d1f2      	bne.n	4624 <hid_custom_handle_req+0x14>
		uint8_t iface_num = (uint8_t)setup->wIndex;
    463e:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    4642:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    4646:	481b      	ldr	r0, [pc, #108]	; (46b4 <hid_custom_handle_req+0xa4>)
    4648:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    464a:	ea4f 2818 	mov.w	r8, r8, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    464e:	f006 fc47 	bl	aee0 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    4652:	b978      	cbnz	r0, 4674 <hid_custom_handle_req+0x64>
			LOG_WRN("Device data not found for interface %u",
    4654:	466c      	mov	r4, sp
    4656:	b088      	sub	sp, #32
    4658:	466a      	mov	r2, sp
    465a:	4b17      	ldr	r3, [pc, #92]	; (46b8 <hid_custom_handle_req+0xa8>)
    465c:	4817      	ldr	r0, [pc, #92]	; (46bc <hid_custom_handle_req+0xac>)
    465e:	e9c2 3905 	strd	r3, r9, [r2, #20]
    4662:	2303      	movs	r3, #3
    4664:	f842 3f10 	str.w	r3, [r2, #16]!
    4668:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    466c:	f006 fcaf 	bl	afce <z_log_msg_static_create.constprop.0>
    4670:	46a5      	mov	sp, r4
			return -EINVAL;
    4672:	e7d7      	b.n	4624 <hid_custom_handle_req+0x14>
		switch (value) {
    4674:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
    4678:	d005      	beq.n	4686 <hid_custom_handle_req+0x76>
    467a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    467e:	d00f      	beq.n	46a0 <hid_custom_handle_req+0x90>
    4680:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4684:	e7d0      	b.n	4628 <hid_custom_handle_req+0x18>
			cfg = common->dev->config;
    4686:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    4688:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    468a:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    468c:	685b      	ldr	r3, [r3, #4]
    468e:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    4692:	4291      	cmp	r1, r2
    4694:	bf94      	ite	ls
    4696:	6029      	strls	r1, [r5, #0]
    4698:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    469a:	6033      	str	r3, [r6, #0]
		return 0;
    469c:	2000      	movs	r0, #0
    469e:	e7c3      	b.n	4628 <hid_custom_handle_req+0x18>
			*len = MIN(setup->wLength, dev_data->report_size);
    46a0:	88e3      	ldrh	r3, [r4, #6]
    46a2:	f850 2c14 	ldr.w	r2, [r0, #-20]
    46a6:	429a      	cmp	r2, r3
    46a8:	bf94      	ite	ls
    46aa:	602a      	strls	r2, [r5, #0]
    46ac:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    46ae:	f850 3c18 	ldr.w	r3, [r0, #-24]
			break;
    46b2:	e7f2      	b.n	469a <hid_custom_handle_req+0x8a>
    46b4:	20001180 	.word	0x20001180
    46b8:	0000cd30 	.word	0x0000cd30
    46bc:	0000c108 	.word	0x0000c108

000046c0 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    46c0:	b580      	push	{r7, lr}
    46c2:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    46c4:	b088      	sub	sp, #32
    46c6:	466a      	mov	r2, sp
    46c8:	4b06      	ldr	r3, [pc, #24]	; (46e4 <hid_int_in.part.0+0x24>)
    46ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
    46ce:	2303      	movs	r3, #3
    46d0:	f842 3f10 	str.w	r3, [r2, #16]!
    46d4:	4804      	ldr	r0, [pc, #16]	; (46e8 <hid_int_in.part.0+0x28>)
    46d6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    46da:	f006 fc78 	bl	afce <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    46de:	46bd      	mov	sp, r7
    46e0:	bd80      	pop	{r7, pc}
    46e2:	bf00      	nop
    46e4:	0000cd57 	.word	0x0000cd57
    46e8:	0000c108 	.word	0x0000c108

000046ec <hid_int_in>:
{
    46ec:	b570      	push	{r4, r5, r6, lr}
    46ee:	4604      	mov	r4, r0
    46f0:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    46f2:	4601      	mov	r1, r0
    46f4:	480a      	ldr	r0, [pc, #40]	; (4720 <hid_int_in+0x34>)
    46f6:	f006 fc01 	bl	aefc <usb_get_dev_data_by_ep>
	if (common == NULL) {
    46fa:	b920      	cbnz	r0, 4706 <hid_int_in+0x1a>
    46fc:	4620      	mov	r0, r4
}
    46fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4702:	f7ff bfdd 	b.w	46c0 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4706:	2d02      	cmp	r5, #2
    4708:	d108      	bne.n	471c <hid_int_in+0x30>
    470a:	f850 3c10 	ldr.w	r3, [r0, #-16]
    470e:	b12b      	cbz	r3, 471c <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    4710:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4712:	b11b      	cbz	r3, 471c <hid_int_in+0x30>
}
    4714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    4718:	6800      	ldr	r0, [r0, #0]
    471a:	4718      	bx	r3
}
    471c:	bd70      	pop	{r4, r5, r6, pc}
    471e:	bf00      	nop
    4720:	20001180 	.word	0x20001180

00004724 <hid_class_handle_req>:
{
    4724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4728:	b087      	sub	sp, #28
    472a:	4605      	mov	r5, r0
    472c:	af00      	add	r7, sp, #0
    472e:	4688      	mov	r8, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4730:	7901      	ldrb	r1, [r0, #4]
    4732:	484e      	ldr	r0, [pc, #312]	; (486c <hid_class_handle_req+0x148>)
{
    4734:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4736:	f006 fbd3 	bl	aee0 <usb_get_dev_data_by_iface>
	if (common == NULL) {
    473a:	4604      	mov	r4, r0
    473c:	b9a8      	cbnz	r0, 476a <hid_class_handle_req+0x46>
		LOG_WRN("Device data not found for interface %u",
    473e:	466c      	mov	r4, sp
    4740:	b088      	sub	sp, #32
    4742:	88ab      	ldrh	r3, [r5, #4]
    4744:	466a      	mov	r2, sp
    4746:	494a      	ldr	r1, [pc, #296]	; (4870 <hid_class_handle_req+0x14c>)
    4748:	484a      	ldr	r0, [pc, #296]	; (4874 <hid_class_handle_req+0x150>)
    474a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    474e:	2303      	movs	r3, #3
    4750:	f842 3f10 	str.w	r3, [r2, #16]!
    4754:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4758:	f006 fc39 	bl	afce <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    475c:	f06f 0012 	mvn.w	r0, #18
    4760:	46a5      	mov	sp, r4
}
    4762:	371c      	adds	r7, #28
    4764:	46bd      	mov	sp, r7
    4766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    476a:	f995 3000 	ldrsb.w	r3, [r5]
	dev = common->dev;
    476e:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    4770:	786e      	ldrb	r6, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4772:	2b00      	cmp	r3, #0
    4774:	da3c      	bge.n	47f0 <hid_class_handle_req+0xcc>
		switch (setup->bRequest) {
    4776:	2e02      	cmp	r6, #2
    4778:	d00d      	beq.n	4796 <hid_class_handle_req+0x72>
    477a:	2e03      	cmp	r6, #3
    477c:	d028      	beq.n	47d0 <hid_class_handle_req+0xac>
    477e:	2e01      	cmp	r6, #1
    4780:	d16d      	bne.n	485e <hid_class_handle_req+0x13a>
			if (dev_data->ops && dev_data->ops->get_report) {
    4782:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4786:	b1c3      	cbz	r3, 47ba <hid_class_handle_req+0x96>
    4788:	681c      	ldr	r4, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    478a:	b1b4      	cbz	r4, 47ba <hid_class_handle_req+0x96>
				return dev_data->ops->set_report(dev, setup,
    478c:	464b      	mov	r3, r9
    478e:	4642      	mov	r2, r8
    4790:	4629      	mov	r1, r5
    4792:	47a0      	blx	r4
    4794:	e7e5      	b.n	4762 <hid_class_handle_req+0x3e>
	uint8_t report_id = (uint8_t)setup->wValue;
    4796:	78ab      	ldrb	r3, [r5, #2]
	if (report_id > CONFIG_USB_HID_REPORTS) {
    4798:	2b01      	cmp	r3, #1
    479a:	d911      	bls.n	47c0 <hid_class_handle_req+0x9c>
		LOG_ERR("Report id out of limit: %d", report_id);
    479c:	466c      	mov	r4, sp
    479e:	b088      	sub	sp, #32
    47a0:	466a      	mov	r2, sp
    47a2:	4935      	ldr	r1, [pc, #212]	; (4878 <hid_class_handle_req+0x154>)
    47a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    47a8:	2303      	movs	r3, #3
    47aa:	f842 3f10 	str.w	r3, [r2, #16]!
    47ae:	4831      	ldr	r0, [pc, #196]	; (4874 <hid_class_handle_req+0x150>)
    47b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    47b4:	f006 fc0b 	bl	afce <z_log_msg_static_create.constprop.0>
    47b8:	46a5      	mov	sp, r4
		return -ENOTSUP;
    47ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
    47be:	e7d0      	b.n	4762 <hid_class_handle_req+0x3e>
		*data = &dev_data->idle_rate[0];
    47c0:	3c07      	subs	r4, #7
		*len = sizeof(dev_data->idle_rate[report_id - 1]);
    47c2:	2301      	movs	r3, #1
		*data = &dev_data->idle_rate[report_id - 1];
    47c4:	f8c9 4000 	str.w	r4, [r9]
		*len = sizeof(dev_data->idle_rate[report_id - 1]);
    47c8:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    47cc:	2000      	movs	r0, #0
    47ce:	e7c8      	b.n	4762 <hid_class_handle_req+0x3e>
	if (setup->wValue) {
    47d0:	886b      	ldrh	r3, [r5, #2]
    47d2:	b15b      	cbz	r3, 47ec <hid_class_handle_req+0xc8>
		LOG_ERR("wValue should be 0");
    47d4:	4b29      	ldr	r3, [pc, #164]	; (487c <hid_class_handle_req+0x158>)
    47d6:	617b      	str	r3, [r7, #20]
    47d8:	4826      	ldr	r0, [pc, #152]	; (4874 <hid_class_handle_req+0x150>)
    47da:	2302      	movs	r3, #2
    47dc:	f107 0210 	add.w	r2, r7, #16
    47e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    47e4:	613b      	str	r3, [r7, #16]
    47e6:	f006 fbf2 	bl	afce <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
    47ea:	e7e6      	b.n	47ba <hid_class_handle_req+0x96>
	*data = &dev_data->protocol;
    47ec:	3c06      	subs	r4, #6
    47ee:	e7e8      	b.n	47c2 <hid_class_handle_req+0x9e>
		switch (setup->bRequest) {
    47f0:	2e0a      	cmp	r6, #10
    47f2:	d009      	beq.n	4808 <hid_class_handle_req+0xe4>
    47f4:	2e0b      	cmp	r6, #11
    47f6:	d018      	beq.n	482a <hid_class_handle_req+0x106>
    47f8:	2e09      	cmp	r6, #9
    47fa:	d130      	bne.n	485e <hid_class_handle_req+0x13a>
			if (dev_data->ops && dev_data->ops->set_report) {
    47fc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4800:	2b00      	cmp	r3, #0
    4802:	d0da      	beq.n	47ba <hid_class_handle_req+0x96>
    4804:	685c      	ldr	r4, [r3, #4]
    4806:	e7c0      	b.n	478a <hid_class_handle_req+0x66>
	uint8_t rate = (uint8_t)(setup->wValue >> 8);
    4808:	886b      	ldrh	r3, [r5, #2]
    480a:	0a1a      	lsrs	r2, r3, #8
	uint8_t report_id = (uint8_t)setup->wValue;
    480c:	b2db      	uxtb	r3, r3
	if (report_id > CONFIG_USB_HID_REPORTS) {
    480e:	2b01      	cmp	r3, #1
    4810:	d8c4      	bhi.n	479c <hid_class_handle_req+0x78>
			dev_data->sof_cnt[i] = 0U;
    4812:	2300      	movs	r3, #0
			dev_data->idle_rate[i] = rate;
    4814:	f804 2c07 	strb.w	r2, [r4, #-7]
			dev_data->sof_cnt[i] = 0U;
    4818:	f844 3c0c 	str.w	r3, [r4, #-12]
	dev_data->idle_on = (bool)setup->wValue;
    481c:	886b      	ldrh	r3, [r5, #2]
    481e:	3b00      	subs	r3, #0
    4820:	bf18      	it	ne
    4822:	2301      	movne	r3, #1
    4824:	f804 3c08 	strb.w	r3, [r4, #-8]
	return 0;
    4828:	e7d0      	b.n	47cc <hid_class_handle_req+0xa8>
			return hid_on_set_protocol(dev, dev_data, setup);
    482a:	8869      	ldrh	r1, [r5, #2]
	if (protocol > HID_PROTOCOL_REPORT) {
    482c:	2901      	cmp	r1, #1
    482e:	d906      	bls.n	483e <hid_class_handle_req+0x11a>
		LOG_ERR("Unsupported protocol: %u", protocol);
    4830:	466c      	mov	r4, sp
    4832:	b088      	sub	sp, #32
    4834:	466a      	mov	r2, sp
    4836:	4b12      	ldr	r3, [pc, #72]	; (4880 <hid_class_handle_req+0x15c>)
    4838:	e9c2 3105 	strd	r3, r1, [r2, #20]
    483c:	e7b4      	b.n	47a8 <hid_class_handle_req+0x84>
	if (dev_data->protocol != protocol) {
    483e:	f814 3c06 	ldrb.w	r3, [r4, #-6]
    4842:	428b      	cmp	r3, r1
    4844:	d0c2      	beq.n	47cc <hid_class_handle_req+0xa8>
		if (dev_data->ops && dev_data->ops->protocol_change) {
    4846:	f854 3c10 	ldr.w	r3, [r4, #-16]
		dev_data->protocol = protocol;
    484a:	b2c9      	uxtb	r1, r1
    484c:	f804 1c06 	strb.w	r1, [r4, #-6]
		if (dev_data->ops && dev_data->ops->protocol_change) {
    4850:	2b00      	cmp	r3, #0
    4852:	d0bb      	beq.n	47cc <hid_class_handle_req+0xa8>
    4854:	689b      	ldr	r3, [r3, #8]
    4856:	2b00      	cmp	r3, #0
    4858:	d0b8      	beq.n	47cc <hid_class_handle_req+0xa8>
			dev_data->ops->protocol_change(dev, protocol);
    485a:	4798      	blx	r3
    485c:	e7b6      	b.n	47cc <hid_class_handle_req+0xa8>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    485e:	466c      	mov	r4, sp
    4860:	b088      	sub	sp, #32
    4862:	466a      	mov	r2, sp
    4864:	4b07      	ldr	r3, [pc, #28]	; (4884 <hid_class_handle_req+0x160>)
    4866:	e9c2 3605 	strd	r3, r6, [r2, #20]
    486a:	e79d      	b.n	47a8 <hid_class_handle_req+0x84>
    486c:	20001180 	.word	0x20001180
    4870:	0000cd30 	.word	0x0000cd30
    4874:	0000c108 	.word	0x0000c108
    4878:	0000cd7d 	.word	0x0000cd7d
    487c:	0000cd98 	.word	0x0000cd98
    4880:	0000cdc4 	.word	0x0000cdc4
    4884:	0000cdab 	.word	0x0000cdab

00004888 <hid_status_cb>:
{
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	4606      	mov	r6, r0
    488c:	b086      	sub	sp, #24
    488e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    4890:	4601      	mov	r1, r0
    4892:	4846      	ldr	r0, [pc, #280]	; (49ac <hid_status_cb+0x124>)
    4894:	f006 fb18 	bl	aec8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    4898:	4604      	mov	r4, r0
    489a:	b928      	cbnz	r0, 48a8 <hid_status_cb+0x20>
    489c:	4630      	mov	r0, r6
}
    489e:	b006      	add	sp, #24
    48a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48a4:	f7ff be9e 	b.w	45e4 <hid_status_cb.part.0>
	dev_data = CONTAINER_OF(common, struct hid_device_info, common);
    48a8:	f1a0 0618 	sub.w	r6, r0, #24
	switch (status) {
    48ac:	2d0a      	cmp	r5, #10
    48ae:	d87a      	bhi.n	49a6 <hid_status_cb+0x11e>
    48b0:	e8df f005 	tbb	[pc, r5]
    48b4:	2b291106 	.word	0x2b291106
    48b8:	79564a3a 	.word	0x79564a3a
    48bc:	7979      	.short	0x7979
    48be:	6f          	.byte	0x6f
    48bf:	00          	.byte	0x00
		LOG_INF("Device error");
    48c0:	4b3b      	ldr	r3, [pc, #236]	; (49b0 <hid_status_cb+0x128>)
		LOG_INF("Unknown event");
    48c2:	9305      	str	r3, [sp, #20]
    48c4:	483b      	ldr	r0, [pc, #236]	; (49b4 <hid_status_cb+0x12c>)
    48c6:	2302      	movs	r3, #2
    48c8:	aa04      	add	r2, sp, #16
    48ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48ce:	9304      	str	r3, [sp, #16]
    48d0:	f006 fb7d 	bl	afce <z_log_msg_static_create.constprop.0>
    48d4:	e026      	b.n	4924 <hid_status_cb+0x9c>
		LOG_INF("Device reset detected");
    48d6:	4b38      	ldr	r3, [pc, #224]	; (49b8 <hid_status_cb+0x130>)
    48d8:	9305      	str	r3, [sp, #20]
    48da:	4836      	ldr	r0, [pc, #216]	; (49b4 <hid_status_cb+0x12c>)
    48dc:	2302      	movs	r3, #2
    48de:	aa04      	add	r2, sp, #16
    48e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48e4:	9304      	str	r3, [sp, #16]
    48e6:	f006 fb72 	bl	afce <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    48ea:	2300      	movs	r3, #0
    48ec:	f804 3c05 	strb.w	r3, [r4, #-5]
		dev_data->suspended = false;
    48f0:	f804 3c04 	strb.w	r3, [r4, #-4]
		hid_clear_idle_ctx(dev_data);
    48f4:	4630      	mov	r0, r6
		dev_data->protocol = HID_PROTOCOL_REPORT;
    48f6:	2301      	movs	r3, #1
    48f8:	f804 3c06 	strb.w	r3, [r4, #-6]
}
    48fc:	b006      	add	sp, #24
    48fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		hid_clear_idle_ctx(dev_data);
    4902:	f006 bb67 	b.w	afd4 <hid_clear_idle_ctx>
		LOG_INF("Device connected");
    4906:	4b2d      	ldr	r3, [pc, #180]	; (49bc <hid_status_cb+0x134>)
    4908:	e7db      	b.n	48c2 <hid_status_cb+0x3a>
		LOG_INF("Device configured");
    490a:	4b2d      	ldr	r3, [pc, #180]	; (49c0 <hid_status_cb+0x138>)
    490c:	9305      	str	r3, [sp, #20]
    490e:	4829      	ldr	r0, [pc, #164]	; (49b4 <hid_status_cb+0x12c>)
    4910:	2302      	movs	r3, #2
    4912:	aa04      	add	r2, sp, #16
    4914:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4918:	9304      	str	r3, [sp, #16]
    491a:	f006 fb58 	bl	afce <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    491e:	2301      	movs	r3, #1
    4920:	f804 3c05 	strb.w	r3, [r4, #-5]
}
    4924:	b006      	add	sp, #24
    4926:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    4928:	4b26      	ldr	r3, [pc, #152]	; (49c4 <hid_status_cb+0x13c>)
    492a:	9305      	str	r3, [sp, #20]
    492c:	4821      	ldr	r0, [pc, #132]	; (49b4 <hid_status_cb+0x12c>)
    492e:	2302      	movs	r3, #2
    4930:	aa04      	add	r2, sp, #16
    4932:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4936:	9304      	str	r3, [sp, #16]
    4938:	f006 fb49 	bl	afce <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    493c:	2300      	movs	r3, #0
    493e:	f804 3c05 	strb.w	r3, [r4, #-5]
			dev_data->suspended = false;
    4942:	f804 3c04 	strb.w	r3, [r4, #-4]
    4946:	e7ed      	b.n	4924 <hid_status_cb+0x9c>
		LOG_INF("Device suspended");
    4948:	4b1f      	ldr	r3, [pc, #124]	; (49c8 <hid_status_cb+0x140>)
    494a:	9305      	str	r3, [sp, #20]
    494c:	4819      	ldr	r0, [pc, #100]	; (49b4 <hid_status_cb+0x12c>)
    494e:	2302      	movs	r3, #2
    4950:	aa04      	add	r2, sp, #16
    4952:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4956:	9304      	str	r3, [sp, #16]
    4958:	f006 fb39 	bl	afce <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    495c:	2301      	movs	r3, #1
    495e:	e7f0      	b.n	4942 <hid_status_cb+0xba>
		LOG_INF("Device resumed");
    4960:	4b1a      	ldr	r3, [pc, #104]	; (49cc <hid_status_cb+0x144>)
    4962:	4814      	ldr	r0, [pc, #80]	; (49b4 <hid_status_cb+0x12c>)
    4964:	9305      	str	r3, [sp, #20]
    4966:	2502      	movs	r5, #2
    4968:	aa04      	add	r2, sp, #16
    496a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    496e:	9504      	str	r5, [sp, #16]
    4970:	f006 fb2d 	bl	afce <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    4974:	f814 3c04 	ldrb.w	r3, [r4, #-4]
    4978:	2b00      	cmp	r3, #0
    497a:	d0d3      	beq.n	4924 <hid_status_cb+0x9c>
			LOG_INF("from suspend");
    497c:	4b14      	ldr	r3, [pc, #80]	; (49d0 <hid_status_cb+0x148>)
    497e:	480d      	ldr	r0, [pc, #52]	; (49b4 <hid_status_cb+0x12c>)
    4980:	aa04      	add	r2, sp, #16
    4982:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4986:	e9cd 5304 	strd	r5, r3, [sp, #16]
    498a:	f006 fb20 	bl	afce <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    498e:	2300      	movs	r3, #0
    4990:	e7d7      	b.n	4942 <hid_status_cb+0xba>
		if (dev_data->idle_on) {
    4992:	f810 3c08 	ldrb.w	r3, [r0, #-8]
    4996:	2b00      	cmp	r3, #0
    4998:	d0c4      	beq.n	4924 <hid_status_cb+0x9c>
			hid_sof_handler(dev_data);
    499a:	4630      	mov	r0, r6
}
    499c:	b006      	add	sp, #24
    499e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			hid_sof_handler(dev_data);
    49a2:	f006 bb1b 	b.w	afdc <hid_sof_handler>
		LOG_INF("Unknown event");
    49a6:	4b0b      	ldr	r3, [pc, #44]	; (49d4 <hid_status_cb+0x14c>)
    49a8:	e78b      	b.n	48c2 <hid_status_cb+0x3a>
    49aa:	bf00      	nop
    49ac:	20001180 	.word	0x20001180
    49b0:	0000cddd 	.word	0x0000cddd
    49b4:	0000c108 	.word	0x0000c108
    49b8:	0000cdea 	.word	0x0000cdea
    49bc:	0000ce00 	.word	0x0000ce00
    49c0:	0000ce11 	.word	0x0000ce11
    49c4:	0000ce23 	.word	0x0000ce23
    49c8:	0000ce37 	.word	0x0000ce37
    49cc:	0000ce48 	.word	0x0000ce48
    49d0:	0000ce57 	.word	0x0000ce57
    49d4:	0000ce64 	.word	0x0000ce64

000049d8 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    49d8:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    49da:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    49dc:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    49e0:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    49e2:	2300      	movs	r3, #0
    49e4:	61e3      	str	r3, [r4, #28]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    49e6:	4b06      	ldr	r3, [pc, #24]	; (4a00 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    49e8:	61a0      	str	r0, [r4, #24]
    49ea:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    49ec:	f104 021c 	add.w	r2, r4, #28
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    49f0:	b911      	cbnz	r1, 49f8 <usb_hid_register_device+0x20>
	list->head = node;
    49f2:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    49f6:	bd10      	pop	{r4, pc}
	parent->next = child;
    49f8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    49fa:	605a      	str	r2, [r3, #4]
    49fc:	e7fb      	b.n	49f6 <usb_hid_register_device+0x1e>
    49fe:	bf00      	nop
    4a00:	20001180 	.word	0x20001180

00004a04 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    4a04:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    4a06:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    4a08:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4a0a:	7cc5      	ldrb	r5, [r0, #19]
{
    4a0c:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4a0e:	b145      	cbz	r5, 4a22 <hid_int_ep_write+0x1e>
    4a10:	7d00      	ldrb	r0, [r0, #20]
    4a12:	b930      	cbnz	r0, 4a22 <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4a14:	6a20      	ldr	r0, [r4, #32]
    4a16:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    4a18:	b007      	add	sp, #28
    4a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4a1e:	f006 ba3b 	b.w	ae98 <usb_write>
		LOG_WRN("Device is not configured");
    4a22:	4b07      	ldr	r3, [pc, #28]	; (4a40 <hid_int_ep_write+0x3c>)
    4a24:	9305      	str	r3, [sp, #20]
    4a26:	4807      	ldr	r0, [pc, #28]	; (4a44 <hid_int_ep_write+0x40>)
    4a28:	2302      	movs	r3, #2
    4a2a:	aa04      	add	r2, sp, #16
    4a2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4a30:	9304      	str	r3, [sp, #16]
    4a32:	f006 facc 	bl	afce <z_log_msg_static_create.constprop.0>
}
    4a36:	f06f 000a 	mvn.w	r0, #10
    4a3a:	b007      	add	sp, #28
    4a3c:	bd30      	pop	{r4, r5, pc}
    4a3e:	bf00      	nop
    4a40:	0000ce72 	.word	0x0000ce72
    4a44:	0000c108 	.word	0x0000c108

00004a48 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4a48:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4a4a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4a4e:	d512      	bpl.n	4a76 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4a50:	2b08      	cmp	r3, #8
    4a52:	d105      	bne.n	4a60 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a54:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4a56:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a5a:	d506      	bpl.n	4a6a <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4a5c:	480e      	ldr	r0, [pc, #56]	; (4a98 <endpoint_ctx+0x50>)
    4a5e:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    4a60:	f010 0f78 	tst.w	r0, #120	; 0x78
    4a64:	d112      	bne.n	4a8c <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4a66:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    4a6a:	204c      	movs	r0, #76	; 0x4c
    4a6c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4a70:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <endpoint_ctx+0x54>)
    4a72:	4418      	add	r0, r3
    4a74:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4a76:	2b08      	cmp	r3, #8
    4a78:	d105      	bne.n	4a86 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a7a:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4a7c:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a80:	d506      	bpl.n	4a90 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4a82:	4807      	ldr	r0, [pc, #28]	; (4aa0 <endpoint_ctx+0x58>)
    4a84:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    4a86:	f010 0f78 	tst.w	r0, #120	; 0x78
    4a8a:	d0f6      	beq.n	4a7a <endpoint_ctx+0x32>
		return NULL;
    4a8c:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    4a8e:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4a90:	4804      	ldr	r0, [pc, #16]	; (4aa4 <endpoint_ctx+0x5c>)
    4a92:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4a96:	4770      	bx	lr
    4a98:	200012d4 	.word	0x200012d4
    4a9c:	20001188 	.word	0x20001188
    4aa0:	200013f4 	.word	0x200013f4
    4aa4:	200012f4 	.word	0x200012f4

00004aa8 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4aa8:	4901      	ldr	r1, [pc, #4]	; (4ab0 <usbd_work_schedule+0x8>)
    4aaa:	4802      	ldr	r0, [pc, #8]	; (4ab4 <usbd_work_schedule+0xc>)
    4aac:	f006 bf4b 	b.w	b946 <k_work_submit_to_queue>
    4ab0:	200011b0 	.word	0x200011b0
    4ab4:	20000790 	.word	0x20000790

00004ab8 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4ab8:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4aba:	4801      	ldr	r0, [pc, #4]	; (4ac0 <usbd_evt_put+0x8>)
    4abc:	f006 befd 	b.w	b8ba <k_queue_append>
    4ac0:	20000218 	.word	0x20000218

00004ac4 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4ac4:	4802      	ldr	r0, [pc, #8]	; (4ad0 <usbd_evt_get+0xc>)
    4ac6:	2200      	movs	r2, #0
    4ac8:	2300      	movs	r3, #0
    4aca:	f004 ba8f 	b.w	8fec <z_impl_k_queue_get>
    4ace:	bf00      	nop
    4ad0:	20000218 	.word	0x20000218

00004ad4 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4ad4:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4ad6:	4c05      	ldr	r4, [pc, #20]	; (4aec <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    4ad8:	f7ff fff4 	bl	4ac4 <usbd_evt_get>
		if (ev) {
    4adc:	b120      	cbz	r0, 4ae8 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4ade:	1d01      	adds	r1, r0, #4
    4ae0:	4620      	mov	r0, r4
    4ae2:	f006 fe30 	bl	b746 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    4ae6:	e7f7      	b.n	4ad8 <usbd_evt_flush+0x4>
}
    4ae8:	bd10      	pop	{r4, pc}
    4aea:	bf00      	nop
    4aec:	20000188 	.word	0x20000188

00004af0 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4af0:	b510      	push	{r4, lr}
    4af2:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4af4:	4818      	ldr	r0, [pc, #96]	; (4b58 <usbd_evt_alloc+0x68>)
    4af6:	2200      	movs	r2, #0
    4af8:	2300      	movs	r3, #0
    4afa:	a901      	add	r1, sp, #4
    4afc:	f004 f8bc 	bl	8c78 <k_mem_slab_alloc>
    4b00:	b330      	cbz	r0, 4b50 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    4b02:	4b16      	ldr	r3, [pc, #88]	; (4b5c <usbd_evt_alloc+0x6c>)
    4b04:	4816      	ldr	r0, [pc, #88]	; (4b60 <usbd_evt_alloc+0x70>)
    4b06:	9307      	str	r3, [sp, #28]
    4b08:	aa06      	add	r2, sp, #24
    4b0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b0e:	2402      	movs	r4, #2
    4b10:	9406      	str	r4, [sp, #24]
    4b12:	f006 faa0 	bl	b056 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    4b16:	f7ff ffdd 	bl	4ad4 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4b1a:	480f      	ldr	r0, [pc, #60]	; (4b58 <usbd_evt_alloc+0x68>)
    4b1c:	2200      	movs	r2, #0
    4b1e:	2300      	movs	r3, #0
    4b20:	a901      	add	r1, sp, #4
    4b22:	f004 f8a9 	bl	8c78 <k_mem_slab_alloc>
    4b26:	b150      	cbz	r0, 4b3e <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    4b28:	4b0e      	ldr	r3, [pc, #56]	; (4b64 <usbd_evt_alloc+0x74>)
    4b2a:	480d      	ldr	r0, [pc, #52]	; (4b60 <usbd_evt_alloc+0x70>)
    4b2c:	aa06      	add	r2, sp, #24
    4b2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b32:	e9cd 4306 	strd	r4, r3, [sp, #24]
    4b36:	f006 fa8e 	bl	b056 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    4b3a:	2000      	movs	r0, #0
    4b3c:	e00a      	b.n	4b54 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    4b3e:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4b40:	2304      	movs	r3, #4
		ev->block = block;
    4b42:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4b44:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    4b46:	f7ff ffb7 	bl	4ab8 <usbd_evt_put>
		usbd_work_schedule();
    4b4a:	f7ff ffad 	bl	4aa8 <usbd_work_schedule>

		return NULL;
    4b4e:	e7f4      	b.n	4b3a <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    4b50:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4b52:	6040      	str	r0, [r0, #4]

	return ev;
}
    4b54:	b008      	add	sp, #32
    4b56:	bd10      	pop	{r4, pc}
    4b58:	20000188 	.word	0x20000188
    4b5c:	0000ce93 	.word	0x0000ce93
    4b60:	0000c110 	.word	0x0000c110
    4b64:	0000ceb1 	.word	0x0000ceb1

00004b68 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    4b68:	b598      	push	{r3, r4, r7, lr}
    4b6a:	2802      	cmp	r0, #2
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	d811      	bhi.n	4b94 <usb_dc_power_event_handler+0x2c>
    4b70:	4b10      	ldr	r3, [pc, #64]	; (4bb4 <usb_dc_power_event_handler+0x4c>)
    4b72:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    4b74:	f7ff ffbc 	bl	4af0 <usbd_evt_alloc>
	if (!ev) {
    4b78:	b150      	cbz	r0, 4b90 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    4b7a:	2200      	movs	r2, #0
    4b7c:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4b7e:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    4b80:	f7ff ff9a 	bl	4ab8 <usbd_evt_put>
	if (usbd_ctx.attached) {
    4b84:	4b0c      	ldr	r3, [pc, #48]	; (4bb8 <usb_dc_power_event_handler+0x50>)
    4b86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4b8a:	b10b      	cbz	r3, 4b90 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    4b8c:	f7ff ff8c 	bl	4aa8 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    4b90:	46bd      	mov	sp, r7
    4b92:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    4b94:	466c      	mov	r4, sp
    4b96:	b088      	sub	sp, #32
    4b98:	466a      	mov	r2, sp
    4b9a:	4b08      	ldr	r3, [pc, #32]	; (4bbc <usb_dc_power_event_handler+0x54>)
	switch (event) {
    4b9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    4ba0:	2303      	movs	r3, #3
    4ba2:	f842 3f10 	str.w	r3, [r2, #16]!
    4ba6:	4806      	ldr	r0, [pc, #24]	; (4bc0 <usb_dc_power_event_handler+0x58>)
    4ba8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4bac:	f006 fa53 	bl	b056 <z_log_msg_static_create.constprop.0>
    4bb0:	46a5      	mov	sp, r4
    4bb2:	e7ed      	b.n	4b90 <usb_dc_power_event_handler+0x28>
    4bb4:	0000d08d 	.word	0x0000d08d
    4bb8:	20001188 	.word	0x20001188
    4bbc:	0000cecd 	.word	0x0000cecd
    4bc0:	0000c110 	.word	0x0000c110

00004bc4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    4bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    4bc8:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    4bcc:	4606      	mov	r6, r0
    4bce:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4bd0:	4640      	mov	r0, r8
    4bd2:	f7ff ff39 	bl	4a48 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4bd6:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4bda:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    4bdc:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4bde:	d025      	beq.n	4c2c <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    4be0:	b19c      	cbz	r4, 4c0a <usbd_event_transfer_data+0x46>
    4be2:	2c03      	cmp	r4, #3
    4be4:	d01f      	beq.n	4c26 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4be6:	466d      	mov	r5, sp
    4be8:	b088      	sub	sp, #32
    4bea:	466a      	mov	r2, sp
    4bec:	4b2a      	ldr	r3, [pc, #168]	; (4c98 <usbd_event_transfer_data+0xd4>)
    4bee:	f8c2 801c 	str.w	r8, [r2, #28]
    4bf2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4bf6:	2304      	movs	r3, #4
    4bf8:	f842 3f10 	str.w	r3, [r2, #16]!
    4bfc:	4827      	ldr	r0, [pc, #156]	; (4c9c <usbd_event_transfer_data+0xd8>)
    4bfe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4c02:	f006 fa28 	bl	b056 <z_log_msg_static_create.constprop.0>
    4c06:	46ad      	mov	sp, r5
    4c08:	e00d      	b.n	4c26 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    4c0a:	f7ff ff71 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4c0e:	4603      	mov	r3, r0
    4c10:	b148      	cbz	r0, 4c26 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    4c12:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4c14:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4c16:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4c18:	2203      	movs	r2, #3
    4c1a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4c1c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    4c1e:	f7ff ff4b 	bl	4ab8 <usbd_evt_put>
			usbd_work_schedule();
    4c22:	f7ff ff41 	bl	4aa8 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    4c26:	46bd      	mov	sp, r7
    4c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    4c2c:	b154      	cbz	r4, 4c44 <usbd_event_transfer_data+0x80>
    4c2e:	2c01      	cmp	r4, #1
    4c30:	d1d9      	bne.n	4be6 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    4c32:	f7ff ff5d 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4c36:	4603      	mov	r3, r0
    4c38:	2800      	cmp	r0, #0
    4c3a:	d0f4      	beq.n	4c26 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    4c3c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4c3e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4c40:	7304      	strb	r4, [r0, #12]
    4c42:	e7eb      	b.n	4c1c <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    4c44:	f7ff ff54 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4c48:	2800      	cmp	r0, #0
    4c4a:	d0ec      	beq.n	4c26 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    4c4c:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    4c4e:	4b14      	ldr	r3, [pc, #80]	; (4ca0 <usbd_event_transfer_data+0xdc>)
    4c50:	f012 0f80 	tst.w	r2, #128	; 0x80
    4c54:	f002 0108 	and.w	r1, r2, #8
    4c58:	d011      	beq.n	4c7e <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4c5a:	b141      	cbz	r1, 4c6e <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    4c5c:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    4c60:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    4c62:	2301      	movs	r3, #1
    4c64:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4c66:	2302      	movs	r3, #2
    4c68:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4c6a:	6085      	str	r5, [r0, #8]
    4c6c:	e7d7      	b.n	4c1e <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    4c6e:	f002 020f 	and.w	r2, r2, #15
    4c72:	2114      	movs	r1, #20
    4c74:	fb01 3302 	mla	r3, r1, r2, r3
    4c78:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c7c:	e7f0      	b.n	4c60 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4c7e:	b111      	cbz	r1, 4c86 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    4c80:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4c84:	e7ec      	b.n	4c60 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4c86:	f002 020f 	and.w	r2, r2, #15
    4c8a:	2114      	movs	r1, #20
    4c8c:	fb01 3302 	mla	r3, r1, r2, r3
    4c90:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4c94:	e7e4      	b.n	4c60 <usbd_event_transfer_data+0x9c>
    4c96:	bf00      	nop
    4c98:	0000cee8 	.word	0x0000cee8
    4c9c:	0000c110 	.word	0x0000c110
    4ca0:	40027000 	.word	0x40027000

00004ca4 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    4ca4:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    4ca6:	4812      	ldr	r0, [pc, #72]	; (4cf0 <usb_init+0x4c>)
    4ca8:	f003 f948 	bl	7f3c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4cac:	4b11      	ldr	r3, [pc, #68]	; (4cf4 <usb_init+0x50>)
    4cae:	4298      	cmp	r0, r3
    4cb0:	d11a      	bne.n	4ce8 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4cb2:	4811      	ldr	r0, [pc, #68]	; (4cf8 <usb_init+0x54>)
    4cb4:	f002 fae2 	bl	727c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4cb8:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    4cba:	4810      	ldr	r0, [pc, #64]	; (4cfc <usb_init+0x58>)
    4cbc:	f002 fb24 	bl	7308 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    4cc0:	490f      	ldr	r1, [pc, #60]	; (4d00 <usb_init+0x5c>)
    4cc2:	4810      	ldr	r0, [pc, #64]	; (4d04 <usb_init+0x60>)
    4cc4:	9400      	str	r4, [sp, #0]
    4cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4cce:	f004 fb1f 	bl	9310 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4cd2:	490d      	ldr	r1, [pc, #52]	; (4d08 <usb_init+0x64>)
    4cd4:	480b      	ldr	r0, [pc, #44]	; (4d04 <usb_init+0x60>)
    4cd6:	f006 fd65 	bl	b7a4 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    4cda:	480c      	ldr	r0, [pc, #48]	; (4d0c <usb_init+0x68>)
    4cdc:	490c      	ldr	r1, [pc, #48]	; (4d10 <usb_init+0x6c>)
    4cde:	f006 fe15 	bl	b90c <k_work_init>

	return 0;
    4ce2:	4620      	mov	r0, r4
}
    4ce4:	b002      	add	sp, #8
    4ce6:	bd10      	pop	{r4, pc}
		return -EIO;
    4ce8:	f06f 0004 	mvn.w	r0, #4
    4cec:	e7fa      	b.n	4ce4 <usb_init+0x40>
    4cee:	bf00      	nop
    4cf0:	00004d55 	.word	0x00004d55
    4cf4:	0bad0000 	.word	0x0bad0000
    4cf8:	0000d090 	.word	0x0000d090
    4cfc:	0000c1bc 	.word	0x0000c1bc
    4d00:	20002300 	.word	0x20002300
    4d04:	20000790 	.word	0x20000790
    4d08:	0000cf14 	.word	0x0000cf14
    4d0c:	200011b0 	.word	0x200011b0
    4d10:	00004f31 	.word	0x00004f31

00004d14 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4d14:	b510      	push	{r4, lr}
    4d16:	490e      	ldr	r1, [pc, #56]	; (4d50 <hfxo_stop.constprop.0.isra.0+0x3c>)
    4d18:	f3bf 8f5b 	dmb	ish
    4d1c:	2300      	movs	r3, #0
    4d1e:	e851 2f00 	ldrex	r2, [r1]
    4d22:	2a01      	cmp	r2, #1
    4d24:	d103      	bne.n	4d2e <hfxo_stop.constprop.0.isra.0+0x1a>
    4d26:	e841 3000 	strex	r0, r3, [r1]
    4d2a:	2800      	cmp	r0, #0
    4d2c:	d1f7      	bne.n	4d1e <hfxo_stop.constprop.0.isra.0+0xa>
    4d2e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    4d32:	d10c      	bne.n	4d4e <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4d34:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4d38:	3914      	subs	r1, #20
    4d3a:	4620      	mov	r0, r4
    4d3c:	f005 fdae 	bl	a89c <onoff_cancel>

	if (rv == -EALREADY) {
    4d40:	3078      	adds	r0, #120	; 0x78
    4d42:	d104      	bne.n	4d4e <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    4d44:	4620      	mov	r0, r4
}
    4d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d4a:	f005 bd82 	b.w	a852 <onoff_release>
    4d4e:	bd10      	pop	{r4, pc}
    4d50:	200011a8 	.word	0x200011a8

00004d54 <usbd_event_handler>:
{
    4d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d58:	b088      	sub	sp, #32
    4d5a:	4606      	mov	r6, r0
    4d5c:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    4d5e:	2214      	movs	r2, #20
    4d60:	2100      	movs	r1, #0
    4d62:	f107 000c 	add.w	r0, r7, #12
    4d66:	f006 f913 	bl	af90 <memset>
	switch (p_event->type) {
    4d6a:	7833      	ldrb	r3, [r6, #0]
    4d6c:	2b06      	cmp	r3, #6
    4d6e:	d824      	bhi.n	4dba <usbd_event_handler+0x66>
    4d70:	e8df f003 	tbb	[pc, r3]
    4d74:	1612049e 	.word	0x1612049e
    4d78:	9016      	.short	0x9016
    4d7a:	18          	.byte	0x18
    4d7b:	00          	.byte	0x00
		evt.evt_type = USBD_EVT_RESET;
    4d7c:	2402      	movs	r4, #2
		ev = usbd_evt_alloc();
    4d7e:	f7ff feb7 	bl	4af0 <usbd_evt_alloc>
		if (!ev) {
    4d82:	4603      	mov	r3, r0
    4d84:	b1c8      	cbz	r0, 4dba <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    4d86:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4d88:	f100 0208 	add.w	r2, r0, #8
    4d8c:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    4d90:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4d94:	4618      	mov	r0, r3
    4d96:	e038      	b.n	4e0a <usbd_event_handler+0xb6>
	switch (p_event->type) {
    4d98:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4d9a:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    4d9c:	2400      	movs	r4, #0
    4d9e:	e7ee      	b.n	4d7e <usbd_event_handler+0x2a>
	switch (p_event->type) {
    4da0:	2304      	movs	r3, #4
    4da2:	e7fa      	b.n	4d9a <usbd_event_handler+0x46>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4da4:	f896 8002 	ldrb.w	r8, [r6, #2]
    4da8:	4640      	mov	r0, r8
    4daa:	f7ff fe4d 	bl	4a48 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4dae:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4db0:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    4db2:	b133      	cbz	r3, 4dc2 <usbd_event_handler+0x6e>
    4db4:	3b01      	subs	r3, #1
    4db6:	2b02      	cmp	r3, #2
    4db8:	d968      	bls.n	4e8c <usbd_event_handler+0x138>
}
    4dba:	3720      	adds	r7, #32
    4dbc:	46bd      	mov	sp, r7
    4dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4dc2:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4dc6:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4dc8:	d024      	beq.n	4e14 <usbd_event_handler+0xc0>
		switch (p_event->data.eptransfer.status) {
    4dca:	b19c      	cbz	r4, 4df4 <usbd_event_handler+0xa0>
    4dcc:	2c03      	cmp	r4, #3
    4dce:	d0f4      	beq.n	4dba <usbd_event_handler+0x66>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4dd0:	466d      	mov	r5, sp
    4dd2:	b088      	sub	sp, #32
    4dd4:	466a      	mov	r2, sp
    4dd6:	4b37      	ldr	r3, [pc, #220]	; (4eb4 <usbd_event_handler+0x160>)
    4dd8:	f8c2 801c 	str.w	r8, [r2, #28]
    4ddc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4de0:	2304      	movs	r3, #4
    4de2:	f842 3f10 	str.w	r3, [r2, #16]!
    4de6:	4834      	ldr	r0, [pc, #208]	; (4eb8 <usbd_event_handler+0x164>)
    4de8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4dec:	f006 f933 	bl	b056 <z_log_msg_static_create.constprop.0>
    4df0:	46ad      	mov	sp, r5
    4df2:	e7e2      	b.n	4dba <usbd_event_handler+0x66>
			struct usbd_event *ev = usbd_evt_alloc();
    4df4:	f7ff fe7c 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4df8:	4603      	mov	r3, r0
    4dfa:	2800      	cmp	r0, #0
    4dfc:	d0dd      	beq.n	4dba <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    4dfe:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4e00:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4e02:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4e04:	2203      	movs	r2, #3
    4e06:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4e08:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    4e0a:	f7ff fe55 	bl	4ab8 <usbd_evt_put>
		usbd_work_schedule();
    4e0e:	f7ff fe4b 	bl	4aa8 <usbd_work_schedule>
    4e12:	e7d2      	b.n	4dba <usbd_event_handler+0x66>
		switch (p_event->data.eptransfer.status) {
    4e14:	b154      	cbz	r4, 4e2c <usbd_event_handler+0xd8>
    4e16:	2c01      	cmp	r4, #1
    4e18:	d1da      	bne.n	4dd0 <usbd_event_handler+0x7c>
			struct usbd_event *ev = usbd_evt_alloc();
    4e1a:	f7ff fe69 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4e1e:	4603      	mov	r3, r0
    4e20:	2800      	cmp	r0, #0
    4e22:	d0ca      	beq.n	4dba <usbd_event_handler+0x66>
			ep_ctx->read_pending = true;
    4e24:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4e26:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4e28:	7304      	strb	r4, [r0, #12]
    4e2a:	e7ed      	b.n	4e08 <usbd_event_handler+0xb4>
			struct usbd_event *ev = usbd_evt_alloc();
    4e2c:	f7ff fe60 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    4e30:	4604      	mov	r4, r0
    4e32:	2800      	cmp	r0, #0
    4e34:	d0c1      	beq.n	4dba <usbd_event_handler+0x66>
			ev->evt_type = USBD_EVT_EP;
    4e36:	2301      	movs	r3, #1
    4e38:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4e3a:	2302      	movs	r3, #2
    4e3c:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4e3e:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    4e40:	78b0      	ldrb	r0, [r6, #2]
    4e42:	f105 010c 	add.w	r1, r5, #12
    4e46:	f006 fc0f 	bl	b668 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    4e4a:	b170      	cbz	r0, 4e6a <usbd_event_handler+0x116>
				LOG_ERR("_ep_status_get failed! Code: %d",
    4e4c:	466e      	mov	r6, sp
    4e4e:	b088      	sub	sp, #32
    4e50:	466a      	mov	r2, sp
    4e52:	4b1a      	ldr	r3, [pc, #104]	; (4ebc <usbd_event_handler+0x168>)
    4e54:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4e58:	2303      	movs	r3, #3
    4e5a:	f842 3f10 	str.w	r3, [r2, #16]!
    4e5e:	4816      	ldr	r0, [pc, #88]	; (4eb8 <usbd_event_handler+0x164>)
    4e60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4e64:	f006 f8f7 	bl	b056 <z_log_msg_static_create.constprop.0>
    4e68:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4e6a:	4a15      	ldr	r2, [pc, #84]	; (4ec0 <usbd_event_handler+0x16c>)
    4e6c:	68e9      	ldr	r1, [r5, #12]
    4e6e:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4e72:	428b      	cmp	r3, r1
    4e74:	d906      	bls.n	4e84 <usbd_event_handler+0x130>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4e76:	1a5b      	subs	r3, r3, r1
    4e78:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4e7c:	f003 fa9a 	bl	83b4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4e80:	4620      	mov	r0, r4
    4e82:	e7c2      	b.n	4e0a <usbd_event_handler+0xb6>
				ctx->ctrl_read_len = 0U;
    4e84:	2300      	movs	r3, #0
    4e86:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    4e8a:	e7f9      	b.n	4e80 <usbd_event_handler+0x12c>
			usbd_event_transfer_data(p_event);
    4e8c:	4630      	mov	r0, r6
    4e8e:	f7ff fe99 	bl	4bc4 <usbd_event_transfer_data>
	if (put_evt) {
    4e92:	e792      	b.n	4dba <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    4e94:	1d38      	adds	r0, r7, #4
    4e96:	f003 fa67 	bl	8368 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4e9a:	797b      	ldrb	r3, [r7, #5]
    4e9c:	2b05      	cmp	r3, #5
    4e9e:	d103      	bne.n	4ea8 <usbd_event_handler+0x154>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    4ea0:	793b      	ldrb	r3, [r7, #4]
    4ea2:	f013 0f60 	tst.w	r3, #96	; 0x60
    4ea6:	d088      	beq.n	4dba <usbd_event_handler+0x66>
			evt.evt.ep_evt.ep = ep_ctx;
    4ea8:	4b06      	ldr	r3, [pc, #24]	; (4ec4 <usbd_event_handler+0x170>)
    4eaa:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    4eac:	2401      	movs	r4, #1
    4eae:	e766      	b.n	4d7e <usbd_event_handler+0x2a>
	switch (p_event->type) {
    4eb0:	2403      	movs	r4, #3
    4eb2:	e764      	b.n	4d7e <usbd_event_handler+0x2a>
    4eb4:	0000cee8 	.word	0x0000cee8
    4eb8:	0000c110 	.word	0x0000c110
    4ebc:	0000cf1f 	.word	0x0000cf1f
    4ec0:	20001188 	.word	0x20001188
    4ec4:	200012f4 	.word	0x200012f4

00004ec8 <eps_ctx_init>:
{
    4ec8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4eca:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4ecc:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4ed0:	b2c0      	uxtb	r0, r0
    4ed2:	f7ff fdb9 	bl	4a48 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4ed6:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4ed8:	f006 f8aa 	bl	b030 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4edc:	2c08      	cmp	r4, #8
    4ede:	d1f5      	bne.n	4ecc <eps_ctx_init+0x4>
    4ee0:	4d0e      	ldr	r5, [pc, #56]	; (4f1c <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4ee2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4ee4:	b2e0      	uxtb	r0, r4
    4ee6:	f7ff fdaf 	bl	4a48 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4eea:	6903      	ldr	r3, [r0, #16]
    4eec:	b903      	cbnz	r3, 4ef0 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4eee:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4ef0:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4ef2:	f006 f89d 	bl	b030 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4ef6:	2c08      	cmp	r4, #8
    4ef8:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4efc:	d1f2      	bne.n	4ee4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    4efe:	4808      	ldr	r0, [pc, #32]	; (4f20 <eps_ctx_init+0x58>)
    4f00:	f006 f896 	bl	b030 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4f04:	4b07      	ldr	r3, [pc, #28]	; (4f24 <eps_ctx_init+0x5c>)
    4f06:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4f0a:	b912      	cbnz	r2, 4f12 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4f0c:	4a06      	ldr	r2, [pc, #24]	; (4f28 <eps_ctx_init+0x60>)
    4f0e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4f12:	4806      	ldr	r0, [pc, #24]	; (4f2c <eps_ctx_init+0x64>)
    4f14:	f006 f88c 	bl	b030 <ep_ctx_reset>
}
    4f18:	2000      	movs	r0, #0
    4f1a:	bd38      	pop	{r3, r4, r5, pc}
    4f1c:	20001818 	.word	0x20001818
    4f20:	200012d4 	.word	0x200012d4
    4f24:	20001188 	.word	0x20001188
    4f28:	20001418 	.word	0x20001418
    4f2c:	200013f4 	.word	0x200013f4

00004f30 <usbd_work_handler>:
{
    4f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    4f34:	4ca3      	ldr	r4, [pc, #652]	; (51c4 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f36:	f8df a290 	ldr.w	sl, [pc, #656]	; 51c8 <usbd_work_handler+0x298>
{
    4f3a:	b086      	sub	sp, #24
    4f3c:	4680      	mov	r8, r0
    4f3e:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    4f40:	f7ff fdc0 	bl	4ac4 <usbd_evt_get>
    4f44:	4606      	mov	r6, r0
    4f46:	b918      	cbnz	r0, 4f50 <usbd_work_handler+0x20>
}
    4f48:	3718      	adds	r7, #24
    4f4a:	46bd      	mov	sp, r7
    4f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    4f50:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4f54:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f56:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4f5a:	b93a      	cbnz	r2, 4f6c <usbd_work_handler+0x3c>
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	f000 80af 	beq.w	50c0 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f62:	4899      	ldr	r0, [pc, #612]	; (51c8 <usbd_work_handler+0x298>)
    4f64:	4649      	mov	r1, r9
    4f66:	f006 fbee 	bl	b746 <k_mem_slab_free>
}
    4f6a:	e7e9      	b.n	4f40 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    4f6c:	2b04      	cmp	r3, #4
    4f6e:	f200 8195 	bhi.w	529c <usbd_work_handler+0x36c>
    4f72:	e8df f013 	tbh	[pc, r3, lsl #1]
    4f76:	00a5      	.short	0x00a5
    4f78:	013b0005 	.word	0x013b0005
    4f7c:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    4f80:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    4f84:	b983      	cbnz	r3, 4fa8 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4f86:	68b3      	ldr	r3, [r6, #8]
    4f88:	466d      	mov	r5, sp
    4f8a:	b088      	sub	sp, #32
    4f8c:	7a5b      	ldrb	r3, [r3, #9]
    4f8e:	466a      	mov	r2, sp
    4f90:	498e      	ldr	r1, [pc, #568]	; (51cc <usbd_work_handler+0x29c>)
    4f92:	488f      	ldr	r0, [pc, #572]	; (51d0 <usbd_work_handler+0x2a0>)
    4f94:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4f98:	2303      	movs	r3, #3
    4f9a:	f842 3f10 	str.w	r3, [r2, #16]!
    4f9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fa2:	f006 f858 	bl	b056 <z_log_msg_static_create.constprop.0>
    4fa6:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    4fa8:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4faa:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    4fac:	2b03      	cmp	r3, #3
    4fae:	d839      	bhi.n	5024 <usbd_work_handler+0xf4>
    4fb0:	e8df f003 	tbb	[pc, r3]
    4fb4:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4fb8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4fba:	2208      	movs	r2, #8
    4fbc:	2100      	movs	r1, #0
    4fbe:	4630      	mov	r0, r6
    4fc0:	f005 ffe6 	bl	af90 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4fc4:	4b83      	ldr	r3, [pc, #524]	; (51d4 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4fc6:	4884      	ldr	r0, [pc, #528]	; (51d8 <usbd_work_handler+0x2a8>)
    4fc8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4fcc:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    4fce:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4fd2:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4fd4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4fd8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4fdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4fe0:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4fe2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4fe6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4fea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    4fee:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4ff0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4ff4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4ff8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4ffc:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4ffe:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5000:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5002:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5004:	f005 ffb9 	bl	af7a <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5008:	682b      	ldr	r3, [r5, #0]
    500a:	7a68      	ldrb	r0, [r5, #9]
    500c:	2100      	movs	r1, #0
    500e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5010:	f996 3000 	ldrsb.w	r3, [r6]
    5014:	2b00      	cmp	r3, #0
    5016:	db08      	blt.n	502a <usbd_work_handler+0xfa>
    5018:	88f3      	ldrh	r3, [r6, #6]
    501a:	b133      	cbz	r3, 502a <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    501c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5020:	f003 f9c8 	bl	83b4 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5024:	4649      	mov	r1, r9
    5026:	4650      	mov	r0, sl
    5028:	e79d      	b.n	4f66 <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    502a:	2300      	movs	r3, #0
    502c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    5030:	e7f8      	b.n	5024 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    5032:	7f6b      	ldrb	r3, [r5, #29]
    5034:	2b00      	cmp	r3, #0
    5036:	d0f5      	beq.n	5024 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    5038:	7f2b      	ldrb	r3, [r5, #28]
    503a:	2b00      	cmp	r3, #0
    503c:	d0f2      	beq.n	5024 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    503e:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5040:	4866      	ldr	r0, [pc, #408]	; (51dc <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    5042:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
    504c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    504e:	f006 f805 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    5052:	696b      	ldr	r3, [r5, #20]
    5054:	603b      	str	r3, [r7, #0]
    5056:	686b      	ldr	r3, [r5, #4]
    5058:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    505c:	4639      	mov	r1, r7
    505e:	7a68      	ldrb	r0, [r5, #9]
    5060:	f002 ffae 	bl	7fc0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5064:	4b5e      	ldr	r3, [pc, #376]	; (51e0 <usbd_work_handler+0x2b0>)
    5066:	4298      	cmp	r0, r3
    5068:	d00e      	beq.n	5088 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    506a:	466d      	mov	r5, sp
    506c:	b088      	sub	sp, #32
    506e:	466a      	mov	r2, sp
    5070:	4b5c      	ldr	r3, [pc, #368]	; (51e4 <usbd_work_handler+0x2b4>)
    5072:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5076:	2303      	movs	r3, #3
    5078:	f842 3f10 	str.w	r3, [r2, #16]!
    507c:	4854      	ldr	r0, [pc, #336]	; (51d0 <usbd_work_handler+0x2a0>)
    507e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5082:	f005 ffe8 	bl	b056 <z_log_msg_static_create.constprop.0>
    5086:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    5088:	4854      	ldr	r0, [pc, #336]	; (51dc <usbd_work_handler+0x2ac>)
    508a:	f005 ffe9 	bl	b060 <k_mutex_unlock.isra.0>
    508e:	e7c9      	b.n	5024 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5090:	682b      	ldr	r3, [r5, #0]
    5092:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5094:	7a68      	ldrb	r0, [r5, #9]
    5096:	4798      	blx	r3
		break;
    5098:	e7c4      	b.n	5024 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    509a:	7aab      	ldrb	r3, [r5, #10]
    509c:	b96b      	cbnz	r3, 50ba <usbd_work_handler+0x18a>
    509e:	7feb      	ldrb	r3, [r5, #31]
    50a0:	b95b      	cbnz	r3, 50ba <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    50a2:	484e      	ldr	r0, [pc, #312]	; (51dc <usbd_work_handler+0x2ac>)
    50a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50ac:	f005 ffd6 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    50b0:	f003 f9b0 	bl	8414 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    50b4:	4849      	ldr	r0, [pc, #292]	; (51dc <usbd_work_handler+0x2ac>)
    50b6:	f005 ffd3 	bl	b060 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    50ba:	682b      	ldr	r3, [r5, #0]
    50bc:	2102      	movs	r1, #2
    50be:	e7e9      	b.n	5094 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    50c0:	7a33      	ldrb	r3, [r6, #8]
    50c2:	2b04      	cmp	r3, #4
    50c4:	d8ae      	bhi.n	5024 <usbd_work_handler+0xf4>
    50c6:	e8df f003 	tbb	[pc, r3]
    50ca:	0359      	.short	0x0359
    50cc:	6723      	.short	0x6723
    50ce:	73          	.byte	0x73
    50cf:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    50d0:	f002 fefe 	bl	7ed0 <nrfx_usbd_is_enabled>
    50d4:	4605      	mov	r5, r0
    50d6:	2800      	cmp	r0, #0
    50d8:	d1a4      	bne.n	5024 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    50da:	f002 fe35 	bl	7d48 <nrfx_usbd_enable>
    50de:	f3bf 8f5b 	dmb	ish
    50e2:	4941      	ldr	r1, [pc, #260]	; (51e8 <usbd_work_handler+0x2b8>)
    50e4:	2301      	movs	r3, #1
    50e6:	e851 2f00 	ldrex	r2, [r1]
    50ea:	2a00      	cmp	r2, #0
    50ec:	d103      	bne.n	50f6 <usbd_work_handler+0x1c6>
    50ee:	e841 3000 	strex	r0, r3, [r1]
    50f2:	2800      	cmp	r0, #0
    50f4:	d1f7      	bne.n	50e6 <usbd_work_handler+0x1b6>
    50f6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    50fa:	d193      	bne.n	5024 <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    50fc:	f841 5c08 	str.w	r5, [r1, #-8]
    5100:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5104:	69e0      	ldr	r0, [r4, #28]
    5106:	6163      	str	r3, [r4, #20]
    5108:	3914      	subs	r1, #20
    510a:	f005 fb4a 	bl	a7a2 <onoff_request>
    510e:	e789      	b.n	5024 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    5110:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5112:	f065 007f 	orn	r0, r5, #127	; 0x7f
    5116:	b2c0      	uxtb	r0, r0
    5118:	f7ff fc96 	bl	4a48 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    511c:	7a03      	ldrb	r3, [r0, #8]
    511e:	b113      	cbz	r3, 5126 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5120:	7a40      	ldrb	r0, [r0, #9]
    5122:	f003 fb27 	bl	8774 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    5126:	3501      	adds	r5, #1
    5128:	2d08      	cmp	r5, #8
    512a:	d1f2      	bne.n	5112 <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    512c:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    5130:	b11b      	cbz	r3, 513a <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5132:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    5136:	f003 fb1d 	bl	8774 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    513a:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    513c:	b2e8      	uxtb	r0, r5
    513e:	f7ff fc83 	bl	4a48 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5142:	7a03      	ldrb	r3, [r0, #8]
    5144:	b113      	cbz	r3, 514c <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5146:	7a40      	ldrb	r0, [r0, #9]
    5148:	f003 fb14 	bl	8774 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    514c:	3501      	adds	r5, #1
    514e:	2d08      	cmp	r5, #8
    5150:	d1f4      	bne.n	513c <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    5152:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5156:	b11b      	cbz	r3, 5160 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5158:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    515c:	f003 fb0a 	bl	8774 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    5160:	2001      	movs	r0, #1
    5162:	f002 fe97 	bl	7e94 <nrfx_usbd_start>
		ctx->ready = true;
    5166:	2301      	movs	r3, #1
    5168:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    516c:	6823      	ldr	r3, [r4, #0]
    516e:	2b00      	cmp	r3, #0
    5170:	f43f af58 	beq.w	5024 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5174:	2100      	movs	r1, #0
    5176:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    5178:	4798      	blx	r3
    517a:	e753      	b.n	5024 <usbd_work_handler+0xf4>
		ctx->ready = false;
    517c:	2500      	movs	r5, #0
    517e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    5182:	f003 fab3 	bl	86ec <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5186:	f7ff fdc5 	bl	4d14 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    518a:	6823      	ldr	r3, [r4, #0]
    518c:	2b00      	cmp	r3, #0
    518e:	f43f af49 	beq.w	5024 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    5192:	4629      	mov	r1, r5
    5194:	2004      	movs	r0, #4
    5196:	e7ef      	b.n	5178 <usbd_work_handler+0x248>
		if (dev_ready()) {
    5198:	2a00      	cmp	r2, #0
    519a:	f43f af43 	beq.w	5024 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    519e:	f002 fea1 	bl	7ee4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    51a2:	6823      	ldr	r3, [r4, #0]
    51a4:	2b00      	cmp	r3, #0
    51a6:	f43f af3d 	beq.w	5024 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    51aa:	2100      	movs	r1, #0
    51ac:	2005      	movs	r0, #5
    51ae:	e7e3      	b.n	5178 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    51b0:	6823      	ldr	r3, [r4, #0]
    51b2:	2b00      	cmp	r3, #0
    51b4:	f43f af36 	beq.w	5024 <usbd_work_handler+0xf4>
    51b8:	2a00      	cmp	r2, #0
    51ba:	f43f af33 	beq.w	5024 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    51be:	2100      	movs	r1, #0
    51c0:	2006      	movs	r0, #6
    51c2:	e7d9      	b.n	5178 <usbd_work_handler+0x248>
    51c4:	20001188 	.word	0x20001188
    51c8:	20000188 	.word	0x20000188
    51cc:	0000cf3f 	.word	0x0000cf3f
    51d0:	0000c110 	.word	0x0000c110
    51d4:	40027000 	.word	0x40027000
    51d8:	2000118c 	.word	0x2000118c
    51dc:	200011c0 	.word	0x200011c0
    51e0:	0bad0000 	.word	0x0bad0000
    51e4:	0000cf65 	.word	0x0000cf65
    51e8:	200011a8 	.word	0x200011a8
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    51ec:	f108 0510 	add.w	r5, r8, #16
    51f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    51f8:	4628      	mov	r0, r5
    51fa:	f005 ff2f 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    51fe:	f7ff fe63 	bl	4ec8 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    5202:	4628      	mov	r0, r5
    5204:	f005 ff2c 	bl	b060 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5208:	f858 3c28 	ldr.w	r3, [r8, #-40]
    520c:	2b00      	cmp	r3, #0
    520e:	f43f af09 	beq.w	5024 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    5212:	2100      	movs	r1, #0
    5214:	2001      	movs	r0, #1
    5216:	e7af      	b.n	5178 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    5218:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    521c:	b193      	cbz	r3, 5244 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    521e:	2501      	movs	r5, #1
    5220:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    5224:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    5228:	f7ff fc62 	bl	4af0 <usbd_evt_alloc>
		if (!ev) {
    522c:	b990      	cbnz	r0, 5254 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    522e:	4b23      	ldr	r3, [pc, #140]	; (52bc <usbd_work_handler+0x38c>)
    5230:	617b      	str	r3, [r7, #20]
    5232:	2302      	movs	r3, #2
    5234:	4822      	ldr	r0, [pc, #136]	; (52c0 <usbd_work_handler+0x390>)
    5236:	613b      	str	r3, [r7, #16]
    5238:	f107 0210 	add.w	r2, r7, #16
    523c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5240:	f005 ff09 	bl	b056 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    5244:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5248:	2b00      	cmp	r3, #0
    524a:	f43f aeeb 	beq.w	5024 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    524e:	2100      	movs	r1, #0
    5250:	200a      	movs	r0, #10
    5252:	e791      	b.n	5178 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    5254:	4a1b      	ldr	r2, [pc, #108]	; (52c4 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    5256:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5258:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    525a:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    525c:	f7ff fc2c 	bl	4ab8 <usbd_evt_put>
		usbd_work_schedule();
    5260:	f7ff fc22 	bl	4aa8 <usbd_work_schedule>
    5264:	e7ee      	b.n	5244 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    5266:	4b18      	ldr	r3, [pc, #96]	; (52c8 <usbd_work_handler+0x398>)
    5268:	617b      	str	r3, [r7, #20]
    526a:	2302      	movs	r3, #2
    526c:	613b      	str	r3, [r7, #16]
    526e:	f107 0210 	add.w	r2, r7, #16
    5272:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5276:	4812      	ldr	r0, [pc, #72]	; (52c0 <usbd_work_handler+0x390>)
    5278:	f005 feed 	bl	b056 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    527c:	f006 f93b 	bl	b4f6 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    5280:	f003 fa34 	bl	86ec <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    5284:	f002 fd56 	bl	7d34 <nrfx_usbd_uninit>
	usbd_evt_flush();
    5288:	f7ff fc24 	bl	4ad4 <usbd_evt_flush>
	ret = eps_ctx_init();
    528c:	f7ff fe1c 	bl	4ec8 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    5290:	f006 f92a 	bl	b4e8 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    5294:	480d      	ldr	r0, [pc, #52]	; (52cc <usbd_work_handler+0x39c>)
    5296:	f002 fe51 	bl	7f3c <nrfx_usbd_init>
}
    529a:	e6c3      	b.n	5024 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    529c:	466d      	mov	r5, sp
    529e:	b088      	sub	sp, #32
    52a0:	466a      	mov	r2, sp
    52a2:	490b      	ldr	r1, [pc, #44]	; (52d0 <usbd_work_handler+0x3a0>)
    52a4:	4806      	ldr	r0, [pc, #24]	; (52c0 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    52a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    52aa:	2303      	movs	r3, #3
    52ac:	f842 3f10 	str.w	r3, [r2, #16]!
    52b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    52b4:	f005 fecf 	bl	b056 <z_log_msg_static_create.constprop.0>
    52b8:	46ad      	mov	sp, r5
    52ba:	e6b3      	b.n	5024 <usbd_work_handler+0xf4>
    52bc:	0000cf8b 	.word	0x0000cf8b
    52c0:	0000c110 	.word	0x0000c110
    52c4:	200013f4 	.word	0x200013f4
    52c8:	0000cf9f 	.word	0x0000cf9f
    52cc:	00004d55 	.word	0x00004d55
    52d0:	0000cfb6 	.word	0x0000cfb6

000052d4 <usb_dc_attach>:
{
    52d4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    52d6:	4d16      	ldr	r5, [pc, #88]	; (5330 <usb_dc_attach+0x5c>)
    52d8:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    52dc:	bb2c      	cbnz	r4, 532a <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    52de:	f105 0038 	add.w	r0, r5, #56	; 0x38
    52e2:	f006 fa75 	bl	b7d0 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    52e6:	4620      	mov	r0, r4
    52e8:	f000 fbb6 	bl	5a58 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    52ec:	4622      	mov	r2, r4
    52ee:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    52f0:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    52f2:	2027      	movs	r0, #39	; 0x27
    52f4:	f7fe fbbc 	bl	3a70 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    52f8:	f006 f8f6 	bl	b4e8 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    52fc:	f7ff fde4 	bl	4ec8 <eps_ctx_init>
	if (ret == 0) {
    5300:	4604      	mov	r4, r0
    5302:	b910      	cbnz	r0, 530a <usb_dc_attach+0x36>
		ctx->attached = true;
    5304:	2301      	movs	r3, #1
    5306:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    530a:	4b0a      	ldr	r3, [pc, #40]	; (5334 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	b10b      	cbz	r3, 5314 <usb_dc_attach+0x40>
		usbd_work_schedule();
    5310:	f7ff fbca 	bl	4aa8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    5314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5318:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    531c:	07db      	lsls	r3, r3, #31
    531e:	d502      	bpl.n	5326 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    5320:	2000      	movs	r0, #0
    5322:	f7ff fc21 	bl	4b68 <usb_dc_power_event_handler>
}
    5326:	4620      	mov	r0, r4
    5328:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    532a:	2400      	movs	r4, #0
    532c:	e7fb      	b.n	5326 <usb_dc_attach+0x52>
    532e:	bf00      	nop
    5330:	20001188 	.word	0x20001188
    5334:	20000218 	.word	0x20000218

00005338 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5338:	4b07      	ldr	r3, [pc, #28]	; (5358 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    533a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    533e:	b13a      	cbz	r2, 5350 <usb_dc_set_address+0x18>
    5340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    5344:	2b00      	cmp	r3, #0
    5346:	bf14      	ite	ne
    5348:	2000      	movne	r0, #0
    534a:	f06f 0012 	mvneq.w	r0, #18
    534e:	4770      	bx	lr
    5350:	f06f 0012 	mvn.w	r0, #18
}
    5354:	4770      	bx	lr
    5356:	bf00      	nop
    5358:	20001188 	.word	0x20001188

0000535c <usb_dc_ep_check_cap>:
{
    535c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    535e:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5360:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5362:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5364:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5368:	b97a      	cbnz	r2, 538a <usb_dc_ep_check_cap+0x2e>
    536a:	b158      	cbz	r0, 5384 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    536c:	4b0d      	ldr	r3, [pc, #52]	; (53a4 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    536e:	480e      	ldr	r0, [pc, #56]	; (53a8 <usb_dc_ep_check_cap+0x4c>)
    5370:	9305      	str	r3, [sp, #20]
    5372:	aa04      	add	r2, sp, #16
    5374:	2302      	movs	r3, #2
    5376:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    537a:	9304      	str	r3, [sp, #16]
    537c:	f005 fe6b 	bl	b056 <z_log_msg_static_create.constprop.0>
		return -1;
    5380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5384:	b007      	add	sp, #28
    5386:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    538a:	2808      	cmp	r0, #8
    538c:	d901      	bls.n	5392 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    538e:	4b07      	ldr	r3, [pc, #28]	; (53ac <usb_dc_ep_check_cap+0x50>)
    5390:	e7ed      	b.n	536e <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5392:	2a01      	cmp	r2, #1
    5394:	bf06      	itte	eq
    5396:	f083 0308 	eoreq.w	r3, r3, #8
    539a:	f343 00c0 	sbfxeq	r0, r3, #3, #1
	return 0;
    539e:	2000      	movne	r0, #0
    53a0:	e7f0      	b.n	5384 <usb_dc_ep_check_cap+0x28>
    53a2:	bf00      	nop
    53a4:	0000cfcd 	.word	0x0000cfcd
    53a8:	0000c110 	.word	0x0000c110
    53ac:	0000cfec 	.word	0x0000cfec

000053b0 <usb_dc_ep_configure>:
{
    53b0:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    53b2:	4b16      	ldr	r3, [pc, #88]	; (540c <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    53b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    53b8:	b087      	sub	sp, #28
    53ba:	4604      	mov	r4, r0
	if (!dev_attached()) {
    53bc:	b31b      	cbz	r3, 5406 <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    53be:	7805      	ldrb	r5, [r0, #0]
    53c0:	4628      	mov	r0, r5
    53c2:	f7ff fb41 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    53c6:	b1b0      	cbz	r0, 53f6 <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    53c8:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    53ca:	7923      	ldrb	r3, [r4, #4]
    53cc:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    53ce:	8863      	ldrh	r3, [r4, #2]
    53d0:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    53d2:	7820      	ldrb	r0, [r4, #0]
    53d4:	8861      	ldrh	r1, [r4, #2]
    53d6:	f010 0f08 	tst.w	r0, #8
    53da:	d110      	bne.n	53fe <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    53dc:	1e4b      	subs	r3, r1, #1
    53de:	420b      	tst	r3, r1
    53e0:	d00d      	beq.n	53fe <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    53e2:	4b0b      	ldr	r3, [pc, #44]	; (5410 <usb_dc_ep_configure+0x60>)
    53e4:	9305      	str	r3, [sp, #20]
    53e6:	480b      	ldr	r0, [pc, #44]	; (5414 <usb_dc_ep_configure+0x64>)
    53e8:	2302      	movs	r3, #2
    53ea:	aa04      	add	r2, sp, #16
    53ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    53f0:	9304      	str	r3, [sp, #16]
    53f2:	f005 fe30 	bl	b056 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    53f6:	f06f 0015 	mvn.w	r0, #21
}
    53fa:	b007      	add	sp, #28
    53fc:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    53fe:	f006 f92e 	bl	b65e <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    5402:	2000      	movs	r0, #0
    5404:	e7f9      	b.n	53fa <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    5406:	f06f 0012 	mvn.w	r0, #18
    540a:	e7f6      	b.n	53fa <usb_dc_ep_configure+0x4a>
    540c:	20001188 	.word	0x20001188
    5410:	0000d00b 	.word	0x0000d00b
    5414:	0000c110 	.word	0x0000c110

00005418 <usb_dc_ep_set_stall>:
{
    5418:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    541a:	4b19      	ldr	r3, [pc, #100]	; (5480 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    541c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5420:	b087      	sub	sp, #28
    5422:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    5424:	b342      	cbz	r2, 5478 <usb_dc_ep_set_stall+0x60>
    5426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    542a:	b32b      	cbz	r3, 5478 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    542c:	f7ff fb0c 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    5430:	4604      	mov	r4, r0
    5432:	b918      	cbnz	r0, 543c <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    5434:	f06f 0015 	mvn.w	r0, #21
}
    5438:	b007      	add	sp, #28
    543a:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    543c:	7a83      	ldrb	r3, [r0, #10]
    543e:	2b01      	cmp	r3, #1
    5440:	d00f      	beq.n	5462 <usb_dc_ep_set_stall+0x4a>
    5442:	d907      	bls.n	5454 <usb_dc_ep_set_stall+0x3c>
    5444:	3b02      	subs	r3, #2
    5446:	2b01      	cmp	r3, #1
    5448:	d907      	bls.n	545a <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    544a:	6963      	ldr	r3, [r4, #20]
    544c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    544e:	2000      	movs	r0, #0
    5450:	60e0      	str	r0, [r4, #12]
	return 0;
    5452:	e7f1      	b.n	5438 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    5454:	f002 ffe6 	bl	8424 <nrfx_usbd_setup_stall>
		break;
    5458:	e7f7      	b.n	544a <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    545a:	4628      	mov	r0, r5
    545c:	f002 ff56 	bl	830c <nrfx_usbd_ep_stall>
		break;
    5460:	e7f3      	b.n	544a <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    5462:	4b08      	ldr	r3, [pc, #32]	; (5484 <usb_dc_ep_set_stall+0x6c>)
    5464:	9305      	str	r3, [sp, #20]
    5466:	4808      	ldr	r0, [pc, #32]	; (5488 <usb_dc_ep_set_stall+0x70>)
    5468:	2302      	movs	r3, #2
    546a:	aa04      	add	r2, sp, #16
    546c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5470:	9304      	str	r3, [sp, #16]
    5472:	f005 fdf0 	bl	b056 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5476:	e7dd      	b.n	5434 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    5478:	f06f 0012 	mvn.w	r0, #18
    547c:	e7dc      	b.n	5438 <usb_dc_ep_set_stall+0x20>
    547e:	bf00      	nop
    5480:	20001188 	.word	0x20001188
    5484:	0000d033 	.word	0x0000d033
    5488:	0000c110 	.word	0x0000c110

0000548c <usb_dc_ep_clear_stall>:
{
    548c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    548e:	4b0e      	ldr	r3, [pc, #56]	; (54c8 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    5490:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5494:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    5496:	b182      	cbz	r2, 54ba <usb_dc_ep_clear_stall+0x2e>
    5498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    549c:	b16b      	cbz	r3, 54ba <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    549e:	f7ff fad3 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    54a2:	b168      	cbz	r0, 54c0 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    54a4:	f015 0408 	ands.w	r4, r5, #8
    54a8:	d10a      	bne.n	54c0 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    54aa:	4628      	mov	r0, r5
    54ac:	f002 ff50 	bl	8350 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    54b0:	4628      	mov	r0, r5
    54b2:	f003 f9b3 	bl	881c <nrfx_usbd_ep_stall_clear>
	return 0;
    54b6:	4620      	mov	r0, r4
}
    54b8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    54ba:	f06f 0012 	mvn.w	r0, #18
    54be:	e7fb      	b.n	54b8 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    54c0:	f06f 0015 	mvn.w	r0, #21
    54c4:	e7f8      	b.n	54b8 <usb_dc_ep_clear_stall+0x2c>
    54c6:	bf00      	nop
    54c8:	20001188 	.word	0x20001188

000054cc <usb_dc_ep_is_stalled>:
{
    54cc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    54ce:	4b0c      	ldr	r3, [pc, #48]	; (5500 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    54d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    54d4:	4605      	mov	r5, r0
    54d6:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    54d8:	b162      	cbz	r2, 54f4 <usb_dc_ep_is_stalled+0x28>
    54da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    54de:	b14b      	cbz	r3, 54f4 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    54e0:	f7ff fab2 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    54e4:	b148      	cbz	r0, 54fa <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    54e6:	b144      	cbz	r4, 54fa <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    54e8:	4628      	mov	r0, r5
    54ea:	f002 ff17 	bl	831c <nrfx_usbd_ep_stall_check>
    54ee:	7020      	strb	r0, [r4, #0]
	return 0;
    54f0:	2000      	movs	r0, #0
}
    54f2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    54f4:	f06f 0012 	mvn.w	r0, #18
    54f8:	e7fb      	b.n	54f2 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    54fa:	f06f 0015 	mvn.w	r0, #21
    54fe:	e7f8      	b.n	54f2 <usb_dc_ep_is_stalled+0x26>
    5500:	20001188 	.word	0x20001188

00005504 <usb_dc_ep_enable>:
{
    5504:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    5506:	4e13      	ldr	r6, [pc, #76]	; (5554 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    5508:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    550c:	4604      	mov	r4, r0
	if (!dev_attached()) {
    550e:	b1c3      	cbz	r3, 5542 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    5510:	f7ff fa9a 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    5514:	4605      	mov	r5, r0
    5516:	b1b8      	cbz	r0, 5548 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5518:	0723      	lsls	r3, r4, #28
    551a:	d405      	bmi.n	5528 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    551c:	4620      	mov	r0, r4
    551e:	f002 ff17 	bl	8350 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5522:	4620      	mov	r0, r4
    5524:	f003 f97a 	bl	881c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    5528:	7a2b      	ldrb	r3, [r5, #8]
    552a:	b983      	cbnz	r3, 554e <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    552c:	2301      	movs	r3, #1
    552e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    5530:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    5534:	b90b      	cbnz	r3, 553a <usb_dc_ep_enable+0x36>
	return 0;
    5536:	2000      	movs	r0, #0
}
    5538:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    553a:	4620      	mov	r0, r4
    553c:	f003 f91a 	bl	8774 <nrfx_usbd_ep_enable>
    5540:	e7f9      	b.n	5536 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    5542:	f06f 0012 	mvn.w	r0, #18
    5546:	e7f7      	b.n	5538 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    5548:	f06f 0015 	mvn.w	r0, #21
    554c:	e7f4      	b.n	5538 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    554e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5552:	e7f1      	b.n	5538 <usb_dc_ep_enable+0x34>
    5554:	20001188 	.word	0x20001188

00005558 <usb_dc_ep_write>:
{
    5558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    555c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 5684 <usb_dc_ep_write+0x12c>
{
    5560:	b084      	sub	sp, #16
    5562:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    5564:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    5568:	af00      	add	r7, sp, #0
    556a:	4680      	mov	r8, r0
    556c:	468a      	mov	sl, r1
    556e:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    5570:	2b00      	cmp	r3, #0
    5572:	f000 8083 	beq.w	567c <usb_dc_ep_write+0x124>
    5576:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    557a:	2b00      	cmp	r3, #0
    557c:	d07e      	beq.n	567c <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    557e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5582:	d014      	beq.n	55ae <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    5584:	f7ff fa60 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    5588:	4604      	mov	r4, r0
    558a:	b180      	cbz	r0, 55ae <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    558c:	7a03      	ldrb	r3, [r0, #8]
    558e:	b9ab      	cbnz	r3, 55bc <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5590:	466c      	mov	r4, sp
    5592:	b088      	sub	sp, #32
    5594:	466a      	mov	r2, sp
    5596:	4b3c      	ldr	r3, [pc, #240]	; (5688 <usb_dc_ep_write+0x130>)
    5598:	483c      	ldr	r0, [pc, #240]	; (568c <usb_dc_ep_write+0x134>)
    559a:	e9c2 3805 	strd	r3, r8, [r2, #20]
    559e:	2303      	movs	r3, #3
    55a0:	f842 3f10 	str.w	r3, [r2, #16]!
    55a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    55a8:	f005 fd55 	bl	b056 <z_log_msg_static_create.constprop.0>
    55ac:	46a5      	mov	sp, r4
		return -EINVAL;
    55ae:	f06f 0415 	mvn.w	r4, #21
}
    55b2:	4620      	mov	r0, r4
    55b4:	3710      	adds	r7, #16
    55b6:	46bd      	mov	sp, r7
    55b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    55bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    55c4:	f109 0038 	add.w	r0, r9, #56	; 0x38
    55c8:	f005 fd48 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    55cc:	7fa3      	ldrb	r3, [r4, #30]
    55ce:	b133      	cbz	r3, 55de <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    55d0:	f109 0038 	add.w	r0, r9, #56	; 0x38
    55d4:	f005 fd44 	bl	b060 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    55d8:	f06f 040a 	mvn.w	r4, #10
    55dc:	e7e9      	b.n	55b2 <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    55de:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    55e0:	b355      	cbz	r5, 5638 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    55e2:	2b00      	cmp	r3, #0
    55e4:	d038      	beq.n	5658 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    55e6:	2301      	movs	r3, #1
    55e8:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    55ea:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    55ee:	1d39      	adds	r1, r7, #4
    55f0:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    55f2:	e9c7 a501 	strd	sl, r5, [r7, #4]
    55f6:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    55fa:	f002 fce1 	bl	7fc0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    55fe:	4b24      	ldr	r3, [pc, #144]	; (5690 <usb_dc_ep_write+0x138>)
    5600:	4298      	cmp	r0, r3
    5602:	d037      	beq.n	5674 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    5604:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    5608:	b10e      	cbz	r6, 560e <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    560a:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    560e:	466c      	mov	r4, sp
    5610:	b088      	sub	sp, #32
    5612:	466a      	mov	r2, sp
    5614:	4b1f      	ldr	r3, [pc, #124]	; (5694 <usb_dc_ep_write+0x13c>)
    5616:	e9c2 3005 	strd	r3, r0, [r2, #20]
    561a:	2303      	movs	r3, #3
    561c:	f842 3f10 	str.w	r3, [r2, #16]!
    5620:	481a      	ldr	r0, [pc, #104]	; (568c <usb_dc_ep_write+0x134>)
    5622:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5626:	f005 fd16 	bl	b056 <z_log_msg_static_create.constprop.0>
    562a:	46a5      	mov	sp, r4
		result = -EIO;
    562c:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    5630:	4819      	ldr	r0, [pc, #100]	; (5698 <usb_dc_ep_write+0x140>)
    5632:	f005 fd15 	bl	b060 <k_mutex_unlock.isra.0>
	return result;
    5636:	e7bc      	b.n	55b2 <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    5638:	7fe2      	ldrb	r2, [r4, #31]
    563a:	b102      	cbz	r2, 563e <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    563c:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    563e:	2b00      	cmp	r3, #0
    5640:	d1d1      	bne.n	55e6 <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5642:	f002 fef7 	bl	8434 <nrfx_usbd_last_setup_dir_get>
    5646:	4580      	cmp	r8, r0
    5648:	d0cd      	beq.n	55e6 <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    564a:	f002 fee3 	bl	8414 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    564e:	4812      	ldr	r0, [pc, #72]	; (5698 <usb_dc_ep_write+0x140>)
    5650:	f005 fd06 	bl	b060 <k_mutex_unlock.isra.0>
		return 0;
    5654:	2400      	movs	r4, #0
    5656:	e7ac      	b.n	55b2 <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5658:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    565c:	429d      	cmp	r5, r3
    565e:	d2f0      	bcs.n	5642 <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5660:	6862      	ldr	r2, [r4, #4]
    5662:	fbb5 f3f2 	udiv	r3, r5, r2
    5666:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    566a:	2b00      	cmp	r3, #0
    566c:	d1e9      	bne.n	5642 <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    566e:	2301      	movs	r3, #1
    5670:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5672:	e7e6      	b.n	5642 <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    5674:	b106      	cbz	r6, 5678 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    5676:	6035      	str	r5, [r6, #0]
	int result = 0;
    5678:	2400      	movs	r4, #0
    567a:	e7d9      	b.n	5630 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    567c:	f06f 0412 	mvn.w	r4, #18
    5680:	e797      	b.n	55b2 <usb_dc_ep_write+0x5a>
    5682:	bf00      	nop
    5684:	20001188 	.word	0x20001188
    5688:	0000d055 	.word	0x0000d055
    568c:	0000c110 	.word	0x0000c110
    5690:	0bad0000 	.word	0x0bad0000
    5694:	0000d074 	.word	0x0000d074
    5698:	200011c0 	.word	0x200011c0

0000569c <usb_dc_ep_read_wait>:
{
    569c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56a0:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    56a2:	4b2d      	ldr	r3, [pc, #180]	; (5758 <usb_dc_ep_read_wait+0xbc>)
{
    56a4:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    56a6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    56aa:	af00      	add	r7, sp, #0
    56ac:	4681      	mov	r9, r0
    56ae:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    56b0:	2a00      	cmp	r2, #0
    56b2:	d04d      	beq.n	5750 <usb_dc_ep_read_wait+0xb4>
    56b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56b8:	2b00      	cmp	r3, #0
    56ba:	d049      	beq.n	5750 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    56bc:	f010 0f80 	tst.w	r0, #128	; 0x80
    56c0:	d119      	bne.n	56f6 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    56c2:	b911      	cbnz	r1, 56ca <usb_dc_ep_read_wait+0x2e>
    56c4:	f1b8 0f00 	cmp.w	r8, #0
    56c8:	d115      	bne.n	56f6 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    56ca:	4648      	mov	r0, r9
    56cc:	f7ff f9bc 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    56d0:	4604      	mov	r4, r0
    56d2:	b180      	cbz	r0, 56f6 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    56d4:	7a03      	ldrb	r3, [r0, #8]
    56d6:	b98b      	cbnz	r3, 56fc <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    56d8:	466c      	mov	r4, sp
    56da:	b088      	sub	sp, #32
    56dc:	466a      	mov	r2, sp
    56de:	4b1f      	ldr	r3, [pc, #124]	; (575c <usb_dc_ep_read_wait+0xc0>)
    56e0:	481f      	ldr	r0, [pc, #124]	; (5760 <usb_dc_ep_read_wait+0xc4>)
    56e2:	e9c2 3905 	strd	r3, r9, [r2, #20]
    56e6:	2303      	movs	r3, #3
    56e8:	f842 3f10 	str.w	r3, [r2, #16]!
    56ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    56f0:	f005 fcb1 	bl	b056 <z_log_msg_static_create.constprop.0>
    56f4:	46a5      	mov	sp, r4
		return -EINVAL;
    56f6:	f06f 0015 	mvn.w	r0, #21
    56fa:	e015      	b.n	5728 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    56fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5700:	4818      	ldr	r0, [pc, #96]	; (5764 <usb_dc_ep_read_wait+0xc8>)
    5702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5706:	f005 fca9 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    570a:	68e3      	ldr	r3, [r4, #12]
    570c:	4598      	cmp	r8, r3
    570e:	46c1      	mov	r9, r8
    5710:	bf28      	it	cs
    5712:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    5714:	b95e      	cbnz	r6, 572e <usb_dc_ep_read_wait+0x92>
    5716:	f1b8 0f00 	cmp.w	r8, #0
    571a:	d108      	bne.n	572e <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    571c:	b105      	cbz	r5, 5720 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    571e:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    5720:	4810      	ldr	r0, [pc, #64]	; (5764 <usb_dc_ep_read_wait+0xc8>)
    5722:	f005 fc9d 	bl	b060 <k_mutex_unlock.isra.0>
		return 0;
    5726:	2000      	movs	r0, #0
}
    5728:	46bd      	mov	sp, r7
    572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    572e:	69a1      	ldr	r1, [r4, #24]
    5730:	464a      	mov	r2, r9
    5732:	4630      	mov	r0, r6
    5734:	f005 fc21 	bl	af7a <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5738:	69a3      	ldr	r3, [r4, #24]
    573a:	444b      	add	r3, r9
    573c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    573e:	68e3      	ldr	r3, [r4, #12]
    5740:	eba3 0309 	sub.w	r3, r3, r9
    5744:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5746:	2d00      	cmp	r5, #0
    5748:	d0ea      	beq.n	5720 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    574a:	f8c5 9000 	str.w	r9, [r5]
    574e:	e7e7      	b.n	5720 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    5750:	f06f 0012 	mvn.w	r0, #18
    5754:	e7e8      	b.n	5728 <usb_dc_ep_read_wait+0x8c>
    5756:	bf00      	nop
    5758:	20001188 	.word	0x20001188
    575c:	0000d055 	.word	0x0000d055
    5760:	0000c110 	.word	0x0000c110
    5764:	200011c0 	.word	0x200011c0

00005768 <usb_dc_ep_read_continue>:
{
    5768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    576a:	4d27      	ldr	r5, [pc, #156]	; (5808 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    576c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    5770:	af00      	add	r7, sp, #0
    5772:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    5774:	2b00      	cmp	r3, #0
    5776:	d044      	beq.n	5802 <usb_dc_ep_read_continue+0x9a>
    5778:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    577c:	2b00      	cmp	r3, #0
    577e:	d040      	beq.n	5802 <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5780:	0603      	lsls	r3, r0, #24
    5782:	d414      	bmi.n	57ae <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    5784:	f7ff f960 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    5788:	4604      	mov	r4, r0
    578a:	b180      	cbz	r0, 57ae <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    578c:	7a03      	ldrb	r3, [r0, #8]
    578e:	b993      	cbnz	r3, 57b6 <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5790:	466c      	mov	r4, sp
    5792:	b088      	sub	sp, #32
    5794:	466a      	mov	r2, sp
    5796:	4b1d      	ldr	r3, [pc, #116]	; (580c <usb_dc_ep_read_continue+0xa4>)
    5798:	481d      	ldr	r0, [pc, #116]	; (5810 <usb_dc_ep_read_continue+0xa8>)
    579a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    579e:	2303      	movs	r3, #3
    57a0:	f842 3f10 	str.w	r3, [r2, #16]!
    57a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    57a8:	f005 fc55 	bl	b056 <z_log_msg_static_create.constprop.0>
    57ac:	46a5      	mov	sp, r4
		return -EINVAL;
    57ae:	f06f 0015 	mvn.w	r0, #21
}
    57b2:	46bd      	mov	sp, r7
    57b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    57b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    57ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57be:	f105 0038 	add.w	r0, r5, #56	; 0x38
    57c2:	f005 fc4b 	bl	b05c <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    57c6:	68e3      	ldr	r3, [r4, #12]
    57c8:	b9b3      	cbnz	r3, 57f8 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    57ca:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    57cc:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    57ce:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    57d0:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    57d2:	7f63      	ldrb	r3, [r4, #29]
    57d4:	b183      	cbz	r3, 57f8 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    57d6:	f7ff f98b 	bl	4af0 <usbd_evt_alloc>
			if (!ev) {
    57da:	b930      	cbnz	r0, 57ea <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    57dc:	f105 0038 	add.w	r0, r5, #56	; 0x38
    57e0:	f005 fc3e 	bl	b060 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    57e4:	f06f 000b 	mvn.w	r0, #11
    57e8:	e7e3      	b.n	57b2 <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    57ea:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    57ec:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    57ee:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    57f0:	f7ff f962 	bl	4ab8 <usbd_evt_put>
			usbd_work_schedule();
    57f4:	f7ff f958 	bl	4aa8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    57f8:	4806      	ldr	r0, [pc, #24]	; (5814 <usb_dc_ep_read_continue+0xac>)
    57fa:	f005 fc31 	bl	b060 <k_mutex_unlock.isra.0>
	return 0;
    57fe:	2000      	movs	r0, #0
    5800:	e7d7      	b.n	57b2 <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    5802:	f06f 0012 	mvn.w	r0, #18
    5806:	e7d4      	b.n	57b2 <usb_dc_ep_read_continue+0x4a>
    5808:	20001188 	.word	0x20001188
    580c:	0000d055 	.word	0x0000d055
    5810:	0000c110 	.word	0x0000c110
    5814:	200011c0 	.word	0x200011c0

00005818 <usb_dc_ep_set_callback>:
{
    5818:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    581a:	4b08      	ldr	r3, [pc, #32]	; (583c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    581c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5820:	460c      	mov	r4, r1
	if (!dev_attached()) {
    5822:	b12b      	cbz	r3, 5830 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    5824:	f7ff f910 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    5828:	b128      	cbz	r0, 5836 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    582a:	6004      	str	r4, [r0, #0]
	return 0;
    582c:	2000      	movs	r0, #0
}
    582e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5830:	f06f 0012 	mvn.w	r0, #18
    5834:	e7fb      	b.n	582e <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    5836:	f06f 0015 	mvn.w	r0, #21
    583a:	e7f8      	b.n	582e <usb_dc_ep_set_callback+0x16>
    583c:	20001188 	.word	0x20001188

00005840 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    5840:	4b01      	ldr	r3, [pc, #4]	; (5848 <usb_dc_set_status_callback+0x8>)
    5842:	6018      	str	r0, [r3, #0]
}
    5844:	4770      	bx	lr
    5846:	bf00      	nop
    5848:	20001188 	.word	0x20001188

0000584c <usb_dc_ep_mps>:
{
    584c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    584e:	4b07      	ldr	r3, [pc, #28]	; (586c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    5850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5854:	b123      	cbz	r3, 5860 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5856:	f7ff f8f7 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    585a:	b120      	cbz	r0, 5866 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    585c:	6840      	ldr	r0, [r0, #4]
}
    585e:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5860:	f06f 0012 	mvn.w	r0, #18
    5864:	e7fb      	b.n	585e <usb_dc_ep_mps+0x12>
		return -EINVAL;
    5866:	f06f 0015 	mvn.w	r0, #21
    586a:	e7f8      	b.n	585e <usb_dc_ep_mps+0x12>
    586c:	20001188 	.word	0x20001188

00005870 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5870:	4b08      	ldr	r3, [pc, #32]	; (5894 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5872:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5874:	1ac3      	subs	r3, r0, r3
{
    5876:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5878:	4907      	ldr	r1, [pc, #28]	; (5898 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    587a:	109b      	asrs	r3, r3, #2
{
    587c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    587e:	4359      	muls	r1, r3
    5880:	4806      	ldr	r0, [pc, #24]	; (589c <onoff_stop+0x2c>)
    5882:	2240      	movs	r2, #64	; 0x40
    5884:	f005 fc32 	bl	b0ec <stop>
	notify(mgr, res);
    5888:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    588a:	4601      	mov	r1, r0
	notify(mgr, res);
    588c:	4620      	mov	r0, r4
}
    588e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5892:	4718      	bx	r3
    5894:	20001a2c 	.word	0x20001a2c
    5898:	b6db6db7 	.word	0xb6db6db7
    589c:	0000be18 	.word	0x0000be18

000058a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    58a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    58a2:	4c0c      	ldr	r4, [pc, #48]	; (58d4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58a4:	4a0c      	ldr	r2, [pc, #48]	; (58d8 <onoff_start+0x38>)
    58a6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    58a8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58aa:	9300      	str	r3, [sp, #0]
{
    58ac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58ae:	460b      	mov	r3, r1
    58b0:	490a      	ldr	r1, [pc, #40]	; (58dc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    58b2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58b4:	4361      	muls	r1, r4
{
    58b6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58b8:	4809      	ldr	r0, [pc, #36]	; (58e0 <onoff_start+0x40>)
    58ba:	f005 fc43 	bl	b144 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    58be:	1e01      	subs	r1, r0, #0
    58c0:	da05      	bge.n	58ce <onoff_start+0x2e>
		notify(mgr, err);
    58c2:	4630      	mov	r0, r6
    58c4:	462b      	mov	r3, r5
	}
}
    58c6:	b002      	add	sp, #8
    58c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    58cc:	4718      	bx	r3
}
    58ce:	b002      	add	sp, #8
    58d0:	bd70      	pop	{r4, r5, r6, pc}
    58d2:	bf00      	nop
    58d4:	20001a2c 	.word	0x20001a2c
    58d8:	0000b1af 	.word	0x0000b1af
    58dc:	b6db6db7 	.word	0xb6db6db7
    58e0:	0000be18 	.word	0x0000be18

000058e4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    58e4:	2200      	movs	r2, #0
{
    58e6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    58e8:	2101      	movs	r1, #1
{
    58ea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    58ec:	4610      	mov	r0, r2
    58ee:	f7fe f8bf 	bl	3a70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    58f2:	480f      	ldr	r0, [pc, #60]	; (5930 <clk_init+0x4c>)
    58f4:	f001 f904 	bl	6b00 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    58f8:	4b0e      	ldr	r3, [pc, #56]	; (5934 <clk_init+0x50>)
    58fa:	4298      	cmp	r0, r3
    58fc:	d115      	bne.n	592a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    58fe:	f001 f90f 	bl	6b20 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5902:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5904:	490c      	ldr	r1, [pc, #48]	; (5938 <clk_init+0x54>)
    5906:	4630      	mov	r0, r6
    5908:	f004 ff38 	bl	a77c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    590c:	2800      	cmp	r0, #0
    590e:	db0b      	blt.n	5928 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5910:	2501      	movs	r5, #1
    5912:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5914:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5916:	4908      	ldr	r1, [pc, #32]	; (5938 <clk_init+0x54>)
    5918:	f104 001c 	add.w	r0, r4, #28
    591c:	f004 ff2e 	bl	a77c <onoff_manager_init>
		if (err < 0) {
    5920:	2800      	cmp	r0, #0
    5922:	db01      	blt.n	5928 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5924:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5926:	2000      	movs	r0, #0
}
    5928:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    592a:	f06f 0004 	mvn.w	r0, #4
    592e:	e7fb      	b.n	5928 <clk_init+0x44>
    5930:	00005971 	.word	0x00005971
    5934:	0bad0000 	.word	0x0bad0000
    5938:	0000c1c0 	.word	0x0000c1c0

0000593c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    593c:	b570      	push	{r4, r5, r6, lr}
    593e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5940:	230c      	movs	r3, #12
    5942:	4809      	ldr	r0, [pc, #36]	; (5968 <clkstarted_handle.constprop.0+0x2c>)
    5944:	434b      	muls	r3, r1
    5946:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5948:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    594c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    594e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5950:	4418      	add	r0, r3
	sub_data->cb = NULL;
    5952:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5954:	f005 fbb7 	bl	b0c6 <set_on_state>
	if (callback) {
    5958:	b12d      	cbz	r5, 5966 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    595a:	4632      	mov	r2, r6
    595c:	462b      	mov	r3, r5
    595e:	4803      	ldr	r0, [pc, #12]	; (596c <clkstarted_handle.constprop.0+0x30>)
}
    5960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5964:	4718      	bx	r3
}
    5966:	bd70      	pop	{r4, r5, r6, pc}
    5968:	20001a2c 	.word	0x20001a2c
    596c:	0000be18 	.word	0x0000be18

00005970 <clock_event_handler>:
	switch (event) {
    5970:	b110      	cbz	r0, 5978 <clock_event_handler+0x8>
    5972:	2801      	cmp	r0, #1
    5974:	d004      	beq.n	5980 <clock_event_handler+0x10>
    5976:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5978:	4b03      	ldr	r3, [pc, #12]	; (5988 <clock_event_handler+0x18>)
    597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    597c:	075b      	lsls	r3, r3, #29
    597e:	d101      	bne.n	5984 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5980:	f7ff bfdc 	b.w	593c <clkstarted_handle.constprop.0>
}
    5984:	4770      	bx	lr
    5986:	bf00      	nop
    5988:	20001a2c 	.word	0x20001a2c

0000598c <generic_hfclk_start>:
{
    598c:	b508      	push	{r3, lr}
	__asm__ volatile(
    598e:	f04f 0320 	mov.w	r3, #32
    5992:	f3ef 8111 	mrs	r1, BASEPRI
    5996:	f383 8812 	msr	BASEPRI_MAX, r3
    599a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    599e:	4a12      	ldr	r2, [pc, #72]	; (59e8 <generic_hfclk_start+0x5c>)
    59a0:	6813      	ldr	r3, [r2, #0]
    59a2:	f043 0002 	orr.w	r0, r3, #2
    59a6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    59a8:	07da      	lsls	r2, r3, #31
    59aa:	d408      	bmi.n	59be <generic_hfclk_start+0x32>
	__asm__ volatile(
    59ac:	f381 8811 	msr	BASEPRI, r1
    59b0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    59b4:	2001      	movs	r0, #1
}
    59b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    59ba:	f005 bcf3 	b.w	b3a4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    59be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    59c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    59ca:	07d3      	lsls	r3, r2, #31
    59cc:	d5ee      	bpl.n	59ac <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    59ce:	4807      	ldr	r0, [pc, #28]	; (59ec <generic_hfclk_start+0x60>)
    59d0:	f005 fb79 	bl	b0c6 <set_on_state>
    59d4:	f381 8811 	msr	BASEPRI, r1
    59d8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    59dc:	2000      	movs	r0, #0
}
    59de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    59e2:	f7ff bfab 	b.w	593c <clkstarted_handle.constprop.0>
    59e6:	bf00      	nop
    59e8:	20001a7c 	.word	0x20001a7c
    59ec:	20001a6c 	.word	0x20001a6c

000059f0 <api_blocking_start>:
{
    59f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    59f2:	2200      	movs	r2, #0
    59f4:	2301      	movs	r3, #1
    59f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    59fa:	4a09      	ldr	r2, [pc, #36]	; (5a20 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    59fc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5a00:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5a02:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5a06:	f005 fbcb 	bl	b1a0 <api_start>
	if (err < 0) {
    5a0a:	2800      	cmp	r0, #0
    5a0c:	db05      	blt.n	5a1a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    5a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5a12:	2300      	movs	r3, #0
    5a14:	4668      	mov	r0, sp
    5a16:	f003 fb3d 	bl	9094 <z_impl_k_sem_take>
}
    5a1a:	b005      	add	sp, #20
    5a1c:	f85d fb04 	ldr.w	pc, [sp], #4
    5a20:	0000b1cd 	.word	0x0000b1cd

00005a24 <generic_hfclk_stop>:
{
    5a24:	b510      	push	{r4, lr}
	__asm__ volatile(
    5a26:	f04f 0320 	mov.w	r3, #32
    5a2a:	f3ef 8411 	mrs	r4, BASEPRI
    5a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a32:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    5a36:	4a07      	ldr	r2, [pc, #28]	; (5a54 <generic_hfclk_stop+0x30>)
    5a38:	6813      	ldr	r3, [r2, #0]
    5a3a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    5a3e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    5a40:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    5a42:	d402      	bmi.n	5a4a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5a44:	2001      	movs	r0, #1
    5a46:	f005 fce9 	bl	b41c <nrfx_clock_stop>
	__asm__ volatile(
    5a4a:	f384 8811 	msr	BASEPRI, r4
    5a4e:	f3bf 8f6f 	isb	sy
}
    5a52:	bd10      	pop	{r4, pc}
    5a54:	20001a7c 	.word	0x20001a7c

00005a58 <z_nrf_clock_control_get_onoff>:
}
    5a58:	4a02      	ldr	r2, [pc, #8]	; (5a64 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5a5a:	b2c3      	uxtb	r3, r0
}
    5a5c:	201c      	movs	r0, #28
    5a5e:	fb03 2000 	mla	r0, r3, r0, r2
    5a62:	4770      	bx	lr
    5a64:	20001a2c 	.word	0x20001a2c

00005a68 <z_nrf_clock_control_lf_on>:
{
    5a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5a6c:	4938      	ldr	r1, [pc, #224]	; (5b50 <z_nrf_clock_control_lf_on+0xe8>)
    5a6e:	f3bf 8f5b 	dmb	ish
    5a72:	4607      	mov	r7, r0
    5a74:	2201      	movs	r2, #1
    5a76:	e851 3f00 	ldrex	r3, [r1]
    5a7a:	e841 2000 	strex	r0, r2, [r1]
    5a7e:	2800      	cmp	r0, #0
    5a80:	d1f9      	bne.n	5a76 <z_nrf_clock_control_lf_on+0xe>
    5a82:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5a86:	b933      	cbnz	r3, 5a96 <z_nrf_clock_control_lf_on+0x2e>
    5a88:	4932      	ldr	r1, [pc, #200]	; (5b54 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    5a8a:	4833      	ldr	r0, [pc, #204]	; (5b58 <z_nrf_clock_control_lf_on+0xf0>)
    5a8c:	604b      	str	r3, [r1, #4]
    5a8e:	60cb      	str	r3, [r1, #12]
    5a90:	608a      	str	r2, [r1, #8]
    5a92:	f004 fe86 	bl	a7a2 <onoff_request>
	switch (start_mode) {
    5a96:	1e7b      	subs	r3, r7, #1
    5a98:	2b01      	cmp	r3, #1
    5a9a:	d82b      	bhi.n	5af4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5a9c:	2f01      	cmp	r7, #1
    5a9e:	d107      	bne.n	5ab0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5aa4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5aa8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5aac:	2b01      	cmp	r3, #1
    5aae:	d021      	beq.n	5af4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5ab0:	f005 fe72 	bl	b798 <k_is_in_isr>
    5ab4:	4605      	mov	r5, r0
    5ab6:	b9f8      	cbnz	r0, 5af8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    5ab8:	4b28      	ldr	r3, [pc, #160]	; (5b5c <z_nrf_clock_control_lf_on+0xf4>)
    5aba:	781b      	ldrb	r3, [r3, #0]
    5abc:	b1e3      	cbz	r3, 5af8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    5abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ac2:	2202      	movs	r2, #2
    5ac4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5ac8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5aca:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5b60 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5ace:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    5ad2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5ad6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    5ada:	03d2      	lsls	r2, r2, #15
    5adc:	d516      	bpl.n	5b0c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5ade:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5ae2:	2b01      	cmp	r3, #1
    5ae4:	d001      	beq.n	5aea <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5ae6:	2f01      	cmp	r7, #1
    5ae8:	d110      	bne.n	5b0c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    5aea:	b35d      	cbz	r5, 5b44 <z_nrf_clock_control_lf_on+0xdc>
    5aec:	f386 8811 	msr	BASEPRI, r6
    5af0:	f3bf 8f6f 	isb	sy
}
    5af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    5af8:	f04f 0320 	mov.w	r3, #32
    5afc:	f3ef 8611 	mrs	r6, BASEPRI
    5b00:	f383 8812 	msr	BASEPRI_MAX, r3
    5b04:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5b08:	2501      	movs	r5, #1
    5b0a:	e7de      	b.n	5aca <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5b0c:	b1ad      	cbz	r5, 5b3a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5b0e:	4630      	mov	r0, r6
    5b10:	f7fd ff0c 	bl	392c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5b14:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d1da      	bne.n	5ad2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5b1c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5b20:	2a00      	cmp	r2, #0
    5b22:	d0d6      	beq.n	5ad2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b24:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5b28:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5b2c:	2301      	movs	r3, #1
    5b2e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    5b32:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b36:	60a3      	str	r3, [r4, #8]
}
    5b38:	e7cb      	b.n	5ad2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    5b3a:	2100      	movs	r1, #0
    5b3c:	2021      	movs	r0, #33	; 0x21
    5b3e:	f003 fee1 	bl	9904 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5b42:	e7e7      	b.n	5b14 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    5b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b48:	2202      	movs	r2, #2
    5b4a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5b4e:	e7d1      	b.n	5af4 <z_nrf_clock_control_lf_on+0x8c>
    5b50:	20001a28 	.word	0x20001a28
    5b54:	20001a18 	.word	0x20001a18
    5b58:	20001a48 	.word	0x20001a48
    5b5c:	20001f9e 	.word	0x20001f9e
    5b60:	e000e100 	.word	0xe000e100

00005b64 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5b64:	b530      	push	{r4, r5, lr}
	return port->config;
    5b66:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5b68:	7b05      	ldrb	r5, [r0, #12]
    5b6a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5b6e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5b72:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5b74:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5b78:	d105      	bne.n	5b86 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5b7a:	4620      	mov	r0, r4
    5b7c:	f001 fa54 	bl	7028 <nrfx_gpiote_trigger_disable>

		return 0;
    5b80:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5b82:	b005      	add	sp, #20
    5b84:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b86:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5b88:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b8c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5b90:	d114      	bne.n	5bbc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5b96:	bf0c      	ite	eq
    5b98:	2304      	moveq	r3, #4
    5b9a:	2305      	movne	r3, #5
    5b9c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ba0:	2300      	movs	r3, #0
    5ba2:	4619      	mov	r1, r3
    5ba4:	aa02      	add	r2, sp, #8
    5ba6:	4620      	mov	r0, r4
    5ba8:	f001 f87c 	bl	6ca4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5bac:	4b1f      	ldr	r3, [pc, #124]	; (5c2c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5bae:	4298      	cmp	r0, r3
    5bb0:	d139      	bne.n	5c26 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5bb2:	2101      	movs	r1, #1
    5bb4:	4620      	mov	r0, r4
    5bb6:	f001 f9ef 	bl	6f98 <nrfx_gpiote_trigger_enable>
	return 0;
    5bba:	e7e1      	b.n	5b80 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5bbc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5bc0:	d026      	beq.n	5c10 <gpio_nrfx_pin_interrupt_configure+0xac>
    5bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5bc6:	bf14      	ite	ne
    5bc8:	2301      	movne	r3, #1
    5bca:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5bcc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5bd0:	6883      	ldr	r3, [r0, #8]
    5bd2:	40cb      	lsrs	r3, r1
    5bd4:	07d9      	lsls	r1, r3, #31
    5bd6:	d4e3      	bmi.n	5ba0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    5bd8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5bdc:	d1e0      	bne.n	5ba0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    5bde:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    5be0:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5be2:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    5be6:	4a12      	ldr	r2, [pc, #72]	; (5c30 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5be8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5bec:	bf18      	it	ne
    5bee:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5bf6:	07db      	lsls	r3, r3, #31
    5bf8:	d4d2      	bmi.n	5ba0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5bfa:	f10d 0507 	add.w	r5, sp, #7
    5bfe:	4629      	mov	r1, r5
    5c00:	4620      	mov	r0, r4
    5c02:	f001 f975 	bl	6ef0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5c06:	4b0b      	ldr	r3, [pc, #44]	; (5c34 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    5c08:	4298      	cmp	r0, r3
    5c0a:	d003      	beq.n	5c14 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    5c0c:	9503      	str	r5, [sp, #12]
    5c0e:	e7c7      	b.n	5ba0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5c10:	2303      	movs	r3, #3
    5c12:	e7db      	b.n	5bcc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    5c14:	4628      	mov	r0, r5
    5c16:	f001 f9b9 	bl	6f8c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5c1a:	4b04      	ldr	r3, [pc, #16]	; (5c2c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5c1c:	4298      	cmp	r0, r3
    5c1e:	d0f5      	beq.n	5c0c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    5c20:	f06f 000b 	mvn.w	r0, #11
    5c24:	e7ad      	b.n	5b82 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5c26:	f06f 0015 	mvn.w	r0, #21
    5c2a:	e7aa      	b.n	5b82 <gpio_nrfx_pin_interrupt_configure+0x1e>
    5c2c:	0bad0000 	.word	0x0bad0000
    5c30:	50000300 	.word	0x50000300
    5c34:	0bad0004 	.word	0x0bad0004

00005c38 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5c38:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5c3a:	f001 f997 	bl	6f6c <nrfx_gpiote_is_init>
    5c3e:	4604      	mov	r4, r0
    5c40:	b968      	cbnz	r0, 5c5e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5c42:	f001 f96b 	bl	6f1c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5c46:	4b08      	ldr	r3, [pc, #32]	; (5c68 <gpio_nrfx_init+0x30>)
    5c48:	4298      	cmp	r0, r3
    5c4a:	d10a      	bne.n	5c62 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5c4c:	4807      	ldr	r0, [pc, #28]	; (5c6c <gpio_nrfx_init+0x34>)
    5c4e:	4621      	mov	r1, r4
    5c50:	f001 f948 	bl	6ee4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5c54:	4622      	mov	r2, r4
    5c56:	2105      	movs	r1, #5
    5c58:	2006      	movs	r0, #6
    5c5a:	f7fd ff09 	bl	3a70 <z_arm_irq_priority_set>
		return 0;
    5c5e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5c60:	bd10      	pop	{r4, pc}
		return -EIO;
    5c62:	f06f 0004 	mvn.w	r0, #4
    5c66:	e7fb      	b.n	5c60 <gpio_nrfx_init+0x28>
    5c68:	0bad0000 	.word	0x0bad0000
    5c6c:	00005c71 	.word	0x00005c71

00005c70 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c70:	0942      	lsrs	r2, r0, #5
{
    5c72:	b570      	push	{r4, r5, r6, lr}
    5c74:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c76:	d002      	beq.n	5c7e <nrfx_gpio_handler+0xe>
    5c78:	2a01      	cmp	r2, #1
    5c7a:	d017      	beq.n	5cac <nrfx_gpio_handler+0x3c>
}
    5c7c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5c7e:	4e0d      	ldr	r6, [pc, #52]	; (5cb4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5c80:	6932      	ldr	r2, [r6, #16]
    5c82:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5c84:	2900      	cmp	r1, #0
    5c86:	d0f9      	beq.n	5c7c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    5c88:	f003 031f 	and.w	r3, r3, #31
    5c8c:	2501      	movs	r5, #1
	return node->next;
    5c8e:	680c      	ldr	r4, [r1, #0]
    5c90:	409d      	lsls	r5, r3
    5c92:	2900      	cmp	r1, #0
    5c94:	d0f2      	beq.n	5c7c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    5c96:	688a      	ldr	r2, [r1, #8]
    5c98:	402a      	ands	r2, r5
    5c9a:	d002      	beq.n	5ca2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5c9c:	684b      	ldr	r3, [r1, #4]
    5c9e:	4630      	mov	r0, r6
    5ca0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5ca2:	b12c      	cbz	r4, 5cb0 <nrfx_gpio_handler+0x40>
    5ca4:	6823      	ldr	r3, [r4, #0]
    5ca6:	4621      	mov	r1, r4
    5ca8:	461c      	mov	r4, r3
    5caa:	e7f2      	b.n	5c92 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5cac:	4e02      	ldr	r6, [pc, #8]	; (5cb8 <nrfx_gpio_handler+0x48>)
    5cae:	e7e7      	b.n	5c80 <nrfx_gpio_handler+0x10>
    5cb0:	4623      	mov	r3, r4
    5cb2:	e7f8      	b.n	5ca6 <nrfx_gpio_handler+0x36>
    5cb4:	0000be48 	.word	0x0000be48
    5cb8:	0000be30 	.word	0x0000be30

00005cbc <gpio_nrfx_pin_configure>:
{
    5cbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5cc0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5cc2:	7b3b      	ldrb	r3, [r7, #12]
    5cc4:	f001 051f 	and.w	r5, r1, #31
    5cc8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    5ccc:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5cce:	4628      	mov	r0, r5
    5cd0:	f10d 0103 	add.w	r1, sp, #3
{
    5cd4:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5cd6:	f001 f90b 	bl	6ef0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5cda:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5cde:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5ce0:	d10b      	bne.n	5cfa <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    5ce2:	4628      	mov	r0, r5
    5ce4:	f001 f9c8 	bl	7078 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    5ce8:	4b3d      	ldr	r3, [pc, #244]	; (5de0 <gpio_nrfx_pin_configure+0x124>)
    5cea:	4598      	cmp	r8, r3
    5cec:	d103      	bne.n	5cf6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    5cee:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5cf2:	f001 f945 	bl	6f80 <nrfx_gpiote_channel_free>
		return 0;
    5cf6:	2000      	movs	r0, #0
    5cf8:	e00c      	b.n	5d14 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5cfa:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5cfc:	4619      	mov	r1, r3
    5cfe:	aa02      	add	r2, sp, #8
    5d00:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d02:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5d06:	f000 ffcd 	bl	6ca4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5d0a:	4b35      	ldr	r3, [pc, #212]	; (5de0 <gpio_nrfx_pin_configure+0x124>)
    5d0c:	4298      	cmp	r0, r3
    5d0e:	d004      	beq.n	5d1a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    5d10:	f06f 0015 	mvn.w	r0, #21
}
    5d14:	b004      	add	sp, #16
    5d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    5d1a:	4580      	cmp	r8, r0
    5d1c:	d103      	bne.n	5d26 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    5d1e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5d22:	f001 f92d 	bl	6f80 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5d26:	03a3      	lsls	r3, r4, #14
    5d28:	d54b      	bpl.n	5dc2 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d2a:	f240 3306 	movw	r3, #774	; 0x306
    5d2e:	4023      	ands	r3, r4
    5d30:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5d34:	d019      	beq.n	5d6a <gpio_nrfx_pin_configure+0xae>
    5d36:	d80c      	bhi.n	5d52 <gpio_nrfx_pin_configure+0x96>
    5d38:	2b06      	cmp	r3, #6
    5d3a:	d017      	beq.n	5d6c <gpio_nrfx_pin_configure+0xb0>
    5d3c:	d804      	bhi.n	5d48 <gpio_nrfx_pin_configure+0x8c>
    5d3e:	b1ab      	cbz	r3, 5d6c <gpio_nrfx_pin_configure+0xb0>
    5d40:	2b02      	cmp	r3, #2
    5d42:	d1e5      	bne.n	5d10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5d44:	2304      	movs	r3, #4
    5d46:	e011      	b.n	5d6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5d4c:	d1e0      	bne.n	5d10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5d4e:	2301      	movs	r3, #1
    5d50:	e00c      	b.n	5d6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5d52:	f240 2202 	movw	r2, #514	; 0x202
    5d56:	4293      	cmp	r3, r2
    5d58:	d027      	beq.n	5daa <gpio_nrfx_pin_configure+0xee>
    5d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5d5e:	d026      	beq.n	5dae <gpio_nrfx_pin_configure+0xf2>
    5d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5d64:	d1d4      	bne.n	5d10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5d66:	2302      	movs	r3, #2
    5d68:	e000      	b.n	5d6c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    5d6a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5d6c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5d70:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5d74:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5d78:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5d7a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5d7e:	bf54      	ite	pl
    5d80:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5d84:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5d86:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5d88:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5d8c:	d511      	bpl.n	5db2 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5d8e:	687a      	ldr	r2, [r7, #4]
    5d90:	2301      	movs	r3, #1
    5d92:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5d94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5d98:	2200      	movs	r2, #0
    5d9a:	a901      	add	r1, sp, #4
    5d9c:	4628      	mov	r0, r5
    5d9e:	f001 f82f 	bl	6e00 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5da2:	4b0f      	ldr	r3, [pc, #60]	; (5de0 <gpio_nrfx_pin_configure+0x124>)
    5da4:	4298      	cmp	r0, r3
    5da6:	d0a6      	beq.n	5cf6 <gpio_nrfx_pin_configure+0x3a>
    5da8:	e7b2      	b.n	5d10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5daa:	2305      	movs	r3, #5
    5dac:	e7de      	b.n	5d6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5dae:	2303      	movs	r3, #3
    5db0:	e7dc      	b.n	5d6c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5db2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5db4:	bf41      	itttt	mi
    5db6:	2301      	movmi	r3, #1
    5db8:	687a      	ldrmi	r2, [r7, #4]
    5dba:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5dbc:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5dc0:	e7ea      	b.n	5d98 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    5dc2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5dc4:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    5dc8:	bf54      	ite	pl
    5dca:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5dce:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5dd0:	461a      	mov	r2, r3
    5dd2:	a901      	add	r1, sp, #4
    5dd4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5dd6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5dda:	f000 ff63 	bl	6ca4 <nrfx_gpiote_input_configure>
    5dde:	e7e0      	b.n	5da2 <gpio_nrfx_pin_configure+0xe6>
    5de0:	0bad0000 	.word	0x0bad0000

00005de4 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
    5de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5de6:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5de8:	6906      	ldr	r6, [r0, #16]

	dev_config->irq_connect();
    5dea:	69e3      	ldr	r3, [r4, #28]
{
    5dec:	af00      	add	r7, sp, #0
    5dee:	4605      	mov	r5, r0
	dev_config->irq_connect();
    5df0:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
    5df2:	6a20      	ldr	r0, [r4, #32]
    5df4:	f005 fa5b 	bl	b2ae <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
    5df8:	2800      	cmp	r0, #0
    5dfa:	db1f      	blt.n	5e3c <i2c_nrfx_twim_init+0x58>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
    5dfc:	4633      	mov	r3, r6
    5dfe:	4a13      	ldr	r2, [pc, #76]	; (5e4c <i2c_nrfx_twim_init+0x68>)
    5e00:	f104 0108 	add.w	r1, r4, #8
    5e04:	4620      	mov	r0, r4
    5e06:	f001 fad9 	bl	73bc <nrfx_twim_init>
    5e0a:	4b11      	ldr	r3, [pc, #68]	; (5e50 <i2c_nrfx_twim_init+0x6c>)
    5e0c:	4298      	cmp	r0, r3
    5e0e:	d017      	beq.n	5e40 <i2c_nrfx_twim_init+0x5c>
			   event_handler, dev_data) != NRFX_SUCCESS) {
		LOG_ERR("Failed to initialize device: %s", dev->name);
    5e10:	466c      	mov	r4, sp
    5e12:	b088      	sub	sp, #32
    5e14:	682b      	ldr	r3, [r5, #0]
    5e16:	466a      	mov	r2, sp
    5e18:	490e      	ldr	r1, [pc, #56]	; (5e54 <i2c_nrfx_twim_init+0x70>)
    5e1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
    5e22:	8393      	strh	r3, [r2, #28]
    5e24:	4b0c      	ldr	r3, [pc, #48]	; (5e58 <i2c_nrfx_twim_init+0x74>)
    5e26:	f842 3f10 	str.w	r3, [r2, #16]!
    5e2a:	480c      	ldr	r0, [pc, #48]	; (5e5c <i2c_nrfx_twim_init+0x78>)
    5e2c:	2300      	movs	r3, #0
    5e2e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    5e32:	f7fc fb39 	bl	24a8 <z_impl_z_log_msg_static_create>
		return -EIO;
    5e36:	f06f 0004 	mvn.w	r0, #4
    5e3a:	46a5      	mov	sp, r4
#else
	nrfx_twim_enable(&dev_config->twim);
#endif

	return 0;
}
    5e3c:	46bd      	mov	sp, r7
    5e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_twim_enable(&dev_config->twim);
    5e40:	4620      	mov	r0, r4
    5e42:	f001 fb1d 	bl	7480 <nrfx_twim_enable>
	return 0;
    5e46:	2000      	movs	r0, #0
    5e48:	e7f8      	b.n	5e3c <i2c_nrfx_twim_init+0x58>
    5e4a:	bf00      	nop
    5e4c:	00005e9d 	.word	0x00005e9d
    5e50:	0bad0000 	.word	0x0bad0000
    5e54:	0000d0e3 	.word	0x0000d0e3
    5e58:	01000003 	.word	0x01000003
    5e5c:	0000c0b8 	.word	0x0000c0b8

00005e60 <i2c_nrfx_twim_recover_bus>:
{
    5e60:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5e62:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
    5e64:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
    5e66:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
    5e6a:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
    5e6e:	4620      	mov	r0, r4
    5e70:	f001 fb16 	bl	74a0 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    5e74:	4631      	mov	r1, r6
    5e76:	4628      	mov	r0, r5
    5e78:	f002 fcee 	bl	8858 <nrfx_twi_twim_bus_recover>
    5e7c:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
    5e7e:	6a20      	ldr	r0, [r4, #32]
    5e80:	f005 fa15 	bl	b2ae <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
    5e84:	4620      	mov	r0, r4
    5e86:	f001 fafb 	bl	7480 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    5e8a:	4b03      	ldr	r3, [pc, #12]	; (5e98 <i2c_nrfx_twim_recover_bus+0x38>)
    5e8c:	429d      	cmp	r5, r3
}
    5e8e:	bf14      	ite	ne
    5e90:	f06f 000f 	mvnne.w	r0, #15
    5e94:	2000      	moveq	r0, #0
    5e96:	bd70      	pop	{r4, r5, r6, pc}
    5e98:	0bad0000 	.word	0x0bad0000

00005e9c <event_handler>:
	switch (p_event->type) {
    5e9c:	7803      	ldrb	r3, [r0, #0]
    5e9e:	2b01      	cmp	r3, #1
    5ea0:	d008      	beq.n	5eb4 <event_handler+0x18>
    5ea2:	2b02      	cmp	r3, #2
    5ea4:	d008      	beq.n	5eb8 <event_handler+0x1c>
    5ea6:	b94b      	cbnz	r3, 5ebc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    5ea8:	4b05      	ldr	r3, [pc, #20]	; (5ec0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    5eaa:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    5eac:	f101 0010 	add.w	r0, r1, #16
    5eb0:	f003 b8d0 	b.w	9054 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    5eb4:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <event_handler+0x28>)
    5eb6:	e7f8      	b.n	5eaa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    5eb8:	4b03      	ldr	r3, [pc, #12]	; (5ec8 <event_handler+0x2c>)
    5eba:	e7f6      	b.n	5eaa <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    5ebc:	4b03      	ldr	r3, [pc, #12]	; (5ecc <event_handler+0x30>)
    5ebe:	e7f4      	b.n	5eaa <event_handler+0xe>
    5ec0:	0bad0000 	.word	0x0bad0000
    5ec4:	0bae0001 	.word	0x0bae0001
    5ec8:	0bae0002 	.word	0x0bae0002
    5ecc:	0bad0001 	.word	0x0bad0001

00005ed0 <i2c_nrfx_twim_configure>:
{
    5ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
    5ed2:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5ed6:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
    5ed8:	d10f      	bne.n	5efa <i2c_nrfx_twim_configure+0x2a>
	switch (I2C_SPEED_GET(i2c_config)) {
    5eda:	f3c1 0142 	ubfx	r1, r1, #1, #3
    5ede:	2901      	cmp	r1, #1
    5ee0:	d00e      	beq.n	5f00 <i2c_nrfx_twim_configure+0x30>
    5ee2:	2902      	cmp	r1, #2
    5ee4:	d015      	beq.n	5f12 <i2c_nrfx_twim_configure+0x42>
		LOG_ERR("unsupported speed");
    5ee6:	4a0d      	ldr	r2, [pc, #52]	; (5f1c <i2c_nrfx_twim_configure+0x4c>)
    5ee8:	9205      	str	r2, [sp, #20]
    5eea:	2202      	movs	r2, #2
    5eec:	9204      	str	r2, [sp, #16]
    5eee:	480c      	ldr	r0, [pc, #48]	; (5f20 <i2c_nrfx_twim_configure+0x50>)
    5ef0:	aa04      	add	r2, sp, #16
    5ef2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ef6:	f7fc fad7 	bl	24a8 <z_impl_z_log_msg_static_create>
		return -EINVAL;
    5efa:	f06f 0015 	mvn.w	r0, #21
    5efe:	e005      	b.n	5f0c <i2c_nrfx_twim_configure+0x3c>
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    5f00:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    5f02:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    5f06:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    5f0a:	2000      	movs	r0, #0
}
    5f0c:	b007      	add	sp, #28
    5f0e:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twim_frequency_set(dev_config->twim.p_twim,
    5f12:	6813      	ldr	r3, [r2, #0]
    5f14:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
    5f18:	e7f5      	b.n	5f06 <i2c_nrfx_twim_configure+0x36>
    5f1a:	bf00      	nop
    5f1c:	0000d103 	.word	0x0000d103
    5f20:	0000c0b8 	.word	0x0000c0b8

00005f24 <i2c_nrfx_twim_transfer>:
{
    5f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f28:	b08d      	sub	sp, #52	; 0x34
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
    5f2a:	f8d0 b004 	ldr.w	fp, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
    5f2e:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
    5f32:	af00      	add	r7, sp, #0
    5f34:	461d      	mov	r5, r3
    5f36:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    5f38:	f8bb 3018 	ldrh.w	r3, [fp, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
    5f3c:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
	uint16_t concat_buf_size = dev_config->concat_buf_size;
    5f40:	617b      	str	r3, [r7, #20]
{
    5f42:	4606      	mov	r6, r0
    5f44:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
    5f46:	2214      	movs	r2, #20
    5f48:	2100      	movs	r1, #0
    5f4a:	f107 001c 	add.w	r0, r7, #28
    5f4e:	f005 f81f 	bl	af90 <memset>
    5f52:	777d      	strb	r5, [r7, #29]
	return z_impl_k_sem_take(sem, timeout);
    5f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f5c:	4648      	mov	r0, r9
    5f5e:	f003 f899 	bl	9094 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
    5f62:	f109 0310 	add.w	r3, r9, #16
    5f66:	60fb      	str	r3, [r7, #12]
    5f68:	2200      	movs	r2, #0
    5f6a:	2300      	movs	r3, #0
    5f6c:	f109 0010 	add.w	r0, r9, #16
    5f70:	f003 f890 	bl	9094 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
    5f74:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
    5f78:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
    5f7a:	693b      	ldr	r3, [r7, #16]
    5f7c:	4598      	cmp	r8, r3
    5f7e:	d301      	bcc.n	5f84 <i2c_nrfx_twim_transfer+0x60>
    5f80:	2400      	movs	r4, #0
    5f82:	e038      	b.n	5ff6 <i2c_nrfx_twim_transfer+0xd2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    5f84:	7a20      	ldrb	r0, [r4, #8]
    5f86:	0702      	lsls	r2, r0, #28
    5f88:	f100 80eb 	bmi.w	6162 <i2c_nrfx_twim_transfer+0x23e>
				&& ((msgs[i].flags & I2C_MSG_READ)
    5f8c:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
    5f8e:	f108 0301 	add.w	r3, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
    5f92:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
    5f94:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
    5f96:	d20a      	bcs.n	5fae <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
    5f98:	0783      	lsls	r3, r0, #30
    5f9a:	d408      	bmi.n	5fae <i2c_nrfx_twim_transfer+0x8a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    5f9c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
    5f9e:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
    5fa2:	f002 0201 	and.w	r2, r2, #1
    5fa6:	f003 0304 	and.w	r3, r3, #4
    5faa:	431a      	orrs	r2, r3
    5fac:	d02b      	beq.n	6006 <i2c_nrfx_twim_transfer+0xe2>
		if (concat_next || (msg_buf_used != 0)) {
    5fae:	2d00      	cmp	r5, #0
    5fb0:	d03f      	beq.n	6032 <i2c_nrfx_twim_transfer+0x10e>
		bool concat_next = ((i + 1) < num_msgs)
    5fb2:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
    5fb4:	6862      	ldr	r2, [r4, #4]
    5fb6:	f8d7 c014 	ldr.w	ip, [r7, #20]
    5fba:	18a9      	adds	r1, r5, r2
    5fbc:	4561      	cmp	r1, ip
    5fbe:	d924      	bls.n	600a <i2c_nrfx_twim_transfer+0xe6>
				LOG_ERR("Need to use concatenation buffer and "
    5fc0:	466c      	mov	r4, sp
    5fc2:	b08c      	sub	sp, #48	; 0x30
    5fc4:	6831      	ldr	r1, [r6, #0]
    5fc6:	466b      	mov	r3, sp
    5fc8:	61da      	str	r2, [r3, #28]
    5fca:	697a      	ldr	r2, [r7, #20]
    5fcc:	4866      	ldr	r0, [pc, #408]	; (6168 <i2c_nrfx_twim_transfer+0x244>)
    5fce:	e9c3 2108 	strd	r2, r1, [r3, #32]
    5fd2:	f240 5203 	movw	r2, #1283	; 0x503
    5fd6:	851a      	strh	r2, [r3, #40]	; 0x28
    5fd8:	461a      	mov	r2, r3
    5fda:	e9c3 0505 	strd	r0, r5, [r3, #20]
    5fde:	4b63      	ldr	r3, [pc, #396]	; (616c <i2c_nrfx_twim_transfer+0x248>)
    5fe0:	f842 3f10 	str.w	r3, [r2, #16]!
    5fe4:	4862      	ldr	r0, [pc, #392]	; (6170 <i2c_nrfx_twim_transfer+0x24c>)
    5fe6:	2300      	movs	r3, #0
    5fe8:	f44f 5151 	mov.w	r1, #13376	; 0x3440
    5fec:	f7fc fa5c 	bl	24a8 <z_impl_z_log_msg_static_create>
    5ff0:	46a5      	mov	sp, r4
				ret = -ENOSPC;
    5ff2:	f06f 041b 	mvn.w	r4, #27
	z_impl_k_sem_give(sem);
    5ff6:	4648      	mov	r0, r9
    5ff8:	f003 f82c 	bl	9054 <z_impl_k_sem_give>
}
    5ffc:	4620      	mov	r0, r4
    5ffe:	3734      	adds	r7, #52	; 0x34
    6000:	46bd      	mov	sp, r7
    6002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = ((i + 1) < num_msgs)
    6006:	2301      	movs	r3, #1
    6008:	e7d4      	b.n	5fb4 <i2c_nrfx_twim_transfer+0x90>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    600a:	07c1      	lsls	r1, r0, #31
    600c:	d406      	bmi.n	601c <i2c_nrfx_twim_transfer+0xf8>
				memcpy(msg_buf + msg_buf_used,
    600e:	6821      	ldr	r1, [r4, #0]
    6010:	607b      	str	r3, [r7, #4]
    6012:	eb0a 0005 	add.w	r0, sl, r5
    6016:	f004 ffb0 	bl	af7a <memcpy>
    601a:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
    601c:	6862      	ldr	r2, [r4, #4]
    601e:	442a      	add	r2, r5
    6020:	b295      	uxth	r5, r2
		if (concat_next) {
    6022:	2b00      	cmp	r3, #0
    6024:	f040 8085 	bne.w	6132 <i2c_nrfx_twim_transfer+0x20e>
		if (msg_buf_used == 0) {
    6028:	b13d      	cbz	r5, 603a <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msg_buf;
    602a:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
    602e:	462b      	mov	r3, r5
    6030:	e007      	b.n	6042 <i2c_nrfx_twim_transfer+0x11e>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6032:	07c0      	lsls	r0, r0, #31
			   !nrfx_is_in_ram(msgs[i].buf)) {
    6034:	e9d4 1200 	ldrd	r1, r2, [r4]
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6038:	d51b      	bpl.n	6072 <i2c_nrfx_twim_transfer+0x14e>
			cur_xfer.p_primary_buf = msgs[i].buf;
    603a:	6823      	ldr	r3, [r4, #0]
    603c:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
    603e:	6863      	ldr	r3, [r4, #4]
    6040:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    6042:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
    6044:	623b      	str	r3, [r7, #32]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    6046:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    604a:	f082 0202 	eor.w	r2, r2, #2
    604e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6052:	0152      	lsls	r2, r2, #5
    6054:	f107 011c 	add.w	r1, r7, #28
    6058:	4658      	mov	r0, fp
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    605a:	773b      	strb	r3, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
    605c:	f001 fa3e 	bl	74dc <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    6060:	4b44      	ldr	r3, [pc, #272]	; (6174 <i2c_nrfx_twim_transfer+0x250>)
    6062:	4298      	cmp	r0, r3
    6064:	d02c      	beq.n	60c0 <i2c_nrfx_twim_transfer+0x19c>
			if (res == NRFX_ERROR_BUSY) {
    6066:	330b      	adds	r3, #11
    6068:	4298      	cmp	r0, r3
    606a:	d144      	bne.n	60f6 <i2c_nrfx_twim_transfer+0x1d2>
				ret = -EBUSY;
    606c:	f06f 040f 	mvn.w	r4, #15
    6070:	e7c1      	b.n	5ff6 <i2c_nrfx_twim_transfer+0xd2>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6072:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
    6076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    607a:	d0de      	beq.n	603a <i2c_nrfx_twim_transfer+0x116>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
    607c:	f8bb 301a 	ldrh.w	r3, [fp, #26]
    6080:	4293      	cmp	r3, r2
    6082:	d218      	bcs.n	60b6 <i2c_nrfx_twim_transfer+0x192>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
    6084:	466c      	mov	r4, sp
    6086:	b08a      	sub	sp, #40	; 0x28
    6088:	6831      	ldr	r1, [r6, #0]
    608a:	466b      	mov	r3, sp
    608c:	483a      	ldr	r0, [pc, #232]	; (6178 <i2c_nrfx_twim_transfer+0x254>)
    608e:	61d9      	str	r1, [r3, #28]
    6090:	e9c3 0205 	strd	r0, r2, [r3, #20]
    6094:	f240 3201 	movw	r2, #769	; 0x301
    6098:	841a      	strh	r2, [r3, #32]
    609a:	461a      	mov	r2, r3
    609c:	4b37      	ldr	r3, [pc, #220]	; (617c <i2c_nrfx_twim_transfer+0x258>)
    609e:	f842 3f10 	str.w	r3, [r2, #16]!
    60a2:	4833      	ldr	r0, [pc, #204]	; (6170 <i2c_nrfx_twim_transfer+0x24c>)
    60a4:	462b      	mov	r3, r5
    60a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    60aa:	f7fc f9fd 	bl	24a8 <z_impl_z_log_msg_static_create>
    60ae:	46a5      	mov	sp, r4
				ret = -EINVAL;
    60b0:	f06f 0415 	mvn.w	r4, #21
				break;
    60b4:	e79f      	b.n	5ff6 <i2c_nrfx_twim_transfer+0xd2>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
    60b6:	4650      	mov	r0, sl
    60b8:	f004 ff5f 	bl	af7a <memcpy>
			msg_buf_used = msgs[i].len;
    60bc:	88a5      	ldrh	r5, [r4, #4]
		if (concat_next) {
    60be:	e7b3      	b.n	6028 <i2c_nrfx_twim_transfer+0x104>
	return z_impl_k_sem_take(sem, timeout);
    60c0:	2300      	movs	r3, #0
    60c2:	68f8      	ldr	r0, [r7, #12]
    60c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    60c8:	f002 ffe4 	bl	9094 <z_impl_k_sem_take>
		if (ret != 0) {
    60cc:	4603      	mov	r3, r0
    60ce:	b1a8      	cbz	r0, 60fc <i2c_nrfx_twim_transfer+0x1d8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    60d0:	466c      	mov	r4, sp
    60d2:	b088      	sub	sp, #32
    60d4:	466a      	mov	r2, sp
    60d6:	4b2a      	ldr	r3, [pc, #168]	; (6180 <i2c_nrfx_twim_transfer+0x25c>)
    60d8:	e9c2 3805 	strd	r3, r8, [r2, #20]
    60dc:	2303      	movs	r3, #3
    60de:	f842 3f10 	str.w	r3, [r2, #16]!
    60e2:	4823      	ldr	r0, [pc, #140]	; (6170 <i2c_nrfx_twim_transfer+0x24c>)
    60e4:	2300      	movs	r3, #0
    60e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    60ea:	f7fc f9dd 	bl	24a8 <z_impl_z_log_msg_static_create>
			(void)i2c_nrfx_twim_recover_bus(dev);
    60ee:	4630      	mov	r0, r6
    60f0:	46a5      	mov	sp, r4
    60f2:	f7ff feb5 	bl	5e60 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
    60f6:	f06f 0404 	mvn.w	r4, #4
    60fa:	e77c      	b.n	5ff6 <i2c_nrfx_twim_transfer+0xd2>
		res = dev_data->res;
    60fc:	f8d9 1020 	ldr.w	r1, [r9, #32]
		if (res != NRFX_SUCCESS) {
    6100:	4a1c      	ldr	r2, [pc, #112]	; (6174 <i2c_nrfx_twim_transfer+0x250>)
    6102:	4291      	cmp	r1, r2
    6104:	d011      	beq.n	612a <i2c_nrfx_twim_transfer+0x206>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    6106:	466c      	mov	r4, sp
    6108:	b088      	sub	sp, #32
    610a:	466a      	mov	r2, sp
    610c:	481d      	ldr	r0, [pc, #116]	; (6184 <i2c_nrfx_twim_transfer+0x260>)
    610e:	f8c2 801c 	str.w	r8, [r2, #28]
    6112:	e9c2 0105 	strd	r0, r1, [r2, #20]
    6116:	2104      	movs	r1, #4
    6118:	f842 1f10 	str.w	r1, [r2, #16]!
    611c:	4814      	ldr	r0, [pc, #80]	; (6170 <i2c_nrfx_twim_transfer+0x24c>)
    611e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6122:	f7fc f9c1 	bl	24a8 <z_impl_z_log_msg_static_create>
    6126:	46a5      	mov	sp, r4
			break;
    6128:	e7e5      	b.n	60f6 <i2c_nrfx_twim_transfer+0x1d2>
		if ((msgs[i].flags & I2C_MSG_READ)
    612a:	7a23      	ldrb	r3, [r4, #8]
    612c:	07db      	lsls	r3, r3, #31
    612e:	d404      	bmi.n	613a <i2c_nrfx_twim_transfer+0x216>
		msg_buf_used = 0;
    6130:	2500      	movs	r5, #0
    6132:	f8d7 8008 	ldr.w	r8, [r7, #8]
    6136:	340c      	adds	r4, #12
    6138:	e71f      	b.n	5f7a <i2c_nrfx_twim_transfer+0x56>
		    && cur_xfer.p_primary_buf == msg_buf) {
    613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    613c:	459a      	cmp	sl, r3
    613e:	d1f7      	bne.n	6130 <i2c_nrfx_twim_transfer+0x20c>
    6140:	46a0      	mov	r8, r4
    6142:	e007      	b.n	6154 <i2c_nrfx_twim_transfer+0x230>
				msg_buf_used -= msgs[j].len;
    6144:	1aa9      	subs	r1, r5, r2
    6146:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
    6148:	f8d8 000c 	ldr.w	r0, [r8, #12]
    614c:	fa1a f181 	uxtah	r1, sl, r1
    6150:	f004 ff13 	bl	af7a <memcpy>
			while (msg_buf_used >= msgs[j].len) {
    6154:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6158:	4295      	cmp	r5, r2
    615a:	f1a8 080c 	sub.w	r8, r8, #12
    615e:	d2f1      	bcs.n	6144 <i2c_nrfx_twim_transfer+0x220>
    6160:	e7e6      	b.n	6130 <i2c_nrfx_twim_transfer+0x20c>
			ret = -ENOTSUP;
    6162:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6166:	e746      	b.n	5ff6 <i2c_nrfx_twim_transfer+0xd2>
    6168:	0000d115 	.word	0x0000d115
    616c:	01000006 	.word	0x01000006
    6170:	0000c0b8 	.word	0x0000c0b8
    6174:	0bad0000 	.word	0x0bad0000
    6178:	0000d1a5 	.word	0x0000d1a5
    617c:	01000004 	.word	0x01000004
    6180:	0000d20b 	.word	0x0000d20b
    6184:	0000d235 	.word	0x0000d235

00006188 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6188:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    618a:	4e1c      	ldr	r6, [pc, #112]	; (61fc <pinctrl_configure_pins+0x74>)
    618c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6190:	4281      	cmp	r1, r0
    6192:	d101      	bne.n	6198 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    6194:	2000      	movs	r0, #0
    6196:	e010      	b.n	61ba <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    6198:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    619a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    619e:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    61a0:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    61a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    61a8:	bf08      	it	eq
    61aa:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    61ae:	2b0b      	cmp	r3, #11
    61b0:	d004      	beq.n	61bc <pinctrl_configure_pins+0x34>
    61b2:	2b0c      	cmp	r3, #12
    61b4:	d01f      	beq.n	61f6 <pinctrl_configure_pins+0x6e>
    61b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    61ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    61bc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    61c0:	b905      	cbnz	r5, 61c4 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    61c2:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    61c4:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    61c8:	f004 071f 	and.w	r7, r4, #31
    61cc:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    61d0:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    61d2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    61d6:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    61d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    61dc:	bf0c      	ite	eq
    61de:	46b4      	moveq	ip, r6
    61e0:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    61e4:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    61e8:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    61ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    61f0:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    61f4:	e7cc      	b.n	6190 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    61f6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    61fa:	e7e1      	b.n	61c0 <pinctrl_configure_pins+0x38>
    61fc:	50000300 	.word	0x50000300

00006200 <as5600_initialize>:

	return 0;
}

static int as5600_initialize(const struct device *dev)
{
    6200:	b598      	push	{r3, r4, r7, lr}
	struct as5600_dev_data *const dev_data = dev->data;
    6202:	6903      	ldr	r3, [r0, #16]

	dev_data->position = 0;
    6204:	2400      	movs	r4, #0
{
    6206:	af00      	add	r7, sp, #0
	dev_data->position = 0;
    6208:	801c      	strh	r4, [r3, #0]

	LOG_INF("Device %s initialized", dev->name);
    620a:	b088      	sub	sp, #32
    620c:	6803      	ldr	r3, [r0, #0]
    620e:	466a      	mov	r2, sp
    6210:	4908      	ldr	r1, [pc, #32]	; (6234 <as5600_initialize+0x34>)
    6212:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6216:	f44f 7300 	mov.w	r3, #512	; 0x200
    621a:	8393      	strh	r3, [r2, #28]
    621c:	4b06      	ldr	r3, [pc, #24]	; (6238 <as5600_initialize+0x38>)
    621e:	f842 3f10 	str.w	r3, [r2, #16]!
    6222:	4806      	ldr	r0, [pc, #24]	; (623c <as5600_initialize+0x3c>)
    6224:	4623      	mov	r3, r4
    6226:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    622a:	f7fc f93d 	bl	24a8 <z_impl_z_log_msg_static_create>

	return 0;
}
    622e:	4620      	mov	r0, r4
    6230:	46bd      	mov	sp, r7
    6232:	bd98      	pop	{r3, r4, r7, pc}
    6234:	0000d275 	.word	0x0000d275
    6238:	01000003 	.word	0x01000003
    623c:	0000c090 	.word	0x0000c090

00006240 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6240:	4b01      	ldr	r3, [pc, #4]	; (6248 <hfclk_on_callback+0x8>)
    6242:	2201      	movs	r2, #1
    6244:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    6246:	4770      	bx	lr
    6248:	4000c000 	.word	0x4000c000

0000624c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    624c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    624e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    6250:	d10b      	bne.n	626a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6254:	4906      	ldr	r1, [pc, #24]	; (6270 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    6256:	4807      	ldr	r0, [pc, #28]	; (6274 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6258:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    625a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    625e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    6262:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    6264:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    6266:	2000      	movs	r0, #0
    6268:	4770      	bx	lr
		return -ENOTSUP;
    626a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    626e:	4770      	bx	lr
    6270:	0003d090 	.word	0x0003d090
    6274:	000f4240 	.word	0x000f4240

00006278 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6278:	4b04      	ldr	r3, [pc, #16]	; (628c <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    627a:	6900      	ldr	r0, [r0, #16]
    627c:	2200      	movs	r2, #0
    627e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6282:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    6286:	f002 bee5 	b.w	9054 <z_impl_k_sem_give>
    628a:	bf00      	nop
    628c:	4000c000 	.word	0x4000c000

00006290 <temp_nrf5_sample_fetch>:
{
    6290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    6292:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    6294:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6296:	b363      	cbz	r3, 62f2 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    6298:	2939      	cmp	r1, #57	; 0x39
    629a:	d001      	beq.n	62a0 <temp_nrf5_sample_fetch+0x10>
    629c:	290c      	cmp	r1, #12
    629e:	d12b      	bne.n	62f8 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    62a0:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    62a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62ac:	4630      	mov	r0, r6
    62ae:	f002 fde7 	bl	8e80 <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    62b2:	4b13      	ldr	r3, [pc, #76]	; (6300 <temp_nrf5_sample_fetch+0x70>)
    62b4:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    62b6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    62b8:	2303      	movs	r3, #3
    62ba:	2400      	movs	r4, #0
    62bc:	4669      	mov	r1, sp
    62be:	9403      	str	r4, [sp, #12]
    62c0:	9302      	str	r3, [sp, #8]
    62c2:	f004 fa6e 	bl	a7a2 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    62c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62ce:	4628      	mov	r0, r5
    62d0:	f002 fee0 	bl	9094 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    62d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    62d6:	f004 fabc 	bl	a852 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    62da:	4b0a      	ldr	r3, [pc, #40]	; (6304 <temp_nrf5_sample_fetch+0x74>)
    62dc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    62e0:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    62e2:	2201      	movs	r2, #1
    62e4:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    62e6:	4630      	mov	r0, r6
    62e8:	f002 fe44 	bl	8f74 <z_impl_k_mutex_unlock>
	return 0;
    62ec:	4620      	mov	r0, r4
}
    62ee:	b004      	add	sp, #16
    62f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    62f2:	f06f 000a 	mvn.w	r0, #10
    62f6:	e7fa      	b.n	62ee <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    62f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    62fc:	e7f7      	b.n	62ee <temp_nrf5_sample_fetch+0x5e>
    62fe:	bf00      	nop
    6300:	00006241 	.word	0x00006241
    6304:	4000c000 	.word	0x4000c000

00006308 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    6308:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    630a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    630c:	2000      	movs	r0, #0
    630e:	f7ff fba3 	bl	5a58 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    6312:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    6314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6318:	2100      	movs	r1, #0
    631a:	4620      	mov	r0, r4
    631c:	f005 fad8 	bl	b8d0 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    6320:	f104 0010 	add.w	r0, r4, #16
    6324:	f005 fa54 	bl	b7d0 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    6328:	2200      	movs	r2, #0
    632a:	2101      	movs	r1, #1
    632c:	200c      	movs	r0, #12
    632e:	f7fd fb9f 	bl	3a70 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    6332:	200c      	movs	r0, #12
    6334:	f7fd fb6c 	bl	3a10 <arch_irq_enable>
    p_reg->INTENSET = mask;
    6338:	4b02      	ldr	r3, [pc, #8]	; (6344 <temp_nrf5_init+0x3c>)
    633a:	2201      	movs	r2, #1
    633c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    6340:	2000      	movs	r0, #0
    6342:	bd10      	pop	{r4, pc}
    6344:	4000c000 	.word	0x4000c000

00006348 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6348:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    634a:	2301      	movs	r3, #1
    634c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    634e:	4a0e      	ldr	r2, [pc, #56]	; (6388 <compare_int_lock+0x40>)
    6350:	f3bf 8f5b 	dmb	ish
    6354:	43dc      	mvns	r4, r3
    6356:	e852 1f00 	ldrex	r1, [r2]
    635a:	ea01 0504 	and.w	r5, r1, r4
    635e:	e842 5600 	strex	r6, r5, [r2]
    6362:	2e00      	cmp	r6, #0
    6364:	d1f7      	bne.n	6356 <compare_int_lock+0xe>
    6366:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    636a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    636e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    6370:	4806      	ldr	r0, [pc, #24]	; (638c <compare_int_lock+0x44>)
    6372:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6376:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    637a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    637e:	420b      	tst	r3, r1
}
    6380:	bf14      	ite	ne
    6382:	2001      	movne	r0, #1
    6384:	2000      	moveq	r0, #0
    6386:	bd70      	pop	{r4, r5, r6, pc}
    6388:	20001ac8 	.word	0x20001ac8
    638c:	40011000 	.word	0x40011000

00006390 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6390:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6392:	490e      	ldr	r1, [pc, #56]	; (63cc <sys_clock_timeout_handler+0x3c>)
    6394:	e9d1 3400 	ldrd	r3, r4, [r1]
    6398:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    639a:	18c3      	adds	r3, r0, r3
    639c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    63a0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    63a4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    63a8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    63ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    63b0:	d209      	bcs.n	63c6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    63b2:	4b07      	ldr	r3, [pc, #28]	; (63d0 <sys_clock_timeout_handler+0x40>)
    63b4:	681b      	ldr	r3, [r3, #0]
    63b6:	0a1a      	lsrs	r2, r3, #8
    63b8:	061b      	lsls	r3, r3, #24
    63ba:	199c      	adds	r4, r3, r6
    63bc:	4b05      	ldr	r3, [pc, #20]	; (63d4 <sys_clock_timeout_handler+0x44>)
    63be:	f142 0500 	adc.w	r5, r2, #0
    63c2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    63c6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    63c8:	f003 bc1e 	b.w	9c08 <sys_clock_announce>
    63cc:	20000840 	.word	0x20000840
    63d0:	20001acc 	.word	0x20001acc
    63d4:	20000848 	.word	0x20000848

000063d8 <compare_int_unlock>:
	if (key) {
    63d8:	b311      	cbz	r1, 6420 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    63da:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    63de:	2301      	movs	r3, #1
    63e0:	4a10      	ldr	r2, [pc, #64]	; (6424 <compare_int_unlock+0x4c>)
    63e2:	4083      	lsls	r3, r0
    63e4:	e852 cf00 	ldrex	ip, [r2]
    63e8:	ea4c 0c03 	orr.w	ip, ip, r3
    63ec:	e842 c100 	strex	r1, ip, [r2]
    63f0:	2900      	cmp	r1, #0
    63f2:	d1f7      	bne.n	63e4 <compare_int_unlock+0xc>
    63f4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    63f8:	4a0b      	ldr	r2, [pc, #44]	; (6428 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    63fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    63fe:	4083      	lsls	r3, r0
    6400:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6404:	4b09      	ldr	r3, [pc, #36]	; (642c <compare_int_unlock+0x54>)
    6406:	f3bf 8f5b 	dmb	ish
    640a:	681b      	ldr	r3, [r3, #0]
    640c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6410:	40c3      	lsrs	r3, r0
    6412:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6414:	bf42      	ittt	mi
    6416:	4b06      	ldrmi	r3, [pc, #24]	; (6430 <compare_int_unlock+0x58>)
    6418:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    641c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6420:	4770      	bx	lr
    6422:	bf00      	nop
    6424:	20001ac8 	.word	0x20001ac8
    6428:	40011000 	.word	0x40011000
    642c:	20001ac4 	.word	0x20001ac4
    6430:	e000e100 	.word	0xe000e100

00006434 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6434:	4b0d      	ldr	r3, [pc, #52]	; (646c <z_nrf_rtc_timer_read+0x38>)
    6436:	6818      	ldr	r0, [r3, #0]
    6438:	0a01      	lsrs	r1, r0, #8
    643a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    643c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6440:	4b0b      	ldr	r3, [pc, #44]	; (6470 <z_nrf_rtc_timer_read+0x3c>)
    6442:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6446:	1818      	adds	r0, r3, r0
    6448:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6450:	d20a      	bcs.n	6468 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6452:	4b08      	ldr	r3, [pc, #32]	; (6474 <z_nrf_rtc_timer_read+0x40>)
    6454:	e9d3 2300 	ldrd	r2, r3, [r3]
    6458:	4290      	cmp	r0, r2
    645a:	eb71 0303 	sbcs.w	r3, r1, r3
    645e:	d203      	bcs.n	6468 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6460:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6464:	f141 0100 	adc.w	r1, r1, #0
}
    6468:	4770      	bx	lr
    646a:	bf00      	nop
    646c:	20001acc 	.word	0x20001acc
    6470:	40011000 	.word	0x40011000
    6474:	20000848 	.word	0x20000848

00006478 <compare_set>:
{
    6478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    647c:	4616      	mov	r6, r2
    647e:	461f      	mov	r7, r3
    6480:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    6482:	f7ff ff61 	bl	6348 <compare_int_lock>
    6486:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6488:	f7ff ffd4 	bl	6434 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    648c:	42b0      	cmp	r0, r6
    648e:	eb71 0307 	sbcs.w	r3, r1, r7
    6492:	d251      	bcs.n	6538 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    6494:	4b3a      	ldr	r3, [pc, #232]	; (6580 <compare_set+0x108>)
    6496:	1a30      	subs	r0, r6, r0
    6498:	eb67 0101 	sbc.w	r1, r7, r1
    649c:	4298      	cmp	r0, r3
    649e:	f171 0100 	sbcs.w	r1, r1, #0
    64a2:	d26a      	bcs.n	657a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    64a4:	4b37      	ldr	r3, [pc, #220]	; (6584 <compare_set+0x10c>)
    64a6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    64aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    64ae:	429f      	cmp	r7, r3
    64b0:	bf08      	it	eq
    64b2:	4296      	cmpeq	r6, r2
    64b4:	d04e      	beq.n	6554 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    64b6:	4934      	ldr	r1, [pc, #208]	; (6588 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64b8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    64bc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    64c0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    64c4:	00ad      	lsls	r5, r5, #2
    64c6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    64ca:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64cc:	b2ad      	uxth	r5, r5
    64ce:	f004 ff4b 	bl	b368 <event_clear>
	return absolute_time & COUNTER_MAX;
    64d2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    64d6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    64da:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    64de:	4a2b      	ldr	r2, [pc, #172]	; (658c <compare_set+0x114>)
    64e0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64e2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    64e6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    64e8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    64ec:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    64ee:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    64f2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    64f6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    64fa:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    64fe:	f06f 0002 	mvn.w	r0, #2
    6502:	eba0 0008 	sub.w	r0, r0, r8
    6506:	4460      	add	r0, ip
    6508:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    650c:	4290      	cmp	r0, r2
    650e:	d921      	bls.n	6554 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6510:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6512:	b160      	cbz	r0, 652e <compare_set+0xb6>
     return p_reg->COUNTER;
    6514:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6518:	eba8 000b 	sub.w	r0, r8, fp
    651c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6520:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6524:	d916      	bls.n	6554 <compare_set+0xdc>
					event_clear(chan);
    6526:	4620      	mov	r0, r4
    6528:	f004 ff1e 	bl	b368 <event_clear>
    652c:	4a17      	ldr	r2, [pc, #92]	; (658c <compare_set+0x114>)
			cc_val = now + cc_inc;
    652e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    6532:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    6536:	e7d9      	b.n	64ec <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    6538:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    653a:	4a15      	ldr	r2, [pc, #84]	; (6590 <compare_set+0x118>)
    653c:	f3bf 8f5b 	dmb	ish
    6540:	40a3      	lsls	r3, r4
    6542:	e852 0f00 	ldrex	r0, [r2]
    6546:	4318      	orrs	r0, r3
    6548:	e842 0100 	strex	r1, r0, [r2]
    654c:	2900      	cmp	r1, #0
    654e:	d1f8      	bne.n	6542 <compare_set+0xca>
    6550:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6554:	490b      	ldr	r1, [pc, #44]	; (6584 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    6556:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    6558:	0123      	lsls	r3, r4, #4
    655a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    655e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    6562:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    6564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6566:	6053      	str	r3, [r2, #4]
	return ret;
    6568:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    656a:	4620      	mov	r0, r4
    656c:	9900      	ldr	r1, [sp, #0]
    656e:	f7ff ff33 	bl	63d8 <compare_int_unlock>
}
    6572:	4628      	mov	r0, r5
    6574:	b003      	add	sp, #12
    6576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    657a:	f06f 0515 	mvn.w	r5, #21
    657e:	e7f4      	b.n	656a <compare_set+0xf2>
    6580:	00800001 	.word	0x00800001
    6584:	20000830 	.word	0x20000830
    6588:	40011000 	.word	0x40011000
    658c:	007ffffd 	.word	0x007ffffd
    6590:	20001ac4 	.word	0x20001ac4

00006594 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    6594:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    6596:	4c1b      	ldr	r4, [pc, #108]	; (6604 <sys_clock_driver_init+0x70>)
    6598:	4b1b      	ldr	r3, [pc, #108]	; (6608 <sys_clock_driver_init+0x74>)
    659a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    659e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    65a2:	4b1a      	ldr	r3, [pc, #104]	; (660c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    65a4:	2500      	movs	r5, #0
    65a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    65aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    65ae:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    65b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    65b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    65ba:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    65be:	4b14      	ldr	r3, [pc, #80]	; (6610 <sys_clock_driver_init+0x7c>)
    65c0:	2602      	movs	r6, #2
    65c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    65c6:	2101      	movs	r1, #1
    65c8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    65cc:	2011      	movs	r0, #17
    65ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    65d2:	462a      	mov	r2, r5
    65d4:	f7fd fa4c 	bl	3a70 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    65d8:	2011      	movs	r0, #17
    65da:	f7fd fa19 	bl	3a10 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    65de:	4a0d      	ldr	r2, [pc, #52]	; (6614 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    65e0:	2301      	movs	r3, #1
    65e2:	60a3      	str	r3, [r4, #8]
    65e4:	6023      	str	r3, [r4, #0]
    65e6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    65e8:	4b0b      	ldr	r3, [pc, #44]	; (6618 <sys_clock_driver_init+0x84>)
    65ea:	4a0c      	ldr	r2, [pc, #48]	; (661c <sys_clock_driver_init+0x88>)
    65ec:	9300      	str	r3, [sp, #0]
    65ee:	9501      	str	r5, [sp, #4]
    65f0:	2300      	movs	r3, #0
    65f2:	4628      	mov	r0, r5
    65f4:	f7ff ff40 	bl	6478 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    65f8:	4630      	mov	r0, r6
    65fa:	f7ff fa35 	bl	5a68 <z_nrf_clock_control_lf_on>

	return 0;
}
    65fe:	4628      	mov	r0, r5
    6600:	b002      	add	sp, #8
    6602:	bd70      	pop	{r4, r5, r6, pc}
    6604:	40011000 	.word	0x40011000
    6608:	000f0003 	.word	0x000f0003
    660c:	20000830 	.word	0x20000830
    6610:	e000e100 	.word	0xe000e100
    6614:	20001ac8 	.word	0x20001ac8
    6618:	00006391 	.word	0x00006391
    661c:	007fffff 	.word	0x007fffff

00006620 <rtc_nrf_isr>:
{
    6620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6624:	4c2f      	ldr	r4, [pc, #188]	; (66e4 <rtc_nrf_isr+0xc4>)
    6626:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    662a:	0799      	lsls	r1, r3, #30
    662c:	d50b      	bpl.n	6646 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    662e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6632:	b143      	cbz	r3, 6646 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    6634:	4a2c      	ldr	r2, [pc, #176]	; (66e8 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6636:	2300      	movs	r3, #0
    6638:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    663c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6640:	6813      	ldr	r3, [r2, #0]
    6642:	3301      	adds	r3, #1
    6644:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6646:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    664a:	03da      	lsls	r2, r3, #15
    664c:	d52a      	bpl.n	66a4 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    664e:	f3bf 8f5b 	dmb	ish
    6652:	4b26      	ldr	r3, [pc, #152]	; (66ec <rtc_nrf_isr+0xcc>)
    6654:	e853 2f00 	ldrex	r2, [r3]
    6658:	f022 0101 	bic.w	r1, r2, #1
    665c:	e843 1000 	strex	r0, r1, [r3]
    6660:	2800      	cmp	r0, #0
    6662:	d1f7      	bne.n	6654 <rtc_nrf_isr+0x34>
    6664:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    6668:	07d3      	lsls	r3, r2, #31
    666a:	d402      	bmi.n	6672 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    666c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6670:	b1c3      	cbz	r3, 66a4 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6672:	2500      	movs	r5, #0
    6674:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6678:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    667c:	f7ff feda 	bl	6434 <z_nrf_rtc_timer_read>
    6680:	f04f 0320 	mov.w	r3, #32
    6684:	f3ef 8211 	mrs	r2, BASEPRI
    6688:	f383 8812 	msr	BASEPRI_MAX, r3
    668c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    6690:	4b17      	ldr	r3, [pc, #92]	; (66f0 <rtc_nrf_isr+0xd0>)
    6692:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    6696:	42b0      	cmp	r0, r6
    6698:	41b9      	sbcs	r1, r7
    669a:	d206      	bcs.n	66aa <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    669c:	f382 8811 	msr	BASEPRI, r2
    66a0:	f3bf 8f6f 	isb	sy
}
    66a4:	b003      	add	sp, #12
    66a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    66aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    66ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    66b2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    66b6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    66ba:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    66bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    66c0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66c4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    66c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    66cc:	f382 8811 	msr	BASEPRI, r2
    66d0:	f3bf 8f6f 	isb	sy
		if (handler) {
    66d4:	2900      	cmp	r1, #0
    66d6:	d0e5      	beq.n	66a4 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    66d8:	9000      	str	r0, [sp, #0]
    66da:	4632      	mov	r2, r6
    66dc:	463b      	mov	r3, r7
    66de:	4628      	mov	r0, r5
    66e0:	4788      	blx	r1
    66e2:	e7df      	b.n	66a4 <rtc_nrf_isr+0x84>
    66e4:	40011000 	.word	0x40011000
    66e8:	20001acc 	.word	0x20001acc
    66ec:	20001ac4 	.word	0x20001ac4
    66f0:	20000830 	.word	0x20000830

000066f4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    66f4:	1c43      	adds	r3, r0, #1
{
    66f6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    66f8:	d022      	beq.n	6740 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    66fa:	2801      	cmp	r0, #1
    66fc:	dd22      	ble.n	6744 <sys_clock_set_timeout+0x50>
    66fe:	4a12      	ldr	r2, [pc, #72]	; (6748 <sys_clock_set_timeout+0x54>)
    6700:	4b12      	ldr	r3, [pc, #72]	; (674c <sys_clock_set_timeout+0x58>)
    6702:	4290      	cmp	r0, r2
    6704:	bfd4      	ite	le
    6706:	4604      	movle	r4, r0
    6708:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    670a:	f7ff fe93 	bl	6434 <z_nrf_rtc_timer_read>
    670e:	4b10      	ldr	r3, [pc, #64]	; (6750 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6710:	490e      	ldr	r1, [pc, #56]	; (674c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6712:	e9d3 2300 	ldrd	r2, r3, [r3]
    6716:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6718:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    671c:	bf28      	it	cs
    671e:	2400      	movcs	r4, #0
	cyc += unannounced;
    6720:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    6722:	428c      	cmp	r4, r1
    6724:	bf28      	it	cs
    6726:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    6728:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    672a:	490a      	ldr	r1, [pc, #40]	; (6754 <sys_clock_set_timeout+0x60>)
    672c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    672e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6732:	9001      	str	r0, [sp, #4]
    6734:	f143 0300 	adc.w	r3, r3, #0
    6738:	f7ff fe9e 	bl	6478 <compare_set>
}
    673c:	b002      	add	sp, #8
    673e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    6740:	4c02      	ldr	r4, [pc, #8]	; (674c <sys_clock_set_timeout+0x58>)
    6742:	e7e2      	b.n	670a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6744:	2401      	movs	r4, #1
    6746:	e7e0      	b.n	670a <sys_clock_set_timeout+0x16>
    6748:	007ffffe 	.word	0x007ffffe
    674c:	007fffff 	.word	0x007fffff
    6750:	20000840 	.word	0x20000840
    6754:	00006391 	.word	0x00006391

00006758 <sys_clock_elapsed>:
{
    6758:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    675a:	f7ff fe6b 	bl	6434 <z_nrf_rtc_timer_read>
    675e:	4b02      	ldr	r3, [pc, #8]	; (6768 <sys_clock_elapsed+0x10>)
    6760:	681b      	ldr	r3, [r3, #0]
}
    6762:	1ac0      	subs	r0, r0, r3
    6764:	bd08      	pop	{r3, pc}
    6766:	bf00      	nop
    6768:	20000840 	.word	0x20000840

0000676c <sys_clock_disable>:
{
    676c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    676e:	4c08      	ldr	r4, [pc, #32]	; (6790 <sys_clock_disable+0x24>)
    6770:	2301      	movs	r3, #1
    6772:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    6774:	2011      	movs	r0, #17
    6776:	f7fd f959 	bl	3a2c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    677a:	4b06      	ldr	r3, [pc, #24]	; (6794 <sys_clock_disable+0x28>)
    677c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6780:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    6784:	4b04      	ldr	r3, [pc, #16]	; (6798 <sys_clock_disable+0x2c>)
    6786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    678a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    678e:	bd10      	pop	{r4, pc}
    6790:	40011000 	.word	0x40011000
    6794:	000f0003 	.word	0x000f0003
    6798:	e000e100 	.word	0xe000e100

0000679c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    679c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    679e:	f7fb fdb1 	bl	2304 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    67a2:	4b07      	ldr	r3, [pc, #28]	; (67c0 <k_sys_fatal_error_handler+0x24>)
    67a4:	9305      	str	r3, [sp, #20]
    67a6:	2302      	movs	r3, #2
    67a8:	9304      	str	r3, [sp, #16]
    67aa:	4806      	ldr	r0, [pc, #24]	; (67c4 <k_sys_fatal_error_handler+0x28>)
    67ac:	2300      	movs	r3, #0
    67ae:	aa04      	add	r2, sp, #16
    67b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67b4:	f7fb fe78 	bl	24a8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    67b8:	2000      	movs	r0, #0
    67ba:	f7fd fef3 	bl	45a4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    67be:	bf00      	nop
    67c0:	0000d2b8 	.word	0x0000d2b8
    67c4:	0000c0a8 	.word	0x0000c0a8

000067c8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    67c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    67cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    67d0:	2a08      	cmp	r2, #8
    67d2:	d106      	bne.n	67e2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    67d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    67d8:	2b05      	cmp	r3, #5
    67da:	d802      	bhi.n	67e2 <nrf52_errata_103+0x1a>
    67dc:	4a02      	ldr	r2, [pc, #8]	; (67e8 <nrf52_errata_103+0x20>)
    67de:	5cd0      	ldrb	r0, [r2, r3]
    67e0:	4770      	bx	lr
                {
                    case 0x00ul:
                        return true;
                    case 0x01ul:
                        return false;
    67e2:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    67e4:	4770      	bx	lr
    67e6:	bf00      	nop
    67e8:	0000d2db 	.word	0x0000d2db

000067ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    67ec:	4a02      	ldr	r2, [pc, #8]	; (67f8 <nvmc_wait+0xc>)
    67ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    67f2:	2b00      	cmp	r3, #0
    67f4:	d0fb      	beq.n	67ee <nvmc_wait+0x2>
}
    67f6:	4770      	bx	lr
    67f8:	4001e000 	.word	0x4001e000

000067fc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    67fc:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    67fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6802:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6806:	2a08      	cmp	r2, #8
    6808:	d14e      	bne.n	68a8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    680a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    680e:	2100      	movs	r1, #0
    6810:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6814:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6818:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    681c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    6820:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    6824:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6828:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    682c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6830:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    6834:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6838:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    683c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6840:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    6844:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6848:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    684c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6850:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    6854:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6858:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    685c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6860:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    6864:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6868:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    686c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6870:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    6874:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6878:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    687c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6880:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    6884:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6888:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    688c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6890:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    6894:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6898:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    689c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    68a0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    68a4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    68a8:	f7ff ff8e 	bl	67c8 <nrf52_errata_103>
    68ac:	b118      	cbz	r0, 68b6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    68ae:	4b3a      	ldr	r3, [pc, #232]	; (6998 <SystemInit+0x19c>)
    68b0:	4a3a      	ldr	r2, [pc, #232]	; (699c <SystemInit+0x1a0>)
    68b2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    68b6:	f7ff ff87 	bl	67c8 <nrf52_errata_103>
    68ba:	b118      	cbz	r0, 68c4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    68bc:	4b38      	ldr	r3, [pc, #224]	; (69a0 <SystemInit+0x1a4>)
    68be:	22fb      	movs	r2, #251	; 0xfb
    68c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    68c4:	f7ff ff80 	bl	67c8 <nrf52_errata_103>
    68c8:	b170      	cbz	r0, 68e8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    68ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    68ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    68d2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    68d6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    68da:	f022 020f 	bic.w	r2, r2, #15
    68de:	f003 030f 	and.w	r3, r3, #15
    68e2:	4313      	orrs	r3, r2
    68e4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    68e8:	f7ff ff6e 	bl	67c8 <nrf52_errata_103>
    68ec:	b120      	cbz	r0, 68f8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    68ee:	4b2d      	ldr	r3, [pc, #180]	; (69a4 <SystemInit+0x1a8>)
    68f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    68f4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    68f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    68fc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6900:	2b08      	cmp	r3, #8
    6902:	d11a      	bne.n	693a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6908:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    690c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    690e:	bf44      	itt	mi
    6910:	f06f 0201 	mvnmi.w	r2, #1
    6914:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    691c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    6920:	2b05      	cmp	r3, #5
    6922:	d802      	bhi.n	692a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6924:	4a20      	ldr	r2, [pc, #128]	; (69a8 <SystemInit+0x1ac>)
    6926:	5cd3      	ldrb	r3, [r2, r3]
    6928:	b13b      	cbz	r3, 693a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    692a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    692e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6936:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    693a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    693e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6942:	2a00      	cmp	r2, #0
    6944:	db03      	blt.n	694e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    6946:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    694a:	2b00      	cmp	r3, #0
    694c:	da22      	bge.n	6994 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    694e:	4917      	ldr	r1, [pc, #92]	; (69ac <SystemInit+0x1b0>)
    6950:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6952:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6956:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    695a:	2412      	movs	r4, #18
    nvmc_wait();
    695c:	f7ff ff46 	bl	67ec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6960:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6964:	f7ff ff42 	bl	67ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6968:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    696c:	f7ff ff3e 	bl	67ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6970:	2300      	movs	r3, #0
    6972:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6976:	f7ff ff39 	bl	67ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    697a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    697e:	490c      	ldr	r1, [pc, #48]	; (69b0 <SystemInit+0x1b4>)
    6980:	4b0c      	ldr	r3, [pc, #48]	; (69b4 <SystemInit+0x1b8>)
    6982:	68ca      	ldr	r2, [r1, #12]
    6984:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6988:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    698a:	60cb      	str	r3, [r1, #12]
    698c:	f3bf 8f4f 	dsb	sy
    __NOP();
    6990:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6992:	e7fd      	b.n	6990 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    6994:	bd10      	pop	{r4, pc}
    6996:	bf00      	nop
    6998:	40005000 	.word	0x40005000
    699c:	00038148 	.word	0x00038148
    69a0:	4000f000 	.word	0x4000f000
    69a4:	40029000 	.word	0x40029000
    69a8:	0000d2d5 	.word	0x0000d2d5
    69ac:	4001e000 	.word	0x4001e000
    69b0:	e000ed00 	.word	0xe000ed00
    69b4:	05fa0004 	.word	0x05fa0004

000069b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    69b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    69ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    69bc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    69be:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    69c2:	fab2 f382 	clz	r3, r2
    69c6:	f1c3 031f 	rsb	r3, r3, #31
    69ca:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    69cc:	fa05 f403 	lsl.w	r4, r5, r3
    69d0:	ea22 0404 	bic.w	r4, r2, r4
    69d4:	e850 6f00 	ldrex	r6, [r0]
    69d8:	4296      	cmp	r6, r2
    69da:	d104      	bne.n	69e6 <nrfx_flag32_alloc+0x2e>
    69dc:	e840 4c00 	strex	ip, r4, [r0]
    69e0:	f1bc 0f00 	cmp.w	ip, #0
    69e4:	d1f6      	bne.n	69d4 <nrfx_flag32_alloc+0x1c>
    69e6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    69ea:	d1e7      	bne.n	69bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    69ec:	4801      	ldr	r0, [pc, #4]	; (69f4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    69ee:	700b      	strb	r3, [r1, #0]
}
    69f0:	bd70      	pop	{r4, r5, r6, pc}
    69f2:	bf00      	nop
    69f4:	0bad0000 	.word	0x0bad0000

000069f8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    69f8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    69fa:	6803      	ldr	r3, [r0, #0]
    69fc:	40cb      	lsrs	r3, r1
    69fe:	07db      	lsls	r3, r3, #31
    6a00:	d414      	bmi.n	6a2c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6a02:	2301      	movs	r3, #1
    6a04:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    6a06:	6802      	ldr	r2, [r0, #0]
    6a08:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6a0c:	ea43 0102 	orr.w	r1, r3, r2
    6a10:	e850 4f00 	ldrex	r4, [r0]
    6a14:	4294      	cmp	r4, r2
    6a16:	d104      	bne.n	6a22 <nrfx_flag32_free+0x2a>
    6a18:	e840 1c00 	strex	ip, r1, [r0]
    6a1c:	f1bc 0f00 	cmp.w	ip, #0
    6a20:	d1f6      	bne.n	6a10 <nrfx_flag32_free+0x18>
    6a22:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a26:	d1ee      	bne.n	6a06 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    6a28:	4801      	ldr	r0, [pc, #4]	; (6a30 <nrfx_flag32_free+0x38>)
}
    6a2a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a2c:	4801      	ldr	r0, [pc, #4]	; (6a34 <nrfx_flag32_free+0x3c>)
    6a2e:	e7fc      	b.n	6a2a <nrfx_flag32_free+0x32>
    6a30:	0bad0000 	.word	0x0bad0000
    6a34:	0bad0004 	.word	0x0bad0004

00006a38 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    6a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6a3a:	4604      	mov	r4, r0
    6a3c:	b118      	cbz	r0, 6a46 <clock_stop+0xe>
    6a3e:	2801      	cmp	r0, #1
    6a40:	d022      	beq.n	6a88 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6a42:	b003      	add	sp, #12
    6a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    6a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a4a:	2202      	movs	r2, #2
    6a4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a50:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6a54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a58:	2201      	movs	r2, #1
    6a5a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6a5c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6a5e:	2301      	movs	r3, #1
    6a60:	f88d 3007 	strb.w	r3, [sp, #7]
    6a64:	f242 7510 	movw	r5, #10000	; 0x2710
    6a68:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    6a6c:	b1cc      	cbz	r4, 6aa2 <clock_stop+0x6a>
    6a6e:	2c01      	cmp	r4, #1
    6a70:	d1e7      	bne.n	6a42 <clock_stop+0xa>
            if (p_clk_src != NULL)
    6a72:	b3c7      	cbz	r7, 6ae6 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6a74:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6a78:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6a7c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6a7e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6a82:	03da      	lsls	r2, r3, #15
    6a84:	d521      	bpl.n	6aca <clock_stop+0x92>
    6a86:	e016      	b.n	6ab6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    6a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a8c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6a8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6a96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a9a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6a9c:	f10d 0707 	add.w	r7, sp, #7
    6aa0:	e7dd      	b.n	6a5e <clock_stop+0x26>
            if (p_clk_src != NULL)
    6aa2:	b1b7      	cbz	r7, 6ad2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6aa4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6aa8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6aac:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6aae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6ab2:	03d8      	lsls	r0, r3, #15
    6ab4:	d5c5      	bpl.n	6a42 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6ab6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6aba:	2801      	cmp	r0, #1
    6abc:	d103      	bne.n	6ac6 <clock_stop+0x8e>
    6abe:	f004 fc6f 	bl	b3a0 <nrfx_busy_wait>
    6ac2:	3d01      	subs	r5, #1
    6ac4:	d1d2      	bne.n	6a6c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6ac6:	2c01      	cmp	r4, #1
    6ac8:	d1bb      	bne.n	6a42 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    6aca:	4b0c      	ldr	r3, [pc, #48]	; (6afc <clock_stop+0xc4>)
    6acc:	2200      	movs	r2, #0
    6ace:	715a      	strb	r2, [r3, #5]
    6ad0:	e7b7      	b.n	6a42 <clock_stop+0xa>
    6ad2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6ad6:	03d9      	lsls	r1, r3, #15
    6ad8:	d5b3      	bpl.n	6a42 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6ada:	2001      	movs	r0, #1
    6adc:	f004 fc60 	bl	b3a0 <nrfx_busy_wait>
    6ae0:	3d01      	subs	r5, #1
    6ae2:	d1f6      	bne.n	6ad2 <clock_stop+0x9a>
    6ae4:	e7ad      	b.n	6a42 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6ae6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6aea:	03db      	lsls	r3, r3, #15
    6aec:	d5ed      	bpl.n	6aca <clock_stop+0x92>
    6aee:	2001      	movs	r0, #1
    6af0:	f004 fc56 	bl	b3a0 <nrfx_busy_wait>
    6af4:	3d01      	subs	r5, #1
    6af6:	d1f6      	bne.n	6ae6 <clock_stop+0xae>
    6af8:	e7e7      	b.n	6aca <clock_stop+0x92>
    6afa:	bf00      	nop
    6afc:	20001ad0 	.word	0x20001ad0

00006b00 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6b00:	4b04      	ldr	r3, [pc, #16]	; (6b14 <nrfx_clock_init+0x14>)
    6b02:	791a      	ldrb	r2, [r3, #4]
    6b04:	b922      	cbnz	r2, 6b10 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6b06:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6b08:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6b0a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6b0c:	4802      	ldr	r0, [pc, #8]	; (6b18 <nrfx_clock_init+0x18>)
    6b0e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6b10:	4802      	ldr	r0, [pc, #8]	; (6b1c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6b12:	4770      	bx	lr
    6b14:	20001ad0 	.word	0x20001ad0
    6b18:	0bad0000 	.word	0x0bad0000
    6b1c:	0bad000c 	.word	0x0bad000c

00006b20 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6b20:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6b22:	2000      	movs	r0, #0
    6b24:	f7fc ff96 	bl	3a54 <arch_irq_is_enabled>
    6b28:	b908      	cbnz	r0, 6b2e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6b2a:	f7fc ff71 	bl	3a10 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b32:	2200      	movs	r2, #0
    6b34:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    6b38:	4b01      	ldr	r3, [pc, #4]	; (6b40 <nrfx_clock_enable+0x20>)
    6b3a:	2201      	movs	r2, #1
    6b3c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6b3e:	bd08      	pop	{r3, pc}
    6b40:	20001f98 	.word	0x20001f98

00006b44 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6b44:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b4a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6b4e:	b16a      	cbz	r2, 6b6c <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b50:	2200      	movs	r2, #0
    6b52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6b56:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6b5a:	2201      	movs	r2, #1
    6b5c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6b60:	4b11      	ldr	r3, [pc, #68]	; (6ba8 <nrfx_clock_irq_handler+0x64>)
    6b62:	7958      	ldrb	r0, [r3, #5]
    6b64:	b910      	cbnz	r0, 6b6c <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    6b66:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b70:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6b74:	b172      	cbz	r2, 6b94 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b76:	2200      	movs	r2, #0
    6b78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6b80:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b84:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6b88:	0792      	lsls	r2, r2, #30
    6b8a:	d104      	bne.n	6b96 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b8c:	2201      	movs	r2, #1
    6b8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b92:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6b94:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6b96:	2202      	movs	r2, #2
    6b98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6b9c:	4b02      	ldr	r3, [pc, #8]	; (6ba8 <nrfx_clock_irq_handler+0x64>)
}
    6b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	2001      	movs	r0, #1
    6ba6:	4718      	bx	r3
    6ba8:	20001ad0 	.word	0x20001ad0

00006bac <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6bac:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6bae:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6bb2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    6bb4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6bb6:	6002      	str	r2, [r0, #0]
}
    6bb8:	4802      	ldr	r0, [pc, #8]	; (6bc4 <nrf_gpio_pin_port_decode+0x18>)
    6bba:	bf18      	it	ne
    6bbc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6bc0:	4770      	bx	lr
    6bc2:	bf00      	nop
    6bc4:	50000300 	.word	0x50000300

00006bc8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6bc8:	4b03      	ldr	r3, [pc, #12]	; (6bd8 <pin_in_use_by_te+0x10>)
    6bca:	3008      	adds	r0, #8
    6bcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6bd0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6bd4:	4770      	bx	lr
    6bd6:	bf00      	nop
    6bd8:	20000058 	.word	0x20000058

00006bdc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6bdc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bde:	f100 0308 	add.w	r3, r0, #8
    6be2:	4c0c      	ldr	r4, [pc, #48]	; (6c14 <call_handler+0x38>)
    6be4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6be8:	05da      	lsls	r2, r3, #23
{
    6bea:	4605      	mov	r5, r0
    6bec:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bee:	d507      	bpl.n	6c00 <call_handler+0x24>
    6bf0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6bf4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6bf8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6bfc:	6852      	ldr	r2, [r2, #4]
    6bfe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6c00:	68a3      	ldr	r3, [r4, #8]
    6c02:	b12b      	cbz	r3, 6c10 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c04:	68e2      	ldr	r2, [r4, #12]
    6c06:	4631      	mov	r1, r6
    6c08:	4628      	mov	r0, r5
    }
}
    6c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6c0e:	4718      	bx	r3
}
    6c10:	bd70      	pop	{r4, r5, r6, pc}
    6c12:	bf00      	nop
    6c14:	20000058 	.word	0x20000058

00006c18 <release_handler>:
{
    6c18:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6c1a:	4a12      	ldr	r2, [pc, #72]	; (6c64 <release_handler+0x4c>)
    6c1c:	3008      	adds	r0, #8
    6c1e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6c22:	05d9      	lsls	r1, r3, #23
    6c24:	d51b      	bpl.n	6c5e <release_handler+0x46>
    6c26:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6c2a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c2e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c32:	f102 040e 	add.w	r4, r2, #14
    6c36:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6c38:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6c3c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6c40:	d003      	beq.n	6c4a <release_handler+0x32>
    6c42:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6c46:	4299      	cmp	r1, r3
    6c48:	d009      	beq.n	6c5e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6c4a:	3001      	adds	r0, #1
    6c4c:	2830      	cmp	r0, #48	; 0x30
    6c4e:	d1f3      	bne.n	6c38 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6c50:	2300      	movs	r3, #0
    6c52:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c56:	4804      	ldr	r0, [pc, #16]	; (6c68 <release_handler+0x50>)
}
    6c58:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6c5a:	f7ff becd 	b.w	69f8 <nrfx_flag32_free>
}
    6c5e:	bc10      	pop	{r4}
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop
    6c64:	20000058 	.word	0x20000058
    6c68:	200000cc 	.word	0x200000cc

00006c6c <pin_handler_trigger_uninit>:
{
    6c6c:	b538      	push	{r3, r4, r5, lr}
    6c6e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6c70:	f7ff ffaa 	bl	6bc8 <pin_in_use_by_te>
    6c74:	4c09      	ldr	r4, [pc, #36]	; (6c9c <pin_handler_trigger_uninit+0x30>)
    6c76:	f102 0508 	add.w	r5, r2, #8
    6c7a:	b140      	cbz	r0, 6c8e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c7c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6c80:	4907      	ldr	r1, [pc, #28]	; (6ca0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6c82:	0b5b      	lsrs	r3, r3, #13
    6c84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6c88:	2000      	movs	r0, #0
    6c8a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6c8e:	4610      	mov	r0, r2
    6c90:	f7ff ffc2 	bl	6c18 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6c94:	2300      	movs	r3, #0
    6c96:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6c9a:	bd38      	pop	{r3, r4, r5, pc}
    6c9c:	20000058 	.word	0x20000058
    6ca0:	40006000 	.word	0x40006000

00006ca4 <nrfx_gpiote_input_configure>:
{
    6ca4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6ca8:	4604      	mov	r4, r0
    6caa:	4616      	mov	r6, r2
    6cac:	461d      	mov	r5, r3
    if (p_input_config)
    6cae:	b301      	cbz	r1, 6cf2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6cb0:	4f4e      	ldr	r7, [pc, #312]	; (6dec <nrfx_gpiote_input_configure+0x148>)
    6cb2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6cb6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6cba:	079b      	lsls	r3, r3, #30
    6cbc:	d502      	bpl.n	6cc4 <nrfx_gpiote_input_configure+0x20>
    6cbe:	f7ff ff83 	bl	6bc8 <pin_in_use_by_te>
    6cc2:	bb10      	cbnz	r0, 6d0a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6cc4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6cc6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6cca:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6cce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6cd2:	f10d 020f 	add.w	r2, sp, #15
    6cd6:	460b      	mov	r3, r1
    6cd8:	4620      	mov	r0, r4
    6cda:	f10d 010e 	add.w	r1, sp, #14
    6cde:	f004 fb9f 	bl	b420 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6ce2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6ce6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6cea:	f043 0301 	orr.w	r3, r3, #1
    6cee:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    6cf2:	b346      	cbz	r6, 6d46 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6cf4:	4b3d      	ldr	r3, [pc, #244]	; (6dec <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6cf6:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6cfa:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6cfc:	f104 0708 	add.w	r7, r4, #8
    6d00:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    6d04:	0788      	lsls	r0, r1, #30
    6d06:	d502      	bpl.n	6d0e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    6d08:	b1aa      	cbz	r2, 6d36 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    6d0a:	4839      	ldr	r0, [pc, #228]	; (6df0 <nrfx_gpiote_input_configure+0x14c>)
    6d0c:	e01d      	b.n	6d4a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6d0e:	f021 0120 	bic.w	r1, r1, #32
    6d12:	04c9      	lsls	r1, r1, #19
    6d14:	0cc9      	lsrs	r1, r1, #19
    6d16:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    6d1a:	b162      	cbz	r2, 6d36 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    6d1c:	f1bc 0f03 	cmp.w	ip, #3
    6d20:	d8f3      	bhi.n	6d0a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6d22:	6872      	ldr	r2, [r6, #4]
    6d24:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6d26:	f1bc 0f00 	cmp.w	ip, #0
    6d2a:	d111      	bne.n	6d50 <nrfx_gpiote_input_configure+0xac>
    6d2c:	4a31      	ldr	r2, [pc, #196]	; (6df4 <nrfx_gpiote_input_configure+0x150>)
    6d2e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    6d32:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6d36:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    6d3a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6d3e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    6d42:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    6d46:	bb45      	cbnz	r5, 6d9a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    6d48:	482b      	ldr	r0, [pc, #172]	; (6df8 <nrfx_gpiote_input_configure+0x154>)
}
    6d4a:	b004      	add	sp, #16
    6d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d50:	00b2      	lsls	r2, r6, #2
    6d52:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6d56:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6d5a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    6d5e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6d62:	f020 0003 	bic.w	r0, r0, #3
    6d66:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6d6a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6d6e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    6d72:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6d76:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d7a:	0220      	lsls	r0, r4, #8
    6d7c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6d80:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6d84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6d88:	ea40 000e 	orr.w	r0, r0, lr
    6d8c:	f041 0120 	orr.w	r1, r1, #32
    6d90:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    6d94:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6d98:	e7cd      	b.n	6d36 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6d9a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6d9e:	4620      	mov	r0, r4
    6da0:	f7ff ff3a 	bl	6c18 <release_handler>
    if (!handler)
    6da4:	2e00      	cmp	r6, #0
    6da6:	d0cf      	beq.n	6d48 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6da8:	4d10      	ldr	r5, [pc, #64]	; (6dec <nrfx_gpiote_input_configure+0x148>)
    6daa:	e9d5 2300 	ldrd	r2, r3, [r5]
    6dae:	4296      	cmp	r6, r2
    6db0:	d101      	bne.n	6db6 <nrfx_gpiote_input_configure+0x112>
    6db2:	429f      	cmp	r7, r3
    6db4:	d018      	beq.n	6de8 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6db6:	4811      	ldr	r0, [pc, #68]	; (6dfc <nrfx_gpiote_input_configure+0x158>)
    6db8:	f10d 010f 	add.w	r1, sp, #15
    6dbc:	f7ff fdfc 	bl	69b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6dc0:	4b0d      	ldr	r3, [pc, #52]	; (6df8 <nrfx_gpiote_input_configure+0x154>)
    6dc2:	4298      	cmp	r0, r3
    6dc4:	d1c1      	bne.n	6d4a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    6dc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6dca:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6dce:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6dd2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6dd4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6dd6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6dda:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6de2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6de6:	e7af      	b.n	6d48 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6de8:	2200      	movs	r2, #0
    6dea:	e7ee      	b.n	6dca <nrfx_gpiote_input_configure+0x126>
    6dec:	20000058 	.word	0x20000058
    6df0:	0bad0004 	.word	0x0bad0004
    6df4:	40006000 	.word	0x40006000
    6df8:	0bad0000 	.word	0x0bad0000
    6dfc:	200000cc 	.word	0x200000cc

00006e00 <nrfx_gpiote_output_configure>:
{
    6e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e02:	4604      	mov	r4, r0
    6e04:	b085      	sub	sp, #20
    6e06:	4615      	mov	r5, r2
    if (p_config)
    6e08:	b319      	cbz	r1, 6e52 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e0a:	4e33      	ldr	r6, [pc, #204]	; (6ed8 <nrfx_gpiote_output_configure+0xd8>)
    6e0c:	f100 0708 	add.w	r7, r0, #8
    6e10:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6e14:	0793      	lsls	r3, r2, #30
    6e16:	d403      	bmi.n	6e20 <nrfx_gpiote_output_configure+0x20>
    6e18:	f7ff fed6 	bl	6bc8 <pin_in_use_by_te>
    6e1c:	2800      	cmp	r0, #0
    6e1e:	d158      	bne.n	6ed2 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6e20:	f012 0f1c 	tst.w	r2, #28
    6e24:	d002      	beq.n	6e2c <nrfx_gpiote_output_configure+0x2c>
    6e26:	784b      	ldrb	r3, [r1, #1]
    6e28:	2b01      	cmp	r3, #1
    6e2a:	d052      	beq.n	6ed2 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6e2c:	2301      	movs	r3, #1
    6e2e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6e32:	2300      	movs	r3, #0
    6e34:	e9cd 1300 	strd	r1, r3, [sp]
    6e38:	1c4a      	adds	r2, r1, #1
    6e3a:	1c8b      	adds	r3, r1, #2
    6e3c:	4620      	mov	r0, r4
    6e3e:	f10d 010f 	add.w	r1, sp, #15
    6e42:	f004 faed 	bl	b420 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6e46:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6e4a:	f043 0303 	orr.w	r3, r3, #3
    6e4e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    6e52:	b915      	cbnz	r5, 6e5a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    6e54:	4821      	ldr	r0, [pc, #132]	; (6edc <nrfx_gpiote_output_configure+0xdc>)
}
    6e56:	b005      	add	sp, #20
    6e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e5a:	4e1f      	ldr	r6, [pc, #124]	; (6ed8 <nrfx_gpiote_output_configure+0xd8>)
    6e5c:	f104 0708 	add.w	r7, r4, #8
    6e60:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6e64:	0783      	lsls	r3, r0, #30
    6e66:	d534      	bpl.n	6ed2 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    6e68:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6e6c:	4661      	mov	r1, ip
    6e6e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6e70:	f020 0020 	bic.w	r0, r0, #32
    6e74:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6e78:	04c0      	lsls	r0, r0, #19
    6e7a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6e7e:	0cc0      	lsrs	r0, r0, #19
    6e80:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e84:	2300      	movs	r3, #0
    6e86:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6e8a:	786a      	ldrb	r2, [r5, #1]
    6e8c:	2a00      	cmp	r2, #0
    6e8e:	d0e1      	beq.n	6e54 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6e90:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6e94:	78ad      	ldrb	r5, [r5, #2]
    6e96:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6e9a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6e9e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ea2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6ea6:	0223      	lsls	r3, r4, #8
    6ea8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6eac:	0412      	lsls	r2, r2, #16
    6eae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6eb2:	ea43 030e 	orr.w	r3, r3, lr
    6eb6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6eb8:	052a      	lsls	r2, r5, #20
    6eba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6ebe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ec2:	4313      	orrs	r3, r2
    6ec4:	f040 0020 	orr.w	r0, r0, #32
    6ec8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6ecc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6ed0:	e7c0      	b.n	6e54 <nrfx_gpiote_output_configure+0x54>
{
    6ed2:	4803      	ldr	r0, [pc, #12]	; (6ee0 <nrfx_gpiote_output_configure+0xe0>)
    6ed4:	e7bf      	b.n	6e56 <nrfx_gpiote_output_configure+0x56>
    6ed6:	bf00      	nop
    6ed8:	20000058 	.word	0x20000058
    6edc:	0bad0000 	.word	0x0bad0000
    6ee0:	0bad0004 	.word	0x0bad0004

00006ee4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6ee4:	4b01      	ldr	r3, [pc, #4]	; (6eec <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6ee6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6eea:	4770      	bx	lr
    6eec:	20000058 	.word	0x20000058

00006ef0 <nrfx_gpiote_channel_get>:
{
    6ef0:	b508      	push	{r3, lr}
    6ef2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6ef4:	f7ff fe68 	bl	6bc8 <pin_in_use_by_te>
    6ef8:	b138      	cbz	r0, 6f0a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6efa:	4b05      	ldr	r3, [pc, #20]	; (6f10 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6efc:	4805      	ldr	r0, [pc, #20]	; (6f14 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6efe:	3208      	adds	r2, #8
    6f00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6f04:	0b5b      	lsrs	r3, r3, #13
    6f06:	700b      	strb	r3, [r1, #0]
}
    6f08:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6f0a:	4803      	ldr	r0, [pc, #12]	; (6f18 <nrfx_gpiote_channel_get+0x28>)
    6f0c:	e7fc      	b.n	6f08 <nrfx_gpiote_channel_get+0x18>
    6f0e:	bf00      	nop
    6f10:	20000058 	.word	0x20000058
    6f14:	0bad0000 	.word	0x0bad0000
    6f18:	0bad0004 	.word	0x0bad0004

00006f1c <nrfx_gpiote_init>:
{
    6f1c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6f1e:	4c0f      	ldr	r4, [pc, #60]	; (6f5c <nrfx_gpiote_init+0x40>)
    6f20:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6f24:	b9bd      	cbnz	r5, 6f56 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6f26:	2260      	movs	r2, #96	; 0x60
    6f28:	4629      	mov	r1, r5
    6f2a:	f104 0010 	add.w	r0, r4, #16
    6f2e:	f004 f82f 	bl	af90 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6f32:	2006      	movs	r0, #6
    6f34:	f7fc fd6c 	bl	3a10 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f38:	4b09      	ldr	r3, [pc, #36]	; (6f60 <nrfx_gpiote_init+0x44>)
    return err_code;
    6f3a:	480a      	ldr	r0, [pc, #40]	; (6f64 <nrfx_gpiote_init+0x48>)
    6f3c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6f40:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6f44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6f4c:	2301      	movs	r3, #1
    6f4e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6f52:	6763      	str	r3, [r4, #116]	; 0x74
}
    6f54:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6f56:	4804      	ldr	r0, [pc, #16]	; (6f68 <nrfx_gpiote_init+0x4c>)
    6f58:	e7fc      	b.n	6f54 <nrfx_gpiote_init+0x38>
    6f5a:	bf00      	nop
    6f5c:	20000058 	.word	0x20000058
    6f60:	40006000 	.word	0x40006000
    6f64:	0bad0000 	.word	0x0bad0000
    6f68:	0bad0005 	.word	0x0bad0005

00006f6c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6f6c:	4b03      	ldr	r3, [pc, #12]	; (6f7c <nrfx_gpiote_is_init+0x10>)
    6f6e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6f72:	3800      	subs	r0, #0
    6f74:	bf18      	it	ne
    6f76:	2001      	movne	r0, #1
    6f78:	4770      	bx	lr
    6f7a:	bf00      	nop
    6f7c:	20000058 	.word	0x20000058

00006f80 <nrfx_gpiote_channel_free>:
{
    6f80:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6f82:	4801      	ldr	r0, [pc, #4]	; (6f88 <nrfx_gpiote_channel_free+0x8>)
    6f84:	f7ff bd38 	b.w	69f8 <nrfx_flag32_free>
    6f88:	200000c8 	.word	0x200000c8

00006f8c <nrfx_gpiote_channel_alloc>:
{
    6f8c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6f8e:	4801      	ldr	r0, [pc, #4]	; (6f94 <nrfx_gpiote_channel_alloc+0x8>)
    6f90:	f7ff bd12 	b.w	69b8 <nrfx_flag32_alloc>
    6f94:	200000c8 	.word	0x200000c8

00006f98 <nrfx_gpiote_trigger_enable>:
{
    6f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f9a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6f9c:	f7ff fe14 	bl	6bc8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fa0:	f104 0208 	add.w	r2, r4, #8
    6fa4:	4b1e      	ldr	r3, [pc, #120]	; (7020 <nrfx_gpiote_trigger_enable+0x88>)
    6fa6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6faa:	b1e8      	cbz	r0, 6fe8 <nrfx_gpiote_trigger_enable+0x50>
    6fac:	f013 0502 	ands.w	r5, r3, #2
    6fb0:	d11a      	bne.n	6fe8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6fb2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6fb4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6fb6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6fba:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6fbe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6fc2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6fc6:	6005      	str	r5, [r0, #0]
    6fc8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6fca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6fce:	f040 0001 	orr.w	r0, r0, #1
    6fd2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6fd6:	b129      	cbz	r1, 6fe4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6fd8:	2201      	movs	r2, #1
    6fda:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6fde:	4a11      	ldr	r2, [pc, #68]	; (7024 <nrfx_gpiote_trigger_enable+0x8c>)
    6fe0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6fe4:	b003      	add	sp, #12
    6fe6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6fe8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6fec:	2b04      	cmp	r3, #4
    6fee:	d012      	beq.n	7016 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6ff0:	2b05      	cmp	r3, #5
    6ff2:	d012      	beq.n	701a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ff4:	a801      	add	r0, sp, #4
    6ff6:	9401      	str	r4, [sp, #4]
    6ff8:	f7ff fdd8 	bl	6bac <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6ffc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6ffe:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7002:	40d9      	lsrs	r1, r3
    7004:	f001 0101 	and.w	r1, r1, #1
    7008:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    700a:	4620      	mov	r0, r4
}
    700c:	b003      	add	sp, #12
    700e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7012:	f004 ba4e 	b.w	b4b2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7016:	2103      	movs	r1, #3
    7018:	e7f7      	b.n	700a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    701a:	2102      	movs	r1, #2
    701c:	e7f5      	b.n	700a <nrfx_gpiote_trigger_enable+0x72>
    701e:	bf00      	nop
    7020:	20000058 	.word	0x20000058
    7024:	40006000 	.word	0x40006000

00007028 <nrfx_gpiote_trigger_disable>:
{
    7028:	b508      	push	{r3, lr}
    702a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    702c:	f7ff fdcc 	bl	6bc8 <pin_in_use_by_te>
    7030:	b1c0      	cbz	r0, 7064 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7032:	f102 0108 	add.w	r1, r2, #8
    7036:	4b0e      	ldr	r3, [pc, #56]	; (7070 <nrfx_gpiote_trigger_disable+0x48>)
    7038:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    703c:	0799      	lsls	r1, r3, #30
    703e:	d411      	bmi.n	7064 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7040:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7042:	2201      	movs	r2, #1
    7044:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    7046:	009b      	lsls	r3, r3, #2
    7048:	490a      	ldr	r1, [pc, #40]	; (7074 <nrfx_gpiote_trigger_disable+0x4c>)
    704a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    704e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7052:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7056:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    705a:	f022 0203 	bic.w	r2, r2, #3
    705e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    7062:	bd08      	pop	{r3, pc}
    7064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7068:	2100      	movs	r1, #0
    706a:	4610      	mov	r0, r2
    706c:	f004 ba21 	b.w	b4b2 <nrf_gpio_cfg_sense_set>
    7070:	20000058 	.word	0x20000058
    7074:	40006000 	.word	0x40006000

00007078 <nrfx_gpiote_pin_uninit>:
{
    7078:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    707a:	4b0e      	ldr	r3, [pc, #56]	; (70b4 <nrfx_gpiote_pin_uninit+0x3c>)
    707c:	f100 0208 	add.w	r2, r0, #8
{
    7080:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7082:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7086:	07db      	lsls	r3, r3, #31
    7088:	d511      	bpl.n	70ae <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    708a:	f7ff ffcd 	bl	7028 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    708e:	4620      	mov	r0, r4
    7090:	f7ff fdec 	bl	6c6c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7094:	a801      	add	r0, sp, #4
    7096:	9401      	str	r4, [sp, #4]
    7098:	f7ff fd88 	bl	6bac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    709c:	9b01      	ldr	r3, [sp, #4]
    709e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    70a2:	2202      	movs	r2, #2
    70a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    70a8:	4803      	ldr	r0, [pc, #12]	; (70b8 <nrfx_gpiote_pin_uninit+0x40>)
}
    70aa:	b002      	add	sp, #8
    70ac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    70ae:	4803      	ldr	r0, [pc, #12]	; (70bc <nrfx_gpiote_pin_uninit+0x44>)
    70b0:	e7fb      	b.n	70aa <nrfx_gpiote_pin_uninit+0x32>
    70b2:	bf00      	nop
    70b4:	20000058 	.word	0x20000058
    70b8:	0bad0000 	.word	0x0bad0000
    70bc:	0bad0004 	.word	0x0bad0004

000070c0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    70c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c4:	4b68      	ldr	r3, [pc, #416]	; (7268 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    70c6:	4869      	ldr	r0, [pc, #420]	; (726c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    70c8:	4969      	ldr	r1, [pc, #420]	; (7270 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    70ca:	2600      	movs	r6, #0
{
    70cc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    70ce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    70d0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70d2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    70d4:	b135      	cbz	r5, 70e4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    70d6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    70da:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    70dc:	bf1e      	ittt	ne
    70de:	601c      	strne	r4, [r3, #0]
    70e0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    70e2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    70e4:	3304      	adds	r3, #4
    70e6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    70e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    70ec:	d1f1      	bne.n	70d2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70ee:	f8df 917c 	ldr.w	r9, [pc, #380]	; 726c <nrfx_gpiote_irq_handler+0x1ac>
    70f2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    70f6:	2b00      	cmp	r3, #0
    70f8:	f000 8099 	beq.w	722e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    70fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7100:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    7104:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7106:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    710a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    710e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7110:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7114:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    7118:	f10d 0a10 	add.w	sl, sp, #16
    711c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    7120:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    7122:	f04f 0b01 	mov.w	fp, #1
    7126:	e049      	b.n	71bc <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    7128:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    712a:	4a52      	ldr	r2, [pc, #328]	; (7274 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    712c:	fa94 f4a4 	rbit	r4, r4
    7130:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    7134:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    7136:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7138:	f104 0308 	add.w	r3, r4, #8
    713c:	9403      	str	r4, [sp, #12]
    713e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    7142:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    7146:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    714a:	fa0b f202 	lsl.w	r2, fp, r2
    714e:	ea23 0302 	bic.w	r3, r3, r2
    7152:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7156:	a803      	add	r0, sp, #12
    7158:	f7ff fd28 	bl	6bac <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    715c:	9b03      	ldr	r3, [sp, #12]
    715e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7162:	08b9      	lsrs	r1, r7, #2
    7164:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7168:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    716c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    716e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7170:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    7174:	d52c      	bpl.n	71d0 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    7176:	4620      	mov	r0, r4
    7178:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    717a:	b2dd      	uxtb	r5, r3
    717c:	f7ff fd2e 	bl	6bdc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7180:	a803      	add	r0, sp, #12
    7182:	9403      	str	r4, [sp, #12]
    7184:	f7ff fd12 	bl	6bac <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7188:	9b03      	ldr	r3, [sp, #12]
    718a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    718e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7192:	f3c3 4301 	ubfx	r3, r3, #16, #2
    7196:	429d      	cmp	r5, r3
    7198:	d107      	bne.n	71aa <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    719a:	2100      	movs	r1, #0
    719c:	4620      	mov	r0, r4
    719e:	f004 f988 	bl	b4b2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    71a2:	4629      	mov	r1, r5
    71a4:	4620      	mov	r0, r4
    71a6:	f004 f984 	bl	b4b2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    71aa:	a803      	add	r0, sp, #12
    71ac:	9403      	str	r4, [sp, #12]
    71ae:	f7ff fcfd 	bl	6bac <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    71b2:	9b03      	ldr	r3, [sp, #12]
    71b4:	fa0b f303 	lsl.w	r3, fp, r3
    71b8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    71bc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    71c0:	2c00      	cmp	r4, #0
    71c2:	d1b1      	bne.n	7128 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    71c4:	f1b8 0f00 	cmp.w	r8, #0
    71c8:	d11d      	bne.n	7206 <nrfx_gpiote_irq_handler+0x146>
    71ca:	f04f 0801 	mov.w	r8, #1
    71ce:	e7a5      	b.n	711c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    71d0:	2b02      	cmp	r3, #2
    71d2:	d10c      	bne.n	71ee <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    71d4:	2103      	movs	r1, #3
    71d6:	4620      	mov	r0, r4
    71d8:	f004 f96b 	bl	b4b2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    71dc:	f005 0305 	and.w	r3, r5, #5
    71e0:	2b01      	cmp	r3, #1
    71e2:	d1e2      	bne.n	71aa <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    71e4:	4639      	mov	r1, r7
    71e6:	4620      	mov	r0, r4
    71e8:	f7ff fcf8 	bl	6bdc <call_handler>
    71ec:	e7dd      	b.n	71aa <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    71ee:	2102      	movs	r1, #2
    71f0:	4620      	mov	r0, r4
    71f2:	9301      	str	r3, [sp, #4]
    71f4:	f004 f95d 	bl	b4b2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    71f8:	2d03      	cmp	r5, #3
    71fa:	d0f3      	beq.n	71e4 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    71fc:	9b01      	ldr	r3, [sp, #4]
    71fe:	2b03      	cmp	r3, #3
    7200:	d1d3      	bne.n	71aa <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7202:	2d02      	cmp	r5, #2
    7204:	e7ed      	b.n	71e2 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    7206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    720a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    720e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    7212:	4919      	ldr	r1, [pc, #100]	; (7278 <nrfx_gpiote_irq_handler+0x1b8>)
    7214:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    7218:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    721a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    721e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    7222:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    7224:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    7226:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    722a:	f47f af73 	bne.w	7114 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    722e:	2401      	movs	r4, #1
    while (mask)
    7230:	b916      	cbnz	r6, 7238 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7232:	b007      	add	sp, #28
    7234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7238:	fa96 f3a6 	rbit	r3, r6
    723c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7240:	fa04 f203 	lsl.w	r2, r4, r3
    7244:	009b      	lsls	r3, r3, #2
    7246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    724a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    724e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7252:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7256:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    725a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    725e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    7262:	f7ff fcbb 	bl	6bdc <call_handler>
    7266:	e7e3      	b.n	7230 <nrfx_gpiote_irq_handler+0x170>
    7268:	40006100 	.word	0x40006100
    726c:	40006000 	.word	0x40006000
    7270:	40006120 	.word	0x40006120
    7274:	20000058 	.word	0x20000058
    7278:	50000300 	.word	0x50000300

0000727c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    727c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    727e:	4c18      	ldr	r4, [pc, #96]	; (72e0 <nrfx_power_init+0x64>)
    7280:	7823      	ldrb	r3, [r4, #0]
    7282:	bb53      	cbnz	r3, 72da <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    7284:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
    7286:	f3c2 0340 	ubfx	r3, r2, #1, #1
    728a:	0792      	lsls	r2, r2, #30
    728c:	d512      	bpl.n	72b4 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    728e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7292:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7296:	2a08      	cmp	r2, #8
    7298:	d10b      	bne.n	72b2 <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    729a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    729e:	2b05      	cmp	r3, #5
    72a0:	d807      	bhi.n	72b2 <nrfx_power_init+0x36>
    72a2:	4a10      	ldr	r2, [pc, #64]	; (72e4 <nrfx_power_init+0x68>)
    72a4:	5cd3      	ldrb	r3, [r2, r3]
    72a6:	b123      	cbz	r3, 72b2 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    72a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72ac:	2201      	movs	r2, #1
    72ae:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    72b2:	2301      	movs	r3, #1
    72b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72b8:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    72bc:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    72be:	f003 0301 	and.w	r3, r3, #1
    72c2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    72c6:	2000      	movs	r0, #0
    72c8:	f7fc fbc4 	bl	3a54 <arch_irq_is_enabled>
    72cc:	b908      	cbnz	r0, 72d2 <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    72ce:	f7fc fb9f 	bl	3a10 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    72d2:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    72d4:	4804      	ldr	r0, [pc, #16]	; (72e8 <nrfx_power_init+0x6c>)
    m_initialized = true;
    72d6:	7023      	strb	r3, [r4, #0]
}
    72d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    72da:	4804      	ldr	r0, [pc, #16]	; (72ec <nrfx_power_init+0x70>)
    72dc:	e7fc      	b.n	72d8 <nrfx_power_init+0x5c>
    72de:	bf00      	nop
    72e0:	20001f99 	.word	0x20001f99
    72e4:	0000d2f8 	.word	0x0000d2f8
    72e8:	0bad0000 	.word	0x0bad0000
    72ec:	0bad000c 	.word	0x0bad000c

000072f0 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    72f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72f4:	f44f 7260 	mov.w	r2, #896	; 0x380
    72f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    72fc:	4b01      	ldr	r3, [pc, #4]	; (7304 <nrfx_power_usbevt_uninit+0x14>)
    72fe:	2200      	movs	r2, #0
    7300:	601a      	str	r2, [r3, #0]
}
    7302:	4770      	bx	lr
    7304:	20001ad8 	.word	0x20001ad8

00007308 <nrfx_power_usbevt_init>:
{
    7308:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    730a:	f7ff fff1 	bl	72f0 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    730e:	6803      	ldr	r3, [r0, #0]
    7310:	b10b      	cbz	r3, 7316 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    7312:	4a01      	ldr	r2, [pc, #4]	; (7318 <nrfx_power_usbevt_init+0x10>)
    7314:	6013      	str	r3, [r2, #0]
}
    7316:	bd08      	pop	{r3, pc}
    7318:	20001ad8 	.word	0x20001ad8

0000731c <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    731c:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    731e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7322:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7326:	0762      	lsls	r2, r4, #29
    7328:	d507      	bpl.n	733a <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    732a:	f44f 7084 	mov.w	r0, #264	; 0x108
    732e:	f004 f8cf 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7332:	b110      	cbz	r0, 733a <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    7334:	4b1e      	ldr	r3, [pc, #120]	; (73b0 <nrfx_power_irq_handler+0x94>)
    7336:	681b      	ldr	r3, [r3, #0]
    7338:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    733a:	06a3      	lsls	r3, r4, #26
    733c:	d508      	bpl.n	7350 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    733e:	f44f 708a 	mov.w	r0, #276	; 0x114
    7342:	f004 f8c5 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7346:	b118      	cbz	r0, 7350 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7348:	4b1a      	ldr	r3, [pc, #104]	; (73b4 <nrfx_power_irq_handler+0x98>)
    734a:	2000      	movs	r0, #0
    734c:	681b      	ldr	r3, [r3, #0]
    734e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7350:	0660      	lsls	r0, r4, #25
    7352:	d508      	bpl.n	7366 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    7354:	f44f 708c 	mov.w	r0, #280	; 0x118
    7358:	f004 f8ba 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    735c:	b118      	cbz	r0, 7366 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    735e:	4b15      	ldr	r3, [pc, #84]	; (73b4 <nrfx_power_irq_handler+0x98>)
    7360:	2001      	movs	r0, #1
    7362:	681b      	ldr	r3, [r3, #0]
    7364:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7366:	0621      	lsls	r1, r4, #24
    7368:	d508      	bpl.n	737c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    736a:	f44f 708e 	mov.w	r0, #284	; 0x11c
    736e:	f004 f8af 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7372:	b118      	cbz	r0, 737c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    7374:	4b10      	ldr	r3, [pc, #64]	; (73b8 <nrfx_power_irq_handler+0x9c>)
    7376:	2000      	movs	r0, #0
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    737c:	05e2      	lsls	r2, r4, #23
    737e:	d508      	bpl.n	7392 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    7380:	f44f 7090 	mov.w	r0, #288	; 0x120
    7384:	f004 f8a4 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7388:	b118      	cbz	r0, 7392 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    738a:	4b0b      	ldr	r3, [pc, #44]	; (73b8 <nrfx_power_irq_handler+0x9c>)
    738c:	2001      	movs	r0, #1
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7392:	05a3      	lsls	r3, r4, #22
    7394:	d50a      	bpl.n	73ac <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    7396:	f44f 7092 	mov.w	r0, #292	; 0x124
    739a:	f004 f899 	bl	b4d0 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    739e:	b128      	cbz	r0, 73ac <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    73a0:	4b05      	ldr	r3, [pc, #20]	; (73b8 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    73a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    73a6:	681b      	ldr	r3, [r3, #0]
    73a8:	2002      	movs	r0, #2
    73aa:	4718      	bx	r3
}
    73ac:	bd10      	pop	{r4, pc}
    73ae:	bf00      	nop
    73b0:	20001ae0 	.word	0x20001ae0
    73b4:	20001adc 	.word	0x20001adc
    73b8:	20001ad8 	.word	0x20001ad8

000073bc <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    73bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    73c0:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    73c2:	4d2b      	ldr	r5, [pc, #172]	; (7470 <nrfx_twim_init+0xb4>)
    73c4:	f04f 0e34 	mov.w	lr, #52	; 0x34
    73c8:	fb0e fe06 	mul.w	lr, lr, r6
    73cc:	eb05 040e 	add.w	r4, r5, lr
    73d0:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    73d4:	2f00      	cmp	r7, #0
    73d6:	d148      	bne.n	746a <nrfx_twim_init+0xae>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    73d8:	f8d0 c000 	ldr.w	ip, [r0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    73dc:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    73e0:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    73e2:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    73e4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    73e8:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    73ec:	7b4b      	ldrb	r3, [r1, #13]
    73ee:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    73f2:	7b8b      	ldrb	r3, [r1, #14]
    73f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    73f8:	b1cb      	cbz	r3, 742e <nrfx_twim_init+0x72>
    73fa:	7bcb      	ldrb	r3, [r1, #15]
    73fc:	b92b      	cbnz	r3, 740a <nrfx_twim_init+0x4e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    73fe:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    7402:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7406:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    740a:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    740c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524

    if (p_cb->handler)
    7410:	b122      	cbz	r2, 741c <nrfx_twim_init+0x60>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    7412:	6800      	ldr	r0, [r0, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    7414:	f340 3007 	sbfx	r0, r0, #12, #8
    7418:	f7fc fafa 	bl	3a10 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    741c:	2334      	movs	r3, #52	; 0x34
    741e:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    7422:	4814      	ldr	r0, [pc, #80]	; (7474 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7424:	2301      	movs	r3, #1
    7426:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    742a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    742e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    7430:	4b11      	ldr	r3, [pc, #68]	; (7478 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    7432:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    7436:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    7438:	2c01      	cmp	r4, #1
    743a:	bf08      	it	eq
    743c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    743e:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 0: return NRF_P0;
    7442:	bf18      	it	ne
    7444:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7448:	f240 6e0c 	movw	lr, #1548	; 0x60c
    744c:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    7450:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    7452:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    7456:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    7458:	2c01      	cmp	r4, #1
    745a:	bf18      	it	ne
    745c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7460:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    7464:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    7468:	e7c7      	b.n	73fa <nrfx_twim_init+0x3e>
        return err_code;
    746a:	4804      	ldr	r0, [pc, #16]	; (747c <nrfx_twim_init+0xc0>)
    746c:	e7dd      	b.n	742a <nrfx_twim_init+0x6e>
    746e:	bf00      	nop
    7470:	20001ae4 	.word	0x20001ae4
    7474:	0bad0000 	.word	0x0bad0000
    7478:	50000300 	.word	0x50000300
    747c:	0bad0005 	.word	0x0bad0005

00007480 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    7480:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7482:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    7484:	2106      	movs	r1, #6
    7486:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    748a:	4b04      	ldr	r3, [pc, #16]	; (749c <nrfx_twim_enable+0x1c>)
    748c:	2134      	movs	r1, #52	; 0x34
    748e:	fb01 3302 	mla	r3, r1, r2, r3
    7492:	2202      	movs	r2, #2
    7494:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    7498:	4770      	bx	lr
    749a:	bf00      	nop
    749c:	20001ae4 	.word	0x20001ae4

000074a0 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74a0:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
    74a2:	4b0c      	ldr	r3, [pc, #48]	; (74d4 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    74a4:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
    74a6:	2034      	movs	r0, #52	; 0x34
    74a8:	fb00 3301 	mla	r3, r0, r1, r3
    74ac:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    74ae:	480a      	ldr	r0, [pc, #40]	; (74d8 <nrfx_twim_disable+0x38>)
    74b0:	6099      	str	r1, [r3, #8]
    74b2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    74b6:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
    74ba:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
    74be:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    74c2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    74c6:	2201      	movs	r2, #1
    74c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
    74cc:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    74d0:	4770      	bx	lr
    74d2:	bf00      	nop
    74d4:	20001ae4 	.word	0x20001ae4
    74d8:	019c0202 	.word	0x019c0202

000074dc <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    74dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    74e0:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 77d0 <nrfx_twim_xfer+0x2f4>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74e4:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    74e8:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    74ea:	2334      	movs	r3, #52	; 0x34
    74ec:	fb03 c30e 	mla	r3, r3, lr, ip
{
    74f0:	4617      	mov	r7, r2
    p_cb->error = false;
    74f2:	2200      	movs	r2, #0
    74f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    74f8:	684b      	ldr	r3, [r1, #4]
{
    74fa:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    74fc:	b14b      	cbz	r3, 7512 <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    74fe:	68cb      	ldr	r3, [r1, #12]
    7500:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    7504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7508:	d003      	beq.n	7512 <nrfx_twim_xfer+0x36>
        return err_code;
    750a:	4eb2      	ldr	r6, [pc, #712]	; (77d4 <nrfx_twim_xfer+0x2f8>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    750c:	4630      	mov	r0, r6
    750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
    7512:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
    7514:	4bb0      	ldr	r3, [pc, #704]	; (77d8 <nrfx_twim_xfer+0x2fc>)
    7516:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    751a:	fb06 c60e 	mla	r6, r6, lr, ip
    751e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
    7522:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    7526:	b123      	cbz	r3, 7532 <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    7528:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    752a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
    752e:	4eab      	ldr	r6, [pc, #684]	; (77dc <nrfx_twim_xfer+0x300>)
    7530:	e7ec      	b.n	750c <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    7532:	f017 0f14 	tst.w	r7, #20
    7536:	bf0c      	ite	eq
    7538:	2301      	moveq	r3, #1
    753a:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    753c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    7540:	46a9      	mov	r9, r5
    7542:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    7546:	f106 080c 	add.w	r8, r6, #12
    754a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    754e:	f8d9 3000 	ldr.w	r3, [r9]
    7552:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    7556:	f3c7 1300 	ubfx	r3, r7, #4, #1
    755a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
    755e:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    7560:	786b      	ldrb	r3, [r5, #1]
    7562:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7566:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    756a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    756e:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    7572:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    7576:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    757a:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    757e:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    7582:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    7586:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    758a:	bf18      	it	ne
    758c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    758e:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    7592:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    7596:	bf18      	it	ne
    7598:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    759a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    759e:	782b      	ldrb	r3, [r5, #0]
    75a0:	2b03      	cmp	r3, #3
    75a2:	f200 80b9 	bhi.w	7718 <nrfx_twim_xfer+0x23c>
    75a6:	e8df f003 	tbb	[pc, r3]
    75aa:	a48b      	.short	0xa48b
    75ac:	026d      	.short	0x026d
    75ae:	692b      	ldr	r3, [r5, #16]
    75b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    75b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    75b8:	d1a7      	bne.n	750a <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
    75ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    75be:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    75c2:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    75c4:	68ea      	ldr	r2, [r5, #12]
    75c6:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    75ca:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ce:	2300      	movs	r3, #0
    75d0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    75d4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75d8:	2201      	movs	r2, #1
    75da:	6222      	str	r2, [r4, #32]
    75dc:	60a2      	str	r2, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75de:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    75e2:	2a00      	cmp	r2, #0
    75e4:	d0fb      	beq.n	75de <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75e6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    75ea:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    75ee:	692a      	ldr	r2, [r5, #16]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    75f0:	68ab      	ldr	r3, [r5, #8]
    75f2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    75f6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    75fa:	2334      	movs	r3, #52	; 0x34
    75fc:	fb03 c30e 	mla	r3, r3, lr, ip
    7600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    7604:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    7606:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    7608:	4e75      	ldr	r6, [pc, #468]	; (77e0 <nrfx_twim_xfer+0x304>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    760a:	0738      	lsls	r0, r7, #28
    760c:	d407      	bmi.n	761e <nrfx_twim_xfer+0x142>
    760e:	782a      	ldrb	r2, [r5, #0]
    7610:	2a03      	cmp	r2, #3
    7612:	d004      	beq.n	761e <nrfx_twim_xfer+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7614:	2201      	movs	r2, #1
    7616:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
    7618:	686b      	ldr	r3, [r5, #4]
    761a:	b903      	cbnz	r3, 761e <nrfx_twim_xfer+0x142>
    761c:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
    761e:	2334      	movs	r3, #52	; 0x34
    7620:	fb03 f30e 	mul.w	r3, r3, lr
    7624:	eb0c 0203 	add.w	r2, ip, r3
    7628:	f85c 1003 	ldr.w	r1, [ip, r3]
    762c:	2900      	cmp	r1, #0
    762e:	d176      	bne.n	771e <nrfx_twim_xfer+0x242>
    7630:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7632:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    7636:	2b00      	cmp	r3, #0
    7638:	f000 8089 	beq.w	774e <nrfx_twim_xfer+0x272>
    763c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7640:	2b00      	cmp	r3, #0
    7642:	f040 8087 	bne.w	7754 <nrfx_twim_xfer+0x278>
    7646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    764a:	2b00      	cmp	r3, #0
    764c:	f000 8095 	beq.w	777a <nrfx_twim_xfer+0x29e>
                transmission_finished = true;
    7650:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7652:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
    7656:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    765a:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    765e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    7662:	2d00      	cmp	r5, #0
    7664:	f000 8081 	beq.w	776a <nrfx_twim_xfer+0x28e>
    7668:	f412 7f00 	tst.w	r2, #512	; 0x200
    766c:	f402 7280 	and.w	r2, r2, #256	; 0x100
    7670:	d17e      	bne.n	7770 <nrfx_twim_xfer+0x294>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7672:	6220      	str	r0, [r4, #32]
    7674:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    7676:	2a00      	cmp	r2, #0
    7678:	d0db      	beq.n	7632 <nrfx_twim_xfer+0x156>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    767a:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    767e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
    7682:	e7d6      	b.n	7632 <nrfx_twim_xfer+0x156>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    7684:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    7686:	68ea      	ldr	r2, [r5, #12]
    7688:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    768c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    7690:	692b      	ldr	r3, [r5, #16]
    7692:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    7696:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    769a:	f47f af36 	bne.w	750a <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    769e:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    76a0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    76a4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    76a8:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    76ac:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    76b0:	2334      	movs	r3, #52	; 0x34
    76b2:	fb03 c30e 	mla	r3, r3, lr, ip
    76b6:	2202      	movs	r2, #2
    76b8:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76ba:	2301      	movs	r3, #1
    76bc:	6223      	str	r3, [r4, #32]
    76be:	e7a2      	b.n	7606 <nrfx_twim_xfer+0x12a>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    76c0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    76c2:	68ea      	ldr	r2, [r5, #12]
    76c4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    76c8:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
    76cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    76d0:	f04f 0334 	mov.w	r3, #52	; 0x34
    76d4:	d008      	beq.n	76e8 <nrfx_twim_xfer+0x20c>
    p_reg->SHORTS = mask;
    76d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    76da:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    76de:	fb03 c30e 	mla	r3, r3, lr, ip
    76e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    76e6:	e7e7      	b.n	76b8 <nrfx_twim_xfer+0x1dc>
    76e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    76ec:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    76f0:	e7df      	b.n	76b2 <nrfx_twim_xfer+0x1d6>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    76f2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    76f4:	68ea      	ldr	r2, [r5, #12]
    76f6:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    76fa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    76fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    7702:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    7706:	2334      	movs	r3, #52	; 0x34
    7708:	fb03 c30e 	mla	r3, r3, lr, ip
    770c:	2202      	movs	r2, #2
    770e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7710:	2301      	movs	r3, #1
    7712:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    7714:	2300      	movs	r3, #0
    7716:	e777      	b.n	7608 <nrfx_twim_xfer+0x12c>
    switch (p_xfer_desc->type)
    7718:	4e32      	ldr	r6, [pc, #200]	; (77e4 <nrfx_twim_xfer+0x308>)
    771a:	2308      	movs	r3, #8
    771c:	e775      	b.n	760a <nrfx_twim_xfer+0x12e>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    771e:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    7720:	bf44      	itt	mi
    7722:	2300      	movmi	r3, #0
    7724:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    7726:	067a      	lsls	r2, r7, #25
    7728:	d406      	bmi.n	7738 <nrfx_twim_xfer+0x25c>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    772a:	2334      	movs	r3, #52	; 0x34
    772c:	fb03 c30e 	mla	r3, r3, lr, ip
    7730:	689a      	ldr	r2, [r3, #8]
    7732:	f042 0202 	orr.w	r2, r2, #2
    7736:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    7738:	2334      	movs	r3, #52	; 0x34
    773a:	fb03 c30e 	mla	r3, r3, lr, ip
    773e:	689a      	ldr	r2, [r3, #8]
    7740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    7744:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    7746:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
    7748:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    774c:	e6de      	b.n	750c <nrfx_twim_xfer+0x30>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    774e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7752:	b123      	cbz	r3, 775e <nrfx_twim_xfer+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7754:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7758:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    775c:	e773      	b.n	7646 <nrfx_twim_xfer+0x16a>
    775e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    7762:	2a00      	cmp	r2, #0
    7764:	f43f af65 	beq.w	7632 <nrfx_twim_xfer+0x156>
    7768:	e773      	b.n	7652 <nrfx_twim_xfer+0x176>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    776a:	6220      	str	r0, [r4, #32]
    776c:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    776e:	e760      	b.n	7632 <nrfx_twim_xfer+0x156>
    7770:	2a00      	cmp	r2, #0
    7772:	d182      	bne.n	767a <nrfx_twim_xfer+0x19e>
        } while (!transmission_finished);
    7774:	2b00      	cmp	r3, #0
    7776:	f43f af5c 	beq.w	7632 <nrfx_twim_xfer+0x156>
        p_cb->busy = false;
    777a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
    777c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7780:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    7784:	fb01 c20e 	mla	r2, r1, lr, ip
    7788:	2000      	movs	r0, #0
    778a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    778e:	b18b      	cbz	r3, 77b4 <nrfx_twim_xfer+0x2d8>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    7790:	4a15      	ldr	r2, [pc, #84]	; (77e8 <nrfx_twim_xfer+0x30c>)
    7792:	4e16      	ldr	r6, [pc, #88]	; (77ec <nrfx_twim_xfer+0x310>)
    7794:	f013 0f01 	tst.w	r3, #1
    7798:	bf18      	it	ne
    779a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    779c:	f013 0f02 	tst.w	r3, #2
    77a0:	f102 0201 	add.w	r2, r2, #1
    77a4:	bf18      	it	ne
    77a6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    77a8:	f013 0f04 	tst.w	r3, #4
    77ac:	4b10      	ldr	r3, [pc, #64]	; (77f0 <nrfx_twim_xfer+0x314>)
    77ae:	bf18      	it	ne
    77b0:	461e      	movne	r6, r3
    77b2:	e6ab      	b.n	750c <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    77b4:	067b      	lsls	r3, r7, #25
    77b6:	f53f aea9 	bmi.w	750c <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
    77ba:	fb0e c101 	mla	r1, lr, r1, ip
    77be:	4620      	mov	r0, r4
    77c0:	f003 fea7 	bl	b512 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    77c4:	4b09      	ldr	r3, [pc, #36]	; (77ec <nrfx_twim_xfer+0x310>)
    77c6:	2800      	cmp	r0, #0
    77c8:	bf08      	it	eq
    77ca:	461e      	moveq	r6, r3
    77cc:	e69e      	b.n	750c <nrfx_twim_xfer+0x30>
    77ce:	bf00      	nop
    77d0:	20001ae4 	.word	0x20001ae4
    77d4:	0bad000a 	.word	0x0bad000a
    77d8:	019c0202 	.word	0x019c0202
    77dc:	0bad000b 	.word	0x0bad000b
    77e0:	0bad0000 	.word	0x0bad0000
    77e4:	0bad0004 	.word	0x0bad0004
    77e8:	0bae0000 	.word	0x0bae0000
    77ec:	0bad0001 	.word	0x0bad0001
    77f0:	0bae0002 	.word	0x0bae0002

000077f4 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    77f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77f6:	4d59      	ldr	r5, [pc, #356]	; (795c <nrfx_twim_0_irq_handler+0x168>)
    77f8:	4c59      	ldr	r4, [pc, #356]	; (7960 <nrfx_twim_0_irq_handler+0x16c>)
    77fa:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    77fe:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    7800:	b1fb      	cbz	r3, 7842 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7802:	2300      	movs	r3, #0
    7804:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    7808:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    780c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7810:	b9bb      	cbnz	r3, 7842 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    7812:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    7814:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    7818:	2302      	movs	r3, #2
    781a:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    781c:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    781e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7822:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    7826:	b11b      	cbz	r3, 7830 <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
    7828:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    782c:	059e      	lsls	r6, r3, #22
    782e:	d403      	bmi.n	7838 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7830:	4b4a      	ldr	r3, [pc, #296]	; (795c <nrfx_twim_0_irq_handler+0x168>)
    7832:	2201      	movs	r2, #1
    7834:	621a      	str	r2, [r3, #32]
    7836:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    7838:	2301      	movs	r3, #1
    783a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    783e:	b007      	add	sp, #28
    7840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7842:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    7846:	2b00      	cmp	r3, #0
    7848:	d059      	beq.n	78fe <nrfx_twim_0_irq_handler+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    784a:	2300      	movs	r3, #0
    784c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    7850:	6a27      	ldr	r7, [r4, #32]
    7852:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    7856:	067d      	lsls	r5, r7, #25
    7858:	d40a      	bmi.n	7870 <nrfx_twim_0_irq_handler+0x7c>
    785a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    785e:	b93b      	cbnz	r3, 7870 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    7860:	493f      	ldr	r1, [pc, #252]	; (7960 <nrfx_twim_0_irq_handler+0x16c>)
    7862:	483e      	ldr	r0, [pc, #248]	; (795c <nrfx_twim_0_irq_handler+0x168>)
    7864:	f003 fe55 	bl	b512 <xfer_completeness_check>
    7868:	f080 0001 	eor.w	r0, r0, #1
    786c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    7870:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
    7874:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    7878:	d11f      	bne.n	78ba <nrfx_twim_0_irq_handler+0xc6>
            event.xfer_desc = p_cb->xfer_desc;
    787a:	4e3a      	ldr	r6, [pc, #232]	; (7964 <nrfx_twim_0_irq_handler+0x170>)
    787c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    787e:	ad01      	add	r5, sp, #4
    7880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7882:	6833      	ldr	r3, [r6, #0]
    7884:	602b      	str	r3, [r5, #0]
    7886:	4b35      	ldr	r3, [pc, #212]	; (795c <nrfx_twim_0_irq_handler+0x168>)
    7888:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    788c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    7890:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    7894:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    7898:	f1bc 0f00 	cmp.w	ip, #0
    789c:	d002      	beq.n	78a4 <nrfx_twim_0_irq_handler+0xb0>
    789e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    78a2:	b152      	cbz	r2, 78ba <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    78a4:	2200      	movs	r2, #0
    78a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    78aa:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    78ac:	4a2e      	ldr	r2, [pc, #184]	; (7968 <nrfx_twim_0_irq_handler+0x174>)
    78ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    78b2:	4b2e      	ldr	r3, [pc, #184]	; (796c <nrfx_twim_0_irq_handler+0x178>)
    78b4:	2208      	movs	r2, #8
    78b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    78ba:	4a28      	ldr	r2, [pc, #160]	; (795c <nrfx_twim_0_irq_handler+0x168>)
    78bc:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    78c0:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    78c4:	0798      	lsls	r0, r3, #30
    78c6:	d443      	bmi.n	7950 <nrfx_twim_0_irq_handler+0x15c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    78c8:	0759      	lsls	r1, r3, #29
    78ca:	d443      	bmi.n	7954 <nrfx_twim_0_irq_handler+0x160>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    78cc:	07da      	lsls	r2, r3, #31
    78ce:	d443      	bmi.n	7958 <nrfx_twim_0_irq_handler+0x164>
    else if (p_cb->error)
    78d0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    78d4:	009b      	lsls	r3, r3, #2
    78d6:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    78d8:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    78dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    78e0:	b90b      	cbnz	r3, 78e6 <nrfx_twim_0_irq_handler+0xf2>
        p_cb->busy = false;
    78e2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    78e6:	6a23      	ldr	r3, [r4, #32]
    78e8:	075b      	lsls	r3, r3, #29
    78ea:	d503      	bpl.n	78f4 <nrfx_twim_0_irq_handler+0x100>
    78ec:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    78f0:	2b00      	cmp	r3, #0
    78f2:	d0a4      	beq.n	783e <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    78f4:	e9d4 3100 	ldrd	r3, r1, [r4]
    78f8:	4668      	mov	r0, sp
    78fa:	4798      	blx	r3
}
    78fc:	e79f      	b.n	783e <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78fe:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    7902:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    7906:	7b23      	ldrb	r3, [r4, #12]
    7908:	b983      	cbnz	r3, 792c <nrfx_twim_0_irq_handler+0x138>
            event.xfer_desc = p_cb->xfer_desc;
    790a:	4f16      	ldr	r7, [pc, #88]	; (7964 <nrfx_twim_0_irq_handler+0x170>)
    790c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    790e:	ae01      	add	r6, sp, #4
    7910:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7912:	683b      	ldr	r3, [r7, #0]
    7914:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    7916:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    791a:	2b00      	cmp	r3, #0
    791c:	d1cd      	bne.n	78ba <nrfx_twim_0_irq_handler+0xc6>
    p_reg->SHORTS = mask;
    791e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    7922:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    7924:	4b10      	ldr	r3, [pc, #64]	; (7968 <nrfx_twim_0_irq_handler+0x174>)
    7926:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    792a:	e7c2      	b.n	78b2 <nrfx_twim_0_irq_handler+0xbe>
    p_reg->SHORTS = mask;
    792c:	f44f 7300 	mov.w	r3, #512	; 0x200
    7930:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    7934:	f240 2302 	movw	r3, #514	; 0x202
    7938:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    793a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    793e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    7942:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    7944:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7948:	2301      	movs	r3, #1
    794a:	60ab      	str	r3, [r5, #8]
    794c:	622b      	str	r3, [r5, #32]
            return;
    794e:	e776      	b.n	783e <nrfx_twim_0_irq_handler+0x4a>
    7950:	2301      	movs	r3, #1
    7952:	e7c1      	b.n	78d8 <nrfx_twim_0_irq_handler+0xe4>
    7954:	2302      	movs	r3, #2
    7956:	e7bf      	b.n	78d8 <nrfx_twim_0_irq_handler+0xe4>
    7958:	2303      	movs	r3, #3
    795a:	e7bd      	b.n	78d8 <nrfx_twim_0_irq_handler+0xe4>
    795c:	40003000 	.word	0x40003000
    7960:	20001ae4 	.word	0x20001ae4
    7964:	20001af0 	.word	0x20001af0
    7968:	019c0202 	.word	0x019c0202
    796c:	e000e100 	.word	0xe000e100

00007970 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7974:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    7978:	2a08      	cmp	r2, #8
    797a:	d106      	bne.n	798a <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    797c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    7980:	2b05      	cmp	r3, #5
    7982:	d804      	bhi.n	798e <nrf52_errata_187+0x1e>
    7984:	4a03      	ldr	r2, [pc, #12]	; (7994 <nrf52_errata_187+0x24>)
    7986:	5cd0      	ldrb	r0, [r2, r3]
    7988:	4770      	bx	lr
                        return false;
    798a:	2000      	movs	r0, #0
    798c:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    798e:	2001      	movs	r0, #1
}
    7990:	4770      	bx	lr
    7992:	bf00      	nop
    7994:	0000d308 	.word	0x0000d308

00007998 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7998:	4b05      	ldr	r3, [pc, #20]	; (79b0 <ep_state_access+0x18>)
    799a:	f010 0f80 	tst.w	r0, #128	; 0x80
    799e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    79a2:	bf08      	it	eq
    79a4:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    79a6:	f000 000f 	and.w	r0, r0, #15
}
    79aa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    79ae:	4770      	bx	lr
    79b0:	20001cc0 	.word	0x20001cc0

000079b4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    79b4:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    79b6:	4a07      	ldr	r2, [pc, #28]	; (79d4 <ev_usbreset_handler+0x20>)
    79b8:	2300      	movs	r3, #0
    79ba:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    79bc:	4a06      	ldr	r2, [pc, #24]	; (79d8 <ev_usbreset_handler+0x24>)
    79be:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    79c0:	2301      	movs	r3, #1
    79c2:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    79c4:	4b05      	ldr	r3, [pc, #20]	; (79dc <ev_usbreset_handler+0x28>)
    79c6:	a801      	add	r0, sp, #4
    79c8:	681b      	ldr	r3, [r3, #0]
    79ca:	4798      	blx	r3
}
    79cc:	b003      	add	sp, #12
    79ce:	f85d fb04 	ldr.w	pc, [sp], #4
    79d2:	bf00      	nop
    79d4:	20001f9c 	.word	0x20001f9c
    79d8:	20001f9b 	.word	0x20001f9b
    79dc:	20001d58 	.word	0x20001d58

000079e0 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    79e0:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    79e2:	4b19      	ldr	r3, [pc, #100]	; (7a48 <ev_usbevent_handler+0x68>)
    79e4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    79e8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    79ec:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    79ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    79f2:	d508      	bpl.n	7a06 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    79f4:	4b15      	ldr	r3, [pc, #84]	; (7a4c <ev_usbevent_handler+0x6c>)
    79f6:	2201      	movs	r2, #1
    79f8:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    79fa:	2302      	movs	r3, #2
    79fc:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    79fe:	4b14      	ldr	r3, [pc, #80]	; (7a50 <ev_usbevent_handler+0x70>)
    7a00:	a801      	add	r0, sp, #4
    7a02:	681b      	ldr	r3, [r3, #0]
    7a04:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7a06:	05a2      	lsls	r2, r4, #22
    7a08:	d508      	bpl.n	7a1c <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    7a0a:	4b10      	ldr	r3, [pc, #64]	; (7a4c <ev_usbevent_handler+0x6c>)
    7a0c:	2200      	movs	r2, #0
    7a0e:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    7a10:	2303      	movs	r3, #3
    7a12:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    7a14:	4b0e      	ldr	r3, [pc, #56]	; (7a50 <ev_usbevent_handler+0x70>)
    7a16:	a801      	add	r0, sp, #4
    7a18:	681b      	ldr	r3, [r3, #0]
    7a1a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    7a1c:	0563      	lsls	r3, r4, #21
    7a1e:	d510      	bpl.n	7a42 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    7a20:	4b0a      	ldr	r3, [pc, #40]	; (7a4c <ev_usbevent_handler+0x6c>)
    7a22:	781a      	ldrb	r2, [r3, #0]
    7a24:	b16a      	cbz	r2, 7a42 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    7a26:	2200      	movs	r2, #0
    7a28:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    7a2a:	4b07      	ldr	r3, [pc, #28]	; (7a48 <ev_usbevent_handler+0x68>)
    7a2c:	2201      	movs	r2, #1
    7a2e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7a32:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    7a36:	2304      	movs	r3, #4
    7a38:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    7a3a:	4b05      	ldr	r3, [pc, #20]	; (7a50 <ev_usbevent_handler+0x70>)
    7a3c:	a801      	add	r0, sp, #4
    7a3e:	681b      	ldr	r3, [r3, #0]
    7a40:	4798      	blx	r3
        }
    }
}
    7a42:	b002      	add	sp, #8
    7a44:	bd10      	pop	{r4, pc}
    7a46:	bf00      	nop
    7a48:	40027000 	.word	0x40027000
    7a4c:	20001f9c 	.word	0x20001f9c
    7a50:	20001d58 	.word	0x20001d58

00007a54 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    7a54:	f04f 0320 	mov.w	r3, #32
    7a58:	f3ef 8011 	mrs	r0, BASEPRI
    7a5c:	f383 8812 	msr	BASEPRI_MAX, r3
    7a60:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7a64:	4b0a      	ldr	r3, [pc, #40]	; (7a90 <usbd_errata_187_211_begin+0x3c>)
    7a66:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7a6a:	2203      	movs	r2, #3
    7a6c:	b961      	cbnz	r1, 7a88 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7a6e:	f249 3175 	movw	r1, #37749	; 0x9375
    7a72:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7a76:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7a7a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7a7e:	f380 8811 	msr	BASEPRI, r0
    7a82:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7a86:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7a88:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    7a8c:	e7f7      	b.n	7a7e <usbd_errata_187_211_begin+0x2a>
    7a8e:	bf00      	nop
    7a90:	4006e000 	.word	0x4006e000

00007a94 <usbd_errata_187_211_end>:
	__asm__ volatile(
    7a94:	f04f 0320 	mov.w	r3, #32
    7a98:	f3ef 8011 	mrs	r0, BASEPRI
    7a9c:	f383 8812 	msr	BASEPRI_MAX, r3
    7aa0:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7aa4:	4b0a      	ldr	r3, [pc, #40]	; (7ad0 <usbd_errata_187_211_end+0x3c>)
    7aa6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7aaa:	b961      	cbnz	r1, 7ac6 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7aac:	f249 3275 	movw	r2, #37749	; 0x9375
    7ab0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    7ab4:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7ab8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7abc:	f380 8811 	msr	BASEPRI, r0
    7ac0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7ac4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    7ac6:	2200      	movs	r2, #0
    7ac8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    7acc:	e7f6      	b.n	7abc <usbd_errata_187_211_end+0x28>
    7ace:	bf00      	nop
    7ad0:	4006e000 	.word	0x4006e000

00007ad4 <nrfx_usbd_feeder_flash>:
{
    7ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ad6:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7ad8:	4f0b      	ldr	r7, [pc, #44]	; (7b08 <nrfx_usbd_feeder_flash+0x34>)
    7ada:	429a      	cmp	r2, r3
    7adc:	bf28      	it	cs
    7ade:	461a      	movcs	r2, r3
{
    7ae0:	460c      	mov	r4, r1
    7ae2:	4615      	mov	r5, r2
    7ae4:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7ae6:	6809      	ldr	r1, [r1, #0]
    7ae8:	4638      	mov	r0, r7
    7aea:	f003 fa46 	bl	af7a <memcpy>
    p_next->size = tx_size;
    7aee:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    7af2:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    7af4:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    7af6:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    7af8:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    7afa:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    7afc:	6023      	str	r3, [r4, #0]
}
    7afe:	3800      	subs	r0, #0
    7b00:	bf18      	it	ne
    7b02:	2001      	movne	r0, #1
    7b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b06:	bf00      	nop
    7b08:	20001b18 	.word	0x20001b18

00007b0c <nrfx_usbd_feeder_flash_zlp>:
{
    7b0c:	b570      	push	{r4, r5, r6, lr}
    7b0e:	684b      	ldr	r3, [r1, #4]
    7b10:	429a      	cmp	r2, r3
    7b12:	bf28      	it	cs
    7b14:	461a      	movcs	r2, r3
    7b16:	4606      	mov	r6, r0
    7b18:	460d      	mov	r5, r1
    7b1a:	4614      	mov	r4, r2
    if (tx_size != 0)
    7b1c:	b182      	cbz	r2, 7b40 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7b1e:	6809      	ldr	r1, [r1, #0]
    7b20:	4808      	ldr	r0, [pc, #32]	; (7b44 <nrfx_usbd_feeder_flash_zlp+0x38>)
    7b22:	f003 fa2a 	bl	af7a <memcpy>
        p_next->p_data.tx = p_buffer;
    7b26:	4b07      	ldr	r3, [pc, #28]	; (7b44 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    7b28:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    7b2c:	686b      	ldr	r3, [r5, #4]
    7b2e:	1b1b      	subs	r3, r3, r4
    7b30:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    7b32:	682b      	ldr	r3, [r5, #0]
    7b34:	4423      	add	r3, r4
}
    7b36:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    7b38:	602b      	str	r3, [r5, #0]
}
    7b3a:	bf18      	it	ne
    7b3c:	2001      	movne	r0, #1
    7b3e:	bd70      	pop	{r4, r5, r6, pc}
    7b40:	4613      	mov	r3, r2
    7b42:	e7f1      	b.n	7b28 <nrfx_usbd_feeder_flash_zlp+0x1c>
    7b44:	20001b18 	.word	0x20001b18

00007b48 <ev_sof_handler>:
{
    7b48:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    7b4a:	2300      	movs	r3, #0
    7b4c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    7b50:	4b0b      	ldr	r3, [pc, #44]	; (7b80 <ev_sof_handler+0x38>)
    7b52:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    7b56:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    7b5a:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    7b5e:	4a09      	ldr	r2, [pc, #36]	; (7b84 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    7b60:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    7b62:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    7b64:	bf14      	ite	ne
    7b66:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    7b6a:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    7b6e:	430b      	orrs	r3, r1
    7b70:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    7b72:	4b05      	ldr	r3, [pc, #20]	; (7b88 <ev_sof_handler+0x40>)
    7b74:	a801      	add	r0, sp, #4
    7b76:	681b      	ldr	r3, [r3, #0]
    7b78:	4798      	blx	r3
}
    7b7a:	b003      	add	sp, #12
    7b7c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b80:	40027000 	.word	0x40027000
    7b84:	20001d54 	.word	0x20001d54
    7b88:	20001d58 	.word	0x20001d58

00007b8c <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7b8c:	4b06      	ldr	r3, [pc, #24]	; (7ba8 <atomic_and.constprop.0.isra.0+0x1c>)
    7b8e:	f3bf 8f5b 	dmb	ish
    7b92:	e853 1f00 	ldrex	r1, [r3]
    7b96:	4001      	ands	r1, r0
    7b98:	e843 1200 	strex	r2, r1, [r3]
    7b9c:	2a00      	cmp	r2, #0
    7b9e:	d1f8      	bne.n	7b92 <atomic_and.constprop.0.isra.0+0x6>
    7ba0:	f3bf 8f5b 	dmb	ish
}
    7ba4:	4770      	bx	lr
    7ba6:	bf00      	nop
    7ba8:	20001d50 	.word	0x20001d50

00007bac <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7bac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7bb0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7bb4:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7bb6:	bf02      	ittt	eq
    7bb8:	4b03      	ldreq	r3, [pc, #12]	; (7bc8 <usbd_dma_pending_clear+0x1c>)
    7bba:	2200      	moveq	r2, #0
    7bbc:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
    7bc0:	4b02      	ldr	r3, [pc, #8]	; (7bcc <usbd_dma_pending_clear+0x20>)
    7bc2:	2200      	movs	r2, #0
    7bc4:	701a      	strb	r2, [r3, #0]
}
    7bc6:	4770      	bx	lr
    7bc8:	40027000 	.word	0x40027000
    7bcc:	20001f9a 	.word	0x20001f9a

00007bd0 <nrf_usbd_ep0in_dma_handler>:
{
    7bd0:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    7bd2:	f7ff ffeb 	bl	7bac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7bd6:	4b08      	ldr	r3, [pc, #32]	; (7bf8 <nrf_usbd_ep0in_dma_handler+0x28>)
    7bd8:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    7bdc:	2a03      	cmp	r2, #3
    7bde:	d105      	bne.n	7bec <nrf_usbd_ep0in_dma_handler+0x1c>
}
    7be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7be4:	f06f 0001 	mvn.w	r0, #1
    7be8:	f7ff bfd0 	b.w	7b8c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7bf0:	2b00      	cmp	r3, #0
    7bf2:	d0f5      	beq.n	7be0 <nrf_usbd_ep0in_dma_handler+0x10>
}
    7bf4:	bd08      	pop	{r3, pc}
    7bf6:	bf00      	nop
    7bf8:	20001c30 	.word	0x20001c30

00007bfc <usbd_ep_data_handler>:
{
    7bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    7bfe:	2201      	movs	r2, #1
    7c00:	fa02 f501 	lsl.w	r5, r2, r1
    7c04:	491c      	ldr	r1, [pc, #112]	; (7c78 <usbd_ep_data_handler+0x7c>)
    7c06:	4e1d      	ldr	r6, [pc, #116]	; (7c7c <usbd_ep_data_handler+0x80>)
    7c08:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7c0a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    7c0e:	ea43 0305 	orr.w	r3, r3, r5
{
    7c12:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7c14:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7c16:	d024      	beq.n	7c62 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7c18:	f000 020f 	and.w	r2, r0, #15
    7c1c:	4b18      	ldr	r3, [pc, #96]	; (7c80 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7c1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7c22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7c26:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7c2a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7c2c:	b132      	cbz	r2, 7c3c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7c2e:	2200      	movs	r2, #0
    7c30:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    7c32:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	d011      	beq.n	7c5c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7c38:	f003 fce2 	bl	b600 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7c3c:	6833      	ldr	r3, [r6, #0]
    7c3e:	402b      	ands	r3, r5
    7c40:	d10a      	bne.n	7c58 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7c42:	2206      	movs	r2, #6
    7c44:	f88d 2004 	strb.w	r2, [sp, #4]
    7c48:	f88d 4006 	strb.w	r4, [sp, #6]
    7c4c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7c50:	4b0c      	ldr	r3, [pc, #48]	; (7c84 <usbd_ep_data_handler+0x88>)
    7c52:	a801      	add	r0, sp, #4
    7c54:	681b      	ldr	r3, [r3, #0]
    7c56:	4798      	blx	r3
}
    7c58:	b002      	add	sp, #8
    7c5a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    7c5c:	f7ff ffb8 	bl	7bd0 <nrf_usbd_ep0in_dma_handler>
    7c60:	e7ec      	b.n	7c3c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7c62:	6833      	ldr	r3, [r6, #0]
    7c64:	421d      	tst	r5, r3
    7c66:	d1f7      	bne.n	7c58 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7c68:	2306      	movs	r3, #6
    7c6a:	f88d 3004 	strb.w	r3, [sp, #4]
    7c6e:	f88d 0006 	strb.w	r0, [sp, #6]
    7c72:	f88d 2007 	strb.w	r2, [sp, #7]
    7c76:	e7eb      	b.n	7c50 <usbd_ep_data_handler+0x54>
    7c78:	20001d54 	.word	0x20001d54
    7c7c:	20001d50 	.word	0x20001d50
    7c80:	0000c3fa 	.word	0x0000c3fa
    7c84:	20001d58 	.word	0x20001d58

00007c88 <ev_setup_data_handler>:
{
    7c88:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7c8a:	4b05      	ldr	r3, [pc, #20]	; (7ca0 <ev_setup_data_handler+0x18>)
    7c8c:	781a      	ldrb	r2, [r3, #0]
    7c8e:	4610      	mov	r0, r2
    7c90:	f003 fcad 	bl	b5ee <ep2bit>
}
    7c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7c98:	4601      	mov	r1, r0
    7c9a:	4610      	mov	r0, r2
    7c9c:	f7ff bfae 	b.w	7bfc <usbd_ep_data_handler>
    7ca0:	20001f9b 	.word	0x20001f9b

00007ca4 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7ca4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    7ca6:	f7ff ff81 	bl	7bac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7caa:	4b0c      	ldr	r3, [pc, #48]	; (7cdc <ev_dma_epout8_handler+0x38>)
    7cac:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    7cb0:	2a03      	cmp	r2, #3
    7cb2:	d010      	beq.n	7cd6 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
    7cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7cb8:	b96b      	cbnz	r3, 7cd6 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7cba:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    7cbe:	f7ff ff65 	bl	7b8c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7cc2:	2306      	movs	r3, #6
    7cc4:	f88d 3004 	strb.w	r3, [sp, #4]
    7cc8:	2308      	movs	r3, #8
    7cca:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7cce:	4b04      	ldr	r3, [pc, #16]	; (7ce0 <ev_dma_epout8_handler+0x3c>)
    7cd0:	a801      	add	r0, sp, #4
    7cd2:	681b      	ldr	r3, [r3, #0]
    7cd4:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7cd6:	b003      	add	sp, #12
    7cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    7cdc:	20001c30 	.word	0x20001c30
    7ce0:	20001d58 	.word	0x20001d58

00007ce4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7ce4:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
    7ce6:	f7ff ff61 	bl	7bac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7cea:	4b10      	ldr	r3, [pc, #64]	; (7d2c <ev_dma_epin8_handler+0x48>)
    7cec:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    7cf0:	2a03      	cmp	r2, #3
    7cf2:	d106      	bne.n	7d02 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7cf4:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7cf8:	b003      	add	sp, #12
    7cfa:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7cfe:	f7ff bf45 	b.w	7b8c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7d02:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    7d06:	b96b      	cbnz	r3, 7d24 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7d08:	f46f 7080 	mvn.w	r0, #256	; 0x100
    7d0c:	f7ff ff3e 	bl	7b8c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7d10:	2306      	movs	r3, #6
    7d12:	f88d 3004 	strb.w	r3, [sp, #4]
    7d16:	2388      	movs	r3, #136	; 0x88
    7d18:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7d1c:	4b04      	ldr	r3, [pc, #16]	; (7d30 <ev_dma_epin8_handler+0x4c>)
    7d1e:	a801      	add	r0, sp, #4
    7d20:	681b      	ldr	r3, [r3, #0]
    7d22:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7d24:	b003      	add	sp, #12
    7d26:	f85d fb04 	ldr.w	pc, [sp], #4
    7d2a:	bf00      	nop
    7d2c:	20001c30 	.word	0x20001c30
    7d30:	20001d58 	.word	0x20001d58

00007d34 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    7d34:	4a02      	ldr	r2, [pc, #8]	; (7d40 <nrfx_usbd_uninit+0xc>)
    7d36:	2300      	movs	r3, #0
    7d38:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7d3a:	4a02      	ldr	r2, [pc, #8]	; (7d44 <nrfx_usbd_uninit+0x10>)
    7d3c:	7013      	strb	r3, [r2, #0]
    return;
}
    7d3e:	4770      	bx	lr
    7d40:	20001d58 	.word	0x20001d58
    7d44:	20001f9d 	.word	0x20001f9d

00007d48 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    7d48:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
    7d4a:	4b4c      	ldr	r3, [pc, #304]	; (7e7c <nrfx_usbd_enable+0x134>)
    7d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7d50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7d54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7d58:	f7ff fe0a 	bl	7970 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7d5c:	b108      	cbz	r0, 7d62 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
    7d5e:	f7ff fe79 	bl	7a54 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7d66:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7d6a:	2b08      	cmp	r3, #8
    7d6c:	d119      	bne.n	7da2 <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
    7d6e:	f04f 0320 	mov.w	r3, #32
    7d72:	f3ef 8011 	mrs	r0, BASEPRI
    7d76:	f383 8812 	msr	BASEPRI_MAX, r3
    7d7a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7d7e:	4b40      	ldr	r3, [pc, #256]	; (7e80 <nrfx_usbd_enable+0x138>)
    7d80:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7d84:	22c0      	movs	r2, #192	; 0xc0
    7d86:	2900      	cmp	r1, #0
    7d88:	d170      	bne.n	7e6c <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7d8a:	f249 3175 	movw	r1, #37749	; 0x9375
    7d8e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    7d92:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7d96:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7d9a:	f380 8811 	msr	BASEPRI, r0
    7d9e:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    7da2:	4b36      	ldr	r3, [pc, #216]	; (7e7c <nrfx_usbd_enable+0x134>)
    7da4:	2201      	movs	r2, #1
    7da6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7daa:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    7dae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    7db2:	0512      	lsls	r2, r2, #20
    7db4:	d5fb      	bpl.n	7dae <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
    7db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7dba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7dbe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7dc6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7dca:	2b08      	cmp	r3, #8
    7dcc:	d118      	bne.n	7e00 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
    7dce:	f04f 0320 	mov.w	r3, #32
    7dd2:	f3ef 8011 	mrs	r0, BASEPRI
    7dd6:	f383 8812 	msr	BASEPRI_MAX, r3
    7dda:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7dde:	4b28      	ldr	r3, [pc, #160]	; (7e80 <nrfx_usbd_enable+0x138>)
    7de0:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7de4:	2900      	cmp	r1, #0
    7de6:	d144      	bne.n	7e72 <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7de8:	f249 3275 	movw	r2, #37749	; 0x9375
    7dec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    7df0:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7df4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7df8:	f380 8811 	msr	BASEPRI, r0
    7dfc:	f3bf 8f6f 	isb	sy
    7e00:	f7ff fdb6 	bl	7970 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7e04:	b130      	cbz	r0, 7e14 <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
    7e06:	f7ff fe45 	bl	7a94 <usbd_errata_187_211_end>
    7e0a:	f7ff fdb1 	bl	7970 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7e0e:	b108      	cbz	r0, 7e14 <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
    7e10:	f7ff fe20 	bl	7a54 <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7e18:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    7e1c:	2b08      	cmp	r3, #8
    7e1e:	4b17      	ldr	r3, [pc, #92]	; (7e7c <nrfx_usbd_enable+0x134>)
    7e20:	d10a      	bne.n	7e38 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    7e22:	f240 72e3 	movw	r2, #2019	; 0x7e3
    7e26:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    7e2a:	2240      	movs	r2, #64	; 0x40
    7e2c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
    7e30:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    7e34:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7e38:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7e3a:	2280      	movs	r2, #128	; 0x80
    7e3c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7e40:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7e44:	4b0f      	ldr	r3, [pc, #60]	; (7e84 <nrfx_usbd_enable+0x13c>)
    7e46:	f240 12ff 	movw	r2, #511	; 0x1ff
    7e4a:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    7e4c:	4b0e      	ldr	r3, [pc, #56]	; (7e88 <nrfx_usbd_enable+0x140>)
    7e4e:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
    7e50:	f7ff feac 	bl	7bac <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7e54:	4b0d      	ldr	r3, [pc, #52]	; (7e8c <nrfx_usbd_enable+0x144>)
    7e56:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    7e58:	4b0d      	ldr	r3, [pc, #52]	; (7e90 <nrfx_usbd_enable+0x148>)
    7e5a:	2202      	movs	r2, #2
    7e5c:	701a      	strb	r2, [r3, #0]
    7e5e:	f7ff fd87 	bl	7970 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7e62:	b150      	cbz	r0, 7e7a <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    7e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    7e68:	f7ff be14 	b.w	7a94 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    7e6c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    7e70:	e793      	b.n	7d9a <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    7e72:	2200      	movs	r2, #0
    7e74:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
    7e78:	e7be      	b.n	7df8 <nrfx_usbd_enable+0xb0>
}
    7e7a:	bd08      	pop	{r3, pc}
    7e7c:	40027000 	.word	0x40027000
    7e80:	4006e000 	.word	0x4006e000
    7e84:	20001d54 	.word	0x20001d54
    7e88:	20001d50 	.word	0x20001d50
    7e8c:	20001f9b 	.word	0x20001f9b
    7e90:	20001f9d 	.word	0x20001f9d

00007e94 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    7e94:	4b0a      	ldr	r3, [pc, #40]	; (7ec0 <nrfx_usbd_start+0x2c>)
    7e96:	2200      	movs	r2, #0
{
    7e98:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    7e9a:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    7e9c:	4a09      	ldr	r2, [pc, #36]	; (7ec4 <nrfx_usbd_start+0x30>)
    7e9e:	4b0a      	ldr	r3, [pc, #40]	; (7ec8 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    7ea0:	4c0a      	ldr	r4, [pc, #40]	; (7ecc <nrfx_usbd_start+0x38>)
    7ea2:	2800      	cmp	r0, #0
    7ea4:	bf08      	it	eq
    7ea6:	4613      	moveq	r3, r2
    7ea8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    7eac:	2027      	movs	r0, #39	; 0x27
    7eae:	f7fb fdaf 	bl	3a10 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    7eb2:	2301      	movs	r3, #1
    7eb4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7eb8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    7ebc:	bd10      	pop	{r4, pc}
    7ebe:	bf00      	nop
    7ec0:	20001f9c 	.word	0x20001f9c
    7ec4:	01c01407 	.word	0x01c01407
    7ec8:	01e01407 	.word	0x01e01407
    7ecc:	40027000 	.word	0x40027000

00007ed0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    7ed0:	4b03      	ldr	r3, [pc, #12]	; (7ee0 <nrfx_usbd_is_enabled+0x10>)
    7ed2:	7818      	ldrb	r0, [r3, #0]
}
    7ed4:	2801      	cmp	r0, #1
    7ed6:	bf94      	ite	ls
    7ed8:	2000      	movls	r0, #0
    7eda:	2001      	movhi	r0, #1
    7edc:	4770      	bx	lr
    7ede:	bf00      	nop
    7ee0:	20001f9d 	.word	0x20001f9d

00007ee4 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    7ee4:	b510      	push	{r4, lr}
	__asm__ volatile(
    7ee6:	f04f 0320 	mov.w	r3, #32
    7eea:	f3ef 8111 	mrs	r1, BASEPRI
    7eee:	f383 8812 	msr	BASEPRI_MAX, r3
    7ef2:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    7ef6:	4b0f      	ldr	r3, [pc, #60]	; (7f34 <nrfx_usbd_suspend+0x50>)
    7ef8:	781b      	ldrb	r3, [r3, #0]
    7efa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7efe:	b193      	cbz	r3, 7f26 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    7f00:	4b0d      	ldr	r3, [pc, #52]	; (7f38 <nrfx_usbd_suspend+0x54>)
    7f02:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    7f06:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    7f0a:	d10c      	bne.n	7f26 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    7f0c:	2401      	movs	r4, #1
    7f0e:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7f12:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    7f16:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7f1a:	05a4      	lsls	r4, r4, #22
    7f1c:	d504      	bpl.n	7f28 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    7f1e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    7f22:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    7f26:	2000      	movs	r0, #0
	__asm__ volatile(
    7f28:	f381 8811 	msr	BASEPRI, r1
    7f2c:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    7f30:	bd10      	pop	{r4, pc}
    7f32:	bf00      	nop
    7f34:	20001f9c 	.word	0x20001f9c
    7f38:	40027000 	.word	0x40027000

00007f3c <nrfx_usbd_init>:
{
    7f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    7f3e:	4b1c      	ldr	r3, [pc, #112]	; (7fb0 <nrfx_usbd_init+0x74>)
    7f40:	781c      	ldrb	r4, [r3, #0]
    7f42:	bb94      	cbnz	r4, 7faa <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    7f44:	4a1b      	ldr	r2, [pc, #108]	; (7fb4 <nrfx_usbd_init+0x78>)
    7f46:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7f48:	2201      	movs	r2, #1
    7f4a:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f4c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7f50:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7f52:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f56:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7f5a:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f5c:	bf14      	ite	ne
    7f5e:	4639      	movne	r1, r7
    7f60:	2140      	moveq	r1, #64	; 0x40
    7f62:	4628      	mov	r0, r5
    7f64:	f003 fb7b 	bl	b65e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7f68:	4628      	mov	r0, r5
    7f6a:	f7ff fd15 	bl	7998 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7f6e:	3401      	adds	r4, #1
    7f70:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7f72:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    7f74:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    7f76:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7f78:	d1eb      	bne.n	7f52 <nrfx_usbd_init+0x16>
    7f7a:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f7c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7f80:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7f82:	f014 0f08 	tst.w	r4, #8
    7f86:	b2e6      	uxtb	r6, r4
    7f88:	bf14      	ite	ne
    7f8a:	4639      	movne	r1, r7
    7f8c:	2140      	moveq	r1, #64	; 0x40
    7f8e:	4630      	mov	r0, r6
    7f90:	f003 fb65 	bl	b65e <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7f94:	4630      	mov	r0, r6
    7f96:	f7ff fcff 	bl	7998 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7f9a:	3401      	adds	r4, #1
    7f9c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7f9e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7fa0:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7fa2:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7fa4:	d1ed      	bne.n	7f82 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    7fa6:	4804      	ldr	r0, [pc, #16]	; (7fb8 <nrfx_usbd_init+0x7c>)
}
    7fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    7faa:	4804      	ldr	r0, [pc, #16]	; (7fbc <nrfx_usbd_init+0x80>)
    7fac:	e7fc      	b.n	7fa8 <nrfx_usbd_init+0x6c>
    7fae:	bf00      	nop
    7fb0:	20001f9d 	.word	0x20001f9d
    7fb4:	20001d58 	.word	0x20001d58
    7fb8:	0bad0000 	.word	0x0bad0000
    7fbc:	0bad0005 	.word	0x0bad0005

00007fc0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    7fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fc4:	4604      	mov	r4, r0
	__asm__ volatile(
    7fc6:	f04f 0320 	mov.w	r3, #32
    7fca:	f3ef 8611 	mrs	r6, BASEPRI
    7fce:	f383 8812 	msr	BASEPRI_MAX, r3
    7fd2:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    7fd6:	f010 090f 	ands.w	r9, r0, #15
    7fda:	d103      	bne.n	7fe4 <nrfx_usbd_ep_transfer+0x24>
    7fdc:	4b27      	ldr	r3, [pc, #156]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	4283      	cmp	r3, r0
    7fe2:	d147      	bne.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7fe4:	4b26      	ldr	r3, [pc, #152]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7fe6:	4f27      	ldr	r7, [pc, #156]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fe8:	681a      	ldr	r2, [r3, #0]
    7fea:	683b      	ldr	r3, [r7, #0]
    7fec:	43d2      	mvns	r2, r2
    7fee:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    7ff0:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7ff2:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    7ff4:	f003 fafb 	bl	b5ee <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7ff8:	f04f 0801 	mov.w	r8, #1
    7ffc:	fa08 f800 	lsl.w	r8, r8, r0
    8000:	ea12 0f08 	tst.w	r2, r8
    8004:	d138      	bne.n	8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8006:	4620      	mov	r0, r4
    8008:	f7ff fcc6 	bl	7998 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    800c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    800e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8010:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8012:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    8016:	d529      	bpl.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    8018:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    801a:	6888      	ldr	r0, [r1, #8]
    801c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8020:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8024:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8028:	d11d      	bne.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    802a:	4a17      	ldr	r2, [pc, #92]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    802c:	4c17      	ldr	r4, [pc, #92]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    802e:	2800      	cmp	r0, #0
    8030:	bf08      	it	eq
    8032:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8034:	4816      	ldr	r0, [pc, #88]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8036:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8038:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    803a:	c907      	ldmia	r1, {r0, r1, r2}
    803c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8040:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    8042:	2300      	movs	r3, #0
    8044:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8046:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8048:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    804a:	4812      	ldr	r0, [pc, #72]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    804c:	ea43 0308 	orr.w	r3, r3, r8
    8050:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8052:	4b11      	ldr	r3, [pc, #68]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    8054:	2280      	movs	r2, #128	; 0x80
    8056:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    805a:	f386 8811 	msr	BASEPRI, r6
    805e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8066:	4a0d      	ldr	r2, [pc, #52]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    8068:	4c0d      	ldr	r4, [pc, #52]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    806a:	e7e0      	b.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    806c:	4a0d      	ldr	r2, [pc, #52]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    806e:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    8070:	4a0d      	ldr	r2, [pc, #52]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    8072:	e7e1      	b.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
        ret = NRFX_ERROR_INVALID_ADDR;
    8074:	480d      	ldr	r0, [pc, #52]	; (80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    8076:	e7f0      	b.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
        ret = NRFX_ERROR_BUSY;
    8078:	480d      	ldr	r0, [pc, #52]	; (80b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    807a:	e7ee      	b.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    807c:	20001f9b 	.word	0x20001f9b
    8080:	20001d54 	.word	0x20001d54
    8084:	20001d50 	.word	0x20001d50
    8088:	0000b5c7 	.word	0x0000b5c7
    808c:	0000b5a5 	.word	0x0000b5a5
    8090:	20001bc4 	.word	0x20001bc4
    8094:	0bad0000 	.word	0x0bad0000
    8098:	e000e100 	.word	0xe000e100
    809c:	00007b0d 	.word	0x00007b0d
    80a0:	00007ad5 	.word	0x00007ad5
    80a4:	20001b58 	.word	0x20001b58
    80a8:	0000b573 	.word	0x0000b573
    80ac:	0bad000a 	.word	0x0bad000a
    80b0:	0bad000b 	.word	0x0bad000b

000080b4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    80b4:	f010 0f08 	tst.w	r0, #8
    80b8:	4b07      	ldr	r3, [pc, #28]	; (80d8 <nrfx_usbd_epout_size_get+0x24>)
    80ba:	d006      	beq.n	80ca <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    80bc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    80c0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    80c4:	bf18      	it	ne
    80c6:	2000      	movne	r0, #0
    80c8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    80ca:	f000 000f 	and.w	r0, r0, #15
    80ce:	f500 7094 	add.w	r0, r0, #296	; 0x128
    80d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    80d6:	4770      	bx	lr
    80d8:	40027000 	.word	0x40027000

000080dc <usbd_dmareq_process>:
{
    80dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    80e0:	4e59      	ldr	r6, [pc, #356]	; (8248 <usbd_dmareq_process+0x16c>)
    80e2:	7833      	ldrb	r3, [r6, #0]
{
    80e4:	b085      	sub	sp, #20
    if (!m_dma_pending)
    80e6:	2b00      	cmp	r3, #0
    80e8:	d173      	bne.n	81d2 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    80ea:	f8df 8160 	ldr.w	r8, [pc, #352]	; 824c <usbd_dmareq_process+0x170>
    80ee:	4d58      	ldr	r5, [pc, #352]	; (8250 <usbd_dmareq_process+0x174>)
    80f0:	f8d8 4000 	ldr.w	r4, [r8]
    80f4:	682b      	ldr	r3, [r5, #0]
    80f6:	401c      	ands	r4, r3
    80f8:	d06b      	beq.n	81d2 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    80fa:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    80fe:	bf14      	ite	ne
    8100:	fa93 f4a3 	rbitne	r4, r3
    8104:	fa94 f4a4 	rbiteq	r4, r4
    8108:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    810c:	f04f 0901 	mov.w	r9, #1
    8110:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8114:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8116:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    811a:	d95d      	bls.n	81d8 <usbd_dmareq_process+0xfc>
    811c:	3c10      	subs	r4, #16
    811e:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8120:	4620      	mov	r0, r4
    8122:	f7ff fc39 	bl	7998 <ep_state_access>
    8126:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8128:	4620      	mov	r0, r4
    812a:	f7ff ffc3 	bl	80b4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    812e:	f8da 7000 	ldr.w	r7, [sl]
    8132:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    8136:	f8da 1004 	ldr.w	r1, [sl, #4]
    813a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    813c:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    813e:	a802      	add	r0, sp, #8
    8140:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    8142:	9b02      	ldr	r3, [sp, #8]
    8144:	2b00      	cmp	r3, #0
    8146:	d153      	bne.n	81f0 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
    8148:	b908      	cbnz	r0, 814e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    814a:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    814e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
    8152:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
    8154:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8158:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    815a:	bf02      	ittt	eq
    815c:	4b3d      	ldreq	r3, [pc, #244]	; (8254 <usbd_dmareq_process+0x178>)
    815e:	2282      	moveq	r2, #130	; 0x82
    8160:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
    8164:	2301      	movs	r3, #1
    8166:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    8168:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    816a:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    816c:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    816e:	ea03 0309 	and.w	r3, r3, r9
    8172:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8174:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    8178:	2900      	cmp	r1, #0
    817a:	4413      	add	r3, r2
    817c:	f8ca 3008 	str.w	r3, [sl, #8]
    8180:	f004 0508 	and.w	r5, r4, #8
    8184:	4b33      	ldr	r3, [pc, #204]	; (8254 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8186:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    818a:	da4e      	bge.n	822a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
    818c:	2d00      	cmp	r5, #0
    818e:	d044      	beq.n	821a <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
    8190:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    8194:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    8198:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    819a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    819e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    81a2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    81a6:	2201      	movs	r2, #1
    81a8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    81aa:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    81ac:	4a2a      	ldr	r2, [pc, #168]	; (8258 <usbd_dmareq_process+0x17c>)
    81ae:	4b2b      	ldr	r3, [pc, #172]	; (825c <usbd_dmareq_process+0x180>)
    81b0:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    81b4:	bf38      	it	cc
    81b6:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    81b8:	4926      	ldr	r1, [pc, #152]	; (8254 <usbd_dmareq_process+0x178>)
    81ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    81be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    81c2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    81c6:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    81c8:	b91a      	cbnz	r2, 81d2 <usbd_dmareq_process+0xf6>
    81ca:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    81ce:	2a00      	cmp	r2, #0
    81d0:	d0f9      	beq.n	81c6 <usbd_dmareq_process+0xea>
}
    81d2:	b005      	add	sp, #20
    81d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    81d8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    81dc:	4620      	mov	r0, r4
    81de:	f7ff fbdb 	bl	7998 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    81e2:	6803      	ldr	r3, [r0, #0]
    81e4:	8982      	ldrh	r2, [r0, #12]
    81e6:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    81e8:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    81ea:	a802      	add	r0, sp, #8
    81ec:	4798      	blx	r3
    81ee:	e7ab      	b.n	8148 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    81f0:	9b03      	ldr	r3, [sp, #12]
    81f2:	459b      	cmp	fp, r3
    81f4:	d9a8      	bls.n	8148 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    81f6:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    81f8:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    81fa:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    81fe:	f7ff fcc5 	bl	7b8c <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8202:	2306      	movs	r3, #6
    8204:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8208:	4b15      	ldr	r3, [pc, #84]	; (8260 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    820a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    820e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8210:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8214:	a801      	add	r0, sp, #4
    8216:	4798      	blx	r3
                    continue;
    8218:	e76a      	b.n	80f0 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    821a:	2514      	movs	r5, #20
    821c:	fb05 3304 	mla	r3, r5, r4, r3
    8220:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8224:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8228:	e7b6      	b.n	8198 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
    822a:	b12d      	cbz	r5, 8238 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
    822c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8230:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    8234:	2328      	movs	r3, #40	; 0x28
    8236:	e7b0      	b.n	819a <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8238:	2514      	movs	r5, #20
    823a:	fb05 3304 	mla	r3, r5, r4, r3
    823e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8242:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8246:	e7f5      	b.n	8234 <usbd_dmareq_process+0x158>
    8248:	20001f9a 	.word	0x20001f9a
    824c:	20001d50 	.word	0x20001d50
    8250:	20001d54 	.word	0x20001d54
    8254:	40027000 	.word	0x40027000
    8258:	0000c3e8 	.word	0x0000c3e8
    825c:	0000c3fa 	.word	0x0000c3fa
    8260:	20001d58 	.word	0x20001d58

00008264 <ev_epdata_handler>:
{
    8264:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    8266:	4b0f      	ldr	r3, [pc, #60]	; (82a4 <ev_epdata_handler+0x40>)
    8268:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    826c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    8270:	2501      	movs	r5, #1
    while (dataepstatus)
    8272:	b91c      	cbnz	r4, 827c <ev_epdata_handler+0x18>
}
    8274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    8278:	f7ff bf30 	b.w	80dc <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    827c:	fa94 f3a4 	rbit	r3, r4
    8280:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8284:	2b0f      	cmp	r3, #15
    8286:	bfc8      	it	gt
    8288:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    828c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    828e:	bfd4      	ite	le
    8290:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    8294:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    8296:	fa05 f303 	lsl.w	r3, r5, r3
    829a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    829e:	f7ff fcad 	bl	7bfc <usbd_ep_data_handler>
    82a2:	e7e6      	b.n	8272 <ev_epdata_handler+0xe>
    82a4:	40027000 	.word	0x40027000

000082a8 <nrf_usbd_epout_dma_handler>:
{
    82a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
    82aa:	f7ff fc7f 	bl	7bac <usbd_dma_pending_clear>
{
    82ae:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    82b0:	f7ff fb72 	bl	7998 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    82b4:	7b83      	ldrb	r3, [r0, #14]
    82b6:	2b03      	cmp	r3, #3
    82b8:	d10d      	bne.n	82d6 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    82ba:	4620      	mov	r0, r4
    82bc:	f003 f997 	bl	b5ee <ep2bit>
    82c0:	2301      	movs	r3, #1
    82c2:	fa03 f000 	lsl.w	r0, r3, r0
    82c6:	43c0      	mvns	r0, r0
    82c8:	f7ff fc60 	bl	7b8c <atomic_and.constprop.0.isra.0>
}
    82cc:	b003      	add	sp, #12
    82ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    82d2:	f7ff bf03 	b.w	80dc <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    82d6:	6805      	ldr	r5, [r0, #0]
    82d8:	2d00      	cmp	r5, #0
    82da:	d1f7      	bne.n	82cc <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    82dc:	4620      	mov	r0, r4
    82de:	f003 f986 	bl	b5ee <ep2bit>
    82e2:	2301      	movs	r3, #1
    82e4:	fa03 f000 	lsl.w	r0, r3, r0
    82e8:	43c0      	mvns	r0, r0
    82ea:	f7ff fc4f 	bl	7b8c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    82ee:	2306      	movs	r3, #6
    82f0:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    82f4:	4b04      	ldr	r3, [pc, #16]	; (8308 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    82f6:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    82fa:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    82fc:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    8300:	a801      	add	r0, sp, #4
    8302:	4798      	blx	r3
    8304:	e7e2      	b.n	82cc <nrf_usbd_epout_dma_handler+0x24>
    8306:	bf00      	nop
    8308:	20001d58 	.word	0x20001d58

0000830c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    830c:	4b02      	ldr	r3, [pc, #8]	; (8318 <nrfx_usbd_ep_stall+0xc>)
    830e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8312:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8316:	4770      	bx	lr
    8318:	40027000 	.word	0x40027000

0000831c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    831c:	0702      	lsls	r2, r0, #28
    831e:	d413      	bmi.n	8348 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8320:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8324:	f010 0f80 	tst.w	r0, #128	; 0x80
    8328:	4a08      	ldr	r2, [pc, #32]	; (834c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    832a:	bf0b      	itete	eq
    832c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8330:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8334:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    8338:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    833c:	bf08      	it	eq
    833e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8340:	1e43      	subs	r3, r0, #1
    8342:	4258      	negs	r0, r3
    8344:	4158      	adcs	r0, r3
    8346:	4770      	bx	lr
        return false;
    8348:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    834a:	4770      	bx	lr
    834c:	40027000 	.word	0x40027000

00008350 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    8350:	4b04      	ldr	r3, [pc, #16]	; (8364 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    8352:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    8356:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    835a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    835e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    8362:	4770      	bx	lr
    8364:	40027000 	.word	0x40027000

00008368 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    8368:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    836a:	2208      	movs	r2, #8
    836c:	2100      	movs	r1, #0
{
    836e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8370:	f002 fe0e 	bl	af90 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8374:	4b0e      	ldr	r3, [pc, #56]	; (83b0 <nrfx_usbd_setup_get+0x48>)
    8376:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    837a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    837c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    8380:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    8382:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    8386:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    838a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    838e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    8390:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8394:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    8398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    839c:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    839e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    83a2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    83a6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    83aa:	80e3      	strh	r3, [r4, #6]
}
    83ac:	bd10      	pop	{r4, pc}
    83ae:	bf00      	nop
    83b0:	40027000 	.word	0x40027000

000083b4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    83b4:	4b02      	ldr	r3, [pc, #8]	; (83c0 <nrfx_usbd_setup_data_clear+0xc>)
    83b6:	2201      	movs	r2, #1
    83b8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    83ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    83bc:	4770      	bx	lr
    83be:	bf00      	nop
    83c0:	40027000 	.word	0x40027000

000083c4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    83c4:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
    83c6:	f7ff fbf1 	bl	7bac <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    83ca:	4b10      	ldr	r3, [pc, #64]	; (840c <ev_dma_epout0_handler+0x48>)
    83cc:	7b9a      	ldrb	r2, [r3, #14]
    83ce:	2a03      	cmp	r2, #3
    83d0:	d106      	bne.n	83e0 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83d2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    83d6:	b002      	add	sp, #8
    83d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83dc:	f7ff bbd6 	b.w	7b8c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    83e0:	681c      	ldr	r4, [r3, #0]
    83e2:	b974      	cbnz	r4, 8402 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    83e4:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    83e8:	f7ff fbd0 	bl	7b8c <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    83ec:	2306      	movs	r3, #6
    83ee:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    83f2:	4b07      	ldr	r3, [pc, #28]	; (8410 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    83f4:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    83f8:	681b      	ldr	r3, [r3, #0]
    83fa:	a801      	add	r0, sp, #4
    83fc:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    83fe:	b002      	add	sp, #8
    8400:	bd10      	pop	{r4, pc}
    8402:	b002      	add	sp, #8
    8404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    8408:	f7ff bfd4 	b.w	83b4 <nrfx_usbd_setup_data_clear>
    840c:	20001c30 	.word	0x20001c30
    8410:	20001d58 	.word	0x20001d58

00008414 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8414:	4b02      	ldr	r3, [pc, #8]	; (8420 <nrfx_usbd_setup_clear+0xc>)
    8416:	2201      	movs	r2, #1
    8418:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    841a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    841c:	4770      	bx	lr
    841e:	bf00      	nop
    8420:	40027000 	.word	0x40027000

00008424 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8424:	4b02      	ldr	r3, [pc, #8]	; (8430 <nrfx_usbd_setup_stall+0xc>)
    8426:	2201      	movs	r2, #1
    8428:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    842a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    842c:	4770      	bx	lr
    842e:	bf00      	nop
    8430:	40027000 	.word	0x40027000

00008434 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    8434:	4b01      	ldr	r3, [pc, #4]	; (843c <nrfx_usbd_last_setup_dir_get+0x8>)
    8436:	7818      	ldrb	r0, [r3, #0]
    8438:	4770      	bx	lr
    843a:	bf00      	nop
    843c:	20001f9b 	.word	0x20001f9b

00008440 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8440:	b510      	push	{r4, lr}
    8442:	4602      	mov	r2, r0
	__asm__ volatile(
    8444:	f04f 0320 	mov.w	r3, #32
    8448:	f3ef 8411 	mrs	r4, BASEPRI
    844c:	f383 8812 	msr	BASEPRI_MAX, r3
    8450:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    8454:	f003 f8cb 	bl	b5ee <ep2bit>
    8458:	490d      	ldr	r1, [pc, #52]	; (8490 <nrfx_usbd_transfer_out_drop+0x50>)
    845a:	2301      	movs	r3, #1
    845c:	fa03 f000 	lsl.w	r0, r3, r0
    8460:	680b      	ldr	r3, [r1, #0]
    8462:	ea23 0300 	bic.w	r3, r3, r0
    8466:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    8468:	f012 0108 	ands.w	r1, r2, #8
    846c:	d10a      	bne.n	8484 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    846e:	f002 030f 	and.w	r3, r2, #15
    8472:	009b      	lsls	r3, r3, #2
    8474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8478:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    847c:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8480:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    8484:	f384 8811 	msr	BASEPRI, r4
    8488:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    848c:	bd10      	pop	{r4, pc}
    848e:	bf00      	nop
    8490:	20001d54 	.word	0x20001d54

00008494 <usbd_ep_abort>:
{
    8494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8496:	4601      	mov	r1, r0
	__asm__ volatile(
    8498:	f04f 0320 	mov.w	r3, #32
    849c:	f3ef 8511 	mrs	r5, BASEPRI
    84a0:	f383 8812 	msr	BASEPRI_MAX, r3
    84a4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    84a8:	f7ff fa76 	bl	7998 <ep_state_access>
    84ac:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    84ae:	4608      	mov	r0, r1
    84b0:	f003 f89d 	bl	b5ee <ep2bit>
    84b4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    84b6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    84ba:	fa02 f200 	lsl.w	r2, r2, r0
    84be:	482e      	ldr	r0, [pc, #184]	; (8578 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    84c0:	d119      	bne.n	84f6 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    84c2:	6803      	ldr	r3, [r0, #0]
    84c4:	ea32 0303 	bics.w	r3, r2, r3
    84c8:	d00a      	beq.n	84e0 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    84ca:	4608      	mov	r0, r1
    84cc:	f7ff ffb8 	bl	8440 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    84d0:	2303      	movs	r3, #3
    84d2:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    84d4:	f385 8811 	msr	BASEPRI, r5
    84d8:	f3bf 8f6f 	isb	sy
}
    84dc:	b003      	add	sp, #12
    84de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    84e0:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    84e2:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    84e4:	4925      	ldr	r1, [pc, #148]	; (857c <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    84e6:	ea23 0302 	bic.w	r3, r3, r2
    84ea:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    84ec:	680b      	ldr	r3, [r1, #0]
    84ee:	ea23 0302 	bic.w	r3, r3, r2
    84f2:	600b      	str	r3, [r1, #0]
    84f4:	e7ec      	b.n	84d0 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    84f6:	070b      	lsls	r3, r1, #28
    84f8:	d415      	bmi.n	8526 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    84fa:	2980      	cmp	r1, #128	; 0x80
    84fc:	4b20      	ldr	r3, [pc, #128]	; (8580 <usbd_ep_abort+0xec>)
    84fe:	d02f      	beq.n	8560 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8500:	f001 040f 	and.w	r4, r1, #15
    8504:	f204 34da 	addw	r4, r4, #986	; 0x3da
    8508:	0064      	lsls	r4, r4, #1
    850a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    850e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8512:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8516:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8518:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    851c:	433c      	orrs	r4, r7
    851e:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8522:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    8526:	4f15      	ldr	r7, [pc, #84]	; (857c <usbd_ep_abort+0xe8>)
    8528:	6804      	ldr	r4, [r0, #0]
    852a:	683b      	ldr	r3, [r7, #0]
    852c:	ea64 0c03 	orn	ip, r4, r3
    8530:	ea1c 0f02 	tst.w	ip, r2
    8534:	d0ce      	beq.n	84d4 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8536:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8538:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    853c:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    853e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8540:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8542:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    8544:	2303      	movs	r3, #3
    8546:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8548:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    854c:	4b0d      	ldr	r3, [pc, #52]	; (8584 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    854e:	f88d 1006 	strb.w	r1, [sp, #6]
    8552:	2206      	movs	r2, #6
            m_event_handler(&evt);
    8554:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    8556:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    855a:	a801      	add	r0, sp, #4
    855c:	4798      	blx	r3
    855e:	e7b9      	b.n	84d4 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    8560:	f240 74b4 	movw	r4, #1972	; 0x7b4
    8564:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8568:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    856c:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8570:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8572:	f044 0404 	orr.w	r4, r4, #4
    8576:	e7d1      	b.n	851c <usbd_ep_abort+0x88>
    8578:	20001d50 	.word	0x20001d50
    857c:	20001d54 	.word	0x20001d54
    8580:	40027000 	.word	0x40027000
    8584:	20001d58 	.word	0x20001d58

00008588 <ev_setup_handler>:
{
    8588:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    858a:	4b14      	ldr	r3, [pc, #80]	; (85dc <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    858c:	4c14      	ldr	r4, [pc, #80]	; (85e0 <ev_setup_handler+0x58>)
    858e:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    8592:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    8594:	4e13      	ldr	r6, [pc, #76]	; (85e4 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8596:	43da      	mvns	r2, r3
    8598:	4b13      	ldr	r3, [pc, #76]	; (85e8 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    859a:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    859c:	681b      	ldr	r3, [r3, #0]
    859e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    85a0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    85a2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    85a4:	f003 f823 	bl	b5ee <ep2bit>
    85a8:	2301      	movs	r3, #1
    85aa:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    85ac:	4213      	tst	r3, r2
    85ae:	d002      	beq.n	85b6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    85b0:	4608      	mov	r0, r1
    85b2:	f7ff ff6f 	bl	8494 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    85b6:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    85ba:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    85be:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    85c0:	f7ff fae4 	bl	7b8c <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    85c4:	6823      	ldr	r3, [r4, #0]
    85c6:	f043 0301 	orr.w	r3, r3, #1
    85ca:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    85cc:	2305      	movs	r3, #5
    85ce:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    85d0:	4b06      	ldr	r3, [pc, #24]	; (85ec <ev_setup_handler+0x64>)
    85d2:	a801      	add	r0, sp, #4
    85d4:	681b      	ldr	r3, [r3, #0]
    85d6:	4798      	blx	r3
}
    85d8:	b002      	add	sp, #8
    85da:	bd70      	pop	{r4, r5, r6, pc}
    85dc:	40027000 	.word	0x40027000
    85e0:	20001d54 	.word	0x20001d54
    85e4:	20001f9b 	.word	0x20001f9b
    85e8:	20001d50 	.word	0x20001d50
    85ec:	20001d58 	.word	0x20001d58

000085f0 <nrfx_usbd_irq_handler>:
{
    85f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    85f4:	4b1a      	ldr	r3, [pc, #104]	; (8660 <nrfx_usbd_irq_handler+0x70>)
    85f6:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    85fa:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    85fc:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    85fe:	461d      	mov	r5, r3
    while (to_process)
    8600:	b970      	cbnz	r0, 8620 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    8602:	4f18      	ldr	r7, [pc, #96]	; (8664 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8604:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    8608:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    860c:	f04f 0801 	mov.w	r8, #1
    while (active)
    8610:	b9bc      	cbnz	r4, 8642 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8612:	f7ff fd63 	bl	80dc <usbd_dmareq_process>
    if (setup_active)
    8616:	b306      	cbz	r6, 865a <nrfx_usbd_irq_handler+0x6a>
}
    8618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    861c:	f7ff bfb4 	b.w	8588 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8620:	fa90 f2a0 	rbit	r2, r0
    8624:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8628:	490f      	ldr	r1, [pc, #60]	; (8668 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    862a:	0096      	lsls	r6, r2, #2
    862c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    862e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8632:	680e      	ldr	r6, [r1, #0]
    if (ret)
    8634:	b116      	cbz	r6, 863c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8636:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8638:	6809      	ldr	r1, [r1, #0]
    863a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    863c:	ea20 0002 	bic.w	r0, r0, r2
    8640:	e7de      	b.n	8600 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8642:	fa94 f5a4 	rbit	r5, r4
    8646:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    864a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    864e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8652:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8654:	ea24 0405 	bic.w	r4, r4, r5
    8658:	e7da      	b.n	8610 <nrfx_usbd_irq_handler+0x20>
}
    865a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    865e:	bf00      	nop
    8660:	40027000 	.word	0x40027000
    8664:	0000c2cc 	.word	0x0000c2cc
    8668:	40027100 	.word	0x40027100

0000866c <nrfx_usbd_stop>:
{
    866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    866e:	4b1b      	ldr	r3, [pc, #108]	; (86dc <nrfx_usbd_stop+0x70>)
    8670:	2280      	movs	r2, #128	; 0x80
    8672:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8676:	2027      	movs	r0, #39	; 0x27
    8678:	f7fb f9ec 	bl	3a54 <arch_irq_is_enabled>
    867c:	b1b8      	cbz	r0, 86ae <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    867e:	4e18      	ldr	r6, [pc, #96]	; (86e0 <nrfx_usbd_stop+0x74>)
    8680:	4b18      	ldr	r3, [pc, #96]	; (86e4 <nrfx_usbd_stop+0x78>)
    8682:	6834      	ldr	r4, [r6, #0]
    8684:	681b      	ldr	r3, [r3, #0]
    8686:	0c24      	lsrs	r4, r4, #16
    8688:	0424      	lsls	r4, r4, #16
    868a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    868c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    868e:	b97c      	cbnz	r4, 86b0 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8690:	4d15      	ldr	r5, [pc, #84]	; (86e8 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8692:	f240 13ff 	movw	r3, #511	; 0x1ff
    8696:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    8698:	2027      	movs	r0, #39	; 0x27
    869a:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    869e:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    86a2:	f7fb f9c3 	bl	3a2c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    86a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86aa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    86ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    86b0:	fa94 f5a4 	rbit	r5, r4
    86b4:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    86b8:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    86ba:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    86bc:	bfc6      	itte	gt
    86be:	f1a5 0010 	subgt.w	r0, r5, #16
    86c2:	b2c0      	uxtbgt	r0, r0
    86c4:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    86c8:	0703      	lsls	r3, r0, #28
    86ca:	d401      	bmi.n	86d0 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    86cc:	f7ff fee2 	bl	8494 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    86d0:	fa07 f505 	lsl.w	r5, r7, r5
    86d4:	ea24 0405 	bic.w	r4, r4, r5
    86d8:	e7d9      	b.n	868e <nrfx_usbd_stop+0x22>
    86da:	bf00      	nop
    86dc:	e000e100 	.word	0xe000e100
    86e0:	20001d54 	.word	0x20001d54
    86e4:	20001d50 	.word	0x20001d50
    86e8:	40027000 	.word	0x40027000

000086ec <nrfx_usbd_disable>:
{
    86ec:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    86ee:	f7ff ffbd 	bl	866c <nrfx_usbd_stop>
    return p_reg->INTENSET;
    86f2:	4b08      	ldr	r3, [pc, #32]	; (8714 <nrfx_usbd_disable+0x28>)
    86f4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    86f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    86fc:	2200      	movs	r2, #0
    86fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8702:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
    8706:	f7ff fa51 	bl	7bac <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    870a:	4b03      	ldr	r3, [pc, #12]	; (8718 <nrfx_usbd_disable+0x2c>)
    870c:	2201      	movs	r2, #1
    870e:	701a      	strb	r2, [r3, #0]
}
    8710:	bd08      	pop	{r3, pc}
    8712:	bf00      	nop
    8714:	40027000 	.word	0x40027000
    8718:	20001f9d 	.word	0x20001f9d

0000871c <nrfx_usbd_ep_disable>:
{
    871c:	b510      	push	{r4, lr}
    871e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8720:	f7ff feb8 	bl	8494 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8724:	4a10      	ldr	r2, [pc, #64]	; (8768 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8726:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    872a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    872e:	f04f 0301 	mov.w	r3, #1
    8732:	bf14      	ite	ne
    8734:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8738:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    873c:	fa03 f300 	lsl.w	r3, r3, r0
    8740:	ea6f 0303 	mvn.w	r3, r3
    8744:	bf15      	itete	ne
    8746:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8748:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    874a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    874e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8752:	bf14      	ite	ne
    8754:	4b05      	ldrne	r3, [pc, #20]	; (876c <nrfx_usbd_ep_disable+0x50>)
    8756:	4b06      	ldreq	r3, [pc, #24]	; (8770 <nrfx_usbd_ep_disable+0x54>)
    8758:	5c1a      	ldrb	r2, [r3, r0]
    875a:	2301      	movs	r3, #1
    875c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    875e:	4a02      	ldr	r2, [pc, #8]	; (8768 <nrfx_usbd_ep_disable+0x4c>)
    8760:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8764:	bd10      	pop	{r4, pc}
    8766:	bf00      	nop
    8768:	40027000 	.word	0x40027000
    876c:	0000d317 	.word	0x0000d317
    8770:	0000d30e 	.word	0x0000d30e

00008774 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8774:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    8778:	b570      	push	{r4, r5, r6, lr}
    877a:	4924      	ldr	r1, [pc, #144]	; (880c <nrfx_usbd_ep_enable+0x98>)
    877c:	4604      	mov	r4, r0
    877e:	f000 030f 	and.w	r3, r0, #15
    8782:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8786:	d012      	beq.n	87ae <nrfx_usbd_ep_enable+0x3a>
    8788:	4a21      	ldr	r2, [pc, #132]	; (8810 <nrfx_usbd_ep_enable+0x9c>)
    878a:	5cd2      	ldrb	r2, [r2, r3]
    878c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    8790:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    8794:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    8798:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    879a:	07d0      	lsls	r0, r2, #31
    879c:	d406      	bmi.n	87ac <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    879e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    87a2:	fa05 f303 	lsl.w	r3, r5, r3
    87a6:	4313      	orrs	r3, r2
    87a8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    87ac:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    87ae:	4a19      	ldr	r2, [pc, #100]	; (8814 <nrfx_usbd_ep_enable+0xa0>)
    87b0:	5cd2      	ldrb	r2, [r2, r3]
    87b2:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    87b6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    87ba:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    87be:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    87c0:	07d2      	lsls	r2, r2, #31
    87c2:	d4f3      	bmi.n	87ac <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    87c4:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    87c8:	fa05 f203 	lsl.w	r2, r5, r3
    87cc:	4332      	orrs	r2, r6
    87ce:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    87d2:	2b00      	cmp	r3, #0
    87d4:	d0ea      	beq.n	87ac <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    87d6:	0703      	lsls	r3, r0, #28
    87d8:	d4e8      	bmi.n	87ac <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    87da:	f04f 0320 	mov.w	r3, #32
    87de:	f3ef 8611 	mrs	r6, BASEPRI
    87e2:	f383 8812 	msr	BASEPRI_MAX, r3
    87e6:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    87ea:	f7ff fe29 	bl	8440 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    87ee:	4620      	mov	r0, r4
    87f0:	f002 fefd 	bl	b5ee <ep2bit>
    87f4:	4a08      	ldr	r2, [pc, #32]	; (8818 <nrfx_usbd_ep_enable+0xa4>)
    87f6:	6813      	ldr	r3, [r2, #0]
    87f8:	fa05 f000 	lsl.w	r0, r5, r0
    87fc:	ea23 0300 	bic.w	r3, r3, r0
    8800:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    8802:	f386 8811 	msr	BASEPRI, r6
    8806:	f3bf 8f6f 	isb	sy
}
    880a:	e7cf      	b.n	87ac <nrfx_usbd_ep_enable+0x38>
    880c:	40027000 	.word	0x40027000
    8810:	0000d317 	.word	0x0000d317
    8814:	0000d30e 	.word	0x0000d30e
    8818:	20001d50 	.word	0x20001d50

0000881c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    881c:	0603      	lsls	r3, r0, #24
{
    881e:	b510      	push	{r4, lr}
    8820:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8822:	d405      	bmi.n	8830 <nrfx_usbd_ep_stall_clear+0x14>
    8824:	f7ff fd7a 	bl	831c <nrfx_usbd_ep_stall_check>
    8828:	b110      	cbz	r0, 8830 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    882a:	4620      	mov	r0, r4
    882c:	f7ff fe08 	bl	8440 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8830:	4b01      	ldr	r3, [pc, #4]	; (8838 <nrfx_usbd_ep_stall_clear+0x1c>)
    8832:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8836:	bd10      	pop	{r4, pc}
    8838:	40027000 	.word	0x40027000

0000883c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    883c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    883e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8842:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    8844:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    8846:	6002      	str	r2, [r0, #0]
}
    8848:	4802      	ldr	r0, [pc, #8]	; (8854 <nrf_gpio_pin_port_decode+0x18>)
    884a:	bf18      	it	ne
    884c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    8850:	4770      	bx	lr
    8852:	bf00      	nop
    8854:	50000300 	.word	0x50000300

00008858 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    8858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    885a:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    885c:	f002 ff32 	bl	b6c4 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    8860:	4608      	mov	r0, r1
    8862:	f002 ff2f 	bl	b6c4 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8866:	a801      	add	r0, sp, #4
    8868:	9601      	str	r6, [sp, #4]
    886a:	f7ff ffe7 	bl	883c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    886e:	9b01      	ldr	r3, [sp, #4]
    8870:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    8874:	460c      	mov	r4, r1
    8876:	f240 610d 	movw	r1, #1549	; 0x60d
    887a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    887e:	a801      	add	r0, sp, #4
    8880:	9401      	str	r4, [sp, #4]
    8882:	f7ff ffdb 	bl	883c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8886:	9b01      	ldr	r3, [sp, #4]
    8888:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    888c:	2509      	movs	r5, #9
    888e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    8892:	2004      	movs	r0, #4
    8894:	f002 fd84 	bl	b3a0 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8898:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    889a:	a801      	add	r0, sp, #4
    889c:	9401      	str	r4, [sp, #4]
    889e:	f7ff ffcd 	bl	883c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    88a2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    88a4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    88a8:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    88aa:	07db      	lsls	r3, r3, #31
    88ac:	d415      	bmi.n	88da <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88ae:	a801      	add	r0, sp, #4
    88b0:	9601      	str	r6, [sp, #4]
    88b2:	f7ff ffc3 	bl	883c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    88b6:	9b01      	ldr	r3, [sp, #4]
    88b8:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    88bc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    88c0:	2004      	movs	r0, #4
    88c2:	f002 fd6d 	bl	b3a0 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    88c6:	4630      	mov	r0, r6
    88c8:	f002 fefc 	bl	b6c4 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    88cc:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    88ce:	2004      	movs	r0, #4
    88d0:	f002 fd66 	bl	b3a0 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    88d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    88d8:	d1df      	bne.n	889a <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88da:	a801      	add	r0, sp, #4
    88dc:	9401      	str	r4, [sp, #4]
    88de:	f7ff ffad 	bl	883c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    88e2:	9a01      	ldr	r2, [sp, #4]
    88e4:	2301      	movs	r3, #1
    88e6:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    88e8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    88ec:	2004      	movs	r0, #4
    88ee:	f002 fd57 	bl	b3a0 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    88f2:	4620      	mov	r0, r4
    88f4:	f002 fee6 	bl	b6c4 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    88f8:	2004      	movs	r0, #4
    88fa:	f002 fd51 	bl	b3a0 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    88fe:	a801      	add	r0, sp, #4
    8900:	9401      	str	r4, [sp, #4]
    8902:	f7ff ff9b 	bl	883c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8906:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    8908:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    890c:	4803      	ldr	r0, [pc, #12]	; (891c <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    890e:	40d3      	lsrs	r3, r2
    8910:	f003 0301 	and.w	r3, r3, #1
    8914:	1ac0      	subs	r0, r0, r3
    8916:	b003      	add	sp, #12
    8918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    891a:	bf00      	nop
    891c:	0bad0001 	.word	0x0bad0001

00008920 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    8920:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    8922:	4605      	mov	r5, r0
    8924:	b910      	cbnz	r0, 892c <z_impl_device_get_binding+0xc>
		return NULL;
    8926:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    8928:	4620      	mov	r0, r4
    892a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    892c:	7803      	ldrb	r3, [r0, #0]
    892e:	2b00      	cmp	r3, #0
    8930:	d0f9      	beq.n	8926 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    8932:	4c0e      	ldr	r4, [pc, #56]	; (896c <z_impl_device_get_binding+0x4c>)
    8934:	4e0e      	ldr	r6, [pc, #56]	; (8970 <z_impl_device_get_binding+0x50>)
    8936:	42b4      	cmp	r4, r6
    8938:	d108      	bne.n	894c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    893a:	4c0c      	ldr	r4, [pc, #48]	; (896c <z_impl_device_get_binding+0x4c>)
    893c:	42b4      	cmp	r4, r6
    893e:	d0f2      	beq.n	8926 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8940:	4620      	mov	r0, r4
    8942:	f002 fecd 	bl	b6e0 <z_device_is_ready>
    8946:	b950      	cbnz	r0, 895e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    8948:	3418      	adds	r4, #24
    894a:	e7f7      	b.n	893c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    894c:	4620      	mov	r0, r4
    894e:	f002 fec7 	bl	b6e0 <z_device_is_ready>
    8952:	b110      	cbz	r0, 895a <z_impl_device_get_binding+0x3a>
    8954:	6823      	ldr	r3, [r4, #0]
    8956:	42ab      	cmp	r3, r5
    8958:	d0e6      	beq.n	8928 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    895a:	3418      	adds	r4, #24
    895c:	e7eb      	b.n	8936 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    895e:	6821      	ldr	r1, [r4, #0]
    8960:	4628      	mov	r0, r5
    8962:	f002 fafe 	bl	af62 <strcmp>
    8966:	2800      	cmp	r0, #0
    8968:	d1ee      	bne.n	8948 <z_impl_device_get_binding+0x28>
    896a:	e7dd      	b.n	8928 <z_impl_device_get_binding+0x8>
    896c:	0000be18 	.word	0x0000be18
    8970:	0000bec0 	.word	0x0000bec0

00008974 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8978:	b086      	sub	sp, #24
    897a:	4605      	mov	r5, r0
    897c:	af00      	add	r7, sp, #0
    897e:	460e      	mov	r6, r1
	__asm__ volatile(
    8980:	f04f 0320 	mov.w	r3, #32
    8984:	f3ef 8811 	mrs	r8, BASEPRI
    8988:	f383 8812 	msr	BASEPRI_MAX, r3
    898c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8990:	f000 ffec 	bl	996c <z_impl_z_current_get>
    8994:	2d04      	cmp	r5, #4
    8996:	bf96      	itet	ls
    8998:	4b2c      	ldrls	r3, [pc, #176]	; (8a4c <z_fatal_error+0xd8>)
    899a:	4b2d      	ldrhi	r3, [pc, #180]	; (8a50 <z_fatal_error+0xdc>)
    899c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    89a0:	46e9      	mov	r9, sp
    89a2:	b08a      	sub	sp, #40	; 0x28
    89a4:	4604      	mov	r4, r0
    89a6:	466a      	mov	r2, sp
    89a8:	492a      	ldr	r1, [pc, #168]	; (8a54 <z_fatal_error+0xe0>)
    89aa:	61d3      	str	r3, [r2, #28]
    89ac:	f240 3301 	movw	r3, #769	; 0x301
    89b0:	8493      	strh	r3, [r2, #36]	; 0x24
    89b2:	f04f 0a00 	mov.w	sl, #0
    89b6:	4b28      	ldr	r3, [pc, #160]	; (8a58 <z_fatal_error+0xe4>)
    89b8:	f8c2 a020 	str.w	sl, [r2, #32]
    89bc:	e9c2 1505 	strd	r1, r5, [r2, #20]
    89c0:	f842 3f10 	str.w	r3, [r2, #16]!
    89c4:	4825      	ldr	r0, [pc, #148]	; (8a5c <z_fatal_error+0xe8>)
    89c6:	4653      	mov	r3, sl
    89c8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    89cc:	f7f9 fd6c 	bl	24a8 <z_impl_z_log_msg_static_create>
    89d0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    89d2:	b17e      	cbz	r6, 89f4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    89d4:	69f3      	ldr	r3, [r6, #28]
    89d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    89da:	b15b      	cbz	r3, 89f4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    89dc:	4b20      	ldr	r3, [pc, #128]	; (8a60 <z_fatal_error+0xec>)
    89de:	617b      	str	r3, [r7, #20]
    89e0:	2302      	movs	r3, #2
    89e2:	613b      	str	r3, [r7, #16]
    89e4:	481d      	ldr	r0, [pc, #116]	; (8a5c <z_fatal_error+0xe8>)
    89e6:	4653      	mov	r3, sl
    89e8:	f107 0210 	add.w	r2, r7, #16
    89ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    89f0:	f7f9 fd5a 	bl	24a8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    89f4:	b12c      	cbz	r4, 8a02 <z_fatal_error+0x8e>
    89f6:	4620      	mov	r0, r4
    89f8:	f002 fed7 	bl	b7aa <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    89fc:	b108      	cbz	r0, 8a02 <z_fatal_error+0x8e>
    89fe:	7803      	ldrb	r3, [r0, #0]
    8a00:	b903      	cbnz	r3, 8a04 <z_fatal_error+0x90>
		thread_name = "unknown";
    8a02:	4818      	ldr	r0, [pc, #96]	; (8a64 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8a04:	46e9      	mov	r9, sp
    8a06:	b08a      	sub	sp, #40	; 0x28
    8a08:	466a      	mov	r2, sp
    8a0a:	4b17      	ldr	r3, [pc, #92]	; (8a68 <z_fatal_error+0xf4>)
    8a0c:	61d0      	str	r0, [r2, #28]
    8a0e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    8a12:	f240 3301 	movw	r3, #769	; 0x301
    8a16:	8413      	strh	r3, [r2, #32]
    8a18:	4b14      	ldr	r3, [pc, #80]	; (8a6c <z_fatal_error+0xf8>)
    8a1a:	f842 3f10 	str.w	r3, [r2, #16]!
    8a1e:	2300      	movs	r3, #0
    8a20:	480e      	ldr	r0, [pc, #56]	; (8a5c <z_fatal_error+0xe8>)
    8a22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    8a26:	f7f9 fd3f 	bl	24a8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    8a2a:	4631      	mov	r1, r6
    8a2c:	46cd      	mov	sp, r9
    8a2e:	4628      	mov	r0, r5
    8a30:	f7fd feb4 	bl	679c <k_sys_fatal_error_handler>
	__asm__ volatile(
    8a34:	f388 8811 	msr	BASEPRI, r8
    8a38:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8a3c:	4620      	mov	r0, r4
    8a3e:	f7fb fc99 	bl	4374 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8a42:	3718      	adds	r7, #24
    8a44:	46bd      	mov	sp, r7
    8a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a4a:	bf00      	nop
    8a4c:	0000c334 	.word	0x0000c334
    8a50:	0000d32a 	.word	0x0000d32a
    8a54:	0000d340 	.word	0x0000d340
    8a58:	01000005 	.word	0x01000005
    8a5c:	0000c0d8 	.word	0x0000c0d8
    8a60:	0000d368 	.word	0x0000d368
    8a64:	0000d338 	.word	0x0000d338
    8a68:	0000d389 	.word	0x0000d389
    8a6c:	01000004 	.word	0x01000004

00008a70 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8a70:	4b10      	ldr	r3, [pc, #64]	; (8ab4 <z_sys_init_run_level+0x44>)
{
    8a72:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8a74:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8a78:	3001      	adds	r0, #1
    8a7a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8a7e:	42a6      	cmp	r6, r4
    8a80:	d800      	bhi.n	8a84 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    8a82:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    8a84:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    8a88:	b18d      	cbz	r5, 8aae <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    8a8a:	4628      	mov	r0, r5
    8a8c:	4798      	blx	r3
			if (rc != 0) {
    8a8e:	b138      	cbz	r0, 8aa0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    8a90:	2800      	cmp	r0, #0
    8a92:	bfb8      	it	lt
    8a94:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    8a96:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    8a98:	28ff      	cmp	r0, #255	; 0xff
    8a9a:	bfa8      	it	ge
    8a9c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    8a9e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    8aa0:	68ea      	ldr	r2, [r5, #12]
    8aa2:	7853      	ldrb	r3, [r2, #1]
    8aa4:	f043 0301 	orr.w	r3, r3, #1
    8aa8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8aaa:	3408      	adds	r4, #8
    8aac:	e7e7      	b.n	8a7e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    8aae:	4798      	blx	r3
    8ab0:	e7fb      	b.n	8aaa <z_sys_init_run_level+0x3a>
    8ab2:	bf00      	nop
    8ab4:	0000c348 	.word	0x0000c348

00008ab8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    8ab8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8aba:	4b0a      	ldr	r3, [pc, #40]	; (8ae4 <bg_thread_main+0x2c>)
    8abc:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8abe:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    8ac0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    8ac2:	f7ff ffd5 	bl	8a70 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8ac6:	f001 f9e5 	bl	9e94 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    8aca:	2004      	movs	r0, #4
    8acc:	f7ff ffd0 	bl	8a70 <z_sys_init_run_level>

	z_init_static_threads();
    8ad0:	f000 f95e 	bl	8d90 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    8ad4:	f7f8 fd6c 	bl	15b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8ad8:	4a03      	ldr	r2, [pc, #12]	; (8ae8 <bg_thread_main+0x30>)
    8ada:	7b13      	ldrb	r3, [r2, #12]
    8adc:	f023 0301 	bic.w	r3, r3, #1
    8ae0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8ae2:	bd08      	pop	{r3, pc}
    8ae4:	20001f9e 	.word	0x20001f9e
    8ae8:	200008d0 	.word	0x200008d0

00008aec <z_bss_zero>:
{
    8aec:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    8aee:	4803      	ldr	r0, [pc, #12]	; (8afc <z_bss_zero+0x10>)
    8af0:	4a03      	ldr	r2, [pc, #12]	; (8b00 <z_bss_zero+0x14>)
    8af2:	2100      	movs	r1, #0
    8af4:	1a12      	subs	r2, r2, r0
    8af6:	f002 fdfe 	bl	b6f6 <z_early_memset>
}
    8afa:	bd08      	pop	{r3, pc}
    8afc:	200002d0 	.word	0x200002d0
    8b00:	20001fa0 	.word	0x20001fa0

00008b04 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8b04:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    8b06:	2300      	movs	r3, #0
{
    8b08:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    8b0a:	2201      	movs	r2, #1
    8b0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    8b10:	4e13      	ldr	r6, [pc, #76]	; (8b60 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8b12:	4d14      	ldr	r5, [pc, #80]	; (8b64 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    8b14:	9301      	str	r3, [sp, #4]
    8b16:	220f      	movs	r2, #15
    8b18:	e9cd 3202 	strd	r3, r2, [sp, #8]
    8b1c:	4912      	ldr	r1, [pc, #72]	; (8b68 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8b1e:	2314      	movs	r3, #20
    8b20:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    8b24:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    8b28:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    8b2a:	f44f 70c0 	mov.w	r0, #384	; 0x180
    8b2e:	fb00 1104 	mla	r1, r0, r4, r1
    8b32:	4b0e      	ldr	r3, [pc, #56]	; (8b6c <z_init_cpu+0x68>)
    8b34:	9500      	str	r5, [sp, #0]
    8b36:	f44f 72a0 	mov.w	r2, #320	; 0x140
    8b3a:	4630      	mov	r0, r6
    8b3c:	f000 f8ca 	bl	8cd4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8b40:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8b42:	4a0b      	ldr	r2, [pc, #44]	; (8b70 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8b44:	60ee      	str	r6, [r5, #12]
    8b46:	f023 0304 	bic.w	r3, r3, #4
    8b4a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8b4c:	f44f 6304 	mov.w	r3, #2112	; 0x840
    8b50:	fb04 3303 	mla	r3, r4, r3, r3
    8b54:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    8b56:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    8b58:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    8b5a:	b006      	add	sp, #24
    8b5c:	bd70      	pop	{r4, r5, r6, pc}
    8b5e:	bf00      	nop
    8b60:	20000850 	.word	0x20000850
    8b64:	20001d5c 	.word	0x20001d5c
    8b68:	20002f80 	.word	0x20002f80
    8b6c:	00008e49 	.word	0x00008e49
    8b70:	20002740 	.word	0x20002740

00008b74 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    8b74:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8b76:	2000      	movs	r0, #0
{
    8b78:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    8b7a:	f7ff ff79 	bl	8a70 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8b7e:	4b2e      	ldr	r3, [pc, #184]	; (8c38 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8b80:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    8b84:	4d2d      	ldr	r5, [pc, #180]	; (8c3c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    8b86:	4e2e      	ldr	r6, [pc, #184]	; (8c40 <z_cstart+0xcc>)
    8b88:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8b8a:	4f2e      	ldr	r7, [pc, #184]	; (8c44 <z_cstart+0xd0>)
    8b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8b90:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8b92:	2400      	movs	r4, #0
    8b94:	23e0      	movs	r3, #224	; 0xe0
    8b96:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    8b9a:	77ec      	strb	r4, [r5, #31]
    8b9c:	762c      	strb	r4, [r5, #24]
    8b9e:	766c      	strb	r4, [r5, #25]
    8ba0:	76ac      	strb	r4, [r5, #26]
    8ba2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8ba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8ba8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    8bac:	626b      	str	r3, [r5, #36]	; 0x24
    8bae:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8bb2:	f7fb fb53 	bl	425c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8bb6:	f7fa fea5 	bl	3904 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8bbe:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8bc0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8bc2:	f7fb fca7 	bl	4514 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8bc6:	f7fb fbeb 	bl	43a0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8bca:	f7f9 fb0b 	bl	21e4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    8bce:	f240 1301 	movw	r3, #257	; 0x101
    8bd2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    8bd6:	ab06      	add	r3, sp, #24
    8bd8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    8bda:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    8bde:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8be0:	f002 fd7d 	bl	b6de <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    8be4:	2001      	movs	r0, #1
    8be6:	f7ff ff43 	bl	8a70 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    8bea:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    8bec:	4d16      	ldr	r5, [pc, #88]	; (8c48 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    8bee:	f7ff ff3f 	bl	8a70 <z_sys_init_run_level>
	z_sched_init();
    8bf2:	f000 fdfd 	bl	97f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8bf6:	4b15      	ldr	r3, [pc, #84]	; (8c4c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    8bf8:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8bfa:	9305      	str	r3, [sp, #20]
    8bfc:	2301      	movs	r3, #1
    8bfe:	4914      	ldr	r1, [pc, #80]	; (8c50 <z_cstart+0xdc>)
    8c00:	9400      	str	r4, [sp, #0]
    8c02:	e9cd 4303 	strd	r4, r3, [sp, #12]
    8c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8c0a:	463b      	mov	r3, r7
    8c0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8c10:	4628      	mov	r0, r5
    8c12:	f000 f85f 	bl	8cd4 <z_setup_new_thread>
    8c16:	7b6a      	ldrb	r2, [r5, #13]
    8c18:	4606      	mov	r6, r0
    8c1a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    8c1e:	4628      	mov	r0, r5
    8c20:	736a      	strb	r2, [r5, #13]
    8c22:	f002 fedb 	bl	b9dc <z_ready_thread>
	z_init_cpu(0);
    8c26:	4620      	mov	r0, r4
    8c28:	f7ff ff6c 	bl	8b04 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8c2c:	463a      	mov	r2, r7
    8c2e:	4631      	mov	r1, r6
    8c30:	4628      	mov	r0, r5
    8c32:	f7fa ffdb 	bl	3bec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8c36:	bf00      	nop
    8c38:	20002f80 	.word	0x20002f80
    8c3c:	e000ed00 	.word	0xe000ed00
    8c40:	20001d5c 	.word	0x20001d5c
    8c44:	00008ab9 	.word	0x00008ab9
    8c48:	200008d0 	.word	0x200008d0
    8c4c:	0000d3eb 	.word	0x0000d3eb
    8c50:	20003100 	.word	0x20003100

00008c54 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    8c54:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8c56:	4c06      	ldr	r4, [pc, #24]	; (8c70 <init_mem_slab_module+0x1c>)
    8c58:	4d06      	ldr	r5, [pc, #24]	; (8c74 <init_mem_slab_module+0x20>)
	int rc = 0;
    8c5a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8c5c:	42ac      	cmp	r4, r5
    8c5e:	d300      	bcc.n	8c62 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    8c60:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    8c62:	4620      	mov	r0, r4
    8c64:	f002 fd4b 	bl	b6fe <create_free_list>
		if (rc < 0) {
    8c68:	2800      	cmp	r0, #0
    8c6a:	dbf9      	blt.n	8c60 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8c6c:	341c      	adds	r4, #28
    8c6e:	e7f5      	b.n	8c5c <init_mem_slab_module+0x8>
    8c70:	20000188 	.word	0x20000188
    8c74:	200001a4 	.word	0x200001a4

00008c78 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8c7a:	460c      	mov	r4, r1
	__asm__ volatile(
    8c7c:	f04f 0520 	mov.w	r5, #32
    8c80:	f3ef 8111 	mrs	r1, BASEPRI
    8c84:	f385 8812 	msr	BASEPRI_MAX, r5
    8c88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8c8c:	6945      	ldr	r5, [r0, #20]
    8c8e:	b15d      	cbz	r5, 8ca8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    8c90:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    8c92:	682b      	ldr	r3, [r5, #0]
    8c94:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8c96:	6983      	ldr	r3, [r0, #24]
    8c98:	3301      	adds	r3, #1
    8c9a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8c9c:	2000      	movs	r0, #0
	__asm__ volatile(
    8c9e:	f381 8811 	msr	BASEPRI, r1
    8ca2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    8ca6:	e011      	b.n	8ccc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8ca8:	ea52 0603 	orrs.w	r6, r2, r3
    8cac:	d103      	bne.n	8cb6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    8cae:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    8cb0:	f06f 000b 	mvn.w	r0, #11
    8cb4:	e7f3      	b.n	8c9e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8cb6:	e9cd 2300 	strd	r2, r3, [sp]
    8cba:	4602      	mov	r2, r0
    8cbc:	3008      	adds	r0, #8
    8cbe:	f000 fca1 	bl	9604 <z_pend_curr>
		if (result == 0) {
    8cc2:	b918      	cbnz	r0, 8ccc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8cc4:	4b02      	ldr	r3, [pc, #8]	; (8cd0 <k_mem_slab_alloc+0x58>)
    8cc6:	689b      	ldr	r3, [r3, #8]
    8cc8:	695b      	ldr	r3, [r3, #20]
    8cca:	6023      	str	r3, [r4, #0]
}
    8ccc:	b002      	add	sp, #8
    8cce:	bd70      	pop	{r4, r5, r6, pc}
    8cd0:	20001d5c 	.word	0x20001d5c

00008cd4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    8cd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8cd8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8cda:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8cdc:	2604      	movs	r6, #4
    8cde:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    8ce0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8ce2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8ce4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    8ce8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8cea:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    8cec:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    8cf2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8cf4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8cf8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    8cfa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    8cfe:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    8d02:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    8d04:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    8d06:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8d08:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8d0c:	9202      	str	r2, [sp, #8]
    8d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8d10:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    8d12:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d16:	9200      	str	r2, [sp, #0]
    8d18:	4642      	mov	r2, r8
{
    8d1a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8d1c:	f7fa ff34 	bl	3b88 <arch_new_thread>
	if (!_current) {
    8d20:	4b04      	ldr	r3, [pc, #16]	; (8d34 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    8d22:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8d24:	689b      	ldr	r3, [r3, #8]
    8d26:	b103      	cbz	r3, 8d2a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    8d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    8d2a:	6723      	str	r3, [r4, #112]	; 0x70
}
    8d2c:	4640      	mov	r0, r8
    8d2e:	b004      	add	sp, #16
    8d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d34:	20001d5c 	.word	0x20001d5c

00008d38 <z_impl_k_thread_create>:
{
    8d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d3a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8d3c:	2500      	movs	r5, #0
    8d3e:	9505      	str	r5, [sp, #20]
    8d40:	9d10      	ldr	r5, [sp, #64]	; 0x40
    8d42:	9504      	str	r5, [sp, #16]
    8d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8d46:	9503      	str	r5, [sp, #12]
    8d48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8d4a:	9502      	str	r5, [sp, #8]
{
    8d4c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8d50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8d52:	9501      	str	r5, [sp, #4]
    8d54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8d56:	9500      	str	r5, [sp, #0]
{
    8d58:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8d5a:	f7ff ffbb 	bl	8cd4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8d5e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    8d62:	bf08      	it	eq
    8d64:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    8d68:	d005      	beq.n	8d76 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8d6a:	ea56 0307 	orrs.w	r3, r6, r7
    8d6e:	d105      	bne.n	8d7c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8d70:	4620      	mov	r0, r4
    8d72:	f000 fcbd 	bl	96f0 <z_sched_start>
}
    8d76:	4620      	mov	r0, r4
    8d78:	b007      	add	sp, #28
    8d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8d7c:	4903      	ldr	r1, [pc, #12]	; (8d8c <z_impl_k_thread_create+0x54>)
    8d7e:	463a      	mov	r2, r7
    8d80:	4633      	mov	r3, r6
    8d82:	f104 0018 	add.w	r0, r4, #24
    8d86:	f000 fec9 	bl	9b1c <z_add_timeout>
    8d8a:	e7f4      	b.n	8d76 <z_impl_k_thread_create+0x3e>
    8d8c:	0000ba65 	.word	0x0000ba65

00008d90 <z_init_static_threads>:
{
    8d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d94:	4c29      	ldr	r4, [pc, #164]	; (8e3c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    8d96:	4d2a      	ldr	r5, [pc, #168]	; (8e40 <z_init_static_threads+0xb0>)
{
    8d98:	b087      	sub	sp, #28
    8d9a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    8d9c:	42ae      	cmp	r6, r5
    8d9e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    8da2:	d30f      	bcc.n	8dc4 <z_init_static_threads+0x34>
	k_sched_lock();
    8da4:	f000 fcf4 	bl	9790 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8da8:	4c24      	ldr	r4, [pc, #144]	; (8e3c <z_init_static_threads+0xac>)
    8daa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8e44 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    8dae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    8db2:	f240 37e7 	movw	r7, #999	; 0x3e7
    8db6:	42ac      	cmp	r4, r5
    8db8:	d320      	bcc.n	8dfc <z_init_static_threads+0x6c>
}
    8dba:	b007      	add	sp, #28
    8dbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8dc0:	f000 bcfa 	b.w	97b8 <k_sched_unlock>
		z_setup_new_thread(
    8dc4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8dc8:	9305      	str	r3, [sp, #20]
    8dca:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    8dce:	9304      	str	r3, [sp, #16]
    8dd0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8dd4:	9303      	str	r3, [sp, #12]
    8dd6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8dda:	9302      	str	r3, [sp, #8]
    8ddc:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8de0:	9301      	str	r3, [sp, #4]
    8de2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8de6:	9300      	str	r3, [sp, #0]
    8de8:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    8dec:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    8df0:	f7ff ff70 	bl	8cd4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8df4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    8df8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    8dfa:	e7ce      	b.n	8d9a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8dfe:	1c5a      	adds	r2, r3, #1
    8e00:	d00d      	beq.n	8e1e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    8e02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8e06:	2100      	movs	r1, #0
    8e08:	4638      	mov	r0, r7
    8e0a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8e0e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    8e12:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8e16:	d104      	bne.n	8e22 <z_init_static_threads+0x92>
	z_sched_start(thread);
    8e18:	4640      	mov	r0, r8
    8e1a:	f000 fc69 	bl	96f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8e1e:	342c      	adds	r4, #44	; 0x2c
    8e20:	e7c9      	b.n	8db6 <z_init_static_threads+0x26>
    8e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e26:	2300      	movs	r3, #0
    8e28:	f7f8 f96a 	bl	1100 <__aeabi_uldivmod>
    8e2c:	4602      	mov	r2, r0
    8e2e:	460b      	mov	r3, r1
    8e30:	f108 0018 	add.w	r0, r8, #24
    8e34:	4649      	mov	r1, r9
    8e36:	f000 fe71 	bl	9b1c <z_add_timeout>
    8e3a:	e7f0      	b.n	8e1e <z_init_static_threads+0x8e>
    8e3c:	0000c040 	.word	0x0000c040
    8e40:	0000c040 	.word	0x0000c040
    8e44:	0000ba65 	.word	0x0000ba65

00008e48 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8e48:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    8e4a:	4c0b      	ldr	r4, [pc, #44]	; (8e78 <idle+0x30>)
	return !z_sys_post_kernel;
    8e4c:	4d0b      	ldr	r5, [pc, #44]	; (8e7c <idle+0x34>)
	__asm__ volatile(
    8e4e:	f04f 0220 	mov.w	r2, #32
    8e52:	f3ef 8311 	mrs	r3, BASEPRI
    8e56:	f382 8812 	msr	BASEPRI_MAX, r2
    8e5a:	f3bf 8f6f 	isb	sy
    8e5e:	f002 feaf 	bl	bbc0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8e62:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    8e64:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8e66:	b913      	cbnz	r3, 8e6e <idle+0x26>
	arch_cpu_idle();
    8e68:	f7fa fd52 	bl	3910 <arch_cpu_idle>
}
    8e6c:	e7ef      	b.n	8e4e <idle+0x6>
    8e6e:	f7f9 fc4f 	bl	2710 <pm_system_suspend>
    8e72:	2800      	cmp	r0, #0
    8e74:	d1eb      	bne.n	8e4e <idle+0x6>
    8e76:	e7f7      	b.n	8e68 <idle+0x20>
    8e78:	20001d5c 	.word	0x20001d5c
    8e7c:	20001f9e 	.word	0x20001f9e

00008e80 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8e80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8e84:	4604      	mov	r4, r0
    8e86:	4617      	mov	r7, r2
    8e88:	461e      	mov	r6, r3
    8e8a:	f04f 0320 	mov.w	r3, #32
    8e8e:	f3ef 8811 	mrs	r8, BASEPRI
    8e92:	f383 8812 	msr	BASEPRI_MAX, r3
    8e96:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8e9a:	68c3      	ldr	r3, [r0, #12]
    8e9c:	4a33      	ldr	r2, [pc, #204]	; (8f6c <z_impl_k_mutex_lock+0xec>)
    8e9e:	b17b      	cbz	r3, 8ec0 <z_impl_k_mutex_lock+0x40>
    8ea0:	6880      	ldr	r0, [r0, #8]
    8ea2:	6891      	ldr	r1, [r2, #8]
    8ea4:	4288      	cmp	r0, r1
    8ea6:	d019      	beq.n	8edc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8ea8:	ea57 0306 	orrs.w	r3, r7, r6
    8eac:	d118      	bne.n	8ee0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    8eae:	f388 8811 	msr	BASEPRI, r8
    8eb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8eb6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8eba:	b002      	add	sp, #8
    8ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8ec0:	6891      	ldr	r1, [r2, #8]
    8ec2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8ec6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8ec8:	3301      	adds	r3, #1
    8eca:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8ecc:	6893      	ldr	r3, [r2, #8]
    8ece:	60a3      	str	r3, [r4, #8]
    8ed0:	f388 8811 	msr	BASEPRI, r8
    8ed4:	f3bf 8f6f 	isb	sy
		return 0;
    8ed8:	2000      	movs	r0, #0
    8eda:	e7ee      	b.n	8eba <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    8edc:	6921      	ldr	r1, [r4, #16]
    8ede:	e7f2      	b.n	8ec6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8ee0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8ee4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    8ee8:	4299      	cmp	r1, r3
    8eea:	bfa8      	it	ge
    8eec:	4619      	movge	r1, r3
    8eee:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    8ef2:	4291      	cmp	r1, r2
    8ef4:	bfb8      	it	lt
    8ef6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8ef8:	428b      	cmp	r3, r1
    8efa:	dd2e      	ble.n	8f5a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    8efc:	f002 fc60 	bl	b7c0 <adjust_owner_prio.isra.0>
    8f00:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8f02:	e9cd 7600 	strd	r7, r6, [sp]
    8f06:	481a      	ldr	r0, [pc, #104]	; (8f70 <z_impl_k_mutex_lock+0xf0>)
    8f08:	4622      	mov	r2, r4
    8f0a:	4641      	mov	r1, r8
    8f0c:	f000 fb7a 	bl	9604 <z_pend_curr>
	if (got_mutex == 0) {
    8f10:	2800      	cmp	r0, #0
    8f12:	d0e1      	beq.n	8ed8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    8f14:	f04f 0320 	mov.w	r3, #32
    8f18:	f3ef 8611 	mrs	r6, BASEPRI
    8f1c:	f383 8812 	msr	BASEPRI_MAX, r3
    8f20:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    8f24:	68a0      	ldr	r0, [r4, #8]
    8f26:	b1d0      	cbz	r0, 8f5e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8f28:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8f2a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f2c:	429c      	cmp	r4, r3
    8f2e:	d00a      	beq.n	8f46 <z_impl_k_mutex_lock+0xc6>
    8f30:	b14b      	cbz	r3, 8f46 <z_impl_k_mutex_lock+0xc6>
    8f32:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8f36:	4299      	cmp	r1, r3
    8f38:	bfa8      	it	ge
    8f3a:	4619      	movge	r1, r3
    8f3c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8f40:	4299      	cmp	r1, r3
    8f42:	bfb8      	it	lt
    8f44:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    8f46:	f002 fc3b 	bl	b7c0 <adjust_owner_prio.isra.0>
    8f4a:	b140      	cbz	r0, 8f5e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8f4c:	4808      	ldr	r0, [pc, #32]	; (8f70 <z_impl_k_mutex_lock+0xf0>)
    8f4e:	4631      	mov	r1, r6
    8f50:	f000 fbbc 	bl	96cc <z_reschedule>
	return -EAGAIN;
    8f54:	f06f 000a 	mvn.w	r0, #10
    8f58:	e7af      	b.n	8eba <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    8f5a:	2500      	movs	r5, #0
    8f5c:	e7d1      	b.n	8f02 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    8f5e:	2d00      	cmp	r5, #0
    8f60:	d1f4      	bne.n	8f4c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    8f62:	f386 8811 	msr	BASEPRI, r6
    8f66:	f3bf 8f6f 	isb	sy
    8f6a:	e7f3      	b.n	8f54 <z_impl_k_mutex_lock+0xd4>
    8f6c:	20001d5c 	.word	0x20001d5c
    8f70:	20001f9f 	.word	0x20001f9f

00008f74 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8f74:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8f76:	6883      	ldr	r3, [r0, #8]
{
    8f78:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    8f7a:	b36b      	cbz	r3, 8fd8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8f7c:	4a19      	ldr	r2, [pc, #100]	; (8fe4 <z_impl_k_mutex_unlock+0x70>)
    8f7e:	6892      	ldr	r2, [r2, #8]
    8f80:	4293      	cmp	r3, r2
    8f82:	d12c      	bne.n	8fde <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8f84:	68c3      	ldr	r3, [r0, #12]
    8f86:	2b01      	cmp	r3, #1
    8f88:	d903      	bls.n	8f92 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    8f8a:	3b01      	subs	r3, #1
    8f8c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    8f8e:	2000      	movs	r0, #0
}
    8f90:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8f92:	f04f 0320 	mov.w	r3, #32
    8f96:	f3ef 8511 	mrs	r5, BASEPRI
    8f9a:	f383 8812 	msr	BASEPRI_MAX, r3
    8f9e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8fa2:	6901      	ldr	r1, [r0, #16]
    8fa4:	6880      	ldr	r0, [r0, #8]
    8fa6:	f002 fc0b 	bl	b7c0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8faa:	4620      	mov	r0, r4
    8fac:	f002 fd75 	bl	ba9a <z_unpend_first_thread>
	mutex->owner = new_owner;
    8fb0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8fb2:	b158      	cbz	r0, 8fcc <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    8fb4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8fb8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8fba:	2200      	movs	r2, #0
    8fbc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    8fbe:	f002 fd0d 	bl	b9dc <z_ready_thread>
		z_reschedule(&lock, key);
    8fc2:	4809      	ldr	r0, [pc, #36]	; (8fe8 <z_impl_k_mutex_unlock+0x74>)
    8fc4:	4629      	mov	r1, r5
    8fc6:	f000 fb81 	bl	96cc <z_reschedule>
    8fca:	e7e0      	b.n	8f8e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    8fcc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8fce:	f385 8811 	msr	BASEPRI, r5
    8fd2:	f3bf 8f6f 	isb	sy
    8fd6:	e7da      	b.n	8f8e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    8fd8:	f06f 0015 	mvn.w	r0, #21
    8fdc:	e7d8      	b.n	8f90 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    8fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8fe2:	e7d5      	b.n	8f90 <z_impl_k_mutex_unlock+0x1c>
    8fe4:	20001d5c 	.word	0x20001d5c
    8fe8:	20001f9f 	.word	0x20001f9f

00008fec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8fee:	4611      	mov	r1, r2
	__asm__ volatile(
    8ff0:	f04f 0220 	mov.w	r2, #32
    8ff4:	f3ef 8511 	mrs	r5, BASEPRI
    8ff8:	f382 8812 	msr	BASEPRI_MAX, r2
    8ffc:	f3bf 8f6f 	isb	sy
    9000:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    9002:	b19c      	cbz	r4, 902c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9004:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9006:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9008:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    900c:	4294      	cmp	r4, r2
	list->head = node;
    900e:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9010:	bf08      	it	eq
    9012:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9014:	2101      	movs	r1, #1
    9016:	4620      	mov	r0, r4
    9018:	f002 fc43 	bl	b8a2 <z_queue_node_peek>
    901c:	4604      	mov	r4, r0
	__asm__ volatile(
    901e:	f385 8811 	msr	BASEPRI, r5
    9022:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    9026:	4620      	mov	r0, r4
    9028:	b003      	add	sp, #12
    902a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    902c:	ea51 0203 	orrs.w	r2, r1, r3
    9030:	d0f5      	beq.n	901e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9032:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    9036:	e9cd 1300 	strd	r1, r3, [sp]
    903a:	4610      	mov	r0, r2
    903c:	4629      	mov	r1, r5
    903e:	f000 fae1 	bl	9604 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    9042:	2800      	cmp	r0, #0
    9044:	d1ef      	bne.n	9026 <z_impl_k_queue_get+0x3a>
    9046:	4b02      	ldr	r3, [pc, #8]	; (9050 <z_impl_k_queue_get+0x64>)
    9048:	689b      	ldr	r3, [r3, #8]
    904a:	695c      	ldr	r4, [r3, #20]
    904c:	e7eb      	b.n	9026 <z_impl_k_queue_get+0x3a>
    904e:	bf00      	nop
    9050:	20001d5c 	.word	0x20001d5c

00009054 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9054:	b538      	push	{r3, r4, r5, lr}
    9056:	4604      	mov	r4, r0
	__asm__ volatile(
    9058:	f04f 0320 	mov.w	r3, #32
    905c:	f3ef 8511 	mrs	r5, BASEPRI
    9060:	f383 8812 	msr	BASEPRI_MAX, r3
    9064:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9068:	f002 fd17 	bl	ba9a <z_unpend_first_thread>

	if (thread != NULL) {
    906c:	b148      	cbz	r0, 9082 <z_impl_k_sem_give+0x2e>
    906e:	2200      	movs	r2, #0
    9070:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    9072:	f002 fcb3 	bl	b9dc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    9076:	4629      	mov	r1, r5
    9078:	4805      	ldr	r0, [pc, #20]	; (9090 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    907a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    907e:	f000 bb25 	b.w	96cc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9082:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    9086:	429a      	cmp	r2, r3
    9088:	bf18      	it	ne
    908a:	3301      	addne	r3, #1
    908c:	60a3      	str	r3, [r4, #8]
}
    908e:	e7f2      	b.n	9076 <z_impl_k_sem_give+0x22>
    9090:	20001f9f 	.word	0x20001f9f

00009094 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    9094:	b513      	push	{r0, r1, r4, lr}
    9096:	f04f 0420 	mov.w	r4, #32
    909a:	f3ef 8111 	mrs	r1, BASEPRI
    909e:	f384 8812 	msr	BASEPRI_MAX, r4
    90a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    90a6:	6884      	ldr	r4, [r0, #8]
    90a8:	b144      	cbz	r4, 90bc <z_impl_k_sem_take+0x28>
		sem->count--;
    90aa:	3c01      	subs	r4, #1
    90ac:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    90ae:	f381 8811 	msr	BASEPRI, r1
    90b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    90b6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    90b8:	b002      	add	sp, #8
    90ba:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    90bc:	ea52 0403 	orrs.w	r4, r2, r3
    90c0:	d106      	bne.n	90d0 <z_impl_k_sem_take+0x3c>
    90c2:	f381 8811 	msr	BASEPRI, r1
    90c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    90ca:	f06f 000f 	mvn.w	r0, #15
    90ce:	e7f3      	b.n	90b8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    90d0:	e9cd 2300 	strd	r2, r3, [sp]
    90d4:	4602      	mov	r2, r0
    90d6:	4802      	ldr	r0, [pc, #8]	; (90e0 <z_impl_k_sem_take+0x4c>)
    90d8:	f000 fa94 	bl	9604 <z_pend_curr>
	return ret;
    90dc:	e7ec      	b.n	90b8 <z_impl_k_sem_take+0x24>
    90de:	bf00      	nop
    90e0:	20001f9f 	.word	0x20001f9f

000090e4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    90e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    90e6:	4b09      	ldr	r3, [pc, #36]	; (910c <k_sys_work_q_init+0x28>)
    90e8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    90ea:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    90ec:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    90ee:	9300      	str	r3, [sp, #0]
    90f0:	4907      	ldr	r1, [pc, #28]	; (9110 <k_sys_work_q_init+0x2c>)
    90f2:	4808      	ldr	r0, [pc, #32]	; (9114 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    90f4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    90f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9100:	f000 f906 	bl	9310 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9104:	4620      	mov	r0, r4
    9106:	b004      	add	sp, #16
    9108:	bd10      	pop	{r4, pc}
    910a:	bf00      	nop
    910c:	0000d3f3 	.word	0x0000d3f3
    9110:	20003540 	.word	0x20003540
    9114:	20000950 	.word	0x20000950

00009118 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    911c:	4e4a      	ldr	r6, [pc, #296]	; (9248 <work_queue_main+0x130>)
    911e:	b085      	sub	sp, #20
    9120:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9122:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9126:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    912a:	f04f 0320 	mov.w	r3, #32
    912e:	f3ef 8711 	mrs	r7, BASEPRI
    9132:	f383 8812 	msr	BASEPRI_MAX, r3
    9136:	f3bf 8f6f 	isb	sy
    913a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    913e:	b98d      	cbnz	r5, 9164 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    9140:	2102      	movs	r1, #2
    9142:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9146:	f002 fbcf 	bl	b8e8 <flag_test_and_clear>
    914a:	2800      	cmp	r0, #0
    914c:	d143      	bne.n	91d6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    914e:	2300      	movs	r3, #0
    9150:	e9cd 8900 	strd	r8, r9, [sp]
    9154:	9302      	str	r3, [sp, #8]
    9156:	f104 0288 	add.w	r2, r4, #136	; 0x88
    915a:	4639      	mov	r1, r7
    915c:	483b      	ldr	r0, [pc, #236]	; (924c <work_queue_main+0x134>)
    915e:	f000 fc6b 	bl	9a38 <z_sched_wait>
			continue;
    9162:	e7e2      	b.n	912a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9164:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    9168:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    916a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    916e:	4295      	cmp	r5, r2
	list->tail = node;
    9170:	bf08      	it	eq
    9172:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    9176:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    917a:	f043 0302 	orr.w	r3, r3, #2
    917e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    9182:	68eb      	ldr	r3, [r5, #12]
    9184:	f023 0304 	bic.w	r3, r3, #4
    9188:	f043 0301 	orr.w	r3, r3, #1
    918c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    918e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    9190:	f387 8811 	msr	BASEPRI, r7
    9194:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9198:	4628      	mov	r0, r5
    919a:	4798      	blx	r3
	__asm__ volatile(
    919c:	f04f 0320 	mov.w	r3, #32
    91a0:	f3ef 8b11 	mrs	fp, BASEPRI
    91a4:	f383 8812 	msr	BASEPRI_MAX, r3
    91a8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    91ac:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    91ae:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    91b0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    91b4:	d419      	bmi.n	91ea <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    91b6:	60ea      	str	r2, [r5, #12]
    91b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    91bc:	f023 0302 	bic.w	r3, r3, #2
    91c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    91c4:	f38b 8811 	msr	BASEPRI, fp
    91c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    91cc:	05db      	lsls	r3, r3, #23
    91ce:	d4ac      	bmi.n	912a <work_queue_main+0x12>
	z_impl_k_yield();
    91d0:	f000 fb16 	bl	9800 <z_impl_k_yield>
}
    91d4:	e7a9      	b.n	912a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    91d6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    91da:	2200      	movs	r2, #0
    91dc:	2101      	movs	r1, #1
    91de:	4628      	mov	r0, r5
    91e0:	f002 fcb5 	bl	bb4e <z_sched_wake>
    91e4:	2800      	cmp	r0, #0
    91e6:	d1f8      	bne.n	91da <work_queue_main+0xc2>
    91e8:	e7b1      	b.n	914e <work_queue_main+0x36>
	return list->head;
    91ea:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    91ec:	f023 0303 	bic.w	r3, r3, #3
    91f0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    91f2:	2800      	cmp	r0, #0
    91f4:	d0e0      	beq.n	91b8 <work_queue_main+0xa0>
	return node->next;
    91f6:	2700      	movs	r7, #0
    91f8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    91fc:	463b      	mov	r3, r7
    91fe:	2800      	cmp	r0, #0
    9200:	d0da      	beq.n	91b8 <work_queue_main+0xa0>
		if (wc->work == work) {
    9202:	6842      	ldr	r2, [r0, #4]
    9204:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    9206:	4601      	mov	r1, r0
		if (wc->work == work) {
    9208:	d10c      	bne.n	9224 <work_queue_main+0x10c>
	return node->next;
    920a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    920c:	b99f      	cbnz	r7, 9236 <work_queue_main+0x11e>
    920e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9210:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    9212:	4282      	cmp	r2, r0
    9214:	d100      	bne.n	9218 <work_queue_main+0x100>
	list->tail = node;
    9216:	6071      	str	r1, [r6, #4]
	parent->next = child;
    9218:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    921c:	f7ff ff1a 	bl	9054 <z_impl_k_sem_give>
}
    9220:	4639      	mov	r1, r7
    9222:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9224:	f1ba 0f00 	cmp.w	sl, #0
    9228:	d00b      	beq.n	9242 <work_queue_main+0x12a>
	return node->next;
    922a:	f8da 2000 	ldr.w	r2, [sl]
    922e:	4650      	mov	r0, sl
    9230:	460f      	mov	r7, r1
    9232:	4692      	mov	sl, r2
    9234:	e7e3      	b.n	91fe <work_queue_main+0xe6>
	parent->next = child;
    9236:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    9238:	6872      	ldr	r2, [r6, #4]
    923a:	4282      	cmp	r2, r0
	list->tail = node;
    923c:	bf08      	it	eq
    923e:	6077      	streq	r7, [r6, #4]
}
    9240:	e7ea      	b.n	9218 <work_queue_main+0x100>
    9242:	4652      	mov	r2, sl
    9244:	e7f3      	b.n	922e <work_queue_main+0x116>
    9246:	bf00      	nop
    9248:	20001d80 	.word	0x20001d80
    924c:	20001f9f 	.word	0x20001f9f

00009250 <submit_to_queue_locked>:
{
    9250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    9252:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9254:	079a      	lsls	r2, r3, #30
{
    9256:	4604      	mov	r4, r0
    9258:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    925a:	f3c3 0640 	ubfx	r6, r3, #1, #1
    925e:	d42c      	bmi.n	92ba <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    9260:	075b      	lsls	r3, r3, #29
    9262:	d41a      	bmi.n	929a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    9264:	680b      	ldr	r3, [r1, #0]
    9266:	b90b      	cbnz	r3, 926c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    9268:	6883      	ldr	r3, [r0, #8]
    926a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    926c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    926e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    9270:	bf44      	itt	mi
    9272:	68a3      	ldrmi	r3, [r4, #8]
    9274:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    9276:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    9278:	bf4c      	ite	mi
    927a:	2602      	movmi	r6, #2
		ret = 1;
    927c:	2601      	movpl	r6, #1
	if (queue == NULL) {
    927e:	2d00      	cmp	r5, #0
    9280:	d03a      	beq.n	92f8 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    9282:	4b1f      	ldr	r3, [pc, #124]	; (9300 <submit_to_queue_locked+0xb0>)
    9284:	689b      	ldr	r3, [r3, #8]
    9286:	42ab      	cmp	r3, r5
    9288:	d00a      	beq.n	92a0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    928a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    928e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    9290:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    9294:	d414      	bmi.n	92c0 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    9296:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    929a:	2300      	movs	r3, #0
    929c:	603b      	str	r3, [r7, #0]
	return ret;
    929e:	e025      	b.n	92ec <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    92a0:	f002 fa7a 	bl	b798 <k_is_in_isr>
    92a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    92a8:	2800      	cmp	r0, #0
    92aa:	d1f0      	bne.n	928e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    92ac:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    92ae:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    92b2:	d5f0      	bpl.n	9296 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    92b4:	b152      	cbz	r2, 92cc <submit_to_queue_locked+0x7c>
    92b6:	075b      	lsls	r3, r3, #29
    92b8:	d408      	bmi.n	92cc <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    92ba:	f06f 060f 	mvn.w	r6, #15
    92be:	e7ec      	b.n	929a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    92c0:	2a00      	cmp	r2, #0
    92c2:	d1fa      	bne.n	92ba <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    92c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    92c8:	2b00      	cmp	r3, #0
    92ca:	d1f6      	bne.n	92ba <submit_to_queue_locked+0x6a>
	parent->next = child;
    92cc:	2300      	movs	r3, #0
    92ce:	6023      	str	r3, [r4, #0]
	return list->tail;
    92d0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    92d4:	b963      	cbnz	r3, 92f0 <submit_to_queue_locked+0xa0>
	list->head = node;
    92d6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    92da:	4628      	mov	r0, r5
    92dc:	f002 fb0f 	bl	b8fe <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    92e0:	68e3      	ldr	r3, [r4, #12]
    92e2:	f043 0304 	orr.w	r3, r3, #4
    92e6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    92e8:	683b      	ldr	r3, [r7, #0]
    92ea:	60a3      	str	r3, [r4, #8]
}
    92ec:	4630      	mov	r0, r6
    92ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    92f0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    92f2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    92f6:	e7f0      	b.n	92da <submit_to_queue_locked+0x8a>
		return -EINVAL;
    92f8:	f06f 0615 	mvn.w	r6, #21
    92fc:	e7cd      	b.n	929a <submit_to_queue_locked+0x4a>
    92fe:	bf00      	nop
    9300:	20001d5c 	.word	0x20001d5c

00009304 <k_work_submit>:
{
    9304:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    9306:	4801      	ldr	r0, [pc, #4]	; (930c <k_work_submit+0x8>)
    9308:	f002 bb1d 	b.w	b946 <k_work_submit_to_queue>
    930c:	20000950 	.word	0x20000950

00009310 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    9310:	b5f0      	push	{r4, r5, r6, r7, lr}
    9312:	b089      	sub	sp, #36	; 0x24
    9314:	4604      	mov	r4, r0
	list->head = NULL;
    9316:	2000      	movs	r0, #0
	list->tail = NULL;
    9318:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    931c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    931e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    9322:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    9326:	f104 0090 	add.w	r0, r4, #144	; 0x90
    932a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    932e:	b31d      	cbz	r5, 9378 <k_work_queue_start+0x68>
    9330:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    9332:	2800      	cmp	r0, #0
    9334:	f240 1001 	movw	r0, #257	; 0x101
    9338:	bf08      	it	eq
    933a:	2001      	moveq	r0, #1
	*flagp = flags;
    933c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9340:	2000      	movs	r0, #0
    9342:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9346:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    934a:	e9cd 3003 	strd	r3, r0, [sp, #12]
    934e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    9352:	e9cd 6706 	strd	r6, r7, [sp, #24]
    9356:	4b09      	ldr	r3, [pc, #36]	; (937c <k_work_queue_start+0x6c>)
    9358:	9400      	str	r4, [sp, #0]
    935a:	4620      	mov	r0, r4
    935c:	f7ff fcec 	bl	8d38 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    9360:	b125      	cbz	r5, 936c <k_work_queue_start+0x5c>
    9362:	6829      	ldr	r1, [r5, #0]
    9364:	b111      	cbz	r1, 936c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    9366:	4620      	mov	r0, r4
    9368:	f002 fa1c 	bl	b7a4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    936c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    936e:	b009      	add	sp, #36	; 0x24
    9370:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9374:	f002 ba1b 	b.w	b7ae <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    9378:	2001      	movs	r0, #1
    937a:	e7df      	b.n	933c <k_work_queue_start+0x2c>
    937c:	00009119 	.word	0x00009119

00009380 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    9380:	89c3      	ldrh	r3, [r0, #14]
    9382:	2b7f      	cmp	r3, #127	; 0x7f
    9384:	d812      	bhi.n	93ac <sliceable+0x2c>
	int ret = slice_ticks;
    9386:	4b0a      	ldr	r3, [pc, #40]	; (93b0 <sliceable+0x30>)
    9388:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    938a:	b163      	cbz	r3, 93a6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    938c:	4b09      	ldr	r3, [pc, #36]	; (93b4 <sliceable+0x34>)
    938e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9392:	681b      	ldr	r3, [r3, #0]
    9394:	429a      	cmp	r2, r3
    9396:	db09      	blt.n	93ac <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    9398:	7b43      	ldrb	r3, [r0, #13]
    939a:	06db      	lsls	r3, r3, #27
    939c:	d106      	bne.n	93ac <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    939e:	4b06      	ldr	r3, [pc, #24]	; (93b8 <sliceable+0x38>)
    93a0:	1ac3      	subs	r3, r0, r3
    93a2:	bf18      	it	ne
    93a4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    93a6:	f003 0001 	and.w	r0, r3, #1
    93aa:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    93ac:	2300      	movs	r3, #0
    93ae:	e7fa      	b.n	93a6 <sliceable+0x26>
    93b0:	20001d90 	.word	0x20001d90
    93b4:	20001d8c 	.word	0x20001d8c
    93b8:	20000850 	.word	0x20000850

000093bc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    93bc:	4b04      	ldr	r3, [pc, #16]	; (93d0 <slice_timeout+0x14>)
    93be:	1ac0      	subs	r0, r0, r3
    93c0:	4b04      	ldr	r3, [pc, #16]	; (93d4 <slice_timeout+0x18>)
    93c2:	10c0      	asrs	r0, r0, #3
    93c4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    93c6:	4b04      	ldr	r3, [pc, #16]	; (93d8 <slice_timeout+0x1c>)
    93c8:	2201      	movs	r2, #1
    93ca:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    93cc:	4770      	bx	lr
    93ce:	bf00      	nop
    93d0:	200009f0 	.word	0x200009f0
    93d4:	aaaaaaab 	.word	0xaaaaaaab
    93d8:	20001f9f 	.word	0x20001f9f

000093dc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    93dc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    93de:	4b0e      	ldr	r3, [pc, #56]	; (9418 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    93e0:	4c0e      	ldr	r4, [pc, #56]	; (941c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    93e2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    93e4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    93e8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    93ec:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    93ee:	4620      	mov	r0, r4
    93f0:	f002 fbd0 	bl	bb94 <z_abort_timeout>
	slice_expired[cpu] = false;
    93f4:	4b0a      	ldr	r3, [pc, #40]	; (9420 <z_reset_time_slice+0x44>)
    93f6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    93f8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    93fa:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    93fc:	f7ff ffc0 	bl	9380 <sliceable>
    9400:	b148      	cbz	r0, 9416 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    9402:	4b08      	ldr	r3, [pc, #32]	; (9424 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    9404:	4908      	ldr	r1, [pc, #32]	; (9428 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    9406:	681a      	ldr	r2, [r3, #0]
    9408:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    940a:	4620      	mov	r0, r4
    940c:	17d3      	asrs	r3, r2, #31
	}
}
    940e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    9412:	f000 bb83 	b.w	9b1c <z_add_timeout>
}
    9416:	bd70      	pop	{r4, r5, r6, pc}
    9418:	20001d5c 	.word	0x20001d5c
    941c:	200009f0 	.word	0x200009f0
    9420:	20001f9f 	.word	0x20001f9f
    9424:	20001d90 	.word	0x20001d90
    9428:	000093bd 	.word	0x000093bd

0000942c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    942c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    942e:	4d0d      	ldr	r5, [pc, #52]	; (9464 <update_cache+0x38>)
    9430:	462b      	mov	r3, r5
    9432:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9436:	429c      	cmp	r4, r3
    9438:	d000      	beq.n	943c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    943a:	b904      	cbnz	r4, 943e <update_cache+0x12>
    943c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    943e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    9440:	b938      	cbnz	r0, 9452 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    9442:	7b5a      	ldrb	r2, [r3, #13]
    9444:	06d2      	lsls	r2, r2, #27
    9446:	d104      	bne.n	9452 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9448:	69a2      	ldr	r2, [r4, #24]
    944a:	b912      	cbnz	r2, 9452 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    944c:	89da      	ldrh	r2, [r3, #14]
    944e:	2a7f      	cmp	r2, #127	; 0x7f
    9450:	d805      	bhi.n	945e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    9452:	429c      	cmp	r4, r3
    9454:	d002      	beq.n	945c <update_cache+0x30>
			z_reset_time_slice(thread);
    9456:	4620      	mov	r0, r4
    9458:	f7ff ffc0 	bl	93dc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    945c:	4623      	mov	r3, r4
    945e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    9460:	bd38      	pop	{r3, r4, r5, pc}
    9462:	bf00      	nop
    9464:	20001d5c 	.word	0x20001d5c

00009468 <move_thread_to_end_of_prio_q>:
{
    9468:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    946a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    946e:	7b43      	ldrb	r3, [r0, #13]
    9470:	2a00      	cmp	r2, #0
{
    9472:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9474:	da04      	bge.n	9480 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    947a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    947c:	f002 fa74 	bl	b968 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    9480:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    9482:	4a15      	ldr	r2, [pc, #84]	; (94d8 <move_thread_to_end_of_prio_q+0x70>)
    9484:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9488:	4610      	mov	r0, r2
    948a:	734b      	strb	r3, [r1, #13]
    948c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9490:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9492:	4283      	cmp	r3, r0
    9494:	bf08      	it	eq
    9496:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9498:	b923      	cbnz	r3, 94a4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    949a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    949e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    94a0:	6211      	str	r1, [r2, #32]
}
    94a2:	e00c      	b.n	94be <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    94a4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    94a8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    94ac:	42b5      	cmp	r5, r6
    94ae:	d00e      	beq.n	94ce <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    94b0:	42ae      	cmp	r6, r5
    94b2:	dd0c      	ble.n	94ce <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    94b4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    94b6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    94ba:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    94bc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    94be:	6890      	ldr	r0, [r2, #8]
    94c0:	1a43      	subs	r3, r0, r1
    94c2:	4258      	negs	r0, r3
}
    94c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    94c8:	4158      	adcs	r0, r3
    94ca:	f7ff bfaf 	b.w	942c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    94ce:	429c      	cmp	r4, r3
    94d0:	d0e3      	beq.n	949a <move_thread_to_end_of_prio_q+0x32>
    94d2:	681b      	ldr	r3, [r3, #0]
    94d4:	e7e0      	b.n	9498 <move_thread_to_end_of_prio_q+0x30>
    94d6:	bf00      	nop
    94d8:	20001d5c 	.word	0x20001d5c

000094dc <ready_thread>:
{
    94dc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    94de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    94e2:	7b42      	ldrb	r2, [r0, #13]
    94e4:	2b00      	cmp	r3, #0
    94e6:	db29      	blt.n	953c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    94e8:	06d3      	lsls	r3, r2, #27
    94ea:	d127      	bne.n	953c <ready_thread+0x60>
	return node->next != NULL;
    94ec:	6983      	ldr	r3, [r0, #24]
    94ee:	bb2b      	cbnz	r3, 953c <ready_thread+0x60>
	return list->head == list;
    94f0:	4913      	ldr	r1, [pc, #76]	; (9540 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    94f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    94f6:	7342      	strb	r2, [r0, #13]
    94f8:	460a      	mov	r2, r1
    94fa:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    94fe:	4294      	cmp	r4, r2
    9500:	bf18      	it	ne
    9502:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    9504:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9506:	b923      	cbnz	r3, 9512 <ready_thread+0x36>
	node->prev = tail;
    9508:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    950c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    950e:	6208      	str	r0, [r1, #32]
}
    9510:	e00c      	b.n	952c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    9512:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    9516:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    951a:	42b5      	cmp	r5, r6
    951c:	d00a      	beq.n	9534 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    951e:	42ae      	cmp	r6, r5
    9520:	dd08      	ble.n	9534 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    9522:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9524:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    9528:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    952a:	6058      	str	r0, [r3, #4]
}
    952c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    952e:	2000      	movs	r0, #0
    9530:	f7ff bf7c 	b.w	942c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9534:	42a3      	cmp	r3, r4
    9536:	d0e7      	beq.n	9508 <ready_thread+0x2c>
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	e7e4      	b.n	9506 <ready_thread+0x2a>
}
    953c:	bc70      	pop	{r4, r5, r6}
    953e:	4770      	bx	lr
    9540:	20001d5c 	.word	0x20001d5c

00009544 <unready_thread>:
{
    9544:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    9546:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    954a:	7b43      	ldrb	r3, [r0, #13]
    954c:	2a00      	cmp	r2, #0
{
    954e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9550:	da04      	bge.n	955c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9556:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9558:	f002 fa06 	bl	b968 <sys_dlist_remove>
	update_cache(thread == _current);
    955c:	4b04      	ldr	r3, [pc, #16]	; (9570 <unready_thread+0x2c>)
    955e:	6898      	ldr	r0, [r3, #8]
    9560:	1a43      	subs	r3, r0, r1
    9562:	4258      	negs	r0, r3
    9564:	4158      	adcs	r0, r3
}
    9566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    956a:	f7ff bf5f 	b.w	942c <update_cache>
    956e:	bf00      	nop
    9570:	20001d5c 	.word	0x20001d5c

00009574 <pend_locked>:
{
    9574:	b570      	push	{r4, r5, r6, lr}
    9576:	4615      	mov	r5, r2
    9578:	461c      	mov	r4, r3
    957a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    957c:	f002 fa06 	bl	b98c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9580:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9584:	bf08      	it	eq
    9586:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    958a:	d008      	beq.n	959e <pend_locked+0x2a>
    958c:	462a      	mov	r2, r5
    958e:	4623      	mov	r3, r4
    9590:	f106 0018 	add.w	r0, r6, #24
    9594:	4902      	ldr	r1, [pc, #8]	; (95a0 <pend_locked+0x2c>)
}
    9596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    959a:	f000 babf 	b.w	9b1c <z_add_timeout>
    959e:	bd70      	pop	{r4, r5, r6, pc}
    95a0:	0000ba65 	.word	0x0000ba65

000095a4 <z_time_slice>:
{
    95a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    95a6:	f04f 0320 	mov.w	r3, #32
    95aa:	f3ef 8511 	mrs	r5, BASEPRI
    95ae:	f383 8812 	msr	BASEPRI_MAX, r3
    95b2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    95b6:	4b10      	ldr	r3, [pc, #64]	; (95f8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    95b8:	4a10      	ldr	r2, [pc, #64]	; (95fc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    95ba:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    95bc:	6810      	ldr	r0, [r2, #0]
    95be:	42a0      	cmp	r0, r4
    95c0:	d106      	bne.n	95d0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    95c2:	f7ff ff0b 	bl	93dc <z_reset_time_slice>
	__asm__ volatile(
    95c6:	f385 8811 	msr	BASEPRI, r5
    95ca:	f3bf 8f6f 	isb	sy
}
    95ce:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    95d0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    95d2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    95d4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    95d6:	4a0a      	ldr	r2, [pc, #40]	; (9600 <z_time_slice+0x5c>)
    95d8:	5cd3      	ldrb	r3, [r2, r3]
    95da:	2b00      	cmp	r3, #0
    95dc:	d0f3      	beq.n	95c6 <z_time_slice+0x22>
    95de:	4620      	mov	r0, r4
    95e0:	f7ff fece 	bl	9380 <sliceable>
    95e4:	2800      	cmp	r0, #0
    95e6:	d0ee      	beq.n	95c6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    95e8:	7b63      	ldrb	r3, [r4, #13]
    95ea:	06db      	lsls	r3, r3, #27
    95ec:	d102      	bne.n	95f4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    95ee:	4620      	mov	r0, r4
    95f0:	f7ff ff3a 	bl	9468 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    95f4:	4620      	mov	r0, r4
    95f6:	e7e4      	b.n	95c2 <z_time_slice+0x1e>
    95f8:	20001d5c 	.word	0x20001d5c
    95fc:	20001d88 	.word	0x20001d88
    9600:	20001f9f 	.word	0x20001f9f

00009604 <z_pend_curr>:
{
    9604:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    9606:	480c      	ldr	r0, [pc, #48]	; (9638 <z_pend_curr+0x34>)
    9608:	4d0c      	ldr	r5, [pc, #48]	; (963c <z_pend_curr+0x38>)
    960a:	6886      	ldr	r6, [r0, #8]
    960c:	602e      	str	r6, [r5, #0]
{
    960e:	460c      	mov	r4, r1
    9610:	4611      	mov	r1, r2
    9612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    9616:	f04f 0620 	mov.w	r6, #32
    961a:	f3ef 8511 	mrs	r5, BASEPRI
    961e:	f386 8812 	msr	BASEPRI_MAX, r6
    9622:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    9626:	6880      	ldr	r0, [r0, #8]
    9628:	f7ff ffa4 	bl	9574 <pend_locked>
	ret = arch_swap(key);
    962c:	4620      	mov	r0, r4
}
    962e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9632:	f7fa ba55 	b.w	3ae0 <arch_swap>
    9636:	bf00      	nop
    9638:	20001d5c 	.word	0x20001d5c
    963c:	20001d88 	.word	0x20001d88

00009640 <z_set_prio>:
{
    9640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9642:	4604      	mov	r4, r0
    9644:	f04f 0320 	mov.w	r3, #32
    9648:	f3ef 8611 	mrs	r6, BASEPRI
    964c:	f383 8812 	msr	BASEPRI_MAX, r3
    9650:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9654:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9656:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    9658:	b249      	sxtb	r1, r1
    965a:	d119      	bne.n	9690 <z_set_prio+0x50>
	return node->next != NULL;
    965c:	6985      	ldr	r5, [r0, #24]
    965e:	b9bd      	cbnz	r5, 9690 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9664:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9666:	f002 f97f 	bl	b968 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    966a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    966c:	4a16      	ldr	r2, [pc, #88]	; (96c8 <z_set_prio+0x88>)
				thread->base.prio = prio;
    966e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9670:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9674:	7343      	strb	r3, [r0, #13]
    9676:	4613      	mov	r3, r2
    9678:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    967c:	4298      	cmp	r0, r3
    967e:	bf18      	it	ne
    9680:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    9682:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9684:	b95d      	cbnz	r5, 969e <z_set_prio+0x5e>
	node->prev = tail;
    9686:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    968a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    968c:	6214      	str	r4, [r2, #32]
}
    968e:	e011      	b.n	96b4 <z_set_prio+0x74>
			thread->base.prio = prio;
    9690:	73a1      	strb	r1, [r4, #14]
    9692:	2000      	movs	r0, #0
	__asm__ volatile(
    9694:	f386 8811 	msr	BASEPRI, r6
    9698:	f3bf 8f6f 	isb	sy
}
    969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    969e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    96a2:	42b9      	cmp	r1, r7
    96a4:	d00b      	beq.n	96be <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    96a6:	428f      	cmp	r7, r1
    96a8:	dd09      	ble.n	96be <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    96aa:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    96ac:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    96b0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    96b2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    96b4:	2001      	movs	r0, #1
    96b6:	f7ff feb9 	bl	942c <update_cache>
    96ba:	2001      	movs	r0, #1
    96bc:	e7ea      	b.n	9694 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    96be:	42a8      	cmp	r0, r5
    96c0:	d0e1      	beq.n	9686 <z_set_prio+0x46>
    96c2:	682d      	ldr	r5, [r5, #0]
    96c4:	e7de      	b.n	9684 <z_set_prio+0x44>
    96c6:	bf00      	nop
    96c8:	20001d5c 	.word	0x20001d5c

000096cc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    96cc:	b949      	cbnz	r1, 96e2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    96ce:	f3ef 8005 	mrs	r0, IPSR
    96d2:	b930      	cbnz	r0, 96e2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    96d4:	4b05      	ldr	r3, [pc, #20]	; (96ec <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    96d6:	699a      	ldr	r2, [r3, #24]
    96d8:	689b      	ldr	r3, [r3, #8]
    96da:	429a      	cmp	r2, r3
    96dc:	d001      	beq.n	96e2 <z_reschedule+0x16>
    96de:	f7fa b9ff 	b.w	3ae0 <arch_swap>
    96e2:	f381 8811 	msr	BASEPRI, r1
    96e6:	f3bf 8f6f 	isb	sy
}
    96ea:	4770      	bx	lr
    96ec:	20001d5c 	.word	0x20001d5c

000096f0 <z_sched_start>:
{
    96f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    96f2:	f04f 0220 	mov.w	r2, #32
    96f6:	f3ef 8411 	mrs	r4, BASEPRI
    96fa:	f382 8812 	msr	BASEPRI_MAX, r2
    96fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9702:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9704:	0751      	lsls	r1, r2, #29
    9706:	d404      	bmi.n	9712 <z_sched_start+0x22>
	__asm__ volatile(
    9708:	f384 8811 	msr	BASEPRI, r4
    970c:	f3bf 8f6f 	isb	sy
}
    9710:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9712:	f022 0204 	bic.w	r2, r2, #4
    9716:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    9718:	f7ff fee0 	bl	94dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    971c:	4621      	mov	r1, r4
    971e:	4802      	ldr	r0, [pc, #8]	; (9728 <z_sched_start+0x38>)
}
    9720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9724:	f7ff bfd2 	b.w	96cc <z_reschedule>
    9728:	20001fa0 	.word	0x20001fa0

0000972c <z_impl_k_thread_suspend>:
{
    972c:	b570      	push	{r4, r5, r6, lr}
    972e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    9730:	3018      	adds	r0, #24
    9732:	f002 fa2f 	bl	bb94 <z_abort_timeout>
	__asm__ volatile(
    9736:	f04f 0320 	mov.w	r3, #32
    973a:	f3ef 8611 	mrs	r6, BASEPRI
    973e:	f383 8812 	msr	BASEPRI_MAX, r3
    9742:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9746:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    974a:	7b63      	ldrb	r3, [r4, #13]
    974c:	2a00      	cmp	r2, #0
    974e:	da05      	bge.n	975c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9754:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9756:	4620      	mov	r0, r4
    9758:	f002 f906 	bl	b968 <sys_dlist_remove>
		update_cache(thread == _current);
    975c:	4d0b      	ldr	r5, [pc, #44]	; (978c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    975e:	7b63      	ldrb	r3, [r4, #13]
    9760:	68a8      	ldr	r0, [r5, #8]
    9762:	f043 0310 	orr.w	r3, r3, #16
    9766:	7363      	strb	r3, [r4, #13]
    9768:	1b03      	subs	r3, r0, r4
    976a:	4258      	negs	r0, r3
    976c:	4158      	adcs	r0, r3
    976e:	f7ff fe5d 	bl	942c <update_cache>
	__asm__ volatile(
    9772:	f386 8811 	msr	BASEPRI, r6
    9776:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    977a:	68ab      	ldr	r3, [r5, #8]
    977c:	42a3      	cmp	r3, r4
    977e:	d103      	bne.n	9788 <z_impl_k_thread_suspend+0x5c>
}
    9780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9784:	f002 b9c9 	b.w	bb1a <z_reschedule_unlocked>
}
    9788:	bd70      	pop	{r4, r5, r6, pc}
    978a:	bf00      	nop
    978c:	20001d5c 	.word	0x20001d5c

00009790 <k_sched_lock>:
	__asm__ volatile(
    9790:	f04f 0320 	mov.w	r3, #32
    9794:	f3ef 8111 	mrs	r1, BASEPRI
    9798:	f383 8812 	msr	BASEPRI_MAX, r3
    979c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    97a0:	4b04      	ldr	r3, [pc, #16]	; (97b4 <k_sched_lock+0x24>)
    97a2:	689a      	ldr	r2, [r3, #8]
    97a4:	7bd3      	ldrb	r3, [r2, #15]
    97a6:	3b01      	subs	r3, #1
    97a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    97aa:	f381 8811 	msr	BASEPRI, r1
    97ae:	f3bf 8f6f 	isb	sy
}
    97b2:	4770      	bx	lr
    97b4:	20001d5c 	.word	0x20001d5c

000097b8 <k_sched_unlock>:
{
    97b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    97ba:	f04f 0320 	mov.w	r3, #32
    97be:	f3ef 8411 	mrs	r4, BASEPRI
    97c2:	f383 8812 	msr	BASEPRI_MAX, r3
    97c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    97ca:	4b08      	ldr	r3, [pc, #32]	; (97ec <k_sched_unlock+0x34>)
    97cc:	689a      	ldr	r2, [r3, #8]
    97ce:	7bd3      	ldrb	r3, [r2, #15]
    97d0:	3301      	adds	r3, #1
    97d2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    97d4:	2000      	movs	r0, #0
    97d6:	f7ff fe29 	bl	942c <update_cache>
	__asm__ volatile(
    97da:	f384 8811 	msr	BASEPRI, r4
    97de:	f3bf 8f6f 	isb	sy
}
    97e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    97e6:	f002 b998 	b.w	bb1a <z_reschedule_unlocked>
    97ea:	bf00      	nop
    97ec:	20001d5c 	.word	0x20001d5c

000097f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    97f0:	4b02      	ldr	r3, [pc, #8]	; (97fc <z_sched_init+0xc>)
    97f2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    97f6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    97fa:	4770      	bx	lr
    97fc:	20001d5c 	.word	0x20001d5c

00009800 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    9800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    9802:	f04f 0320 	mov.w	r3, #32
    9806:	f3ef 8511 	mrs	r5, BASEPRI
    980a:	f383 8812 	msr	BASEPRI_MAX, r3
    980e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    9812:	4919      	ldr	r1, [pc, #100]	; (9878 <z_impl_k_yield+0x78>)
    9814:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9816:	7b43      	ldrb	r3, [r0, #13]
    9818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    981c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    981e:	f002 f8a3 	bl	b968 <sys_dlist_remove>
	}
	queue_thread(_current);
    9822:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    9824:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    9826:	4608      	mov	r0, r1
    9828:	f062 027f 	orn	r2, r2, #127	; 0x7f
    982c:	735a      	strb	r2, [r3, #13]
    982e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    9832:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9834:	4282      	cmp	r2, r0
    9836:	bf08      	it	eq
    9838:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    983a:	b922      	cbnz	r2, 9846 <z_impl_k_yield+0x46>
	node->prev = tail;
    983c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    9840:	6023      	str	r3, [r4, #0]
	list->tail = node;
    9842:	620b      	str	r3, [r1, #32]
}
    9844:	e00c      	b.n	9860 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    9846:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    984a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    984e:	42be      	cmp	r6, r7
    9850:	d00e      	beq.n	9870 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9852:	42b7      	cmp	r7, r6
    9854:	dd0c      	ble.n	9870 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    9856:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    9858:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    985c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    985e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    9860:	2001      	movs	r0, #1
    9862:	f7ff fde3 	bl	942c <update_cache>
    9866:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    9868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    986c:	f7fa b938 	b.w	3ae0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9870:	42a2      	cmp	r2, r4
    9872:	d0e3      	beq.n	983c <z_impl_k_yield+0x3c>
    9874:	6812      	ldr	r2, [r2, #0]
    9876:	e7e0      	b.n	983a <z_impl_k_yield+0x3a>
    9878:	20001d5c 	.word	0x20001d5c

0000987c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    987c:	ea50 0301 	orrs.w	r3, r0, r1
{
    9880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9884:	4605      	mov	r5, r0
    9886:	460e      	mov	r6, r1
	if (ticks == 0) {
    9888:	d103      	bne.n	9892 <z_tick_sleep+0x16>
	z_impl_k_yield();
    988a:	f7ff ffb9 	bl	9800 <z_impl_k_yield>
		k_yield();
		return 0;
    988e:	2000      	movs	r0, #0
    9890:	e02c      	b.n	98ec <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    9892:	1c83      	adds	r3, r0, #2
    9894:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    9898:	db2a      	blt.n	98f0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    989a:	f002 f9a1 	bl	bbe0 <sys_clock_tick_get_32>
    989e:	182c      	adds	r4, r5, r0
    98a0:	f04f 0320 	mov.w	r3, #32
    98a4:	f3ef 8811 	mrs	r8, BASEPRI
    98a8:	f383 8812 	msr	BASEPRI_MAX, r3
    98ac:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    98b0:	4f11      	ldr	r7, [pc, #68]	; (98f8 <z_tick_sleep+0x7c>)
    98b2:	4b12      	ldr	r3, [pc, #72]	; (98fc <z_tick_sleep+0x80>)
    98b4:	68b8      	ldr	r0, [r7, #8]
    98b6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    98b8:	f7ff fe44 	bl	9544 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    98bc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    98be:	4910      	ldr	r1, [pc, #64]	; (9900 <z_tick_sleep+0x84>)
    98c0:	462a      	mov	r2, r5
    98c2:	4633      	mov	r3, r6
    98c4:	3018      	adds	r0, #24
    98c6:	f000 f929 	bl	9b1c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    98ca:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    98cc:	7b53      	ldrb	r3, [r2, #13]
    98ce:	f043 0310 	orr.w	r3, r3, #16
    98d2:	7353      	strb	r3, [r2, #13]
    98d4:	4640      	mov	r0, r8
    98d6:	f7fa f903 	bl	3ae0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    98da:	f002 f981 	bl	bbe0 <sys_clock_tick_get_32>
    98de:	1a20      	subs	r0, r4, r0
    98e0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    98e4:	2801      	cmp	r0, #1
    98e6:	f173 0300 	sbcs.w	r3, r3, #0
    98ea:	dbd0      	blt.n	988e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    98ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    98f0:	f06f 0401 	mvn.w	r4, #1
    98f4:	1a24      	subs	r4, r4, r0
    98f6:	e7d3      	b.n	98a0 <z_tick_sleep+0x24>
    98f8:	20001d5c 	.word	0x20001d5c
    98fc:	20001d88 	.word	0x20001d88
    9900:	0000ba65 	.word	0x0000ba65

00009904 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9904:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9908:	bf08      	it	eq
    990a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    990e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9910:	d106      	bne.n	9920 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    9912:	4b08      	ldr	r3, [pc, #32]	; (9934 <z_impl_k_sleep+0x30>)
    9914:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9916:	f7ff ff09 	bl	972c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    991a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    991e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9920:	f7ff ffac 	bl	987c <z_tick_sleep>
    9924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9928:	fb80 0303 	smull	r0, r3, r0, r3
    992c:	0bc0      	lsrs	r0, r0, #15
    992e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9932:	e7f4      	b.n	991e <z_impl_k_sleep+0x1a>
    9934:	20001d5c 	.word	0x20001d5c

00009938 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    9938:	b538      	push	{r3, r4, r5, lr}
    993a:	4c0a      	ldr	r4, [pc, #40]	; (9964 <z_impl_k_usleep+0x2c>)
    993c:	4a0a      	ldr	r2, [pc, #40]	; (9968 <z_impl_k_usleep+0x30>)
    993e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9942:	2100      	movs	r1, #0
    9944:	fbc0 4105 	smlal	r4, r1, r0, r5
    9948:	2300      	movs	r3, #0
    994a:	4620      	mov	r0, r4
    994c:	f7f7 fbd8 	bl	1100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    9950:	17c1      	asrs	r1, r0, #31
    9952:	f7ff ff93 	bl	987c <z_tick_sleep>
    9956:	4b04      	ldr	r3, [pc, #16]	; (9968 <z_impl_k_usleep+0x30>)
    9958:	fb80 0303 	smull	r0, r3, r0, r3
    995c:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    995e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9962:	bd38      	pop	{r3, r4, r5, pc}
    9964:	000f423f 	.word	0x000f423f
    9968:	000f4240 	.word	0x000f4240

0000996c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    996c:	4b01      	ldr	r3, [pc, #4]	; (9974 <z_impl_z_current_get+0x8>)
    996e:	6898      	ldr	r0, [r3, #8]
    9970:	4770      	bx	lr
    9972:	bf00      	nop
    9974:	20001d5c 	.word	0x20001d5c

00009978 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    997c:	4604      	mov	r4, r0
    997e:	f04f 0320 	mov.w	r3, #32
    9982:	f3ef 8611 	mrs	r6, BASEPRI
    9986:	f383 8812 	msr	BASEPRI_MAX, r3
    998a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    998e:	7b03      	ldrb	r3, [r0, #12]
    9990:	07d9      	lsls	r1, r3, #31
    9992:	d50b      	bpl.n	99ac <z_thread_abort+0x34>
	__asm__ volatile(
    9994:	f386 8811 	msr	BASEPRI, r6
    9998:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    999c:	4040      	eors	r0, r0
    999e:	f380 8811 	msr	BASEPRI, r0
    99a2:	f04f 0004 	mov.w	r0, #4
    99a6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    99a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    99ac:	7b43      	ldrb	r3, [r0, #13]
    99ae:	071a      	lsls	r2, r3, #28
    99b0:	d504      	bpl.n	99bc <z_thread_abort+0x44>
    99b2:	f386 8811 	msr	BASEPRI, r6
    99b6:	f3bf 8f6f 	isb	sy
    99ba:	e7f5      	b.n	99a8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    99bc:	f023 0220 	bic.w	r2, r3, #32
    99c0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    99c4:	09d2      	lsrs	r2, r2, #7
    99c6:	d120      	bne.n	9a0a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    99c8:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    99ca:	68a3      	ldr	r3, [r4, #8]
    99cc:	b113      	cbz	r3, 99d4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    99ce:	4620      	mov	r0, r4
    99d0:	f001 ffd2 	bl	b978 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    99d4:	f104 0018 	add.w	r0, r4, #24
    99d8:	f002 f8dc 	bl	bb94 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    99dc:	f104 0758 	add.w	r7, r4, #88	; 0x58
    99e0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    99e4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    99e6:	42bd      	cmp	r5, r7
    99e8:	d000      	beq.n	99ec <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    99ea:	b9b5      	cbnz	r5, 9a1a <z_thread_abort+0xa2>
		update_cache(1);
    99ec:	2001      	movs	r0, #1
    99ee:	f7ff fd1d 	bl	942c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    99f2:	4b10      	ldr	r3, [pc, #64]	; (9a34 <z_thread_abort+0xbc>)
    99f4:	689b      	ldr	r3, [r3, #8]
    99f6:	42a3      	cmp	r3, r4
    99f8:	d1db      	bne.n	99b2 <z_thread_abort+0x3a>
    99fa:	f3ef 8305 	mrs	r3, IPSR
    99fe:	2b00      	cmp	r3, #0
    9a00:	d1d7      	bne.n	99b2 <z_thread_abort+0x3a>
    9a02:	4630      	mov	r0, r6
    9a04:	f7fa f86c 	bl	3ae0 <arch_swap>
	return ret;
    9a08:	e7d3      	b.n	99b2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9a0a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9a0e:	f043 0308 	orr.w	r3, r3, #8
    9a12:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9a14:	f001 ffa8 	bl	b968 <sys_dlist_remove>
}
    9a18:	e7d7      	b.n	99ca <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    9a1a:	4628      	mov	r0, r5
    9a1c:	f001 ffac 	bl	b978 <unpend_thread_no_timeout>
    9a20:	f105 0018 	add.w	r0, r5, #24
    9a24:	f002 f8b6 	bl	bb94 <z_abort_timeout>
    9a28:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    9a2c:	4628      	mov	r0, r5
    9a2e:	f7ff fd55 	bl	94dc <ready_thread>
    9a32:	e7d7      	b.n	99e4 <z_thread_abort+0x6c>
    9a34:	20001d5c 	.word	0x20001d5c

00009a38 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    9a38:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9a3a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9a3e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9a40:	e9cd 6700 	strd	r6, r7, [sp]
    9a44:	f7ff fdde 	bl	9604 <z_pend_curr>

	if (data != NULL) {
    9a48:	b11c      	cbz	r4, 9a52 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    9a4a:	4b03      	ldr	r3, [pc, #12]	; (9a58 <z_sched_wait+0x20>)
    9a4c:	689b      	ldr	r3, [r3, #8]
    9a4e:	695b      	ldr	r3, [r3, #20]
    9a50:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9a52:	b002      	add	sp, #8
    9a54:	bdd0      	pop	{r4, r6, r7, pc}
    9a56:	bf00      	nop
    9a58:	20001d5c 	.word	0x20001d5c

00009a5c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9a5c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9a5e:	4806      	ldr	r0, [pc, #24]	; (9a78 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9a60:	4a06      	ldr	r2, [pc, #24]	; (9a7c <z_data_copy+0x20>)
    9a62:	4907      	ldr	r1, [pc, #28]	; (9a80 <z_data_copy+0x24>)
    9a64:	1a12      	subs	r2, r2, r0
    9a66:	f001 fe48 	bl	b6fa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9a6e:	4a05      	ldr	r2, [pc, #20]	; (9a84 <z_data_copy+0x28>)
    9a70:	4905      	ldr	r1, [pc, #20]	; (9a88 <z_data_copy+0x2c>)
    9a72:	4806      	ldr	r0, [pc, #24]	; (9a8c <z_data_copy+0x30>)
    9a74:	f001 be41 	b.w	b6fa <z_early_memcpy>
    9a78:	20000000 	.word	0x20000000
    9a7c:	200002d0 	.word	0x200002d0
    9a80:	0000d42c 	.word	0x0000d42c
    9a84:	00000000 	.word	0x00000000
    9a88:	0000d42c 	.word	0x0000d42c
    9a8c:	20000000 	.word	0x20000000

00009a90 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9a90:	4b03      	ldr	r3, [pc, #12]	; (9aa0 <elapsed+0x10>)
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	b90b      	cbnz	r3, 9a9a <elapsed+0xa>
    9a96:	f7fc be5f 	b.w	6758 <sys_clock_elapsed>
}
    9a9a:	2000      	movs	r0, #0
    9a9c:	4770      	bx	lr
    9a9e:	bf00      	nop
    9aa0:	20001d94 	.word	0x20001d94

00009aa4 <next_timeout>:

static int32_t next_timeout(void)
{
    9aa4:	b510      	push	{r4, lr}
	return list->head == list;
    9aa6:	4b0e      	ldr	r3, [pc, #56]	; (9ae0 <next_timeout+0x3c>)
    9aa8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9aaa:	429c      	cmp	r4, r3
    9aac:	d104      	bne.n	9ab8 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9aae:	f7ff ffef 	bl	9a90 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    9ab2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    9ab6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9ab8:	f7ff ffea 	bl	9a90 <elapsed>
	if ((to == NULL) ||
    9abc:	2c00      	cmp	r4, #0
    9abe:	d0f8      	beq.n	9ab2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9ac0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9ac4:	1a1b      	subs	r3, r3, r0
    9ac6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9ace:	f172 0100 	sbcs.w	r1, r2, #0
    9ad2:	daee      	bge.n	9ab2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9ad4:	2a00      	cmp	r2, #0
    9ad6:	bfac      	ite	ge
    9ad8:	4618      	movge	r0, r3
    9ada:	2000      	movlt	r0, #0
	return ret;
    9adc:	e7eb      	b.n	9ab6 <next_timeout+0x12>
    9ade:	bf00      	nop
    9ae0:	200000d4 	.word	0x200000d4

00009ae4 <remove_timeout>:
{
    9ae4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9ae6:	b170      	cbz	r0, 9b06 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    9ae8:	4b0b      	ldr	r3, [pc, #44]	; (9b18 <remove_timeout+0x34>)
    9aea:	685b      	ldr	r3, [r3, #4]
    9aec:	4298      	cmp	r0, r3
    9aee:	d00a      	beq.n	9b06 <remove_timeout+0x22>
    9af0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    9af2:	b143      	cbz	r3, 9b06 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9af4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9af8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9afc:	1912      	adds	r2, r2, r4
    9afe:	eb41 0105 	adc.w	r1, r1, r5
    9b02:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    9b06:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    9b0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9b0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9b0e:	2300      	movs	r3, #0
	node->prev = NULL;
    9b10:	e9c0 3300 	strd	r3, r3, [r0]
}
    9b14:	bd30      	pop	{r4, r5, pc}
    9b16:	bf00      	nop
    9b18:	200000d4 	.word	0x200000d4

00009b1c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9b20:	bf08      	it	eq
    9b22:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b28:	4604      	mov	r4, r0
    9b2a:	461d      	mov	r5, r3
    9b2c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b2e:	d05c      	beq.n	9bea <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    9b30:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    9b32:	f04f 0320 	mov.w	r3, #32
    9b36:	f3ef 8711 	mrs	r7, BASEPRI
    9b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    9b3e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9b42:	3201      	adds	r2, #1
    9b44:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9b48:	da24      	bge.n	9b94 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9b4a:	492d      	ldr	r1, [pc, #180]	; (9c00 <z_add_timeout+0xe4>)
    9b4c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9b50:	f06f 0301 	mvn.w	r3, #1
    9b54:	1a9b      	subs	r3, r3, r2
    9b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9b5a:	eb62 0000 	sbc.w	r0, r2, r0
    9b5e:	1b9e      	subs	r6, r3, r6
    9b60:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    9b64:	2e01      	cmp	r6, #1
    9b66:	f170 0300 	sbcs.w	r3, r0, #0
    9b6a:	da01      	bge.n	9b70 <z_add_timeout+0x54>
    9b6c:	2601      	movs	r6, #1
    9b6e:	2000      	movs	r0, #0
    9b70:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    9b74:	4e23      	ldr	r6, [pc, #140]	; (9c04 <z_add_timeout+0xe8>)
    9b76:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    9b7a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9b7c:	45b4      	cmp	ip, r6
    9b7e:	bf08      	it	eq
    9b80:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    9b84:	f1bc 0f00 	cmp.w	ip, #0
    9b88:	d10d      	bne.n	9ba6 <z_add_timeout+0x8a>
	node->prev = tail;
    9b8a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    9b8e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    9b90:	6074      	str	r4, [r6, #4]
}
    9b92:	e01c      	b.n	9bce <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    9b94:	f7ff ff7c 	bl	9a90 <elapsed>
    9b98:	3601      	adds	r6, #1
    9b9a:	f145 0500 	adc.w	r5, r5, #0
    9b9e:	1836      	adds	r6, r6, r0
    9ba0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9ba4:	e7e4      	b.n	9b70 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    9ba6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    9baa:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    9bae:	4293      	cmp	r3, r2
    9bb0:	eb71 0e00 	sbcs.w	lr, r1, r0
    9bb4:	da1a      	bge.n	9bec <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    9bb6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    9bb8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    9bbc:	eb60 0001 	sbc.w	r0, r0, r1
    9bc0:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    9bc4:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    9bc8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9bca:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    9bce:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9bd0:	42b3      	cmp	r3, r6
    9bd2:	d006      	beq.n	9be2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9bd4:	429c      	cmp	r4, r3
    9bd6:	d104      	bne.n	9be2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    9bd8:	f7ff ff64 	bl	9aa4 <next_timeout>
    9bdc:	2100      	movs	r1, #0
    9bde:	f7fc fd89 	bl	66f4 <sys_clock_set_timeout>
	__asm__ volatile(
    9be2:	f387 8811 	msr	BASEPRI, r7
    9be6:	f3bf 8f6f 	isb	sy
		}
	}
}
    9bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    9bec:	1a9b      	subs	r3, r3, r2
    9bee:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    9bf2:	45ac      	cmp	ip, r5
    9bf4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    9bf8:	d0c7      	beq.n	9b8a <z_add_timeout+0x6e>
    9bfa:	f8dc c000 	ldr.w	ip, [ip]
    9bfe:	e7c1      	b.n	9b84 <z_add_timeout+0x68>
    9c00:	20000a08 	.word	0x20000a08
    9c04:	200000d4 	.word	0x200000d4

00009c08 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    9c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    9c0c:	f04f 0320 	mov.w	r3, #32
    9c10:	f3ef 8c11 	mrs	ip, BASEPRI
    9c14:	f383 8812 	msr	BASEPRI_MAX, r3
    9c18:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9c1c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 9cd0 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9c20:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 9cd4 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    9c24:	4f2c      	ldr	r7, [pc, #176]	; (9cd8 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    9c26:	f8c9 0000 	str.w	r0, [r9]
    9c2a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    9c2e:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c30:	4550      	cmp	r0, sl
    9c32:	bf08      	it	eq
    9c34:	2000      	moveq	r0, #0
    9c36:	2500      	movs	r5, #0
		curr_tick += dt;
    9c38:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    9c3c:	f8d9 3000 	ldr.w	r3, [r9]
    9c40:	46e0      	mov	r8, ip
    9c42:	b380      	cbz	r0, 9ca6 <sys_clock_announce+0x9e>
    9c44:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    9c48:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    9c4c:	42b3      	cmp	r3, r6
    9c4e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    9c52:	da05      	bge.n	9c60 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    9c54:	1af6      	subs	r6, r6, r3
    9c56:	eb6c 040e 	sbc.w	r4, ip, lr
    9c5a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    9c5e:	e022      	b.n	9ca6 <sys_clock_announce+0x9e>
		curr_tick += dt;
    9c60:	18b2      	adds	r2, r6, r2
    9c62:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    9c66:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    9c6a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    9c6e:	f7ff ff39 	bl	9ae4 <remove_timeout>
	__asm__ volatile(
    9c72:	f388 8811 	msr	BASEPRI, r8
    9c76:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9c7a:	6883      	ldr	r3, [r0, #8]
    9c7c:	4798      	blx	r3
	__asm__ volatile(
    9c7e:	f04f 0320 	mov.w	r3, #32
    9c82:	f3ef 8811 	mrs	r8, BASEPRI
    9c86:	f383 8812 	msr	BASEPRI_MAX, r3
    9c8a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    9c8e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    9c92:	f8da 0000 	ldr.w	r0, [sl]
    9c96:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c98:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    9c9a:	46c4      	mov	ip, r8
    9c9c:	f8c9 3000 	str.w	r3, [r9]
    9ca0:	d1ca      	bne.n	9c38 <sys_clock_announce+0x30>
		curr_tick += dt;
    9ca2:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    9ca6:	189a      	adds	r2, r3, r2
    9ca8:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    9cac:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    9cae:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    9cb2:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    9cb6:	f7ff fef5 	bl	9aa4 <next_timeout>
    9cba:	4621      	mov	r1, r4
    9cbc:	f7fc fd1a 	bl	66f4 <sys_clock_set_timeout>
	__asm__ volatile(
    9cc0:	f388 8811 	msr	BASEPRI, r8
    9cc4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    9cc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    9ccc:	f7ff bc6a 	b.w	95a4 <z_time_slice>
    9cd0:	200000d4 	.word	0x200000d4
    9cd4:	20001d94 	.word	0x20001d94
    9cd8:	20000a08 	.word	0x20000a08

00009cdc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9cdc:	b510      	push	{r4, lr}
	__asm__ volatile(
    9cde:	f04f 0320 	mov.w	r3, #32
    9ce2:	f3ef 8411 	mrs	r4, BASEPRI
    9ce6:	f383 8812 	msr	BASEPRI_MAX, r3
    9cea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    9cee:	f7ff fecf 	bl	9a90 <elapsed>
    9cf2:	4a06      	ldr	r2, [pc, #24]	; (9d0c <sys_clock_tick_get+0x30>)
    9cf4:	4603      	mov	r3, r0
    9cf6:	e9d2 0100 	ldrd	r0, r1, [r2]
    9cfa:	1818      	adds	r0, r3, r0
    9cfc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    9d00:	f384 8811 	msr	BASEPRI, r4
    9d04:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9d08:	bd10      	pop	{r4, pc}
    9d0a:	bf00      	nop
    9d0c:	20000a08 	.word	0x20000a08

00009d10 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d12:	4604      	mov	r4, r0
	__asm__ volatile(
    9d14:	f04f 0320 	mov.w	r3, #32
    9d18:	f3ef 8711 	mrs	r7, BASEPRI
    9d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d20:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    9d24:	6802      	ldr	r2, [r0, #0]
    9d26:	b122      	cbz	r2, 9d32 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    9d28:	f387 8811 	msr	BASEPRI, r7
    9d2c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9d32:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    9d36:	1c58      	adds	r0, r3, #1
    9d38:	f146 0100 	adc.w	r1, r6, #0
    9d3c:	2802      	cmp	r0, #2
    9d3e:	f171 0100 	sbcs.w	r1, r1, #0
    9d42:	d327      	bcc.n	9d94 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    9d44:	2b01      	cmp	r3, #1
    9d46:	f176 0100 	sbcs.w	r1, r6, #0
    9d4a:	bfbc      	itt	lt
    9d4c:	2301      	movlt	r3, #1
    9d4e:	4616      	movlt	r6, r2
    9d50:	1e5d      	subs	r5, r3, #1
    9d52:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    9d56:	f001 ff47 	bl	bbe8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    9d5a:	3001      	adds	r0, #1
    9d5c:	f141 0100 	adc.w	r1, r1, #0
    9d60:	1940      	adds	r0, r0, r5
    9d62:	eb46 0101 	adc.w	r1, r6, r1
    9d66:	2801      	cmp	r0, #1
    9d68:	f171 0100 	sbcs.w	r1, r1, #0
    9d6c:	db3a      	blt.n	9de4 <z_timer_expiration_handler+0xd4>
    9d6e:	f001 ff3b 	bl	bbe8 <z_impl_k_uptime_ticks>
    9d72:	3001      	adds	r0, #1
    9d74:	f141 0100 	adc.w	r1, r1, #0
    9d78:	f06f 0201 	mvn.w	r2, #1
    9d7c:	1940      	adds	r0, r0, r5
    9d7e:	eb46 0301 	adc.w	r3, r6, r1
    9d82:	1a12      	subs	r2, r2, r0
    9d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d88:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9d8c:	4918      	ldr	r1, [pc, #96]	; (9df0 <z_timer_expiration_handler+0xe0>)
    9d8e:	4620      	mov	r0, r4
    9d90:	f7ff fec4 	bl	9b1c <z_add_timeout>
	timer->status += 1U;
    9d94:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9d96:	3301      	adds	r3, #1
    9d98:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    9d9a:	6a23      	ldr	r3, [r4, #32]
    9d9c:	b173      	cbz	r3, 9dbc <z_timer_expiration_handler+0xac>
    9d9e:	f387 8811 	msr	BASEPRI, r7
    9da2:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    9da6:	6a23      	ldr	r3, [r4, #32]
    9da8:	4620      	mov	r0, r4
    9daa:	4798      	blx	r3
	__asm__ volatile(
    9dac:	f04f 0320 	mov.w	r3, #32
    9db0:	f3ef 8711 	mrs	r7, BASEPRI
    9db4:	f383 8812 	msr	BASEPRI_MAX, r3
    9db8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9dbc:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dc0:	42a5      	cmp	r5, r4
    9dc2:	d0b1      	beq.n	9d28 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    9dc4:	2d00      	cmp	r5, #0
    9dc6:	d0af      	beq.n	9d28 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    9dc8:	4628      	mov	r0, r5
    9dca:	f001 fe17 	bl	b9fc <z_unpend_thread_no_timeout>
    9dce:	2300      	movs	r3, #0
    9dd0:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    9dd2:	f387 8811 	msr	BASEPRI, r7
    9dd6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9dda:	4628      	mov	r0, r5
}
    9ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    9de0:	f001 bdfc 	b.w	b9dc <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    9de4:	f06f 0201 	mvn.w	r2, #1
    9de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9dec:	e7ce      	b.n	9d8c <z_timer_expiration_handler+0x7c>
    9dee:	bf00      	nop
    9df0:	00009d11 	.word	0x00009d11

00009df4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9dfc:	bf08      	it	eq
    9dfe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9e02:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    9e06:	4605      	mov	r5, r0
    9e08:	461c      	mov	r4, r3
    9e0a:	4691      	mov	r9, r2
    9e0c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9e0e:	d01c      	beq.n	9e4a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9e10:	1c53      	adds	r3, r2, #1
    9e12:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    9e16:	db09      	blt.n	9e2c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9e18:	2a01      	cmp	r2, #1
    9e1a:	f174 0300 	sbcs.w	r3, r4, #0
    9e1e:	bfbc      	itt	lt
    9e20:	2201      	movlt	r2, #1
    9e22:	2400      	movlt	r4, #0
    9e24:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    9e28:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    9e2c:	4628      	mov	r0, r5
    9e2e:	f001 feb1 	bl	bb94 <z_abort_timeout>
	timer->period = period;
    9e32:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    9e36:	2300      	movs	r3, #0
    9e38:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9e3a:	464a      	mov	r2, r9
    9e3c:	4643      	mov	r3, r8
    9e3e:	4628      	mov	r0, r5
    9e40:	4903      	ldr	r1, [pc, #12]	; (9e50 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    9e42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9e46:	f7ff be69 	b.w	9b1c <z_add_timeout>
}
    9e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e4e:	bf00      	nop
    9e50:	00009d11 	.word	0x00009d11

00009e54 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    9e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9e56:	4606      	mov	r6, r0
    9e58:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    9e5a:	f001 fc9d 	bl	b798 <k_is_in_isr>
    9e5e:	b978      	cbnz	r0, 9e80 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    9e60:	4b0b      	ldr	r3, [pc, #44]	; (9e90 <z_thread_aligned_alloc+0x3c>)
    9e62:	689b      	ldr	r3, [r3, #8]
    9e64:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    9e66:	b17c      	cbz	r4, 9e88 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9e68:	1d2a      	adds	r2, r5, #4
    9e6a:	d209      	bcs.n	9e80 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9e6c:	2000      	movs	r0, #0
    9e6e:	2100      	movs	r1, #0
    9e70:	e9cd 0100 	strd	r0, r1, [sp]
    9e74:	f046 0104 	orr.w	r1, r6, #4
    9e78:	4620      	mov	r0, r4
    9e7a:	f001 ff15 	bl	bca8 <k_heap_aligned_alloc>
	if (mem == NULL) {
    9e7e:	b908      	cbnz	r0, 9e84 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    9e80:	2400      	movs	r4, #0
	}

	return ret;
    9e82:	e001      	b.n	9e88 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    9e84:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9e86:	1d04      	adds	r4, r0, #4
}
    9e88:	4620      	mov	r0, r4
    9e8a:	b002      	add	sp, #8
    9e8c:	bd70      	pop	{r4, r5, r6, pc}
    9e8e:	bf00      	nop
    9e90:	20001d5c 	.word	0x20001d5c

00009e94 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    9e94:	4801      	ldr	r0, [pc, #4]	; (9e9c <boot_banner+0x8>)
    9e96:	f000 ba2a 	b.w	a2ee <printk>
    9e9a:	bf00      	nop
    9e9c:	0000d3fc 	.word	0x0000d3fc

00009ea0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    9ea0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9ea2:	4c06      	ldr	r4, [pc, #24]	; (9ebc <statics_init+0x1c>)
    9ea4:	4d06      	ldr	r5, [pc, #24]	; (9ec0 <statics_init+0x20>)
    9ea6:	42ac      	cmp	r4, r5
    9ea8:	d301      	bcc.n	9eae <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    9eaa:	2000      	movs	r0, #0
    9eac:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9eae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9eb2:	4620      	mov	r0, r4
    9eb4:	f001 fef0 	bl	bc98 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9eb8:	3414      	adds	r4, #20
    9eba:	e7f4      	b.n	9ea6 <statics_init+0x6>
    9ebc:	200001a4 	.word	0x200001a4
    9ec0:	200001a4 	.word	0x200001a4

00009ec4 <nrf_cc3xx_platform_init_no_rng>:
    9ec4:	b510      	push	{r4, lr}
    9ec6:	4c0a      	ldr	r4, [pc, #40]	; (9ef0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9ec8:	6823      	ldr	r3, [r4, #0]
    9eca:	b11b      	cbz	r3, 9ed4 <nrf_cc3xx_platform_init_no_rng+0x10>
    9ecc:	2301      	movs	r3, #1
    9ece:	6023      	str	r3, [r4, #0]
    9ed0:	2000      	movs	r0, #0
    9ed2:	bd10      	pop	{r4, pc}
    9ed4:	f000 f8ea 	bl	a0ac <CC_LibInitNoRng>
    9ed8:	2800      	cmp	r0, #0
    9eda:	d0f7      	beq.n	9ecc <nrf_cc3xx_platform_init_no_rng+0x8>
    9edc:	3801      	subs	r0, #1
    9ede:	2806      	cmp	r0, #6
    9ee0:	d803      	bhi.n	9eea <nrf_cc3xx_platform_init_no_rng+0x26>
    9ee2:	4b04      	ldr	r3, [pc, #16]	; (9ef4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9ee4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9ee8:	bd10      	pop	{r4, pc}
    9eea:	4803      	ldr	r0, [pc, #12]	; (9ef8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    9eec:	bd10      	pop	{r4, pc}
    9eee:	bf00      	nop
    9ef0:	20001d98 	.word	0x20001d98
    9ef4:	0000c360 	.word	0x0000c360
    9ef8:	ffff8ffe 	.word	0xffff8ffe

00009efc <nrf_cc3xx_platform_abort>:
    9efc:	f3bf 8f4f 	dsb	sy
    9f00:	4905      	ldr	r1, [pc, #20]	; (9f18 <nrf_cc3xx_platform_abort+0x1c>)
    9f02:	4b06      	ldr	r3, [pc, #24]	; (9f1c <nrf_cc3xx_platform_abort+0x20>)
    9f04:	68ca      	ldr	r2, [r1, #12]
    9f06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9f0a:	4313      	orrs	r3, r2
    9f0c:	60cb      	str	r3, [r1, #12]
    9f0e:	f3bf 8f4f 	dsb	sy
    9f12:	bf00      	nop
    9f14:	e7fd      	b.n	9f12 <nrf_cc3xx_platform_abort+0x16>
    9f16:	bf00      	nop
    9f18:	e000ed00 	.word	0xe000ed00
    9f1c:	05fa0004 	.word	0x05fa0004

00009f20 <CC_PalAbort>:
    9f20:	b410      	push	{r4}
    9f22:	4b09      	ldr	r3, [pc, #36]	; (9f48 <CC_PalAbort+0x28>)
    9f24:	4909      	ldr	r1, [pc, #36]	; (9f4c <CC_PalAbort+0x2c>)
    9f26:	4c0a      	ldr	r4, [pc, #40]	; (9f50 <CC_PalAbort+0x30>)
    9f28:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9f2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9f30:	6849      	ldr	r1, [r1, #4]
    9f32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9f36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    9f3a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9f3e:	2300      	movs	r3, #0
    9f40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9f44:	bc10      	pop	{r4}
    9f46:	4708      	bx	r1
    9f48:	5002b000 	.word	0x5002b000
    9f4c:	200000dc 	.word	0x200000dc
    9f50:	5002a000 	.word	0x5002a000

00009f54 <nrf_cc3xx_platform_set_abort>:
    9f54:	e9d0 1200 	ldrd	r1, r2, [r0]
    9f58:	4b01      	ldr	r3, [pc, #4]	; (9f60 <nrf_cc3xx_platform_set_abort+0xc>)
    9f5a:	e9c3 1200 	strd	r1, r2, [r3]
    9f5e:	4770      	bx	lr
    9f60:	200000dc 	.word	0x200000dc

00009f64 <mutex_free>:
    9f64:	b510      	push	{r4, lr}
    9f66:	4604      	mov	r4, r0
    9f68:	b150      	cbz	r0, 9f80 <mutex_free+0x1c>
    9f6a:	6863      	ldr	r3, [r4, #4]
    9f6c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    9f70:	d005      	beq.n	9f7e <mutex_free+0x1a>
    9f72:	4a06      	ldr	r2, [pc, #24]	; (9f8c <mutex_free+0x28>)
    9f74:	4293      	cmp	r3, r2
    9f76:	d002      	beq.n	9f7e <mutex_free+0x1a>
    9f78:	2300      	movs	r3, #0
    9f7a:	6023      	str	r3, [r4, #0]
    9f7c:	6062      	str	r2, [r4, #4]
    9f7e:	bd10      	pop	{r4, pc}
    9f80:	4b03      	ldr	r3, [pc, #12]	; (9f90 <mutex_free+0x2c>)
    9f82:	4804      	ldr	r0, [pc, #16]	; (9f94 <mutex_free+0x30>)
    9f84:	685b      	ldr	r3, [r3, #4]
    9f86:	4798      	blx	r3
    9f88:	e7ef      	b.n	9f6a <mutex_free+0x6>
    9f8a:	bf00      	nop
    9f8c:	a95c5f2c 	.word	0xa95c5f2c
    9f90:	200000dc 	.word	0x200000dc
    9f94:	0000c37c 	.word	0x0000c37c

00009f98 <mutex_lock>:
    9f98:	b1c8      	cbz	r0, 9fce <mutex_lock+0x36>
    9f9a:	6843      	ldr	r3, [r0, #4]
    9f9c:	4a0d      	ldr	r2, [pc, #52]	; (9fd4 <mutex_lock+0x3c>)
    9f9e:	4293      	cmp	r3, r2
    9fa0:	d013      	beq.n	9fca <mutex_lock+0x32>
    9fa2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    9fa6:	d00e      	beq.n	9fc6 <mutex_lock+0x2e>
    9fa8:	2301      	movs	r3, #1
    9faa:	e850 2f00 	ldrex	r2, [r0]
    9fae:	4619      	mov	r1, r3
    9fb0:	e840 1c00 	strex	ip, r1, [r0]
    9fb4:	f09c 0f00 	teq	ip, #0
    9fb8:	d1f7      	bne.n	9faa <mutex_lock+0x12>
    9fba:	2a01      	cmp	r2, #1
    9fbc:	d0f5      	beq.n	9faa <mutex_lock+0x12>
    9fbe:	f3bf 8f5f 	dmb	sy
    9fc2:	2000      	movs	r0, #0
    9fc4:	4770      	bx	lr
    9fc6:	4804      	ldr	r0, [pc, #16]	; (9fd8 <mutex_lock+0x40>)
    9fc8:	4770      	bx	lr
    9fca:	4804      	ldr	r0, [pc, #16]	; (9fdc <mutex_lock+0x44>)
    9fcc:	4770      	bx	lr
    9fce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9fd2:	4770      	bx	lr
    9fd4:	a95c5f2c 	.word	0xa95c5f2c
    9fd8:	ffff8fe9 	.word	0xffff8fe9
    9fdc:	ffff8fea 	.word	0xffff8fea

00009fe0 <mutex_unlock>:
    9fe0:	b180      	cbz	r0, a004 <mutex_unlock+0x24>
    9fe2:	6843      	ldr	r3, [r0, #4]
    9fe4:	4a09      	ldr	r2, [pc, #36]	; (a00c <mutex_unlock+0x2c>)
    9fe6:	4293      	cmp	r3, r2
    9fe8:	d00a      	beq.n	a000 <mutex_unlock+0x20>
    9fea:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    9fee:	d005      	beq.n	9ffc <mutex_unlock+0x1c>
    9ff0:	f3bf 8f5f 	dmb	sy
    9ff4:	2300      	movs	r3, #0
    9ff6:	6003      	str	r3, [r0, #0]
    9ff8:	4618      	mov	r0, r3
    9ffa:	4770      	bx	lr
    9ffc:	4804      	ldr	r0, [pc, #16]	; (a010 <mutex_unlock+0x30>)
    9ffe:	4770      	bx	lr
    a000:	4804      	ldr	r0, [pc, #16]	; (a014 <mutex_unlock+0x34>)
    a002:	4770      	bx	lr
    a004:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a008:	4770      	bx	lr
    a00a:	bf00      	nop
    a00c:	a95c5f2c 	.word	0xa95c5f2c
    a010:	ffff8fe9 	.word	0xffff8fe9
    a014:	ffff8fea 	.word	0xffff8fea

0000a018 <mutex_init>:
    a018:	b510      	push	{r4, lr}
    a01a:	4604      	mov	r4, r0
    a01c:	b120      	cbz	r0, a028 <mutex_init+0x10>
    a01e:	4b04      	ldr	r3, [pc, #16]	; (a030 <mutex_init+0x18>)
    a020:	6063      	str	r3, [r4, #4]
    a022:	2200      	movs	r2, #0
    a024:	6022      	str	r2, [r4, #0]
    a026:	bd10      	pop	{r4, pc}
    a028:	4802      	ldr	r0, [pc, #8]	; (a034 <mutex_init+0x1c>)
    a02a:	f7ff ff79 	bl	9f20 <CC_PalAbort>
    a02e:	e7f6      	b.n	a01e <mutex_init+0x6>
    a030:	3a00003a 	.word	0x3a00003a
    a034:	0000c3a4 	.word	0x0000c3a4

0000a038 <nrf_cc3xx_platform_set_mutexes>:
    a038:	b570      	push	{r4, r5, r6, lr}
    a03a:	e9d0 2300 	ldrd	r2, r3, [r0]
    a03e:	4c17      	ldr	r4, [pc, #92]	; (a09c <nrf_cc3xx_platform_set_mutexes+0x64>)
    a040:	4d17      	ldr	r5, [pc, #92]	; (a0a0 <nrf_cc3xx_platform_set_mutexes+0x68>)
    a042:	6063      	str	r3, [r4, #4]
    a044:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a048:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a04c:	6022      	str	r2, [r4, #0]
    a04e:	6848      	ldr	r0, [r1, #4]
    a050:	f8d1 c000 	ldr.w	ip, [r1]
    a054:	4b13      	ldr	r3, [pc, #76]	; (a0a4 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    a056:	e9c3 c000 	strd	ip, r0, [r3]
    a05a:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    a05e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    a062:	f8c3 c008 	str.w	ip, [r3, #8]
    a066:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    a06a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    a06e:	6909      	ldr	r1, [r1, #16]
    a070:	f8c3 c00c 	str.w	ip, [r3, #12]
    a074:	6119      	str	r1, [r3, #16]
    a076:	d010      	beq.n	a09a <nrf_cc3xx_platform_set_mutexes+0x62>
    a078:	490b      	ldr	r1, [pc, #44]	; (a0a8 <nrf_cc3xx_platform_set_mutexes+0x70>)
    a07a:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    a07e:	2300      	movs	r3, #0
    a080:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    a084:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a088:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    a08c:	4790      	blx	r2
    a08e:	6823      	ldr	r3, [r4, #0]
    a090:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a098:	4718      	bx	r3
    a09a:	bd70      	pop	{r4, r5, r6, pc}
    a09c:	200000f8 	.word	0x200000f8
    a0a0:	20001db0 	.word	0x20001db0
    a0a4:	200000e4 	.word	0x200000e4
    a0a8:	a95c5f2c 	.word	0xa95c5f2c

0000a0ac <CC_LibInitNoRng>:
    a0ac:	b538      	push	{r3, r4, r5, lr}
    a0ae:	f000 f82f 	bl	a110 <CC_HalInit>
    a0b2:	b120      	cbz	r0, a0be <CC_LibInitNoRng+0x12>
    a0b4:	2403      	movs	r4, #3
    a0b6:	f000 f863 	bl	a180 <CC_PalTerminate>
    a0ba:	4620      	mov	r0, r4
    a0bc:	bd38      	pop	{r3, r4, r5, pc}
    a0be:	f000 f831 	bl	a124 <CC_PalInit>
    a0c2:	b998      	cbnz	r0, a0ec <CC_LibInitNoRng+0x40>
    a0c4:	f000 f8ac 	bl	a220 <CC_PalPowerSaveModeSelect>
    a0c8:	b998      	cbnz	r0, a0f2 <CC_LibInitNoRng+0x46>
    a0ca:	4d0f      	ldr	r5, [pc, #60]	; (a108 <CC_LibInitNoRng+0x5c>)
    a0cc:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a0d0:	0e1b      	lsrs	r3, r3, #24
    a0d2:	2bf0      	cmp	r3, #240	; 0xf0
    a0d4:	d108      	bne.n	a0e8 <CC_LibInitNoRng+0x3c>
    a0d6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a0da:	4b0c      	ldr	r3, [pc, #48]	; (a10c <CC_LibInitNoRng+0x60>)
    a0dc:	429a      	cmp	r2, r3
    a0de:	d00a      	beq.n	a0f6 <CC_LibInitNoRng+0x4a>
    a0e0:	2407      	movs	r4, #7
    a0e2:	f000 f817 	bl	a114 <CC_HalTerminate>
    a0e6:	e7e6      	b.n	a0b6 <CC_LibInitNoRng+0xa>
    a0e8:	2406      	movs	r4, #6
    a0ea:	e7fa      	b.n	a0e2 <CC_LibInitNoRng+0x36>
    a0ec:	2404      	movs	r4, #4
    a0ee:	4620      	mov	r0, r4
    a0f0:	bd38      	pop	{r3, r4, r5, pc}
    a0f2:	2400      	movs	r4, #0
    a0f4:	e7f5      	b.n	a0e2 <CC_LibInitNoRng+0x36>
    a0f6:	2001      	movs	r0, #1
    a0f8:	f000 f892 	bl	a220 <CC_PalPowerSaveModeSelect>
    a0fc:	4604      	mov	r4, r0
    a0fe:	2800      	cmp	r0, #0
    a100:	d1f7      	bne.n	a0f2 <CC_LibInitNoRng+0x46>
    a102:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a106:	e7d8      	b.n	a0ba <CC_LibInitNoRng+0xe>
    a108:	5002b000 	.word	0x5002b000
    a10c:	20e00000 	.word	0x20e00000

0000a110 <CC_HalInit>:
    a110:	2000      	movs	r0, #0
    a112:	4770      	bx	lr

0000a114 <CC_HalTerminate>:
    a114:	2000      	movs	r0, #0
    a116:	4770      	bx	lr

0000a118 <CC_HalMaskInterrupt>:
    a118:	4b01      	ldr	r3, [pc, #4]	; (a120 <CC_HalMaskInterrupt+0x8>)
    a11a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a11e:	4770      	bx	lr
    a120:	5002b000 	.word	0x5002b000

0000a124 <CC_PalInit>:
    a124:	b510      	push	{r4, lr}
    a126:	4811      	ldr	r0, [pc, #68]	; (a16c <CC_PalInit+0x48>)
    a128:	f000 f848 	bl	a1bc <CC_PalMutexCreate>
    a12c:	b100      	cbz	r0, a130 <CC_PalInit+0xc>
    a12e:	bd10      	pop	{r4, pc}
    a130:	480f      	ldr	r0, [pc, #60]	; (a170 <CC_PalInit+0x4c>)
    a132:	f000 f843 	bl	a1bc <CC_PalMutexCreate>
    a136:	2800      	cmp	r0, #0
    a138:	d1f9      	bne.n	a12e <CC_PalInit+0xa>
    a13a:	4c0e      	ldr	r4, [pc, #56]	; (a174 <CC_PalInit+0x50>)
    a13c:	4620      	mov	r0, r4
    a13e:	f000 f83d 	bl	a1bc <CC_PalMutexCreate>
    a142:	2800      	cmp	r0, #0
    a144:	d1f3      	bne.n	a12e <CC_PalInit+0xa>
    a146:	4b0c      	ldr	r3, [pc, #48]	; (a178 <CC_PalInit+0x54>)
    a148:	480c      	ldr	r0, [pc, #48]	; (a17c <CC_PalInit+0x58>)
    a14a:	601c      	str	r4, [r3, #0]
    a14c:	f000 f836 	bl	a1bc <CC_PalMutexCreate>
    a150:	4601      	mov	r1, r0
    a152:	2800      	cmp	r0, #0
    a154:	d1eb      	bne.n	a12e <CC_PalInit+0xa>
    a156:	f000 f82d 	bl	a1b4 <CC_PalDmaInit>
    a15a:	4604      	mov	r4, r0
    a15c:	b108      	cbz	r0, a162 <CC_PalInit+0x3e>
    a15e:	4620      	mov	r0, r4
    a160:	bd10      	pop	{r4, pc}
    a162:	f000 f83f 	bl	a1e4 <CC_PalPowerSaveModeInit>
    a166:	4620      	mov	r0, r4
    a168:	e7fa      	b.n	a160 <CC_PalInit+0x3c>
    a16a:	bf00      	nop
    a16c:	20000138 	.word	0x20000138
    a170:	20000134 	.word	0x20000134
    a174:	20000130 	.word	0x20000130
    a178:	20000128 	.word	0x20000128
    a17c:	2000012c 	.word	0x2000012c

0000a180 <CC_PalTerminate>:
    a180:	b508      	push	{r3, lr}
    a182:	4808      	ldr	r0, [pc, #32]	; (a1a4 <CC_PalTerminate+0x24>)
    a184:	f000 f824 	bl	a1d0 <CC_PalMutexDestroy>
    a188:	4807      	ldr	r0, [pc, #28]	; (a1a8 <CC_PalTerminate+0x28>)
    a18a:	f000 f821 	bl	a1d0 <CC_PalMutexDestroy>
    a18e:	4807      	ldr	r0, [pc, #28]	; (a1ac <CC_PalTerminate+0x2c>)
    a190:	f000 f81e 	bl	a1d0 <CC_PalMutexDestroy>
    a194:	4806      	ldr	r0, [pc, #24]	; (a1b0 <CC_PalTerminate+0x30>)
    a196:	f000 f81b 	bl	a1d0 <CC_PalMutexDestroy>
    a19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a19e:	f000 b80b 	b.w	a1b8 <CC_PalDmaTerminate>
    a1a2:	bf00      	nop
    a1a4:	20000138 	.word	0x20000138
    a1a8:	20000134 	.word	0x20000134
    a1ac:	20000130 	.word	0x20000130
    a1b0:	2000012c 	.word	0x2000012c

0000a1b4 <CC_PalDmaInit>:
    a1b4:	2000      	movs	r0, #0
    a1b6:	4770      	bx	lr

0000a1b8 <CC_PalDmaTerminate>:
    a1b8:	4770      	bx	lr
    a1ba:	bf00      	nop

0000a1bc <CC_PalMutexCreate>:
    a1bc:	b508      	push	{r3, lr}
    a1be:	4b03      	ldr	r3, [pc, #12]	; (a1cc <CC_PalMutexCreate+0x10>)
    a1c0:	6802      	ldr	r2, [r0, #0]
    a1c2:	681b      	ldr	r3, [r3, #0]
    a1c4:	6810      	ldr	r0, [r2, #0]
    a1c6:	4798      	blx	r3
    a1c8:	2000      	movs	r0, #0
    a1ca:	bd08      	pop	{r3, pc}
    a1cc:	200000f8 	.word	0x200000f8

0000a1d0 <CC_PalMutexDestroy>:
    a1d0:	b508      	push	{r3, lr}
    a1d2:	4b03      	ldr	r3, [pc, #12]	; (a1e0 <CC_PalMutexDestroy+0x10>)
    a1d4:	6802      	ldr	r2, [r0, #0]
    a1d6:	685b      	ldr	r3, [r3, #4]
    a1d8:	6810      	ldr	r0, [r2, #0]
    a1da:	4798      	blx	r3
    a1dc:	2000      	movs	r0, #0
    a1de:	bd08      	pop	{r3, pc}
    a1e0:	200000f8 	.word	0x200000f8

0000a1e4 <CC_PalPowerSaveModeInit>:
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	4c09      	ldr	r4, [pc, #36]	; (a20c <CC_PalPowerSaveModeInit+0x28>)
    a1e8:	4d09      	ldr	r5, [pc, #36]	; (a210 <CC_PalPowerSaveModeInit+0x2c>)
    a1ea:	6920      	ldr	r0, [r4, #16]
    a1ec:	68ab      	ldr	r3, [r5, #8]
    a1ee:	4798      	blx	r3
    a1f0:	b118      	cbz	r0, a1fa <CC_PalPowerSaveModeInit+0x16>
    a1f2:	4b08      	ldr	r3, [pc, #32]	; (a214 <CC_PalPowerSaveModeInit+0x30>)
    a1f4:	4808      	ldr	r0, [pc, #32]	; (a218 <CC_PalPowerSaveModeInit+0x34>)
    a1f6:	685b      	ldr	r3, [r3, #4]
    a1f8:	4798      	blx	r3
    a1fa:	4a08      	ldr	r2, [pc, #32]	; (a21c <CC_PalPowerSaveModeInit+0x38>)
    a1fc:	68eb      	ldr	r3, [r5, #12]
    a1fe:	6920      	ldr	r0, [r4, #16]
    a200:	2100      	movs	r1, #0
    a202:	6011      	str	r1, [r2, #0]
    a204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a208:	4718      	bx	r3
    a20a:	bf00      	nop
    a20c:	200000e4 	.word	0x200000e4
    a210:	200000f8 	.word	0x200000f8
    a214:	200000dc 	.word	0x200000dc
    a218:	0000c3c8 	.word	0x0000c3c8
    a21c:	20001dac 	.word	0x20001dac

0000a220 <CC_PalPowerSaveModeSelect>:
    a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a222:	4d1a      	ldr	r5, [pc, #104]	; (a28c <CC_PalPowerSaveModeSelect+0x6c>)
    a224:	4e1a      	ldr	r6, [pc, #104]	; (a290 <CC_PalPowerSaveModeSelect+0x70>)
    a226:	4604      	mov	r4, r0
    a228:	68b2      	ldr	r2, [r6, #8]
    a22a:	6928      	ldr	r0, [r5, #16]
    a22c:	4790      	blx	r2
    a22e:	b9e8      	cbnz	r0, a26c <CC_PalPowerSaveModeSelect+0x4c>
    a230:	4f18      	ldr	r7, [pc, #96]	; (a294 <CC_PalPowerSaveModeSelect+0x74>)
    a232:	683b      	ldr	r3, [r7, #0]
    a234:	b14c      	cbz	r4, a24a <CC_PalPowerSaveModeSelect+0x2a>
    a236:	b1a3      	cbz	r3, a262 <CC_PalPowerSaveModeSelect+0x42>
    a238:	2b01      	cmp	r3, #1
    a23a:	d019      	beq.n	a270 <CC_PalPowerSaveModeSelect+0x50>
    a23c:	3b01      	subs	r3, #1
    a23e:	603b      	str	r3, [r7, #0]
    a240:	6928      	ldr	r0, [r5, #16]
    a242:	68f3      	ldr	r3, [r6, #12]
    a244:	4798      	blx	r3
    a246:	2000      	movs	r0, #0
    a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a24a:	b943      	cbnz	r3, a25e <CC_PalPowerSaveModeSelect+0x3e>
    a24c:	4a12      	ldr	r2, [pc, #72]	; (a298 <CC_PalPowerSaveModeSelect+0x78>)
    a24e:	2101      	movs	r1, #1
    a250:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    a254:	4911      	ldr	r1, [pc, #68]	; (a29c <CC_PalPowerSaveModeSelect+0x7c>)
    a256:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    a25a:	2a00      	cmp	r2, #0
    a25c:	d1fb      	bne.n	a256 <CC_PalPowerSaveModeSelect+0x36>
    a25e:	3301      	adds	r3, #1
    a260:	603b      	str	r3, [r7, #0]
    a262:	68f3      	ldr	r3, [r6, #12]
    a264:	6928      	ldr	r0, [r5, #16]
    a266:	4798      	blx	r3
    a268:	2000      	movs	r0, #0
    a26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a26c:	480c      	ldr	r0, [pc, #48]	; (a2a0 <CC_PalPowerSaveModeSelect+0x80>)
    a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a270:	4a0a      	ldr	r2, [pc, #40]	; (a29c <CC_PalPowerSaveModeSelect+0x7c>)
    a272:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a276:	2b00      	cmp	r3, #0
    a278:	d1fb      	bne.n	a272 <CC_PalPowerSaveModeSelect+0x52>
    a27a:	4a07      	ldr	r2, [pc, #28]	; (a298 <CC_PalPowerSaveModeSelect+0x78>)
    a27c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a280:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a284:	f7ff ff48 	bl	a118 <CC_HalMaskInterrupt>
    a288:	683b      	ldr	r3, [r7, #0]
    a28a:	e7d7      	b.n	a23c <CC_PalPowerSaveModeSelect+0x1c>
    a28c:	200000e4 	.word	0x200000e4
    a290:	200000f8 	.word	0x200000f8
    a294:	20001dac 	.word	0x20001dac
    a298:	5002a000 	.word	0x5002a000
    a29c:	5002b000 	.word	0x5002b000
    a2a0:	ffff8fe9 	.word	0xffff8fe9

0000a2a4 <is_ptr>:
{
    a2a4:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    a2a6:	2500      	movs	r5, #0
{
    a2a8:	4602      	mov	r2, r0
	bool mod = false;
    a2aa:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    a2ac:	4614      	mov	r4, r2
    a2ae:	f814 3b01 	ldrb.w	r3, [r4], #1
    a2b2:	b90b      	cbnz	r3, a2b8 <is_ptr+0x14>
					return false;
    a2b4:	4618      	mov	r0, r3
    a2b6:	e009      	b.n	a2cc <is_ptr+0x28>
		if (mod) {
    a2b8:	b198      	cbz	r0, a2e2 <is_ptr+0x3e>
			if (cnt == n) {
    a2ba:	428d      	cmp	r5, r1
    a2bc:	d107      	bne.n	a2ce <is_ptr+0x2a>
				if (c == 'p') {
    a2be:	2b70      	cmp	r3, #112	; 0x70
    a2c0:	d004      	beq.n	a2cc <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    a2c2:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    a2c6:	2a3a      	cmp	r2, #58	; 0x3a
    a2c8:	d80b      	bhi.n	a2e2 <is_ptr+0x3e>
					return false;
    a2ca:	2000      	movs	r0, #0
}
    a2cc:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    a2ce:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    a2d2:	2e3a      	cmp	r6, #58	; 0x3a
    a2d4:	d805      	bhi.n	a2e2 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    a2d6:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    a2d8:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    a2da:	1c94      	adds	r4, r2, #2
    a2dc:	2b00      	cmp	r3, #0
    a2de:	d0e9      	beq.n	a2b4 <is_ptr+0x10>
    a2e0:	2000      	movs	r0, #0
		if (c == '%') {
    a2e2:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    a2e4:	bf08      	it	eq
    a2e6:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    a2ea:	4622      	mov	r2, r4
    a2ec:	e7de      	b.n	a2ac <is_ptr+0x8>

0000a2ee <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a2ee:	b40f      	push	{r0, r1, r2, r3}
    a2f0:	b507      	push	{r0, r1, r2, lr}
    a2f2:	a904      	add	r1, sp, #16
    a2f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a2f8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    a2fa:	f000 fd7f 	bl	adfc <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    a2fe:	b003      	add	sp, #12
    a300:	f85d eb04 	ldr.w	lr, [sp], #4
    a304:	b004      	add	sp, #16
    a306:	4770      	bx	lr

0000a308 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a308:	4604      	mov	r4, r0
    a30a:	b508      	push	{r3, lr}
    a30c:	4608      	mov	r0, r1
    a30e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a310:	461a      	mov	r2, r3
    a312:	47a0      	blx	r4
	return z_impl_z_current_get();
    a314:	f7ff fb2a 	bl	996c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a318:	f7fa f82c 	bl	4374 <z_impl_k_thread_abort>

0000a31c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    a31c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    a320:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    a322:	0840      	lsrs	r0, r0, #1
    a324:	4770      	bx	lr

0000a326 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    a326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a328:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    a32a:	f7ff fff7 	bl	a31c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    a32e:	fab0 f080 	clz	r0, r0
    a332:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    a336:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    a33a:	00ca      	lsls	r2, r1, #3
    a33c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    a340:	1d17      	adds	r7, r2, #4
{
    a342:	460c      	mov	r4, r1
    a344:	3206      	adds	r2, #6
    a346:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    a348:	b956      	cbnz	r6, a360 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    a34a:	2101      	movs	r1, #1
    a34c:	fa01 f000 	lsl.w	r0, r1, r0
    a350:	68d9      	ldr	r1, [r3, #12]
    a352:	4301      	orrs	r1, r0
    a354:	60d9      	str	r1, [r3, #12]
		b->next = c;
    a356:	f8cc 4010 	str.w	r4, [ip, #16]
    a35a:	53dd      	strh	r5, [r3, r7]
    a35c:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    a35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    a360:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    a362:	3104      	adds	r1, #4
    a364:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    a366:	53d8      	strh	r0, [r3, r7]
    a368:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a36c:	529e      	strh	r6, [r3, r2]
    a36e:	80c5      	strh	r5, [r0, #6]
    a370:	525d      	strh	r5, [r3, r1]
    a372:	e7f4      	b.n	a35e <free_list_add+0x38>

0000a374 <free_list_remove_bidx>:
{
    a374:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    a376:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    a37a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    a37c:	4299      	cmp	r1, r3
    a37e:	f102 0104 	add.w	r1, r2, #4
    a382:	d10a      	bne.n	a39a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    a384:	2301      	movs	r3, #1
    a386:	fa03 f202 	lsl.w	r2, r3, r2
    a38a:	68c3      	ldr	r3, [r0, #12]
    a38c:	ea23 0302 	bic.w	r3, r3, r2
    a390:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    a392:	2300      	movs	r3, #0
    a394:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    a398:	bd10      	pop	{r4, pc}
    a39a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    a39c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    a3a0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a3a4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    a3a8:	80cb      	strh	r3, [r1, #6]
    a3aa:	8082      	strh	r2, [r0, #4]
}
    a3ac:	e7f4      	b.n	a398 <free_list_remove_bidx+0x24>

0000a3ae <free_list_remove>:
{
    a3ae:	b508      	push	{r3, lr}
    a3b0:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    a3b2:	f7ff ffb3 	bl	a31c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    a3b6:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    a3ba:	f1c2 021f 	rsb	r2, r2, #31
    a3be:	4618      	mov	r0, r3
}
    a3c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    a3c4:	f7ff bfd6 	b.w	a374 <free_list_remove_bidx>

0000a3c8 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a3cc:	fab1 f581 	clz	r5, r1
    a3d0:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    a3d4:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    a3d8:	4603      	mov	r3, r0
	if (b->next) {
    a3da:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    a3de:	460e      	mov	r6, r1
	if (b->next) {
    a3e0:	b1c2      	cbz	r2, a414 <alloc_chunk+0x4c>
    a3e2:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    a3e4:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    a3e8:	4618      	mov	r0, r3
    a3ea:	4621      	mov	r1, r4
    a3ec:	f7ff ff96 	bl	a31c <chunk_size>
    a3f0:	42b0      	cmp	r0, r6
    a3f2:	d306      	bcc.n	a402 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    a3f4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    a3f6:	4618      	mov	r0, r3
    a3f8:	f7ff ffbc 	bl	a374 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    a3fc:	4620      	mov	r0, r4
    a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    a402:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    a406:	3f01      	subs	r7, #1
    a408:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    a40a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    a40e:	d001      	beq.n	a414 <alloc_chunk+0x4c>
    a410:	4282      	cmp	r2, r0
    a412:	d1e7      	bne.n	a3e4 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a414:	f1c5 0220 	rsb	r2, r5, #32
    a418:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a41c:	4094      	lsls	r4, r2
    a41e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    a420:	4014      	ands	r4, r2
    a422:	d0eb      	beq.n	a3fc <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    a424:	fa94 f2a4 	rbit	r2, r4
    a428:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a42c:	1d11      	adds	r1, r2, #4
    a42e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    a432:	4621      	mov	r1, r4
    a434:	e7df      	b.n	a3f6 <alloc_chunk+0x2e>

0000a436 <merge_chunks>:
{
    a436:	b538      	push	{r3, r4, r5, lr}
    a438:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    a43a:	f7ff ff6f 	bl	a31c <chunk_size>
{
    a43e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    a440:	4604      	mov	r4, r0
    a442:	4611      	mov	r1, r2
    a444:	4618      	mov	r0, r3
    a446:	f7ff ff69 	bl	a31c <chunk_size>
		((uint16_t *)cmem)[f] = val;
    a44a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    a44e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a450:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    a452:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    a454:	4618      	mov	r0, r3
    a456:	f7ff ff61 	bl	a31c <chunk_size>
	void *cmem = &buf[c];
    a45a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a45c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    a460:	bd38      	pop	{r3, r4, r5, pc}

0000a462 <split_chunks>:
{
    a462:	b538      	push	{r3, r4, r5, lr}
    a464:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a466:	f7ff ff59 	bl	a31c <chunk_size>
{
    a46a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    a46c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    a46e:	1a51      	subs	r1, r2, r1
    a470:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    a474:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a476:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    a478:	8060      	strh	r0, [r4, #2]
    a47a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a47e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    a480:	8044      	strh	r4, [r0, #2]
    a482:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    a486:	4618      	mov	r0, r3
    a488:	4611      	mov	r1, r2
    a48a:	f7ff ff47 	bl	a31c <chunk_size>
	void *cmem = &buf[c];
    a48e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a490:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    a494:	bd38      	pop	{r3, r4, r5, pc}

0000a496 <free_chunk>:
{
    a496:	b538      	push	{r3, r4, r5, lr}
    a498:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    a49a:	f7ff ff3f 	bl	a31c <chunk_size>
    a49e:	460c      	mov	r4, r1
    a4a0:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    a4a2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a4a6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    a4a8:	07da      	lsls	r2, r3, #31
    a4aa:	d40a      	bmi.n	a4c2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    a4ac:	4628      	mov	r0, r5
    a4ae:	f7ff ff7e 	bl	a3ae <free_list_remove>
	return c + chunk_size(h, c);
    a4b2:	4621      	mov	r1, r4
    a4b4:	4628      	mov	r0, r5
    a4b6:	f7ff ff31 	bl	a31c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    a4ba:	1822      	adds	r2, r4, r0
    a4bc:	4628      	mov	r0, r5
    a4be:	f7ff ffba 	bl	a436 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    a4c2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    a4c6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    a4c8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a4cc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    a4ce:	07db      	lsls	r3, r3, #31
    a4d0:	d40c      	bmi.n	a4ec <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    a4d2:	4628      	mov	r0, r5
    a4d4:	f7ff ff6b 	bl	a3ae <free_list_remove>
		return ((uint16_t *)cmem)[f];
    a4d8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    a4dc:	4622      	mov	r2, r4
    a4de:	1a61      	subs	r1, r4, r1
    a4e0:	4628      	mov	r0, r5
    a4e2:	f7ff ffa8 	bl	a436 <merge_chunks>
    a4e6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    a4ea:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    a4ec:	4621      	mov	r1, r4
    a4ee:	4628      	mov	r0, r5
}
    a4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    a4f4:	f7ff bf17 	b.w	a326 <free_list_add>

0000a4f8 <sys_heap_free>:
	if (mem == NULL) {
    a4f8:	b161      	cbz	r1, a514 <sys_heap_free+0x1c>
    a4fa:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a4fc:	3904      	subs	r1, #4
    a4fe:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    a500:	f021 0307 	bic.w	r3, r1, #7
    a504:	4403      	add	r3, r0
	free_chunk(h, c);
    a506:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a508:	885a      	ldrh	r2, [r3, #2]
    a50a:	f022 0201 	bic.w	r2, r2, #1
    a50e:	805a      	strh	r2, [r3, #2]
    a510:	f7ff bfc1 	b.w	a496 <free_chunk>
}
    a514:	4770      	bx	lr

0000a516 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    a516:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a518:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    a51a:	b909      	cbnz	r1, a520 <sys_heap_alloc+0xa>
		return NULL;
    a51c:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    a51e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a520:	68ab      	ldr	r3, [r5, #8]
    a522:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a526:	d9f9      	bls.n	a51c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a528:	310b      	adds	r1, #11
    a52a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a52c:	4621      	mov	r1, r4
    a52e:	4628      	mov	r0, r5
    a530:	f7ff ff4a 	bl	a3c8 <alloc_chunk>
	if (c == 0U) {
    a534:	4606      	mov	r6, r0
    a536:	2800      	cmp	r0, #0
    a538:	d0f0      	beq.n	a51c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a53a:	4601      	mov	r1, r0
    a53c:	4628      	mov	r0, r5
    a53e:	f7ff feed 	bl	a31c <chunk_size>
    a542:	42a0      	cmp	r0, r4
    a544:	d907      	bls.n	a556 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    a546:	1932      	adds	r2, r6, r4
    a548:	4628      	mov	r0, r5
    a54a:	f7ff ff8a 	bl	a462 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a54e:	4611      	mov	r1, r2
    a550:	4628      	mov	r0, r5
    a552:	f7ff fee8 	bl	a326 <free_list_add>
	void *cmem = &buf[c];
    a556:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a55a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a55c:	8853      	ldrh	r3, [r2, #2]
    a55e:	f043 0301 	orr.w	r3, r3, #1
    a562:	8053      	strh	r3, [r2, #2]
    a564:	3004      	adds	r0, #4
	return mem;
    a566:	e7da      	b.n	a51e <sys_heap_alloc+0x8>

0000a568 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a56c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    a570:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    a574:	6806      	ldr	r6, [r0, #0]
{
    a576:	460f      	mov	r7, r1
    a578:	4614      	mov	r4, r2
	if (align != rew) {
    a57a:	d00c      	beq.n	a596 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    a57c:	424b      	negs	r3, r1
    a57e:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    a580:	2b04      	cmp	r3, #4
    a582:	461a      	mov	r2, r3
    a584:	464f      	mov	r7, r9
    a586:	bf28      	it	cs
    a588:	2204      	movcs	r2, #4
	rew = align & -align;
    a58a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    a58c:	b964      	cbnz	r4, a5a8 <sys_heap_aligned_alloc+0x40>
		return NULL;
    a58e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    a590:	4628      	mov	r0, r5
    a592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    a596:	2904      	cmp	r1, #4
    a598:	d804      	bhi.n	a5a4 <sys_heap_aligned_alloc+0x3c>
}
    a59a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    a59e:	4611      	mov	r1, r2
    a5a0:	f7ff bfb9 	b.w	a516 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    a5a4:	2204      	movs	r2, #4
    a5a6:	e7f1      	b.n	a58c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a5a8:	68b3      	ldr	r3, [r6, #8]
    a5aa:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    a5ae:	d9ee      	bls.n	a58e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a5b0:	f104 010b 	add.w	r1, r4, #11
    a5b4:	4439      	add	r1, r7
    a5b6:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a5b8:	08c9      	lsrs	r1, r1, #3
    a5ba:	4630      	mov	r0, r6
    a5bc:	f7ff ff04 	bl	a3c8 <alloc_chunk>
	if (c0 == 0) {
    a5c0:	4680      	mov	r8, r0
    a5c2:	2800      	cmp	r0, #0
    a5c4:	d0e3      	beq.n	a58e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    a5c6:	f109 0504 	add.w	r5, r9, #4
    a5ca:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    a5ce:	1e7b      	subs	r3, r7, #1
    a5d0:	4435      	add	r5, r6
    a5d2:	441d      	add	r5, r3
    a5d4:	427f      	negs	r7, r7
    a5d6:	403d      	ands	r5, r7
    a5d8:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a5dc:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a5de:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a5e0:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a5e2:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a5e4:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a5e8:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    a5ea:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a5ee:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a5f2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a5f6:	d208      	bcs.n	a60a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    a5f8:	4601      	mov	r1, r0
    a5fa:	463a      	mov	r2, r7
    a5fc:	4630      	mov	r0, r6
    a5fe:	f7ff ff30 	bl	a462 <split_chunks>
		free_list_add(h, c0);
    a602:	4641      	mov	r1, r8
    a604:	4630      	mov	r0, r6
    a606:	f7ff fe8e 	bl	a326 <free_list_add>
	return c + chunk_size(h, c);
    a60a:	4639      	mov	r1, r7
    a60c:	4630      	mov	r0, r6
    a60e:	f7ff fe85 	bl	a31c <chunk_size>
    a612:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a614:	4284      	cmp	r4, r0
    a616:	d207      	bcs.n	a628 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    a618:	4630      	mov	r0, r6
    a61a:	4622      	mov	r2, r4
    a61c:	f7ff ff21 	bl	a462 <split_chunks>
		free_list_add(h, c_end);
    a620:	4621      	mov	r1, r4
    a622:	4630      	mov	r0, r6
    a624:	f7ff fe7f 	bl	a326 <free_list_add>
	void *cmem = &buf[c];
    a628:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a62c:	8873      	ldrh	r3, [r6, #2]
    a62e:	f043 0301 	orr.w	r3, r3, #1
    a632:	8073      	strh	r3, [r6, #2]
    a634:	e7ac      	b.n	a590 <sys_heap_aligned_alloc+0x28>

0000a636 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    a636:	3a04      	subs	r2, #4
{
    a638:	b4f0      	push	{r4, r5, r6, r7}
    a63a:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a63c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a63e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a640:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a644:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a648:	1a0e      	subs	r6, r1, r0
    a64a:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    a64c:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    a64e:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    a652:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a654:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    a658:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    a65a:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a65c:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    a65e:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a662:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a664:	f1c2 0220 	rsb	r2, r2, #32
    a668:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    a66a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    a66e:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    a672:	4294      	cmp	r4, r2
    a674:	d1fb      	bne.n	a66e <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a676:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a678:	f042 0201 	orr.w	r2, r2, #1
    a67c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    a67e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a682:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a684:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    a686:	8007      	strh	r7, [r0, #0]
    a688:	8065      	strh	r5, [r4, #2]
    a68a:	1984      	adds	r4, r0, r6
    a68c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    a690:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    a694:	8067      	strh	r7, [r4, #2]
    a696:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a698:	885a      	ldrh	r2, [r3, #2]
    a69a:	f042 0201 	orr.w	r2, r2, #1
    a69e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    a6a0:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    a6a2:	f7ff be40 	b.w	a326 <free_list_add>

0000a6a6 <sys_slist_find_and_remove>:
	return list->head;
    a6a6:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a6a8:	2200      	movs	r2, #0
    a6aa:	b90b      	cbnz	r3, a6b0 <sys_slist_find_and_remove+0xa>
    a6ac:	4618      	mov	r0, r3
    a6ae:	4770      	bx	lr
    a6b0:	428b      	cmp	r3, r1
    a6b2:	d110      	bne.n	a6d6 <sys_slist_find_and_remove+0x30>
	return node->next;
    a6b4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    a6b6:	b942      	cbnz	r2, a6ca <sys_slist_find_and_remove+0x24>
    a6b8:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    a6ba:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    a6bc:	4291      	cmp	r1, r2
    a6be:	d100      	bne.n	a6c2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    a6c0:	6043      	str	r3, [r0, #4]
	parent->next = child;
    a6c2:	2300      	movs	r3, #0
    a6c4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a6c6:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    a6c8:	4770      	bx	lr
	parent->next = child;
    a6ca:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    a6cc:	6843      	ldr	r3, [r0, #4]
    a6ce:	4299      	cmp	r1, r3
	list->tail = node;
    a6d0:	bf08      	it	eq
    a6d2:	6042      	streq	r2, [r0, #4]
}
    a6d4:	e7f5      	b.n	a6c2 <sys_slist_find_and_remove+0x1c>
	return node->next;
    a6d6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a6d8:	681b      	ldr	r3, [r3, #0]
    a6da:	e7e6      	b.n	a6aa <sys_slist_find_and_remove+0x4>

0000a6dc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a6dc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    a6de:	f013 0307 	ands.w	r3, r3, #7
    a6e2:	d105      	bne.n	a6f0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a6e4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	bf0c      	ite	eq
    a6ea:	2000      	moveq	r0, #0
    a6ec:	2003      	movne	r0, #3
    a6ee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a6f0:	2b02      	cmp	r3, #2
    a6f2:	d105      	bne.n	a700 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a6f4:	8b40      	ldrh	r0, [r0, #26]
    a6f6:	fab0 f080 	clz	r0, r0
    a6fa:	0940      	lsrs	r0, r0, #5
    a6fc:	0080      	lsls	r0, r0, #2
    a6fe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a700:	2b01      	cmp	r3, #1
    a702:	d105      	bne.n	a710 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a704:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a706:	2b00      	cmp	r3, #0
    a708:	bf0c      	ite	eq
    a70a:	2000      	moveq	r0, #0
    a70c:	2005      	movne	r0, #5
    a70e:	4770      	bx	lr
	int evt = EVT_NOP;
    a710:	2000      	movs	r0, #0
}
    a712:	4770      	bx	lr

0000a714 <validate_args>:
{
    a714:	b510      	push	{r4, lr}
    a716:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a718:	b100      	cbz	r0, a71c <validate_args+0x8>
    a71a:	b911      	cbnz	r1, a722 <validate_args+0xe>
		return -EINVAL;
    a71c:	f06f 0015 	mvn.w	r0, #21
}
    a720:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    a722:	1d08      	adds	r0, r1, #4
    a724:	f000 f8d6 	bl	a8d4 <sys_notify_validate>
	if ((rv == 0)
    a728:	2800      	cmp	r0, #0
    a72a:	d1f9      	bne.n	a720 <validate_args+0xc>
	    && ((cli->notify.flags
    a72c:	68a3      	ldr	r3, [r4, #8]
    a72e:	2b03      	cmp	r3, #3
    a730:	d9f6      	bls.n	a720 <validate_args+0xc>
    a732:	e7f3      	b.n	a71c <validate_args+0x8>

0000a734 <notify_one>:
{
    a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a738:	460d      	mov	r5, r1
    a73a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a73c:	4619      	mov	r1, r3
    a73e:	1d28      	adds	r0, r5, #4
{
    a740:	4690      	mov	r8, r2
    a742:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a744:	f000 f8d7 	bl	a8f6 <sys_notify_finalize>
	if (cb) {
    a748:	4604      	mov	r4, r0
    a74a:	b138      	cbz	r0, a75c <notify_one+0x28>
		cb(mgr, cli, state, res);
    a74c:	4633      	mov	r3, r6
    a74e:	4642      	mov	r2, r8
    a750:	4629      	mov	r1, r5
    a752:	4638      	mov	r0, r7
    a754:	46a4      	mov	ip, r4
}
    a756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a75a:	4760      	bx	ip
}
    a75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a760 <transition_complete>:
{
    a760:	b410      	push	{r4}
	__asm__ volatile(
    a762:	f04f 0420 	mov.w	r4, #32
    a766:	f3ef 8211 	mrs	r2, BASEPRI
    a76a:	f384 8812 	msr	BASEPRI_MAX, r4
    a76e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    a772:	6141      	str	r1, [r0, #20]
}
    a774:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    a776:	2101      	movs	r1, #1
    a778:	f7f7 bb00 	b.w	1d7c <process_event>

0000a77c <onoff_manager_init>:
{
    a77c:	b538      	push	{r3, r4, r5, lr}
    a77e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a780:	4605      	mov	r5, r0
    a782:	b158      	cbz	r0, a79c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a784:	b151      	cbz	r1, a79c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a786:	680b      	ldr	r3, [r1, #0]
    a788:	b143      	cbz	r3, a79c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a78a:	684b      	ldr	r3, [r1, #4]
    a78c:	b133      	cbz	r3, a79c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a78e:	221c      	movs	r2, #28
    a790:	2100      	movs	r1, #0
    a792:	f000 fbfd 	bl	af90 <memset>
    a796:	612c      	str	r4, [r5, #16]
	return 0;
    a798:	2000      	movs	r0, #0
}
    a79a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a79c:	f06f 0015 	mvn.w	r0, #21
    a7a0:	e7fb      	b.n	a79a <onoff_manager_init+0x1e>

0000a7a2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a7a2:	b570      	push	{r4, r5, r6, lr}
    a7a4:	4605      	mov	r5, r0
    a7a6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a7a8:	f7ff ffb4 	bl	a714 <validate_args>

	if (rv < 0) {
    a7ac:	1e04      	subs	r4, r0, #0
    a7ae:	db15      	blt.n	a7dc <onoff_request+0x3a>
    a7b0:	f04f 0320 	mov.w	r3, #32
    a7b4:	f3ef 8211 	mrs	r2, BASEPRI
    a7b8:	f383 8812 	msr	BASEPRI_MAX, r3
    a7bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a7c0:	8b6b      	ldrh	r3, [r5, #26]
    a7c2:	8b2c      	ldrh	r4, [r5, #24]
    a7c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a7c8:	428b      	cmp	r3, r1
    a7ca:	f004 0407 	and.w	r4, r4, #7
    a7ce:	d107      	bne.n	a7e0 <onoff_request+0x3e>
	__asm__ volatile(
    a7d0:	f382 8811 	msr	BASEPRI, r2
    a7d4:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    a7d8:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    a7dc:	4620      	mov	r0, r4
    a7de:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    a7e0:	2c02      	cmp	r4, #2
    a7e2:	d10c      	bne.n	a7fe <onoff_request+0x5c>
		mgr->refs += 1U;
    a7e4:	3301      	adds	r3, #1
    a7e6:	836b      	strh	r3, [r5, #26]
    a7e8:	f382 8811 	msr	BASEPRI, r2
    a7ec:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    a7f0:	2300      	movs	r3, #0
    a7f2:	4622      	mov	r2, r4
    a7f4:	4631      	mov	r1, r6
    a7f6:	4628      	mov	r0, r5
    a7f8:	f7ff ff9c 	bl	a734 <notify_one>
    a7fc:	e7ee      	b.n	a7dc <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    a7fe:	2c06      	cmp	r4, #6
    a800:	d814      	bhi.n	a82c <onoff_request+0x8a>
    a802:	e8df f004 	tbb	[pc, r4]
    a806:	1304      	.short	0x1304
    a808:	1a041313 	.word	0x1a041313
    a80c:	04          	.byte	0x04
    a80d:	00          	.byte	0x00
	parent->next = child;
    a80e:	2300      	movs	r3, #0
    a810:	6033      	str	r3, [r6, #0]
	return list->tail;
    a812:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    a814:	b93b      	cbnz	r3, a826 <onoff_request+0x84>
	list->head = node;
    a816:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    a81a:	b9ac      	cbnz	r4, a848 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    a81c:	2102      	movs	r1, #2
    a81e:	4628      	mov	r0, r5
    a820:	f7f7 faac 	bl	1d7c <process_event>
    a824:	e7da      	b.n	a7dc <onoff_request+0x3a>
	parent->next = child;
    a826:	601e      	str	r6, [r3, #0]
	list->tail = node;
    a828:	606e      	str	r6, [r5, #4]
}
    a82a:	e7f6      	b.n	a81a <onoff_request+0x78>
    a82c:	f382 8811 	msr	BASEPRI, r2
    a830:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    a834:	f06f 0404 	mvn.w	r4, #4
    a838:	e7d0      	b.n	a7dc <onoff_request+0x3a>
    a83a:	f382 8811 	msr	BASEPRI, r2
    a83e:	f3bf 8f6f 	isb	sy
    a842:	f06f 0485 	mvn.w	r4, #133	; 0x85
    a846:	e7c9      	b.n	a7dc <onoff_request+0x3a>
    a848:	f382 8811 	msr	BASEPRI, r2
    a84c:	f3bf 8f6f 	isb	sy
		if (notify) {
    a850:	e7c4      	b.n	a7dc <onoff_request+0x3a>

0000a852 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    a852:	b510      	push	{r4, lr}
	__asm__ volatile(
    a854:	f04f 0320 	mov.w	r3, #32
    a858:	f3ef 8211 	mrs	r2, BASEPRI
    a85c:	f383 8812 	msr	BASEPRI_MAX, r3
    a860:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a864:	8b04      	ldrh	r4, [r0, #24]
    a866:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    a86a:	2c02      	cmp	r4, #2
    a86c:	d00a      	beq.n	a884 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    a86e:	2c01      	cmp	r4, #1
    a870:	bf0c      	ite	eq
    a872:	f06f 0004 	mvneq.w	r0, #4
    a876:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    a87a:	f382 8811 	msr	BASEPRI, r2
    a87e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    a882:	e008      	b.n	a896 <onoff_release+0x44>
	mgr->refs -= 1U;
    a884:	8b43      	ldrh	r3, [r0, #26]
    a886:	3b01      	subs	r3, #1
    a888:	b29b      	uxth	r3, r3
    a88a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    a88c:	b923      	cbnz	r3, a898 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    a88e:	4621      	mov	r1, r4
    a890:	f7f7 fa74 	bl	1d7c <process_event>
	int rv = state;
    a894:	4620      	mov	r0, r4
}
    a896:	bd10      	pop	{r4, pc}
	int rv = state;
    a898:	4620      	mov	r0, r4
    a89a:	e7ee      	b.n	a87a <onoff_release+0x28>

0000a89c <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    a89c:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    a89e:	b1b0      	cbz	r0, a8ce <onoff_cancel+0x32>
    a8a0:	b1a9      	cbz	r1, a8ce <onoff_cancel+0x32>
	__asm__ volatile(
    a8a2:	f04f 0220 	mov.w	r2, #32
    a8a6:	f3ef 8511 	mrs	r5, BASEPRI
    a8aa:	f382 8812 	msr	BASEPRI_MAX, r2
    a8ae:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a8b2:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    a8b4:	f7ff fef7 	bl	a6a6 <sys_slist_find_and_remove>
    a8b8:	b130      	cbz	r0, a8c8 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    a8ba:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    a8be:	f385 8811 	msr	BASEPRI, r5
    a8c2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    a8c6:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    a8c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a8cc:	e7f7      	b.n	a8be <onoff_cancel+0x22>
		return -EINVAL;
    a8ce:	f06f 0015 	mvn.w	r0, #21
    a8d2:	e7f8      	b.n	a8c6 <onoff_cancel+0x2a>

0000a8d4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    a8d4:	4603      	mov	r3, r0
    a8d6:	b158      	cbz	r0, a8f0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a8d8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a8da:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    a8de:	2a01      	cmp	r2, #1
    a8e0:	d003      	beq.n	a8ea <sys_notify_validate+0x16>
    a8e2:	2a03      	cmp	r2, #3
    a8e4:	d104      	bne.n	a8f0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    a8e6:	6802      	ldr	r2, [r0, #0]
    a8e8:	b112      	cbz	r2, a8f0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    a8ea:	2000      	movs	r0, #0
    a8ec:	6098      	str	r0, [r3, #8]
    a8ee:	4770      	bx	lr
    a8f0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    a8f4:	4770      	bx	lr

0000a8f6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a8f6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    a8f8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    a8fa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    a8fe:	2a03      	cmp	r2, #3
    a900:	f04f 0200 	mov.w	r2, #0
{
    a904:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a906:	bf0c      	ite	eq
    a908:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    a90a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a90c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a90e:	4770      	bx	lr

0000a910 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    a910:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    a912:	6903      	ldr	r3, [r0, #16]
{
    a914:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    a916:	f013 0008 	ands.w	r0, r3, #8
    a91a:	d109      	bne.n	a930 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    a91c:	6813      	ldr	r3, [r2, #0]
    a91e:	68d4      	ldr	r4, [r2, #12]
    a920:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    a922:	bf97      	itett	ls
    a924:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    a926:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    a928:	1ad3      	subls	r3, r2, r3

	return true;
    a92a:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    a92c:	600b      	str	r3, [r1, #0]
}
    a92e:	bd10      	pop	{r4, pc}
    a930:	2300      	movs	r3, #0
		return false;
    a932:	4618      	mov	r0, r3
    a934:	e7fa      	b.n	a92c <free_space+0x1c>

0000a936 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    a936:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    a938:	a901      	add	r1, sp, #4
{
    a93a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    a93c:	f7ff ffe8 	bl	a910 <free_space>
    a940:	b120      	cbz	r0, a94c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    a942:	9b01      	ldr	r3, [sp, #4]
    a944:	68e2      	ldr	r2, [r4, #12]
    a946:	3b01      	subs	r3, #1
    a948:	4413      	add	r3, r2
    a94a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    a94c:	6a20      	ldr	r0, [r4, #32]
    a94e:	9b01      	ldr	r3, [sp, #4]
    a950:	1ac0      	subs	r0, r0, r3
}
    a952:	3801      	subs	r0, #1
    a954:	b002      	add	sp, #8
    a956:	bd10      	pop	{r4, pc}

0000a958 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    a958:	b510      	push	{r4, lr}
    a95a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    a95c:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a95e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    a960:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a962:	07d2      	lsls	r2, r2, #31
    a964:	d502      	bpl.n	a96c <idx_inc+0x14>
		return i & (buffer->size - 1);
    a966:	3b01      	subs	r3, #1
    a968:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    a96a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    a96c:	4298      	cmp	r0, r3
    a96e:	bf28      	it	cs
    a970:	1ac0      	subcs	r0, r0, r3
    a972:	e7fa      	b.n	a96a <idx_inc+0x12>

0000a974 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    a974:	b510      	push	{r4, lr}
    a976:	4604      	mov	r4, r0
    a978:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a97a:	68c1      	ldr	r1, [r0, #12]
    a97c:	f7ff ffec 	bl	a958 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    a980:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a982:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    a984:	f023 0308 	bic.w	r3, r3, #8
    a988:	6123      	str	r3, [r4, #16]
}
    a98a:	bd10      	pop	{r4, pc}

0000a98c <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    a98c:	b538      	push	{r3, r4, r5, lr}
    a98e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a990:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    a992:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a994:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    a996:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a99a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    a99e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a9a0:	6801      	ldr	r1, [r0, #0]
    a9a2:	462a      	mov	r2, r5
    a9a4:	f7ff ffd8 	bl	a958 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    a9a8:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a9aa:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a9ac:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    a9ae:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    a9b0:	bf02      	ittt	eq
    a9b2:	6923      	ldreq	r3, [r4, #16]
    a9b4:	f043 0308 	orreq.w	r3, r3, #8
    a9b8:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a9ba:	462a      	mov	r2, r5
    a9bc:	4620      	mov	r0, r4
    a9be:	f7ff ffcb 	bl	a958 <idx_inc>
    a9c2:	6060      	str	r0, [r4, #4]
}
    a9c4:	bd38      	pop	{r3, r4, r5, pc}

0000a9c6 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    a9c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a9ca:	68c7      	ldr	r7, [r0, #12]
    a9cc:	69c6      	ldr	r6, [r0, #28]
{
    a9ce:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    a9d0:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    a9d4:	f003 0303 	and.w	r3, r3, #3
    a9d8:	2b02      	cmp	r3, #2
{
    a9da:	4604      	mov	r4, r0
    a9dc:	4688      	mov	r8, r1
    a9de:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a9e0:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    a9e4:	f04f 0300 	mov.w	r3, #0
    a9e8:	d009      	beq.n	a9fe <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    a9ea:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    a9ec:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    a9f0:	6923      	ldr	r3, [r4, #16]
    a9f2:	0799      	lsls	r1, r3, #30
    a9f4:	d410      	bmi.n	aa18 <drop_item_locked+0x52>
		return false;
    a9f6:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    a9f8:	b003      	add	sp, #12
    a9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    a9fe:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    aa02:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    aa04:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    aa06:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    aa0a:	d0f1      	beq.n	a9f0 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    aa0c:	f7ff ffb2 	bl	a974 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    aa10:	68e3      	ldr	r3, [r4, #12]
    aa12:	60a3      	str	r3, [r4, #8]
		return true;
    aa14:	2001      	movs	r0, #1
    aa16:	e7ef      	b.n	a9f8 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    aa18:	69a3      	ldr	r3, [r4, #24]
    aa1a:	4650      	mov	r0, sl
    aa1c:	4798      	blx	r3
	return item->hdr.valid;
    aa1e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    aa22:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    aa24:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    aa26:	d5e6      	bpl.n	a9f6 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    aa28:	f013 0302 	ands.w	r3, r3, #2
    aa2c:	d01d      	beq.n	aa6a <drop_item_locked+0xa4>
		if (free_wlen) {
    aa2e:	f1b8 0f00 	cmp.w	r8, #0
    aa32:	d003      	beq.n	aa3c <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    aa34:	4641      	mov	r1, r8
    aa36:	4620      	mov	r0, r4
    aa38:	f7ff ffa8 	bl	a98c <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    aa3c:	6861      	ldr	r1, [r4, #4]
    aa3e:	462a      	mov	r2, r5
    aa40:	4620      	mov	r0, r4
    aa42:	f7ff ff89 	bl	a958 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    aa46:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    aa4a:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    aa4c:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    aa4e:	d104      	bne.n	aa5a <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    aa50:	462a      	mov	r2, r5
    aa52:	4620      	mov	r0, r4
    aa54:	f7ff ff80 	bl	a958 <idx_inc>
    aa58:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    aa5a:	68a3      	ldr	r3, [r4, #8]
    aa5c:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    aa5e:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    aa60:	6923      	ldr	r3, [r4, #16]
    aa62:	f043 0308 	orr.w	r3, r3, #8
    aa66:	6123      	str	r3, [r4, #16]
    aa68:	e7d4      	b.n	aa14 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    aa6a:	4601      	mov	r1, r0
    aa6c:	4620      	mov	r0, r4
    aa6e:	9301      	str	r3, [sp, #4]
    aa70:	f7ff ff80 	bl	a974 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    aa74:	68e2      	ldr	r2, [r4, #12]
    aa76:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    aa78:	f1b8 0f00 	cmp.w	r8, #0
    aa7c:	d004      	beq.n	aa88 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    aa7e:	6821      	ldr	r1, [r4, #0]
    aa80:	69e2      	ldr	r2, [r4, #28]
    aa82:	9b01      	ldr	r3, [sp, #4]
    aa84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    aa88:	eb05 0208 	add.w	r2, r5, r8
    aa8c:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    aa90:	6821      	ldr	r1, [r4, #0]
    aa92:	4620      	mov	r0, r4
    aa94:	f7ff ff60 	bl	a958 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    aa98:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    aa9a:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    aa9c:	f043 0308 	orr.w	r3, r3, #8
    aaa0:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    aaa2:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    aaa6:	f36f 0300 	bfc	r3, #0, #1
    aaaa:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    aaae:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    aab2:	e7af      	b.n	aa14 <drop_item_locked+0x4e>

0000aab4 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    aab4:	b570      	push	{r4, r5, r6, lr}
    aab6:	4604      	mov	r4, r0
    aab8:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    aaba:	f7ff ff4d 	bl	a958 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    aabe:	6823      	ldr	r3, [r4, #0]
    aac0:	4283      	cmp	r3, r0
    aac2:	d105      	bne.n	aad0 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    aac4:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    aac6:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    aac8:	f023 0308 	bic.w	r3, r3, #8
    aacc:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    aace:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    aad0:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    aad2:	00ab      	lsls	r3, r5, #2
    aad4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    aad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    aadc:	4620      	mov	r0, r4
    aade:	6861      	ldr	r1, [r4, #4]
    aae0:	462a      	mov	r2, r5
    aae2:	f7ff ff39 	bl	a958 <idx_inc>
    aae6:	6060      	str	r0, [r4, #4]
    aae8:	e7f1      	b.n	aace <post_drop_action+0x1a>

0000aaea <max_utilization_update>:
{
    aaea:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    aaec:	6903      	ldr	r3, [r0, #16]
    aaee:	075b      	lsls	r3, r3, #29
{
    aaf0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    aaf2:	d506      	bpl.n	ab02 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    aaf4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    aaf6:	f7ff ff1e 	bl	a936 <get_usage>
    aafa:	4285      	cmp	r5, r0
    aafc:	bf2c      	ite	cs
    aafe:	6265      	strcs	r5, [r4, #36]	; 0x24
    ab00:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    ab02:	bd38      	pop	{r3, r4, r5, pc}

0000ab04 <mpsc_pbuf_init>:
{
    ab04:	b538      	push	{r3, r4, r5, lr}
    ab06:	460d      	mov	r5, r1
    ab08:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    ab0a:	221c      	movs	r2, #28
    ab0c:	2100      	movs	r1, #0
    ab0e:	f000 fa3f 	bl	af90 <memset>
	buffer->get_wlen = cfg->get_wlen;
    ab12:	68eb      	ldr	r3, [r5, #12]
    ab14:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    ab16:	68ab      	ldr	r3, [r5, #8]
    ab18:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    ab1a:	682b      	ldr	r3, [r5, #0]
    ab1c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    ab1e:	686b      	ldr	r3, [r5, #4]
    ab20:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    ab22:	2200      	movs	r2, #0
    ab24:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    ab26:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    ab28:	b123      	cbz	r3, ab34 <mpsc_pbuf_init+0x30>
    ab2a:	1e59      	subs	r1, r3, #1
    ab2c:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    ab2e:	bf08      	it	eq
    ab30:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    ab34:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ab36:	2201      	movs	r2, #1
    ab38:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ab3c:	2100      	movs	r1, #0
}
    ab3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ab42:	f000 bec5 	b.w	b8d0 <z_impl_k_sem_init>

0000ab46 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    ab46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab4a:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    ab4c:	2500      	movs	r5, #0
{
    ab4e:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    ab50:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    ab52:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    ab54:	428b      	cmp	r3, r1
{
    ab56:	4604      	mov	r4, r0
    ab58:	460e      	mov	r6, r1
    ab5a:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    ab5c:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    ab5e:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    ab60:	d33a      	bcc.n	abd8 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    ab62:	f04f 0320 	mov.w	r3, #32
    ab66:	f3ef 8b11 	mrs	fp, BASEPRI
    ab6a:	f383 8812 	msr	BASEPRI_MAX, r3
    ab6e:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    ab72:	9a05      	ldr	r2, [sp, #20]
    ab74:	46d8      	mov	r8, fp
    ab76:	b12a      	cbz	r2, ab84 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    ab78:	4629      	mov	r1, r5
    ab7a:	4620      	mov	r0, r4
    ab7c:	f7ff ff9a 	bl	aab4 <post_drop_action>
			tmp_wr_idx_shift = 0;
    ab80:	2300      	movs	r3, #0
    ab82:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    ab84:	a904      	add	r1, sp, #16
    ab86:	4620      	mov	r0, r4
    ab88:	f7ff fec2 	bl	a910 <free_space>

		if (free_wlen >= wlen) {
    ab8c:	9904      	ldr	r1, [sp, #16]
    ab8e:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    ab90:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    ab92:	d32a      	bcc.n	abea <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    ab94:	6822      	ldr	r2, [r4, #0]
			item =
    ab96:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    ab98:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    ab9c:	f021 0103 	bic.w	r1, r1, #3
    aba0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    aba4:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    aba8:	6821      	ldr	r1, [r4, #0]
    abaa:	4632      	mov	r2, r6
    abac:	4620      	mov	r0, r4
    abae:	f7ff fed3 	bl	a958 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    abb2:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    abb4:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    abb6:	4298      	cmp	r0, r3
    abb8:	d012      	beq.n	abe0 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    abba:	2700      	movs	r7, #0
	__asm__ volatile(
    abbc:	f388 8811 	msr	BASEPRI, r8
    abc0:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    abc4:	9903      	ldr	r1, [sp, #12]
    abc6:	b129      	cbz	r1, abd4 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    abc8:	6962      	ldr	r2, [r4, #20]
    abca:	b10a      	cbz	r2, abd0 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    abcc:	4620      	mov	r0, r4
    abce:	4790      	blx	r2
			}
			dropped_item = NULL;
    abd0:	2300      	movs	r3, #0
    abd2:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    abd4:	2f00      	cmp	r7, #0
    abd6:	d1c4      	bne.n	ab62 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    abd8:	4648      	mov	r0, r9
    abda:	b007      	add	sp, #28
    abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    abe0:	6923      	ldr	r3, [r4, #16]
    abe2:	f043 0308 	orr.w	r3, r3, #8
    abe6:	6123      	str	r3, [r4, #16]
    abe8:	e7e7      	b.n	abba <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    abea:	b118      	cbz	r0, abf4 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    abec:	4620      	mov	r0, r4
    abee:	f7ff fecd 	bl	a98c <add_skip_item>
			cont = true;
    abf2:	e7e3      	b.n	abbc <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    abf4:	9b00      	ldr	r3, [sp, #0]
    abf6:	ea5a 0303 	orrs.w	r3, sl, r3
    abfa:	d01a      	beq.n	ac32 <mpsc_pbuf_alloc+0xec>
    abfc:	9101      	str	r1, [sp, #4]
    abfe:	f000 fdcb 	bl	b798 <k_is_in_isr>
    ac02:	9901      	ldr	r1, [sp, #4]
    ac04:	b9a8      	cbnz	r0, ac32 <mpsc_pbuf_alloc+0xec>
    ac06:	f38b 8811 	msr	BASEPRI, fp
    ac0a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    ac0e:	9b00      	ldr	r3, [sp, #0]
    ac10:	4652      	mov	r2, sl
    ac12:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ac16:	f7fe fa3d 	bl	9094 <z_impl_k_sem_take>
	__asm__ volatile(
    ac1a:	f04f 0320 	mov.w	r3, #32
    ac1e:	f3ef 8811 	mrs	r8, BASEPRI
    ac22:	f383 8812 	msr	BASEPRI_MAX, r3
    ac26:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    ac2a:	fab0 f780 	clz	r7, r0
    ac2e:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    ac30:	e7c4      	b.n	abbc <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    ac32:	ab05      	add	r3, sp, #20
    ac34:	aa03      	add	r2, sp, #12
    ac36:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    ac38:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    ac3a:	f7ff fec4 	bl	a9c6 <drop_item_locked>
    ac3e:	4607      	mov	r7, r0
    ac40:	e7bc      	b.n	abbc <mpsc_pbuf_alloc+0x76>

0000ac42 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    ac42:	b570      	push	{r4, r5, r6, lr}
    ac44:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ac46:	6983      	ldr	r3, [r0, #24]
    ac48:	4608      	mov	r0, r1
{
    ac4a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ac4c:	4798      	blx	r3
    ac4e:	4602      	mov	r2, r0
    ac50:	f04f 0320 	mov.w	r3, #32
    ac54:	f3ef 8611 	mrs	r6, BASEPRI
    ac58:	f383 8812 	msr	BASEPRI_MAX, r3
    ac5c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    ac60:	782b      	ldrb	r3, [r5, #0]
    ac62:	f043 0301 	orr.w	r3, r3, #1
    ac66:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    ac68:	6861      	ldr	r1, [r4, #4]
    ac6a:	4620      	mov	r0, r4
    ac6c:	f7ff fe74 	bl	a958 <idx_inc>
    ac70:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    ac72:	4620      	mov	r0, r4
    ac74:	f7ff ff39 	bl	aaea <max_utilization_update>
	__asm__ volatile(
    ac78:	f386 8811 	msr	BASEPRI, r6
    ac7c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    ac80:	bd70      	pop	{r4, r5, r6, pc}

0000ac82 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    ac82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac84:	4604      	mov	r4, r0
	__asm__ volatile(
    ac86:	f04f 0320 	mov.w	r3, #32
    ac8a:	f3ef 8611 	mrs	r6, BASEPRI
    ac8e:	f383 8812 	msr	BASEPRI_MAX, r3
    ac92:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ac96:	6923      	ldr	r3, [r4, #16]
    ac98:	f013 0f08 	tst.w	r3, #8
    ac9c:	68a3      	ldr	r3, [r4, #8]
    ac9e:	d102      	bne.n	aca6 <mpsc_pbuf_claim+0x24>
    aca0:	6862      	ldr	r2, [r4, #4]
    aca2:	4293      	cmp	r3, r2
    aca4:	d900      	bls.n	aca8 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    aca6:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    aca8:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    acaa:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    acac:	b92a      	cbnz	r2, acba <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    acae:	f386 8811 	msr	BASEPRI, r6
    acb2:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    acb6:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    acb8:	e033      	b.n	ad22 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    acba:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    acbe:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    acc2:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    acc6:	d0f2      	beq.n	acae <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    acc8:	2802      	cmp	r0, #2
    acca:	d103      	bne.n	acd4 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    accc:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    acd0:	08ad      	lsrs	r5, r5, #2
    acd2:	d105      	bne.n	ace0 <mpsc_pbuf_claim+0x5e>
    acd4:	07d0      	lsls	r0, r2, #31
    acd6:	d412      	bmi.n	acfe <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    acd8:	69a3      	ldr	r3, [r4, #24]
    acda:	4638      	mov	r0, r7
    acdc:	4798      	blx	r3
    acde:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    ace0:	68a1      	ldr	r1, [r4, #8]
    ace2:	462a      	mov	r2, r5
    ace4:	4620      	mov	r0, r4
    ace6:	f7ff fe37 	bl	a958 <idx_inc>
				rd_idx_inc(buffer, inc);
    acea:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    acec:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    acee:	4620      	mov	r0, r4
    acf0:	f7ff fe40 	bl	a974 <rd_idx_inc>
    acf4:	f386 8811 	msr	BASEPRI, r6
    acf8:	f3bf 8f6f 	isb	sy
	} while (cont);
    acfc:	e7c3      	b.n	ac86 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    acfe:	f042 0202 	orr.w	r2, r2, #2
    ad02:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    ad06:	4638      	mov	r0, r7
    ad08:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    ad0a:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    ad0c:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    ad0e:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    ad10:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    ad12:	4620      	mov	r0, r4
    ad14:	f7ff fe20 	bl	a958 <idx_inc>
				buffer->tmp_rd_idx =
    ad18:	60a0      	str	r0, [r4, #8]
    ad1a:	f386 8811 	msr	BASEPRI, r6
    ad1e:	f3bf 8f6f 	isb	sy
}
    ad22:	4638      	mov	r0, r7
    ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ad26 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    ad26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad28:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ad2a:	6983      	ldr	r3, [r0, #24]
    ad2c:	4608      	mov	r0, r1
{
    ad2e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ad30:	4798      	blx	r3
    ad32:	4606      	mov	r6, r0
	__asm__ volatile(
    ad34:	f04f 0320 	mov.w	r3, #32
    ad38:	f3ef 8711 	mrs	r7, BASEPRI
    ad3c:	f383 8812 	msr	BASEPRI_MAX, r3
    ad40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    ad44:	782b      	ldrb	r3, [r5, #0]
    ad46:	f36f 0300 	bfc	r3, #0, #1
    ad4a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ad4c:	6923      	ldr	r3, [r4, #16]
    ad4e:	079b      	lsls	r3, r3, #30
    ad50:	d505      	bpl.n	ad5e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    ad52:	68e2      	ldr	r2, [r4, #12]
    ad54:	69e3      	ldr	r3, [r4, #28]
    ad56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    ad5a:	429d      	cmp	r5, r3
    ad5c:	d11a      	bne.n	ad94 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    ad5e:	782b      	ldrb	r3, [r5, #0]
    ad60:	f36f 0341 	bfc	r3, #1, #1
    ad64:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    ad66:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    ad6a:	4299      	cmp	r1, r3
    ad6c:	d104      	bne.n	ad78 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    ad6e:	4632      	mov	r2, r6
    ad70:	4620      	mov	r0, r4
    ad72:	f7ff fdf1 	bl	a958 <idx_inc>
    ad76:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    ad78:	4631      	mov	r1, r6
    ad7a:	4620      	mov	r0, r4
    ad7c:	f7ff fdfa 	bl	a974 <rd_idx_inc>
	__asm__ volatile(
    ad80:	f387 8811 	msr	BASEPRI, r7
    ad84:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    ad88:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    ad8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ad90:	f7fe b960 	b.w	9054 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    ad94:	682b      	ldr	r3, [r5, #0]
    ad96:	f360 039f 	bfi	r3, r0, #2, #30
    ad9a:	602b      	str	r3, [r5, #0]
    ad9c:	e7f0      	b.n	ad80 <mpsc_pbuf_free+0x5a>

0000ad9e <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ad9e:	6902      	ldr	r2, [r0, #16]
    ada0:	6883      	ldr	r3, [r0, #8]
    ada2:	0712      	lsls	r2, r2, #28
    ada4:	d402      	bmi.n	adac <mpsc_pbuf_is_pending+0xe>
    ada6:	6842      	ldr	r2, [r0, #4]
    ada8:	429a      	cmp	r2, r3
    adaa:	d200      	bcs.n	adae <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    adac:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    adae:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    adb0:	1e18      	subs	r0, r3, #0
    adb2:	bf18      	it	ne
    adb4:	2001      	movne	r0, #1
    adb6:	4770      	bx	lr

0000adb8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    adb8:	4770      	bx	lr

0000adba <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    adba:	7803      	ldrb	r3, [r0, #0]
 */
static inline uint32_t log_msg_generic_get_wlen(const union mpsc_pbuf_generic *item)
{
	const union log_msg_generic *generic_msg = (const union log_msg_generic *)item;

	if (z_log_item_is_msg(generic_msg)) {
    adbc:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    adbe:	bf5f      	itttt	pl
    adc0:	6803      	ldrpl	r3, [r0, #0]
    adc2:	8842      	ldrhpl	r2, [r0, #2]
    adc4:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    adc8:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    adcc:	bf5d      	ittte	pl
    adce:	3017      	addpl	r0, #23
    add0:	f020 0007 	bicpl.w	r0, r0, #7
    add4:	0880      	lsrpl	r0, r0, #2
		const struct log_msg *msg = (const struct log_msg *)generic_msg;

		return log_msg_get_total_wlen(msg->hdr.desc);
	}

	return 0;
    add6:	2000      	movmi	r0, #0
}
    add8:	4770      	bx	lr

0000adda <dummy_timestamp>:
}
    adda:	2000      	movs	r0, #0
    addc:	4770      	bx	lr

0000adde <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    adde:	f000 bacf 	b.w	b380 <sys_clock_cycle_get_32>

0000ade2 <atomic_inc>:
{
    ade2:	4603      	mov	r3, r0
}
    ade4:	f3bf 8f5b 	dmb	ish
    ade8:	e853 0f00 	ldrex	r0, [r3]
    adec:	1c42      	adds	r2, r0, #1
    adee:	e843 2100 	strex	r1, r2, [r3]
    adf2:	2900      	cmp	r1, #0
    adf4:	d1f8      	bne.n	ade8 <atomic_inc+0x6>
    adf6:	f3bf 8f5b 	dmb	ish
    adfa:	4770      	bx	lr

0000adfc <z_log_vprintk>:
{
    adfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    adfe:	2300      	movs	r3, #0
    ae00:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ae04:	e9cd 3300 	strd	r3, r3, [sp]
    ae08:	461a      	mov	r2, r3
    ae0a:	4619      	mov	r1, r3
    ae0c:	4618      	mov	r0, r3
    ae0e:	f7f7 fbcf 	bl	25b0 <z_impl_z_log_msg_runtime_vcreate>
}
    ae12:	b005      	add	sp, #20
    ae14:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae18 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    ae18:	2001      	movs	r0, #1
    ae1a:	f7f7 b993 	b.w	2144 <z_log_dropped>

0000ae1e <z_cbprintf_cpy>:
{
    ae1e:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    ae20:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    ae24:	1b9b      	subs	r3, r3, r6
    ae26:	428b      	cmp	r3, r1
{
    ae28:	460c      	mov	r4, r1
    ae2a:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    ae2c:	d30a      	bcc.n	ae44 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    ae2e:	6813      	ldr	r3, [r2, #0]
    ae30:	460a      	mov	r2, r1
    ae32:	4601      	mov	r1, r0
    ae34:	1998      	adds	r0, r3, r6
    ae36:	f000 f8a0 	bl	af7a <memcpy>
	desc->off += len;
    ae3a:	68ab      	ldr	r3, [r5, #8]
    ae3c:	4423      	add	r3, r4
    ae3e:	60ab      	str	r3, [r5, #8]
	return len;
    ae40:	4620      	mov	r0, r4
}
    ae42:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    ae44:	f06f 001b 	mvn.w	r0, #27
    ae48:	e7fb      	b.n	ae42 <z_cbprintf_cpy+0x24>

0000ae4a <z_log_msg_finalize>:
{
    ae4a:	b570      	push	{r4, r5, r6, lr}
    ae4c:	460e      	mov	r6, r1
    ae4e:	4615      	mov	r5, r2
    ae50:	4619      	mov	r1, r3
	if (!msg) {
    ae52:	4604      	mov	r4, r0
    ae54:	b918      	cbnz	r0, ae5e <z_log_msg_finalize+0x14>
}
    ae56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    ae5a:	f7f7 b973 	b.w	2144 <z_log_dropped>
	if (data) {
    ae5e:	b133      	cbz	r3, ae6e <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    ae60:	f3c2 234a 	ubfx	r3, r2, #9, #11
    ae64:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    ae66:	0d12      	lsrs	r2, r2, #20
    ae68:	4418      	add	r0, r3
    ae6a:	f000 f886 	bl	af7a <memcpy>
	msg->hdr.source = source;
    ae6e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    ae72:	4620      	mov	r0, r4
}
    ae74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    ae78:	f7f7 baf0 	b.w	245c <z_log_msg_commit>

0000ae7c <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    ae7c:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    ae80:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    ae84:	d001      	beq.n	ae8a <get_ep_bm_from_addr+0xe>
    ae86:	f7f7 bdf7 	b.w	2a78 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    ae8a:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    ae8e:	bf18      	it	ne
    ae90:	3210      	addne	r2, #16
    ae92:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    ae94:	4090      	lsls	r0, r2
}
    ae96:	4770      	bx	lr

0000ae98 <usb_write>:
{
    ae98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae9c:	4606      	mov	r6, r0
    ae9e:	460f      	mov	r7, r1
    aea0:	4690      	mov	r8, r2
    aea2:	4699      	mov	r9, r3
    aea4:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    aea6:	464b      	mov	r3, r9
    aea8:	4642      	mov	r2, r8
    aeaa:	4639      	mov	r1, r7
    aeac:	4630      	mov	r0, r6
    aeae:	f7fa fb53 	bl	5558 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    aeb2:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    aeb6:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    aeb8:	d103      	bne.n	aec2 <usb_write+0x2a>
	z_impl_k_yield();
    aeba:	f7fe fca1 	bl	9800 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    aebe:	3d01      	subs	r5, #1
    aec0:	d1f1      	bne.n	aea6 <usb_write+0xe>
}
    aec2:	4620      	mov	r0, r4
    aec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000aec8 <usb_get_dev_data_by_cfg>:
	return list->head;
    aec8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aeca:	b140      	cbz	r0, aede <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    aecc:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    aed0:	685b      	ldr	r3, [r3, #4]
    aed2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aed4:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    aed8:	d001      	beq.n	aede <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    aeda:	6840      	ldr	r0, [r0, #4]
    aedc:	e7f5      	b.n	aeca <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    aede:	4770      	bx	lr

0000aee0 <usb_get_dev_data_by_iface>:
	return list->head;
    aee0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aee2:	b150      	cbz	r0, aefa <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    aee4:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    aee8:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    aeea:	685b      	ldr	r3, [r3, #4]
    aeec:	789b      	ldrb	r3, [r3, #2]
    aeee:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aef0:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    aef4:	d001      	beq.n	aefa <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    aef6:	6840      	ldr	r0, [r0, #4]
    aef8:	e7f3      	b.n	aee2 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    aefa:	4770      	bx	lr

0000aefc <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    aefc:	b530      	push	{r4, r5, lr}
	return list->head;
    aefe:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    af00:	b188      	cbz	r0, af26 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    af02:	f850 3c04 	ldr.w	r3, [r0, #-4]
    af06:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    af08:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    af0a:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    af0c:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    af0e:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    af10:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    af12:	b2dc      	uxtb	r4, r3
    af14:	42a5      	cmp	r5, r4
    af16:	d801      	bhi.n	af1c <usb_get_dev_data_by_ep+0x20>
	return node->next;
    af18:	6840      	ldr	r0, [r0, #4]
    af1a:	e7f1      	b.n	af00 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    af1c:	3301      	adds	r3, #1
    af1e:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    af22:	428c      	cmp	r4, r1
    af24:	d1f5      	bne.n	af12 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    af26:	bd30      	pop	{r4, r5, pc}

0000af28 <abort_function>:
{
    af28:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    af2a:	2000      	movs	r0, #0
    af2c:	f7f7 f834 	bl	1f98 <sys_reboot>

0000af30 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    af30:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    af32:	6800      	ldr	r0, [r0, #0]
    af34:	f7f8 bd06 	b.w	3944 <z_arm_fatal_error>

0000af38 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    af38:	2100      	movs	r1, #0
    af3a:	2001      	movs	r0, #1
    af3c:	f7f8 bd02 	b.w	3944 <z_arm_fatal_error>

0000af40 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    af40:	b508      	push	{r3, lr}
	handler();
    af42:	f7f8 fdad 	bl	3aa0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    af46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    af4a:	f7f8 be85 	b.w	3c58 <z_arm_exc_exit>

0000af4e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    af4e:	2300      	movs	r3, #0
    af50:	f7f7 baaa 	b.w	24a8 <z_impl_z_log_msg_static_create>

0000af54 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    af54:	4603      	mov	r3, r0
	size_t n = 0;
    af56:	2000      	movs	r0, #0

	while (*s != '\0') {
    af58:	5c1a      	ldrb	r2, [r3, r0]
    af5a:	b902      	cbnz	r2, af5e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    af5c:	4770      	bx	lr
		n++;
    af5e:	3001      	adds	r0, #1
    af60:	e7fa      	b.n	af58 <strlen+0x4>

0000af62 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    af62:	1e43      	subs	r3, r0, #1
    af64:	3901      	subs	r1, #1
    af66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    af6a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    af6e:	4282      	cmp	r2, r0
    af70:	d101      	bne.n	af76 <strcmp+0x14>
    af72:	2a00      	cmp	r2, #0
    af74:	d1f7      	bne.n	af66 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    af76:	1a10      	subs	r0, r2, r0
    af78:	4770      	bx	lr

0000af7a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    af7a:	b510      	push	{r4, lr}
    af7c:	1e43      	subs	r3, r0, #1
    af7e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    af80:	4291      	cmp	r1, r2
    af82:	d100      	bne.n	af86 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    af84:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    af86:	f811 4b01 	ldrb.w	r4, [r1], #1
    af8a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    af8e:	e7f7      	b.n	af80 <memcpy+0x6>

0000af90 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    af90:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    af92:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    af94:	4603      	mov	r3, r0
	while (n > 0) {
    af96:	4293      	cmp	r3, r2
    af98:	d100      	bne.n	af9c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    af9a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    af9c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    afa0:	e7f9      	b.n	af96 <memset+0x6>

0000afa2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    afa2:	2806      	cmp	r0, #6
    afa4:	d108      	bne.n	afb8 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    afa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    afaa:	2201      	movs	r2, #1
    afac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    afb0:	f3bf 8f4f 	dsb	sy
        __WFE();
    afb4:	bf20      	wfe
    while (true)
    afb6:	e7fd      	b.n	afb4 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    afb8:	4770      	bx	lr

0000afba <pm_state_exit_post_ops>:
    afba:	2300      	movs	r3, #0
    afbc:	f383 8811 	msr	BASEPRI, r3
    afc0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    afc4:	4770      	bx	lr

0000afc6 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    afc6:	7081      	strb	r1, [r0, #2]
}
    afc8:	4770      	bx	lr

0000afca <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    afca:	2000      	movs	r0, #0
    afcc:	4770      	bx	lr

0000afce <z_log_msg_static_create.constprop.0>:
    afce:	2300      	movs	r3, #0
    afd0:	f7f7 ba6a 	b.w	24a8 <z_impl_z_log_msg_static_create>

0000afd4 <hid_clear_idle_ctx>:
		dev_data->sof_cnt[i] = 0U;
    afd4:	2300      	movs	r3, #0
    afd6:	60c3      	str	r3, [r0, #12]
	dev_data->idle_on = false;
    afd8:	8203      	strh	r3, [r0, #16]
}
    afda:	4770      	bx	lr

0000afdc <hid_sof_handler>:
{
    afdc:	b410      	push	{r4}
	if (dev_data->ops == NULL || dev_data->ops->on_idle == NULL) {
    afde:	6884      	ldr	r4, [r0, #8]
{
    afe0:	4603      	mov	r3, r0
	if (dev_data->ops == NULL || dev_data->ops->on_idle == NULL) {
    afe2:	b174      	cbz	r4, b002 <hid_sof_handler+0x26>
    afe4:	68e2      	ldr	r2, [r4, #12]
    afe6:	b162      	cbz	r2, b002 <hid_sof_handler+0x26>
		if (dev_data->idle_rate[i]) {
    afe8:	7c5a      	ldrb	r2, [r3, #17]
	const struct device *dev = dev_data->common.dev;
    afea:	6980      	ldr	r0, [r0, #24]
		if (dev_data->idle_rate[i]) {
    afec:	b14a      	cbz	r2, b002 <hid_sof_handler+0x26>
			dev_data->sof_cnt[i]++;
    afee:	68d9      	ldr	r1, [r3, #12]
    aff0:	3101      	adds	r1, #1
		int32_t diff = abs((int32_t) ((uint32_t) dev_data->idle_rate[i] * 4U -
    aff2:	ebc1 0282 	rsb	r2, r1, r2, lsl #2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    aff6:	2a00      	cmp	r2, #0
    aff8:	bfb8      	it	lt
    affa:	4252      	neglt	r2, r2
		if (diff < 2 && reported == false) {
    affc:	2a01      	cmp	r2, #1
    affe:	dd02      	ble.n	b006 <hid_sof_handler+0x2a>
			dev_data->sof_cnt[i]++;
    b000:	60d9      	str	r1, [r3, #12]
}
    b002:	bc10      	pop	{r4}
    b004:	4770      	bx	lr
			dev_data->sof_cnt[i] = 0U;
    b006:	2200      	movs	r2, #0
    b008:	60da      	str	r2, [r3, #12]
			dev_data->ops->on_idle(dev, i + 1);
    b00a:	68e3      	ldr	r3, [r4, #12]
}
    b00c:	bc10      	pop	{r4}
			dev_data->ops->on_idle(dev, i + 1);
    b00e:	2101      	movs	r1, #1
    b010:	4718      	bx	r3

0000b012 <usb_hid_set_proto_code>:
	struct usb_if_descriptor *if_desc = cfg->interface_descriptor;
    b012:	6843      	ldr	r3, [r0, #4]
    b014:	685b      	ldr	r3, [r3, #4]
}
    b016:	2000      	movs	r0, #0
		if_desc->bInterfaceProtocol = proto_code;
    b018:	71d9      	strb	r1, [r3, #7]
}
    b01a:	4770      	bx	lr

0000b01c <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    b01c:	6903      	ldr	r3, [r0, #16]
    b01e:	6842      	ldr	r2, [r0, #4]
    b020:	685b      	ldr	r3, [r3, #4]
    b022:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    b024:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    b026:	f3c3 2307 	ubfx	r3, r3, #8, #8
    b02a:	7453      	strb	r3, [r2, #17]
}
    b02c:	2000      	movs	r0, #0
    b02e:	4770      	bx	lr

0000b030 <ep_ctx_reset>:
{
    b030:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    b032:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    b034:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    b038:	2300      	movs	r3, #0
    b03a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    b03c:	7f83      	ldrb	r3, [r0, #30]
{
    b03e:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    b040:	b113      	cbz	r3, b048 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    b042:	7a40      	ldrb	r0, [r0, #9]
    b044:	f000 fb3c 	bl	b6c0 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    b048:	2301      	movs	r3, #1
    b04a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    b04c:	2300      	movs	r3, #0
    b04e:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    b050:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    b052:	77a3      	strb	r3, [r4, #30]
}
    b054:	bd10      	pop	{r4, pc}

0000b056 <z_log_msg_static_create.constprop.0>:
    b056:	2300      	movs	r3, #0
    b058:	f7f7 ba26 	b.w	24a8 <z_impl_z_log_msg_static_create>

0000b05c <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    b05c:	f7fd bf10 	b.w	8e80 <z_impl_k_mutex_lock>

0000b060 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b060:	f7fd bf88 	b.w	8f74 <z_impl_k_mutex_unlock>

0000b064 <usb_dc_ep_disable>:
{
    b064:	b538      	push	{r3, r4, r5, lr}
    b066:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    b068:	f7f9 fcee 	bl	4a48 <endpoint_ctx>
	if (!ep_ctx) {
    b06c:	4605      	mov	r5, r0
    b06e:	b160      	cbz	r0, b08a <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    b070:	7a03      	ldrb	r3, [r0, #8]
    b072:	b16b      	cbz	r3, b090 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b074:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    b076:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    b078:	f7fd fb50 	bl	871c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    b07c:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    b07e:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    b080:	f7ff ffd6 	bl	b030 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    b084:	722c      	strb	r4, [r5, #8]
	return 0;
    b086:	4620      	mov	r0, r4
}
    b088:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b08a:	f06f 0015 	mvn.w	r0, #21
    b08e:	e7fb      	b.n	b088 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    b090:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b094:	e7f8      	b.n	b088 <usb_dc_ep_disable+0x24>

0000b096 <usb_dc_ep_read>:
{
    b096:	b570      	push	{r4, r5, r6, lr}
    b098:	4604      	mov	r4, r0
    b09a:	460e      	mov	r6, r1
    b09c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    b09e:	f7fa fafd 	bl	569c <usb_dc_ep_read_wait>
	if (ret) {
    b0a2:	b930      	cbnz	r0, b0b2 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    b0a4:	b906      	cbnz	r6, b0a8 <usb_dc_ep_read+0x12>
    b0a6:	b125      	cbz	r5, b0b2 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    b0a8:	4620      	mov	r0, r4
}
    b0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    b0ae:	f7fa bb5b 	b.w	5768 <usb_dc_ep_read_continue>
}
    b0b2:	bd70      	pop	{r4, r5, r6, pc}

0000b0b4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b0b4:	6903      	ldr	r3, [r0, #16]
    b0b6:	b2c9      	uxtb	r1, r1
    b0b8:	220c      	movs	r2, #12
    b0ba:	fb01 3302 	mla	r3, r1, r2, r3
    b0be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    b0c0:	f000 0007 	and.w	r0, r0, #7
    b0c4:	4770      	bx	lr

0000b0c6 <set_on_state>:
	__asm__ volatile(
    b0c6:	f04f 0320 	mov.w	r3, #32
    b0ca:	f3ef 8211 	mrs	r2, BASEPRI
    b0ce:	f383 8812 	msr	BASEPRI_MAX, r3
    b0d2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b0d6:	6803      	ldr	r3, [r0, #0]
    b0d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b0dc:	f043 0302 	orr.w	r3, r3, #2
    b0e0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b0e2:	f382 8811 	msr	BASEPRI, r2
    b0e6:	f3bf 8f6f 	isb	sy
}
    b0ea:	4770      	bx	lr

0000b0ec <stop>:
{
    b0ec:	b570      	push	{r4, r5, r6, lr}
    b0ee:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    b0f0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    b0f2:	f04f 0420 	mov.w	r4, #32
    b0f6:	f3ef 8511 	mrs	r5, BASEPRI
    b0fa:	f384 8812 	msr	BASEPRI_MAX, r4
    b0fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b102:	260c      	movs	r6, #12
    b104:	fb06 3401 	mla	r4, r6, r1, r3
    b108:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b10a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    b10e:	d008      	beq.n	b122 <stop+0x36>
    b110:	42a2      	cmp	r2, r4
    b112:	d006      	beq.n	b122 <stop+0x36>
	__asm__ volatile(
    b114:	f385 8811 	msr	BASEPRI, r5
    b118:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    b11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b120:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b122:	4371      	muls	r1, r6
    b124:	440b      	add	r3, r1
    b126:	2201      	movs	r2, #1
    b128:	641a      	str	r2, [r3, #64]	; 0x40
    b12a:	f385 8811 	msr	BASEPRI, r5
    b12e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    b132:	6843      	ldr	r3, [r0, #4]
    b134:	440b      	add	r3, r1
    b136:	685b      	ldr	r3, [r3, #4]
    b138:	4798      	blx	r3
	return 0;
    b13a:	2000      	movs	r0, #0
    b13c:	e7f0      	b.n	b120 <stop+0x34>

0000b13e <api_stop>:
	return stop(dev, subsys, CTX_API);
    b13e:	2280      	movs	r2, #128	; 0x80
    b140:	f7ff bfd4 	b.w	b0ec <stop>

0000b144 <async_start>:
{
    b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b146:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    b148:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    b14a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b14c:	f04f 0520 	mov.w	r5, #32
    b150:	f3ef 8611 	mrs	r6, BASEPRI
    b154:	f385 8812 	msr	BASEPRI_MAX, r5
    b158:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b15c:	250c      	movs	r5, #12
    b15e:	4369      	muls	r1, r5
    b160:	440c      	add	r4, r1
    b162:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b164:	f005 0c07 	and.w	ip, r5, #7
    b168:	f1bc 0f01 	cmp.w	ip, #1
    b16c:	d10b      	bne.n	b186 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b16e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    b170:	f386 8811 	msr	BASEPRI, r6
    b174:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    b178:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    b17c:	6843      	ldr	r3, [r0, #4]
    b17e:	585b      	ldr	r3, [r3, r1]
    b180:	4798      	blx	r3
	return 0;
    b182:	2000      	movs	r0, #0
}
    b184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b186:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    b18a:	42af      	cmp	r7, r5
    b18c:	f386 8811 	msr	BASEPRI, r6
    b190:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    b194:	bf0c      	ite	eq
    b196:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    b19a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b19e:	e7f1      	b.n	b184 <async_start+0x40>

0000b1a0 <api_start>:
{
    b1a0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b1a2:	2480      	movs	r4, #128	; 0x80
    b1a4:	9400      	str	r4, [sp, #0]
    b1a6:	f7ff ffcd 	bl	b144 <async_start>
}
    b1aa:	b002      	add	sp, #8
    b1ac:	bd10      	pop	{r4, pc}

0000b1ae <onoff_started_callback>:
{
    b1ae:	b410      	push	{r4}
	return &data->mgr[type];
    b1b0:	6900      	ldr	r0, [r0, #16]
    b1b2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b1b4:	241c      	movs	r4, #28
    b1b6:	fb03 0004 	mla	r0, r3, r4, r0
    b1ba:	2100      	movs	r1, #0
}
    b1bc:	bc10      	pop	{r4}
	notify(mgr, 0);
    b1be:	4710      	bx	r2

0000b1c0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b1c0:	2000      	movs	r0, #0
    b1c2:	f000 b8ef 	b.w	b3a4 <nrfx_clock_start>

0000b1c6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b1c6:	2000      	movs	r0, #0
    b1c8:	f000 b928 	b.w	b41c <nrfx_clock_stop>

0000b1cc <blocking_start_callback>:
{
    b1cc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b1ce:	f7fd bf41 	b.w	9054 <z_impl_k_sem_give>

0000b1d2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1d2:	6843      	ldr	r3, [r0, #4]
    b1d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b1d6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b1da:	600b      	str	r3, [r1, #0]
}
    b1dc:	2000      	movs	r0, #0
    b1de:	4770      	bx	lr

0000b1e0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1e0:	6843      	ldr	r3, [r0, #4]
    b1e2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    b1e4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    b1e8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    b1ec:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    b1f0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    b1f4:	2000      	movs	r0, #0
    b1f6:	4770      	bx	lr

0000b1f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1f8:	6843      	ldr	r3, [r0, #4]
    b1fa:	685b      	ldr	r3, [r3, #4]
}
    b1fc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    b1fe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    b202:	4770      	bx	lr

0000b204 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b204:	6843      	ldr	r3, [r0, #4]
    b206:	685b      	ldr	r3, [r3, #4]
}
    b208:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b20a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    b20e:	4770      	bx	lr

0000b210 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b210:	6843      	ldr	r3, [r0, #4]
    b212:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b214:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    b218:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    b21c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    b21e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    b222:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    b226:	2000      	movs	r0, #0
    b228:	4770      	bx	lr

0000b22a <gpio_nrfx_manage_callback>:
{
    b22a:	b510      	push	{r4, lr}
	return port->data;
    b22c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    b22e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    b230:	b1f8      	cbz	r0, b272 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b232:	4288      	cmp	r0, r1
    b234:	d119      	bne.n	b26a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    b236:	689c      	ldr	r4, [r3, #8]
	return node->next;
    b238:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    b23a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    b23c:	42a1      	cmp	r1, r4
    b23e:	d100      	bne.n	b242 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    b240:	6098      	str	r0, [r3, #8]
	parent->next = child;
    b242:	2000      	movs	r0, #0
    b244:	6008      	str	r0, [r1, #0]
	if (set) {
    b246:	b12a      	cbz	r2, b254 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    b248:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    b24a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    b24c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    b24e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    b250:	b902      	cbnz	r2, b254 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    b252:	6099      	str	r1, [r3, #8]
	return 0;
    b254:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    b256:	e010      	b.n	b27a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b258:	4281      	cmp	r1, r0
    b25a:	d106      	bne.n	b26a <gpio_nrfx_manage_callback+0x40>
	return node->next;
    b25c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    b25e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    b260:	6898      	ldr	r0, [r3, #8]
    b262:	4281      	cmp	r1, r0
    b264:	d1ed      	bne.n	b242 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    b266:	609c      	str	r4, [r3, #8]
}
    b268:	e7eb      	b.n	b242 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    b26a:	4604      	mov	r4, r0
    b26c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b26e:	2800      	cmp	r0, #0
    b270:	d1f2      	bne.n	b258 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    b272:	2a00      	cmp	r2, #0
    b274:	d1e8      	bne.n	b248 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    b276:	f06f 0015 	mvn.w	r0, #21
}
    b27a:	bd10      	pop	{r4, pc}

0000b27c <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    b27c:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    b27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    b282:	2908      	cmp	r1, #8
    b284:	6e13      	ldr	r3, [r2, #96]	; 0x60
    b286:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b288:	bf28      	it	cs
    b28a:	2108      	movcs	r1, #8
    b28c:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    b28e:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    b290:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    b292:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    b294:	460a      	mov	r2, r1
    b296:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    b298:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    b29a:	f7ff fe6e 	bl	af7a <memcpy>

	return length;
}
    b29e:	4620      	mov	r0, r4
    b2a0:	b002      	add	sp, #8
    b2a2:	bd10      	pop	{r4, pc}

0000b2a4 <irq_connect0>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
    b2a4:	2200      	movs	r2, #0
    b2a6:	2101      	movs	r1, #1
    b2a8:	2003      	movs	r0, #3
    b2aa:	f7f8 bbe1 	b.w	3a70 <z_arm_irq_priority_set>

0000b2ae <pinctrl_apply_state.constprop.0>:
 *
 * @retval 0 If succeeded.
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    b2ae:	b513      	push	{r0, r1, r4, lr}
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b2b0:	2100      	movs	r1, #0
    b2b2:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    b2b4:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    b2b6:	f000 f80a 	bl	b2ce <pinctrl_lookup_state>
	if (ret < 0) {
    b2ba:	2800      	cmp	r0, #0
    b2bc:	db05      	blt.n	b2ca <pinctrl_apply_state.constprop.0+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b2be:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b2c0:	6822      	ldr	r2, [r4, #0]
    b2c2:	7919      	ldrb	r1, [r3, #4]
    b2c4:	6818      	ldr	r0, [r3, #0]
    b2c6:	f7fa ff5f 	bl	6188 <pinctrl_configure_pins>
}
    b2ca:	b002      	add	sp, #8
    b2cc:	bd10      	pop	{r4, pc}

0000b2ce <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b2ce:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    b2d0:	6843      	ldr	r3, [r0, #4]
    b2d2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    b2d4:	7a05      	ldrb	r5, [r0, #8]
    b2d6:	6844      	ldr	r4, [r0, #4]
    b2d8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    b2dc:	42a3      	cmp	r3, r4
    b2de:	d302      	bcc.n	b2e6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    b2e0:	f06f 0001 	mvn.w	r0, #1
}
    b2e4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    b2e6:	795c      	ldrb	r4, [r3, #5]
    b2e8:	428c      	cmp	r4, r1
    b2ea:	d001      	beq.n	b2f0 <pinctrl_lookup_state+0x22>
		(*state)++;
    b2ec:	3308      	adds	r3, #8
    b2ee:	e7f0      	b.n	b2d2 <pinctrl_lookup_state+0x4>
			return 0;
    b2f0:	2000      	movs	r0, #0
    b2f2:	e7f7      	b.n	b2e4 <pinctrl_lookup_state+0x16>

0000b2f4 <as5600_get>:
{
    b2f4:	b510      	push	{r4, lr}
	if (chan == SENSOR_CHAN_ROTATION) {
    b2f6:	2922      	cmp	r1, #34	; 0x22
	struct as5600_dev_data *dev_data = dev->data;
    b2f8:	6904      	ldr	r4, [r0, #16]
	if (chan == SENSOR_CHAN_ROTATION) {
    b2fa:	d10c      	bne.n	b316 <as5600_get+0x22>
		val->val1 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) /
    b2fc:	8823      	ldrh	r3, [r4, #0]
    b2fe:	f44f 70b4 	mov.w	r0, #360	; 0x168
    b302:	4343      	muls	r3, r0
    b304:	131b      	asrs	r3, r3, #12
    b306:	6013      	str	r3, [r2, #0]
		val->val2 = ((int32_t)dev_data->position * AS5600_FULL_ANGLE) -
    b308:	8821      	ldrh	r1, [r4, #0]
    b30a:	4341      	muls	r1, r0
    b30c:	eba1 3303 	sub.w	r3, r1, r3, lsl #12
    b310:	6053      	str	r3, [r2, #4]
	return 0;
    b312:	2000      	movs	r0, #0
}
    b314:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    b316:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b31a:	e7fb      	b.n	b314 <as5600_get+0x20>

0000b31c <as5600_fetch>:
{
    b31c:	b530      	push	{r4, r5, lr}
    b31e:	b089      	sub	sp, #36	; 0x24
	const struct as5600_dev_cfg *dev_cfg = dev->config;
    b320:	6843      	ldr	r3, [r0, #4]
	struct as5600_dev_data *dev_data = dev->data;
    b322:	6904      	ldr	r4, [r0, #16]
 */
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
				    const void *write_buf, size_t num_write,
				    void *read_buf, size_t num_read)
{
	return i2c_write_read(spec->bus, spec->addr,
    b324:	6818      	ldr	r0, [r3, #0]
    b326:	889b      	ldrh	r3, [r3, #4]
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    b328:	210e      	movs	r1, #14
	uint8_t read_data[2] = {0, 0};
    b32a:	2200      	movs	r2, #0
	uint8_t angle_reg = AS5600_ANGLE_REGISTER_H;
    b32c:	f88d 1003 	strb.w	r1, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    b330:	f10d 0103 	add.w	r1, sp, #3
	uint8_t read_data[2] = {0, 0};
    b334:	f8ad 2004 	strh.w	r2, [sp, #4]
    b338:	9102      	str	r1, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
    b33a:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
    b33e:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)read_buf;
    b340:	aa01      	add	r2, sp, #4
	msg[0].len = num_write;
    b342:	9103      	str	r1, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    b344:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    b346:	2107      	movs	r1, #7
	msg[1].len = num_read;
    b348:	2202      	movs	r2, #2
    b34a:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    b34c:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    b350:	6881      	ldr	r1, [r0, #8]
    b352:	688d      	ldr	r5, [r1, #8]
    b354:	a902      	add	r1, sp, #8
    b356:	47a8      	blx	r5
	if (!err) {
    b358:	b918      	cbnz	r0, b362 <as5600_fetch+0x46>
		dev_data->position = ((uint16_t)read_data[0] << 8) | read_data[1];
    b35a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b35e:	ba5b      	rev16	r3, r3
    b360:	8023      	strh	r3, [r4, #0]
}
    b362:	b009      	add	sp, #36	; 0x24
    b364:	bd30      	pop	{r4, r5, pc}

0000b366 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b366:	4770      	bx	lr

0000b368 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b368:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b36c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    b36e:	b29b      	uxth	r3, r3
    b370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b374:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b378:	2200      	movs	r2, #0
    b37a:	601a      	str	r2, [r3, #0]
    b37c:	681b      	ldr	r3, [r3, #0]
}
    b37e:	4770      	bx	lr

0000b380 <sys_clock_cycle_get_32>:
{
    b380:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b382:	f7fb f857 	bl	6434 <z_nrf_rtc_timer_read>
}
    b386:	bd08      	pop	{r3, pc}

0000b388 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b388:	f7fe bd9c 	b.w	9ec4 <nrf_cc3xx_platform_init_no_rng>

0000b38c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    b38c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b38e:	f7f8 f9cd 	bl	372c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b392:	f7f8 faa1 	bl	38d8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    b396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b39a:	f7fe bd93 	b.w	9ec4 <nrf_cc3xx_platform_init_no_rng>

0000b39e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b39e:	4700      	bx	r0

0000b3a0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b3a0:	f000 bc24 	b.w	bbec <z_impl_k_busy_wait>

0000b3a4 <nrfx_clock_start>:
{
    b3a4:	b508      	push	{r3, lr}
    switch (domain)
    b3a6:	b110      	cbz	r0, b3ae <nrfx_clock_start+0xa>
    b3a8:	2801      	cmp	r0, #1
    b3aa:	d02c      	beq.n	b406 <nrfx_clock_start+0x62>
}
    b3ac:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b3ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b3b2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b3b6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    b3ba:	03c8      	lsls	r0, r1, #15
    b3bc:	d40b      	bmi.n	b3d6 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b3be:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b3c2:	07d9      	lsls	r1, r3, #31
    b3c4:	d50f      	bpl.n	b3e6 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b3c6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b3ca:	079b      	lsls	r3, r3, #30
    b3cc:	d408      	bmi.n	b3e0 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    b3ce:	2302      	movs	r3, #2
    b3d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    b3d4:	e7ea      	b.n	b3ac <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b3d6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b3da:	2b01      	cmp	r3, #1
    b3dc:	d004      	beq.n	b3e8 <nrfx_clock_start+0x44>
    b3de:	b113      	cbz	r3, b3e6 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b3e0:	2000      	movs	r0, #0
    b3e2:	f7fb fb29 	bl	6a38 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    b3e6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    b3e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b3ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3f0:	2300      	movs	r3, #0
    b3f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    b3f6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    b3fa:	2302      	movs	r3, #2
    b3fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b400:	2301      	movs	r3, #1
    b402:	6093      	str	r3, [r2, #8]
}
    b404:	e7d2      	b.n	b3ac <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b40a:	2200      	movs	r2, #0
    b40c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b410:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b414:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b418:	6018      	str	r0, [r3, #0]
}
    b41a:	e7c7      	b.n	b3ac <nrfx_clock_start+0x8>

0000b41c <nrfx_clock_stop>:
    clock_stop(domain);
    b41c:	f7fb bb0c 	b.w	6a38 <clock_stop>

0000b420 <nrf_gpio_reconfigure>:
{
    b420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b422:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b424:	a801      	add	r0, sp, #4
{
    b426:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    b42a:	4616      	mov	r6, r2
    b42c:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b42e:	f7fb fbbd 	bl	6bac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b432:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b434:	f1b6 0c00 	subs.w	ip, r6, #0
    b438:	bf18      	it	ne
    b43a:	f04f 0c01 	movne.w	ip, #1
    b43e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b442:	1e0b      	subs	r3, r1, #0
    b444:	bf18      	it	ne
    b446:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b448:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b44a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b44e:	bf14      	ite	ne
    b450:	f04f 0c0c 	movne.w	ip, #12
    b454:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b458:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b45a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b45e:	bf14      	ite	ne
    b460:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    b464:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b468:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b46a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b46e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b472:	bf14      	ite	ne
    b474:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    b478:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b47c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    b480:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b484:	b101      	cbz	r1, b488 <nrf_gpio_reconfigure+0x68>
    b486:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b488:	b10e      	cbz	r6, b48e <nrf_gpio_reconfigure+0x6e>
    b48a:	7836      	ldrb	r6, [r6, #0]
    b48c:	0076      	lsls	r6, r6, #1
    b48e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b490:	b10d      	cbz	r5, b496 <nrf_gpio_reconfigure+0x76>
    b492:	782d      	ldrb	r5, [r5, #0]
    b494:	00ad      	lsls	r5, r5, #2
    b496:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b498:	b10c      	cbz	r4, b49e <nrf_gpio_reconfigure+0x7e>
    b49a:	7824      	ldrb	r4, [r4, #0]
    b49c:	0224      	lsls	r4, r4, #8
    b49e:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    b4a0:	b10f      	cbz	r7, b4a6 <nrf_gpio_reconfigure+0x86>
    b4a2:	783f      	ldrb	r7, [r7, #0]
    b4a4:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b4a6:	430c      	orrs	r4, r1
    b4a8:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    b4aa:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    b4ae:	b003      	add	sp, #12
    b4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b4b2 <nrf_gpio_cfg_sense_set>:
{
    b4b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b4b4:	f10d 030f 	add.w	r3, sp, #15
    b4b8:	9301      	str	r3, [sp, #4]
    b4ba:	2300      	movs	r3, #0
{
    b4bc:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b4c0:	9300      	str	r3, [sp, #0]
    b4c2:	461a      	mov	r2, r3
    b4c4:	4619      	mov	r1, r3
    b4c6:	f7ff ffab 	bl	b420 <nrf_gpio_reconfigure>
}
    b4ca:	b005      	add	sp, #20
    b4cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b4d0 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4d0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    b4d4:	681a      	ldr	r2, [r3, #0]
    b4d6:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b4d8:	bf1f      	itttt	ne
    b4da:	2200      	movne	r2, #0
    b4dc:	601a      	strne	r2, [r3, #0]
    b4de:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4e0:	2001      	movne	r0, #1
    b4e2:	bf08      	it	eq
    b4e4:	2000      	moveq	r0, #0
}
    b4e6:	4770      	bx	lr

0000b4e8 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    b4e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b4ec:	f44f 7260 	mov.w	r2, #896	; 0x380
    b4f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b4f4:	4770      	bx	lr

0000b4f6 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    b4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b4fa:	f44f 7260 	mov.w	r2, #896	; 0x380
    b4fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b502:	4770      	bx	lr

0000b504 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    b504:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    b506:	f7fb ff09 	bl	731c <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    b50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    b50e:	f7fb bb19 	b.w	6b44 <nrfx_clock_irq_handler>

0000b512 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    b512:	7b0a      	ldrb	r2, [r1, #12]
{
    b514:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    b516:	2a03      	cmp	r2, #3
    b518:	d829      	bhi.n	b56e <xfer_completeness_check+0x5c>
    b51a:	e8df f002 	tbb	[pc, r2]
    b51e:	2521      	.short	0x2521
    b520:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    b522:	688a      	ldr	r2, [r1, #8]
    b524:	0350      	lsls	r0, r2, #13
    b526:	d504      	bpl.n	b532 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
    b528:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    b52c:	6908      	ldr	r0, [r1, #16]
    b52e:	4290      	cmp	r0, r2
    b530:	d107      	bne.n	b542 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    b532:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    b534:	0352      	lsls	r2, r2, #13
    b536:	d41a      	bmi.n	b56e <xfer_completeness_check+0x5c>
    b538:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    b53c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    b53e:	4291      	cmp	r1, r2
    b540:	d015      	beq.n	b56e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b542:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b544:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    b546:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    b54a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b54e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    b550:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    b554:	6908      	ldr	r0, [r1, #16]
    b556:	4290      	cmp	r0, r2
    b558:	d1f3      	bne.n	b542 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
    b55a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    b55e:	e7ed      	b.n	b53c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    b560:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    b564:	6909      	ldr	r1, [r1, #16]
    b566:	e7ea      	b.n	b53e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    b568:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    b56c:	e7fa      	b.n	b564 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    b56e:	2001      	movs	r0, #1
}
    b570:	4770      	bx	lr

0000b572 <nrfx_usbd_consumer>:
{
    b572:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    b574:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    b576:	429c      	cmp	r4, r3
    b578:	d209      	bcs.n	b58e <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    b57a:	2500      	movs	r5, #0
    b57c:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    b57e:	6809      	ldr	r1, [r1, #0]
    b580:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    b582:	429a      	cmp	r2, r3
    b584:	d10c      	bne.n	b5a0 <nrfx_usbd_consumer+0x2e>
    b586:	1e20      	subs	r0, r4, #0
    b588:	bf18      	it	ne
    b58a:	2001      	movne	r0, #1
}
    b58c:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    b58e:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    b590:	680d      	ldr	r5, [r1, #0]
    b592:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    b594:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    b596:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    b598:	4418      	add	r0, r3
        p_transfer->size = size;
    b59a:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    b59c:	6008      	str	r0, [r1, #0]
    b59e:	e7f0      	b.n	b582 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    b5a0:	2000      	movs	r0, #0
    b5a2:	e7f3      	b.n	b58c <nrfx_usbd_consumer+0x1a>

0000b5a4 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    b5a4:	684b      	ldr	r3, [r1, #4]
    b5a6:	429a      	cmp	r2, r3
    b5a8:	bf28      	it	cs
    b5aa:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    b5ac:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    b5ae:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    b5b2:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b5b4:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    b5b6:	1a80      	subs	r0, r0, r2
    b5b8:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b5ba:	4413      	add	r3, r2
}
    b5bc:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    b5be:	600b      	str	r3, [r1, #0]
}
    b5c0:	bf18      	it	ne
    b5c2:	2001      	movne	r0, #1
    b5c4:	4770      	bx	lr

0000b5c6 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    b5c6:	684b      	ldr	r3, [r1, #4]
    b5c8:	429a      	cmp	r2, r3
    b5ca:	bf28      	it	cs
    b5cc:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b5ce:	b162      	cbz	r2, b5ea <nrfx_usbd_feeder_ram_zlp+0x24>
    b5d0:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    b5d2:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    b5d6:	684b      	ldr	r3, [r1, #4]
    b5d8:	1a9b      	subs	r3, r3, r2
    b5da:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b5dc:	680b      	ldr	r3, [r1, #0]
}
    b5de:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    b5e0:	4413      	add	r3, r2
    b5e2:	600b      	str	r3, [r1, #0]
}
    b5e4:	bf18      	it	ne
    b5e6:	2001      	movne	r0, #1
    b5e8:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b5ea:	4613      	mov	r3, r2
    b5ec:	e7f1      	b.n	b5d2 <nrfx_usbd_feeder_ram_zlp+0xc>

0000b5ee <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    b5ee:	43c3      	mvns	r3, r0
    b5f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b5f4:	f000 000f 	and.w	r0, r0, #15
}
    b5f8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    b5fc:	4770      	bx	lr

0000b5fe <ev_started_handler>:
}
    b5fe:	4770      	bx	lr

0000b600 <nrf_usbd_epin_dma_handler>:
{
    b600:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
    b602:	f7fc fad3 	bl	7bac <usbd_dma_pending_clear>
{
    b606:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    b608:	f7fc f9c6 	bl	7998 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b60c:	7b83      	ldrb	r3, [r0, #14]
    b60e:	2b03      	cmp	r3, #3
    b610:	d10a      	bne.n	b628 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b612:	4608      	mov	r0, r1
    b614:	f7ff ffeb 	bl	b5ee <ep2bit>
    b618:	2301      	movs	r3, #1
    b61a:	fa03 f000 	lsl.w	r0, r3, r0
    b61e:	43c0      	mvns	r0, r0
}
    b620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b624:	f7fc bab2 	b.w	7b8c <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    b628:	6803      	ldr	r3, [r0, #0]
    b62a:	2b00      	cmp	r3, #0
    b62c:	d0f1      	beq.n	b612 <nrf_usbd_epin_dma_handler+0x12>
}
    b62e:	bd08      	pop	{r3, pc}

0000b630 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    b630:	2087      	movs	r0, #135	; 0x87
    b632:	f7ff bfe5 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b636 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    b636:	2086      	movs	r0, #134	; 0x86
    b638:	f7ff bfe2 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b63c <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    b63c:	2085      	movs	r0, #133	; 0x85
    b63e:	f7ff bfdf 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b642 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    b642:	2084      	movs	r0, #132	; 0x84
    b644:	f7ff bfdc 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b648 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    b648:	2083      	movs	r0, #131	; 0x83
    b64a:	f7ff bfd9 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b64e <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    b64e:	2082      	movs	r0, #130	; 0x82
    b650:	f7ff bfd6 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b654 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    b654:	2081      	movs	r0, #129	; 0x81
    b656:	f7ff bfd3 	b.w	b600 <nrf_usbd_epin_dma_handler>

0000b65a <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    b65a:	f7fc bab9 	b.w	7bd0 <nrf_usbd_ep0in_dma_handler>

0000b65e <nrfx_usbd_ep_max_packet_size_set>:
{
    b65e:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    b660:	f7fc f99a 	bl	7998 <ep_state_access>
    p_state->max_packet_size = size;
    b664:	8181      	strh	r1, [r0, #12]
}
    b666:	bd08      	pop	{r3, pc}

0000b668 <nrfx_usbd_ep_status_get>:
{
    b668:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    b66a:	f7fc f995 	bl	7998 <ep_state_access>
	__asm__ volatile(
    b66e:	f04f 0220 	mov.w	r2, #32
    b672:	f3ef 8311 	mrs	r3, BASEPRI
    b676:	f382 8812 	msr	BASEPRI_MAX, r2
    b67a:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    b67e:	6882      	ldr	r2, [r0, #8]
    b680:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b682:	6802      	ldr	r2, [r0, #0]
    b684:	b92a      	cbnz	r2, b692 <nrfx_usbd_ep_status_get+0x2a>
    b686:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    b688:	f383 8811 	msr	BASEPRI, r3
    b68c:	f3bf 8f6f 	isb	sy
}
    b690:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b692:	2004      	movs	r0, #4
    b694:	e7f8      	b.n	b688 <nrfx_usbd_ep_status_get+0x20>

0000b696 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    b696:	2007      	movs	r0, #7
    b698:	f7fc be06 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b69c <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    b69c:	2006      	movs	r0, #6
    b69e:	f7fc be03 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6a2 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    b6a2:	2005      	movs	r0, #5
    b6a4:	f7fc be00 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6a8 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    b6a8:	2004      	movs	r0, #4
    b6aa:	f7fc bdfd 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6ae <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    b6ae:	2003      	movs	r0, #3
    b6b0:	f7fc bdfa 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6b4 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    b6b4:	2002      	movs	r0, #2
    b6b6:	f7fc bdf7 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6ba <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    b6ba:	2001      	movs	r0, #1
    b6bc:	f7fc bdf4 	b.w	82a8 <nrf_usbd_epout_dma_handler>

0000b6c0 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    b6c0:	f7fc bee8 	b.w	8494 <usbd_ep_abort>

0000b6c4 <nrf_gpio_pin_set>:
{
    b6c4:	b507      	push	{r0, r1, r2, lr}
    b6c6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b6c8:	a801      	add	r0, sp, #4
    b6ca:	f7fd f8b7 	bl	883c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b6ce:	9a01      	ldr	r2, [sp, #4]
    b6d0:	2301      	movs	r3, #1
    b6d2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    b6d4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    b6d8:	b003      	add	sp, #12
    b6da:	f85d fb04 	ldr.w	pc, [sp], #4

0000b6de <z_device_state_init>:
}
    b6de:	4770      	bx	lr

0000b6e0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b6e0:	b140      	cbz	r0, b6f4 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b6e2:	68c3      	ldr	r3, [r0, #12]
    b6e4:	7858      	ldrb	r0, [r3, #1]
    b6e6:	f010 0001 	ands.w	r0, r0, #1
    b6ea:	bf1e      	ittt	ne
    b6ec:	7818      	ldrbne	r0, [r3, #0]
    b6ee:	fab0 f080 	clzne	r0, r0
    b6f2:	0940      	lsrne	r0, r0, #5
}
    b6f4:	4770      	bx	lr

0000b6f6 <z_early_memset>:
	(void) memset(dst, c, n);
    b6f6:	f7ff bc4b 	b.w	af90 <memset>

0000b6fa <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    b6fa:	f7ff bc3e 	b.w	af7a <memcpy>

0000b6fe <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b6fe:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    b702:	4313      	orrs	r3, r2
    b704:	f013 0303 	ands.w	r3, r3, #3
    b708:	d10c      	bne.n	b724 <create_free_list+0x26>
	slab->free_list = NULL;
    b70a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b70c:	6881      	ldr	r1, [r0, #8]
    b70e:	4299      	cmp	r1, r3
    b710:	d801      	bhi.n	b716 <create_free_list+0x18>
	return 0;
    b712:	2000      	movs	r0, #0
    b714:	4770      	bx	lr
		*(char **)p = slab->free_list;
    b716:	6941      	ldr	r1, [r0, #20]
    b718:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    b71a:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    b71c:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b71e:	3301      	adds	r3, #1
		p += slab->block_size;
    b720:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    b722:	e7f3      	b.n	b70c <create_free_list+0xe>
		return -EINVAL;
    b724:	f06f 0015 	mvn.w	r0, #21
}
    b728:	4770      	bx	lr

0000b72a <k_mem_slab_init>:
{
    b72a:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    b72c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    b730:	2300      	movs	r3, #0
	slab->buffer = buffer;
    b732:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    b734:	6183      	str	r3, [r0, #24]
{
    b736:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    b738:	f7ff ffe1 	bl	b6fe <create_free_list>
	if (rc < 0) {
    b73c:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    b73e:	bfa8      	it	ge
    b740:	e9c4 4400 	strdge	r4, r4, [r4]
}
    b744:	bd10      	pop	{r4, pc}

0000b746 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b748:	4604      	mov	r4, r0
    b74a:	460d      	mov	r5, r1
	__asm__ volatile(
    b74c:	f04f 0320 	mov.w	r3, #32
    b750:	f3ef 8611 	mrs	r6, BASEPRI
    b754:	f383 8812 	msr	BASEPRI_MAX, r3
    b758:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b75c:	6947      	ldr	r7, [r0, #20]
    b75e:	b977      	cbnz	r7, b77e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b760:	f000 f99b 	bl	ba9a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    b764:	b158      	cbz	r0, b77e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b766:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b768:	6142      	str	r2, [r0, #20]
    b76a:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    b76c:	f000 f936 	bl	b9dc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b770:	4631      	mov	r1, r6
    b772:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    b77a:	f7fd bfa7 	b.w	96cc <z_reschedule>
	**(char ***) mem = slab->free_list;
    b77e:	682b      	ldr	r3, [r5, #0]
    b780:	6962      	ldr	r2, [r4, #20]
    b782:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b784:	682b      	ldr	r3, [r5, #0]
    b786:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b788:	69a3      	ldr	r3, [r4, #24]
    b78a:	3b01      	subs	r3, #1
    b78c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b78e:	f386 8811 	msr	BASEPRI, r6
    b792:	f3bf 8f6f 	isb	sy
}
    b796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b798 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b798:	f3ef 8005 	mrs	r0, IPSR
}
    b79c:	3800      	subs	r0, #0
    b79e:	bf18      	it	ne
    b7a0:	2001      	movne	r0, #1
    b7a2:	4770      	bx	lr

0000b7a4 <z_impl_k_thread_name_set>:
}
    b7a4:	f06f 0057 	mvn.w	r0, #87	; 0x57
    b7a8:	4770      	bx	lr

0000b7aa <k_thread_name_get>:
}
    b7aa:	2000      	movs	r0, #0
    b7ac:	4770      	bx	lr

0000b7ae <z_impl_k_thread_start>:
	z_sched_start(thread);
    b7ae:	f7fd bf9f 	b.w	96f0 <z_sched_start>

0000b7b2 <z_pm_save_idle_exit>:
{
    b7b2:	b508      	push	{r3, lr}
	pm_system_resume();
    b7b4:	f7f6 ff70 	bl	2698 <pm_system_resume>
}
    b7b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b7bc:	f7ff bdd3 	b.w	b366 <sys_clock_idle_exit>

0000b7c0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b7c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b7c4:	428b      	cmp	r3, r1
    b7c6:	d001      	beq.n	b7cc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b7c8:	f7fd bf3a 	b.w	9640 <z_set_prio>
}
    b7cc:	2000      	movs	r0, #0
    b7ce:	4770      	bx	lr

0000b7d0 <z_impl_k_mutex_init>:
{
    b7d0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b7d2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b7d4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    b7d8:	e9c3 3300 	strd	r3, r3, [r3]
}
    b7dc:	4770      	bx	lr

0000b7de <queue_insert>:
{
    b7de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7e2:	4699      	mov	r9, r3
    b7e4:	4604      	mov	r4, r0
    b7e6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b7ea:	460d      	mov	r5, r1
    b7ec:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b7ee:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    b7f2:	f04f 0220 	mov.w	r2, #32
    b7f6:	f3ef 8711 	mrs	r7, BASEPRI
    b7fa:	f382 8812 	msr	BASEPRI_MAX, r2
    b7fe:	f3bf 8f6f 	isb	sy
	if (is_append) {
    b802:	b103      	cbz	r3, b806 <queue_insert+0x28>
	return list->tail;
    b804:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    b806:	4630      	mov	r0, r6
    b808:	f000 f947 	bl	ba9a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    b80c:	b158      	cbz	r0, b826 <queue_insert+0x48>
    b80e:	2300      	movs	r3, #0
    b810:	6783      	str	r3, [r0, #120]	; 0x78
    b812:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    b816:	f000 f8e1 	bl	b9dc <z_ready_thread>
	z_reschedule(&queue->lock, key);
    b81a:	4630      	mov	r0, r6
    b81c:	4639      	mov	r1, r7
    b81e:	f7fd ff55 	bl	96cc <z_reschedule>
		return 0;
    b822:	2000      	movs	r0, #0
    b824:	e00c      	b.n	b840 <queue_insert+0x62>
	if (alloc) {
    b826:	f1b9 0f00 	cmp.w	r9, #0
    b82a:	d01c      	beq.n	b866 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    b82c:	2108      	movs	r1, #8
    b82e:	f7fe fb11 	bl	9e54 <z_thread_aligned_alloc>
		if (anode == NULL) {
    b832:	b938      	cbnz	r0, b844 <queue_insert+0x66>
	__asm__ volatile(
    b834:	f387 8811 	msr	BASEPRI, r7
    b838:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    b83c:	f06f 000b 	mvn.w	r0, #11
}
    b840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    b844:	2201      	movs	r2, #1
		anode->data = data;
    b846:	f8c0 8004 	str.w	r8, [r0, #4]
    b84a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b84c:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b84e:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    b852:	b965      	cbnz	r5, b86e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b854:	6822      	ldr	r2, [r4, #0]
    b856:	430a      	orrs	r2, r1
    b858:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b85a:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    b85c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b85e:	2a00      	cmp	r2, #0
    b860:	d1db      	bne.n	b81a <queue_insert+0x3c>
	list->tail = node;
    b862:	6060      	str	r0, [r4, #4]
}
    b864:	e7d9      	b.n	b81a <queue_insert+0x3c>
	node->next_and_flags = flags;
    b866:	f8c8 9000 	str.w	r9, [r8]
}
    b86a:	4640      	mov	r0, r8
    b86c:	e7ee      	b.n	b84c <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b86e:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    b870:	2a03      	cmp	r2, #3
    b872:	d80b      	bhi.n	b88c <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b874:	6001      	str	r1, [r0, #0]
	return list->tail;
    b876:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    b878:	b911      	cbnz	r1, b880 <queue_insert+0xa2>
	list->head = node;
    b87a:	e9c4 0000 	strd	r0, r0, [r4]
}
    b87e:	e7cc      	b.n	b81a <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b880:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b882:	f002 0203 	and.w	r2, r2, #3
    b886:	4302      	orrs	r2, r0
    b888:	600a      	str	r2, [r1, #0]
    b88a:	e7ea      	b.n	b862 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b88c:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    b890:	430a      	orrs	r2, r1
    b892:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b894:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b896:	f002 0203 	and.w	r2, r2, #3
    b89a:	ea40 0302 	orr.w	r3, r0, r2
    b89e:	602b      	str	r3, [r5, #0]
}
    b8a0:	e7bb      	b.n	b81a <queue_insert+0x3c>

0000b8a2 <z_queue_node_peek>:
{
    b8a2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    b8a4:	4604      	mov	r4, r0
    b8a6:	b130      	cbz	r0, b8b6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b8a8:	6802      	ldr	r2, [r0, #0]
    b8aa:	0793      	lsls	r3, r2, #30
    b8ac:	d003      	beq.n	b8b6 <z_queue_node_peek+0x14>
		ret = anode->data;
    b8ae:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    b8b0:	b109      	cbz	r1, b8b6 <z_queue_node_peek+0x14>
			k_free(anode);
    b8b2:	f000 f9ea 	bl	bc8a <k_free>
}
    b8b6:	4620      	mov	r0, r4
    b8b8:	bd10      	pop	{r4, pc}

0000b8ba <k_queue_append>:
{
    b8ba:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    b8bc:	2301      	movs	r3, #1
    b8be:	9300      	str	r3, [sp, #0]
    b8c0:	2300      	movs	r3, #0
{
    b8c2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    b8c4:	4619      	mov	r1, r3
    b8c6:	f7ff ff8a 	bl	b7de <queue_insert>
}
    b8ca:	b003      	add	sp, #12
    b8cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8d0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b8d0:	b13a      	cbz	r2, b8e2 <z_impl_k_sem_init+0x12>
    b8d2:	428a      	cmp	r2, r1
    b8d4:	d305      	bcc.n	b8e2 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b8d6:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b8da:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b8de:	2000      	movs	r0, #0
    b8e0:	4770      	bx	lr
		return -EINVAL;
    b8e2:	f06f 0015 	mvn.w	r0, #21
}
    b8e6:	4770      	bx	lr

0000b8e8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    b8e8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    b8ea:	2301      	movs	r3, #1
    b8ec:	408b      	lsls	r3, r1
    b8ee:	ea22 0303 	bic.w	r3, r2, r3
    b8f2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    b8f4:	fa22 f001 	lsr.w	r0, r2, r1
}
    b8f8:	f000 0001 	and.w	r0, r0, #1
    b8fc:	4770      	bx	lr

0000b8fe <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    b8fe:	b120      	cbz	r0, b90a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    b900:	2200      	movs	r2, #0
    b902:	4611      	mov	r1, r2
    b904:	3088      	adds	r0, #136	; 0x88
    b906:	f000 b922 	b.w	bb4e <z_sched_wake>
}
    b90a:	4770      	bx	lr

0000b90c <k_work_init>:
{
    b90c:	b538      	push	{r3, r4, r5, lr}
    b90e:	4604      	mov	r4, r0
    b910:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b912:	2210      	movs	r2, #16
    b914:	2100      	movs	r1, #0
    b916:	f7ff fb3b 	bl	af90 <memset>
    b91a:	6065      	str	r5, [r4, #4]
}
    b91c:	bd38      	pop	{r3, r4, r5, pc}

0000b91e <z_work_submit_to_queue>:
{
    b91e:	b513      	push	{r0, r1, r4, lr}
    b920:	9001      	str	r0, [sp, #4]
    b922:	4608      	mov	r0, r1
	__asm__ volatile(
    b924:	f04f 0320 	mov.w	r3, #32
    b928:	f3ef 8411 	mrs	r4, BASEPRI
    b92c:	f383 8812 	msr	BASEPRI_MAX, r3
    b930:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    b934:	a901      	add	r1, sp, #4
    b936:	f7fd fc8b 	bl	9250 <submit_to_queue_locked>
	__asm__ volatile(
    b93a:	f384 8811 	msr	BASEPRI, r4
    b93e:	f3bf 8f6f 	isb	sy
}
    b942:	b002      	add	sp, #8
    b944:	bd10      	pop	{r4, pc}

0000b946 <k_work_submit_to_queue>:
{
    b946:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    b948:	f7ff ffe9 	bl	b91e <z_work_submit_to_queue>
	if (ret > 0) {
    b94c:	1e04      	subs	r4, r0, #0
    b94e:	dd09      	ble.n	b964 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    b950:	f04f 0320 	mov.w	r3, #32
    b954:	f3ef 8011 	mrs	r0, BASEPRI
    b958:	f383 8812 	msr	BASEPRI_MAX, r3
    b95c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b960:	f000 f8cf 	bl	bb02 <z_reschedule_irqlock>
}
    b964:	4620      	mov	r0, r4
    b966:	bd10      	pop	{r4, pc}

0000b968 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    b968:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b96c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b96e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b970:	2300      	movs	r3, #0
	node->prev = NULL;
    b972:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    b976:	4770      	bx	lr

0000b978 <unpend_thread_no_timeout>:
{
    b978:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    b97a:	f7ff fff5 	bl	b968 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b97e:	7b43      	ldrb	r3, [r0, #13]
    b980:	f023 0302 	bic.w	r3, r3, #2
    b984:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    b986:	2300      	movs	r3, #0
    b988:	6083      	str	r3, [r0, #8]
}
    b98a:	bd08      	pop	{r3, pc}

0000b98c <add_to_waitq_locked>:
{
    b98c:	b538      	push	{r3, r4, r5, lr}
    b98e:	4604      	mov	r4, r0
    b990:	460d      	mov	r5, r1
	unready_thread(thread);
    b992:	f7fd fdd7 	bl	9544 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b996:	7b63      	ldrb	r3, [r4, #13]
    b998:	f043 0302 	orr.w	r3, r3, #2
    b99c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    b99e:	b1e5      	cbz	r5, b9da <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    b9a0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    b9a2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b9a4:	429d      	cmp	r5, r3
    b9a6:	d109      	bne.n	b9bc <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    b9a8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    b9aa:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    b9ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b9b0:	606c      	str	r4, [r5, #4]
}
    b9b2:	e012      	b.n	b9da <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    b9b4:	686a      	ldr	r2, [r5, #4]
    b9b6:	4293      	cmp	r3, r2
    b9b8:	d0f6      	beq.n	b9a8 <add_to_waitq_locked+0x1c>
    b9ba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d0f3      	beq.n	b9a8 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    b9c0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    b9c4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    b9c8:	428a      	cmp	r2, r1
    b9ca:	d0f3      	beq.n	b9b4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b9cc:	4291      	cmp	r1, r2
    b9ce:	ddf1      	ble.n	b9b4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    b9d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b9d2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b9d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b9d8:	605c      	str	r4, [r3, #4]
}
    b9da:	bd38      	pop	{r3, r4, r5, pc}

0000b9dc <z_ready_thread>:
{
    b9dc:	b510      	push	{r4, lr}
    b9de:	f04f 0320 	mov.w	r3, #32
    b9e2:	f3ef 8411 	mrs	r4, BASEPRI
    b9e6:	f383 8812 	msr	BASEPRI_MAX, r3
    b9ea:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    b9ee:	f7fd fd75 	bl	94dc <ready_thread>
	__asm__ volatile(
    b9f2:	f384 8811 	msr	BASEPRI, r4
    b9f6:	f3bf 8f6f 	isb	sy
}
    b9fa:	bd10      	pop	{r4, pc}

0000b9fc <z_unpend_thread_no_timeout>:
{
    b9fc:	b508      	push	{r3, lr}
	__asm__ volatile(
    b9fe:	f04f 0220 	mov.w	r2, #32
    ba02:	f3ef 8111 	mrs	r1, BASEPRI
    ba06:	f382 8812 	msr	BASEPRI_MAX, r2
    ba0a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    ba0e:	6883      	ldr	r3, [r0, #8]
    ba10:	b10b      	cbz	r3, ba16 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    ba12:	f7ff ffb1 	bl	b978 <unpend_thread_no_timeout>
	__asm__ volatile(
    ba16:	f381 8811 	msr	BASEPRI, r1
    ba1a:	f3bf 8f6f 	isb	sy
}
    ba1e:	bd08      	pop	{r3, pc}

0000ba20 <z_sched_wake_thread>:
{
    ba20:	b538      	push	{r3, r4, r5, lr}
    ba22:	4604      	mov	r4, r0
	__asm__ volatile(
    ba24:	f04f 0320 	mov.w	r3, #32
    ba28:	f3ef 8511 	mrs	r5, BASEPRI
    ba2c:	f383 8812 	msr	BASEPRI_MAX, r3
    ba30:	f3bf 8f6f 	isb	sy
		if (!killed) {
    ba34:	7b43      	ldrb	r3, [r0, #13]
    ba36:	f013 0f28 	tst.w	r3, #40	; 0x28
    ba3a:	d10b      	bne.n	ba54 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    ba3c:	6883      	ldr	r3, [r0, #8]
    ba3e:	b10b      	cbz	r3, ba44 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    ba40:	f7ff ff9a 	bl	b978 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba44:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    ba46:	b951      	cbnz	r1, ba5e <z_sched_wake_thread+0x3e>
    ba48:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ba4c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    ba4e:	4620      	mov	r0, r4
    ba50:	f7fd fd44 	bl	94dc <ready_thread>
	__asm__ volatile(
    ba54:	f385 8811 	msr	BASEPRI, r5
    ba58:	f3bf 8f6f 	isb	sy
}
    ba5c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ba5e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    ba62:	e7f3      	b.n	ba4c <z_sched_wake_thread+0x2c>

0000ba64 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    ba64:	2101      	movs	r1, #1
    ba66:	3818      	subs	r0, #24
    ba68:	f7ff bfda 	b.w	ba20 <z_sched_wake_thread>

0000ba6c <z_unpend1_no_timeout>:
{
    ba6c:	b508      	push	{r3, lr}
    ba6e:	4603      	mov	r3, r0
	__asm__ volatile(
    ba70:	f04f 0220 	mov.w	r2, #32
    ba74:	f3ef 8111 	mrs	r1, BASEPRI
    ba78:	f382 8812 	msr	BASEPRI_MAX, r2
    ba7c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    ba80:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba82:	4283      	cmp	r3, r0
    ba84:	d007      	beq.n	ba96 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    ba86:	b108      	cbz	r0, ba8c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    ba88:	f7ff ff76 	bl	b978 <unpend_thread_no_timeout>
	__asm__ volatile(
    ba8c:	f381 8811 	msr	BASEPRI, r1
    ba90:	f3bf 8f6f 	isb	sy
}
    ba94:	bd08      	pop	{r3, pc}
    ba96:	2000      	movs	r0, #0
    ba98:	e7f8      	b.n	ba8c <z_unpend1_no_timeout+0x20>

0000ba9a <z_unpend_first_thread>:
{
    ba9a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ba9c:	f04f 0320 	mov.w	r3, #32
    baa0:	f3ef 8511 	mrs	r5, BASEPRI
    baa4:	f383 8812 	msr	BASEPRI_MAX, r3
    baa8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    baac:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    baae:	42a0      	cmp	r0, r4
    bab0:	d00d      	beq.n	bace <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    bab2:	b134      	cbz	r4, bac2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    bab4:	4620      	mov	r0, r4
    bab6:	f7ff ff5f 	bl	b978 <unpend_thread_no_timeout>
    baba:	f104 0018 	add.w	r0, r4, #24
    babe:	f000 f869 	bl	bb94 <z_abort_timeout>
	__asm__ volatile(
    bac2:	f385 8811 	msr	BASEPRI, r5
    bac6:	f3bf 8f6f 	isb	sy
}
    baca:	4620      	mov	r0, r4
    bacc:	bd38      	pop	{r3, r4, r5, pc}
    bace:	2400      	movs	r4, #0
    bad0:	e7f7      	b.n	bac2 <z_unpend_first_thread+0x28>

0000bad2 <z_unpend_thread>:
{
    bad2:	b510      	push	{r4, lr}
    bad4:	4601      	mov	r1, r0
	__asm__ volatile(
    bad6:	f04f 0320 	mov.w	r3, #32
    bada:	f3ef 8411 	mrs	r4, BASEPRI
    bade:	f383 8812 	msr	BASEPRI_MAX, r3
    bae2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    bae6:	6883      	ldr	r3, [r0, #8]
    bae8:	b10b      	cbz	r3, baee <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    baea:	f7ff ff45 	bl	b978 <unpend_thread_no_timeout>
	__asm__ volatile(
    baee:	f384 8811 	msr	BASEPRI, r4
    baf2:	f3bf 8f6f 	isb	sy
}
    baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bafa:	f101 0018 	add.w	r0, r1, #24
    bafe:	f000 b849 	b.w	bb94 <z_abort_timeout>

0000bb02 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bb02:	4603      	mov	r3, r0
    bb04:	b920      	cbnz	r0, bb10 <z_reschedule_irqlock+0xe>
    bb06:	f3ef 8205 	mrs	r2, IPSR
    bb0a:	b90a      	cbnz	r2, bb10 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    bb0c:	f7f7 bfe8 	b.w	3ae0 <arch_swap>
    bb10:	f383 8811 	msr	BASEPRI, r3
    bb14:	f3bf 8f6f 	isb	sy
}
    bb18:	4770      	bx	lr

0000bb1a <z_reschedule_unlocked>:
	__asm__ volatile(
    bb1a:	f04f 0320 	mov.w	r3, #32
    bb1e:	f3ef 8011 	mrs	r0, BASEPRI
    bb22:	f383 8812 	msr	BASEPRI_MAX, r3
    bb26:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bb2a:	f7ff bfea 	b.w	bb02 <z_reschedule_irqlock>

0000bb2e <z_unpend_all>:
{
    bb2e:	b538      	push	{r3, r4, r5, lr}
    bb30:	4605      	mov	r5, r0
	int need_sched = 0;
    bb32:	2000      	movs	r0, #0
	return list->head == list;
    bb34:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb36:	42a5      	cmp	r5, r4
    bb38:	d000      	beq.n	bb3c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    bb3a:	b904      	cbnz	r4, bb3e <z_unpend_all+0x10>
}
    bb3c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    bb3e:	4620      	mov	r0, r4
    bb40:	f7ff ffc7 	bl	bad2 <z_unpend_thread>
		z_ready_thread(thread);
    bb44:	4620      	mov	r0, r4
    bb46:	f7ff ff49 	bl	b9dc <z_ready_thread>
		need_sched = 1;
    bb4a:	2001      	movs	r0, #1
    bb4c:	e7f2      	b.n	bb34 <z_unpend_all+0x6>

0000bb4e <z_sched_wake>:
{
    bb4e:	b538      	push	{r3, r4, r5, lr}
    bb50:	f04f 0320 	mov.w	r3, #32
    bb54:	f3ef 8511 	mrs	r5, BASEPRI
    bb58:	f383 8812 	msr	BASEPRI_MAX, r3
    bb5c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    bb60:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb62:	42a0      	cmp	r0, r4
    bb64:	d012      	beq.n	bb8c <z_sched_wake+0x3e>
		if (thread != NULL) {
    bb66:	b19c      	cbz	r4, bb90 <z_sched_wake+0x42>
    bb68:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    bb6a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    bb6c:	4620      	mov	r0, r4
    bb6e:	f7ff ff03 	bl	b978 <unpend_thread_no_timeout>
    bb72:	f104 0018 	add.w	r0, r4, #24
    bb76:	f000 f80d 	bl	bb94 <z_abort_timeout>
			ready_thread(thread);
    bb7a:	4620      	mov	r0, r4
    bb7c:	f7fd fcae 	bl	94dc <ready_thread>
			ret = true;
    bb80:	2001      	movs	r0, #1
	__asm__ volatile(
    bb82:	f385 8811 	msr	BASEPRI, r5
    bb86:	f3bf 8f6f 	isb	sy
}
    bb8a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    bb8c:	2000      	movs	r0, #0
    bb8e:	e7f8      	b.n	bb82 <z_sched_wake+0x34>
    bb90:	4620      	mov	r0, r4
    bb92:	e7f6      	b.n	bb82 <z_sched_wake+0x34>

0000bb94 <z_abort_timeout>:
{
    bb94:	b510      	push	{r4, lr}
	__asm__ volatile(
    bb96:	f04f 0220 	mov.w	r2, #32
    bb9a:	f3ef 8411 	mrs	r4, BASEPRI
    bb9e:	f382 8812 	msr	BASEPRI_MAX, r2
    bba2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    bba6:	6803      	ldr	r3, [r0, #0]
    bba8:	b13b      	cbz	r3, bbba <z_abort_timeout+0x26>
			remove_timeout(to);
    bbaa:	f7fd ff9b 	bl	9ae4 <remove_timeout>
			ret = 0;
    bbae:	2000      	movs	r0, #0
	__asm__ volatile(
    bbb0:	f384 8811 	msr	BASEPRI, r4
    bbb4:	f3bf 8f6f 	isb	sy
}
    bbb8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    bbba:	f06f 0015 	mvn.w	r0, #21
    bbbe:	e7f7      	b.n	bbb0 <z_abort_timeout+0x1c>

0000bbc0 <z_get_next_timeout_expiry>:
{
    bbc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    bbc2:	f04f 0320 	mov.w	r3, #32
    bbc6:	f3ef 8411 	mrs	r4, BASEPRI
    bbca:	f383 8812 	msr	BASEPRI_MAX, r3
    bbce:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    bbd2:	f7fd ff67 	bl	9aa4 <next_timeout>
	__asm__ volatile(
    bbd6:	f384 8811 	msr	BASEPRI, r4
    bbda:	f3bf 8f6f 	isb	sy
}
    bbde:	bd10      	pop	{r4, pc}

0000bbe0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bbe0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bbe2:	f7fe f87b 	bl	9cdc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bbe6:	bd08      	pop	{r3, pc}

0000bbe8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    bbe8:	f7fe b878 	b.w	9cdc <sys_clock_tick_get>

0000bbec <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bbec:	b108      	cbz	r0, bbf2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bbee:	f7f8 bcef 	b.w	45d0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bbf2:	4770      	bx	lr

0000bbf4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bbf4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    bbf8:	bf08      	it	eq
    bbfa:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    bbfe:	b538      	push	{r3, r4, r5, lr}
    bc00:	460c      	mov	r4, r1
    bc02:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bc04:	d014      	beq.n	bc30 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    bc06:	4308      	orrs	r0, r1
    bc08:	d103      	bne.n	bc12 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    bc0e:	f7fe b865 	b.w	9cdc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    bc12:	f06f 0001 	mvn.w	r0, #1
    bc16:	1b40      	subs	r0, r0, r5
    bc18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc1c:	eb63 0101 	sbc.w	r1, r3, r1
    bc20:	2900      	cmp	r1, #0
    bc22:	da04      	bge.n	bc2e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    bc24:	f7fe f85a 	bl	9cdc <sys_clock_tick_get>
    bc28:	1940      	adds	r0, r0, r5
    bc2a:	eb41 0104 	adc.w	r1, r1, r4
}
    bc2e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    bc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bc34:	4601      	mov	r1, r0
    bc36:	e7fa      	b.n	bc2e <sys_clock_timeout_end_calc+0x3a>

0000bc38 <k_timer_init>:
	timer->status = 0U;
    bc38:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    bc3a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    bc3e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    bc42:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    bc46:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    bc4a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    bc4c:	6343      	str	r3, [r0, #52]	; 0x34
}
    bc4e:	4770      	bx	lr

0000bc50 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    bc50:	b510      	push	{r4, lr}
    bc52:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    bc54:	f7ff ff9e 	bl	bb94 <z_abort_timeout>

	if (inactive) {
    bc58:	b9b0      	cbnz	r0, bc88 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    bc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bc5c:	b10b      	cbz	r3, bc62 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bc5e:	4620      	mov	r0, r4
    bc60:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bc62:	f104 0018 	add.w	r0, r4, #24
    bc66:	f7ff ff01 	bl	ba6c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bc6a:	b168      	cbz	r0, bc88 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    bc6c:	f7ff feb6 	bl	b9dc <z_ready_thread>
	__asm__ volatile(
    bc70:	f04f 0320 	mov.w	r3, #32
    bc74:	f3ef 8011 	mrs	r0, BASEPRI
    bc78:	f383 8812 	msr	BASEPRI_MAX, r3
    bc7c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc84:	f7ff bf3d 	b.w	bb02 <z_reschedule_irqlock>
    bc88:	bd10      	pop	{r4, pc}

0000bc8a <k_free>:
	if (ptr != NULL) {
    bc8a:	b120      	cbz	r0, bc96 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    bc8c:	1f01      	subs	r1, r0, #4
    bc8e:	f850 0c04 	ldr.w	r0, [r0, #-4]
    bc92:	f000 b856 	b.w	bd42 <k_heap_free>
}
    bc96:	4770      	bx	lr

0000bc98 <k_heap_init>:
{
    bc98:	b410      	push	{r4}
    bc9a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    bc9e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    bca2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    bca4:	f7fe bcc7 	b.w	a636 <sys_heap_init>

0000bca8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcac:	b085      	sub	sp, #20
    bcae:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    bcb2:	4607      	mov	r7, r0
    bcb4:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    bcb6:	4650      	mov	r0, sl
    bcb8:	4621      	mov	r1, r4
{
    bcba:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    bcbc:	f7ff ff9a 	bl	bbf4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    bcc0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    bcc4:	bf08      	it	eq
    bcc6:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    bcca:	4605      	mov	r5, r0
    bccc:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    bcce:	bf04      	itt	eq
    bcd0:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    bcd4:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    bcd8:	f107 0a14 	add.w	sl, r7, #20
    bcdc:	f04f 0320 	mov.w	r3, #32
    bce0:	f3ef 8411 	mrs	r4, BASEPRI
    bce4:	f383 8812 	msr	BASEPRI_MAX, r3
    bce8:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    bcec:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    bcf0:	464a      	mov	r2, r9
    bcf2:	4641      	mov	r1, r8
    bcf4:	4638      	mov	r0, r7
    bcf6:	f7fe fc37 	bl	a568 <sys_heap_aligned_alloc>
    bcfa:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    bcfc:	f7fd ffee 	bl	9cdc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    bd00:	9b03      	ldr	r3, [sp, #12]
    bd02:	b13b      	cbz	r3, bd14 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    bd04:	f384 8811 	msr	BASEPRI, r4
    bd08:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    bd0c:	4618      	mov	r0, r3
    bd0e:	b005      	add	sp, #20
    bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    bd14:	1a28      	subs	r0, r5, r0
    bd16:	eb66 0101 	sbc.w	r1, r6, r1
    bd1a:	2801      	cmp	r0, #1
    bd1c:	f171 0200 	sbcs.w	r2, r1, #0
    bd20:	dbf0      	blt.n	bd04 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    bd22:	e9cd 0100 	strd	r0, r1, [sp]
    bd26:	465a      	mov	r2, fp
    bd28:	4621      	mov	r1, r4
    bd2a:	4650      	mov	r0, sl
    bd2c:	f7fd fc6a 	bl	9604 <z_pend_curr>
	__asm__ volatile(
    bd30:	f04f 0320 	mov.w	r3, #32
    bd34:	f3ef 8411 	mrs	r4, BASEPRI
    bd38:	f383 8812 	msr	BASEPRI_MAX, r3
    bd3c:	f3bf 8f6f 	isb	sy
	return k;
    bd40:	e7d6      	b.n	bcf0 <k_heap_aligned_alloc+0x48>

0000bd42 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    bd42:	b538      	push	{r3, r4, r5, lr}
    bd44:	4604      	mov	r4, r0
    bd46:	f04f 0320 	mov.w	r3, #32
    bd4a:	f3ef 8511 	mrs	r5, BASEPRI
    bd4e:	f383 8812 	msr	BASEPRI_MAX, r3
    bd52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    bd56:	f7fe fbcf 	bl	a4f8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    bd5a:	f104 000c 	add.w	r0, r4, #12
    bd5e:	f7ff fee6 	bl	bb2e <z_unpend_all>
    bd62:	b130      	cbz	r0, bd72 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    bd64:	4629      	mov	r1, r5
    bd66:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    bd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    bd6e:	f7fd bcad 	b.w	96cc <z_reschedule>
	__asm__ volatile(
    bd72:	f385 8811 	msr	BASEPRI, r5
    bd76:	f3bf 8f6f 	isb	sy
}
    bd7a:	bd38      	pop	{r3, r4, r5, pc}

0000bd7c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    bd7c:	4770      	bx	lr
	...
